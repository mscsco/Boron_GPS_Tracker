
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/3.2.0-rc.1/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad80  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000beda0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001f0  2003e124  000beda4  0001e124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004dc  2003e318  2003e318  0002e318  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000bef94  000bef94  0001ef94  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000befc0  000befc0  0001efc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b921d  00000000  00000000  0001efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001f107  00000000  00000000  001d81e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004b44d  00000000  00000000  001f72e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003aa0  00000000  00000000  00242735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000d0f0  00000000  00000000  002461d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004868e  00000000  00000000  002532c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0005f991  00000000  00000000  0029b953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d638  00000000  00000000  002fb2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000b2a0  00000000  00000000  0044891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fdb1 	bl	bbb98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fdd3 	bl	bbbe8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e124 	.word	0x2003e124
   b404c:	000beda4 	.word	0x000beda4
   b4050:	2003e314 	.word	0x2003e314
   b4054:	2003e318 	.word	0x2003e318
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fd11 	bl	baa88 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bed5c 	.word	0x000bed5c
   b4080:	000bed94 	.word	0x000bed94

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b85c 	b.w	b4140 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb21 	bl	b46d0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bcb1 	b.w	ba9f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bab3 	b.w	b7600 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bab1 	b.w	b7600 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bab7 	b.w	b7610 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 f9b2 	bl	b7414 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7045 	.word	0x000b7045

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3

000b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b40d2:	2300      	movs	r3, #0
   b40d4:	2202      	movs	r2, #2
   b40d6:	f003 ba03 	b.w	b74e0 <spark_variable>
	...

000b40dc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40dc:	4b0a      	ldr	r3, [pc, #40]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
   b40e2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e4:	f004 fc2c 	bl	b8940 <_ZN5spark10LogManager8instanceEv>
   b40e8:	4621      	mov	r1, r4
   b40ea:	f004 fe64 	bl	b8db6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ee:	f006 fc3b 	bl	ba968 <_Z16_fetch_usbserialv>
   b40f2:	f006 fc2d 	bl	ba950 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f6:	4620      	mov	r0, r4
   b40f8:	4b04      	ldr	r3, [pc, #16]	; (b410c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40fa:	f840 3b04 	str.w	r3, [r0], #4
   b40fe:	f004 fcf5 	bl	b8aec <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}
   b4106:	bf00      	nop
   b4108:	000bdf18 	.word	0x000bdf18
   b410c:	000bdf00 	.word	0x000bdf00

000b4110 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4110:	b510      	push	{r4, lr}
   b4112:	4604      	mov	r4, r0
    }
   b4114:	f7ff ffe2 	bl	b40dc <_ZN5spark16SerialLogHandlerD1Ev>
   b4118:	4620      	mov	r0, r4
   b411a:	2124      	movs	r1, #36	; 0x24
   b411c:	f7ff ffbf 	bl	b409e <_ZdlPvj>
   b4120:	4620      	mov	r0, r4
   b4122:	bd10      	pop	{r4, pc}

000b4124 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	b40e      	push	{r1, r2, r3}
   b4126:	b503      	push	{r0, r1, lr}
   b4128:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b412a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4130:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4132:	f005 fc0a 	bl	b994a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4136:	b002      	add	sp, #8
   b4138:	f85d eb04 	ldr.w	lr, [sp], #4
   b413c:	b003      	add	sp, #12
   b413e:	4770      	bx	lr

000b4140 <setup>:

// product/version
PRODUCT_ID(16112)
PRODUCT_VERSION(7)

void setup() {
   b4140:	b508      	push	{r3, lr}
    //setup serial port
    Serial.begin(9600);
   b4142:	f006 fc11 	bl	ba968 <_Z16_fetch_usbserialv>
   b4146:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b414a:	f006 fbfd 	bl	ba948 <_ZN9USBSerial5beginEl>
  
    //setup GPS port
    Serial1.begin(9600);
   b414e:	f006 fdf3 	bl	bad38 <_Z22__fetch_global_Serial1v>
   b4152:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4156:	f006 fb9f 	bl	ba898 <_ZN11USARTSerial5beginEm>

    //setup BME sensor
    bme.begin();
   b415a:	4815      	ldr	r0, [pc, #84]	; (b41b0 <setup+0x70>)
   b415c:	f000 ff77 	bl	b504e <_ZN15Adafruit_BME2805beginEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b4160:	4914      	ldr	r1, [pc, #80]	; (b41b4 <setup+0x74>)
   b4162:	4815      	ldr	r0, [pc, #84]	; (b41b8 <setup+0x78>)
   b4164:	f7ff ffb5 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4168:	4914      	ldr	r1, [pc, #80]	; (b41bc <setup+0x7c>)
   b416a:	4815      	ldr	r0, [pc, #84]	; (b41c0 <setup+0x80>)
   b416c:	f7ff ffb1 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4170:	4914      	ldr	r1, [pc, #80]	; (b41c4 <setup+0x84>)
   b4172:	4815      	ldr	r0, [pc, #84]	; (b41c8 <setup+0x88>)
   b4174:	f7ff ffad 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4178:	4914      	ldr	r1, [pc, #80]	; (b41cc <setup+0x8c>)
   b417a:	4815      	ldr	r0, [pc, #84]	; (b41d0 <setup+0x90>)
   b417c:	f7ff ffa9 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4180:	4914      	ldr	r1, [pc, #80]	; (b41d4 <setup+0x94>)
   b4182:	4815      	ldr	r0, [pc, #84]	; (b41d8 <setup+0x98>)
   b4184:	f7ff ffa5 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4188:	4914      	ldr	r1, [pc, #80]	; (b41dc <setup+0x9c>)
   b418a:	4815      	ldr	r0, [pc, #84]	; (b41e0 <setup+0xa0>)
   b418c:	2300      	movs	r3, #0
   b418e:	2209      	movs	r2, #9
   b4190:	f003 f9a6 	bl	b74e0 <spark_variable>
   b4194:	2300      	movs	r3, #0
   b4196:	2209      	movs	r2, #9
   b4198:	4912      	ldr	r1, [pc, #72]	; (b41e4 <setup+0xa4>)
   b419a:	4813      	ldr	r0, [pc, #76]	; (b41e8 <setup+0xa8>)
   b419c:	f003 f9a0 	bl	b74e0 <spark_variable>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a0:	f002 ff58 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
    Particle.variable("percent_charge", percent_charge);    
    Particle.variable("longitude", &longitude, DOUBLE);
    Particle.variable("latitude", latitude);

    //from test project
    startFix = millis();
   b41a4:	4b11      	ldr	r3, [pc, #68]	; (b41ec <setup+0xac>)
   b41a6:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   b41a8:	4b11      	ldr	r3, [pc, #68]	; (b41f0 <setup+0xb0>)
   b41aa:	2201      	movs	r2, #1
   b41ac:	701a      	strb	r2, [r3, #0]

}
   b41ae:	bd08      	pop	{r3, pc}
   b41b0:	2003e31c 	.word	0x2003e31c
   b41b4:	2003e49c 	.word	0x2003e49c
   b41b8:	000bdd94 	.word	0x000bdd94
   b41bc:	2003e444 	.word	0x2003e444
   b41c0:	000bdd9b 	.word	0x000bdd9b
   b41c4:	2003e490 	.word	0x2003e490
   b41c8:	000bdda4 	.word	0x000bdda4
   b41cc:	2003e48c 	.word	0x2003e48c
   b41d0:	000bddb4 	.word	0x000bddb4
   b41d4:	2003e488 	.word	0x2003e488
   b41d8:	000bddc3 	.word	0x000bddc3
   b41dc:	2003e480 	.word	0x2003e480
   b41e0:	000bddd2 	.word	0x000bddd2
   b41e4:	2003e450 	.word	0x2003e450
   b41e8:	000bdddc 	.word	0x000bdddc
   b41ec:	2003e494 	.word	0x2003e494
   b41f0:	2003e368 	.word	0x2003e368

000b41f4 <_Z11pushUbidotsv>:
        }
    }

}

void pushUbidots() {
   b41f4:	b570      	push	{r4, r5, r6, lr}

    /* Reserves 10 bytes of memory to store context keys values, add as much as needed */
    char *str_lat = (char *)malloc(sizeof(char) * 10);
   b41f6:	200a      	movs	r0, #10
void pushUbidots() {
   b41f8:	b08e      	sub	sp, #56	; 0x38
    char *str_lat = (char *)malloc(sizeof(char) * 10);
   b41fa:	f003 fa01 	bl	b7600 <malloc>
   b41fe:	4606      	mov	r6, r0
    char *str_lng = (char *)malloc(sizeof(char) * 10);
   b4200:	200a      	movs	r0, #10
   b4202:	f003 f9fd 	bl	b7600 <malloc>
   b4206:	4605      	mov	r5, r0

    /* Saves the coordinates as char*/
    sprintf(str_lat, "%f", gps.location.lat());
   b4208:	483f      	ldr	r0, [pc, #252]	; (b4308 <_Z11pushUbidotsv+0x114>)
   b420a:	f000 ffe9 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b420e:	493f      	ldr	r1, [pc, #252]	; (b430c <_Z11pushUbidotsv+0x118>)
   b4210:	ec53 2b10 	vmov	r2, r3, d0
   b4214:	4630      	mov	r0, r6
   b4216:	f003 fa0b 	bl	b7630 <sprintf>
    sprintf(str_lng, "%f", gps.location.lng());
   b421a:	483b      	ldr	r0, [pc, #236]	; (b4308 <_Z11pushUbidotsv+0x114>)
   b421c:	f001 f804 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   b4220:	493a      	ldr	r1, [pc, #232]	; (b430c <_Z11pushUbidotsv+0x118>)
   b4222:	ec53 2b10 	vmov	r2, r3, d0
   b4226:	4628      	mov	r0, r5
   b4228:	f003 fa02 	bl	b7630 <sprintf>

    /* Reserves memory to store context array */
    char *context = (char *)malloc(sizeof(char) * 50);
   b422c:	2032      	movs	r0, #50	; 0x32
   b422e:	f003 f9e7 	bl	b7600 <malloc>

    /* Adds context key-value pairs */
    char latLabel[] = "lat";
   b4232:	4b37      	ldr	r3, [pc, #220]	; (b4310 <_Z11pushUbidotsv+0x11c>)
   b4234:	9301      	str	r3, [sp, #4]
    char lngLabel[] = "lng";
   b4236:	f5a3 234f 	sub.w	r3, r3, #847872	; 0xcf000
   b423a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
    char *context = (char *)malloc(sizeof(char) * 50);
   b423e:	4604      	mov	r4, r0
    ubidots.addContext(latLabel, str_lat);
   b4240:	4632      	mov	r2, r6
   b4242:	4834      	ldr	r0, [pc, #208]	; (b4314 <_Z11pushUbidotsv+0x120>)
    char lngLabel[] = "lng";
   b4244:	9302      	str	r3, [sp, #8]
    ubidots.addContext(latLabel, str_lat);
   b4246:	a901      	add	r1, sp, #4
   b4248:	f002 fe42 	bl	b6ed0 <_ZN7Ubidots10addContextEPcS0_>
    ubidots.addContext(lngLabel, str_lng);
   b424c:	462a      	mov	r2, r5
   b424e:	4831      	ldr	r0, [pc, #196]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b4250:	a902      	add	r1, sp, #8
   b4252:	f002 fe3d 	bl	b6ed0 <_ZN7Ubidots10addContextEPcS0_>

    /* Builds the context with the coordinates to send to Ubidots */
    ubidots.getContext(context);
   b4256:	482f      	ldr	r0, [pc, #188]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b4258:	4621      	mov	r1, r4
   b425a:	f002 febf 	bl	b6fdc <_ZN7Ubidots10getContextEPc>

    /* Sends the position */
    char positionLabel[] = "location";
   b425e:	4a2e      	ldr	r2, [pc, #184]	; (b4318 <_Z11pushUbidotsv+0x124>)
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   b4260:	ed9f 0a2e 	vldr	s0, [pc, #184]	; b431c <_Z11pushUbidotsv+0x128>
    char positionLabel[] = "location";
   b4264:	6810      	ldr	r0, [r2, #0]
   b4266:	6851      	ldr	r1, [r2, #4]
   b4268:	7a12      	ldrb	r2, [r2, #8]
   b426a:	ab05      	add	r3, sp, #20
   b426c:	c303      	stmia	r3!, {r0, r1}
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   b426e:	4829      	ldr	r0, [pc, #164]	; (b4314 <_Z11pushUbidotsv+0x120>)
    char positionLabel[] = "location";
   b4270:	701a      	strb	r2, [r3, #0]
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   b4272:	a905      	add	r1, sp, #20
   b4274:	4622      	mov	r2, r4
   b4276:	f002 fe1f 	bl	b6eb8 <_ZN7Ubidots3addEPcfS0_>

    //other vars
    char tempLabel[] = "Temperature";
   b427a:	4a29      	ldr	r2, [pc, #164]	; (b4320 <_Z11pushUbidotsv+0x12c>)
   b427c:	6810      	ldr	r0, [r2, #0]
   b427e:	6851      	ldr	r1, [r2, #4]
   b4280:	ab0b      	add	r3, sp, #44	; 0x2c
   b4282:	c303      	stmia	r3!, {r0, r1}
   b4284:	6890      	ldr	r0, [r2, #8]
    char humidityLabel[] = "Humidity";
   b4286:	4a27      	ldr	r2, [pc, #156]	; (b4324 <_Z11pushUbidotsv+0x130>)
    char tempLabel[] = "Temperature";
   b4288:	6018      	str	r0, [r3, #0]
    char humidityLabel[] = "Humidity";
   b428a:	6851      	ldr	r1, [r2, #4]
   b428c:	6810      	ldr	r0, [r2, #0]
   b428e:	7a12      	ldrb	r2, [r2, #8]
   b4290:	ab08      	add	r3, sp, #32
   b4292:	c303      	stmia	r3!, {r0, r1}
   b4294:	701a      	strb	r2, [r3, #0]
    char batteryLabel[] = "Battery";
   b4296:	4a24      	ldr	r2, [pc, #144]	; (b4328 <_Z11pushUbidotsv+0x134>)
   b4298:	6810      	ldr	r0, [r2, #0]
   b429a:	6851      	ldr	r1, [r2, #4]
   b429c:	ab03      	add	r3, sp, #12
   b429e:	c303      	stmia	r3!, {r0, r1}

    ubidots.add(tempLabel, temp_f);
   b42a0:	4b22      	ldr	r3, [pc, #136]	; (b432c <_Z11pushUbidotsv+0x138>)
   b42a2:	481c      	ldr	r0, [pc, #112]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b42a4:	ed93 0a00 	vldr	s0, [r3]
   b42a8:	a90b      	add	r1, sp, #44	; 0x2c
   b42aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b42ae:	f002 fdfa 	bl	b6ea6 <_ZN7Ubidots3addEPcf>
    ubidots.add(humidityLabel, humidity);
   b42b2:	4b1f      	ldr	r3, [pc, #124]	; (b4330 <_Z11pushUbidotsv+0x13c>)
   b42b4:	4817      	ldr	r0, [pc, #92]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b42b6:	ed93 0a00 	vldr	s0, [r3]
   b42ba:	a908      	add	r1, sp, #32
   b42bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b42c0:	f002 fdf1 	bl	b6ea6 <_ZN7Ubidots3addEPcf>
    ubidots.add(batteryLabel, percent_charge);
   b42c4:	4b1b      	ldr	r3, [pc, #108]	; (b4334 <_Z11pushUbidotsv+0x140>)
   b42c6:	4813      	ldr	r0, [pc, #76]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b42c8:	ed93 0a00 	vldr	s0, [r3]
   b42cc:	a903      	add	r1, sp, #12
   b42ce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b42d2:	f002 fde8 	bl	b6ea6 <_ZN7Ubidots3addEPcf>

    bool bufferSent = false;
    bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); // Will use particle webhooks to send data
   b42d6:	4b18      	ldr	r3, [pc, #96]	; (b4338 <_Z11pushUbidotsv+0x144>)
   b42d8:	480e      	ldr	r0, [pc, #56]	; (b4314 <_Z11pushUbidotsv+0x120>)
   b42da:	781a      	ldrb	r2, [r3, #0]
   b42dc:	4b17      	ldr	r3, [pc, #92]	; (b433c <_Z11pushUbidotsv+0x148>)
   b42de:	6819      	ldr	r1, [r3, #0]
   b42e0:	f002 fdf2 	bl	b6ec8 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

    if (bufferSent)
   b42e4:	b120      	cbz	r0, b42f0 <_Z11pushUbidotsv+0xfc>
    {
        // Do something if values were sent properly
        Serial.println("Values sent by the device");
   b42e6:	f006 fb3f 	bl	ba968 <_Z16_fetch_usbserialv>
   b42ea:	4915      	ldr	r1, [pc, #84]	; (b4340 <_Z11pushUbidotsv+0x14c>)
   b42ec:	f005 fa2d 	bl	b974a <_ZN5Print7printlnEPKc>
    }

    /* frees memory */
    free(str_lat);
   b42f0:	4630      	mov	r0, r6
   b42f2:	f003 f98d 	bl	b7610 <free>
    free(str_lng);
   b42f6:	4628      	mov	r0, r5
   b42f8:	f003 f98a 	bl	b7610 <free>
    free(context);
   b42fc:	4620      	mov	r0, r4
   b42fe:	f003 f987 	bl	b7610 <free>
   b4302:	b00e      	add	sp, #56	; 0x38
   b4304:	bd70      	pop	{r4, r5, r6, pc}
   b4306:	bf00      	nop
   b4308:	2003e36c 	.word	0x2003e36c
   b430c:	000bde22 	.word	0x000bde22
   b4310:	0074616c 	.word	0x0074616c
   b4314:	2003e4a0 	.word	0x2003e4a0
   b4318:	000bdec9 	.word	0x000bdec9
   b431c:	00000000 	.word	0x00000000
   b4320:	000bddff 	.word	0x000bddff
   b4324:	000bde0b 	.word	0x000bde0b
   b4328:	000bde14 	.word	0x000bde14
   b432c:	2003e49c 	.word	0x2003e49c
   b4330:	2003e444 	.word	0x2003e444
   b4334:	2003e488 	.word	0x2003e488
   b4338:	2003e318 	.word	0x2003e318
   b433c:	2003e124 	.word	0x2003e124
   b4340:	000bdde5 	.word	0x000bdde5
   b4344:	00000000 	.word	0x00000000

000b4348 <_Z11displayInfov.part.0>:
void displayInfo()
   b4348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b434c:	ed2d 8b04 	vpush	{d8-d9}
   b4350:	b0f1      	sub	sp, #452	; 0x1c4
   b4352:	f002 fe7f 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
        lastSerial = millis();
   b4356:	4bba      	ldr	r3, [pc, #744]	; (b4640 <_Z11displayInfov.part.0+0x2f8>)
        temp_f = (temp_c * 1.8) + 32;
   b4358:	4eba      	ldr	r6, [pc, #744]	; (b4644 <_Z11displayInfov.part.0+0x2fc>)
        lastSerial = millis();
   b435a:	6018      	str	r0, [r3, #0]
        temp_c = (int8_t)bme.readTemperature();
   b435c:	48ba      	ldr	r0, [pc, #744]	; (b4648 <_Z11displayInfov.part.0+0x300>)
        humidity = (uint8_t)bme.readHumidity();
   b435e:	4fbb      	ldr	r7, [pc, #748]	; (b464c <_Z11displayInfov.part.0+0x304>)
        temp_c = (int8_t)bme.readTemperature();
   b4360:	f000 fda2 	bl	b4ea8 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4368:	4bb9      	ldr	r3, [pc, #740]	; (b4650 <_Z11displayInfov.part.0+0x308>)
   b436a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b436e:	f99d 0024 	ldrsb.w	r0, [sp, #36]	; 0x24
   b4372:	6018      	str	r0, [r3, #0]
        temp_f = (temp_c * 1.8) + 32;
   b4374:	f007 f82a 	bl	bb3cc <__aeabi_i2d>
   b4378:	a3af      	add	r3, pc, #700	; (adr r3, b4638 <_Z11displayInfov.part.0+0x2f0>)
   b437a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b437e:	f007 f88f 	bl	bb4a0 <__aeabi_dmul>
   b4382:	2200      	movs	r2, #0
   b4384:	4bb3      	ldr	r3, [pc, #716]	; (b4654 <_Z11displayInfov.part.0+0x30c>)
   b4386:	f006 fed5 	bl	bb134 <__adddf3>
   b438a:	f007 fb39 	bl	bba00 <__aeabi_d2iz>
   b438e:	6030      	str	r0, [r6, #0]
        humidity = (uint8_t)bme.readHumidity();
   b4390:	48ad      	ldr	r0, [pc, #692]	; (b4648 <_Z11displayInfov.part.0+0x300>)
   b4392:	f000 fdb9 	bl	b4f08 <_ZN15Adafruit_BME28012readHumidityEv>
   b4396:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        voltage = (uint8_t)fuel.getVCell();
   b439a:	48af      	ldr	r0, [pc, #700]	; (b4658 <_Z11displayInfov.part.0+0x310>)
        humidity = (uint8_t)bme.readHumidity();
   b439c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b43a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b43a4:	603b      	str	r3, [r7, #0]
        voltage = (uint8_t)fuel.getVCell();
   b43a6:	f003 fe3b 	bl	b8020 <_ZN9FuelGauge8getVCellEv>
   b43aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b43ae:	4aab      	ldr	r2, [pc, #684]	; (b465c <_Z11displayInfov.part.0+0x314>)
   b43b0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b43b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b43b8:	6013      	str	r3, [r2, #0]
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   b43ba:	a914      	add	r1, sp, #80	; 0x50
    const diag_source* src = nullptr;
   b43bc:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b43be:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b43c0:	9214      	str	r2, [sp, #80]	; 0x50
    const int ret = diag_get_source(id, &src, nullptr);
   b43c2:	f003 f847 	bl	b7454 <diag_get_source>
   b43c6:	ac0c      	add	r4, sp, #48	; 0x30
    if (ret != SYSTEM_ERROR_NONE) {
   b43c8:	2800      	cmp	r0, #0
   b43ca:	f040 8100 	bne.w	b45ce <_Z11displayInfov.part.0+0x286>
        return ret;
    }
    return get(src, val);
   b43ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
    SPARK_ASSERT(src && src->callback);
   b43d0:	b10d      	cbz	r5, b43d6 <_Z11displayInfov.part.0+0x8e>
   b43d2:	692b      	ldr	r3, [r5, #16]
   b43d4:	b923      	cbnz	r3, b43e0 <_Z11displayInfov.part.0+0x98>
   b43d6:	4aa2      	ldr	r2, [pc, #648]	; (b4660 <_Z11displayInfov.part.0+0x318>)
   b43d8:	2100      	movs	r1, #0
   b43da:	200a      	movs	r0, #10
   b43dc:	f003 f81a 	bl	b7414 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b43e0:	230c      	movs	r3, #12
   b43e2:	e9cd 3434 	strd	r3, r4, [sp, #208]	; 0xd0
   b43e6:	2304      	movs	r3, #4
   b43e8:	9336      	str	r3, [sp, #216]	; 0xd8
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b43ea:	692b      	ldr	r3, [r5, #16]
   b43ec:	aa34      	add	r2, sp, #208	; 0xd0
   b43ee:	2101      	movs	r1, #1
   b43f0:	4628      	mov	r0, r5
   b43f2:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b43f4:	2800      	cmp	r0, #0
   b43f6:	f040 80ea 	bne.w	b45ce <_Z11displayInfov.part.0+0x286>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b43fa:	8823      	ldrh	r3, [r4, #0]
   b43fc:	ee07 3a90 	vmov	s15, r3
   b4400:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        percent_charge = (uint8_t)System.batteryCharge();
   b4404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b4408:	4d96      	ldr	r5, [pc, #600]	; (b4664 <_Z11displayInfov.part.0+0x31c>)
   b440a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b440e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        CellularSignal sig = Cellular.RSSI();
   b4412:	4995      	ldr	r1, [pc, #596]	; (b4668 <_Z11displayInfov.part.0+0x320>)
        percent_charge = (uint8_t)System.batteryCharge();
   b4414:	602b      	str	r3, [r5, #0]
        CellularSignal sig = Cellular.RSSI();
   b4416:	4620      	mov	r0, r4
   b4418:	f003 f9de 	bl	b77d8 <_ZN5spark13CellularClass4RSSIEv>
        signal_strength  = (uint8_t)sig.getStrength();
   b441c:	4620      	mov	r0, r4
   b441e:	f003 fa57 	bl	b78d0 <_ZNK14CellularSignal11getStrengthEv>
   b4422:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b4426:	f8df 827c 	ldr.w	r8, [pc, #636]	; b46a4 <_Z11displayInfov.part.0+0x35c>
   b442a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b442e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4432:	f8c8 3000 	str.w	r3, [r8]
        signal_quality = (uint8_t)sig.getQuality();        
   b4436:	4620      	mov	r0, r4
   b4438:	f003 fa7a 	bl	b7930 <_ZNK14CellularSignal10getQualityEv>
   b443c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b4440:	f8df 9264 	ldr.w	r9, [pc, #612]	; b46a8 <_Z11displayInfov.part.0+0x360>

struct TinyGPSLocation
{
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   b4444:	4c89      	ldr	r4, [pc, #548]	; (b466c <_Z11displayInfov.part.0+0x324>)
   b4446:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b444a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b444e:	f8c9 3000 	str.w	r3, [r9]
        if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   b4452:	7823      	ldrb	r3, [r4, #0]
   b4454:	2b00      	cmp	r3, #0
   b4456:	f000 80bd 	beq.w	b45d4 <_Z11displayInfov.part.0+0x28c>
   b445a:	f002 fdfb 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   b445e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b4460:	1ac0      	subs	r0, r0, r3
   b4462:	f242 730f 	movw	r3, #9999	; 0x270f
   b4466:	4298      	cmp	r0, r3
   b4468:	f200 80b4 	bhi.w	b45d4 <_Z11displayInfov.part.0+0x28c>
            snprintf(buf, sizeof(buf), "%f", gps.location.lat());
   b446c:	4620      	mov	r0, r4
   b446e:	f000 feb7 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b4472:	4a7f      	ldr	r2, [pc, #508]	; (b4670 <_Z11displayInfov.part.0+0x328>)
   b4474:	2180      	movs	r1, #128	; 0x80
   b4476:	ed8d 0b00 	vstr	d0, [sp]
   b447a:	a814      	add	r0, sp, #80	; 0x50
   b447c:	f003 f8e0 	bl	b7640 <snprintf>
            snprintf(buf, sizeof(buf), "%f", gps.location.lng());
   b4480:	4620      	mov	r0, r4
   b4482:	f000 fed1 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   b4486:	4a7a      	ldr	r2, [pc, #488]	; (b4670 <_Z11displayInfov.part.0+0x328>)
   b4488:	2180      	movs	r1, #128	; 0x80
   b448a:	ed8d 0b00 	vstr	d0, [sp]
   b448e:	a814      	add	r0, sp, #80	; 0x50
   b4490:	f003 f8d6 	bl	b7640 <snprintf>
            latitude = gps.location.lat();
   b4494:	4620      	mov	r0, r4
   b4496:	f000 fea3 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b449a:	4b76      	ldr	r3, [pc, #472]	; (b4674 <_Z11displayInfov.part.0+0x32c>)
            longitude = gps.location.lng();
   b449c:	4620      	mov	r0, r4
            latitude = gps.location.lat();
   b449e:	ed83 0b00 	vstr	d0, [r3]
            longitude = gps.location.lng();
   b44a2:	f000 fec1 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   b44a6:	4b74      	ldr	r3, [pc, #464]	; (b4678 <_Z11displayInfov.part.0+0x330>)
            snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
   b44a8:	4620      	mov	r0, r4
            longitude = gps.location.lng();
   b44aa:	ed83 0b00 	vstr	d0, [r3]
            snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
   b44ae:	f000 fe97 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b44b2:	4620      	mov	r0, r4
   b44b4:	eeb0 8a40 	vmov.f32	s16, s0
   b44b8:	eef0 8a60 	vmov.f32	s17, s1
   b44bc:	f000 feb4 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   b44c0:	2700      	movs	r7, #0
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   b44c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   int32_t value()         { updated = false; return val; }
   b44c6:	f884 7079 	strb.w	r7, [r4, #121]	; 0x79
   b44ca:	eeb0 9a40 	vmov.f32	s18, s0
   b44ce:	eef0 9a60 	vmov.f32	s19, s1
   double meters()       { return value() / 100.0; }
   b44d2:	f006 ff7b 	bl	bb3cc <__aeabi_i2d>
   b44d6:	4b69      	ldr	r3, [pc, #420]	; (b467c <_Z11displayInfov.part.0+0x334>)
   b44d8:	2200      	movs	r2, #0
   b44da:	f007 f90b 	bl	bb6f4 <__aeabi_ddiv>
   b44de:	ed8d 8b00 	vstr	d8, [sp]
   b44e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b44e6:	4a66      	ldr	r2, [pc, #408]	; (b4680 <_Z11displayInfov.part.0+0x338>)
   b44e8:	2180      	movs	r1, #128	; 0x80
   b44ea:	ed8d 9b02 	vstr	d9, [sp, #8]
   b44ee:	a814      	add	r0, sp, #80	; 0x50
   b44f0:	f003 f8a6 	bl	b7640 <snprintf>
            snprintf(pubbuf, sizeof(pubbuf), "{\"temp_f\":\"%d\",\"humidity\":\"%d\",\"percent_charge\":\"%d\",\"signal_strength\":\"%d\",\"signal_quality\":\"%d\",\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", temp_f, humidity, percent_charge, signal_strength, signal_quality, gps.location.lat(), gps.location.lng());
   b44f4:	4a55      	ldr	r2, [pc, #340]	; (b464c <_Z11displayInfov.part.0+0x304>)
   b44f6:	6833      	ldr	r3, [r6, #0]
   b44f8:	9309      	str	r3, [sp, #36]	; 0x24
   b44fa:	4620      	mov	r0, r4
   b44fc:	6816      	ldr	r6, [r2, #0]
   b44fe:	682d      	ldr	r5, [r5, #0]
   b4500:	f8d8 8000 	ldr.w	r8, [r8]
   b4504:	f8d9 9000 	ldr.w	r9, [r9]
   b4508:	f000 fe6a 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b450c:	4620      	mov	r0, r4
   b450e:	eeb0 8a40 	vmov.f32	s16, s0
   b4512:	eef0 8a60 	vmov.f32	s17, s1
   b4516:	f000 fe87 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   b451a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b451c:	4a59      	ldr	r2, [pc, #356]	; (b4684 <_Z11displayInfov.part.0+0x33c>)
   b451e:	ed8d 0b06 	vstr	d0, [sp, #24]
   b4522:	21f0      	movs	r1, #240	; 0xf0
   b4524:	ed8d 8b04 	vstr	d8, [sp, #16]
   b4528:	e9cd 8902 	strd	r8, r9, [sp, #8]
   b452c:	e9cd 6500 	strd	r6, r5, [sp]
   b4530:	a834      	add	r0, sp, #208	; 0xd0
   b4532:	f003 f885 	bl	b7640 <snprintf>
            Serial.println(pubbuf);
   b4536:	f006 fa17 	bl	ba968 <_Z16_fetch_usbserialv>
   b453a:	a934      	add	r1, sp, #208	; 0xd0
   b453c:	f005 f905 	bl	b974a <_ZN5Print7printlnEPKc>
            if (gettingFix) {
   b4540:	4b51      	ldr	r3, [pc, #324]	; (b4688 <_Z11displayInfov.part.0+0x340>)
   b4542:	781a      	ldrb	r2, [r3, #0]
   b4544:	b162      	cbz	r2, b4560 <_Z11displayInfov.part.0+0x218>
                gettingFix = false;
   b4546:	701f      	strb	r7, [r3, #0]
   b4548:	f002 fd84 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
                unsigned long elapsed = millis() - startFix;
   b454c:	4b4f      	ldr	r3, [pc, #316]	; (b468c <_Z11displayInfov.part.0+0x344>)
   b454e:	681a      	ldr	r2, [r3, #0]
   b4550:	1a82      	subs	r2, r0, r2
   b4552:	9209      	str	r2, [sp, #36]	; 0x24
                Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   b4554:	f006 fa08 	bl	ba968 <_Z16_fetch_usbserialv>
   b4558:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b455a:	494d      	ldr	r1, [pc, #308]	; (b4690 <_Z11displayInfov.part.0+0x348>)
   b455c:	f7ff fde2 	bl	b4124 <_ZN5Print8printlnfEPKcz>
        Serial.println(buf);
   b4560:	f006 fa02 	bl	ba968 <_Z16_fetch_usbserialv>
   b4564:	a914      	add	r1, sp, #80	; 0x50
   b4566:	f005 f8f0 	bl	b974a <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b456a:	f002 ffc9 	bl	b7500 <spark_cloud_flag_connected>
        if (Particle.connected()) {
   b456e:	b348      	cbz	r0, b45c4 <_Z11displayInfov.part.0+0x27c>
            if (millis() - lastPublish >= PUBLISH_PERIOD) {
   b4570:	4c48      	ldr	r4, [pc, #288]	; (b4694 <_Z11displayInfov.part.0+0x34c>)
   b4572:	f002 fd6f 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   b4576:	6823      	ldr	r3, [r4, #0]
   b4578:	1ac0      	subs	r0, r0, r3
   b457a:	f247 532f 	movw	r3, #29999	; 0x752f
   b457e:	4298      	cmp	r0, r3
   b4580:	d920      	bls.n	b45c4 <_Z11displayInfov.part.0+0x27c>
   b4582:	f002 fd67 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   b4586:	4b44      	ldr	r3, [pc, #272]	; (b4698 <_Z11displayInfov.part.0+0x350>)
                lastPublish = millis();
   b4588:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b458a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b458c:	f88d 3000 	strb.w	r3, [sp]
   b4590:	4942      	ldr	r1, [pc, #264]	; (b469c <_Z11displayInfov.part.0+0x354>)
   b4592:	233c      	movs	r3, #60	; 0x3c
   b4594:	aa34      	add	r2, sp, #208	; 0xd0
   b4596:	a80a      	add	r0, sp, #40	; 0x28
   b4598:	f003 fb32 	bl	b7c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b459c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b459e:	b17c      	cbz	r4, b45c0 <_Z11displayInfov.part.0+0x278>
      if (--_M_use_count == 0)
   b45a0:	6863      	ldr	r3, [r4, #4]
   b45a2:	3b01      	subs	r3, #1
   b45a4:	6063      	str	r3, [r4, #4]
   b45a6:	b95b      	cbnz	r3, b45c0 <_Z11displayInfov.part.0+0x278>
          _M_dispose();
   b45a8:	6823      	ldr	r3, [r4, #0]
   b45aa:	4620      	mov	r0, r4
   b45ac:	689b      	ldr	r3, [r3, #8]
   b45ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b45b0:	68a3      	ldr	r3, [r4, #8]
   b45b2:	3b01      	subs	r3, #1
   b45b4:	60a3      	str	r3, [r4, #8]
   b45b6:	b91b      	cbnz	r3, b45c0 <_Z11displayInfov.part.0+0x278>
            _M_destroy();
   b45b8:	6823      	ldr	r3, [r4, #0]
   b45ba:	4620      	mov	r0, r4
   b45bc:	68db      	ldr	r3, [r3, #12]
   b45be:	4798      	blx	r3
                pushUbidots();
   b45c0:	f7ff fe18 	bl	b41f4 <_Z11pushUbidotsv>
}
   b45c4:	b071      	add	sp, #452	; 0x1c4
   b45c6:	ecbd 8b04 	vpop	{d8-d9}
   b45ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return -1.0f;
   b45ce:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b45d2:	e717      	b.n	b4404 <_Z11displayInfov.part.0+0xbc>
            strcpy(buf, "no location");
   b45d4:	4932      	ldr	r1, [pc, #200]	; (b46a0 <_Z11displayInfov.part.0+0x358>)
   b45d6:	a814      	add	r0, sp, #80	; 0x50
   b45d8:	f007 fb5d 	bl	bbc96 <strcpy>
            snprintf(pubbuf, sizeof(pubbuf), "{\"temp_f\":\"%d\",\"humidity\":\"%d\",\"percent_charge\":\"%d\",\"signal_strength\":\"%d\",\"signal_quality\":\"%d\",\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", temp_f, humidity, percent_charge, signal_strength, signal_quality, gps.location.lat(), gps.location.lng());
   b45dc:	4a21      	ldr	r2, [pc, #132]	; (b4664 <_Z11displayInfov.part.0+0x31c>)
   b45de:	6833      	ldr	r3, [r6, #0]
   b45e0:	6815      	ldr	r5, [r2, #0]
   b45e2:	4a30      	ldr	r2, [pc, #192]	; (b46a4 <_Z11displayInfov.part.0+0x35c>)
   b45e4:	4821      	ldr	r0, [pc, #132]	; (b466c <_Z11displayInfov.part.0+0x324>)
   b45e6:	6816      	ldr	r6, [r2, #0]
   b45e8:	4a2f      	ldr	r2, [pc, #188]	; (b46a8 <_Z11displayInfov.part.0+0x360>)
   b45ea:	683c      	ldr	r4, [r7, #0]
   b45ec:	9309      	str	r3, [sp, #36]	; 0x24
   b45ee:	6817      	ldr	r7, [r2, #0]
   b45f0:	f000 fdf6 	bl	b51e0 <_ZN15TinyGPSLocation3latEv>
   b45f4:	481d      	ldr	r0, [pc, #116]	; (b466c <_Z11displayInfov.part.0+0x324>)
   b45f6:	eeb0 8a40 	vmov.f32	s16, s0
   b45fa:	eef0 8a60 	vmov.f32	s17, s1
   b45fe:	f000 fe13 	bl	b5228 <_ZN15TinyGPSLocation3lngEv>
   b4602:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4604:	4a1f      	ldr	r2, [pc, #124]	; (b4684 <_Z11displayInfov.part.0+0x33c>)
   b4606:	ed8d 0b06 	vstr	d0, [sp, #24]
   b460a:	ed8d 8b04 	vstr	d8, [sp, #16]
   b460e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4612:	e9cd 4500 	strd	r4, r5, [sp]
   b4616:	21f0      	movs	r1, #240	; 0xf0
   b4618:	a834      	add	r0, sp, #208	; 0xd0
   b461a:	f003 f811 	bl	b7640 <snprintf>
            if (!gettingFix) {
   b461e:	4b1a      	ldr	r3, [pc, #104]	; (b4688 <_Z11displayInfov.part.0+0x340>)
   b4620:	781a      	ldrb	r2, [r3, #0]
   b4622:	2a00      	cmp	r2, #0
   b4624:	d19c      	bne.n	b4560 <_Z11displayInfov.part.0+0x218>
                gettingFix = true;
   b4626:	2201      	movs	r2, #1
   b4628:	701a      	strb	r2, [r3, #0]
   b462a:	f002 fd13 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
                startFix = millis();
   b462e:	4b17      	ldr	r3, [pc, #92]	; (b468c <_Z11displayInfov.part.0+0x344>)
   b4630:	6018      	str	r0, [r3, #0]
   b4632:	e795      	b.n	b4560 <_Z11displayInfov.part.0+0x218>
   b4634:	f3af 8000 	nop.w
   b4638:	cccccccd 	.word	0xcccccccd
   b463c:	3ffccccc 	.word	0x3ffccccc
   b4640:	2003e44c 	.word	0x2003e44c
   b4644:	2003e49c 	.word	0x2003e49c
   b4648:	2003e31c 	.word	0x2003e31c
   b464c:	2003e444 	.word	0x2003e444
   b4650:	2003e498 	.word	0x2003e498
   b4654:	40400000 	.word	0x40400000
   b4658:	2003e360 	.word	0x2003e360
   b465c:	2003e4ac 	.word	0x2003e4ac
   b4660:	000b7045 	.word	0x000b7045
   b4664:	2003e488 	.word	0x2003e488
   b4668:	2003e658 	.word	0x2003e658
   b466c:	2003e36c 	.word	0x2003e36c
   b4670:	000bde22 	.word	0x000bde22
   b4674:	2003e450 	.word	0x2003e450
   b4678:	2003e480 	.word	0x2003e480
   b467c:	40590000 	.word	0x40590000
   b4680:	000bde1c 	.word	0x000bde1c
   b4684:	000bde25 	.word	0x000bde25
   b4688:	2003e368 	.word	0x2003e368
   b468c:	2003e494 	.word	0x2003e494
   b4690:	000bded2 	.word	0x000bded2
   b4694:	2003e448 	.word	0x2003e448
   b4698:	2003e319 	.word	0x2003e319
   b469c:	000bdef2 	.word	0x000bdef2
   b46a0:	000bdec6 	.word	0x000bdec6
   b46a4:	2003e490 	.word	0x2003e490
   b46a8:	2003e48c 	.word	0x2003e48c

000b46ac <_Z11displayInfov>:
{
   b46ac:	b508      	push	{r3, lr}
   b46ae:	f002 fcd1 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastSerial >= SERIAL_PERIOD) {
   b46b2:	4b06      	ldr	r3, [pc, #24]	; (b46cc <_Z11displayInfov+0x20>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	1ac0      	subs	r0, r0, r3
   b46b8:	f242 730f 	movw	r3, #9999	; 0x270f
   b46bc:	4298      	cmp	r0, r3
   b46be:	d903      	bls.n	b46c8 <_Z11displayInfov+0x1c>
}
   b46c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b46c4:	f7ff be40 	b.w	b4348 <_Z11displayInfov.part.0>
   b46c8:	bd08      	pop	{r3, pc}
   b46ca:	bf00      	nop
   b46cc:	2003e44c 	.word	0x2003e44c

000b46d0 <loop>:
{
   b46d0:	b510      	push	{r4, lr}
        if (gps.encode(Serial1.read())) {
   b46d2:	4c0b      	ldr	r4, [pc, #44]	; (b4700 <loop+0x30>)
    while (Serial1.available() > 0) {
   b46d4:	f006 fb30 	bl	bad38 <_Z22__fetch_global_Serial1v>
   b46d8:	6803      	ldr	r3, [r0, #0]
   b46da:	691b      	ldr	r3, [r3, #16]
   b46dc:	4798      	blx	r3
   b46de:	2800      	cmp	r0, #0
   b46e0:	dd0d      	ble.n	b46fe <loop+0x2e>
        if (gps.encode(Serial1.read())) {
   b46e2:	f006 fb29 	bl	bad38 <_Z22__fetch_global_Serial1v>
   b46e6:	6803      	ldr	r3, [r0, #0]
   b46e8:	695b      	ldr	r3, [r3, #20]
   b46ea:	4798      	blx	r3
   b46ec:	b2c1      	uxtb	r1, r0
   b46ee:	4620      	mov	r0, r4
   b46f0:	f000 ff44 	bl	b557c <_ZN11TinyGPSPlus6encodeEc>
   b46f4:	2800      	cmp	r0, #0
   b46f6:	d0ed      	beq.n	b46d4 <loop+0x4>
            displayInfo();
   b46f8:	f7ff ffd8 	bl	b46ac <_Z11displayInfov>
   b46fc:	e7ea      	b.n	b46d4 <loop+0x4>
}
   b46fe:	bd10      	pop	{r4, pc}
   b4700:	2003e36c 	.word	0x2003e36c

000b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4704:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4706:	e9d0 5300 	ldrd	r5, r3, [r0]
   b470a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b470c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b470e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4712:	42ae      	cmp	r6, r5
   b4714:	d004      	beq.n	b4720 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4716:	4628      	mov	r0, r5
   b4718:	f005 fa00 	bl	b9b1c <_ZN6StringD1Ev>
   b471c:	3514      	adds	r5, #20
   b471e:	e7f8      	b.n	b4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4720:	6820      	ldr	r0, [r4, #0]
   b4722:	f002 ff75 	bl	b7610 <free>
    AllocatorT::free(data_);
}
   b4726:	4620      	mov	r0, r4
   b4728:	bd70      	pop	{r4, r5, r6, pc}

000b472a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b472a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b472e:	4604      	mov	r4, r0
   b4730:	460d      	mov	r5, r1
   b4732:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4734:	d916      	bls.n	b4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4736:	4290      	cmp	r0, r2
   b4738:	d215      	bcs.n	b4766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b473a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b473e:	1a75      	subs	r5, r6, r1
   b4740:	f1a1 0714 	sub.w	r7, r1, #20
   b4744:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4746:	42b7      	cmp	r7, r6
   b4748:	d01c      	beq.n	b4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b474a:	b12c      	cbz	r4, b4758 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b474c:	4631      	mov	r1, r6
   b474e:	4620      	mov	r0, r4
   b4750:	f005 fa4c 	bl	b9bec <_ZN6StringC1EOS_>
   b4754:	7c33      	ldrb	r3, [r6, #16]
   b4756:	7423      	strb	r3, [r4, #16]
   b4758:	4630      	mov	r0, r6
   b475a:	f005 f9df 	bl	b9b1c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b475e:	3e14      	subs	r6, #20
   b4760:	3c14      	subs	r4, #20
   b4762:	e7f0      	b.n	b4746 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4764:	d00e      	beq.n	b4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4766:	42b5      	cmp	r5, r6
   b4768:	d00c      	beq.n	b4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b476a:	b12c      	cbz	r4, b4778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b476c:	4629      	mov	r1, r5
   b476e:	4620      	mov	r0, r4
   b4770:	f005 fa3c 	bl	b9bec <_ZN6StringC1EOS_>
   b4774:	7c2b      	ldrb	r3, [r5, #16]
   b4776:	7423      	strb	r3, [r4, #16]
   b4778:	4628      	mov	r0, r5
   b477a:	f005 f9cf 	bl	b9b1c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b477e:	3514      	adds	r5, #20
   b4780:	3414      	adds	r4, #20
   b4782:	e7f0      	b.n	b4766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b478a:	2300      	movs	r3, #0
   b478c:	e9c0 3300 	strd	r3, r3, [r0]
   b4790:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4792:	684f      	ldr	r7, [r1, #4]
   b4794:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4796:	4604      	mov	r4, r0
   b4798:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b479a:	dd23      	ble.n	b47e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b479c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47a0:	fb08 f007 	mul.w	r0, r8, r7
   b47a4:	f002 ff2c 	bl	b7600 <malloc>
            if (!d) {
   b47a8:	4605      	mov	r5, r0
   b47aa:	b1d8      	cbz	r0, b47e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47ac:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47b0:	fb08 1202 	mla	r2, r8, r2, r1
   b47b4:	f7ff ffb9 	bl	b472a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47b8:	6820      	ldr	r0, [r4, #0]
   b47ba:	f002 ff29 	bl	b7610 <free>
        data_ = d;
   b47be:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47c0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47c2:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47c6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47ca:	45b8      	cmp	r8, r7
   b47cc:	d008      	beq.n	b47e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47ce:	4639      	mov	r1, r7
   b47d0:	4628      	mov	r0, r5
   b47d2:	f005 fa25 	bl	b9c20 <_ZN6StringC1ERKS_>
   b47d6:	7c3b      	ldrb	r3, [r7, #16]
   b47d8:	742b      	strb	r3, [r5, #16]
   b47da:	3714      	adds	r7, #20
   b47dc:	3514      	adds	r5, #20
   b47de:	e7f4      	b.n	b47ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47e0:	6873      	ldr	r3, [r6, #4]
   b47e2:	6063      	str	r3, [r4, #4]
}
   b47e4:	4620      	mov	r0, r4
   b47e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b47ec <_GLOBAL__sub_I_logHandler>:
   b47ec:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b47ee:	4b31      	ldr	r3, [pc, #196]	; (b48b4 <_GLOBAL__sub_I_logHandler+0xc8>)
        filter_(level, filters) {
   b47f0:	4d31      	ldr	r5, [pc, #196]	; (b48b8 <_GLOBAL__sub_I_logHandler+0xcc>)
   b47f2:	2400      	movs	r4, #0
   b47f4:	701c      	strb	r4, [r3, #0]
   b47f6:	4b31      	ldr	r3, [pc, #196]	; (b48bc <_GLOBAL__sub_I_logHandler+0xd0>)
   b47f8:	b08d      	sub	sp, #52	; 0x34
   b47fa:	2001      	movs	r0, #1
   b47fc:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b47fe:	4621      	mov	r1, r4
   b4800:	f002 fe42 	bl	b7488 <system_thread_set_state>
        capacity_(0) {
   b4804:	e9cd 4400 	strd	r4, r4, [sp]
   b4808:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b480a:	f006 f8ad 	bl	ba968 <_Z16_fetch_usbserialv>
   b480e:	4669      	mov	r1, sp
   b4810:	4606      	mov	r6, r0
   b4812:	a803      	add	r0, sp, #12
   b4814:	f7ff ffb7 	bl	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4818:	462f      	mov	r7, r5
        stream_(&stream) {
   b481a:	a903      	add	r1, sp, #12
   b481c:	a806      	add	r0, sp, #24
   b481e:	f7ff ffb2 	bl	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4822:	4b27      	ldr	r3, [pc, #156]	; (b48c0 <_GLOBAL__sub_I_logHandler+0xd4>)
   b4824:	f847 3b04 	str.w	r3, [r7], #4
   b4828:	a906      	add	r1, sp, #24
   b482a:	a809      	add	r0, sp, #36	; 0x24
   b482c:	f7ff ffab 	bl	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4830:	aa09      	add	r2, sp, #36	; 0x24
   b4832:	211e      	movs	r1, #30
   b4834:	4638      	mov	r0, r7
   b4836:	f004 fba1 	bl	b8f7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b483a:	a809      	add	r0, sp, #36	; 0x24
   b483c:	f7ff ff62 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4840:	a806      	add	r0, sp, #24
   b4842:	f7ff ff5f 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4846:	4b1f      	ldr	r3, [pc, #124]	; (b48c4 <_GLOBAL__sub_I_logHandler+0xd8>)
   b4848:	602b      	str	r3, [r5, #0]
   b484a:	a803      	add	r0, sp, #12
   b484c:	622e      	str	r6, [r5, #32]
   b484e:	f7ff ff59 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4852:	4b1d      	ldr	r3, [pc, #116]	; (b48c8 <_GLOBAL__sub_I_logHandler+0xdc>)
   b4854:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4856:	f006 f887 	bl	ba968 <_Z16_fetch_usbserialv>
   b485a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b485e:	f006 f873 	bl	ba948 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4862:	f004 f86d 	bl	b8940 <_ZN5spark10LogManager8instanceEv>
   b4866:	4629      	mov	r1, r5
   b4868:	f004 fa5e 	bl	b8d28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b486c:	4668      	mov	r0, sp
   b486e:	f7ff ff49 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   b4872:	4816      	ldr	r0, [pc, #88]	; (b48cc <_GLOBAL__sub_I_logHandler+0xe0>)
   b4874:	f000 fbfe 	bl	b5074 <_ZN11TinyGPSPlusC1Ev>
Adafruit_BME280 bme;
   b4878:	4815      	ldr	r0, [pc, #84]	; (b48d0 <_GLOBAL__sub_I_logHandler+0xe4>)
   b487a:	f000 f871 	bl	b4960 <_ZN15Adafruit_BME280C1Ev>
FuelGauge fuel;
   b487e:	4621      	mov	r1, r4
   b4880:	4814      	ldr	r0, [pc, #80]	; (b48d4 <_GLOBAL__sub_I_logHandler+0xe8>)
   b4882:	f003 fb81 	bl	b7f88 <_ZN9FuelGaugeC1Eb>
Ubidots ubidots(webhook, UBI_PARTICLE);
   b4886:	4914      	ldr	r1, [pc, #80]	; (b48d8 <_GLOBAL__sub_I_logHandler+0xec>)
   b4888:	4814      	ldr	r0, [pc, #80]	; (b48dc <_GLOBAL__sub_I_logHandler+0xf0>)
   b488a:	2203      	movs	r2, #3
   b488c:	f002 fafa 	bl	b6e84 <_ZN7UbidotsC1EPc11IotProtocol>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4890:	f006 f92c 	bl	baaec <spark_protocol_instance>
   b4894:	4623      	mov	r3, r4
   b4896:	4622      	mov	r2, r4
   b4898:	f643 61f0 	movw	r1, #16112	; 0x3ef0
   b489c:	f006 f92e 	bl	baafc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b48a0:	f006 f924 	bl	baaec <spark_protocol_instance>
   b48a4:	4623      	mov	r3, r4
   b48a6:	4622      	mov	r2, r4
   b48a8:	2107      	movs	r1, #7
   b48aa:	b00d      	add	sp, #52	; 0x34
   b48ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b48b0:	f006 b92c 	b.w	bab0c <spark_protocol_set_product_firmware_version>
   b48b4:	2003e318 	.word	0x2003e318
   b48b8:	2003e458 	.word	0x2003e458
   b48bc:	2003e319 	.word	0x2003e319
   b48c0:	000bdf00 	.word	0x000bdf00
   b48c4:	000be650 	.word	0x000be650
   b48c8:	000bdf18 	.word	0x000bdf18
   b48cc:	2003e36c 	.word	0x2003e36c
   b48d0:	2003e31c 	.word	0x2003e31c
   b48d4:	2003e360 	.word	0x2003e360
   b48d8:	2003e128 	.word	0x2003e128
   b48dc:	2003e4a0 	.word	0x2003e4a0

000b48e0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b48e0:	4770      	bx	lr

000b48e2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b48e2:	b510      	push	{r4, lr}
  }
   b48e4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b48e6:	4604      	mov	r4, r0
  }
   b48e8:	f7ff fbd9 	bl	b409e <_ZdlPvj>
   b48ec:	4620      	mov	r0, r4
   b48ee:	bd10      	pop	{r4, pc}

000b48f0 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b48f0:	b40e      	push	{r1, r2, r3}
   b48f2:	b503      	push	{r0, r1, lr}
   b48f4:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b48f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b48f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b48fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b48fe:	f005 f824 	bl	b994a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4902:	b002      	add	sp, #8
   b4904:	f85d eb04 	ldr.w	lr, [sp], #4
   b4908:	b003      	add	sp, #12
   b490a:	4770      	bx	lr

000b490c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b490c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b490e:	4604      	mov	r4, r0
   b4910:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4912:	7922      	ldrb	r2, [r4, #4]
   b4914:	68a3      	ldr	r3, [r4, #8]
   b4916:	b132      	cbz	r2, b4926 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4918:	b9a3      	cbnz	r3, b4944 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b491a:	490b      	ldr	r1, [pc, #44]	; (b4948 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b491c:	b002      	add	sp, #8
   b491e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4922:	f004 beff 	b.w	b9724 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4926:	4a09      	ldr	r2, [pc, #36]	; (b494c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4928:	7b26      	ldrb	r6, [r4, #12]
   b492a:	4d09      	ldr	r5, [pc, #36]	; (b4950 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b492c:	4909      	ldr	r1, [pc, #36]	; (b4954 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b492e:	7b64      	ldrb	r4, [r4, #13]
   b4930:	2e01      	cmp	r6, #1
   b4932:	bf18      	it	ne
   b4934:	4629      	movne	r1, r5
   b4936:	e9cd 1400 	strd	r1, r4, [sp]
   b493a:	4907      	ldr	r1, [pc, #28]	; (b4958 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b493c:	f7ff ffd8 	bl	b48f0 <_ZN5Print6printfEPKcz>
  }
   b4940:	b002      	add	sp, #8
   b4942:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4944:	4a05      	ldr	r2, [pc, #20]	; (b495c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4946:	e7ef      	b.n	b4928 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4948:	000bdf41 	.word	0x000bdf41
   b494c:	000be18b 	.word	0x000be18b
   b4950:	000bdf3d 	.word	0x000bdf3d
   b4954:	000bdf39 	.word	0x000bdf39
   b4958:	000bdf57 	.word	0x000bdf57
   b495c:	000bdf30 	.word	0x000bdf30

000b4960 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4964:	6103      	str	r3, [r0, #16]
{ }
   b4966:	4770      	bx	lr

000b4968 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4968:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b496a:	4c0b      	ldr	r4, [pc, #44]	; (b4998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b496c:	7821      	ldrb	r1, [r4, #0]
   b496e:	f3bf 8f5b 	dmb	ish
   b4972:	f011 0101 	ands.w	r1, r1, #1
   b4976:	d10b      	bne.n	b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4978:	4620      	mov	r0, r4
   b497a:	9101      	str	r1, [sp, #4]
   b497c:	f7ff fb9c 	bl	b40b8 <__cxa_guard_acquire>
   b4980:	9901      	ldr	r1, [sp, #4]
   b4982:	b128      	cbz	r0, b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4984:	4805      	ldr	r0, [pc, #20]	; (b499c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4986:	f005 f81d 	bl	b99c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b498a:	4620      	mov	r0, r4
   b498c:	f7ff fb99 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4990:	4802      	ldr	r0, [pc, #8]	; (b499c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4992:	b002      	add	sp, #8
   b4994:	bd10      	pop	{r4, pc}
   b4996:	bf00      	nop
   b4998:	2003e4b0 	.word	0x2003e4b0
   b499c:	2003e4b4 	.word	0x2003e4b4

000b49a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b49a0:	b508      	push	{r3, lr}
        instance().endTransaction();
   b49a2:	f7ff ffe1 	bl	b4968 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b49a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b49aa:	f005 b829 	b.w	b9a00 <_ZN8SPIClass14endTransactionEv>

000b49ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b49ae:	b507      	push	{r0, r1, r2, lr}
   b49b0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b49b2:	f7ff ffd9 	bl	b4968 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b49b6:	9901      	ldr	r1, [sp, #4]
    }
   b49b8:	b003      	add	sp, #12
   b49ba:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b49be:	f005 b839 	b.w	b9a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b49c2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b49c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b49c6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49ca:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b49cc:	4605      	mov	r5, r0
   b49ce:	460f      	mov	r7, r1
    if (_sck == -1)
   b49d0:	d106      	bne.n	b49e0 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b49d2:	f7ff ffc9 	bl	b4968 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b49d6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b49d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b49dc:	f005 b898 	b.w	b9b10 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b49e0:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b49e2:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b49e4:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b49e8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b49ec:	2100      	movs	r1, #0
   b49ee:	b280      	uxth	r0, r0
   b49f0:	f006 f8e3 	bl	babba <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b49f4:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b49f8:	fa08 f106 	lsl.w	r1, r8, r6
   b49fc:	4039      	ands	r1, r7
   b49fe:	b280      	uxth	r0, r0
   b4a00:	f006 f8db 	bl	babba <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4a04:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4a08:	2101      	movs	r1, #1
   b4a0a:	b280      	uxth	r0, r0
   b4a0c:	f006 f8d5 	bl	babba <digitalWrite>
        if (digitalRead(_miso))
   b4a10:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4a14:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4a16:	b280      	uxth	r0, r0
        reply <<= 1;
   b4a18:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4a1a:	f006 f8e7 	bl	babec <digitalRead>
   b4a1e:	b108      	cbz	r0, b4a24 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4a20:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4a24:	3e01      	subs	r6, #1
   b4a26:	d2df      	bcs.n	b49e8 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4a28:	4620      	mov	r0, r4
   b4a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4a30 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4a32:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a36:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4a38:	4604      	mov	r4, r0
   b4a3a:	460e      	mov	r6, r1
   b4a3c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4a3e:	d113      	bne.n	b4a68 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a40:	7901      	ldrb	r1, [r0, #4]
   b4a42:	6800      	ldr	r0, [r0, #0]
   b4a44:	f003 fb78 	bl	b8138 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a48:	6820      	ldr	r0, [r4, #0]
   b4a4a:	6803      	ldr	r3, [r0, #0]
   b4a4c:	4631      	mov	r1, r6
   b4a4e:	689b      	ldr	r3, [r3, #8]
   b4a50:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4a52:	6820      	ldr	r0, [r4, #0]
   b4a54:	6803      	ldr	r3, [r0, #0]
   b4a56:	4629      	mov	r1, r5
   b4a58:	689b      	ldr	r3, [r3, #8]
   b4a5a:	4798      	blx	r3
        _wire -> endTransmission();
   b4a5c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4a5e:	b004      	add	sp, #16
   b4a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4a64:	f003 bb88 	b.w	b8178 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4a68:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a6c:	3301      	adds	r3, #1
   b4a6e:	d10c      	bne.n	b4a8a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4a70:	4b16      	ldr	r3, [pc, #88]	; (b4acc <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4a72:	9300      	str	r3, [sp, #0]
   b4a74:	2300      	movs	r3, #0
   b4a76:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a7a:	4b15      	ldr	r3, [pc, #84]	; (b4ad0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4a7c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a7e:	4668      	mov	r0, sp
   b4a80:	2301      	movs	r3, #1
   b4a82:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a86:	f7ff ff92 	bl	b49ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a8e:	2100      	movs	r1, #0
   b4a90:	b280      	uxth	r0, r0
   b4a92:	f006 f892 	bl	babba <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4a96:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	f7ff ff91 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4aa0:	4629      	mov	r1, r5
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	f7ff ff8d 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4aa8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4aac:	2101      	movs	r1, #1
   b4aae:	b280      	uxth	r0, r0
   b4ab0:	f006 f883 	bl	babba <digitalWrite>
    if (_sck == -1)
   b4ab4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ab8:	3301      	adds	r3, #1
   b4aba:	d104      	bne.n	b4ac6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4abc:	b004      	add	sp, #16
   b4abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4ac2:	f7ff bf6d 	b.w	b49a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4ac6:	b004      	add	sp, #16
   b4ac8:	bd70      	pop	{r4, r5, r6, pc}
   b4aca:	bf00      	nop
   b4acc:	000bdf7c 	.word	0x000bdf7c
   b4ad0:	0007a120 	.word	0x0007a120

000b4ad4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4ad6:	00db      	lsls	r3, r3, #3
   b4ad8:	f002 0207 	and.w	r2, r2, #7
   b4adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4ae0:	4313      	orrs	r3, r2
   b4ae2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4ae6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4aea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4aee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4af2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4af6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4afa:	f366 1347 	bfi	r3, r6, #5, #3
   b4afe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4b02:	00ed      	lsls	r5, r5, #3
   b4b04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4b08:	f007 0707 	and.w	r7, r7, #7
   b4b0c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4b14:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4b16:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4b18:	431d      	orrs	r5, r3
   b4b1a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4b1e:	f006 0207 	and.w	r2, r6, #7
   b4b22:	21f2      	movs	r1, #242	; 0xf2
   b4b24:	f7ff ff84 	bl	b4a30 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4b28:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4b2c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4b30:	f002 0107 	and.w	r1, r2, #7
   b4b34:	009b      	lsls	r3, r3, #2
   b4b36:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4b3a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4b3e:	4620      	mov	r0, r4
   b4b40:	21f5      	movs	r1, #245	; 0xf5
   b4b42:	f7ff ff75 	bl	b4a30 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4b46:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4b4a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4b4e:	f002 0107 	and.w	r1, r2, #7
   b4b52:	009b      	lsls	r3, r3, #2
   b4b54:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4b58:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	21f4      	movs	r1, #244	; 0xf4
}
   b4b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4b64:	f7ff bf64 	b.w	b4a30 <_ZN15Adafruit_BME2806write8Ehh>

000b4b68 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4b68:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4b6a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4b6e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4b70:	b085      	sub	sp, #20
   b4b72:	4604      	mov	r4, r0
   b4b74:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4b76:	d118      	bne.n	b4baa <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4b78:	7901      	ldrb	r1, [r0, #4]
   b4b7a:	6800      	ldr	r0, [r0, #0]
   b4b7c:	f003 fadc 	bl	b8138 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4b80:	6820      	ldr	r0, [r4, #0]
   b4b82:	6803      	ldr	r3, [r0, #0]
   b4b84:	4629      	mov	r1, r5
   b4b86:	689b      	ldr	r3, [r3, #8]
   b4b88:	4798      	blx	r3
        _wire -> endTransmission();
   b4b8a:	6820      	ldr	r0, [r4, #0]
   b4b8c:	f003 faf4 	bl	b8178 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4b90:	7921      	ldrb	r1, [r4, #4]
   b4b92:	6820      	ldr	r0, [r4, #0]
   b4b94:	2201      	movs	r2, #1
   b4b96:	f003 facc 	bl	b8132 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4b9a:	6820      	ldr	r0, [r4, #0]
   b4b9c:	6803      	ldr	r3, [r0, #0]
   b4b9e:	695b      	ldr	r3, [r3, #20]
   b4ba0:	4798      	blx	r3
   b4ba2:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4ba4:	4628      	mov	r0, r5
   b4ba6:	b005      	add	sp, #20
   b4ba8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4baa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4bae:	3301      	adds	r3, #1
   b4bb0:	d10c      	bne.n	b4bcc <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4bb2:	4b15      	ldr	r3, [pc, #84]	; (b4c08 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4bb4:	9300      	str	r3, [sp, #0]
   b4bb6:	2300      	movs	r3, #0
   b4bb8:	f88d 3004 	strb.w	r3, [sp, #4]
   b4bbc:	4b13      	ldr	r3, [pc, #76]	; (b4c0c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4bbe:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4bc0:	4668      	mov	r0, sp
   b4bc2:	2301      	movs	r3, #1
   b4bc4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4bc8:	f7ff fef1 	bl	b49ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4bcc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4bd0:	2100      	movs	r1, #0
   b4bd2:	b280      	uxth	r0, r0
   b4bd4:	f005 fff1 	bl	babba <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4bd8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff fef0 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4be2:	2100      	movs	r1, #0
   b4be4:	4620      	mov	r0, r4
   b4be6:	f7ff feec 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
   b4bea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4bec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4bf0:	2101      	movs	r1, #1
   b4bf2:	b280      	uxth	r0, r0
   b4bf4:	f005 ffe1 	bl	babba <digitalWrite>
        if (_sck == -1)
   b4bf8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4bfc:	3301      	adds	r3, #1
   b4bfe:	d1d1      	bne.n	b4ba4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4c00:	f7ff fece 	bl	b49a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4c04:	e7ce      	b.n	b4ba4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4c06:	bf00      	nop
   b4c08:	000bdf7c 	.word	0x000bdf7c
   b4c0c:	0007a120 	.word	0x0007a120

000b4c10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4c10:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4c12:	21f3      	movs	r1, #243	; 0xf3
   b4c14:	f7ff ffa8 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4c18:	f000 0001 	and.w	r0, r0, #1
   b4c1c:	bd08      	pop	{r3, pc}
	...

000b4c20 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4c20:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c22:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c26:	3301      	adds	r3, #1
{
   b4c28:	b085      	sub	sp, #20
   b4c2a:	4604      	mov	r4, r0
   b4c2c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c2e:	d11f      	bne.n	b4c70 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c30:	7901      	ldrb	r1, [r0, #4]
   b4c32:	6800      	ldr	r0, [r0, #0]
   b4c34:	f003 fa80 	bl	b8138 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c38:	6820      	ldr	r0, [r4, #0]
   b4c3a:	6803      	ldr	r3, [r0, #0]
   b4c3c:	4629      	mov	r1, r5
   b4c3e:	689b      	ldr	r3, [r3, #8]
   b4c40:	4798      	blx	r3
        _wire -> endTransmission();
   b4c42:	6820      	ldr	r0, [r4, #0]
   b4c44:	f003 fa98 	bl	b8178 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4c48:	7921      	ldrb	r1, [r4, #4]
   b4c4a:	6820      	ldr	r0, [r4, #0]
   b4c4c:	2202      	movs	r2, #2
   b4c4e:	f003 fa70 	bl	b8132 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4c52:	6820      	ldr	r0, [r4, #0]
   b4c54:	6803      	ldr	r3, [r0, #0]
   b4c56:	695b      	ldr	r3, [r3, #20]
   b4c58:	4798      	blx	r3
   b4c5a:	4605      	mov	r5, r0
   b4c5c:	6820      	ldr	r0, [r4, #0]
   b4c5e:	6803      	ldr	r3, [r0, #0]
   b4c60:	695b      	ldr	r3, [r3, #20]
   b4c62:	4798      	blx	r3
   b4c64:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4c68:	b285      	uxth	r5, r0
}
   b4c6a:	4628      	mov	r0, r5
   b4c6c:	b005      	add	sp, #20
   b4c6e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c70:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c74:	3301      	adds	r3, #1
   b4c76:	d10c      	bne.n	b4c92 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4c78:	4b18      	ldr	r3, [pc, #96]	; (b4cdc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4c7a:	9300      	str	r3, [sp, #0]
   b4c7c:	2300      	movs	r3, #0
   b4c7e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c82:	4b17      	ldr	r3, [pc, #92]	; (b4ce0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4c84:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c86:	4668      	mov	r0, sp
   b4c88:	2301      	movs	r3, #1
   b4c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c8e:	f7ff fe8e 	bl	b49ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c92:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c96:	2100      	movs	r1, #0
   b4c98:	b280      	uxth	r0, r0
   b4c9a:	f005 ff8e 	bl	babba <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	f7ff fe8d 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4ca8:	2100      	movs	r1, #0
   b4caa:	4620      	mov	r0, r4
   b4cac:	f7ff fe89 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
   b4cb0:	2100      	movs	r1, #0
   b4cb2:	4605      	mov	r5, r0
   b4cb4:	4620      	mov	r0, r4
   b4cb6:	f7ff fe84 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
   b4cba:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4cbe:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4cc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cc4:	2101      	movs	r1, #1
   b4cc6:	b280      	uxth	r0, r0
   b4cc8:	f005 ff77 	bl	babba <digitalWrite>
        if (_sck == -1)
   b4ccc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4cd0:	3301      	adds	r3, #1
   b4cd2:	d1ca      	bne.n	b4c6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4cd4:	f7ff fe64 	bl	b49a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4cd8:	e7c7      	b.n	b4c6a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4cda:	bf00      	nop
   b4cdc:	000bdf7c 	.word	0x000bdf7c
   b4ce0:	0007a120 	.word	0x0007a120

000b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4ce4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4ce6:	f7ff ff9b 	bl	b4c20 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4cea:	ba40      	rev16	r0, r0
}
   b4cec:	b280      	uxth	r0, r0
   b4cee:	bd08      	pop	{r3, pc}

000b4cf0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4cf0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4cf2:	2188      	movs	r1, #136	; 0x88
{
   b4cf4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4cf6:	f7ff fff5 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4cfa:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4cfc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4cfe:	4620      	mov	r0, r4
   b4d00:	f7ff fff0 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d04:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4d06:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f7ff ffeb 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d0e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4d10:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d12:	4620      	mov	r0, r4
   b4d14:	f7ff ffe6 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4d18:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4d1a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f7ff ffe1 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d22:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4d24:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4d26:	4620      	mov	r0, r4
   b4d28:	f7ff ffdc 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d2c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4d2e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4d30:	4620      	mov	r0, r4
   b4d32:	f7ff ffd7 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d36:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4d38:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f7ff ffd2 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d40:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4d42:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4d44:	4620      	mov	r0, r4
   b4d46:	f7ff ffcd 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d4a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4d4c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4d4e:	4620      	mov	r0, r4
   b4d50:	f7ff ffc8 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d54:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4d56:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4d58:	4620      	mov	r0, r4
   b4d5a:	f7ff ffc3 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4d5e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4d60:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4d62:	4620      	mov	r0, r4
   b4d64:	f7ff ffbe 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4d68:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4d6a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	f7ff fefb 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4d72:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4d74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f7ff ffb3 	bl	b4ce4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d7e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4d80:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d82:	4620      	mov	r0, r4
   b4d84:	f7ff fef0 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4d88:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4d8e:	4620      	mov	r0, r4
   b4d90:	f7ff feea 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
   b4d94:	21e5      	movs	r1, #229	; 0xe5
   b4d96:	4605      	mov	r5, r0
   b4d98:	4620      	mov	r0, r4
   b4d9a:	f7ff fee5 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
   b4d9e:	f000 030f 	and.w	r3, r0, #15
   b4da2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4da6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4da8:	21e6      	movs	r1, #230	; 0xe6
   b4daa:	4620      	mov	r0, r4
   b4dac:	f7ff fedc 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
   b4db0:	21e5      	movs	r1, #229	; 0xe5
   b4db2:	4605      	mov	r5, r0
   b4db4:	4620      	mov	r0, r4
   b4db6:	f7ff fed7 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
   b4dba:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4dbe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4dc2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4dc4:	21e7      	movs	r1, #231	; 0xe7
   b4dc6:	4620      	mov	r0, r4
   b4dc8:	f7ff fece 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
   b4dcc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4dd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4dd4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4dd4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4dd6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4dda:	3301      	adds	r3, #1
{
   b4ddc:	b085      	sub	sp, #20
   b4dde:	4604      	mov	r4, r0
   b4de0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4de2:	d123      	bne.n	b4e2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4de4:	7901      	ldrb	r1, [r0, #4]
   b4de6:	6800      	ldr	r0, [r0, #0]
   b4de8:	f003 f9a6 	bl	b8138 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4dec:	6820      	ldr	r0, [r4, #0]
   b4dee:	6803      	ldr	r3, [r0, #0]
   b4df0:	4629      	mov	r1, r5
   b4df2:	689b      	ldr	r3, [r3, #8]
   b4df4:	4798      	blx	r3
        _wire -> endTransmission();
   b4df6:	6820      	ldr	r0, [r4, #0]
   b4df8:	f003 f9be 	bl	b8178 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4dfc:	7921      	ldrb	r1, [r4, #4]
   b4dfe:	6820      	ldr	r0, [r4, #0]
   b4e00:	2203      	movs	r2, #3
   b4e02:	f003 f996 	bl	b8132 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4e06:	6820      	ldr	r0, [r4, #0]
   b4e08:	6803      	ldr	r3, [r0, #0]
   b4e0a:	695b      	ldr	r3, [r3, #20]
   b4e0c:	4798      	blx	r3
        value <<= 8;
   b4e0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4e10:	6820      	ldr	r0, [r4, #0]
   b4e12:	6803      	ldr	r3, [r0, #0]
   b4e14:	695b      	ldr	r3, [r3, #20]
   b4e16:	4798      	blx	r3
   b4e18:	4328      	orrs	r0, r5
        value <<= 8;
   b4e1a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4e1c:	6820      	ldr	r0, [r4, #0]
   b4e1e:	6803      	ldr	r3, [r0, #0]
   b4e20:	695b      	ldr	r3, [r3, #20]
   b4e22:	4798      	blx	r3
   b4e24:	4305      	orrs	r5, r0
}
   b4e26:	4628      	mov	r0, r5
   b4e28:	b005      	add	sp, #20
   b4e2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4e2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4e30:	3301      	adds	r3, #1
   b4e32:	d10c      	bne.n	b4e4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4e34:	4b1a      	ldr	r3, [pc, #104]	; (b4ea0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4e36:	9300      	str	r3, [sp, #0]
   b4e38:	2300      	movs	r3, #0
   b4e3a:	f88d 3004 	strb.w	r3, [sp, #4]
   b4e3e:	4b19      	ldr	r3, [pc, #100]	; (b4ea4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4e40:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4e42:	4668      	mov	r0, sp
   b4e44:	2301      	movs	r3, #1
   b4e46:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4e4a:	f7ff fdb0 	bl	b49ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4e4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e52:	2100      	movs	r1, #0
   b4e54:	b280      	uxth	r0, r0
   b4e56:	f005 feb0 	bl	babba <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4e5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4e5e:	4620      	mov	r0, r4
   b4e60:	f7ff fdaf 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4e64:	2100      	movs	r1, #0
   b4e66:	4620      	mov	r0, r4
   b4e68:	f7ff fdab 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4e6c:	2100      	movs	r1, #0
        value <<= 8;
   b4e6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4e70:	4620      	mov	r0, r4
   b4e72:	f7ff fda6 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
   b4e76:	4328      	orrs	r0, r5
        value <<= 8;
   b4e78:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4e7a:	2100      	movs	r1, #0
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	f7ff fda0 	bl	b49c2 <_ZN15Adafruit_BME2807spixferEh>
   b4e82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4e84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e88:	2101      	movs	r1, #1
   b4e8a:	b280      	uxth	r0, r0
   b4e8c:	f005 fe95 	bl	babba <digitalWrite>
        if (_sck == -1)
   b4e90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4e94:	3301      	adds	r3, #1
   b4e96:	d1c6      	bne.n	b4e26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4e98:	f7ff fd82 	bl	b49a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4e9c:	e7c3      	b.n	b4e26 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4e9e:	bf00      	nop
   b4ea0:	000bdf7c 	.word	0x000bdf7c
   b4ea4:	0007a120 	.word	0x0007a120

000b4ea8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4ea8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4eaa:	21fa      	movs	r1, #250	; 0xfa
{
   b4eac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4eae:	f7ff ff91 	bl	b4dd4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4eb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4eb6:	d01f      	beq.n	b4ef8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4eb8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4eba:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4f00 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ebe:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4ec0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ec4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4ec8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ecc:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4ece:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4ed2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4ed6:	131b      	asrs	r3, r3, #12
   b4ed8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4eda:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4edc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4ee0:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4ee2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4ee6:	3380      	adds	r3, #128	; 0x80
   b4ee8:	121b      	asrs	r3, r3, #8
   b4eea:	ee07 3a90 	vmov	s15, r3
   b4eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4ef2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4ef6:	bd10      	pop	{r4, pc}
        return NAN;
   b4ef8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4f04 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4efc:	e7fb      	b.n	b4ef6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4efe:	bf00      	nop
   b4f00:	42c80000 	.word	0x42c80000
   b4f04:	7fc00000 	.word	0x7fc00000

000b4f08 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4f08:	b538      	push	{r3, r4, r5, lr}
   b4f0a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4f0c:	f7ff ffcc 	bl	b4ea8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4f10:	21fd      	movs	r1, #253	; 0xfd
   b4f12:	4620      	mov	r0, r4
   b4f14:	f7ff fe84 	bl	b4c20 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4f18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4f1c:	d038      	beq.n	b4f90 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4f1e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4f20:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4f24:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4f28:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4f2c:	0509      	lsls	r1, r1, #20
   b4f2e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4f32:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4f36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4f3a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f40:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f44:	436b      	muls	r3, r5
   b4f46:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f48:	4369      	muls	r1, r5
   b4f4a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4f50:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f52:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4f54:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4f58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4f5c:	434b      	muls	r3, r1
   b4f5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4f62:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4f64:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4f66:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4f68:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4f6c:	4352      	muls	r2, r2
   b4f6e:	11d2      	asrs	r2, r2, #7
   b4f70:	434a      	muls	r2, r1
   b4f72:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4f76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4f7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4f7e:	bfa8      	it	ge
   b4f80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4f84:	131b      	asrs	r3, r3, #12
   b4f86:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4f8a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4f8e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4f90:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4f98 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4f94:	e7fb      	b.n	b4f8e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4f96:	bf00      	nop
   b4f98:	7fc00000 	.word	0x7fc00000

000b4f9c <_ZN15Adafruit_BME2804initEv>:
{
   b4f9c:	b530      	push	{r4, r5, lr}
   b4f9e:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4fa0:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4fa4:	1c42      	adds	r2, r0, #1
{
   b4fa6:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4fa8:	d119      	bne.n	b4fde <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4faa:	6820      	ldr	r0, [r4, #0]
   b4fac:	f003 f892 	bl	b80d4 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4fb0:	21d0      	movs	r1, #208	; 0xd0
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	f7ff fdd8 	bl	b4b68 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4fb8:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4fba:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4fbc:	d145      	bne.n	b504a <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4fbe:	4620      	mov	r0, r4
   b4fc0:	22b6      	movs	r2, #182	; 0xb6
   b4fc2:	21e0      	movs	r1, #224	; 0xe0
   b4fc4:	f7ff fd34 	bl	b4a30 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4fc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4fcc:	f002 fb70 	bl	b76b0 <delay>
    while (isReadingCalibration())
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	f7ff fe1d 	bl	b4c10 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4fd6:	4605      	mov	r5, r0
   b4fd8:	b328      	cbz	r0, b5026 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4fda:	2064      	movs	r0, #100	; 0x64
   b4fdc:	e7f6      	b.n	b4fcc <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4fde:	2101      	movs	r1, #1
   b4fe0:	b280      	uxth	r0, r0
   b4fe2:	f005 fdea 	bl	babba <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4fe6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4fea:	2101      	movs	r1, #1
   b4fec:	b280      	uxth	r0, r0
   b4fee:	f005 fdd3 	bl	bab98 <pinMode>
        if (_sck == -1) {
   b4ff2:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4ff6:	1c43      	adds	r3, r0, #1
   b4ff8:	d104      	bne.n	b5004 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4ffa:	f7ff fcb5 	bl	b4968 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4ffe:	f004 fceb 	bl	b99d8 <_ZN8SPIClass5beginEv>
    }
   b5002:	e7d5      	b.n	b4fb0 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b5004:	2101      	movs	r1, #1
   b5006:	b280      	uxth	r0, r0
   b5008:	f005 fdc6 	bl	bab98 <pinMode>
            pinMode(_mosi, OUTPUT);
   b500c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b5010:	2101      	movs	r1, #1
   b5012:	b280      	uxth	r0, r0
   b5014:	f005 fdc0 	bl	bab98 <pinMode>
            pinMode(_miso, INPUT);
   b5018:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b501c:	2100      	movs	r1, #0
   b501e:	b280      	uxth	r0, r0
   b5020:	f005 fdba 	bl	bab98 <pinMode>
   b5024:	e7c4      	b.n	b4fb0 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5026:	4620      	mov	r0, r4
   b5028:	f7ff fe62 	bl	b4cf0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b502c:	2305      	movs	r3, #5
   b502e:	9300      	str	r3, [sp, #0]
   b5030:	461a      	mov	r2, r3
   b5032:	2103      	movs	r1, #3
   b5034:	4620      	mov	r0, r4
   b5036:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b503a:	f7ff fd4b 	bl	b4ad4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b503e:	2064      	movs	r0, #100	; 0x64
   b5040:	f002 fb36 	bl	b76b0 <delay>
    return true;
   b5044:	2001      	movs	r0, #1
}
   b5046:	b005      	add	sp, #20
   b5048:	bd30      	pop	{r4, r5, pc}
        return false;
   b504a:	2000      	movs	r0, #0
   b504c:	e7fb      	b.n	b5046 <_ZN15Adafruit_BME2804initEv+0xaa>

000b504e <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b504e:	2377      	movs	r3, #119	; 0x77
{
   b5050:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b5052:	7103      	strb	r3, [r0, #4]
{
   b5054:	4604      	mov	r4, r0
	_wire = &Wire;
   b5056:	f005 fe0b 	bl	bac70 <_Z19__fetch_global_Wirev>
   b505a:	6020      	str	r0, [r4, #0]
	status = init();
   b505c:	4620      	mov	r0, r4
   b505e:	f7ff ff9d 	bl	b4f9c <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b5062:	b930      	cbnz	r0, b5072 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b5064:	2376      	movs	r3, #118	; 0x76
   b5066:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5068:	4620      	mov	r0, r4
}
   b506a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b506e:	f7ff bf95 	b.w	b4f9c <_ZN15Adafruit_BME2804initEv>
}
   b5072:	bd10      	pop	{r4, pc}

000b5074 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   b5074:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   b5076:	2102      	movs	r1, #2
   b5078:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   b507c:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   b507e:	8082      	strh	r2, [r0, #4]
   b5080:	6082      	str	r2, [r0, #8]
   b5082:	7302      	strb	r2, [r0, #12]
   b5084:	8202      	strh	r2, [r0, #16]
   b5086:	6142      	str	r2, [r0, #20]
   b5088:	7602      	strb	r2, [r0, #24]
   b508a:	8382      	strh	r2, [r0, #28]
   b508c:	6202      	str	r2, [r0, #32]
   b508e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b5092:	8502      	strh	r2, [r0, #40]	; 0x28
   b5094:	62c2      	str	r2, [r0, #44]	; 0x2c
   b5096:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   b509a:	8702      	strh	r2, [r0, #56]	; 0x38
   b509c:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   b509e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   b50a2:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   b50a4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   b50a8:	6602      	str	r2, [r0, #96]	; 0x60
   b50aa:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   b50ae:	6702      	str	r2, [r0, #112]	; 0x70
   b50b0:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   b50b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   b50b8:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   b50bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   b50c0:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   b50c4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   b50c8:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   b50cc:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   b50d0:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   b50d4:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   b50d8:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   b50dc:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   b50e0:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   b50e4:	4770      	bx	lr

000b50e6 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   b50e6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b50ea:	2b05      	cmp	r3, #5
   b50ec:	d802      	bhi.n	b50f4 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   b50ee:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   b50f2:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   b50f4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b50f8:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   b50fa:	bf94      	ite	ls
   b50fc:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   b5100:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   b5104:	4770      	bx	lr

000b5106 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   b5106:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   b5108:	7805      	ldrb	r5, [r0, #0]
{
   b510a:	4604      	mov	r4, r0
  if (negative) ++term;
   b510c:	2d2d      	cmp	r5, #45	; 0x2d
   b510e:	bf08      	it	eq
   b5110:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   b5112:	4620      	mov	r0, r4
   b5114:	f006 fd33 	bl	bbb7e <atol>
   b5118:	2364      	movs	r3, #100	; 0x64
   b511a:	4358      	muls	r0, r3
   b511c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   b511e:	f814 3b01 	ldrb.w	r3, [r4], #1
   b5122:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   b5126:	2909      	cmp	r1, #9
   b5128:	d9f8      	bls.n	b511c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   b512a:	2b2e      	cmp	r3, #46	; 0x2e
   b512c:	d10b      	bne.n	b5146 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   b512e:	7853      	ldrb	r3, [r2, #1]
   b5130:	3b30      	subs	r3, #48	; 0x30
   b5132:	2b09      	cmp	r3, #9
   b5134:	d807      	bhi.n	b5146 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   b5136:	210a      	movs	r1, #10
   b5138:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   b513c:	7893      	ldrb	r3, [r2, #2]
   b513e:	3b30      	subs	r3, #48	; 0x30
   b5140:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   b5142:	bf98      	it	ls
   b5144:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   b5146:	2d2d      	cmp	r5, #45	; 0x2d
   b5148:	bf08      	it	eq
   b514a:	4240      	negeq	r0, r0
}
   b514c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5150 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   b5150:	b538      	push	{r3, r4, r5, lr}
   b5152:	4604      	mov	r4, r0
   b5154:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   b5156:	f006 fd12 	bl	bbb7e <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   b515a:	2364      	movs	r3, #100	; 0x64
   b515c:	fbb0 f2f3 	udiv	r2, r0, r3
   b5160:	fb03 0312 	mls	r3, r3, r2, r0
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   b5164:	4811      	ldr	r0, [pc, #68]	; (b51ac <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   b5166:	802a      	strh	r2, [r5, #0]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   b5168:	4343      	muls	r3, r0
  deg.deg = (int16_t)(leftOfDecimal / 100);
   b516a:	4620      	mov	r0, r4

  while (isdigit(*term))
   b516c:	7802      	ldrb	r2, [r0, #0]
   b516e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   b5172:	2c09      	cmp	r4, #9
   b5174:	4601      	mov	r1, r0
   b5176:	f100 0001 	add.w	r0, r0, #1
   b517a:	d9f7      	bls.n	b516c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   b517c:	2a2e      	cmp	r2, #46	; 0x2e
   b517e:	d10b      	bne.n	b5198 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   b5180:	480a      	ldr	r0, [pc, #40]	; (b51ac <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   b5182:	240a      	movs	r4, #10
    while (isdigit(*++term))
   b5184:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5188:	3a30      	subs	r2, #48	; 0x30
   b518a:	2a09      	cmp	r2, #9
   b518c:	d804      	bhi.n	b5198 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   b518e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   b5192:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   b5196:	e7f5      	b.n	b5184 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   b5198:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b519c:	3301      	adds	r3, #1
   b519e:	2203      	movs	r2, #3
   b51a0:	fbb3 f3f2 	udiv	r3, r3, r2
   b51a4:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   b51a6:	2300      	movs	r3, #0
   b51a8:	722b      	strb	r3, [r5, #8]
}
   b51aa:	bd38      	pop	{r3, r4, r5, pc}
   b51ac:	00989680 	.word	0x00989680

000b51b0 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   b51b0:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   b51b2:	69c3      	ldr	r3, [r0, #28]
   b51b4:	6043      	str	r3, [r0, #4]
   b51b6:	6a03      	ldr	r3, [r0, #32]
   b51b8:	6083      	str	r3, [r0, #8]
   b51ba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   b51be:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   b51c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b51c2:	6103      	str	r3, [r0, #16]
   b51c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b51c6:	6143      	str	r3, [r0, #20]
   b51c8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   b51cc:	7603      	strb	r3, [r0, #24]
{
   b51ce:	4604      	mov	r4, r0
   b51d0:	f001 ff40 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b51d4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b51d8:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   b51da:	8023      	strh	r3, [r4, #0]
}
   b51dc:	bd10      	pop	{r4, pc}
	...

000b51e0 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   b51e0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   b51e2:	2300      	movs	r3, #0
{
   b51e4:	4604      	mov	r4, r0
   updated = false;
   b51e6:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   b51e8:	6880      	ldr	r0, [r0, #8]
   b51ea:	f006 f8df 	bl	bb3ac <__aeabi_ui2d>
   b51ee:	a30c      	add	r3, pc, #48	; (adr r3, b5220 <_ZN15TinyGPSLocation3latEv+0x40>)
   b51f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51f4:	f006 fa7e 	bl	bb6f4 <__aeabi_ddiv>
   b51f8:	4606      	mov	r6, r0
   b51fa:	88a0      	ldrh	r0, [r4, #4]
   b51fc:	460f      	mov	r7, r1
   b51fe:	f006 f8e5 	bl	bb3cc <__aeabi_i2d>
   b5202:	460b      	mov	r3, r1
   b5204:	4602      	mov	r2, r0
   b5206:	4639      	mov	r1, r7
   b5208:	4630      	mov	r0, r6
   b520a:	f005 ff93 	bl	bb134 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   b520e:	7b23      	ldrb	r3, [r4, #12]
   b5210:	b113      	cbz	r3, b5218 <_ZN15TinyGPSLocation3latEv+0x38>
   b5212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5216:	4619      	mov	r1, r3
}
   b5218:	ec41 0b10 	vmov	d0, r0, r1
   b521c:	bdd0      	pop	{r4, r6, r7, pc}
   b521e:	bf00      	nop
   b5220:	00000000 	.word	0x00000000
   b5224:	41cdcd65 	.word	0x41cdcd65

000b5228 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   b5228:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   b522a:	2300      	movs	r3, #0
{
   b522c:	4604      	mov	r4, r0
   updated = false;
   b522e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   b5230:	6940      	ldr	r0, [r0, #20]
   b5232:	f006 f8bb 	bl	bb3ac <__aeabi_ui2d>
   b5236:	a30c      	add	r3, pc, #48	; (adr r3, b5268 <_ZN15TinyGPSLocation3lngEv+0x40>)
   b5238:	e9d3 2300 	ldrd	r2, r3, [r3]
   b523c:	f006 fa5a 	bl	bb6f4 <__aeabi_ddiv>
   b5240:	4606      	mov	r6, r0
   b5242:	8a20      	ldrh	r0, [r4, #16]
   b5244:	460f      	mov	r7, r1
   b5246:	f006 f8c1 	bl	bb3cc <__aeabi_i2d>
   b524a:	460b      	mov	r3, r1
   b524c:	4602      	mov	r2, r0
   b524e:	4639      	mov	r1, r7
   b5250:	4630      	mov	r0, r6
   b5252:	f005 ff6f 	bl	bb134 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   b5256:	7e23      	ldrb	r3, [r4, #24]
   b5258:	b113      	cbz	r3, b5260 <_ZN15TinyGPSLocation3lngEv+0x38>
   b525a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b525e:	4619      	mov	r1, r3
}
   b5260:	ec41 0b10 	vmov	d0, r0, r1
   b5264:	bdd0      	pop	{r4, r6, r7, pc}
   b5266:	bf00      	nop
   b5268:	00000000 	.word	0x00000000
   b526c:	41cdcd65 	.word	0x41cdcd65

000b5270 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   b5270:	b510      	push	{r4, lr}
   date = newDate;
   b5272:	6883      	ldr	r3, [r0, #8]
   b5274:	6043      	str	r3, [r0, #4]
{
   b5276:	4604      	mov	r4, r0
   b5278:	f001 feec 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b527c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b5280:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   b5282:	8023      	strh	r3, [r4, #0]
}
   b5284:	bd10      	pop	{r4, pc}

000b5286 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   b5286:	b510      	push	{r4, lr}
   time = newTime;
   b5288:	6883      	ldr	r3, [r0, #8]
   b528a:	6043      	str	r3, [r0, #4]
{
   b528c:	4604      	mov	r4, r0
   b528e:	f001 fee1 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b5292:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b5296:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   b5298:	8023      	strh	r3, [r4, #0]
}
   b529a:	bd10      	pop	{r4, pc}

000b529c <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   b529c:	b510      	push	{r4, lr}
   b529e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   b52a0:	4608      	mov	r0, r1
   b52a2:	f7ff ff30 	bl	b5106 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   b52a6:	60a0      	str	r0, [r4, #8]
}
   b52a8:	bd10      	pop	{r4, pc}

000b52aa <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   b52aa:	b510      	push	{r4, lr}
   b52ac:	4604      	mov	r4, r0
   newDate = atol(term);
   b52ae:	4608      	mov	r0, r1
   b52b0:	f006 fc65 	bl	bbb7e <atol>
   b52b4:	60a0      	str	r0, [r4, #8]
}
   b52b6:	bd10      	pop	{r4, pc}

000b52b8 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   b52b8:	b510      	push	{r4, lr}
   val = newval;
   b52ba:	68c3      	ldr	r3, [r0, #12]
   b52bc:	6083      	str	r3, [r0, #8]
{
   b52be:	4604      	mov	r4, r0
   b52c0:	f001 fec8 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b52c4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b52c8:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   b52ca:	8023      	strh	r3, [r4, #0]
}
   b52cc:	bd10      	pop	{r4, pc}

000b52ce <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   b52ce:	b510      	push	{r4, lr}
   b52d0:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   b52d2:	4608      	mov	r0, r1
   b52d4:	f7ff ff17 	bl	b5106 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   b52d8:	60e0      	str	r0, [r4, #12]
}
   b52da:	bd10      	pop	{r4, pc}

000b52dc <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   b52dc:	b510      	push	{r4, lr}
   val = newval;
   b52de:	68c3      	ldr	r3, [r0, #12]
   b52e0:	6083      	str	r3, [r0, #8]
{
   b52e2:	4604      	mov	r4, r0
   b52e4:	f001 feb6 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b52e8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b52ec:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   b52ee:	8023      	strh	r3, [r4, #0]
}
   b52f0:	bd10      	pop	{r4, pc}

000b52f2 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   b52f2:	b510      	push	{r4, lr}
   b52f4:	4604      	mov	r4, r0
   newval = atol(term);
   b52f6:	4608      	mov	r0, r1
   b52f8:	f006 fc41 	bl	bbb7e <atol>
   b52fc:	60e0      	str	r0, [r4, #12]
}
   b52fe:	bd10      	pop	{r4, pc}

000b5300 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   b5300:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   b5302:	4601      	mov	r1, r0
{
   b5304:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   b5306:	3010      	adds	r0, #16
   b5308:	f006 fcc5 	bl	bbc96 <strcpy>
   b530c:	f001 fea2 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b5310:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b5314:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   b5316:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   b5318:	bd10      	pop	{r4, pc}

000b531a <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   b531a:	2210      	movs	r2, #16
   b531c:	f006 bcfd 	b.w	bbd1a <strncpy>

000b5320 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   b5320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   b5322:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   b5326:	4604      	mov	r4, r0
  if (isChecksumTerm)
   b5328:	2d00      	cmp	r5, #0
   b532a:	d064      	beq.n	b53f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   b532c:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   b5330:	f7ff fed9 	bl	b50e6 <_ZN11TinyGPSPlus7fromHexEc>
   b5334:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   b5338:	4602      	mov	r2, r0
   b533a:	4620      	mov	r0, r4
   b533c:	f7ff fed3 	bl	b50e6 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   b5340:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   b5344:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   b5348:	b2c0      	uxtb	r0, r0
   b534a:	4283      	cmp	r3, r0
   b534c:	d14b      	bne.n	b53e6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   b534e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   b5352:	3301      	adds	r3, #1
   b5354:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   b5358:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b535c:	b123      	cbz	r3, b5368 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   b535e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   b5362:	3301      	adds	r3, #1
   b5364:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   b5368:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   b536c:	b333      	cbz	r3, b53bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   b536e:	2b01      	cmp	r3, #1
   b5370:	d115      	bne.n	b539e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   b5372:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5376:	f7ff ff7b 	bl	b5270 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   b537a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b537e:	f7ff ff82 	bl	b5286 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   b5382:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b5386:	b153      	cbz	r3, b539e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   b5388:	4620      	mov	r0, r4
   b538a:	f7ff ff11 	bl	b51b0 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   b538e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5392:	f7ff ff91 	bl	b52b8 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   b5396:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   b539a:	f7ff ff8d 	bl	b52b8 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   b539e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   b53a2:	b336      	cbz	r6, b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b53a4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   b53a8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   b53aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
   b53ac:	f006 fc69 	bl	bbc82 <strcmp>
   b53b0:	b9f8      	cbnz	r0, b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   b53b2:	4630      	mov	r0, r6
   b53b4:	f7ff ffa4 	bl	b5300 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   b53b8:	6b36      	ldr	r6, [r6, #48]	; 0x30
   b53ba:	e7f2      	b.n	b53a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   b53bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b53c0:	f7ff ff61 	bl	b5286 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   b53c4:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b53c8:	b133      	cbz	r3, b53d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   b53ca:	4620      	mov	r0, r4
   b53cc:	f7ff fef0 	bl	b51b0 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   b53d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b53d4:	f7ff ff70 	bl	b52b8 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   b53d8:	f104 0088 	add.w	r0, r4, #136	; 0x88
   b53dc:	f7ff ff7e 	bl	b52dc <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   b53e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   b53e4:	e7d9      	b.n	b539a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   b53e6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   b53ea:	3301      	adds	r3, #1
   b53ec:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   b53f0:	2500      	movs	r5, #0
}
   b53f2:	4628      	mov	r0, r5
   b53f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   b53f6:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   b53fa:	bb6a      	cbnz	r2, b5458 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   b53fc:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   b5400:	495a      	ldr	r1, [pc, #360]	; (b556c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   b5402:	4630      	mov	r0, r6
   b5404:	f006 fc3d 	bl	bbc82 <strcmp>
   b5408:	b120      	cbz	r0, b5414 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   b540a:	4959      	ldr	r1, [pc, #356]	; (b5570 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   b540c:	4630      	mov	r0, r6
   b540e:	f006 fc38 	bl	bbc82 <strcmp>
   b5412:	b998      	cbnz	r0, b543c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   b5414:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   b5416:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   b541a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b541e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   b5422:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   b5426:	2f00      	cmp	r7, #0
   b5428:	d0e3      	beq.n	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b542a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   b542c:	4631      	mov	r1, r6
   b542e:	f006 fc28 	bl	bbc82 <strcmp>
   b5432:	2800      	cmp	r0, #0
   b5434:	f280 8094 	bge.w	b5560 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   b5438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   b543a:	e7f0      	b.n	b541e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   b543c:	494d      	ldr	r1, [pc, #308]	; (b5574 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   b543e:	4630      	mov	r0, r6
   b5440:	f006 fc1f 	bl	bbc82 <strcmp>
   b5444:	b120      	cbz	r0, b5450 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   b5446:	494c      	ldr	r1, [pc, #304]	; (b5578 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   b5448:	4630      	mov	r0, r6
   b544a:	f006 fc1a 	bl	bbc82 <strcmp>
   b544e:	b908      	cbnz	r0, b5454 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   b5450:	2300      	movs	r3, #0
   b5452:	e7e0      	b.n	b5416 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   b5454:	2302      	movs	r3, #2
   b5456:	e7de      	b.n	b5416 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   b5458:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   b545c:	2902      	cmp	r1, #2
   b545e:	d023      	beq.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   b5460:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   b5464:	b303      	cbz	r3, b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   b5466:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   b546a:	3a01      	subs	r2, #1
   b546c:	2a28      	cmp	r2, #40	; 0x28
   b546e:	d81b      	bhi.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   b5470:	e8df f002 	tbb	[pc, r2]
   b5474:	49423b15 	.word	0x49423b15
   b5478:	6e68634c 	.word	0x6e68634c
   b547c:	1a1a1a72 	.word	0x1a1a1a72
   b5480:	1a1a1a1a 	.word	0x1a1a1a1a
   b5484:	1a1a1a1a 	.word	0x1a1a1a1a
   b5488:	1a1a1a1a 	.word	0x1a1a1a1a
   b548c:	1a1a1a1a 	.word	0x1a1a1a1a
   b5490:	1a1a1a1a 	.word	0x1a1a1a1a
   b5494:	423b3415 	.word	0x423b3415
   b5498:	59534c49 	.word	0x59534c49
   b549c:	5d          	.byte	0x5d
   b549d:	00          	.byte	0x00
      time.setTime(term);
   b549e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b54a2:	3048      	adds	r0, #72	; 0x48
   b54a4:	f7ff fefa 	bl	b529c <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b54a8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   b54ac:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b54b0:	2e00      	cmp	r6, #0
   b54b2:	d09e      	beq.n	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b54b4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   b54b8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   b54ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
   b54bc:	f006 fbe1 	bl	bbc82 <strcmp>
   b54c0:	2800      	cmp	r0, #0
   b54c2:	d196      	bne.n	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b54c4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   b54c6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   b54ca:	429a      	cmp	r2, r3
   b54cc:	dc91      	bgt.n	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   b54ce:	d103      	bne.n	b54d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   b54d0:	4639      	mov	r1, r7
   b54d2:	4630      	mov	r0, r6
   b54d4:	f7ff ff21 	bl	b531a <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b54d8:	6b36      	ldr	r6, [r6, #48]	; 0x30
   b54da:	e7e9      	b.n	b54b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   b54dc:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   b54e0:	4243      	negs	r3, r0
   b54e2:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   b54e4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   b54e8:	e7de      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   b54ea:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   b54ee:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   b54f2:	f7ff fe2d 	bl	b5150 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   b54f6:	e7d7      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   b54f8:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   b54fc:	424b      	negs	r3, r1
   b54fe:	414b      	adcs	r3, r1
   b5500:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   b5504:	e7d0      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   b5506:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b550a:	e7f0      	b.n	b54ee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   b550c:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   b5510:	4253      	negs	r3, r2
   b5512:	4153      	adcs	r3, r2
   b5514:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   b5518:	e7c6      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   b551a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b551e:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   b5520:	f7ff fed5 	bl	b52ce <_ZN14TinyGPSDecimal3setEPKc>
      break;
   b5524:	e7c0      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   b5526:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b552a:	3068      	adds	r0, #104	; 0x68
   b552c:	e7f8      	b.n	b5520 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   b552e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b5532:	3038      	adds	r0, #56	; 0x38
   b5534:	f7ff feb9 	bl	b52aa <_ZN11TinyGPSDate7setDateEPKc>
      break;
   b5538:	e7b6      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   b553a:	2b30      	cmp	r3, #48	; 0x30
   b553c:	bf94      	ite	ls
   b553e:	2300      	movls	r3, #0
   b5540:	2301      	movhi	r3, #1
   b5542:	e7cf      	b.n	b54e4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   b5544:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b5548:	3088      	adds	r0, #136	; 0x88
   b554a:	f7ff fed2 	bl	b52f2 <_ZN14TinyGPSInteger3setEPKc>
      break;
   b554e:	e7ab      	b.n	b54a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   b5550:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b5554:	3098      	adds	r0, #152	; 0x98
   b5556:	e7e3      	b.n	b5520 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   b5558:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b555c:	3078      	adds	r0, #120	; 0x78
   b555e:	e7df      	b.n	b5520 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   b5560:	f43f af47 	beq.w	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   b5564:	2300      	movs	r3, #0
   b5566:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   b556a:	e742      	b.n	b53f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b556c:	000bdf88 	.word	0x000bdf88
   b5570:	000bdf8e 	.word	0x000bdf8e
   b5574:	000bdf94 	.word	0x000bdf94
   b5578:	000bdf9a 	.word	0x000bdf9a

000b557c <_ZN11TinyGPSPlus6encodeEc>:
{
   b557c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   b557e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   b5582:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   b5584:	f103 0301 	add.w	r3, r3, #1
{
   b5588:	4604      	mov	r4, r0
   b558a:	460d      	mov	r5, r1
  ++encodedCharCount;
   b558c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   b5590:	d03a      	beq.n	b5608 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   b5592:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   b5596:	d814      	bhi.n	b55c2 <_ZN11TinyGPSPlus6encodeEc+0x46>
   b5598:	290a      	cmp	r1, #10
   b559a:	d01c      	beq.n	b55d6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   b559c:	290d      	cmp	r1, #13
   b559e:	d01a      	beq.n	b55d6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   b55a0:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   b55a2:	bf9f      	itttt	ls
   b55a4:	1c5a      	addls	r2, r3, #1
   b55a6:	191b      	addls	r3, r3, r4
   b55a8:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   b55ac:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   b55b0:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   b55b4:	bb98      	cbnz	r0, b561e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   b55b6:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   b55ba:	404d      	eors	r5, r1
   b55bc:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   b55c0:	e021      	b.n	b5606 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   b55c2:	292a      	cmp	r1, #42	; 0x2a
   b55c4:	d007      	beq.n	b55d6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   b55c6:	292c      	cmp	r1, #44	; 0x2c
   b55c8:	d1ea      	bne.n	b55a0 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   b55ca:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   b55ce:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   b55d2:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   b55d6:	2b0e      	cmp	r3, #14
   b55d8:	f04f 0000 	mov.w	r0, #0
   b55dc:	d805      	bhi.n	b55ea <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   b55de:	4423      	add	r3, r4
   b55e0:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7ff fe9b 	bl	b5320 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   b55ea:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   b55ee:	3301      	adds	r3, #1
   b55f0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   b55f4:	2300      	movs	r3, #0
   b55f6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   b55fa:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   b55fe:	425d      	negs	r5, r3
   b5600:	415d      	adcs	r5, r3
   b5602:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   b5606:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   b5608:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   b560a:	2302      	movs	r3, #2
    parity = 0;
   b560c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   b5610:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   b5614:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   b5618:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   b561c:	e7f3      	b.n	b5606 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   b561e:	2000      	movs	r0, #0
   b5620:	e7f1      	b.n	b5606 <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000b5624 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   b5624:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b5626:	201c      	movs	r0, #28
   b5628:	f7fe fd35 	bl	b4096 <_Znwj>
   b562c:	4604      	mov	r4, r0
   b562e:	b148      	cbz	r0, b5644 <_Z10builderTcpv+0x20>
   b5630:	4b06      	ldr	r3, [pc, #24]	; (b564c <_Z10builderTcpv+0x28>)
   b5632:	4907      	ldr	r1, [pc, #28]	; (b5650 <_Z10builderTcpv+0x2c>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	9300      	str	r3, [sp, #0]
   b5638:	6809      	ldr	r1, [r1, #0]
   b563a:	4b06      	ldr	r3, [pc, #24]	; (b5654 <_Z10builderTcpv+0x30>)
   b563c:	f242 3234 	movw	r2, #9012	; 0x2334
   b5640:	f001 f870 	bl	b6724 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   b5644:	4620      	mov	r0, r4
   b5646:	b002      	add	sp, #8
   b5648:	bd10      	pop	{r4, pc}
   b564a:	bf00      	nop
   b564c:	2003e544 	.word	0x2003e544
   b5650:	2003e540 	.word	0x2003e540
   b5654:	000bdfa0 	.word	0x000bdfa0

000b5658 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   b5658:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   b565a:	2020      	movs	r0, #32
   b565c:	f7fe fd1b 	bl	b4096 <_Znwj>
   b5660:	4604      	mov	r4, r0
   b5662:	b140      	cbz	r0, b5676 <_Z11builderHttpv+0x1e>
   b5664:	4b05      	ldr	r3, [pc, #20]	; (b567c <_Z11builderHttpv+0x24>)
   b5666:	4906      	ldr	r1, [pc, #24]	; (b5680 <_Z11builderHttpv+0x28>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	9300      	str	r3, [sp, #0]
   b566c:	6809      	ldr	r1, [r1, #0]
   b566e:	4b05      	ldr	r3, [pc, #20]	; (b5684 <_Z11builderHttpv+0x2c>)
   b5670:	2250      	movs	r2, #80	; 0x50
   b5672:	f000 fa41 	bl	b5af8 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   b5676:	4620      	mov	r0, r4
   b5678:	b002      	add	sp, #8
   b567a:	bd10      	pop	{r4, pc}
   b567c:	2003e544 	.word	0x2003e544
   b5680:	2003e540 	.word	0x2003e540
   b5684:	000bdfa0 	.word	0x000bdfa0

000b5688 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   b5688:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b568a:	201c      	movs	r0, #28
   b568c:	f7fe fd03 	bl	b4096 <_Znwj>
   b5690:	4604      	mov	r4, r0
   b5692:	b148      	cbz	r0, b56a8 <_Z10builderUdpv+0x20>
   b5694:	4b06      	ldr	r3, [pc, #24]	; (b56b0 <_Z10builderUdpv+0x28>)
   b5696:	4907      	ldr	r1, [pc, #28]	; (b56b4 <_Z10builderUdpv+0x2c>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	9300      	str	r3, [sp, #0]
   b569c:	6809      	ldr	r1, [r1, #0]
   b569e:	4b06      	ldr	r3, [pc, #24]	; (b56b8 <_Z10builderUdpv+0x30>)
   b56a0:	f242 3234 	movw	r2, #9012	; 0x2334
   b56a4:	f001 fb4e 	bl	b6d44 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   b56a8:	4620      	mov	r0, r4
   b56aa:	b002      	add	sp, #8
   b56ac:	bd10      	pop	{r4, pc}
   b56ae:	bf00      	nop
   b56b0:	2003e544 	.word	0x2003e544
   b56b4:	2003e540 	.word	0x2003e540
   b56b8:	000bdfa0 	.word	0x000bdfa0

000b56bc <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   b56bc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   b56be:	2014      	movs	r0, #20
   b56c0:	f7fe fce9 	bl	b4096 <_Znwj>
   b56c4:	4604      	mov	r4, r0
   b56c6:	b140      	cbz	r0, b56da <_Z15builderParticlev+0x1e>
   b56c8:	4b05      	ldr	r3, [pc, #20]	; (b56e0 <_Z15builderParticlev+0x24>)
   b56ca:	4906      	ldr	r1, [pc, #24]	; (b56e4 <_Z15builderParticlev+0x28>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	9300      	str	r3, [sp, #0]
   b56d0:	2300      	movs	r3, #0
   b56d2:	6809      	ldr	r1, [r1, #0]
   b56d4:	461a      	mov	r2, r3
   b56d6:	f000 fd2b 	bl	b6130 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   b56da:	4620      	mov	r0, r4
   b56dc:	b002      	add	sp, #8
   b56de:	bd10      	pop	{r4, pc}
   b56e0:	2003e544 	.word	0x2003e544
   b56e4:	2003e540 	.word	0x2003e540

000b56e8 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b56e8:	2a01      	cmp	r2, #1
   b56ea:	d102      	bne.n	b56f2 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b56ec:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b56ee:	2000      	movs	r0, #0
   b56f0:	4770      	bx	lr
	  switch (__op)
   b56f2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b56f4:	bf04      	itt	eq
   b56f6:	680b      	ldreq	r3, [r1, #0]
   b56f8:	6003      	streq	r3, [r0, #0]
	      break;
   b56fa:	e7f8      	b.n	b56ee <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b56fc <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b56fc:	6803      	ldr	r3, [r0, #0]
   b56fe:	4718      	bx	r3

000b5700 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5700:	b510      	push	{r4, lr}
      if (_M_manager)
   b5702:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5704:	4604      	mov	r4, r0
      if (_M_manager)
   b5706:	b113      	cbz	r3, b570e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5708:	2203      	movs	r2, #3
   b570a:	4601      	mov	r1, r0
   b570c:	4798      	blx	r3
    }
   b570e:	4620      	mov	r0, r4
   b5710:	bd10      	pop	{r4, pc}
	...

000b5714 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   b5714:	b510      	push	{r4, lr}
   b5716:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b5718:	2200      	movs	r2, #0
	operator=(_Functor&& __f)
   b571a:	4603      	mov	r3, r0
    _Function_base() : _M_manager(nullptr) { }
   b571c:	9204      	str	r2, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   b571e:	b121      	cbz	r1, b572a <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b5720:	4a0f      	ldr	r2, [pc, #60]	; (b5760 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x4c>)
   b5722:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5724:	4a0f      	ldr	r2, [pc, #60]	; (b5764 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x50>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5726:	9102      	str	r1, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b5728:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b572a:	aa02      	add	r2, sp, #8
   b572c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5730:	466c      	mov	r4, sp
   b5732:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5736:	e893 0003 	ldmia.w	r3, {r0, r1}
   b573a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b573e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5742:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5746:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5748:	6898      	ldr	r0, [r3, #8]
   b574a:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b574c:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b574e:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5750:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b5752:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5754:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b5756:	4610      	mov	r0, r2
   b5758:	f7ff ffd2 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
	}
   b575c:	b006      	add	sp, #24
   b575e:	bd10      	pop	{r4, pc}
   b5760:	000b56fd 	.word	0x000b56fd
   b5764:	000b56e9 	.word	0x000b56e9

000b5768 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5768:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b576a:	6984      	ldr	r4, [r0, #24]
   b576c:	4b0a      	ldr	r3, [pc, #40]	; (b5798 <_ZN9TCPClientD1Ev+0x30>)
   b576e:	6003      	str	r3, [r0, #0]
   b5770:	4605      	mov	r5, r0
   b5772:	b17c      	cbz	r4, b5794 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5774:	6863      	ldr	r3, [r4, #4]
   b5776:	3b01      	subs	r3, #1
   b5778:	6063      	str	r3, [r4, #4]
   b577a:	b95b      	cbnz	r3, b5794 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b577c:	6823      	ldr	r3, [r4, #0]
   b577e:	4620      	mov	r0, r4
   b5780:	689b      	ldr	r3, [r3, #8]
   b5782:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5784:	68a3      	ldr	r3, [r4, #8]
   b5786:	3b01      	subs	r3, #1
   b5788:	60a3      	str	r3, [r4, #8]
   b578a:	b91b      	cbnz	r3, b5794 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b578c:	6823      	ldr	r3, [r4, #0]
   b578e:	4620      	mov	r0, r4
   b5790:	68db      	ldr	r3, [r3, #12]
   b5792:	4798      	blx	r3
   b5794:	4628      	mov	r0, r5
   b5796:	bd38      	pop	{r3, r4, r5, pc}
   b5798:	000be734 	.word	0x000be734

000b579c <_ZN9TCPClientD0Ev>:
   b579c:	b510      	push	{r4, lr}
   b579e:	4604      	mov	r4, r0
   b57a0:	f7ff ffe2 	bl	b5768 <_ZN9TCPClientD1Ev>
   b57a4:	4620      	mov	r0, r4
   b57a6:	211c      	movs	r1, #28
   b57a8:	f7fe fc79 	bl	b409e <_ZdlPvj>
   b57ac:	4620      	mov	r0, r4
   b57ae:	bd10      	pop	{r4, pc}

000b57b0 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   b57b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   b57b4:	f100 0108 	add.w	r1, r0, #8
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b57b8:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   b57ba:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   b57bc:	b14a      	cbz	r2, b57d2 <_ZN10UbiBuilder7builderEv+0x22>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b57be:	7c17      	ldrb	r7, [r2, #16]
   b57c0:	7806      	ldrb	r6, [r0, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b57c2:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b57c6:	42b7      	cmp	r7, r6
   b57c8:	bf2a      	itet	cs
   b57ca:	4613      	movcs	r3, r2
   b57cc:	462a      	movcc	r2, r5
   b57ce:	4622      	movcs	r2, r4
   b57d0:	e7f4      	b.n	b57bc <_ZN10UbiBuilder7builderEv+0xc>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   b57d2:	4299      	cmp	r1, r3
   b57d4:	d004      	beq.n	b57e0 <_ZN10UbiBuilder7builderEv+0x30>
	      || _M_impl._M_key_compare(__k,
   b57d6:	7800      	ldrb	r0, [r0, #0]
   b57d8:	7c1a      	ldrb	r2, [r3, #16]
   b57da:	4290      	cmp	r0, r2
   b57dc:	bf38      	it	cc
   b57de:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b57e0:	69da      	ldr	r2, [r3, #28]
   b57e2:	b90a      	cbnz	r2, b57e8 <_ZN10UbiBuilder7builderEv+0x38>
	__throw_bad_function_call();
   b57e4:	f005 fb83 	bl	baeee <_ZSt25__throw_bad_function_callv>
}
   b57e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57ec:	6a1a      	ldr	r2, [r3, #32]
   b57ee:	f103 0014 	add.w	r0, r3, #20
   b57f2:	4710      	bx	r2

000b57f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b57f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b57f6:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b57f8:	4616      	mov	r6, r2
   b57fa:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b57fc:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   b57fe:	2201      	movs	r2, #1
      while (__x != 0)
   b5800:	b163      	cbz	r3, b581c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x28>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5802:	7c1d      	ldrb	r5, [r3, #16]
   b5804:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b5806:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b580a:	4295      	cmp	r5, r2
   b580c:	bf88      	it	hi
   b580e:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5810:	461d      	mov	r5, r3
   b5812:	bf96      	itet	ls
   b5814:	2200      	movls	r2, #0
   b5816:	463b      	movhi	r3, r7
   b5818:	4603      	movls	r3, r0
   b581a:	e7f1      	b.n	b5800 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   b581c:	b192      	cbz	r2, b5844 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x50>
	  if (__j == begin())
   b581e:	68ca      	ldr	r2, [r1, #12]
   b5820:	42aa      	cmp	r2, r5
   b5822:	d103      	bne.n	b582c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b5824:	e9c4 3500 	strd	r3, r5, [r4]
    }
   b5828:	4620      	mov	r0, r4
   b582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b582c:	4628      	mov	r0, r5
   b582e:	f005 fb01 	bl	bae34 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b5832:	7833      	ldrb	r3, [r6, #0]
   b5834:	7c02      	ldrb	r2, [r0, #16]
   b5836:	429a      	cmp	r2, r3
   b5838:	f04f 0300 	mov.w	r3, #0
   b583c:	d3f2      	bcc.n	b5824 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b583e:	e9c4 0300 	strd	r0, r3, [r4]
   b5842:	e7f1      	b.n	b5828 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
   b5844:	4628      	mov	r0, r5
   b5846:	e7f4      	b.n	b5832 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3e>

000b5848 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   b5848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
   b584c:	f100 0904 	add.w	r9, r0, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5850:	6885      	ldr	r5, [r0, #8]
   b5852:	4606      	mov	r6, r0
   b5854:	460f      	mov	r7, r1
      { return &this->_M_impl._M_header; }
   b5856:	464c      	mov	r4, r9
      while (__x != 0)
   b5858:	b14d      	cbz	r5, b586e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x26>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b585a:	7c28      	ldrb	r0, [r5, #16]
   b585c:	7839      	ldrb	r1, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b585e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5862:	4288      	cmp	r0, r1
   b5864:	bf2a      	itet	cs
   b5866:	462c      	movcs	r4, r5
   b5868:	4615      	movcc	r5, r2
   b586a:	461d      	movcs	r5, r3
   b586c:	e7f4      	b.n	b5858 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b586e:	45a1      	cmp	r9, r4
   b5870:	d003      	beq.n	b587a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x32>
   b5872:	783a      	ldrb	r2, [r7, #0]
   b5874:	7c23      	ldrb	r3, [r4, #16]
   b5876:	429a      	cmp	r2, r3
   b5878:	d22f      	bcs.n	b58da <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b587a:	2024      	movs	r0, #36	; 0x24
   b587c:	f7fe fc0b 	bl	b4096 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b5880:	f897 a000 	ldrb.w	sl, [r7]
   b5884:	f880 a010 	strb.w	sl, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   b5888:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   b588a:	45a1      	cmp	r9, r4
   b588c:	4680      	mov	r8, r0
   b588e:	61c3      	str	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b5890:	f100 0210 	add.w	r2, r0, #16
   b5894:	d126      	bne.n	b58e4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9c>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b5896:	6973      	ldr	r3, [r6, #20]
   b5898:	b11b      	cbz	r3, b58a2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5a>
   b589a:	6937      	ldr	r7, [r6, #16]
   b589c:	7c3b      	ldrb	r3, [r7, #16]
   b589e:	4553      	cmp	r3, sl
   b58a0:	d309      	bcc.n	b58b6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6e>
	    return _M_get_insert_unique_pos(__k);
   b58a2:	4631      	mov	r1, r6
   b58a4:	a802      	add	r0, sp, #8
   b58a6:	f7ff ffa5 	bl	b57f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b58aa:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
	    if (__res.second)
   b58ae:	2f00      	cmp	r7, #0
   b58b0:	d052      	beq.n	b5958 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   b58b2:	2c00      	cmp	r4, #0
   b58b4:	d14e      	bne.n	b5954 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b58b6:	45b9      	cmp	r9, r7
   b58b8:	d04c      	beq.n	b5954 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b58ba:	f898 0010 	ldrb.w	r0, [r8, #16]
   b58be:	7c3b      	ldrb	r3, [r7, #16]
   b58c0:	4298      	cmp	r0, r3
   b58c2:	bf2c      	ite	cs
   b58c4:	2000      	movcs	r0, #0
   b58c6:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b58c8:	464b      	mov	r3, r9
   b58ca:	463a      	mov	r2, r7
   b58cc:	4641      	mov	r1, r8
   b58ce:	f005 fab3 	bl	bae38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b58d2:	6973      	ldr	r3, [r6, #20]
   b58d4:	3301      	adds	r3, #1
   b58d6:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b58d8:	4644      	mov	r4, r8
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   b58da:	f104 0014 	add.w	r0, r4, #20
   b58de:	b004      	add	sp, #16
   b58e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return __x < __y; }
   b58e4:	7c23      	ldrb	r3, [r4, #16]
   b58e6:	9201      	str	r2, [sp, #4]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b58e8:	4553      	cmp	r3, sl
   b58ea:	d918      	bls.n	b591e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b58ec:	68f3      	ldr	r3, [r6, #12]
   b58ee:	429c      	cmp	r4, r3
   b58f0:	d009      	beq.n	b5906 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
	_M_node = _Rb_tree_decrement(_M_node);
   b58f2:	4620      	mov	r0, r4
   b58f4:	f005 fa9e 	bl	bae34 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b58f8:	7c03      	ldrb	r3, [r0, #16]
   b58fa:	9a01      	ldr	r2, [sp, #4]
   b58fc:	4553      	cmp	r3, sl
   b58fe:	d205      	bcs.n	b590c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc4>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5900:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b5902:	b953      	cbnz	r3, b591a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
   b5904:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b5906:	4627      	mov	r7, r4
   b5908:	461c      	mov	r4, r3
   b590a:	e7d0      	b.n	b58ae <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b590c:	4631      	mov	r1, r6
   b590e:	a802      	add	r0, sp, #8
   b5910:	f7ff ff70 	bl	b57f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b5914:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   b5918:	e7f5      	b.n	b5906 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
   b591a:	4623      	mov	r3, r4
   b591c:	e7f3      	b.n	b5906 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b591e:	d21b      	bcs.n	b5958 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
   b5920:	6937      	ldr	r7, [r6, #16]
   b5922:	42bc      	cmp	r4, r7
   b5924:	d00b      	beq.n	b593e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
	_M_node = _Rb_tree_increment(_M_node);
   b5926:	4620      	mov	r0, r4
   b5928:	f005 fa82 	bl	bae30 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b592c:	7c03      	ldrb	r3, [r0, #16]
   b592e:	9a01      	ldr	r2, [sp, #4]
   b5930:	4553      	cmp	r3, sl
	_M_node = _Rb_tree_increment(_M_node);
   b5932:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5934:	d905      	bls.n	b5942 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5936:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b5938:	b953      	cbnz	r3, b5950 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
   b593a:	4627      	mov	r7, r4
   b593c:	461d      	mov	r5, r3
   b593e:	462c      	mov	r4, r5
   b5940:	e7b5      	b.n	b58ae <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b5942:	4631      	mov	r1, r6
   b5944:	a802      	add	r0, sp, #8
   b5946:	f7ff ff55 	bl	b57f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b594a:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
   b594e:	e7f6      	b.n	b593e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
   b5950:	4607      	mov	r7, r0
   b5952:	e7f4      	b.n	b593e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5954:	2001      	movs	r0, #1
   b5956:	e7b7      	b.n	b58c8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x80>
    class function<_Res(_ArgTypes...)>
   b5958:	f108 0014 	add.w	r0, r8, #20
   b595c:	f7ff fed0 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5960:	4640      	mov	r0, r8
   b5962:	2124      	movs	r1, #36	; 0x24
   b5964:	f7fe fb9b 	bl	b409e <_ZdlPvj>
   b5968:	46a0      	mov	r8, r4
   b596a:	e7b5      	b.n	b58d8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x90>

000b596c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   b596c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5970:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   b5972:	2600      	movs	r6, #0
   b5974:	4617      	mov	r7, r2
	  : _Node_allocator()
   b5976:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   b597a:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   b597e:	e9c0 2605 	strd	r2, r6, [r0, #20]
   b5982:	4604      	mov	r4, r0
   b5984:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   b5986:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   b5988:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   b598a:	f10d 0107 	add.w	r1, sp, #7
   b598e:	2301      	movs	r3, #1
   b5990:	4628      	mov	r0, r5
   b5992:	f88d 3007 	strb.w	r3, [sp, #7]
   b5996:	f7ff ff57 	bl	b5848 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b599a:	4916      	ldr	r1, [pc, #88]	; (b59f4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   b599c:	f7ff feba 	bl	b5714 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   b59a0:	f10d 0107 	add.w	r1, sp, #7
   b59a4:	4628      	mov	r0, r5
   b59a6:	f88d 6007 	strb.w	r6, [sp, #7]
   b59aa:	f7ff ff4d 	bl	b5848 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b59ae:	4912      	ldr	r1, [pc, #72]	; (b59f8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   b59b0:	f7ff feb0 	bl	b5714 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   b59b4:	2302      	movs	r3, #2
   b59b6:	f10d 0107 	add.w	r1, sp, #7
   b59ba:	4628      	mov	r0, r5
   b59bc:	f88d 3007 	strb.w	r3, [sp, #7]
   b59c0:	f7ff ff42 	bl	b5848 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b59c4:	490d      	ldr	r1, [pc, #52]	; (b59fc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   b59c6:	f7ff fea5 	bl	b5714 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   b59ca:	2303      	movs	r3, #3
   b59cc:	f10d 0107 	add.w	r1, sp, #7
   b59d0:	4628      	mov	r0, r5
   b59d2:	f88d 3007 	strb.w	r3, [sp, #7]
   b59d6:	f7ff ff37 	bl	b5848 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b59da:	4909      	ldr	r1, [pc, #36]	; (b5a00 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   b59dc:	f7ff fe9a 	bl	b5714 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   b59e0:	4b08      	ldr	r3, [pc, #32]	; (b5a04 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   b59e2:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   b59e6:	4b08      	ldr	r3, [pc, #32]	; (b5a08 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   b59e8:	4620      	mov	r0, r4
  _token = token;
   b59ea:	601f      	str	r7, [r3, #0]
}
   b59ec:	b002      	add	sp, #8
   b59ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b59f2:	bf00      	nop
   b59f4:	000b5625 	.word	0x000b5625
   b59f8:	000b5659 	.word	0x000b5659
   b59fc:	000b5689 	.word	0x000b5689
   b5a00:	000b56bd 	.word	0x000b56bd
   b5a04:	2003e540 	.word	0x2003e540
   b5a08:	2003e544 	.word	0x2003e544

000b5a0c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   b5a0c:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b5a0e:	4805      	ldr	r0, [pc, #20]	; (b5a24 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b5a10:	f004 fbe2 	bl	ba1d8 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b5a14:	4804      	ldr	r0, [pc, #16]	; (b5a28 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b5a16:	f004 fbdf 	bl	ba1d8 <_ZN9TCPClientC1Ev>
   b5a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b5a1e:	4803      	ldr	r0, [pc, #12]	; (b5a2c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b5a20:	f004 be42 	b.w	ba6a8 <_ZN3UDPC1Ev>
   b5a24:	2003e524 	.word	0x2003e524
   b5a28:	2003e4bc 	.word	0x2003e4bc
   b5a2c:	2003e4d8 	.word	0x2003e4d8

000b5a30 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   b5a30:	7501      	strb	r1, [r0, #20]
   b5a32:	4770      	bx	lr

000b5a34 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   b5a34:	2200      	movs	r2, #0
	  : _Node_allocator()
   b5a36:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b5a38:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b5a3c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b5a40:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b5a42:	4770      	bx	lr

000b5a44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   b5a44:	b570      	push	{r4, r5, r6, lr}
   b5a46:	4606      	mov	r6, r0
   b5a48:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   b5a4c:	2014      	movs	r0, #20
   b5a4e:	f001 fdd7 	bl	b7600 <malloc>
   b5a52:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   b5a54:	2014      	movs	r0, #20
   b5a56:	f001 fdd3 	bl	b7600 <malloc>
   b5a5a:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   b5a5c:	4630      	mov	r0, r6
   b5a5e:	f006 f940 	bl	bbce2 <strlen>
    for (int i = 0; i < len - 2; i++) {
   b5a62:	4632      	mov	r2, r6
   b5a64:	2300      	movs	r3, #0
   b5a66:	3802      	subs	r0, #2
   b5a68:	4298      	cmp	r0, r3
   b5a6a:	dd14      	ble.n	b5a96 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   b5a6c:	f812 1b01 	ldrb.w	r1, [r2], #1
   b5a70:	290d      	cmp	r1, #13
   b5a72:	d13a      	bne.n	b5aea <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5a74:	7811      	ldrb	r1, [r2, #0]
   b5a76:	290a      	cmp	r1, #10
   b5a78:	d137      	bne.n	b5aea <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5a7a:	7851      	ldrb	r1, [r2, #1]
   b5a7c:	290d      	cmp	r1, #13
   b5a7e:	d134      	bne.n	b5aea <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b5a80:	7891      	ldrb	r1, [r2, #2]
   b5a82:	290a      	cmp	r1, #10
   b5a84:	d131      	bne.n	b5aea <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   b5a86:	3304      	adds	r3, #4
   b5a88:	18f1      	adds	r1, r6, r3
   b5a8a:	2214      	movs	r2, #20
   b5a8c:	4628      	mov	r0, r5
   b5a8e:	f006 f944 	bl	bbd1a <strncpy>
        parsed[20] = '\0';
   b5a92:	2300      	movs	r3, #0
   b5a94:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   b5a96:	210a      	movs	r1, #10
   b5a98:	4628      	mov	r0, r5
   b5a9a:	f006 f8db 	bl	bbc54 <strchr>
    if (pch == NULL) {
   b5a9e:	4606      	mov	r6, r0
   b5aa0:	b328      	cbz	r0, b5aee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   b5aa2:	210a      	movs	r1, #10
   b5aa4:	3001      	adds	r0, #1
   b5aa6:	f006 f8d5 	bl	bbc54 <strchr>
    if (pch2 == NULL) {
   b5aaa:	b300      	cbz	r0, b5aee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   b5aac:	4631      	mov	r1, r6
   b5aae:	4620      	mov	r0, r4
   b5ab0:	f006 f8f1 	bl	bbc96 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f006 f914 	bl	bbce2 <strlen>
   b5aba:	4420      	add	r0, r4
   b5abc:	2300      	movs	r3, #0
   b5abe:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   b5ac2:	4620      	mov	r0, r4
   b5ac4:	f006 f858 	bl	bbb78 <atof>
   b5ac8:	ec51 0b10 	vmov	r0, r1, d0
   b5acc:	f005 ffe0 	bl	bba90 <__aeabi_d2f>
   b5ad0:	ee08 0a10 	vmov	s16, r0
    free(dst);
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f001 fd9b 	bl	b7610 <free>
    free(parsed);
   b5ada:	4628      	mov	r0, r5
   b5adc:	f001 fd98 	bl	b7610 <free>
}
   b5ae0:	eeb0 0a48 	vmov.f32	s0, s16
   b5ae4:	ecbd 8b02 	vpop	{d8}
   b5ae8:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   b5aea:	3301      	adds	r3, #1
   b5aec:	e7bc      	b.n	b5a68 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   b5aee:	ed9f 8a01 	vldr	s16, [pc, #4]	; b5af4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   b5af2:	e7f5      	b.n	b5ae0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   b5af4:	cda2425f 	.word	0xcda2425f

000b5af8 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5af8:	b530      	push	{r4, r5, lr}
   b5afa:	4d07      	ldr	r5, [pc, #28]	; (b5b18 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   b5afc:	6005      	str	r5, [r0, #0]
   b5afe:	2500      	movs	r5, #0
  _user_agent = user_agent;
   b5b00:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5b04:	7505      	strb	r5, [r0, #20]
  _token = token;
   b5b06:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5b08:	f241 3588 	movw	r5, #5000	; 0x1388
   b5b0c:	6185      	str	r5, [r0, #24]
   b5b0e:	2505      	movs	r5, #5
  _port = port;
   b5b10:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5b14:	7705      	strb	r5, [r0, #28]
}
   b5b16:	bd30      	pop	{r4, r5, pc}
   b5b18:	000be1bc 	.word	0x000be1bc

000b5b1c <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   b5b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5b20:	f8df 808c 	ldr.w	r8, [pc, #140]	; b5bb0 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   b5b24:	f8df a08c 	ldr.w	sl, [pc, #140]	; b5bb4 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   b5b28:	f8df b08c 	ldr.w	fp, [pc, #140]	; b5bb8 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   b5b2c:	4604      	mov	r4, r0
   b5b2e:	460d      	mov	r5, r1
   b5b30:	4617      	mov	r7, r2
   b5b32:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5b34:	4640      	mov	r0, r8
   b5b36:	fa5f f986 	uxtb.w	r9, r6
   b5b3a:	f004 f9c5 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b5b3e:	bb88      	cbnz	r0, b5ba4 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   b5b40:	7f23      	ldrb	r3, [r4, #28]
   b5b42:	454b      	cmp	r3, r9
   b5b44:	d92e      	bls.n	b5ba4 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   b5b46:	7d23      	ldrb	r3, [r4, #20]
   b5b48:	b1cb      	cbz	r3, b5b7e <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   b5b4a:	f004 ff0d 	bl	ba968 <_Z16_fetch_usbserialv>
   b5b4e:	4651      	mov	r1, sl
   b5b50:	f003 fde8 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(host);
   b5b54:	f004 ff08 	bl	ba968 <_Z16_fetch_usbserialv>
   b5b58:	4629      	mov	r1, r5
   b5b5a:	f003 fde3 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b5b5e:	f004 ff03 	bl	ba968 <_Z16_fetch_usbserialv>
   b5b62:	4659      	mov	r1, fp
   b5b64:	f003 fdde 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b5b68:	f004 fefe 	bl	ba968 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5b6c:	220a      	movs	r2, #10
   b5b6e:	4649      	mov	r1, r9
   b5b70:	9001      	str	r0, [sp, #4]
   b5b72:	f003 fdf4 	bl	b975e <_ZN5Print11printNumberEmh>
        n += println();
   b5b76:	9b01      	ldr	r3, [sp, #4]
   b5b78:	4618      	mov	r0, r3
   b5b7a:	f003 fdda 	bl	b9732 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   b5b7e:	2300      	movs	r3, #0
   b5b80:	b2ba      	uxth	r2, r7
   b5b82:	4629      	mov	r1, r5
   b5b84:	4640      	mov	r0, r8
   b5b86:	f004 f921 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   b5b8a:	7d23      	ldrb	r3, [r4, #20]
   b5b8c:	b123      	cbz	r3, b5b98 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   b5b8e:	f004 feeb 	bl	ba968 <_Z16_fetch_usbserialv>
   b5b92:	4906      	ldr	r1, [pc, #24]	; (b5bac <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   b5b94:	f003 fdd9 	bl	b974a <_ZN5Print7printlnEPKc>
    delay(1000);
   b5b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5b9c:	f001 fd88 	bl	b76b0 <delay>
   b5ba0:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5ba2:	e7c7      	b.n	b5b34 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   b5ba4:	b003      	add	sp, #12
   b5ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5baa:	bf00      	nop
   b5bac:	000bdfde 	.word	0x000bdfde
   b5bb0:	2003e548 	.word	0x2003e548
   b5bb4:	000bdfb4 	.word	0x000bdfb4
   b5bb8:	000bdfca 	.word	0x000bdfca

000b5bbc <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   b5bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bbe:	4605      	mov	r5, r0
   b5bc0:	460c      	mov	r4, r1
    response[i] = '\0';
   b5bc2:	f240 22bd 	movw	r2, #701	; 0x2bd
   b5bc6:	2100      	movs	r1, #0
   b5bc8:	4620      	mov	r0, r4
   b5bca:	f006 f80d 	bl	bbbe8 <memset>
  if (_debug) {
   b5bce:	7d2b      	ldrb	r3, [r5, #20]
   b5bd0:	b14b      	cbz	r3, b5be6 <_ZN7UbiHTTP16readServerAnswerEPc+0x2a>
    Serial.println("----------");
   b5bd2:	f004 fec9 	bl	ba968 <_Z16_fetch_usbserialv>
   b5bd6:	4914      	ldr	r1, [pc, #80]	; (b5c28 <_ZN7UbiHTTP16readServerAnswerEPc+0x6c>)
   b5bd8:	f003 fdb7 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b5bdc:	f004 fec4 	bl	ba968 <_Z16_fetch_usbserialv>
   b5be0:	4912      	ldr	r1, [pc, #72]	; (b5c2c <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   b5be2:	f003 fdb2 	bl	b974a <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   b5be6:	4e12      	ldr	r6, [pc, #72]	; (b5c30 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   b5be8:	f204 27bb 	addw	r7, r4, #699	; 0x2bb
   b5bec:	4630      	mov	r0, r6
   b5bee:	f004 fa49 	bl	ba084 <_ZN9TCPClient9availableEv>
   b5bf2:	b170      	cbz	r0, b5c12 <_ZN7UbiHTTP16readServerAnswerEPc+0x56>
    response[j] = (char)_client_http_ubi.read();
   b5bf4:	4630      	mov	r0, r6
   b5bf6:	f004 f853 	bl	b9ca0 <_ZN9TCPClient4readEv>
   b5bfa:	7020      	strb	r0, [r4, #0]
    if (_debug) {
   b5bfc:	7d2b      	ldrb	r3, [r5, #20]
   b5bfe:	b12b      	cbz	r3, b5c0c <_ZN7UbiHTTP16readServerAnswerEPc+0x50>
      Serial.write(response[j]);
   b5c00:	f004 feb2 	bl	ba968 <_Z16_fetch_usbserialv>
   b5c04:	6803      	ldr	r3, [r0, #0]
   b5c06:	7821      	ldrb	r1, [r4, #0]
   b5c08:	689b      	ldr	r3, [r3, #8]
   b5c0a:	4798      	blx	r3
    if (j >= MAX_BUFFER_SIZE - 1) {
   b5c0c:	3401      	adds	r4, #1
   b5c0e:	42a7      	cmp	r7, r4
   b5c10:	d1ec      	bne.n	b5bec <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
  if (_debug) {
   b5c12:	7d2b      	ldrb	r3, [r5, #20]
   b5c14:	b133      	cbz	r3, b5c24 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
    Serial.println("\n----------");
   b5c16:	f004 fea7 	bl	ba968 <_Z16_fetch_usbserialv>
}
   b5c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("\n----------");
   b5c1e:	4905      	ldr	r1, [pc, #20]	; (b5c34 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   b5c20:	f003 bd93 	b.w	b974a <_ZN5Print7printlnEPKc>
}
   b5c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5c26:	bf00      	nop
   b5c28:	000be003 	.word	0x000be003
   b5c2c:	000bdfef 	.word	0x000bdfef
   b5c30:	2003e548 	.word	0x2003e548
   b5c34:	000be002 	.word	0x000be002

000b5c38 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   b5c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5c3a:	4f0e      	ldr	r7, [pc, #56]	; (b5c74 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   b5c3c:	4604      	mov	r4, r0
  int timeout = 0;
   b5c3e:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5c40:	4638      	mov	r0, r7
   b5c42:	f004 fa1f 	bl	ba084 <_ZN9TCPClient9availableEv>
   b5c46:	4605      	mov	r5, r0
   b5c48:	b990      	cbnz	r0, b5c70 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   b5c4a:	69a3      	ldr	r3, [r4, #24]
   b5c4c:	42b3      	cmp	r3, r6
   b5c4e:	dd0f      	ble.n	b5c70 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   b5c50:	2001      	movs	r0, #1
   b5c52:	f001 fd2d 	bl	b76b0 <delay>
    if (timeout > _timeout - 1) {
   b5c56:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b5c58:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b5c5a:	42b3      	cmp	r3, r6
   b5c5c:	dcf0      	bgt.n	b5c40 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
   b5c5e:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b5c60:	b128      	cbz	r0, b5c6e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b5c62:	f004 fe81 	bl	ba968 <_Z16_fetch_usbserialv>
   b5c66:	4904      	ldr	r1, [pc, #16]	; (b5c78 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   b5c68:	f003 fd6f 	bl	b974a <_ZN5Print7printlnEPKc>
   b5c6c:	4628      	mov	r0, r5
}
   b5c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b5c70:	2001      	movs	r0, #1
   b5c72:	e7fc      	b.n	b5c6e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   b5c74:	2003e548 	.word	0x2003e548
   b5c78:	000be00e 	.word	0x000be00e

000b5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c7e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   b5c80:	6902      	ldr	r2, [r0, #16]
   b5c82:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5c84:	4604      	mov	r4, r0
   b5c86:	461d      	mov	r5, r3
  reconnect(_host, _port);
   b5c88:	f7ff ff48 	bl	b5b1c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   b5c8c:	4878      	ldr	r0, [pc, #480]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5c8e:	f004 f91b 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b5c92:	4606      	mov	r6, r0
   b5c94:	2800      	cmp	r0, #0
   b5c96:	f000 80e1 	beq.w	b5e5c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   b5c9a:	4976      	ldr	r1, [pc, #472]	; (b5e74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5c9c:	4874      	ldr	r0, [pc, #464]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5c9e:	f003 fd41 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5ca2:	4639      	mov	r1, r7
   b5ca4:	4872      	ldr	r0, [pc, #456]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5ca6:	f003 fd3d 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   b5caa:	4973      	ldr	r1, [pc, #460]	; (b5e78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5cac:	4870      	ldr	r0, [pc, #448]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cae:	f003 fd39 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   b5cb2:	4972      	ldr	r1, [pc, #456]	; (b5e7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5cb4:	486e      	ldr	r0, [pc, #440]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cb6:	f003 fd35 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5cba:	6861      	ldr	r1, [r4, #4]
   b5cbc:	486c      	ldr	r0, [pc, #432]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cbe:	f003 fd31 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5cc2:	496f      	ldr	r1, [pc, #444]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5cc4:	486a      	ldr	r0, [pc, #424]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cc6:	f003 fd2d 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   b5cca:	496e      	ldr	r1, [pc, #440]	; (b5e84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5ccc:	4868      	ldr	r0, [pc, #416]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cce:	f003 fd29 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5cd2:	68a1      	ldr	r1, [r4, #8]
   b5cd4:	4866      	ldr	r0, [pc, #408]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cd6:	f003 fd25 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5cda:	4969      	ldr	r1, [pc, #420]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5cdc:	4864      	ldr	r0, [pc, #400]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cde:	f003 fd21 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   b5ce2:	4969      	ldr	r1, [pc, #420]	; (b5e88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5ce4:	4862      	ldr	r0, [pc, #392]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5ce6:	f003 fd1d 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5cea:	68e1      	ldr	r1, [r4, #12]
   b5cec:	4860      	ldr	r0, [pc, #384]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cee:	f003 fd19 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5cf2:	4963      	ldr	r1, [pc, #396]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5cf4:	485e      	ldr	r0, [pc, #376]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cf6:	f003 fd15 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   b5cfa:	4964      	ldr	r1, [pc, #400]	; (b5e8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5cfc:	485c      	ldr	r0, [pc, #368]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5cfe:	f003 fd11 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   b5d02:	4963      	ldr	r1, [pc, #396]	; (b5e90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5d04:	485a      	ldr	r0, [pc, #360]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d06:	f003 fd0d 	bl	b9724 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   b5d0a:	4628      	mov	r0, r5
   b5d0c:	f005 ffe9 	bl	bbce2 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   b5d10:	4960      	ldr	r1, [pc, #384]	; (b5e94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   b5d12:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   b5d14:	4856      	ldr	r0, [pc, #344]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d16:	f003 fd05 	bl	b9724 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b5d1a:	220a      	movs	r2, #10
   b5d1c:	4631      	mov	r1, r6
   b5d1e:	4854      	ldr	r0, [pc, #336]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d20:	f003 fd1d 	bl	b975e <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   b5d24:	495c      	ldr	r1, [pc, #368]	; (b5e98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5d26:	4852      	ldr	r0, [pc, #328]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d28:	f003 fcfc 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   b5d2c:	4629      	mov	r1, r5
   b5d2e:	4850      	ldr	r0, [pc, #320]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d30:	f003 fcf8 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5d34:	4952      	ldr	r1, [pc, #328]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5d36:	484e      	ldr	r0, [pc, #312]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d38:	f003 fcf4 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   b5d3c:	484c      	ldr	r0, [pc, #304]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5d3e:	f003 ffc9 	bl	b9cd4 <_ZN9TCPClient5flushEv>
    if (_debug) {
   b5d42:	7d23      	ldrb	r3, [r4, #20]
   b5d44:	2b00      	cmp	r3, #0
   b5d46:	d069      	beq.n	b5e1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   b5d48:	f004 fe0e 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d4c:	4953      	ldr	r1, [pc, #332]	; (b5e9c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   b5d4e:	f003 fcfc 	bl	b974a <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   b5d52:	f004 fe09 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d56:	4947      	ldr	r1, [pc, #284]	; (b5e74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5d58:	f003 fce4 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5d5c:	f004 fe04 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d60:	4639      	mov	r1, r7
   b5d62:	f003 fcdf 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5d66:	f004 fdff 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d6a:	4943      	ldr	r1, [pc, #268]	; (b5e78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5d6c:	f003 fcda 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5d70:	f004 fdfa 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d74:	4941      	ldr	r1, [pc, #260]	; (b5e7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5d76:	f003 fcd5 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5d7a:	f004 fdf5 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d7e:	6861      	ldr	r1, [r4, #4]
   b5d80:	f003 fcd0 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5d84:	f004 fdf0 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d88:	493d      	ldr	r1, [pc, #244]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5d8a:	f003 fccb 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5d8e:	f004 fdeb 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d92:	493c      	ldr	r1, [pc, #240]	; (b5e84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5d94:	f003 fcc6 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5d98:	f004 fde6 	bl	ba968 <_Z16_fetch_usbserialv>
   b5d9c:	68a1      	ldr	r1, [r4, #8]
   b5d9e:	f003 fcc1 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5da2:	f004 fde1 	bl	ba968 <_Z16_fetch_usbserialv>
   b5da6:	4936      	ldr	r1, [pc, #216]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5da8:	f003 fcbc 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5dac:	f004 fddc 	bl	ba968 <_Z16_fetch_usbserialv>
   b5db0:	4935      	ldr	r1, [pc, #212]	; (b5e88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5db2:	f003 fcb7 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5db6:	f004 fdd7 	bl	ba968 <_Z16_fetch_usbserialv>
   b5dba:	68e1      	ldr	r1, [r4, #12]
   b5dbc:	f003 fcb2 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5dc0:	f004 fdd2 	bl	ba968 <_Z16_fetch_usbserialv>
   b5dc4:	492e      	ldr	r1, [pc, #184]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5dc6:	f003 fcad 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   b5dca:	f004 fdcd 	bl	ba968 <_Z16_fetch_usbserialv>
   b5dce:	492f      	ldr	r1, [pc, #188]	; (b5e8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5dd0:	f003 fca8 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   b5dd4:	f004 fdc8 	bl	ba968 <_Z16_fetch_usbserialv>
   b5dd8:	492d      	ldr	r1, [pc, #180]	; (b5e90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5dda:	f003 fca3 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   b5dde:	f004 fdc3 	bl	ba968 <_Z16_fetch_usbserialv>
   b5de2:	492c      	ldr	r1, [pc, #176]	; (b5e94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   b5de4:	f003 fc9e 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   b5de8:	f004 fdbe 	bl	ba968 <_Z16_fetch_usbserialv>
   b5dec:	220a      	movs	r2, #10
   b5dee:	4631      	mov	r1, r6
   b5df0:	f003 fcb5 	bl	b975e <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   b5df4:	f004 fdb8 	bl	ba968 <_Z16_fetch_usbserialv>
   b5df8:	4927      	ldr	r1, [pc, #156]	; (b5e98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5dfa:	f003 fc93 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(payload);
   b5dfe:	f004 fdb3 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e02:	4629      	mov	r1, r5
   b5e04:	f003 fc8e 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5e08:	f004 fdae 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e0c:	491c      	ldr	r1, [pc, #112]	; (b5e80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5e0e:	f003 fc89 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   b5e12:	f004 fda9 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e16:	4922      	ldr	r1, [pc, #136]	; (b5ea0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   b5e18:	f003 fc97 	bl	b974a <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   b5e1c:	4620      	mov	r0, r4
   b5e1e:	f7ff ff0b 	bl	b5c38 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   b5e22:	7d23      	ldrb	r3, [r4, #20]
   b5e24:	b92b      	cbnz	r3, b5e32 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   b5e26:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   b5e28:	4811      	ldr	r0, [pc, #68]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5e2a:	f004 f985 	bl	ba138 <_ZN9TCPClient4stopEv>
}
   b5e2e:	4620      	mov	r0, r4
   b5e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   b5e32:	f004 fd99 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e36:	491b      	ldr	r1, [pc, #108]	; (b5ea4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   b5e38:	4d0d      	ldr	r5, [pc, #52]	; (b5e70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   b5e3a:	f003 fc86 	bl	b974a <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   b5e3e:	4628      	mov	r0, r5
   b5e40:	f004 f920 	bl	ba084 <_ZN9TCPClient9availableEv>
   b5e44:	2800      	cmp	r0, #0
   b5e46:	d0ee      	beq.n	b5e26 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   b5e48:	4628      	mov	r0, r5
   b5e4a:	f003 ff29 	bl	b9ca0 <_ZN9TCPClient4readEv>
   b5e4e:	4604      	mov	r4, r0
        Serial.print(c);
   b5e50:	f004 fd8a 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e54:	b2e1      	uxtb	r1, r4
   b5e56:	f003 fc69 	bl	b972c <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   b5e5a:	e7f0      	b.n	b5e3e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   b5e5c:	7d24      	ldrb	r4, [r4, #20]
   b5e5e:	2c00      	cmp	r4, #0
   b5e60:	d0e2      	beq.n	b5e28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   b5e62:	f004 fd81 	bl	ba968 <_Z16_fetch_usbserialv>
   b5e66:	4910      	ldr	r1, [pc, #64]	; (b5ea8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   b5e68:	f003 fc6f 	bl	b974a <_ZN5Print7printlnEPKc>
  bool result = false;
   b5e6c:	4634      	mov	r4, r6
   b5e6e:	e7db      	b.n	b5e28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   b5e70:	2003e548 	.word	0x2003e548
   b5e74:	000be041 	.word	0x000be041
   b5e78:	000be059 	.word	0x000be059
   b5e7c:	000be065 	.word	0x000be065
   b5e80:	000be189 	.word	0x000be189
   b5e84:	000be06c 	.word	0x000be06c
   b5e88:	000be079 	.word	0x000be079
   b5e8c:	000be088 	.word	0x000be088
   b5e90:	000be09c 	.word	0x000be09c
   b5e94:	000be0bd 	.word	0x000be0bd
   b5e98:	000be187 	.word	0x000be187
   b5e9c:	000be0ce 	.word	0x000be0ce
   b5ea0:	000be0ea 	.word	0x000be0ea
   b5ea4:	000be108 	.word	0x000be108
   b5ea8:	000be124 	.word	0x000be124

000b5eac <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5eac:	b570      	push	{r4, r5, r6, lr}
   b5eae:	ed2d 8b02 	vpush	{d8}
   b5eb2:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5eb4:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5eb6:	460e      	mov	r6, r1
   b5eb8:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5eba:	6841      	ldr	r1, [r0, #4]
   b5ebc:	4866      	ldr	r0, [pc, #408]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ebe:	2250      	movs	r2, #80	; 0x50
   b5ec0:	f003 ff84 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	6861      	ldr	r1, [r4, #4]
   b5ec8:	2250      	movs	r2, #80	; 0x50
   b5eca:	f7ff fe27 	bl	b5b1c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   b5ece:	4862      	ldr	r0, [pc, #392]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ed0:	f003 fffa 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b5ed4:	2800      	cmp	r0, #0
   b5ed6:	f000 80b6 	beq.w	b6046 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   b5eda:	4960      	ldr	r1, [pc, #384]	; (b605c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5edc:	485e      	ldr	r0, [pc, #376]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ede:	f003 fc21 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5ee2:	4631      	mov	r1, r6
   b5ee4:	485c      	ldr	r0, [pc, #368]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ee6:	f003 fc1d 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   b5eea:	495d      	ldr	r1, [pc, #372]	; (b6060 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5eec:	485a      	ldr	r0, [pc, #360]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5eee:	f003 fc19 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   b5ef2:	4629      	mov	r1, r5
   b5ef4:	4858      	ldr	r0, [pc, #352]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5ef6:	f003 fc15 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   b5efa:	495a      	ldr	r1, [pc, #360]	; (b6064 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5efc:	4856      	ldr	r0, [pc, #344]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5efe:	f003 fc11 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   b5f02:	4959      	ldr	r1, [pc, #356]	; (b6068 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5f04:	4854      	ldr	r0, [pc, #336]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f06:	f003 fc0d 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   b5f0a:	4958      	ldr	r1, [pc, #352]	; (b606c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5f0c:	4852      	ldr	r0, [pc, #328]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f0e:	f003 fc09 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5f12:	6861      	ldr	r1, [r4, #4]
   b5f14:	4850      	ldr	r0, [pc, #320]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f16:	f003 fc05 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5f1a:	4955      	ldr	r1, [pc, #340]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5f1c:	484e      	ldr	r0, [pc, #312]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f1e:	f003 fc01 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   b5f22:	4954      	ldr	r1, [pc, #336]	; (b6074 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5f24:	484c      	ldr	r0, [pc, #304]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f26:	f003 fbfd 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5f2a:	68a1      	ldr	r1, [r4, #8]
   b5f2c:	484a      	ldr	r0, [pc, #296]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f2e:	f003 fbf9 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5f32:	494f      	ldr	r1, [pc, #316]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5f34:	4848      	ldr	r0, [pc, #288]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f36:	f003 fbf5 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   b5f3a:	494f      	ldr	r1, [pc, #316]	; (b6078 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5f3c:	4846      	ldr	r0, [pc, #280]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f3e:	f003 fbf1 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5f42:	68e1      	ldr	r1, [r4, #12]
   b5f44:	4844      	ldr	r0, [pc, #272]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f46:	f003 fbed 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5f4a:	4949      	ldr	r1, [pc, #292]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5f4c:	4842      	ldr	r0, [pc, #264]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f4e:	f003 fbe9 	bl	b9724 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   b5f52:	494a      	ldr	r1, [pc, #296]	; (b607c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5f54:	4840      	ldr	r0, [pc, #256]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5f56:	f003 fbe5 	bl	b9724 <_ZN5Print5printEPKc>
    if (_debug) {
   b5f5a:	7d23      	ldrb	r3, [r4, #20]
   b5f5c:	2b00      	cmp	r3, #0
   b5f5e:	d04f      	beq.n	b6000 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   b5f60:	f004 fd02 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f64:	493d      	ldr	r1, [pc, #244]	; (b605c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5f66:	f003 fbdd 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5f6a:	f004 fcfd 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f6e:	4631      	mov	r1, r6
   b5f70:	f003 fbd8 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("/");
   b5f74:	f004 fcf8 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f78:	4939      	ldr	r1, [pc, #228]	; (b6060 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5f7a:	f003 fbd3 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   b5f7e:	f004 fcf3 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f82:	4629      	mov	r1, r5
   b5f84:	f003 fbce 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   b5f88:	f004 fcee 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f8c:	4935      	ldr	r1, [pc, #212]	; (b6064 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5f8e:	f003 fbc9 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5f92:	f004 fce9 	bl	ba968 <_Z16_fetch_usbserialv>
   b5f96:	4934      	ldr	r1, [pc, #208]	; (b6068 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5f98:	f003 fbc4 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5f9c:	f004 fce4 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fa0:	4932      	ldr	r1, [pc, #200]	; (b606c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5fa2:	f003 fbbf 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5fa6:	f004 fcdf 	bl	ba968 <_Z16_fetch_usbserialv>
   b5faa:	6861      	ldr	r1, [r4, #4]
   b5fac:	f003 fbba 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5fb0:	f004 fcda 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fb4:	492e      	ldr	r1, [pc, #184]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5fb6:	f003 fbb5 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5fba:	f004 fcd5 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fbe:	492d      	ldr	r1, [pc, #180]	; (b6074 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5fc0:	f003 fbb0 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5fc4:	f004 fcd0 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fc8:	68a1      	ldr	r1, [r4, #8]
   b5fca:	f003 fbab 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5fce:	f004 fccb 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fd2:	4927      	ldr	r1, [pc, #156]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5fd4:	f003 fba6 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5fd8:	f004 fcc6 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fdc:	4926      	ldr	r1, [pc, #152]	; (b6078 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5fde:	f003 fba1 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5fe2:	f004 fcc1 	bl	ba968 <_Z16_fetch_usbserialv>
   b5fe6:	68e1      	ldr	r1, [r4, #12]
   b5fe8:	f003 fb9c 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5fec:	f004 fcbc 	bl	ba968 <_Z16_fetch_usbserialv>
   b5ff0:	491f      	ldr	r1, [pc, #124]	; (b6070 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5ff2:	f003 fb97 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   b5ff6:	f004 fcb7 	bl	ba968 <_Z16_fetch_usbserialv>
   b5ffa:	4920      	ldr	r1, [pc, #128]	; (b607c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5ffc:	f003 fb92 	bl	b9724 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   b6000:	4620      	mov	r0, r4
   b6002:	f7ff fe19 	bl	b5c38 <_ZN7UbiHTTP16waitServerAnswerEv>
   b6006:	b948      	cbnz	r0, b601c <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   b6008:	4813      	ldr	r0, [pc, #76]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   b600a:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b6080 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   b600e:	f004 f893 	bl	ba138 <_ZN9TCPClient4stopEv>
}
   b6012:	eeb0 0a48 	vmov.f32	s0, s16
   b6016:	ecbd 8b02 	vpop	{d8}
   b601a:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b601c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6020:	f001 faee 	bl	b7600 <malloc>
    readServerAnswer(response);
   b6024:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6026:	4605      	mov	r5, r0
    readServerAnswer(response);
   b6028:	4620      	mov	r0, r4
   b602a:	f7ff fdc7 	bl	b5bbc <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   b602e:	4628      	mov	r0, r5
   b6030:	f7ff fd08 	bl	b5a44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   b6034:	4808      	ldr	r0, [pc, #32]	; (b6058 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b6036:	eeb0 8a40 	vmov.f32	s16, s0
   b603a:	f004 f87d 	bl	ba138 <_ZN9TCPClient4stopEv>
    free(response);
   b603e:	4628      	mov	r0, r5
   b6040:	f001 fae6 	bl	b7610 <free>
    return value;
   b6044:	e7e5      	b.n	b6012 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   b6046:	7d23      	ldrb	r3, [r4, #20]
   b6048:	2b00      	cmp	r3, #0
   b604a:	d0dd      	beq.n	b6008 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   b604c:	f004 fc8c 	bl	ba968 <_Z16_fetch_usbserialv>
   b6050:	490c      	ldr	r1, [pc, #48]	; (b6084 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   b6052:	f003 fb7a 	bl	b974a <_ZN5Print7printlnEPKc>
   b6056:	e7d7      	b.n	b6008 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   b6058:	2003e548 	.word	0x2003e548
   b605c:	000be14e 	.word	0x000be14e
   b6060:	000be163 	.word	0x000be163
   b6064:	000be165 	.word	0x000be165
   b6068:	000be059 	.word	0x000be059
   b606c:	000be065 	.word	0x000be065
   b6070:	000be189 	.word	0x000be189
   b6074:	000be06c 	.word	0x000be06c
   b6078:	000be079 	.word	0x000be079
   b607c:	000be169 	.word	0x000be169
   b6080:	cda2425f 	.word	0xcda2425f
   b6084:	000be18c 	.word	0x000be18c

000b6088 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b6088:	4801      	ldr	r0, [pc, #4]	; (b6090 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b608a:	f004 b8a5 	b.w	ba1d8 <_ZN9TCPClientC1Ev>
   b608e:	bf00      	nop
   b6090:	2003e548 	.word	0x2003e548

000b6094 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   b6094:	ed9f 0a01 	vldr	s0, [pc, #4]	; b609c <_ZN11UbiParticle3getEPKcS1_+0x8>
   b6098:	4770      	bx	lr
   b609a:	bf00      	nop
   b609c:	cda2425f 	.word	0xcda2425f

000b60a0 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   b60a0:	7401      	strb	r1, [r0, #16]
   b60a2:	4770      	bx	lr

000b60a4 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   b60a4:	2200      	movs	r2, #0
	  : _Node_allocator()
   b60a6:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b60a8:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b60ac:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b60b0:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b60b2:	4770      	bx	lr

000b60b4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b60b4:	b530      	push	{r4, r5, lr}
   b60b6:	b085      	sub	sp, #20
   b60b8:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b60ba:	9b08      	ldr	r3, [sp, #32]
   b60bc:	781b      	ldrb	r3, [r3, #0]
   b60be:	f88d 3000 	strb.w	r3, [sp]
   b60c2:	a802      	add	r0, sp, #8
   b60c4:	233c      	movs	r3, #60	; 0x3c
   b60c6:	f001 fd9b 	bl	b7c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b60ca:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b60cc:	9c02      	ldr	r4, [sp, #8]
   b60ce:	f001 f9e3 	bl	b7498 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b60d2:	b120      	cbz	r0, b60de <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b60d4:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b60d6:	b913      	cbnz	r3, b60de <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   b60d8:	f001 fa0a 	bl	b74f0 <spark_process>
    }
   b60dc:	e7fa      	b.n	b60d4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   b60de:	7863      	ldrb	r3, [r4, #1]
   b60e0:	f3bf 8f5b 	dmb	ish
   b60e4:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b60e6:	b9ab      	cbnz	r3, b6114 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   b60e8:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b60ea:	9c03      	ldr	r4, [sp, #12]
   b60ec:	b17c      	cbz	r4, b610e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   b60ee:	6863      	ldr	r3, [r4, #4]
   b60f0:	3b01      	subs	r3, #1
   b60f2:	6063      	str	r3, [r4, #4]
   b60f4:	b95b      	cbnz	r3, b610e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   b60f6:	6823      	ldr	r3, [r4, #0]
   b60f8:	4620      	mov	r0, r4
   b60fa:	689b      	ldr	r3, [r3, #8]
   b60fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b60fe:	68a3      	ldr	r3, [r4, #8]
   b6100:	3b01      	subs	r3, #1
   b6102:	60a3      	str	r3, [r4, #8]
   b6104:	b91b      	cbnz	r3, b610e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   b6106:	6823      	ldr	r3, [r4, #0]
   b6108:	4620      	mov	r0, r4
   b610a:	68db      	ldr	r3, [r3, #12]
   b610c:	4798      	blx	r3
}
   b610e:	4628      	mov	r0, r5
   b6110:	b005      	add	sp, #20
   b6112:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b6114:	2000      	movs	r0, #0
   b6116:	f001 f9bf 	bl	b7498 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b611a:	b120      	cbz	r0, b6126 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   b611c:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b611e:	b913      	cbnz	r3, b6126 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   b6120:	f001 f9e6 	bl	b74f0 <spark_process>
    }
   b6124:	e7fa      	b.n	b611c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6126:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b6128:	2b01      	cmp	r3, #1
   b612a:	d1dd      	bne.n	b60e8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   b612c:	7b25      	ldrb	r5, [r4, #12]
   b612e:	e7dc      	b.n	b60ea <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000b6130 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b6130:	b510      	push	{r4, lr}
   b6132:	4c04      	ldr	r4, [pc, #16]	; (b6144 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   b6134:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   b6136:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b613a:	2400      	movs	r4, #0
  _token = token;
   b613c:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b613e:	7404      	strb	r4, [r0, #16]
  _token = token;
   b6140:	60c3      	str	r3, [r0, #12]
}
   b6142:	bd10      	pop	{r4, pc}
   b6144:	000be1d4 	.word	0x000be1d4

000b6148 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6148:	b538      	push	{r3, r4, r5, lr}
   b614a:	4604      	mov	r4, r0
      while (__x != 0)
   b614c:	b184      	cbz	r4, b6170 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
	  _M_erase(_S_right(__x));
   b614e:	68e0      	ldr	r0, [r4, #12]
   b6150:	f7ff fffa 	bl	b6148 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      if (_M_manager)
   b6154:	69e3      	ldr	r3, [r4, #28]
      { return static_cast<_Link_type>(__x->_M_left); }
   b6156:	68a5      	ldr	r5, [r4, #8]
   b6158:	b123      	cbz	r3, b6164 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    class function<_Res(_ArgTypes...)>
   b615a:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b615e:	2203      	movs	r2, #3
   b6160:	4608      	mov	r0, r1
   b6162:	4798      	blx	r3
   b6164:	4620      	mov	r0, r4
   b6166:	2124      	movs	r1, #36	; 0x24
   b6168:	f7fd ff99 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b616c:	462c      	mov	r4, r5
      }
   b616e:	e7ed      	b.n	b614c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
    }
   b6170:	bd38      	pop	{r3, r4, r5, pc}

000b6172 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   b6172:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6174:	b08d      	sub	sp, #52	; 0x34
   b6176:	4604      	mov	r4, r0
        return spark_deviceID();
   b6178:	a801      	add	r0, sp, #4
   b617a:	460d      	mov	r5, r1
   b617c:	4617      	mov	r7, r2
   b617e:	461e      	mov	r6, r3
   b6180:	f001 f9c6 	bl	b7510 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   b6184:	9803      	ldr	r0, [sp, #12]
   b6186:	3001      	adds	r0, #1
   b6188:	f7fd ff87 	bl	b409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   b618c:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   b618e:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   b6190:	f005 fd81 	bl	bbc96 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   b6194:	462a      	mov	r2, r5
   b6196:	4639      	mov	r1, r7
   b6198:	4633      	mov	r3, r6
  _iot_protocol = iot_protocol;
   b619a:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   b619c:	a805      	add	r0, sp, #20
   b619e:	f7ff fbe5 	bl	b596c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   b61a2:	20c8      	movs	r0, #200	; 0xc8
   b61a4:	f001 fa2c 	bl	b7600 <malloc>
   b61a8:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   b61aa:	a805      	add	r0, sp, #20
   b61ac:	f7ff fb00 	bl	b57b0 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   b61b0:	2300      	movs	r3, #0
  _token = token;
   b61b2:	e9c4 0501 	strd	r0, r5, [r4, #4]
  _current_value = 0;
   b61b6:	7423      	strb	r3, [r4, #16]
      { _M_erase(_M_begin()); }
   b61b8:	9808      	ldr	r0, [sp, #32]
   b61ba:	f7ff ffc5 	bl	b6148 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
  String particle_id_str = System.deviceID();
   b61be:	a801      	add	r0, sp, #4
   b61c0:	f003 fcac 	bl	b9b1c <_ZN6StringD1Ev>
}
   b61c4:	b00d      	add	sp, #52	; 0x34
   b61c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61c8 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   b61c8:	b538      	push	{r3, r4, r5, lr}
   b61ca:	2500      	movs	r5, #0
   b61cc:	4604      	mov	r4, r0
   b61ce:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   b61d0:	f7ff ffcf 	bl	b6172 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   b61d4:	4620      	mov	r0, r4
   b61d6:	bd38      	pop	{r3, r4, r5, pc}

000b61d8 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   b61d8:	b538      	push	{r3, r4, r5, lr}
   b61da:	4604      	mov	r4, r0
  _dirty = true;
   b61dc:	2001      	movs	r0, #1
   b61de:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   b61e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b61e4:	68e5      	ldr	r5, [r4, #12]
   b61e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b61ea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   b61ee:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b61f2:	68e0      	ldr	r0, [r4, #12]
   b61f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b61f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b61fc:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   b6200:	f994 1010 	ldrsb.w	r1, [r4, #16]
   b6204:	68e0      	ldr	r0, [r4, #12]
   b6206:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   b620a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b620e:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   b6210:	f994 2010 	ldrsb.w	r2, [r4, #16]
   b6214:	68e1      	ldr	r1, [r4, #12]
   b6216:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b621a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b621e:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   b6220:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b6224:	68e2      	ldr	r2, [r4, #12]
   b6226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b622a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b622e:	9a04      	ldr	r2, [sp, #16]
   b6230:	611a      	str	r2, [r3, #16]
  _current_value++;
   b6232:	7c23      	ldrb	r3, [r4, #16]
   b6234:	3301      	adds	r3, #1
   b6236:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   b6238:	2b0a      	cmp	r3, #10
  _current_value++;
   b623a:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   b623c:	dd08      	ble.n	b6250 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   b623e:	7ca3      	ldrb	r3, [r4, #18]
   b6240:	b123      	cbz	r3, b624c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   b6242:	f004 fb91 	bl	ba968 <_Z16_fetch_usbserialv>
   b6246:	4903      	ldr	r1, [pc, #12]	; (b6254 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   b6248:	f003 fa7f 	bl	b974a <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   b624c:	230a      	movs	r3, #10
   b624e:	7423      	strb	r3, [r4, #16]
  }
}
   b6250:	bd38      	pop	{r3, r4, r5, pc}
   b6252:	bf00      	nop
   b6254:	000be1e4 	.word	0x000be1e4

000b6258 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   b6258:	b510      	push	{r4, lr}
   b625a:	ee10 0a10 	vmov	r0, s0
   b625e:	b086      	sub	sp, #24
   b6260:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   b6262:	f005 f8c5 	bl	bb3f0 <__aeabi_f2d>
   b6266:	4602      	mov	r2, r0
   b6268:	460b      	mov	r3, r1
   b626a:	a801      	add	r0, sp, #4
   b626c:	490a      	ldr	r1, [pc, #40]	; (b6298 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   b626e:	f001 f9df 	bl	b7630 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   b6272:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   b6274:	2214      	movs	r2, #20
  uint8_t k = 0;
   b6276:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   b6278:	f810 1b01 	ldrb.w	r1, [r0], #1
   b627c:	2920      	cmp	r1, #32
   b627e:	d006      	beq.n	b628e <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b6280:	54e1      	strb	r1, [r4, r3]
      k++;
   b6282:	3301      	adds	r3, #1
   b6284:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   b6286:	b911      	cbnz	r1, b628e <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   b6288:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   b628a:	b006      	add	sp, #24
   b628c:	bd10      	pop	{r4, pc}
  while (j < 20) {
   b628e:	3a01      	subs	r2, #1
   b6290:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   b6294:	d1f0      	bne.n	b6278 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   b6296:	e7f8      	b.n	b628a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   b6298:	000be223 	.word	0x000be223

000b629c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62a0:	460c      	mov	r4, r1
   b62a2:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   b62a4:	494d      	ldr	r1, [pc, #308]	; (b63dc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b62a6:	f8df 8158 	ldr.w	r8, [pc, #344]	; b6400 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b62aa:	f8df 9158 	ldr.w	r9, [pc, #344]	; b6404 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
        sprintf(payload, "%s000", payload);
   b62ae:	f8df a158 	ldr.w	sl, [pc, #344]	; b6408 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x16c>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   b62b2:	4605      	mov	r5, r0
  sprintf(payload, "{");
   b62b4:	4620      	mov	r0, r4
   b62b6:	f005 fcee 	bl	bbc96 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   b62ba:	2600      	movs	r6, #0
   b62bc:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b62c0:	429e      	cmp	r6, r3
   b62c2:	da69      	bge.n	b6398 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfc>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b62c4:	68eb      	ldr	r3, [r5, #12]
   b62c6:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b62ca:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b62ce:	ed93 0a02 	vldr	s0, [r3, #8]
   b62d2:	a903      	add	r1, sp, #12
   b62d4:	4628      	mov	r0, r5
   b62d6:	f7ff ffbf 	bl	b6258 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   b62da:	68eb      	ldr	r3, [r5, #12]
   b62dc:	a903      	add	r1, sp, #12
   b62de:	9100      	str	r1, [sp, #0]
   b62e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b62e4:	4622      	mov	r2, r4
   b62e6:	4641      	mov	r1, r8
   b62e8:	4620      	mov	r0, r4
   b62ea:	f001 f9a1 	bl	b7630 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b62ee:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b62f0:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b62f4:	443b      	add	r3, r7
   b62f6:	68db      	ldr	r3, [r3, #12]
   b62f8:	b33b      	cbz	r3, b634a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b62fa:	4649      	mov	r1, r9
   b62fc:	4622      	mov	r2, r4
   b62fe:	4620      	mov	r0, r4
   b6300:	f001 f996 	bl	b7630 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b6304:	68eb      	ldr	r3, [r5, #12]
   b6306:	443b      	add	r3, r7
   b6308:	6919      	ldr	r1, [r3, #16]
   b630a:	2900      	cmp	r1, #0
   b630c:	d037      	beq.n	b637e <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe2>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b630e:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6310:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6312:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6316:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b631a:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b631e:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b6322:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b6326:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b632a:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b632e:	b2c9      	uxtb	r1, r1
   b6330:	9100      	str	r1, [sp, #0]
   b6332:	b2db      	uxtb	r3, r3
   b6334:	492a      	ldr	r1, [pc, #168]	; (b63e0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   b6336:	b2d2      	uxtb	r2, r2
   b6338:	a802      	add	r0, sp, #8
   b633a:	f001 f979 	bl	b7630 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b633e:	4929      	ldr	r1, [pc, #164]	; (b63e4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   b6340:	ab02      	add	r3, sp, #8
   b6342:	4622      	mov	r2, r4
   b6344:	4620      	mov	r0, r4
   b6346:	f001 f973 	bl	b7630 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b634a:	68eb      	ldr	r3, [r5, #12]
   b634c:	443b      	add	r3, r7
   b634e:	685b      	ldr	r3, [r3, #4]
   b6350:	b123      	cbz	r3, b635c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc0>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   b6352:	4925      	ldr	r1, [pc, #148]	; (b63e8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   b6354:	4622      	mov	r2, r4
   b6356:	4620      	mov	r0, r4
   b6358:	f001 f96a 	bl	b7630 <sprintf>
    sprintf(payload, "%s}", payload);
   b635c:	4622      	mov	r2, r4
   b635e:	4923      	ldr	r1, [pc, #140]	; (b63ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b6360:	4620      	mov	r0, r4
   b6362:	f001 f965 	bl	b7630 <sprintf>
    i++;
   b6366:	3601      	adds	r6, #1
    if (i < _current_value) {
   b6368:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b636c:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b636e:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b6370:	4622      	mov	r2, r4
    if (i < _current_value) {
   b6372:	da0a      	bge.n	b638a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xee>
      sprintf(payload, "%s,", payload);
   b6374:	491e      	ldr	r1, [pc, #120]	; (b63f0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   b6376:	4620      	mov	r0, r4
   b6378:	f001 f95a 	bl	b7630 <sprintf>
   b637c:	e79e      	b.n	b62bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   b637e:	4622      	mov	r2, r4
   b6380:	4651      	mov	r1, sl
   b6382:	4620      	mov	r0, r4
   b6384:	f001 f954 	bl	b7630 <sprintf>
   b6388:	e7df      	b.n	b634a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xae>
      sprintf(payload, "%s}", payload);
   b638a:	4918      	ldr	r1, [pc, #96]	; (b63ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   b638c:	4620      	mov	r0, r4
   b638e:	f001 f94f 	bl	b7630 <sprintf>
      _current_value = 0;
   b6392:	2300      	movs	r3, #0
   b6394:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b6396:	e791      	b.n	b62bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   b6398:	7cab      	ldrb	r3, [r5, #18]
   b639a:	b1db      	cbz	r3, b63d4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>
    Serial.println("----------");
   b639c:	f004 fae4 	bl	ba968 <_Z16_fetch_usbserialv>
   b63a0:	4914      	ldr	r1, [pc, #80]	; (b63f4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b63a2:	f003 f9d2 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b63a6:	f004 fadf 	bl	ba968 <_Z16_fetch_usbserialv>
   b63aa:	4913      	ldr	r1, [pc, #76]	; (b63f8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   b63ac:	f003 f9cd 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b63b0:	f004 fada 	bl	ba968 <_Z16_fetch_usbserialv>
   b63b4:	4621      	mov	r1, r4
   b63b6:	f003 f9c8 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b63ba:	f004 fad5 	bl	ba968 <_Z16_fetch_usbserialv>
   b63be:	490d      	ldr	r1, [pc, #52]	; (b63f4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   b63c0:	f003 f9c3 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("");
   b63c4:	f004 fad0 	bl	ba968 <_Z16_fetch_usbserialv>
   b63c8:	490c      	ldr	r1, [pc, #48]	; (b63fc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>)
}
   b63ca:	b009      	add	sp, #36	; 0x24
   b63cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b63d0:	f003 b9bb 	b.w	b974a <_ZN5Print7printlnEPKc>
}
   b63d4:	b009      	add	sp, #36	; 0x24
   b63d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b63da:	bf00      	nop
   b63dc:	000be228 	.word	0x000be228
   b63e0:	000be250 	.word	0x000be250
   b63e4:	000be257 	.word	0x000be257
   b63e8:	000be262 	.word	0x000be262
   b63ec:	000be271 	.word	0x000be271
   b63f0:	000be275 	.word	0x000be275
   b63f4:	000be003 	.word	0x000be003
   b63f8:	000be279 	.word	0x000be279
   b63fc:	000be18b 	.word	0x000be18b
   b6400:	000be22a 	.word	0x000be22a
   b6404:	000be23d 	.word	0x000be23d
   b6408:	000be25c 	.word	0x000be25c

000b640c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6410:	460c      	mov	r4, r1
   b6412:	4605      	mov	r5, r0
   b6414:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   b6416:	4953      	ldr	r1, [pc, #332]	; (b6564 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b6418:	f8df 8178 	ldr.w	r8, [pc, #376]	; b6594 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b641c:	f8df 9178 	ldr.w	r9, [pc, #376]	; b6598 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x18c>
  sprintf(payload, "");
   b6420:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   b6422:	4616      	mov	r6, r2
   b6424:	461f      	mov	r7, r3
  sprintf(payload, "");
   b6426:	f005 fc36 	bl	bbc96 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   b642a:	68ab      	ldr	r3, [r5, #8]
   b642c:	4a4e      	ldr	r2, [pc, #312]	; (b6568 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   b642e:	494f      	ldr	r1, [pc, #316]	; (b656c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   b6430:	4620      	mov	r0, r4
   b6432:	f001 f8fd 	bl	b7630 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   b6436:	4633      	mov	r3, r6
   b6438:	494d      	ldr	r1, [pc, #308]	; (b6570 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   b643a:	9700      	str	r7, [sp, #0]
   b643c:	4622      	mov	r2, r4
   b643e:	4620      	mov	r0, r4
   b6440:	f001 f8f6 	bl	b7630 <sprintf>
  sprintf(payload, "%s=>", payload);
   b6444:	494b      	ldr	r1, [pc, #300]	; (b6574 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b6446:	4f4a      	ldr	r7, [pc, #296]	; (b6570 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
  sprintf(payload, "%s=>", payload);
   b6448:	4622      	mov	r2, r4
   b644a:	4620      	mov	r0, r4
   b644c:	f001 f8f0 	bl	b7630 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   b6450:	2600      	movs	r6, #0
   b6452:	f995 3010 	ldrsb.w	r3, [r5, #16]
   b6456:	429e      	cmp	r6, r3
   b6458:	da63      	bge.n	b6522 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x116>
    _floatToChar(str_value, (_dots + i)->dot_value);
   b645a:	68eb      	ldr	r3, [r5, #12]
   b645c:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   b6460:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b6464:	ed93 0a02 	vldr	s0, [r3, #8]
   b6468:	a903      	add	r1, sp, #12
   b646a:	4628      	mov	r0, r5
   b646c:	f7ff fef4 	bl	b6258 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   b6470:	68eb      	ldr	r3, [r5, #12]
   b6472:	a903      	add	r1, sp, #12
   b6474:	9100      	str	r1, [sp, #0]
   b6476:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   b647a:	4622      	mov	r2, r4
   b647c:	4639      	mov	r1, r7
   b647e:	4620      	mov	r0, r4
   b6480:	f001 f8d6 	bl	b7630 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   b6484:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   b6486:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   b648a:	4453      	add	r3, sl
   b648c:	685b      	ldr	r3, [r3, #4]
   b648e:	b123      	cbz	r3, b649a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   b6490:	4622      	mov	r2, r4
   b6492:	4641      	mov	r1, r8
   b6494:	4620      	mov	r0, r4
   b6496:	f001 f8cb 	bl	b7630 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   b649a:	68eb      	ldr	r3, [r5, #12]
   b649c:	4453      	add	r3, sl
   b649e:	68db      	ldr	r3, [r3, #12]
   b64a0:	b333      	cbz	r3, b64f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   b64a2:	4649      	mov	r1, r9
   b64a4:	4622      	mov	r2, r4
   b64a6:	4620      	mov	r0, r4
   b64a8:	f001 f8c2 	bl	b7630 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   b64ac:	68eb      	ldr	r3, [r5, #12]
   b64ae:	4453      	add	r3, sl
   b64b0:	6919      	ldr	r1, [r3, #16]
   b64b2:	b349      	cbz	r1, b6508 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfc>
        uint8_t dec = (timestamp_millis / 10) % 10;
   b64b4:	200a      	movs	r0, #10
        uint8_t hund = (timestamp_millis / 100) % 10;
   b64b6:	2264      	movs	r2, #100	; 0x64
        uint8_t dec = (timestamp_millis / 10) % 10;
   b64b8:	fb91 fcf0 	sdiv	ip, r1, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b64bc:	fb91 f2f2 	sdiv	r2, r1, r2
        uint8_t units = timestamp_millis % 10;
   b64c0:	fb00 111c 	mls	r1, r0, ip, r1
        uint8_t dec = (timestamp_millis / 10) % 10;
   b64c4:	fb9c f3f0 	sdiv	r3, ip, r0
        uint8_t hund = (timestamp_millis / 100) % 10;
   b64c8:	fb92 fef0 	sdiv	lr, r2, r0
        uint8_t dec = (timestamp_millis / 10) % 10;
   b64cc:	fb00 c313 	mls	r3, r0, r3, ip
        uint8_t hund = (timestamp_millis / 100) % 10;
   b64d0:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   b64d4:	b2c9      	uxtb	r1, r1
   b64d6:	9100      	str	r1, [sp, #0]
   b64d8:	b2db      	uxtb	r3, r3
   b64da:	4927      	ldr	r1, [pc, #156]	; (b6578 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   b64dc:	b2d2      	uxtb	r2, r2
   b64de:	a802      	add	r0, sp, #8
   b64e0:	f001 f8a6 	bl	b7630 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   b64e4:	4925      	ldr	r1, [pc, #148]	; (b657c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   b64e6:	ab02      	add	r3, sp, #8
   b64e8:	4622      	mov	r2, r4
   b64ea:	4620      	mov	r0, r4
   b64ec:	f001 f8a0 	bl	b7630 <sprintf>
    if (i < _current_value) {
   b64f0:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   b64f4:	3601      	adds	r6, #1
   b64f6:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   b64f8:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   b64fa:	4622      	mov	r2, r4
    if (i < _current_value) {
   b64fc:	da0a      	bge.n	b6514 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x108>
      sprintf(payload, "%s,", payload);
   b64fe:	4920      	ldr	r1, [pc, #128]	; (b6580 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   b6500:	4620      	mov	r0, r4
   b6502:	f001 f895 	bl	b7630 <sprintf>
   b6506:	e7a4      	b.n	b6452 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   b6508:	491e      	ldr	r1, [pc, #120]	; (b6584 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   b650a:	4622      	mov	r2, r4
   b650c:	4620      	mov	r0, r4
   b650e:	f001 f88f 	bl	b7630 <sprintf>
   b6512:	e7ed      	b.n	b64f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe4>
      sprintf(payload, "%s|end", payload);
   b6514:	491c      	ldr	r1, [pc, #112]	; (b6588 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   b6516:	4620      	mov	r0, r4
   b6518:	f001 f88a 	bl	b7630 <sprintf>
      _current_value = 0;
   b651c:	2300      	movs	r3, #0
   b651e:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   b6520:	e797      	b.n	b6452 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   b6522:	7cab      	ldrb	r3, [r5, #18]
   b6524:	b1db      	cbz	r3, b655e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x152>
    Serial.println("----------");
   b6526:	f004 fa1f 	bl	ba968 <_Z16_fetch_usbserialv>
   b652a:	4918      	ldr	r1, [pc, #96]	; (b658c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b652c:	f003 f90d 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   b6530:	f004 fa1a 	bl	ba968 <_Z16_fetch_usbserialv>
   b6534:	4916      	ldr	r1, [pc, #88]	; (b6590 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>)
   b6536:	f003 f908 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   b653a:	f004 fa15 	bl	ba968 <_Z16_fetch_usbserialv>
   b653e:	4621      	mov	r1, r4
   b6540:	f003 f903 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   b6544:	f004 fa10 	bl	ba968 <_Z16_fetch_usbserialv>
   b6548:	4910      	ldr	r1, [pc, #64]	; (b658c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   b654a:	f003 f8fe 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("");
   b654e:	f004 fa0b 	bl	ba968 <_Z16_fetch_usbserialv>
   b6552:	4904      	ldr	r1, [pc, #16]	; (b6564 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
}
   b6554:	b009      	add	sp, #36	; 0x24
   b6556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println("");
   b655a:	f003 b8f6 	b.w	b974a <_ZN5Print7printlnEPKc>
}
   b655e:	b009      	add	sp, #36	; 0x24
   b6560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6564:	000be18b 	.word	0x000be18b
   b6568:	000bdfa0 	.word	0x000bdfa0
   b656c:	000be282 	.word	0x000be282
   b6570:	000be28e 	.word	0x000be28e
   b6574:	000be296 	.word	0x000be296
   b6578:	000be250 	.word	0x000be250
   b657c:	000be257 	.word	0x000be257
   b6580:	000be275 	.word	0x000be275
   b6584:	000be25c 	.word	0x000be25c
   b6588:	000be2a8 	.word	0x000be2a8
   b658c:	000be003 	.word	0x000be003
   b6590:	000be279 	.word	0x000be279
   b6594:	000be29b 	.word	0x000be29b
   b6598:	000be2a1 	.word	0x000be2a1

000b659c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b659c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b65a0:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65a2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   b65a6:	461e      	mov	r6, r3
   b65a8:	460f      	mov	r7, r1
   b65aa:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65ac:	f001 f828 	bl	b7600 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b65b0:	7ce3      	ldrb	r3, [r4, #19]
   b65b2:	3b01      	subs	r3, #1
   b65b4:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b65b6:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   b65b8:	d826      	bhi.n	b6608 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   b65ba:	4601      	mov	r1, r0
   b65bc:	4643      	mov	r3, r8
   b65be:	463a      	mov	r2, r7
   b65c0:	4620      	mov	r0, r4
   b65c2:	f7ff ff23 	bl	b640c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   b65c6:	7ca3      	ldrb	r3, [r4, #18]
   b65c8:	b123      	cbz	r3, b65d4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   b65ca:	f004 f9cd 	bl	ba968 <_Z16_fetch_usbserialv>
   b65ce:	4911      	ldr	r1, [pc, #68]	; (b6614 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   b65d0:	f003 f8bb 	bl	b974a <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   b65d4:	6860      	ldr	r0, [r4, #4]
   b65d6:	6803      	ldr	r3, [r0, #0]
   b65d8:	9600      	str	r6, [sp, #0]
   b65da:	f8d3 9000 	ldr.w	r9, [r3]
   b65de:	4639      	mov	r1, r7
   b65e0:	462b      	mov	r3, r5
   b65e2:	4642      	mov	r2, r8
   b65e4:	47c8      	blx	r9
   b65e6:	4607      	mov	r7, r0
  free(payload);
   b65e8:	4628      	mov	r0, r5
   b65ea:	f001 f811 	bl	b7610 <free>
  delete flags;
   b65ee:	b11e      	cbz	r6, b65f8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   b65f0:	2101      	movs	r1, #1
   b65f2:	4630      	mov	r0, r6
   b65f4:	f7fd fd53 	bl	b409e <_ZdlPvj>
  if (result) {
   b65f8:	2300      	movs	r3, #0
   b65fa:	b107      	cbz	r7, b65fe <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   b65fc:	7463      	strb	r3, [r4, #17]
}
   b65fe:	4638      	mov	r0, r7
  _current_value = 0;
   b6600:	7423      	strb	r3, [r4, #16]
}
   b6602:	b003      	add	sp, #12
   b6604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   b6608:	4601      	mov	r1, r0
   b660a:	4620      	mov	r0, r4
   b660c:	f7ff fe46 	bl	b629c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   b6610:	e7d9      	b.n	b65c6 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   b6612:	bf00      	nop
   b6614:	000be2af 	.word	0x000be2af

000b6618 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b6618:	b570      	push	{r4, r5, r6, lr}
   b661a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   b661c:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   b661e:	460d      	mov	r5, r1
   b6620:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   b6622:	f7fd fd38 	bl	b4096 <_Znwj>
  flags->particle_flag = flag;
   b6626:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   b6628:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   b662a:	462a      	mov	r2, r5
   b662c:	4629      	mov	r1, r5
   b662e:	4620      	mov	r0, r4
}
   b6630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   b6634:	f7ff bfb2 	b.w	b659c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000b6638 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b663c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b663e:	2018      	movs	r0, #24
   b6640:	4615      	mov	r5, r2
   b6642:	460f      	mov	r7, r1
   b6644:	f7fd fd27 	bl	b4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   b6648:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   b664c:	686b      	ldr	r3, [r5, #4]
   b664e:	f8d5 9000 	ldr.w	r9, [r5]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b6652:	68ba      	ldr	r2, [r7, #8]
   b6654:	6143      	str	r3, [r0, #20]
   b6656:	4606      	mov	r6, r0
   b6658:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   b665c:	4655      	mov	r5, sl
      bool __comp = true;
   b665e:	2301      	movs	r3, #1
      while (__x != 0)
   b6660:	b152      	cbz	r2, b6678 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6662:	6913      	ldr	r3, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b6664:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   b6668:	454b      	cmp	r3, r9
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b666a:	4615      	mov	r5, r2
   b666c:	bfcb      	itete	gt
   b666e:	2301      	movgt	r3, #1
   b6670:	2300      	movle	r3, #0
   b6672:	4602      	movgt	r2, r0
   b6674:	460a      	movle	r2, r1
   b6676:	e7f3      	b.n	b6660 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   b6678:	b1ab      	cbz	r3, b66a6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6e>
	  if (__j == begin())
   b667a:	68fb      	ldr	r3, [r7, #12]
   b667c:	42ab      	cmp	r3, r5
   b667e:	d024      	beq.n	b66ca <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	_M_node = _Rb_tree_decrement(_M_node);
   b6680:	4628      	mov	r0, r5
   b6682:	f004 fbd7 	bl	bae34 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b6686:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b6688:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b668c:	454b      	cmp	r3, r9
   b668e:	db1c      	blt.n	b66ca <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	::operator delete(__p
   b6690:	2118      	movs	r1, #24
   b6692:	4630      	mov	r0, r6
   b6694:	f7fd fd03 	bl	b409e <_ZdlPvj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b6698:	f8c4 8000 	str.w	r8, [r4]
   b669c:	2300      	movs	r3, #0
   b669e:	7123      	strb	r3, [r4, #4]
      }
   b66a0:	4620      	mov	r0, r4
   b66a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b66a6:	46a8      	mov	r8, r5
   b66a8:	e7ee      	b.n	b6688 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   b66aa:	6928      	ldr	r0, [r5, #16]
   b66ac:	4581      	cmp	r9, r0
   b66ae:	bfac      	ite	ge
   b66b0:	2000      	movge	r0, #0
   b66b2:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b66b4:	4653      	mov	r3, sl
   b66b6:	462a      	mov	r2, r5
   b66b8:	4631      	mov	r1, r6
   b66ba:	f004 fbbd 	bl	bae38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b66be:	697b      	ldr	r3, [r7, #20]
   b66c0:	6026      	str	r6, [r4, #0]
   b66c2:	3301      	adds	r3, #1
   b66c4:	617b      	str	r3, [r7, #20]
   b66c6:	2301      	movs	r3, #1
   b66c8:	e7e9      	b.n	b669e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x66>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b66ca:	45aa      	cmp	sl, r5
   b66cc:	d1ed      	bne.n	b66aa <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x72>
			    || _M_impl._M_key_compare(_S_key(__z),
   b66ce:	2001      	movs	r0, #1
   b66d0:	e7f0      	b.n	b66b4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7c>
	...

000b66d4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   b66d4:	b508      	push	{r3, lr}
        val_(val) {
   b66d6:	4b07      	ldr	r3, [pc, #28]	; (b66f4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   b66d8:	4807      	ldr	r0, [pc, #28]	; (b66f8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b66da:	2200      	movs	r2, #0
   b66dc:	701a      	strb	r2, [r3, #0]
   b66de:	f003 fd7b 	bl	ba1d8 <_ZN9TCPClientC1Ev>
   b66e2:	4806      	ldr	r0, [pc, #24]	; (b66fc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b66e4:	f003 fd78 	bl	ba1d8 <_ZN9TCPClientC1Ev>
   b66e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b66ec:	4804      	ldr	r0, [pc, #16]	; (b6700 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b66ee:	f003 bfdb 	b.w	ba6a8 <_ZN3UDPC1Ev>
   b66f2:	bf00      	nop
   b66f4:	2003e5e8 	.word	0x2003e5e8
   b66f8:	2003e5cc 	.word	0x2003e5cc
   b66fc:	2003e564 	.word	0x2003e564
   b6700:	2003e580 	.word	0x2003e580

000b6704 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   b6704:	7501      	strb	r1, [r0, #20]
   b6706:	4770      	bx	lr

000b6708 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6708:	b538      	push	{r3, r4, r5, lr}
   b670a:	4604      	mov	r4, r0
      while (__x != 0)
   b670c:	b14c      	cbz	r4, b6722 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x1a>
	  _M_erase(_S_right(__x));
   b670e:	68e0      	ldr	r0, [r4, #12]
   b6710:	f7ff fffa 	bl	b6708 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b6714:	68a5      	ldr	r5, [r4, #8]
   b6716:	4620      	mov	r0, r4
   b6718:	2118      	movs	r1, #24
   b671a:	f7fd fcc0 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b671e:	462c      	mov	r4, r5
      while (__x != 0)
   b6720:	e7f4      	b.n	b670c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x4>
    }
   b6722:	bd38      	pop	{r3, r4, r5, pc}

000b6724 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6724:	b530      	push	{r4, r5, lr}
   b6726:	4d06      	ldr	r5, [pc, #24]	; (b6740 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   b6728:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b672a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b672e:	2500      	movs	r5, #0
  _token = token;
   b6730:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6732:	7505      	strb	r5, [r0, #20]
   b6734:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b6738:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b673c:	6185      	str	r5, [r0, #24]
}
   b673e:	bd30      	pop	{r4, r5, pc}
   b6740:	000be35c 	.word	0x000be35c

000b6744 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   b6744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6748:	460d      	mov	r5, r1
   b674a:	4617      	mov	r7, r2
   b674c:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   b674e:	f004 f90b 	bl	ba968 <_Z16_fetch_usbserialv>
   b6752:	491e      	ldr	r1, [pc, #120]	; (b67cc <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6754:	4e1e      	ldr	r6, [pc, #120]	; (b67d0 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   b6756:	f8df a07c 	ldr.w	sl, [pc, #124]	; b67d4 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   b675a:	f8df b07c 	ldr.w	fp, [pc, #124]	; b67d8 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   b675e:	f002 fff4 	bl	b974a <_ZN5Print7printlnEPKc>
   b6762:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b6764:	4630      	mov	r0, r6
   b6766:	f003 fcfe 	bl	ba166 <_ZN9TCPClient6statusEv>
   b676a:	bb60      	cbnz	r0, b67c6 <_ZN6UbiTCP9reconnectEPKci+0x82>
   b676c:	2c05      	cmp	r4, #5
   b676e:	d02a      	beq.n	b67c6 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   b6770:	f898 3014 	ldrb.w	r3, [r8, #20]
   b6774:	b1c3      	cbz	r3, b67a8 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   b6776:	f004 f8f7 	bl	ba968 <_Z16_fetch_usbserialv>
   b677a:	4651      	mov	r1, sl
   b677c:	f002 ffd2 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(host);
   b6780:	f004 f8f2 	bl	ba968 <_Z16_fetch_usbserialv>
   b6784:	4629      	mov	r1, r5
   b6786:	f002 ffcd 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b678a:	f004 f8ed 	bl	ba968 <_Z16_fetch_usbserialv>
   b678e:	4659      	mov	r1, fp
   b6790:	f002 ffc8 	bl	b9724 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b6794:	f004 f8e8 	bl	ba968 <_Z16_fetch_usbserialv>
   b6798:	220a      	movs	r2, #10
   b679a:	4681      	mov	r9, r0
   b679c:	4621      	mov	r1, r4
   b679e:	f002 ffde 	bl	b975e <_ZN5Print11printNumberEmh>
        n += println();
   b67a2:	4648      	mov	r0, r9
   b67a4:	f002 ffc5 	bl	b9732 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   b67a8:	4630      	mov	r0, r6
   b67aa:	f003 fcc5 	bl	ba138 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   b67ae:	2300      	movs	r3, #0
   b67b0:	b2ba      	uxth	r2, r7
   b67b2:	4629      	mov	r1, r5
   b67b4:	4630      	mov	r0, r6
   b67b6:	f003 fb09 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   b67ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b67be:	f000 ff77 	bl	b76b0 <delay>
   b67c2:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b67c4:	e7ce      	b.n	b6764 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   b67c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b67ca:	bf00      	nop
   b67cc:	000be2bf 	.word	0x000be2bf
   b67d0:	2003e5ec 	.word	0x2003e5ec
   b67d4:	000bdfb4 	.word	0x000bdfb4
   b67d8:	000bdfca 	.word	0x000bdfca

000b67dc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b67dc:	b570      	push	{r4, r5, r6, lr}
   b67de:	4604      	mov	r4, r0
   b67e0:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   b67e2:	6881      	ldr	r1, [r0, #8]
   b67e4:	482e      	ldr	r0, [pc, #184]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b67e6:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   b67e8:	f002 ff9c 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   b67ec:	492d      	ldr	r1, [pc, #180]	; (b68a4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b67ee:	482c      	ldr	r0, [pc, #176]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b67f0:	f002 ff98 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   b67f4:	68e1      	ldr	r1, [r4, #12]
   b67f6:	482a      	ldr	r0, [pc, #168]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b67f8:	f002 ff94 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   b67fc:	492a      	ldr	r1, [pc, #168]	; (b68a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b67fe:	4828      	ldr	r0, [pc, #160]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6800:	f002 ff90 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   b6804:	4631      	mov	r1, r6
   b6806:	4826      	ldr	r0, [pc, #152]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6808:	f002 ff8c 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   b680c:	4927      	ldr	r1, [pc, #156]	; (b68ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b680e:	4824      	ldr	r0, [pc, #144]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6810:	f002 ff88 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   b6814:	4629      	mov	r1, r5
   b6816:	4822      	ldr	r0, [pc, #136]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6818:	f002 ff84 	bl	b9724 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   b681c:	4924      	ldr	r1, [pc, #144]	; (b68b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b681e:	4820      	ldr	r0, [pc, #128]	; (b68a0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6820:	f002 ff80 	bl	b9724 <_ZN5Print5printEPKc>
  if (_debug) {
   b6824:	7d23      	ldrb	r3, [r4, #20]
   b6826:	2b00      	cmp	r3, #0
   b6828:	d038      	beq.n	b689c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   b682a:	f004 f89d 	bl	ba968 <_Z16_fetch_usbserialv>
   b682e:	4921      	ldr	r1, [pc, #132]	; (b68b4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   b6830:	f002 ff8b 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   b6834:	f004 f898 	bl	ba968 <_Z16_fetch_usbserialv>
   b6838:	491f      	ldr	r1, [pc, #124]	; (b68b8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   b683a:	f002 ff86 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   b683e:	f004 f893 	bl	ba968 <_Z16_fetch_usbserialv>
   b6842:	68a1      	ldr	r1, [r4, #8]
   b6844:	f002 ff6e 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   b6848:	f004 f88e 	bl	ba968 <_Z16_fetch_usbserialv>
   b684c:	4915      	ldr	r1, [pc, #84]	; (b68a4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b684e:	f002 ff69 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print(_token);
   b6852:	f004 f889 	bl	ba968 <_Z16_fetch_usbserialv>
   b6856:	68e1      	ldr	r1, [r4, #12]
   b6858:	f002 ff64 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print("|");
   b685c:	f004 f884 	bl	ba968 <_Z16_fetch_usbserialv>
   b6860:	4911      	ldr	r1, [pc, #68]	; (b68a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b6862:	f002 ff5f 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   b6866:	f004 f87f 	bl	ba968 <_Z16_fetch_usbserialv>
   b686a:	4631      	mov	r1, r6
   b686c:	f002 ff5a 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print(":");
   b6870:	f004 f87a 	bl	ba968 <_Z16_fetch_usbserialv>
   b6874:	490d      	ldr	r1, [pc, #52]	; (b68ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b6876:	f002 ff55 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   b687a:	f004 f875 	bl	ba968 <_Z16_fetch_usbserialv>
   b687e:	4629      	mov	r1, r5
   b6880:	f002 ff50 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.print("|end");
   b6884:	f004 f870 	bl	ba968 <_Z16_fetch_usbserialv>
   b6888:	4909      	ldr	r1, [pc, #36]	; (b68b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b688a:	f002 ff4b 	bl	b9724 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   b688e:	f004 f86b 	bl	ba968 <_Z16_fetch_usbserialv>
}
   b6892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   b6896:	4909      	ldr	r1, [pc, #36]	; (b68bc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   b6898:	f002 bf57 	b.w	b974a <_ZN5Print7printlnEPKc>
}
   b689c:	bd70      	pop	{r4, r5, r6, pc}
   b689e:	bf00      	nop
   b68a0:	2003e5ec 	.word	0x2003e5ec
   b68a4:	000be2d7 	.word	0x000be2d7
   b68a8:	000be2da 	.word	0x000be2da
   b68ac:	000be280 	.word	0x000be280
   b68b0:	000be2aa 	.word	0x000be2aa
   b68b4:	000be2f2 	.word	0x000be2f2
   b68b8:	000be2dc 	.word	0x000be2dc
   b68bc:	000be2f1 	.word	0x000be2f1

000b68c0 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   b68c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b68c2:	4f0e      	ldr	r7, [pc, #56]	; (b68fc <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   b68c4:	4604      	mov	r4, r0
  int timeout = 0;
   b68c6:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b68c8:	4638      	mov	r0, r7
   b68ca:	f003 fbdb 	bl	ba084 <_ZN9TCPClient9availableEv>
   b68ce:	4605      	mov	r5, r0
   b68d0:	b990      	cbnz	r0, b68f8 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   b68d2:	69a3      	ldr	r3, [r4, #24]
   b68d4:	42b3      	cmp	r3, r6
   b68d6:	dd0f      	ble.n	b68f8 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   b68d8:	2001      	movs	r0, #1
   b68da:	f000 fee9 	bl	b76b0 <delay>
    if (timeout > _timeout - 1) {
   b68de:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b68e0:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b68e2:	42b3      	cmp	r3, r6
   b68e4:	dcf0      	bgt.n	b68c8 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
   b68e6:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b68e8:	b128      	cbz	r0, b68f6 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b68ea:	f004 f83d 	bl	ba968 <_Z16_fetch_usbserialv>
   b68ee:	4904      	ldr	r1, [pc, #16]	; (b6900 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   b68f0:	f002 ff2b 	bl	b974a <_ZN5Print7printlnEPKc>
   b68f4:	4628      	mov	r0, r5
}
   b68f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b68f8:	2001      	movs	r0, #1
   b68fa:	e7fc      	b.n	b68f6 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   b68fc:	2003e5ec 	.word	0x2003e5ec
   b6900:	000be00e 	.word	0x000be00e

000b6904 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   b6908:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b690a:	4606      	mov	r6, r0
   b690c:	4688      	mov	r8, r1
   b690e:	4614      	mov	r4, r2
  if (_debug) {
   b6910:	b14b      	cbz	r3, b6926 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   b6912:	f004 f829 	bl	ba968 <_Z16_fetch_usbserialv>
   b6916:	4927      	ldr	r1, [pc, #156]	; (b69b4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   b6918:	f002 ff17 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b691c:	f004 f824 	bl	ba968 <_Z16_fetch_usbserialv>
   b6920:	4925      	ldr	r1, [pc, #148]	; (b69b8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   b6922:	f002 ff12 	bl	b974a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b6926:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b69cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b692a:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b692c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b6930:	4648      	mov	r0, r9
   b6932:	f003 fba7 	bl	ba084 <_ZN9TCPClient9availableEv>
   b6936:	b178      	cbz	r0, b6958 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   b6938:	4648      	mov	r0, r9
   b693a:	f003 f9b1 	bl	b9ca0 <_ZN9TCPClient4readEv>
    if (_debug) {
   b693e:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   b6940:	b2c7      	uxtb	r7, r0
    if (_debug) {
   b6942:	b12b      	cbz	r3, b6950 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   b6944:	f004 f810 	bl	ba968 <_Z16_fetch_usbserialv>
   b6948:	6803      	ldr	r3, [r0, #0]
   b694a:	4639      	mov	r1, r7
   b694c:	689b      	ldr	r3, [r3, #8]
   b694e:	4798      	blx	r3
    response[j] = c;
   b6950:	5567      	strb	r7, [r4, r5]
    j++;
   b6952:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6954:	4555      	cmp	r5, sl
   b6956:	d1eb      	bne.n	b6930 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   b6958:	7d33      	ldrb	r3, [r6, #20]
   b695a:	b123      	cbz	r3, b6966 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   b695c:	f004 f804 	bl	ba968 <_Z16_fetch_usbserialv>
   b6960:	4916      	ldr	r1, [pc, #88]	; (b69bc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   b6962:	f002 fef2 	bl	b974a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b6966:	2300      	movs	r3, #0
   b6968:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   b696a:	4915      	ldr	r1, [pc, #84]	; (b69c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   b696c:	4640      	mov	r0, r8
   b696e:	f005 f988 	bl	bbc82 <strcmp>
   b6972:	b968      	cbnz	r0, b6990 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   b6974:	4913      	ldr	r1, [pc, #76]	; (b69c4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   b6976:	4620      	mov	r0, r4
   b6978:	f005 f9f6 	bl	bbd68 <strstr>
      result = 1;
   b697c:	ed9f 0a12 	vldr	s0, [pc, #72]	; b69c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b6980:	2800      	cmp	r0, #0
   b6982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6986:	bf18      	it	ne
   b6988:	eeb0 0a67 	vmovne.f32	s0, s15
}
   b698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   b6990:	217c      	movs	r1, #124	; 0x7c
   b6992:	4620      	mov	r0, r4
   b6994:	f005 f95e 	bl	bbc54 <strchr>
  if (pch != NULL) {
   b6998:	b148      	cbz	r0, b69ae <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   b699a:	3001      	adds	r0, #1
   b699c:	f005 f8ec 	bl	bbb78 <atof>
   b69a0:	ec51 0b10 	vmov	r0, r1, d0
   b69a4:	f005 f874 	bl	bba90 <__aeabi_d2f>
   b69a8:	ee00 0a10 	vmov	s0, r0
   b69ac:	e7ee      	b.n	b698c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   b69ae:	ed9f 0a06 	vldr	s0, [pc, #24]	; b69c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b69b2:	e7eb      	b.n	b698c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   b69b4:	000be003 	.word	0x000be003
   b69b8:	000bdfef 	.word	0x000bdfef
   b69bc:	000be002 	.word	0x000be002
   b69c0:	000be2f7 	.word	0x000be2f7
   b69c4:	000be2fc 	.word	0x000be2fc
   b69c8:	cda2425f 	.word	0xcda2425f
   b69cc:	2003e5ec 	.word	0x2003e5ec

000b69d0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b69d0:	b570      	push	{r4, r5, r6, lr}
   b69d2:	ed2d 8b02 	vpush	{d8}
   b69d6:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b69d8:	6841      	ldr	r1, [r0, #4]
   b69da:	4822      	ldr	r0, [pc, #136]	; (b6a64 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b69dc:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b69e0:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b69e2:	2300      	movs	r3, #0
   b69e4:	f003 f9f2 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b69e8:	4620      	mov	r0, r4
   b69ea:	6861      	ldr	r1, [r4, #4]
   b69ec:	f242 3234 	movw	r2, #9012	; 0x2334
   b69f0:	f7ff fea8 	bl	b6744 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b69f4:	481b      	ldr	r0, [pc, #108]	; (b6a64 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b69f6:	f003 fa67 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b69fa:	b180      	cbz	r0, b6a1e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.print(payload);
   b69fc:	4629      	mov	r1, r5
   b69fe:	4819      	ldr	r0, [pc, #100]	; (b6a64 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6a00:	f002 fe90 	bl	b9724 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   b6a04:	4620      	mov	r0, r4
   b6a06:	f7ff ff5b 	bl	b68c0 <_ZN6UbiTCP16waitServerAnswerEv>
   b6a0a:	4605      	mov	r5, r0
   b6a0c:	b980      	cbnz	r0, b6a30 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x60>
    _client_tcp_ubi.stop();
   b6a0e:	4815      	ldr	r0, [pc, #84]	; (b6a64 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6a10:	f003 fb92 	bl	ba138 <_ZN9TCPClient4stopEv>
    return false;
   b6a14:	2500      	movs	r5, #0
}
   b6a16:	ecbd 8b02 	vpop	{d8}
   b6a1a:	4628      	mov	r0, r5
   b6a1c:	bd70      	pop	{r4, r5, r6, pc}
    if (_debug) {
   b6a1e:	7d23      	ldrb	r3, [r4, #20]
   b6a20:	2b00      	cmp	r3, #0
   b6a22:	d0f4      	beq.n	b6a0e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   b6a24:	f003 ffa0 	bl	ba968 <_Z16_fetch_usbserialv>
   b6a28:	490f      	ldr	r1, [pc, #60]	; (b6a68 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   b6a2a:	f002 fe8e 	bl	b974a <_ZN5Print7printlnEPKc>
   b6a2e:	e7ee      	b.n	b6a0e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
  char* response = (char*)malloc(sizeof(char) * 100);
   b6a30:	2064      	movs	r0, #100	; 0x64
   b6a32:	f000 fde5 	bl	b7600 <malloc>
  float value = parseTCPAnswer("POST", response);
   b6a36:	490d      	ldr	r1, [pc, #52]	; (b6a6c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>)
   b6a38:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   b6a3a:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	f7ff ff61 	bl	b6904 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   b6a42:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   b6a44:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   b6a48:	f000 fde2 	bl	b7610 <free>
  if (value != ERROR_VALUE) {
   b6a4c:	eddf 7a08 	vldr	s15, [pc, #32]	; b6a70 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>
   b6a50:	eeb4 8a67 	vcmp.f32	s16, s15
   b6a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a58:	d0d9      	beq.n	b6a0e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   b6a5a:	4802      	ldr	r0, [pc, #8]	; (b6a64 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6a5c:	f003 fb6c 	bl	ba138 <_ZN9TCPClient4stopEv>
    return true;
   b6a60:	e7d9      	b.n	b6a16 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
   b6a62:	bf00      	nop
   b6a64:	2003e5ec 	.word	0x2003e5ec
   b6a68:	000be2ff 	.word	0x000be2ff
   b6a6c:	000be2f7 	.word	0x000be2f7
   b6a70:	cda2425f 	.word	0xcda2425f

000b6a74 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6a74:	b570      	push	{r4, r5, r6, lr}
   b6a76:	ed2d 8b02 	vpush	{d8}
   b6a7a:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6a7c:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6a7e:	460d      	mov	r5, r1
   b6a80:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6a82:	6841      	ldr	r1, [r0, #4]
   b6a84:	481e      	ldr	r0, [pc, #120]	; (b6b00 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b6a86:	f242 3234 	movw	r2, #9012	; 0x2334
   b6a8a:	f003 f99f 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6a8e:	4620      	mov	r0, r4
   b6a90:	6861      	ldr	r1, [r4, #4]
   b6a92:	f242 3234 	movw	r2, #9012	; 0x2334
   b6a96:	f7ff fe55 	bl	b6744 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6a9a:	4819      	ldr	r0, [pc, #100]	; (b6b00 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b6a9c:	f003 fa14 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b6aa0:	b328      	cbz	r0, b6aee <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   b6aa2:	4620      	mov	r0, r4
   b6aa4:	4632      	mov	r2, r6
   b6aa6:	4629      	mov	r1, r5
   b6aa8:	f7ff fe98 	bl	b67dc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6aac:	4620      	mov	r0, r4
   b6aae:	f7ff ff07 	bl	b68c0 <_ZN6UbiTCP16waitServerAnswerEv>
   b6ab2:	b948      	cbnz	r0, b6ac8 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   b6ab4:	4812      	ldr	r0, [pc, #72]	; (b6b00 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   b6ab6:	ed9f 8a13 	vldr	s16, [pc, #76]	; b6b04 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   b6aba:	f003 fb3d 	bl	ba138 <_ZN9TCPClient4stopEv>
}
   b6abe:	eeb0 0a48 	vmov.f32	s0, s16
   b6ac2:	ecbd 8b02 	vpop	{d8}
   b6ac6:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6ac8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6acc:	f000 fd98 	bl	b7600 <malloc>
    float value = parseTCPAnswer("LV", response);
   b6ad0:	490d      	ldr	r1, [pc, #52]	; (b6b08 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   b6ad2:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6ad4:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	f7ff ff14 	bl	b6904 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   b6adc:	4808      	ldr	r0, [pc, #32]	; (b6b00 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   b6ade:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   b6ae2:	f003 fb29 	bl	ba138 <_ZN9TCPClient4stopEv>
    free(response);
   b6ae6:	4628      	mov	r0, r5
   b6ae8:	f000 fd92 	bl	b7610 <free>
    return value;
   b6aec:	e7e7      	b.n	b6abe <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   b6aee:	7d23      	ldrb	r3, [r4, #20]
   b6af0:	2b00      	cmp	r3, #0
   b6af2:	d0df      	beq.n	b6ab4 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   b6af4:	f003 ff38 	bl	ba968 <_Z16_fetch_usbserialv>
   b6af8:	4904      	ldr	r1, [pc, #16]	; (b6b0c <_ZN6UbiTCP3getEPKcS1_+0x98>)
   b6afa:	f002 fe26 	bl	b974a <_ZN5Print7printlnEPKc>
   b6afe:	e7d9      	b.n	b6ab4 <_ZN6UbiTCP3getEPKcS1_+0x40>
   b6b00:	2003e5ec 	.word	0x2003e5ec
   b6b04:	cda2425f 	.word	0xcda2425f
   b6b08:	000be31d 	.word	0x000be31d
   b6b0c:	000be320 	.word	0x000be320

000b6b10 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   b6b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6b14:	460d      	mov	r5, r1
   b6b16:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6b18:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6b1c:	f000 fd70 	bl	b7600 <malloc>
  if (_debug) {
   b6b20:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6b22:	4607      	mov	r7, r0
  if (_debug) {
   b6b24:	b14b      	cbz	r3, b6b3a <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   b6b26:	f003 ff1f 	bl	ba968 <_Z16_fetch_usbserialv>
   b6b2a:	493a      	ldr	r1, [pc, #232]	; (b6c14 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   b6b2c:	f002 fe0d 	bl	b974a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b6b30:	f003 ff1a 	bl	ba968 <_Z16_fetch_usbserialv>
   b6b34:	4938      	ldr	r1, [pc, #224]	; (b6c18 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   b6b36:	f002 fe08 	bl	b974a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b6b3a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b6c2c <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   b6b3e:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6b40:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b6b44:	4648      	mov	r0, r9
   b6b46:	f003 fa9d 	bl	ba084 <_ZN9TCPClient9availableEv>
   b6b4a:	b188      	cbz	r0, b6b70 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   b6b4c:	4648      	mov	r0, r9
   b6b4e:	f003 f8a7 	bl	b9ca0 <_ZN9TCPClient4readEv>
    if (_debug) {
   b6b52:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   b6b54:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   b6b58:	b12b      	cbz	r3, b6b66 <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   b6b5a:	f003 ff05 	bl	ba968 <_Z16_fetch_usbserialv>
   b6b5e:	6803      	ldr	r3, [r0, #0]
   b6b60:	4641      	mov	r1, r8
   b6b62:	689b      	ldr	r3, [r3, #8]
   b6b64:	4798      	blx	r3
    response[j] = c;
   b6b66:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   b6b6a:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6b6c:	4556      	cmp	r6, sl
   b6b6e:	d1e9      	bne.n	b6b44 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   b6b70:	7d2b      	ldrb	r3, [r5, #20]
   b6b72:	b123      	cbz	r3, b6b7e <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   b6b74:	f003 fef8 	bl	ba968 <_Z16_fetch_usbserialv>
   b6b78:	4928      	ldr	r1, [pc, #160]	; (b6c1c <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   b6b7a:	f002 fde6 	bl	b974a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b6b7e:	2500      	movs	r5, #0
	  : _Node_allocator()
   b6b80:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   b6b82:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   b6b86:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   b6b8a:	4925      	ldr	r1, [pc, #148]	; (b6c20 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   b6b8c:	7125      	strb	r5, [r4, #4]
   b6b8e:	4638      	mov	r0, r7
  response[j] = '\0';
   b6b90:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   b6b92:	f005 ff2f 	bl	bc9f4 <strtok>
    if (strcmp(token, "OK") == 0) {
   b6b96:	f8df 9098 	ldr.w	r9, [pc, #152]	; b6c30 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   b6b9a:	f8df a098 	ldr.w	sl, [pc, #152]	; b6c34 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   b6b9e:	f8df 8080 	ldr.w	r8, [pc, #128]	; b6c20 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   b6ba2:	4606      	mov	r6, r0
  while (token != NULL) {
   b6ba4:	b37e      	cbz	r6, b6c06 <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   b6ba6:	4649      	mov	r1, r9
   b6ba8:	4630      	mov	r0, r6
   b6baa:	f005 f86a 	bl	bbc82 <strcmp>
   b6bae:	bb00      	cbnz	r0, b6bf2 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   b6bb0:	4641      	mov	r1, r8
   b6bb2:	f005 ff1f 	bl	bc9f4 <strtok>
      if (strcmp(token, "null") == 0) {
   b6bb6:	491b      	ldr	r1, [pc, #108]	; (b6c24 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   b6bb8:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   b6bba:	f005 f862 	bl	bbc82 <strcmp>
   b6bbe:	b918      	cbnz	r0, b6bc8 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6bc0:	4b19      	ldr	r3, [pc, #100]	; (b6c28 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   b6bc2:	9500      	str	r5, [sp, #0]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	e008      	b.n	b6bda <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   b6bc8:	4630      	mov	r0, r6
   b6bca:	f004 ffd5 	bl	bbb78 <atof>
   b6bce:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b6bd2:	9500      	str	r5, [sp, #0]
   b6bd4:	f004 ff5c 	bl	bba90 <__aeabi_d2f>
   b6bd8:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   b6bda:	466a      	mov	r2, sp
   b6bdc:	4621      	mov	r1, r4
   b6bde:	a802      	add	r0, sp, #8
   b6be0:	f7ff fd2a 	bl	b6638 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   b6be4:	4641      	mov	r1, r8
   b6be6:	2000      	movs	r0, #0
   b6be8:	f005 ff04 	bl	bc9f4 <strtok>
    mapKey++;
   b6bec:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   b6bee:	4606      	mov	r6, r0
  while (token != NULL) {
   b6bf0:	e7d8      	b.n	b6ba4 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   b6bf2:	4651      	mov	r1, sl
   b6bf4:	4630      	mov	r0, r6
   b6bf6:	f005 f844 	bl	bbc82 <strcmp>
   b6bfa:	2800      	cmp	r0, #0
   b6bfc:	d1f2      	bne.n	b6be4 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   b6bfe:	4641      	mov	r1, r8
   b6c00:	f005 fef8 	bl	bc9f4 <strtok>
   b6c04:	e7dc      	b.n	b6bc0 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   b6c06:	4638      	mov	r0, r7
   b6c08:	f000 fd02 	bl	b7610 <free>
}
   b6c0c:	4620      	mov	r0, r4
   b6c0e:	b004      	add	sp, #16
   b6c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c14:	000be003 	.word	0x000be003
   b6c18:	000bdfef 	.word	0x000bdfef
   b6c1c:	000be002 	.word	0x000be002
   b6c20:	000be2da 	.word	0x000be2da
   b6c24:	000be346 	.word	0x000be346
   b6c28:	cda2425f 	.word	0xcda2425f
   b6c2c:	2003e5ec 	.word	0x2003e5ec
   b6c30:	000be2fc 	.word	0x000be2fc
   b6c34:	000be34b 	.word	0x000be34b

000b6c38 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b6c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   b6c3c:	1d07      	adds	r7, r0, #4
   b6c3e:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   b6c40:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6c42:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   b6c46:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   b6c4a:	7103      	strb	r3, [r0, #4]
   b6c4c:	460d      	mov	r5, r1
   b6c4e:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6c50:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b6c52:	4604      	mov	r4, r0
   b6c54:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6c56:	482d      	ldr	r0, [pc, #180]	; (b6d0c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6c58:	f242 3234 	movw	r2, #9012	; 0x2334
   b6c5c:	f003 f8b6 	bl	b9dcc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6c60:	4628      	mov	r0, r5
   b6c62:	6869      	ldr	r1, [r5, #4]
   b6c64:	f242 3234 	movw	r2, #9012	; 0x2334
   b6c68:	f7ff fd6c 	bl	b6744 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6c6c:	4827      	ldr	r0, [pc, #156]	; (b6d0c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6c6e:	f003 f92b 	bl	b9ec8 <_ZN9TCPClient9connectedEv>
   b6c72:	b310      	cbz	r0, b6cba <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   b6c74:	4631      	mov	r1, r6
   b6c76:	4642      	mov	r2, r8
   b6c78:	4628      	mov	r0, r5
   b6c7a:	f7ff fdaf 	bl	b67dc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6c7e:	4628      	mov	r0, r5
   b6c80:	f7ff fe1e 	bl	b68c0 <_ZN6UbiTCP16waitServerAnswerEv>
   b6c84:	4606      	mov	r6, r0
   b6c86:	b9c0      	cbnz	r0, b6cba <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   b6c88:	4820      	ldr	r0, [pc, #128]	; (b6d0c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6c8a:	4f21      	ldr	r7, [pc, #132]	; (b6d10 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   b6c8c:	f003 fa54 	bl	ba138 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   b6c90:	4920      	ldr	r1, [pc, #128]	; (b6d14 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   b6c92:	4640      	mov	r0, r8
   b6c94:	f005 feae 	bl	bc9f4 <strtok>
      int mapKey = 0;
   b6c98:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   b6c9a:	4e1e      	ldr	r6, [pc, #120]	; (b6d14 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
      while (token != NULL) {
   b6c9c:	2800      	cmp	r0, #0
   b6c9e:	d030      	beq.n	b6d02 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xca>
   b6ca0:	4621      	mov	r1, r4
   b6ca2:	a802      	add	r0, sp, #8
   b6ca4:	466a      	mov	r2, sp
   b6ca6:	9500      	str	r5, [sp, #0]
   b6ca8:	9701      	str	r7, [sp, #4]
   b6caa:	f7ff fcc5 	bl	b6638 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   b6cae:	4631      	mov	r1, r6
   b6cb0:	2000      	movs	r0, #0
        mapKey++;
   b6cb2:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   b6cb4:	f005 fe9e 	bl	bc9f4 <strtok>
      while (token != NULL) {
   b6cb8:	e7f0      	b.n	b6c9c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   b6cba:	4629      	mov	r1, r5
   b6cbc:	a802      	add	r0, sp, #8
   b6cbe:	f7ff ff27 	bl	b6b10 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   b6cc2:	68a0      	ldr	r0, [r4, #8]
   b6cc4:	f7ff fd20 	bl	b6708 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      if (__x._M_root() != nullptr)
   b6cc8:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   b6cca:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b6ccc:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   b6cd0:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   b6cd4:	b17a      	cbz	r2, b6cf6 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xbe>
      _M_header._M_color = __from._M_header._M_color;
   b6cd6:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b6cda:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   b6cdc:	9905      	ldr	r1, [sp, #20]
   b6cde:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   b6ce0:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   b6ce2:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   b6ce4:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   b6ce6:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   b6ce8:	9a07      	ldr	r2, [sp, #28]
   b6cea:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   b6cec:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   b6cee:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   b6cf2:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   b6cf4:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   b6cf6:	9804      	ldr	r0, [sp, #16]
   b6cf8:	f7ff fd06 	bl	b6708 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
  _client_tcp_ubi.stop();
   b6cfc:	4803      	ldr	r0, [pc, #12]	; (b6d0c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6cfe:	f003 fa1b 	bl	ba138 <_ZN9TCPClient4stopEv>
}
   b6d02:	4620      	mov	r0, r4
   b6d04:	b008      	add	sp, #32
   b6d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6d0a:	bf00      	nop
   b6d0c:	2003e5ec 	.word	0x2003e5ec
   b6d10:	cda2425f 	.word	0xcda2425f
   b6d14:	000be277 	.word	0x000be277

000b6d18 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   b6d18:	4801      	ldr	r0, [pc, #4]	; (b6d20 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b6d1a:	f003 ba5d 	b.w	ba1d8 <_ZN9TCPClientC1Ev>
   b6d1e:	bf00      	nop
   b6d20:	2003e5ec 	.word	0x2003e5ec

000b6d24 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   b6d24:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6d2c <_ZN6UbiUDP3getEPKcS1_+0x8>
   b6d28:	4770      	bx	lr
   b6d2a:	bf00      	nop
   b6d2c:	cda2425f 	.word	0xcda2425f

000b6d30 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   b6d30:	7501      	strb	r1, [r0, #20]
   b6d32:	4770      	bx	lr

000b6d34 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   b6d34:	2200      	movs	r2, #0
	  : _Node_allocator()
   b6d36:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b6d38:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b6d3c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b6d40:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   b6d42:	4770      	bx	lr

000b6d44 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6d44:	b530      	push	{r4, r5, lr}
   b6d46:	4d06      	ldr	r5, [pc, #24]	; (b6d60 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   b6d48:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b6d4a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6d4e:	2500      	movs	r5, #0
  _token = token;
   b6d50:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6d52:	7505      	strb	r5, [r0, #20]
   b6d54:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b6d58:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6d5c:	6185      	str	r5, [r0, #24]
}
   b6d5e:	bd30      	pop	{r4, r5, pc}
   b6d60:	000be420 	.word	0x000be420

000b6d64 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   b6d64:	4801      	ldr	r0, [pc, #4]	; (b6d6c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b6d66:	f003 bc9f 	b.w	ba6a8 <_ZN3UDPC1Ev>
   b6d6a:	bf00      	nop
   b6d6c:	2003e608 	.word	0x2003e608

000b6d70 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   b6d70:	b510      	push	{r4, lr}
   b6d72:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   b6d74:	684a      	ldr	r2, [r1, #4]
   b6d76:	4902      	ldr	r1, [pc, #8]	; (b6d80 <_ZN6UbiUDP11getServerIpEv+0x10>)
   b6d78:	f002 fc36 	bl	b95e8 <_ZN5spark12NetworkClass7resolveEPKc>
}
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	bd10      	pop	{r4, pc}
   b6d80:	2003e658 	.word	0x2003e658

000b6d84 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b6d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d86:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   b6d88:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b6d8a:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   b6d8c:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b6d8e:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   b6d90:	f7ff ffee 	bl	b6d70 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   b6d94:	a802      	add	r0, sp, #8
   b6d96:	f001 fa5f 	bl	b8258 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   b6d9a:	b9a0      	cbnz	r0, b6dc6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   b6d9c:	7d33      	ldrb	r3, [r6, #20]
   b6d9e:	b123      	cbz	r3, b6daa <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   b6da0:	f003 fde2 	bl	ba968 <_Z16_fetch_usbserialv>
   b6da4:	4927      	ldr	r1, [pc, #156]	; (b6e44 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   b6da6:	f002 fcd0 	bl	b974a <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   b6daa:	23f3      	movs	r3, #243	; 0xf3
   b6dac:	9300      	str	r3, [sp, #0]
   b6dae:	2237      	movs	r2, #55	; 0x37
   b6db0:	233d      	movs	r3, #61	; 0x3d
   b6db2:	21a9      	movs	r1, #169	; 0xa9
   b6db4:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   b6db6:	ad09      	add	r5, sp, #36	; 0x24
   b6db8:	f001 fa72 	bl	b82a0 <_ZN9IPAddressC1Ehhhh>
   b6dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dbe:	ac03      	add	r4, sp, #12
   b6dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dc2:	682b      	ldr	r3, [r5, #0]
   b6dc4:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   b6dc6:	2200      	movs	r2, #0
   b6dc8:	f240 21bd 	movw	r1, #701	; 0x2bd
   b6dcc:	481e      	ldr	r0, [pc, #120]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6dce:	f003 fc9d 	bl	ba70c <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   b6dd2:	2200      	movs	r2, #0
   b6dd4:	f242 3134 	movw	r1, #9012	; 0x2334
   b6dd8:	481b      	ldr	r0, [pc, #108]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6dda:	f003 fa85 	bl	ba2e8 <_ZN3UDP5beginEtm>
   b6dde:	ad03      	add	r5, sp, #12
   b6de0:	4b1a      	ldr	r3, [pc, #104]	; (b6e4c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   b6de2:	9308      	str	r3, [sp, #32]
   b6de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6de6:	ac09      	add	r4, sp, #36	; 0x24
   b6de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dea:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b6dec:	4816      	ldr	r0, [pc, #88]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6dee:	7023      	strb	r3, [r4, #0]
   b6df0:	f242 3234 	movw	r2, #9012	; 0x2334
   b6df4:	a908      	add	r1, sp, #32
   b6df6:	f003 fca5 	bl	ba744 <_ZN3UDP11beginPacketE9IPAddresst>
   b6dfa:	b958      	cbnz	r0, b6e14 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   b6dfc:	7d33      	ldrb	r3, [r6, #20]
   b6dfe:	b123      	cbz	r3, b6e0a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   b6e00:	f003 fdb2 	bl	ba968 <_Z16_fetch_usbserialv>
   b6e04:	4912      	ldr	r1, [pc, #72]	; (b6e50 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   b6e06:	f002 fca0 	bl	b974a <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   b6e0a:	480f      	ldr	r0, [pc, #60]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6e0c:	f003 fab8 	bl	ba380 <_ZN3UDP4stopEv>
    return false;
   b6e10:	2000      	movs	r0, #0
   b6e12:	e014      	b.n	b6e3e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   b6e14:	2f00      	cmp	r7, #0
   b6e16:	d0f1      	beq.n	b6dfc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   b6e18:	4638      	mov	r0, r7
   b6e1a:	f004 ff62 	bl	bbce2 <strlen>
   b6e1e:	4639      	mov	r1, r7
   b6e20:	4602      	mov	r2, r0
   b6e22:	4809      	ldr	r0, [pc, #36]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6e24:	f003 faba 	bl	ba39c <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b6e28:	2800      	cmp	r0, #0
   b6e2a:	d0e7      	beq.n	b6dfc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   b6e2c:	4806      	ldr	r0, [pc, #24]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6e2e:	f003 fa01 	bl	ba234 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b6e32:	2800      	cmp	r0, #0
   b6e34:	d0e2      	beq.n	b6dfc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   b6e36:	4804      	ldr	r0, [pc, #16]	; (b6e48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6e38:	f003 faa2 	bl	ba380 <_ZN3UDP4stopEv>
  return true;
   b6e3c:	2001      	movs	r0, #1
}
   b6e3e:	b00f      	add	sp, #60	; 0x3c
   b6e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6e42:	bf00      	nop
   b6e44:	000be36c 	.word	0x000be36c
   b6e48:	2003e608 	.word	0x2003e608
   b6e4c:	000be5b0 	.word	0x000be5b0
   b6e50:	000be3f8 	.word	0x000be3f8

000b6e54 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b6e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   b6e56:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b6e58:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b6e5a:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b6e5c:	e9cd 2100 	strd	r2, r1, [sp]
   b6e60:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b6e62:	f000 fbcd 	bl	b7600 <malloc>
   b6e66:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   b6e68:	2014      	movs	r0, #20
   b6e6a:	f7fd f914 	bl	b4096 <_Znwj>
   b6e6e:	4605      	mov	r5, r0
   b6e70:	b120      	cbz	r0, b6e7c <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   b6e72:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6e76:	4633      	mov	r3, r6
   b6e78:	f7ff f9a6 	bl	b61c8 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   b6e7c:	6025      	str	r5, [r4, #0]
}
   b6e7e:	b002      	add	sp, #8
   b6e80:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6e84 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   b6e84:	b538      	push	{r3, r4, r5, lr}
   b6e86:	2500      	movs	r5, #0
   b6e88:	4604      	mov	r4, r0
   b6e8a:	4613      	mov	r3, r2
   b6e8c:	7245      	strb	r5, [r0, #9]
   b6e8e:	7285      	strb	r5, [r0, #10]
   b6e90:	4a02      	ldr	r2, [pc, #8]	; (b6e9c <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   b6e92:	f7ff ffdf 	bl	b6e54 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   b6e96:	4620      	mov	r0, r4
   b6e98:	bd38      	pop	{r3, r4, r5, pc}
   b6e9a:	bf00      	nop
   b6e9c:	000be430 	.word	0x000be430

000b6ea0 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   b6ea0:	6800      	ldr	r0, [r0, #0]
   b6ea2:	f7ff b999 	b.w	b61d8 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000b6ea6 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   b6ea6:	b507      	push	{r0, r1, r2, lr}
   b6ea8:	2300      	movs	r3, #0
   b6eaa:	9300      	str	r3, [sp, #0]
   b6eac:	461a      	mov	r2, r3
   b6eae:	f7ff fff7 	bl	b6ea0 <_ZN7Ubidots3addEPcfS0_mj>
   b6eb2:	b003      	add	sp, #12
   b6eb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6eb8 <_ZN7Ubidots3addEPcfS0_>:
void Ubidots::add(char* variable_label, float value, char* context) { add(variable_label, value, context, NULL, NULL); }
   b6eb8:	b507      	push	{r0, r1, r2, lr}
   b6eba:	2300      	movs	r3, #0
   b6ebc:	9300      	str	r3, [sp, #0]
   b6ebe:	f7ff ffef 	bl	b6ea0 <_ZN7Ubidots3addEPcfS0_mj>
   b6ec2:	b003      	add	sp, #12
   b6ec4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ec8 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   b6ec8:	6800      	ldr	r0, [r0, #0]
   b6eca:	f7ff bba5 	b.w	b6618 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000b6ed0 <_ZN7Ubidots10addContextEPcS0_>:

/*
 * Adds to the context structure values to retrieve later it easily by the user
 */

void Ubidots::addContext(char* key_label, char* key_value) {
   b6ed0:	b510      	push	{r4, lr}
   b6ed2:	4604      	mov	r4, r0
  (_context + _current_context)->key_label = key_label;
   b6ed4:	f990 0009 	ldrsb.w	r0, [r0, #9]
   b6ed8:	6863      	ldr	r3, [r4, #4]
   b6eda:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
  (_context + _current_context)->key_value = key_value;
   b6ede:	f994 1009 	ldrsb.w	r1, [r4, #9]
   b6ee2:	6863      	ldr	r3, [r4, #4]
   b6ee4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b6ee8:	605a      	str	r2, [r3, #4]
  _current_context++;
   b6eea:	7a63      	ldrb	r3, [r4, #9]
   b6eec:	3301      	adds	r3, #1
   b6eee:	b25b      	sxtb	r3, r3
  if (_current_context >= MAX_VALUES) {
   b6ef0:	2b09      	cmp	r3, #9
  _current_context++;
   b6ef2:	7263      	strb	r3, [r4, #9]
  if (_current_context >= MAX_VALUES) {
   b6ef4:	dd06      	ble.n	b6f04 <_ZN7Ubidots10addContextEPcS0_+0x34>
    Serial.println(
   b6ef6:	f003 fd37 	bl	ba968 <_Z16_fetch_usbserialv>
   b6efa:	4903      	ldr	r1, [pc, #12]	; (b6f08 <_ZN7Ubidots10addContextEPcS0_+0x38>)
   b6efc:	f002 fc25 	bl	b974a <_ZN5Print7printlnEPKc>
        F("You are adding more than the maximum of consecutive key-values "
          "pairs"));
    _current_context = MAX_VALUES;
   b6f00:	230a      	movs	r3, #10
   b6f02:	7263      	strb	r3, [r4, #9]
  }
}
   b6f04:	bd10      	pop	{r4, pc}
   b6f06:	bf00      	nop
   b6f08:	000be44b 	.word	0x000be44b

000b6f0c <_ZN7Ubidots10getContextEPc11IotProtocol>:

void Ubidots::getContext(char* context_result) { getContext(context_result, _iotProtocol); }

void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
  // TCP context type
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   b6f0c:	1e53      	subs	r3, r2, #1
   b6f0e:	2b01      	cmp	r3, #1
void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
   b6f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f14:	4605      	mov	r5, r0
   b6f16:	460c      	mov	r4, r1
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   b6f18:	d827      	bhi.n	b6f6a <_ZN7Ubidots10getContextEPc11IotProtocol+0x5e>
    sprintf(context_result, "");
   b6f1a:	492b      	ldr	r1, [pc, #172]	; (b6fc8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xbc>)
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s%s=%s", context_result, (_context + i)->key_label, (_context + i)->key_value);
   b6f1c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b6fcc <_ZN7Ubidots10getContextEPc11IotProtocol+0xc0>
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s$", context_result);
   b6f20:	f8df 90ac 	ldr.w	r9, [pc, #172]	; b6fd0 <_ZN7Ubidots10getContextEPc11IotProtocol+0xc4>
    sprintf(context_result, "");
   b6f24:	4620      	mov	r0, r4
   b6f26:	f004 feb6 	bl	bbc96 <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   b6f2a:	2600      	movs	r6, #0
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   b6f2c:	4637      	mov	r7, r6
    for (uint8_t i = 0; i < _current_context;) {
   b6f2e:	f995 3009 	ldrsb.w	r3, [r5, #9]
   b6f32:	429e      	cmp	r6, r3
   b6f34:	da44      	bge.n	b6fc0 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
      sprintf(context_result, "%s%s=%s", context_result, (_context + i)->key_label, (_context + i)->key_value);
   b6f36:	686b      	ldr	r3, [r5, #4]
   b6f38:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
   b6f3c:	4641      	mov	r1, r8
   b6f3e:	6852      	ldr	r2, [r2, #4]
   b6f40:	9200      	str	r2, [sp, #0]
   b6f42:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   b6f46:	4622      	mov	r2, r4
   b6f48:	4620      	mov	r0, r4
   b6f4a:	f000 fb71 	bl	b7630 <sprintf>
      i++;
   b6f4e:	3601      	adds	r6, #1
      if (i < _current_context) {
   b6f50:	f995 3009 	ldrsb.w	r3, [r5, #9]
      i++;
   b6f54:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   b6f56:	429e      	cmp	r6, r3
   b6f58:	da05      	bge.n	b6f66 <_ZN7Ubidots10getContextEPc11IotProtocol+0x5a>
        sprintf(context_result, "%s$", context_result);
   b6f5a:	4622      	mov	r2, r4
   b6f5c:	4649      	mov	r1, r9
   b6f5e:	4620      	mov	r0, r4
   b6f60:	f000 fb66 	bl	b7630 <sprintf>
   b6f64:	e7e3      	b.n	b6f2e <_ZN7Ubidots10getContextEPc11IotProtocol+0x22>
        _current_context = 0;
   b6f66:	726f      	strb	r7, [r5, #9]
   b6f68:	e7e1      	b.n	b6f2e <_ZN7Ubidots10getContextEPc11IotProtocol+0x22>
      }
    }
  }

  // HTTP context type
  if (iotProtocol == UBI_PARTICLE || iotProtocol == UBI_HTTP) {
   b6f6a:	2a03      	cmp	r2, #3
   b6f6c:	d000      	beq.n	b6f70 <_ZN7Ubidots10getContextEPc11IotProtocol+0x64>
   b6f6e:	bb3a      	cbnz	r2, b6fc0 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
    sprintf(context_result, "");
   b6f70:	4915      	ldr	r1, [pc, #84]	; (b6fc8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xbc>)
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result, (_context + i)->key_label, (_context + i)->key_value);
   b6f72:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6fd4 <_ZN7Ubidots10getContextEPc11IotProtocol+0xc8>
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s,", context_result);
   b6f76:	f8df 9060 	ldr.w	r9, [pc, #96]	; b6fd8 <_ZN7Ubidots10getContextEPc11IotProtocol+0xcc>
    sprintf(context_result, "");
   b6f7a:	4620      	mov	r0, r4
   b6f7c:	f004 fe8b 	bl	bbc96 <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   b6f80:	2600      	movs	r6, #0
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   b6f82:	4637      	mov	r7, r6
    for (uint8_t i = 0; i < _current_context;) {
   b6f84:	f995 3009 	ldrsb.w	r3, [r5, #9]
   b6f88:	429e      	cmp	r6, r3
   b6f8a:	da19      	bge.n	b6fc0 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result, (_context + i)->key_label, (_context + i)->key_value);
   b6f8c:	686b      	ldr	r3, [r5, #4]
   b6f8e:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
   b6f92:	4641      	mov	r1, r8
   b6f94:	6852      	ldr	r2, [r2, #4]
   b6f96:	9200      	str	r2, [sp, #0]
   b6f98:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   b6f9c:	4622      	mov	r2, r4
   b6f9e:	4620      	mov	r0, r4
   b6fa0:	f000 fb46 	bl	b7630 <sprintf>
      i++;
   b6fa4:	3601      	adds	r6, #1
      if (i < _current_context) {
   b6fa6:	f995 3009 	ldrsb.w	r3, [r5, #9]
      i++;
   b6faa:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   b6fac:	429e      	cmp	r6, r3
   b6fae:	da05      	bge.n	b6fbc <_ZN7Ubidots10getContextEPc11IotProtocol+0xb0>
        sprintf(context_result, "%s,", context_result);
   b6fb0:	4622      	mov	r2, r4
   b6fb2:	4649      	mov	r1, r9
   b6fb4:	4620      	mov	r0, r4
   b6fb6:	f000 fb3b 	bl	b7630 <sprintf>
   b6fba:	e7e3      	b.n	b6f84 <_ZN7Ubidots10getContextEPc11IotProtocol+0x78>
        _current_context = 0;
   b6fbc:	726f      	strb	r7, [r5, #9]
   b6fbe:	e7e1      	b.n	b6f84 <_ZN7Ubidots10getContextEPc11IotProtocol+0x78>
      }
    }
  }
}
   b6fc0:	b003      	add	sp, #12
   b6fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6fc6:	bf00      	nop
   b6fc8:	000be18b 	.word	0x000be18b
   b6fcc:	000be490 	.word	0x000be490
   b6fd0:	000be498 	.word	0x000be498
   b6fd4:	000be49c 	.word	0x000be49c
   b6fd8:	000be275 	.word	0x000be275

000b6fdc <_ZN7Ubidots10getContextEPc>:
void Ubidots::getContext(char* context_result) { getContext(context_result, _iotProtocol); }
   b6fdc:	7a02      	ldrb	r2, [r0, #8]
   b6fde:	f7ff bf95 	b.w	b6f0c <_ZN7Ubidots10getContextEPc11IotProtocol>
	...

000b6fe4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <cellular_signal+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	00030274 	.word	0x00030274

000b6ff4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <os_mutex_recursive_create+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	00030248 	.word	0x00030248

000b7004 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <os_mutex_recursive_destroy+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	00030248 	.word	0x00030248

000b7014 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <os_mutex_recursive_lock+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030248 	.word	0x00030248

000b7024 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <os_mutex_recursive_unlock+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030248 	.word	0x00030248

000b7034 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <HAL_RNG_GetRandomNumber+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	685b      	ldr	r3, [r3, #4]
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	00030218 	.word	0x00030218

000b7044 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <HAL_Delay_Microseconds+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	68db      	ldr	r3, [r3, #12]
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	00030218 	.word	0x00030218

000b7054 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	695b      	ldr	r3, [r3, #20]
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	00030218 	.word	0x00030218

000b7064 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7064:	b508      	push	{r3, lr}
   b7066:	4b02      	ldr	r3, [pc, #8]	; (b7070 <HAL_Pin_Mode+0xc>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	689b      	ldr	r3, [r3, #8]
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	bd08      	pop	{r3, pc}
   b7070:	0003022c 	.word	0x0003022c

000b7074 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7074:	b508      	push	{r3, lr}
   b7076:	4b02      	ldr	r3, [pc, #8]	; (b7080 <HAL_Get_Pin_Mode+0xc>)
   b7078:	681b      	ldr	r3, [r3, #0]
   b707a:	68db      	ldr	r3, [r3, #12]
   b707c:	9301      	str	r3, [sp, #4]
   b707e:	bd08      	pop	{r3, pc}
   b7080:	0003022c 	.word	0x0003022c

000b7084 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7084:	b508      	push	{r3, lr}
   b7086:	4b02      	ldr	r3, [pc, #8]	; (b7090 <HAL_GPIO_Write+0xc>)
   b7088:	681b      	ldr	r3, [r3, #0]
   b708a:	691b      	ldr	r3, [r3, #16]
   b708c:	9301      	str	r3, [sp, #4]
   b708e:	bd08      	pop	{r3, pc}
   b7090:	0003022c 	.word	0x0003022c

000b7094 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7094:	b508      	push	{r3, lr}
   b7096:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <HAL_GPIO_Read+0xc>)
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	695b      	ldr	r3, [r3, #20]
   b709c:	9301      	str	r3, [sp, #4]
   b709e:	bd08      	pop	{r3, pc}
   b70a0:	0003022c 	.word	0x0003022c

000b70a4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b70a4:	b508      	push	{r3, lr}
   b70a6:	4b02      	ldr	r3, [pc, #8]	; (b70b0 <hal_i2c_begin+0xc>)
   b70a8:	681b      	ldr	r3, [r3, #0]
   b70aa:	68db      	ldr	r3, [r3, #12]
   b70ac:	9301      	str	r3, [sp, #4]
   b70ae:	bd08      	pop	{r3, pc}
   b70b0:	00030228 	.word	0x00030228

000b70b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b70b4:	b508      	push	{r3, lr}
   b70b6:	4b02      	ldr	r3, [pc, #8]	; (b70c0 <hal_i2c_begin_transmission+0xc>)
   b70b8:	681b      	ldr	r3, [r3, #0]
   b70ba:	699b      	ldr	r3, [r3, #24]
   b70bc:	9301      	str	r3, [sp, #4]
   b70be:	bd08      	pop	{r3, pc}
   b70c0:	00030228 	.word	0x00030228

000b70c4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <hal_i2c_end_transmission+0xc>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	69db      	ldr	r3, [r3, #28]
   b70cc:	9301      	str	r3, [sp, #4]
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	00030228 	.word	0x00030228

000b70d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <hal_i2c_write+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	6a1b      	ldr	r3, [r3, #32]
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	00030228 	.word	0x00030228

000b70e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <hal_i2c_available+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	00030228 	.word	0x00030228

000b70f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <hal_i2c_read+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	00030228 	.word	0x00030228

000b7104 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <hal_i2c_peek+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	00030228 	.word	0x00030228

000b7114 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b02      	ldr	r3, [pc, #8]	; (b7120 <hal_i2c_flush+0xc>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b711c:	9301      	str	r3, [sp, #4]
   b711e:	bd08      	pop	{r3, pc}
   b7120:	00030228 	.word	0x00030228

000b7124 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7124:	b508      	push	{r3, lr}
   b7126:	4b02      	ldr	r3, [pc, #8]	; (b7130 <hal_i2c_is_enabled+0xc>)
   b7128:	681b      	ldr	r3, [r3, #0]
   b712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	bd08      	pop	{r3, pc}
   b7130:	00030228 	.word	0x00030228

000b7134 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <hal_i2c_init+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	00030228 	.word	0x00030228

000b7144 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <hal_i2c_lock+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	00030228 	.word	0x00030228

000b7154 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <hal_i2c_unlock+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	00030228 	.word	0x00030228

000b7164 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <hal_i2c_request_ex+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	00030228 	.word	0x00030228

000b7174 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <if_index_to_name+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	695b      	ldr	r3, [r3, #20]
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	0003026c 	.word	0x0003026c

000b7184 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <inet_inet_ntop+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	695b      	ldr	r3, [r3, #20]
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	00030264 	.word	0x00030264

000b7194 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <inet_htonl+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	6a1b      	ldr	r3, [r3, #32]
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	00030264 	.word	0x00030264

000b71a4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <inet_ntohs+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	00030264 	.word	0x00030264

000b71b4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <inet_htons+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	00030264 	.word	0x00030264

000b71c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <netdb_freeaddrinfo+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	689b      	ldr	r3, [r3, #8]
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	00030268 	.word	0x00030268

000b71d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <netdb_getaddrinfo+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	68db      	ldr	r3, [r3, #12]
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	00030268 	.word	0x00030268

000b71e4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <sock_bind+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	685b      	ldr	r3, [r3, #4]
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	00030238 	.word	0x00030238

000b71f4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <sock_setsockopt+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	699b      	ldr	r3, [r3, #24]
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	00030238 	.word	0x00030238

000b7204 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <sock_close+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	69db      	ldr	r3, [r3, #28]
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	00030238 	.word	0x00030238

000b7214 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <sock_connect+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	6a1b      	ldr	r3, [r3, #32]
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	00030238 	.word	0x00030238

000b7224 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <sock_recv+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030238 	.word	0x00030238

000b7234 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <sock_recvfrom+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030238 	.word	0x00030238

000b7244 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <sock_send+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030238 	.word	0x00030238

000b7254 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <sock_sendto+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030238 	.word	0x00030238

000b7264 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <sock_socket+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030238 	.word	0x00030238

000b7274 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <hal_spi_begin+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	681b      	ldr	r3, [r3, #0]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030230 	.word	0x00030230

000b7284 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <hal_spi_transfer+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	695b      	ldr	r3, [r3, #20]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030230 	.word	0x00030230

000b7294 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <hal_spi_init+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	69db      	ldr	r3, [r3, #28]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030230 	.word	0x00030230

000b72a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <hal_spi_is_enabled+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	6a1b      	ldr	r3, [r3, #32]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030230 	.word	0x00030230

000b72b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <hal_spi_info+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030230 	.word	0x00030230

000b72c4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <hal_spi_set_settings+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030230 	.word	0x00030230

000b72d4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <hal_spi_acquire+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030230 	.word	0x00030230

000b72e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <hal_spi_release+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030230 	.word	0x00030230

000b72f4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <hal_usart_end+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	689b      	ldr	r3, [r3, #8]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	0003023c 	.word	0x0003023c

000b7304 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <hal_usart_write+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	68db      	ldr	r3, [r3, #12]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	0003023c 	.word	0x0003023c

000b7314 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <hal_usart_available+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	691b      	ldr	r3, [r3, #16]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	0003023c 	.word	0x0003023c

000b7324 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <hal_usart_read+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	695b      	ldr	r3, [r3, #20]
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	0003023c 	.word	0x0003023c

000b7334 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <hal_usart_peek+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	699b      	ldr	r3, [r3, #24]
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	0003023c 	.word	0x0003023c

000b7344 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <hal_usart_flush+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	69db      	ldr	r3, [r3, #28]
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	0003023c 	.word	0x0003023c

000b7354 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <hal_usart_is_enabled+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	6a1b      	ldr	r3, [r3, #32]
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	0003023c 	.word	0x0003023c

000b7364 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <hal_usart_available_data_for_write+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	0003023c 	.word	0x0003023c

000b7374 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <hal_usart_begin_config+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	0003023c 	.word	0x0003023c

000b7384 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <hal_usart_init_ex+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	0003023c 	.word	0x0003023c

000b7394 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <HAL_USB_USART_Init+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	681b      	ldr	r3, [r3, #0]
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	0003024c 	.word	0x0003024c

000b73a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <HAL_USB_USART_Begin+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	685b      	ldr	r3, [r3, #4]
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	0003024c 	.word	0x0003024c

000b73b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <HAL_USB_USART_End+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	689b      	ldr	r3, [r3, #8]
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	0003024c 	.word	0x0003024c

000b73c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <HAL_USB_USART_Available_Data+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	691b      	ldr	r3, [r3, #16]
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	0003024c 	.word	0x0003024c

000b73d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	695b      	ldr	r3, [r3, #20]
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	0003024c 	.word	0x0003024c

000b73e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b73e4:	b508      	push	{r3, lr}
   b73e6:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <HAL_USB_USART_Receive_Data+0xc>)
   b73e8:	681b      	ldr	r3, [r3, #0]
   b73ea:	699b      	ldr	r3, [r3, #24]
   b73ec:	9301      	str	r3, [sp, #4]
   b73ee:	bd08      	pop	{r3, pc}
   b73f0:	0003024c 	.word	0x0003024c

000b73f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b73f4:	b508      	push	{r3, lr}
   b73f6:	4b02      	ldr	r3, [pc, #8]	; (b7400 <HAL_USB_USART_Send_Data+0xc>)
   b73f8:	681b      	ldr	r3, [r3, #0]
   b73fa:	69db      	ldr	r3, [r3, #28]
   b73fc:	9301      	str	r3, [sp, #4]
   b73fe:	bd08      	pop	{r3, pc}
   b7400:	0003024c 	.word	0x0003024c

000b7404 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7404:	b508      	push	{r3, lr}
   b7406:	4b02      	ldr	r3, [pc, #8]	; (b7410 <HAL_USB_USART_Flush_Data+0xc>)
   b7408:	681b      	ldr	r3, [r3, #0]
   b740a:	6a1b      	ldr	r3, [r3, #32]
   b740c:	9301      	str	r3, [sp, #4]
   b740e:	bd08      	pop	{r3, pc}
   b7410:	0003024c 	.word	0x0003024c

000b7414 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7414:	b508      	push	{r3, lr}
   b7416:	4b02      	ldr	r3, [pc, #8]	; (b7420 <panic_+0xc>)
   b7418:	681b      	ldr	r3, [r3, #0]
   b741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b741c:	9301      	str	r3, [sp, #4]
   b741e:	bd08      	pop	{r3, pc}
   b7420:	00030260 	.word	0x00030260

000b7424 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7424:	b508      	push	{r3, lr}
   b7426:	4b02      	ldr	r3, [pc, #8]	; (b7430 <log_message+0xc>)
   b7428:	681b      	ldr	r3, [r3, #0]
   b742a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b742c:	9301      	str	r3, [sp, #4]
   b742e:	bd08      	pop	{r3, pc}
   b7430:	00030260 	.word	0x00030260

000b7434 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7434:	b508      	push	{r3, lr}
   b7436:	4b02      	ldr	r3, [pc, #8]	; (b7440 <log_level_name+0xc>)
   b7438:	681b      	ldr	r3, [r3, #0]
   b743a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b743c:	9301      	str	r3, [sp, #4]
   b743e:	bd08      	pop	{r3, pc}
   b7440:	00030260 	.word	0x00030260

000b7444 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7444:	b508      	push	{r3, lr}
   b7446:	4b02      	ldr	r3, [pc, #8]	; (b7450 <log_set_callbacks+0xc>)
   b7448:	681b      	ldr	r3, [r3, #0]
   b744a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b744c:	9301      	str	r3, [sp, #4]
   b744e:	bd08      	pop	{r3, pc}
   b7450:	00030260 	.word	0x00030260

000b7454 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7454:	b508      	push	{r3, lr}
   b7456:	4b03      	ldr	r3, [pc, #12]	; (b7464 <diag_get_source+0x10>)
   b7458:	681b      	ldr	r3, [r3, #0]
   b745a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b745e:	9301      	str	r3, [sp, #4]
   b7460:	bd08      	pop	{r3, pc}
   b7462:	0000      	.short	0x0000
   b7464:	00030260 	.word	0x00030260

000b7468 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <set_system_mode+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	685b      	ldr	r3, [r3, #4]
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	00030220 	.word	0x00030220

000b7478 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <system_delay_ms+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	695b      	ldr	r3, [r3, #20]
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	00030220 	.word	0x00030220

000b7488 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <system_thread_set_state+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030220 	.word	0x00030220

000b7498 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <application_thread_current+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030220 	.word	0x00030220

000b74a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <application_thread_invoke+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030220 	.word	0x00030220

000b74b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b03      	ldr	r3, [pc, #12]	; (b74c8 <system_ctrl_set_app_request_handler+0x10>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b74c2:	9301      	str	r3, [sp, #4]
   b74c4:	bd08      	pop	{r3, pc}
   b74c6:	0000      	.short	0x0000
   b74c8:	00030220 	.word	0x00030220

000b74cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b74cc:	b508      	push	{r3, lr}
   b74ce:	4b03      	ldr	r3, [pc, #12]	; (b74dc <system_ctrl_set_result+0x10>)
   b74d0:	681b      	ldr	r3, [r3, #0]
   b74d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b74d6:	9301      	str	r3, [sp, #4]
   b74d8:	bd08      	pop	{r3, pc}
   b74da:	0000      	.short	0x0000
   b74dc:	00030220 	.word	0x00030220

000b74e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b74e0:	b508      	push	{r3, lr}
   b74e2:	4b02      	ldr	r3, [pc, #8]	; (b74ec <spark_variable+0xc>)
   b74e4:	681b      	ldr	r3, [r3, #0]
   b74e6:	681b      	ldr	r3, [r3, #0]
   b74e8:	9301      	str	r3, [sp, #4]
   b74ea:	bd08      	pop	{r3, pc}
   b74ec:	00030244 	.word	0x00030244

000b74f0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b74f0:	b508      	push	{r3, lr}
   b74f2:	4b02      	ldr	r3, [pc, #8]	; (b74fc <spark_process+0xc>)
   b74f4:	681b      	ldr	r3, [r3, #0]
   b74f6:	689b      	ldr	r3, [r3, #8]
   b74f8:	9301      	str	r3, [sp, #4]
   b74fa:	bd08      	pop	{r3, pc}
   b74fc:	00030244 	.word	0x00030244

000b7500 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7500:	b508      	push	{r3, lr}
   b7502:	4b02      	ldr	r3, [pc, #8]	; (b750c <spark_cloud_flag_connected+0xc>)
   b7504:	681b      	ldr	r3, [r3, #0]
   b7506:	695b      	ldr	r3, [r3, #20]
   b7508:	9301      	str	r3, [sp, #4]
   b750a:	bd08      	pop	{r3, pc}
   b750c:	00030244 	.word	0x00030244

000b7510 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7510:	b508      	push	{r3, lr}
   b7512:	4b02      	ldr	r3, [pc, #8]	; (b751c <spark_deviceID+0xc>)
   b7514:	681b      	ldr	r3, [r3, #0]
   b7516:	69db      	ldr	r3, [r3, #28]
   b7518:	9301      	str	r3, [sp, #4]
   b751a:	bd08      	pop	{r3, pc}
   b751c:	00030244 	.word	0x00030244

000b7520 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7520:	b508      	push	{r3, lr}
   b7522:	4b02      	ldr	r3, [pc, #8]	; (b752c <spark_send_event+0xc>)
   b7524:	681b      	ldr	r3, [r3, #0]
   b7526:	6a1b      	ldr	r3, [r3, #32]
   b7528:	9301      	str	r3, [sp, #4]
   b752a:	bd08      	pop	{r3, pc}
   b752c:	00030244 	.word	0x00030244

000b7530 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7530:	b508      	push	{r3, lr}
   b7532:	4b02      	ldr	r3, [pc, #8]	; (b753c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7534:	681b      	ldr	r3, [r3, #0]
   b7536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7538:	9301      	str	r3, [sp, #4]
   b753a:	bd08      	pop	{r3, pc}
   b753c:	00030244 	.word	0x00030244

000b7540 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7540:	b508      	push	{r3, lr}
   b7542:	4b02      	ldr	r3, [pc, #8]	; (b754c <network_connect+0xc>)
   b7544:	681b      	ldr	r3, [r3, #0]
   b7546:	685b      	ldr	r3, [r3, #4]
   b7548:	9301      	str	r3, [sp, #4]
   b754a:	bd08      	pop	{r3, pc}
   b754c:	00030240 	.word	0x00030240

000b7550 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7550:	b508      	push	{r3, lr}
   b7552:	4b02      	ldr	r3, [pc, #8]	; (b755c <network_connecting+0xc>)
   b7554:	681b      	ldr	r3, [r3, #0]
   b7556:	689b      	ldr	r3, [r3, #8]
   b7558:	9301      	str	r3, [sp, #4]
   b755a:	bd08      	pop	{r3, pc}
   b755c:	00030240 	.word	0x00030240

000b7560 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7560:	b508      	push	{r3, lr}
   b7562:	4b02      	ldr	r3, [pc, #8]	; (b756c <network_disconnect+0xc>)
   b7564:	681b      	ldr	r3, [r3, #0]
   b7566:	68db      	ldr	r3, [r3, #12]
   b7568:	9301      	str	r3, [sp, #4]
   b756a:	bd08      	pop	{r3, pc}
   b756c:	00030240 	.word	0x00030240

000b7570 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7570:	b508      	push	{r3, lr}
   b7572:	4b02      	ldr	r3, [pc, #8]	; (b757c <network_ready+0xc>)
   b7574:	681b      	ldr	r3, [r3, #0]
   b7576:	691b      	ldr	r3, [r3, #16]
   b7578:	9301      	str	r3, [sp, #4]
   b757a:	bd08      	pop	{r3, pc}
   b757c:	00030240 	.word	0x00030240

000b7580 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7580:	b508      	push	{r3, lr}
   b7582:	4b02      	ldr	r3, [pc, #8]	; (b758c <network_on+0xc>)
   b7584:	681b      	ldr	r3, [r3, #0]
   b7586:	695b      	ldr	r3, [r3, #20]
   b7588:	9301      	str	r3, [sp, #4]
   b758a:	bd08      	pop	{r3, pc}
   b758c:	00030240 	.word	0x00030240

000b7590 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7590:	b508      	push	{r3, lr}
   b7592:	4b02      	ldr	r3, [pc, #8]	; (b759c <network_off+0xc>)
   b7594:	681b      	ldr	r3, [r3, #0]
   b7596:	699b      	ldr	r3, [r3, #24]
   b7598:	9301      	str	r3, [sp, #4]
   b759a:	bd08      	pop	{r3, pc}
   b759c:	00030240 	.word	0x00030240

000b75a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b75a0:	b508      	push	{r3, lr}
   b75a2:	4b02      	ldr	r3, [pc, #8]	; (b75ac <network_listen+0xc>)
   b75a4:	681b      	ldr	r3, [r3, #0]
   b75a6:	69db      	ldr	r3, [r3, #28]
   b75a8:	9301      	str	r3, [sp, #4]
   b75aa:	bd08      	pop	{r3, pc}
   b75ac:	00030240 	.word	0x00030240

000b75b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b75b0:	b508      	push	{r3, lr}
   b75b2:	4b02      	ldr	r3, [pc, #8]	; (b75bc <network_listening+0xc>)
   b75b4:	681b      	ldr	r3, [r3, #0]
   b75b6:	6a1b      	ldr	r3, [r3, #32]
   b75b8:	9301      	str	r3, [sp, #4]
   b75ba:	bd08      	pop	{r3, pc}
   b75bc:	00030240 	.word	0x00030240

000b75c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b75c0:	b508      	push	{r3, lr}
   b75c2:	4b02      	ldr	r3, [pc, #8]	; (b75cc <network_set_listen_timeout+0xc>)
   b75c4:	681b      	ldr	r3, [r3, #0]
   b75c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b75c8:	9301      	str	r3, [sp, #4]
   b75ca:	bd08      	pop	{r3, pc}
   b75cc:	00030240 	.word	0x00030240

000b75d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b75d0:	b508      	push	{r3, lr}
   b75d2:	4b02      	ldr	r3, [pc, #8]	; (b75dc <network_get_listen_timeout+0xc>)
   b75d4:	681b      	ldr	r3, [r3, #0]
   b75d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b75d8:	9301      	str	r3, [sp, #4]
   b75da:	bd08      	pop	{r3, pc}
   b75dc:	00030240 	.word	0x00030240

000b75e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b02      	ldr	r3, [pc, #8]	; (b75ec <network_is_on+0xc>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b75e8:	9301      	str	r3, [sp, #4]
   b75ea:	bd08      	pop	{r3, pc}
   b75ec:	00030240 	.word	0x00030240

000b75f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b75f0:	b508      	push	{r3, lr}
   b75f2:	4b02      	ldr	r3, [pc, #8]	; (b75fc <network_is_off+0xc>)
   b75f4:	681b      	ldr	r3, [r3, #0]
   b75f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b75f8:	9301      	str	r3, [sp, #4]
   b75fa:	bd08      	pop	{r3, pc}
   b75fc:	00030240 	.word	0x00030240

000b7600 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7600:	b508      	push	{r3, lr}
   b7602:	4b02      	ldr	r3, [pc, #8]	; (b760c <malloc+0xc>)
   b7604:	681b      	ldr	r3, [r3, #0]
   b7606:	681b      	ldr	r3, [r3, #0]
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	bd08      	pop	{r3, pc}
   b760c:	0003021c 	.word	0x0003021c

000b7610 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7610:	b508      	push	{r3, lr}
   b7612:	4b02      	ldr	r3, [pc, #8]	; (b761c <free+0xc>)
   b7614:	681b      	ldr	r3, [r3, #0]
   b7616:	685b      	ldr	r3, [r3, #4]
   b7618:	9301      	str	r3, [sp, #4]
   b761a:	bd08      	pop	{r3, pc}
   b761c:	0003021c 	.word	0x0003021c

000b7620 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7620:	b508      	push	{r3, lr}
   b7622:	4b02      	ldr	r3, [pc, #8]	; (b762c <realloc+0xc>)
   b7624:	681b      	ldr	r3, [r3, #0]
   b7626:	689b      	ldr	r3, [r3, #8]
   b7628:	9301      	str	r3, [sp, #4]
   b762a:	bd08      	pop	{r3, pc}
   b762c:	0003021c 	.word	0x0003021c

000b7630 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b02      	ldr	r3, [pc, #8]	; (b763c <sprintf+0xc>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	68db      	ldr	r3, [r3, #12]
   b7638:	9301      	str	r3, [sp, #4]
   b763a:	bd08      	pop	{r3, pc}
   b763c:	0003021c 	.word	0x0003021c

000b7640 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7640:	b508      	push	{r3, lr}
   b7642:	4b02      	ldr	r3, [pc, #8]	; (b764c <snprintf+0xc>)
   b7644:	681b      	ldr	r3, [r3, #0]
   b7646:	69db      	ldr	r3, [r3, #28]
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	bd08      	pop	{r3, pc}
   b764c:	0003021c 	.word	0x0003021c

000b7650 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7650:	b508      	push	{r3, lr}
   b7652:	4b02      	ldr	r3, [pc, #8]	; (b765c <vsnprintf+0xc>)
   b7654:	681b      	ldr	r3, [r3, #0]
   b7656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7658:	9301      	str	r3, [sp, #4]
   b765a:	bd08      	pop	{r3, pc}
   b765c:	0003021c 	.word	0x0003021c

000b7660 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7660:	b508      	push	{r3, lr}
   b7662:	4b02      	ldr	r3, [pc, #8]	; (b766c <abort+0xc>)
   b7664:	681b      	ldr	r3, [r3, #0]
   b7666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7668:	9301      	str	r3, [sp, #4]
   b766a:	bd08      	pop	{r3, pc}
   b766c:	0003021c 	.word	0x0003021c

000b7670 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <_malloc_r+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	0003021c 	.word	0x0003021c

000b7680 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <__errno+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	0003021c 	.word	0x0003021c

000b7690 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <__assert_func+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	0003021c 	.word	0x0003021c

000b76a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <newlib_impure_ptr_callback+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	0003021c 	.word	0x0003021c

000b76b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b76b0:	2100      	movs	r1, #0
   b76b2:	f7ff bee1 	b.w	b7478 <system_delay_ms>

000b76b6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b76b6:	b510      	push	{r4, lr}
      if (_M_empty())
   b76b8:	6883      	ldr	r3, [r0, #8]
   b76ba:	4604      	mov	r4, r0
   b76bc:	b90b      	cbnz	r3, b76c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b76be:	f003 fc16 	bl	baeee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b76c2:	68c3      	ldr	r3, [r0, #12]
   b76c4:	4798      	blx	r3
      if (_M_manager)
   b76c6:	68a3      	ldr	r3, [r4, #8]
   b76c8:	b11b      	cbz	r3, b76d2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b76ca:	2203      	movs	r2, #3
   b76cc:	4621      	mov	r1, r4
   b76ce:	4620      	mov	r0, r4
   b76d0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b76d2:	4620      	mov	r0, r4
   b76d4:	2110      	movs	r1, #16
}
   b76d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b76da:	f7fc bce0 	b.w	b409e <_ZdlPvj>

000b76de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b76de:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b76e0:	6843      	ldr	r3, [r0, #4]
   b76e2:	3b01      	subs	r3, #1
    {
   b76e4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b76e6:	6043      	str	r3, [r0, #4]
   b76e8:	b963      	cbnz	r3, b7704 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b76ea:	6803      	ldr	r3, [r0, #0]
   b76ec:	689b      	ldr	r3, [r3, #8]
   b76ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b76f0:	68a3      	ldr	r3, [r4, #8]
   b76f2:	3b01      	subs	r3, #1
   b76f4:	60a3      	str	r3, [r4, #8]
   b76f6:	b92b      	cbnz	r3, b7704 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b76f8:	6823      	ldr	r3, [r4, #0]
   b76fa:	4620      	mov	r0, r4
   b76fc:	68db      	ldr	r3, [r3, #12]
    }
   b76fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7702:	4718      	bx	r3
    }
   b7704:	bd10      	pop	{r4, pc}

000b7706 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7706:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7708:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b770c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b770e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7712:	42ae      	cmp	r6, r5
   b7714:	d004      	beq.n	b7720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7716:	4628      	mov	r0, r5
   b7718:	f002 fa00 	bl	b9b1c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b771c:	3510      	adds	r5, #16
   b771e:	e7f8      	b.n	b7712 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7720:	6820      	ldr	r0, [r4, #0]
   b7722:	f7ff ff75 	bl	b7610 <free>
    AllocatorT::free(data_);
}
   b7726:	4620      	mov	r0, r4
   b7728:	bd70      	pop	{r4, r5, r6, pc}

000b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b772a:	b510      	push	{r4, lr}
   b772c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b772e:	6800      	ldr	r0, [r0, #0]
   b7730:	b108      	cbz	r0, b7736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7732:	f7ff ffd4 	bl	b76de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7736:	4620      	mov	r0, r4
   b7738:	bd10      	pop	{r4, pc}

000b773a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b773a:	b513      	push	{r0, r1, r4, lr}
   b773c:	460b      	mov	r3, r1
   b773e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7740:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7744:	466c      	mov	r4, sp
   b7746:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b774a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b774e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7752:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7756:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b775a:	b002      	add	sp, #8
   b775c:	bd10      	pop	{r4, pc}
	...

000b7760 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7760:	4802      	ldr	r0, [pc, #8]	; (b776c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7762:	2300      	movs	r3, #0
   b7764:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7766:	f7ff bc45 	b.w	b6ff4 <os_mutex_recursive_create>
   b776a:	bf00      	nop
   b776c:	2003e654 	.word	0x2003e654

000b7770 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7770:	2200      	movs	r2, #0
   b7772:	6840      	ldr	r0, [r0, #4]
   b7774:	4611      	mov	r1, r2
   b7776:	f7ff befb 	b.w	b7570 <network_ready>

000b777a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b777a:	2200      	movs	r2, #0
   b777c:	6840      	ldr	r0, [r0, #4]
   b777e:	4611      	mov	r1, r2
   b7780:	f7ff bf16 	b.w	b75b0 <network_listening>

000b7784 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7784:	2200      	movs	r2, #0
   b7786:	6840      	ldr	r0, [r0, #4]
   b7788:	4611      	mov	r1, r2
   b778a:	f7ff bf21 	b.w	b75d0 <network_get_listen_timeout>

000b778e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b778e:	6840      	ldr	r0, [r0, #4]
   b7790:	2200      	movs	r2, #0
   b7792:	f7ff bf15 	b.w	b75c0 <network_set_listen_timeout>

000b7796 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7796:	6840      	ldr	r0, [r0, #4]
   b7798:	2200      	movs	r2, #0
   b779a:	f081 0101 	eor.w	r1, r1, #1
   b779e:	f7ff beff 	b.w	b75a0 <network_listen>

000b77a2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77a2:	2300      	movs	r3, #0
   b77a4:	6840      	ldr	r0, [r0, #4]
   b77a6:	461a      	mov	r2, r3
   b77a8:	4619      	mov	r1, r3
   b77aa:	f7ff bef1 	b.w	b7590 <network_off>

000b77ae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77ae:	2300      	movs	r3, #0
   b77b0:	6840      	ldr	r0, [r0, #4]
   b77b2:	461a      	mov	r2, r3
   b77b4:	4619      	mov	r1, r3
   b77b6:	f7ff bee3 	b.w	b7580 <network_on>

000b77ba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b77ba:	2200      	movs	r2, #0
   b77bc:	6840      	ldr	r0, [r0, #4]
   b77be:	4611      	mov	r1, r2
   b77c0:	f7ff bec6 	b.w	b7550 <network_connecting>

000b77c4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b77c4:	6840      	ldr	r0, [r0, #4]
   b77c6:	2200      	movs	r2, #0
   b77c8:	2102      	movs	r1, #2
   b77ca:	f7ff bec9 	b.w	b7560 <network_disconnect>

000b77ce <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b77ce:	2300      	movs	r3, #0
   b77d0:	6840      	ldr	r0, [r0, #4]
   b77d2:	461a      	mov	r2, r3
   b77d4:	f7ff beb4 	b.w	b7540 <network_connect>

000b77d8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b77d8:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b77da:	4b13      	ldr	r3, [pc, #76]	; (b7828 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b77dc:	6003      	str	r3, [r0, #0]
   b77de:	2518      	movs	r5, #24
   b77e0:	3330      	adds	r3, #48	; 0x30
   b77e2:	b086      	sub	sp, #24
   b77e4:	460e      	mov	r6, r1
   b77e6:	6043      	str	r3, [r0, #4]
   b77e8:	462a      	mov	r2, r5
   b77ea:	2100      	movs	r1, #0
   b77ec:	4604      	mov	r4, r0
   b77ee:	3008      	adds	r0, #8
   b77f0:	f004 f9fa 	bl	bbbe8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b77f4:	2200      	movs	r2, #0
   b77f6:	6870      	ldr	r0, [r6, #4]
   b77f8:	4611      	mov	r1, r2
   b77fa:	f7ff feb9 	bl	b7570 <network_ready>
   b77fe:	b178      	cbz	r0, b7820 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b7800:	2100      	movs	r1, #0
   b7802:	462a      	mov	r2, r5
   b7804:	4668      	mov	r0, sp
   b7806:	f004 f9ef 	bl	bbbe8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b780a:	4669      	mov	r1, sp
   b780c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b780e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b7812:	f7ff fbe7 	bl	b6fe4 <cellular_signal>
   b7816:	b918      	cbnz	r0, b7820 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b7818:	4669      	mov	r1, sp
   b781a:	4620      	mov	r0, r4
   b781c:	f000 f8b8 	bl	b7990 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b7820:	4620      	mov	r0, r4
   b7822:	b006      	add	sp, #24
   b7824:	bd70      	pop	{r4, r5, r6, pc}
   b7826:	bf00      	nop
   b7828:	000be4f4 	.word	0x000be4f4

000b782c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b782c:	4b08      	ldr	r3, [pc, #32]	; (b7850 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b782e:	b510      	push	{r4, lr}
   b7830:	2428      	movs	r4, #40	; 0x28
   b7832:	4622      	mov	r2, r4
   b7834:	4618      	mov	r0, r3
   b7836:	2100      	movs	r1, #0
   b7838:	f004 f9d6 	bl	bbbe8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b783c:	4b05      	ldr	r3, [pc, #20]	; (b7854 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b783e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7844:	6042      	str	r2, [r0, #4]
   b7846:	2204      	movs	r2, #4
   b7848:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b784a:	4a03      	ldr	r2, [pc, #12]	; (b7858 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b784c:	601a      	str	r2, [r3, #0]
   b784e:	bd10      	pop	{r4, pc}
   b7850:	2003e660 	.word	0x2003e660
   b7854:	2003e658 	.word	0x2003e658
   b7858:	000be4b8 	.word	0x000be4b8

000b785c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b785c:	4770      	bx	lr

000b785e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b785e:	7b00      	ldrb	r0, [r0, #12]
   b7860:	4770      	bx	lr

000b7862 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b7862:	7b03      	ldrb	r3, [r0, #12]
   b7864:	b14b      	cbz	r3, b787a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b7866:	6903      	ldr	r3, [r0, #16]
   b7868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b786c:	d005      	beq.n	b787a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b786e:	6980      	ldr	r0, [r0, #24]
   b7870:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b7874:	bf18      	it	ne
   b7876:	2001      	movne	r0, #1
   b7878:	4770      	bx	lr
   b787a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   b787c:	4770      	bx	lr

000b787e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b787e:	6803      	ldr	r3, [r0, #0]
   b7880:	6a1b      	ldr	r3, [r3, #32]
   b7882:	4718      	bx	r3

000b7884 <_ZNK14CellularSignal7printToER5Print>:
{
   b7884:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b7886:	6803      	ldr	r3, [r0, #0]
{
   b7888:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b788a:	691b      	ldr	r3, [r3, #16]
{
   b788c:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b788e:	4798      	blx	r3
   b7890:	2102      	movs	r1, #2
   b7892:	4628      	mov	r0, r5
   b7894:	f002 f84a 	bl	b992c <_ZN5Print5printEfi>
    n += p.print(',');
   b7898:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b789a:	4604      	mov	r4, r0
    n += p.print(',');
   b789c:	4628      	mov	r0, r5
   b789e:	f001 ff45 	bl	b972c <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b78a2:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b78a4:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b78a6:	699b      	ldr	r3, [r3, #24]
   b78a8:	4630      	mov	r0, r6
   b78aa:	4798      	blx	r3
   b78ac:	2102      	movs	r1, #2
   b78ae:	4628      	mov	r0, r5
   b78b0:	f002 f83c 	bl	b992c <_ZN5Print5printEfi>
}
   b78b4:	4420      	add	r0, r4
   b78b6:	bd70      	pop	{r4, r5, r6, pc}

000b78b8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b78b8:	f1a0 0004 	sub.w	r0, r0, #4
   b78bc:	f7ff bfe2 	b.w	b7884 <_ZNK14CellularSignal7printToER5Print>

000b78c0 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b78c0:	b510      	push	{r4, lr}
   b78c2:	2120      	movs	r1, #32
   b78c4:	4604      	mov	r4, r0
   b78c6:	f7fc fbea 	bl	b409e <_ZdlPvj>
   b78ca:	4620      	mov	r0, r4
   b78cc:	bd10      	pop	{r4, pc}
	...

000b78d0 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b78d0:	7b03      	ldrb	r3, [r0, #12]
   b78d2:	b17b      	cbz	r3, b78f4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b78d4:	6943      	ldr	r3, [r0, #20]
   b78d6:	2b00      	cmp	r3, #0
   b78d8:	db0c      	blt.n	b78f4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b78da:	ee07 3a90 	vmov	s15, r3
   b78de:	ed9f 7a07 	vldr	s14, [pc, #28]	; b78fc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b78e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b78e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b78ea:	eddf 7a05 	vldr	s15, [pc, #20]	; b7900 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b78ee:	ee20 0a27 	vmul.f32	s0, s0, s15
   b78f2:	4770      	bx	lr
    return -1.0f;
   b78f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b78f8:	4770      	bx	lr
   b78fa:	bf00      	nop
   b78fc:	477fff00 	.word	0x477fff00
   b7900:	42c80000 	.word	0x42c80000

000b7904 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b7904:	7b03      	ldrb	r3, [r0, #12]
   b7906:	b163      	cbz	r3, b7922 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b7908:	6903      	ldr	r3, [r0, #16]
   b790a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b790e:	d008      	beq.n	b7922 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b7910:	ee07 3a90 	vmov	s15, r3
   b7914:	ed9f 7a04 	vldr	s14, [pc, #16]	; b7928 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b7918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b791c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7920:	4770      	bx	lr
    return 0.0f;
   b7922:	ed9f 0a02 	vldr	s0, [pc, #8]	; b792c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b7926:	4770      	bx	lr
   b7928:	42c80000 	.word	0x42c80000
   b792c:	00000000 	.word	0x00000000

000b7930 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b7930:	7b03      	ldrb	r3, [r0, #12]
   b7932:	b17b      	cbz	r3, b7954 <_ZNK14CellularSignal10getQualityEv+0x24>
   b7934:	69c3      	ldr	r3, [r0, #28]
   b7936:	2b00      	cmp	r3, #0
   b7938:	db0c      	blt.n	b7954 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b793a:	ee07 3a90 	vmov	s15, r3
   b793e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b795c <_ZNK14CellularSignal10getQualityEv+0x2c>
   b7942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7946:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b794a:	eddf 7a05 	vldr	s15, [pc, #20]	; b7960 <_ZNK14CellularSignal10getQualityEv+0x30>
   b794e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b7952:	4770      	bx	lr
    return -1.0f;
   b7954:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b7958:	4770      	bx	lr
   b795a:	bf00      	nop
   b795c:	477fff00 	.word	0x477fff00
   b7960:	42c80000 	.word	0x42c80000

000b7964 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b7964:	7b03      	ldrb	r3, [r0, #12]
   b7966:	b163      	cbz	r3, b7982 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b7968:	6983      	ldr	r3, [r0, #24]
   b796a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b796e:	d008      	beq.n	b7982 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b7970:	ee07 3a90 	vmov	s15, r3
   b7974:	ed9f 7a04 	vldr	s14, [pc, #16]	; b7988 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b7978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b797c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7980:	4770      	bx	lr
    return 0.0f;
   b7982:	ed9f 0a02 	vldr	s0, [pc, #8]	; b798c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b7986:	4770      	bx	lr
   b7988:	42c80000 	.word	0x42c80000
   b798c:	00000000 	.word	0x00000000

000b7990 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b7990:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b7992:	460d      	mov	r5, r1
   b7994:	f100 0408 	add.w	r4, r0, #8
   b7998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b799a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b799c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b79a0:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b79a4:	2001      	movs	r0, #1
   b79a6:	bd30      	pop	{r4, r5, pc}

000b79a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b79a8:	4770      	bx	lr

000b79aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b79aa:	2000      	movs	r0, #0
   b79ac:	4770      	bx	lr

000b79ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b79ae:	b510      	push	{r4, lr}
   b79b0:	2110      	movs	r1, #16
   b79b2:	4604      	mov	r4, r0
   b79b4:	f7fc fb73 	bl	b409e <_ZdlPvj>
   b79b8:	4620      	mov	r0, r4
   b79ba:	bd10      	pop	{r4, pc}

000b79bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b79bc:	b508      	push	{r3, lr}
      { delete this; }
   b79be:	f7ff fff6 	bl	b79ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b79c2:	bd08      	pop	{r3, pc}

000b79c4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b79c4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b79c6:	2200      	movs	r2, #0
   b79c8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b79cc:	6002      	str	r2, [r0, #0]
   b79ce:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b79d0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b79d2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b79d4:	680c      	ldr	r4, [r1, #0]
   b79d6:	8085      	strh	r5, [r0, #4]
   b79d8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b79da:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b79dc:	bd30      	pop	{r4, r5, pc}

000b79de <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b79de:	b510      	push	{r4, lr}
   b79e0:	4604      	mov	r4, r0
    free((void*)msg_);
   b79e2:	6800      	ldr	r0, [r0, #0]
   b79e4:	f7ff fe14 	bl	b7610 <free>
}
   b79e8:	4620      	mov	r0, r4
   b79ea:	bd10      	pop	{r4, pc}

000b79ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b79ec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b79ee:	68c4      	ldr	r4, [r0, #12]
   b79f0:	b1f4      	cbz	r4, b7a30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b79f2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b79f4:	2b02      	cmp	r3, #2
   b79f6:	d103      	bne.n	b7a00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b79f8:	f104 000c 	add.w	r0, r4, #12
   b79fc:	f7ff ffef 	bl	b79de <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7a00:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7a02:	b135      	cbz	r5, b7a12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7a04:	4628      	mov	r0, r5
   b7a06:	f7fd fe7b 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
   b7a0a:	2110      	movs	r1, #16
   b7a0c:	4628      	mov	r0, r5
   b7a0e:	f7fc fb46 	bl	b409e <_ZdlPvj>
   b7a12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7a14:	b135      	cbz	r5, b7a24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7a16:	4628      	mov	r0, r5
   b7a18:	f7fd fe72 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
   b7a1c:	2110      	movs	r1, #16
   b7a1e:	4628      	mov	r0, r5
   b7a20:	f7fc fb3d 	bl	b409e <_ZdlPvj>
   b7a24:	4620      	mov	r0, r4
   b7a26:	2114      	movs	r1, #20
   b7a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a2c:	f7fc bb37 	b.w	b409e <_ZdlPvj>
   b7a30:	bd38      	pop	{r3, r4, r5, pc}

000b7a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7a32:	680b      	ldr	r3, [r1, #0]
   b7a34:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7a36:	684b      	ldr	r3, [r1, #4]
   b7a38:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7a3a:	b113      	cbz	r3, b7a42 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7a3c:	685a      	ldr	r2, [r3, #4]
   b7a3e:	3201      	adds	r2, #1
   b7a40:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7a42:	4770      	bx	lr

000b7a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a46:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a48:	4668      	mov	r0, sp
   b7a4a:	460d      	mov	r5, r1
   b7a4c:	f7ff fff1 	bl	b7a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7a50:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7a52:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7a54:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7a56:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7a58:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7a5a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7a5c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7a5e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7a60:	f7ff fe63 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7a64:	b135      	cbz	r5, b7a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7a66:	1d28      	adds	r0, r5, #4
   b7a68:	f7ff fe5f 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a6c:	2108      	movs	r1, #8
   b7a6e:	4628      	mov	r0, r5
   b7a70:	f7fc fb15 	bl	b409e <_ZdlPvj>
        return p;
    }
   b7a74:	4620      	mov	r0, r4
   b7a76:	b003      	add	sp, #12
   b7a78:	bd30      	pop	{r4, r5, pc}

000b7a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7a7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7a7c:	b510      	push	{r4, lr}
      if (_M_empty())
   b7a7e:	b90a      	cbnz	r2, b7a84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7a80:	f003 fa35 	bl	baeee <_ZSt25__throw_bad_function_callv>
    }
   b7a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7a88:	68c3      	ldr	r3, [r0, #12]
   b7a8a:	4718      	bx	r3

000b7a8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7a8c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7a8e:	6800      	ldr	r0, [r0, #0]
   b7a90:	f100 0110 	add.w	r1, r0, #16
   b7a94:	f7ff fff1 	bl	b7a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7a98:	bd08      	pop	{r3, pc}

000b7a9a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7a9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7a9c:	b510      	push	{r4, lr}
      if (_M_empty())
   b7a9e:	b90a      	cbnz	r2, b7aa4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7aa0:	f003 fa25 	bl	baeee <_ZSt25__throw_bad_function_callv>
    }
   b7aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7aa8:	68c3      	ldr	r3, [r0, #12]
   b7aaa:	4718      	bx	r3

000b7aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7aac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7aae:	6800      	ldr	r0, [r0, #0]
   b7ab0:	f100 0110 	add.w	r1, r0, #16
   b7ab4:	f7ff fff1 	bl	b7a9a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7ab8:	bd08      	pop	{r3, pc}
	...

000b7abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7abc:	b538      	push	{r3, r4, r5, lr}
   b7abe:	2300      	movs	r3, #0
   b7ac0:	4604      	mov	r4, r0
   b7ac2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ac4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7ac6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ac8:	f7fc fae5 	bl	b4096 <_Znwj>
   b7acc:	b128      	cbz	r0, b7ada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ace:	2301      	movs	r3, #1
   b7ad0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7ad4:	4b02      	ldr	r3, [pc, #8]	; (b7ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7ad6:	6003      	str	r3, [r0, #0]
   b7ad8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ada:	6020      	str	r0, [r4, #0]
	}
   b7adc:	4620      	mov	r0, r4
   b7ade:	bd38      	pop	{r3, r4, r5, pc}
   b7ae0:	000be530 	.word	0x000be530

000b7ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7ae4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7ae6:	2300      	movs	r3, #0
   b7ae8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7aea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7aec:	4604      	mov	r4, r0
   b7aee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7af0:	b12b      	cbz	r3, b7afe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7af2:	2202      	movs	r2, #2
   b7af4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7af6:	68eb      	ldr	r3, [r5, #12]
   b7af8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7afa:	68ab      	ldr	r3, [r5, #8]
   b7afc:	60a3      	str	r3, [r4, #8]
    }
   b7afe:	4620      	mov	r0, r4
   b7b00:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7b06:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7b08:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7b0a:	4668      	mov	r0, sp
   b7b0c:	f7ff ff5a 	bl	b79c4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7b10:	f04f 0302 	mov.w	r3, #2
   b7b14:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7b18:	2a00      	cmp	r2, #0
   b7b1a:	d103      	bne.n	b7b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7b1c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7b20:	2900      	cmp	r1, #0
   b7b22:	d1f7      	bne.n	b7b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7b24:	d125      	bne.n	b7b72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7b26:	f104 050c 	add.w	r5, r4, #12
   b7b2a:	4669      	mov	r1, sp
   b7b2c:	4628      	mov	r0, r5
   b7b2e:	f7ff ff49 	bl	b79c4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7b32:	f3bf 8f5b 	dmb	ish
   b7b36:	2301      	movs	r3, #1
   b7b38:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7b3a:	2000      	movs	r0, #0
   b7b3c:	f104 0308 	add.w	r3, r4, #8
   b7b40:	f3bf 8f5b 	dmb	ish
   b7b44:	e853 6f00 	ldrex	r6, [r3]
   b7b48:	e843 0200 	strex	r2, r0, [r3]
   b7b4c:	2a00      	cmp	r2, #0
   b7b4e:	d1f9      	bne.n	b7b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7b50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7b54:	b16e      	cbz	r6, b7b72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7b56:	f7ff fc9f 	bl	b7498 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7b5a:	b178      	cbz	r0, b7b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7b5c:	4629      	mov	r1, r5
   b7b5e:	4630      	mov	r0, r6
   b7b60:	f7ff ff8b 	bl	b7a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7b64:	4630      	mov	r0, r6
   b7b66:	f7fd fdcb 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7b6a:	2110      	movs	r1, #16
   b7b6c:	4630      	mov	r0, r6
   b7b6e:	f7fc fa96 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b7b72:	4668      	mov	r0, sp
   b7b74:	f7ff ff33 	bl	b79de <_ZN8particle5ErrorD1Ev>
    }
   b7b78:	b009      	add	sp, #36	; 0x24
   b7b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7b7c:	4631      	mov	r1, r6
   b7b7e:	a802      	add	r0, sp, #8
   b7b80:	f7ff ffb0 	bl	b7ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7b84:	68e0      	ldr	r0, [r4, #12]
   b7b86:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7b8a:	b108      	cbz	r0, b7b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7b8c:	f004 f88c 	bl	bbca8 <strdup>
        type_(type) {
   b7b90:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7b92:	2010      	movs	r0, #16
   b7b94:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7b98:	f7fc fa7d 	bl	b4096 <_Znwj>
   b7b9c:	4605      	mov	r5, r0
   b7b9e:	b1e8      	cbz	r0, b7bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7ba0:	2700      	movs	r7, #0
   b7ba2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7ba4:	2018      	movs	r0, #24
   b7ba6:	f7fc fa76 	bl	b4096 <_Znwj>
   b7baa:	4604      	mov	r4, r0
   b7bac:	b188      	cbz	r0, b7bd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7bae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7bb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7bb2:	a802      	add	r0, sp, #8
   b7bb4:	f7ff fdc1 	bl	b773a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7bb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7bba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7bbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7bbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7bc0:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7bc2:	a906      	add	r1, sp, #24
   b7bc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7bc6:	60e3      	str	r3, [r4, #12]
   b7bc8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7bcc:	9205      	str	r2, [sp, #20]
   b7bce:	f7ff fef9 	bl	b79c4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7bd2:	4b08      	ldr	r3, [pc, #32]	; (b7bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7bd4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7bd6:	4b08      	ldr	r3, [pc, #32]	; (b7bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7bd8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7bda:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7bdc:	a806      	add	r0, sp, #24
   b7bde:	f7ff fefe 	bl	b79de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7be2:	a802      	add	r0, sp, #8
   b7be4:	f7fd fd8c 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7be8:	2200      	movs	r2, #0
   b7bea:	4629      	mov	r1, r5
   b7bec:	4803      	ldr	r0, [pc, #12]	; (b7bfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7bee:	f7ff fc5b 	bl	b74a8 <application_thread_invoke>
   b7bf2:	e7b7      	b.n	b7b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7bf4:	000b7a8d 	.word	0x000b7a8d
   b7bf8:	000b7d11 	.word	0x000b7d11
   b7bfc:	000b76b7 	.word	0x000b76b7

000b7c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c04:	b08b      	sub	sp, #44	; 0x2c
   b7c06:	4605      	mov	r5, r0
   b7c08:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7c0c:	460f      	mov	r7, r1
   b7c0e:	4690      	mov	r8, r2
   b7c10:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7c12:	f7ff fc75 	bl	b7500 <spark_cloud_flag_connected>
   b7c16:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7c18:	4683      	mov	fp, r0
   b7c1a:	bb38      	cbnz	r0, b7c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7c1c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7c20:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7c22:	a905      	add	r1, sp, #20
   b7c24:	4630      	mov	r0, r6
   b7c26:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7c2a:	f7ff fecb 	bl	b79c4 <_ZN8particle5ErrorC1EOS0_>
   b7c2e:	2014      	movs	r0, #20
   b7c30:	f7fc fa31 	bl	b4096 <_Znwj>
   b7c34:	4604      	mov	r4, r0
   b7c36:	b148      	cbz	r0, b7c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7c38:	2302      	movs	r3, #2
   b7c3a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7c3c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7c3e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7c42:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7c44:	4631      	mov	r1, r6
   b7c46:	300c      	adds	r0, #12
   b7c48:	f7ff febc 	bl	b79c4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7c4c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7c4e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7c50:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7c54:	f7ff ff32 	bl	b7abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7c58:	4630      	mov	r0, r6
   b7c5a:	f7ff fec0 	bl	b79de <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7c5e:	a805      	add	r0, sp, #20
   b7c60:	f7ff febd 	bl	b79de <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7c64:	4628      	mov	r0, r5
   b7c66:	b00b      	add	sp, #44	; 0x2c
   b7c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7c6c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7c6e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7c70:	2014      	movs	r0, #20
   b7c72:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7c76:	9307      	str	r3, [sp, #28]
   b7c78:	f7fc fa0d 	bl	b4096 <_Znwj>
   b7c7c:	4601      	mov	r1, r0
   b7c7e:	b118      	cbz	r0, b7c88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7c84:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7c86:	7044      	strb	r4, [r0, #1]
   b7c88:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7c8a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7c8c:	f7ff ff16 	bl	b7abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7c90:	4b1e      	ldr	r3, [pc, #120]	; (b7d0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7c92:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7c94:	2008      	movs	r0, #8
   b7c96:	f7fc f9fe 	bl	b4096 <_Znwj>
   b7c9a:	4604      	mov	r4, r0
   b7c9c:	b110      	cbz	r0, b7ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7c9e:	a903      	add	r1, sp, #12
   b7ca0:	f7ff fec7 	bl	b7a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7ca4:	9600      	str	r6, [sp, #0]
   b7ca6:	fa5f f38a 	uxtb.w	r3, sl
   b7caa:	464a      	mov	r2, r9
   b7cac:	4641      	mov	r1, r8
   b7cae:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7cb0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7cb2:	f7ff fc35 	bl	b7520 <spark_send_event>
   b7cb6:	b9b8      	cbnz	r0, b7ce8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7cb8:	9b03      	ldr	r3, [sp, #12]
   b7cba:	785b      	ldrb	r3, [r3, #1]
   b7cbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7cc0:	b993      	cbnz	r3, b7ce8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7cc2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7cc6:	a905      	add	r1, sp, #20
   b7cc8:	a803      	add	r0, sp, #12
   b7cca:	9205      	str	r2, [sp, #20]
   b7ccc:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7cd0:	f7ff ff18 	bl	b7b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7cd4:	a805      	add	r0, sp, #20
   b7cd6:	f7ff fe82 	bl	b79de <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7cda:	a805      	add	r0, sp, #20
   b7cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7cde:	f7ff feb1 	bl	b7a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7ce2:	a806      	add	r0, sp, #24
   b7ce4:	f7ff fd21 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ce8:	a903      	add	r1, sp, #12
   b7cea:	a805      	add	r0, sp, #20
   b7cec:	f7ff fea1 	bl	b7a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7cf0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7cf2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7cf4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b7cf6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7cf8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7cfa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b7cfc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b7cfe:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7d00:	f7ff fd13 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d04:	a804      	add	r0, sp, #16
   b7d06:	f7ff fd10 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b7d0a:	e7ab      	b.n	b7c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b7d0c:	000b7d8d 	.word	0x000b7d8d

000b7d10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7d10:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d14:	4605      	mov	r5, r0
	switch (__op)
   b7d16:	d103      	bne.n	b7d20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7d18:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7d1a:	6003      	str	r3, [r0, #0]
      }
   b7d1c:	2000      	movs	r0, #0
   b7d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7d20:	2a02      	cmp	r2, #2
   b7d22:	d010      	beq.n	b7d46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7d24:	2a03      	cmp	r2, #3
   b7d26:	d1f9      	bne.n	b7d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7d28:	6804      	ldr	r4, [r0, #0]
   b7d2a:	2c00      	cmp	r4, #0
   b7d2c:	d0f6      	beq.n	b7d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b7d2e:	f104 0010 	add.w	r0, r4, #16
   b7d32:	f7ff fe54 	bl	b79de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7d36:	4620      	mov	r0, r4
   b7d38:	f7fd fce2 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7d3c:	2118      	movs	r1, #24
   b7d3e:	4620      	mov	r0, r4
   b7d40:	f7fc f9ad 	bl	b409e <_ZdlPvj>
   b7d44:	e7ea      	b.n	b7d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d46:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7d48:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d4a:	f7fc f9a4 	bl	b4096 <_Znwj>
   b7d4e:	4604      	mov	r4, r0
   b7d50:	b150      	cbz	r0, b7d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b7d52:	4631      	mov	r1, r6
   b7d54:	f7ff fec6 	bl	b7ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7d58:	6930      	ldr	r0, [r6, #16]
   b7d5a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7d5e:	b108      	cbz	r0, b7d64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7d60:	f003 ffa2 	bl	bbca8 <strdup>
        type_(type) {
   b7d64:	6120      	str	r0, [r4, #16]
   b7d66:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7d68:	602c      	str	r4, [r5, #0]
	}
   b7d6a:	e7d7      	b.n	b7d1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7d6c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7d6c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7d6e:	2300      	movs	r3, #0
   b7d70:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7d72:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7d74:	4604      	mov	r4, r0
   b7d76:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7d78:	b12b      	cbz	r3, b7d86 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7d7a:	2202      	movs	r2, #2
   b7d7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7d7e:	68eb      	ldr	r3, [r5, #12]
   b7d80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7d82:	68ab      	ldr	r3, [r5, #8]
   b7d84:	60a3      	str	r3, [r4, #8]
    }
   b7d86:	4620      	mov	r0, r4
   b7d88:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7d8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d8e:	b089      	sub	sp, #36	; 0x24
   b7d90:	4604      	mov	r4, r0
   b7d92:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7d94:	a801      	add	r0, sp, #4
   b7d96:	4611      	mov	r1, r2
   b7d98:	f7ff fe54 	bl	b7a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7d9c:	b1a4      	cbz	r4, b7dc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7d9e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7da0:	b11d      	cbz	r5, b7daa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7da2:	4628      	mov	r0, r5
   b7da4:	f003 ff80 	bl	bbca8 <strdup>
   b7da8:	4605      	mov	r5, r0
   b7daa:	a801      	add	r0, sp, #4
   b7dac:	a903      	add	r1, sp, #12
        type_(type) {
   b7dae:	9503      	str	r5, [sp, #12]
   b7db0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7db4:	f7ff fea6 	bl	b7b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7db8:	a803      	add	r0, sp, #12
   b7dba:	f7ff fe10 	bl	b79de <_ZN8particle5ErrorD1Ev>
   b7dbe:	a802      	add	r0, sp, #8
   b7dc0:	f7ff fcb3 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7dc4:	b009      	add	sp, #36	; 0x24
   b7dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7dc8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7dca:	2301      	movs	r3, #1
   b7dcc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7dd0:	2a00      	cmp	r2, #0
   b7dd2:	d103      	bne.n	b7ddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7dd4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7dd8:	2900      	cmp	r1, #0
   b7dda:	d1f7      	bne.n	b7dcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7ddc:	d1ef      	bne.n	b7dbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7dde:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7de0:	f3bf 8f5b 	dmb	ish
   b7de4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7de6:	1d2b      	adds	r3, r5, #4
   b7de8:	f3bf 8f5b 	dmb	ish
   b7dec:	e853 6f00 	ldrex	r6, [r3]
   b7df0:	e843 4200 	strex	r2, r4, [r3]
   b7df4:	2a00      	cmp	r2, #0
   b7df6:	d1f9      	bne.n	b7dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7df8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7dfc:	2e00      	cmp	r6, #0
   b7dfe:	d0de      	beq.n	b7dbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7e00:	4620      	mov	r0, r4
   b7e02:	f7ff fb49 	bl	b7498 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7e06:	4607      	mov	r7, r0
   b7e08:	b160      	cbz	r0, b7e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7e0a:	f105 010c 	add.w	r1, r5, #12
   b7e0e:	4630      	mov	r0, r6
   b7e10:	f7ff fe43 	bl	b7a9a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b7e14:	4630      	mov	r0, r6
   b7e16:	f7fd fc73 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7e1a:	2110      	movs	r1, #16
   b7e1c:	4630      	mov	r0, r6
   b7e1e:	f7fc f93e 	bl	b409e <_ZdlPvj>
   b7e22:	e7cc      	b.n	b7dbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7e24:	4631      	mov	r1, r6
   b7e26:	a803      	add	r0, sp, #12
   b7e28:	f7ff ffa0 	bl	b7d6c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7e2c:	7b2b      	ldrb	r3, [r5, #12]
   b7e2e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7e32:	2010      	movs	r0, #16
   b7e34:	f7fc f92f 	bl	b4096 <_Znwj>
   b7e38:	4605      	mov	r5, r0
   b7e3a:	b1d0      	cbz	r0, b7e72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7e3c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7e3e:	2014      	movs	r0, #20
   b7e40:	f7fc f929 	bl	b4096 <_Znwj>
   b7e44:	4604      	mov	r4, r0
   b7e46:	b178      	cbz	r0, b7e68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7e48:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7e4a:	4601      	mov	r1, r0
   b7e4c:	a803      	add	r0, sp, #12
   b7e4e:	f7ff fc74 	bl	b773a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e52:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7e54:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e56:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e58:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7e5a:	9205      	str	r2, [sp, #20]
   b7e5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e5e:	60e3      	str	r3, [r4, #12]
   b7e60:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7e64:	9206      	str	r2, [sp, #24]
   b7e66:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7e68:	4b06      	ldr	r3, [pc, #24]	; (b7e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7e6a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7e6c:	4b06      	ldr	r3, [pc, #24]	; (b7e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7e6e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7e70:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7e72:	a803      	add	r0, sp, #12
   b7e74:	f7fd fc44 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7e78:	2200      	movs	r2, #0
   b7e7a:	4629      	mov	r1, r5
   b7e7c:	4803      	ldr	r0, [pc, #12]	; (b7e8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7e7e:	f7ff fb13 	bl	b74a8 <application_thread_invoke>
   b7e82:	e7c7      	b.n	b7e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7e84:	000b7aad 	.word	0x000b7aad
   b7e88:	000b7e91 	.word	0x000b7e91
   b7e8c:	000b76b7 	.word	0x000b76b7

000b7e90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7e90:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7e92:	b570      	push	{r4, r5, r6, lr}
   b7e94:	4604      	mov	r4, r0
	switch (__op)
   b7e96:	d103      	bne.n	b7ea0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7e98:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7e9a:	6003      	str	r3, [r0, #0]
      }
   b7e9c:	2000      	movs	r0, #0
   b7e9e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7ea0:	2a02      	cmp	r2, #2
   b7ea2:	d00c      	beq.n	b7ebe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7ea4:	2a03      	cmp	r2, #3
   b7ea6:	d1f9      	bne.n	b7e9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7ea8:	6804      	ldr	r4, [r0, #0]
   b7eaa:	2c00      	cmp	r4, #0
   b7eac:	d0f6      	beq.n	b7e9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7eae:	4620      	mov	r0, r4
   b7eb0:	f7fd fc26 	bl	b5700 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7eb4:	2114      	movs	r1, #20
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	f7fc f8f1 	bl	b409e <_ZdlPvj>
   b7ebc:	e7ee      	b.n	b7e9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7ebe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7ec0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7ec2:	f7fc f8e8 	bl	b4096 <_Znwj>
   b7ec6:	4605      	mov	r5, r0
   b7ec8:	b120      	cbz	r0, b7ed4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7eca:	4631      	mov	r1, r6
   b7ecc:	f7ff ff4e 	bl	b7d6c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7ed0:	7c33      	ldrb	r3, [r6, #16]
   b7ed2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7ed4:	6025      	str	r5, [r4, #0]
	}
   b7ed6:	e7e1      	b.n	b7e9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7ed8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ed8:	2200      	movs	r2, #0
   b7eda:	6840      	ldr	r0, [r0, #4]
   b7edc:	4611      	mov	r1, r2
   b7ede:	f7ff bb67 	b.w	b75b0 <network_listening>

000b7ee2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	6840      	ldr	r0, [r0, #4]
   b7ee6:	4611      	mov	r1, r2
   b7ee8:	f7ff bb72 	b.w	b75d0 <network_get_listen_timeout>

000b7eec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7eec:	6840      	ldr	r0, [r0, #4]
   b7eee:	2200      	movs	r2, #0
   b7ef0:	f7ff bb66 	b.w	b75c0 <network_set_listen_timeout>

000b7ef4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ef4:	6840      	ldr	r0, [r0, #4]
   b7ef6:	2200      	movs	r2, #0
   b7ef8:	f081 0101 	eor.w	r1, r1, #1
   b7efc:	f7ff bb50 	b.w	b75a0 <network_listen>

000b7f00 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7f00:	2300      	movs	r3, #0
   b7f02:	6840      	ldr	r0, [r0, #4]
   b7f04:	461a      	mov	r2, r3
   b7f06:	4619      	mov	r1, r3
   b7f08:	f7ff bb42 	b.w	b7590 <network_off>

000b7f0c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7f0c:	2300      	movs	r3, #0
   b7f0e:	6840      	ldr	r0, [r0, #4]
   b7f10:	461a      	mov	r2, r3
   b7f12:	4619      	mov	r1, r3
   b7f14:	f7ff bb34 	b.w	b7580 <network_on>

000b7f18 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7f18:	2200      	movs	r2, #0
   b7f1a:	6840      	ldr	r0, [r0, #4]
   b7f1c:	4611      	mov	r1, r2
   b7f1e:	f7ff bb27 	b.w	b7570 <network_ready>

000b7f22 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f22:	2200      	movs	r2, #0
   b7f24:	6840      	ldr	r0, [r0, #4]
   b7f26:	4611      	mov	r1, r2
   b7f28:	f7ff bb12 	b.w	b7550 <network_connecting>

000b7f2c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f2c:	6840      	ldr	r0, [r0, #4]
   b7f2e:	2200      	movs	r2, #0
   b7f30:	2102      	movs	r1, #2
   b7f32:	f7ff bb15 	b.w	b7560 <network_disconnect>

000b7f36 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f36:	2300      	movs	r3, #0
   b7f38:	6840      	ldr	r0, [r0, #4]
   b7f3a:	461a      	mov	r2, r3
   b7f3c:	f7ff bb00 	b.w	b7540 <network_connect>

000b7f40 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7f40:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7f42:	2203      	movs	r2, #3
   b7f44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7f46:	4a02      	ldr	r2, [pc, #8]	; (b7f50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7f48:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7f4a:	4770      	bx	lr
   b7f4c:	2003e688 	.word	0x2003e688
   b7f50:	000be54c 	.word	0x000be54c

000b7f54 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7f54:	0909      	lsrs	r1, r1, #4
   b7f56:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b7f5a:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b7f5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; b7f6c <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b7f66:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7f6a:	4770      	bx	lr
   b7f6c:	44480000 	.word	0x44480000

000b7f70 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b7f70:	6800      	ldr	r0, [r0, #0]
   b7f72:	f000 b904 	b.w	b817e <_ZN7TwoWire4lockEv>

000b7f76 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b7f76:	b510      	push	{r4, lr}
   b7f78:	4604      	mov	r4, r0
      lock_(_lock) {
   b7f7a:	6001      	str	r1, [r0, #0]
   b7f7c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b7f7e:	b10a      	cbz	r2, b7f84 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b7f80:	f7ff fff6 	bl	b7f70 <_ZN9FuelGauge4lockEv>
}
   b7f84:	4620      	mov	r0, r4
   b7f86:	bd10      	pop	{r4, pc}

000b7f88 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b7f88:	b513      	push	{r0, r1, r4, lr}
   b7f8a:	4604      	mov	r4, r0
   b7f8c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b7f8e:	f002 fe93 	bl	bacb8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b7f92:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b7f94:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b7f96:	4620      	mov	r0, r4
   b7f98:	f7ff ffed 	bl	b7f76 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b7f9c:	4620      	mov	r0, r4
   b7f9e:	b002      	add	sp, #8
   b7fa0:	bd10      	pop	{r4, pc}

000b7fa2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b7fa2:	6800      	ldr	r0, [r0, #0]
   b7fa4:	f000 b8f4 	b.w	b8190 <_ZN7TwoWire6unlockEv>

000b7fa8 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b7fa8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7fac:	4604      	mov	r4, r0
   b7fae:	460d      	mov	r5, r1
   b7fb0:	4617      	mov	r7, r2
   b7fb2:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b7fb4:	f7ff ffdc 	bl	b7f70 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7fb8:	2236      	movs	r2, #54	; 0x36
   b7fba:	2300      	movs	r3, #0
   b7fbc:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b7fc0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b7fc2:	230a      	movs	r3, #10
   b7fc4:	f04f 0801 	mov.w	r8, #1
   b7fc8:	4669      	mov	r1, sp
   b7fca:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b7fce:	f000 f8b7 	bl	b8140 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b7fd2:	6820      	ldr	r0, [r4, #0]
   b7fd4:	6803      	ldr	r3, [r0, #0]
   b7fd6:	4629      	mov	r1, r5
   b7fd8:	689b      	ldr	r3, [r3, #8]
   b7fda:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b7fdc:	6820      	ldr	r0, [r4, #0]
   b7fde:	4641      	mov	r1, r8
   b7fe0:	f000 f8c6 	bl	b8170 <_ZN7TwoWire15endTransmissionEh>
   b7fe4:	4605      	mov	r5, r0
   b7fe6:	b140      	cbz	r0, b7ffa <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b7fe8:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b7fec:	4620      	mov	r0, r4
   b7fee:	f7ff ffd8 	bl	b7fa2 <_ZN9FuelGauge6unlockEv>
}
   b7ff2:	4628      	mov	r0, r5
   b7ff4:	b004      	add	sp, #16
   b7ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b7ffa:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b7ffc:	6820      	ldr	r0, [r4, #0]
   b7ffe:	9301      	str	r3, [sp, #4]
   b8000:	4669      	mov	r1, sp
   b8002:	f000 f86d 	bl	b80e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b8006:	2802      	cmp	r0, #2
   b8008:	d1ee      	bne.n	b7fe8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b800a:	6820      	ldr	r0, [r4, #0]
   b800c:	6803      	ldr	r3, [r0, #0]
   b800e:	695b      	ldr	r3, [r3, #20]
   b8010:	4798      	blx	r3
   b8012:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b8014:	6820      	ldr	r0, [r4, #0]
   b8016:	6803      	ldr	r3, [r0, #0]
   b8018:	695b      	ldr	r3, [r3, #20]
   b801a:	4798      	blx	r3
   b801c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b801e:	e7e5      	b.n	b7fec <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b8020 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b8020:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b8022:	2300      	movs	r3, #0
   b8024:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b8028:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b802c:	f10d 0206 	add.w	r2, sp, #6
   b8030:	f10d 0307 	add.w	r3, sp, #7
   b8034:	2102      	movs	r1, #2
   b8036:	f7ff ffb7 	bl	b7fa8 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b803a:	b940      	cbnz	r0, b804e <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b803c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b8040:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b8044:	b003      	add	sp, #12
   b8046:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b804a:	f7ff bf83 	b.w	b7f54 <_ZN8particle6detail9_getVCellEhh>
}
   b804e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b8052:	b003      	add	sp, #12
   b8054:	f85d fb04 	ldr.w	pc, [sp], #4

000b8058 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8058:	4770      	bx	lr

000b805a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b805a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b805c:	4606      	mov	r6, r0
   b805e:	4615      	mov	r5, r2
   b8060:	460c      	mov	r4, r1
   b8062:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8064:	42bc      	cmp	r4, r7
   b8066:	d006      	beq.n	b8076 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8068:	6833      	ldr	r3, [r6, #0]
   b806a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b806e:	689b      	ldr	r3, [r3, #8]
   b8070:	4630      	mov	r0, r6
   b8072:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8074:	e7f6      	b.n	b8064 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8076:	4628      	mov	r0, r5
   b8078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b807a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b807a:	7c00      	ldrb	r0, [r0, #16]
   b807c:	2200      	movs	r2, #0
   b807e:	f7ff b829 	b.w	b70d4 <hal_i2c_write>

000b8082 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8082:	7c00      	ldrb	r0, [r0, #16]
   b8084:	2100      	movs	r1, #0
   b8086:	f7ff b82d 	b.w	b70e4 <hal_i2c_available>

000b808a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b808a:	7c00      	ldrb	r0, [r0, #16]
   b808c:	2100      	movs	r1, #0
   b808e:	f7ff b831 	b.w	b70f4 <hal_i2c_read>

000b8092 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8092:	7c00      	ldrb	r0, [r0, #16]
   b8094:	2100      	movs	r1, #0
   b8096:	f7ff b835 	b.w	b7104 <hal_i2c_peek>

000b809a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b809a:	7c00      	ldrb	r0, [r0, #16]
   b809c:	2100      	movs	r1, #0
   b809e:	f7ff b839 	b.w	b7114 <hal_i2c_flush>

000b80a2 <_ZN7TwoWireD0Ev>:
   b80a2:	b510      	push	{r4, lr}
   b80a4:	2114      	movs	r1, #20
   b80a6:	4604      	mov	r4, r0
   b80a8:	f7fb fff9 	bl	b409e <_ZdlPvj>
   b80ac:	4620      	mov	r0, r4
   b80ae:	bd10      	pop	{r4, pc}

000b80b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b80b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b80b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b80b6:	4604      	mov	r4, r0
   b80b8:	4608      	mov	r0, r1
   b80ba:	2100      	movs	r1, #0
   b80bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b80c0:	4b03      	ldr	r3, [pc, #12]	; (b80d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b80c2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b80c4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b80c6:	4611      	mov	r1, r2
   b80c8:	f7ff f834 	bl	b7134 <hal_i2c_init>
}
   b80cc:	4620      	mov	r0, r4
   b80ce:	bd10      	pop	{r4, pc}
   b80d0:	000be588 	.word	0x000be588

000b80d4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b80d4:	2300      	movs	r3, #0
   b80d6:	7c00      	ldrb	r0, [r0, #16]
   b80d8:	461a      	mov	r2, r3
   b80da:	4619      	mov	r1, r3
   b80dc:	f7fe bfe2 	b.w	b70a4 <hal_i2c_begin>

000b80e0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b80e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b80e2:	2200      	movs	r2, #0
   b80e4:	2314      	movs	r3, #20
   b80e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b80ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b80ee:	780b      	ldrb	r3, [r1, #0]
   b80f0:	f88d 3008 	strb.w	r3, [sp, #8]
   b80f4:	684b      	ldr	r3, [r1, #4]
   b80f6:	9303      	str	r3, [sp, #12]
   b80f8:	68cb      	ldr	r3, [r1, #12]
   b80fa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b80fc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b80fe:	7a0b      	ldrb	r3, [r1, #8]
   b8100:	9305      	str	r3, [sp, #20]
   b8102:	a901      	add	r1, sp, #4
   b8104:	f7ff f82e 	bl	b7164 <hal_i2c_request_ex>
}
   b8108:	b007      	add	sp, #28
   b810a:	f85d fb04 	ldr.w	pc, [sp], #4

000b810e <_ZN7TwoWire11requestFromEhjh>:
{
   b810e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8110:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8112:	f88d 1000 	strb.w	r1, [sp]
   b8116:	f04f 0164 	mov.w	r1, #100	; 0x64
   b811a:	9103      	str	r1, [sp, #12]
   b811c:	bf18      	it	ne
   b811e:	2301      	movne	r3, #1
   b8120:	4669      	mov	r1, sp
    size_ = size;
   b8122:	9201      	str	r2, [sp, #4]
   b8124:	f88d 3008 	strb.w	r3, [sp, #8]
   b8128:	f7ff ffda 	bl	b80e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b812c:	b005      	add	sp, #20
   b812e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8132 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8132:	2301      	movs	r3, #1
   b8134:	f7ff bfeb 	b.w	b810e <_ZN7TwoWire11requestFromEhjh>

000b8138 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8138:	7c00      	ldrb	r0, [r0, #16]
   b813a:	2200      	movs	r2, #0
   b813c:	f7fe bfba 	b.w	b70b4 <hal_i2c_begin_transmission>

000b8140 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8142:	2300      	movs	r3, #0
   b8144:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8148:	684a      	ldr	r2, [r1, #4]
   b814a:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b814c:	2314      	movs	r3, #20
    };
   b814e:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8150:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8154:	780b      	ldrb	r3, [r1, #0]
    };
   b8156:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8158:	7a0a      	ldrb	r2, [r1, #8]
   b815a:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b815c:	7c00      	ldrb	r0, [r0, #16]
    };
   b815e:	f88d 3008 	strb.w	r3, [sp, #8]
   b8162:	aa01      	add	r2, sp, #4
   b8164:	4619      	mov	r1, r3
   b8166:	f7fe ffa5 	bl	b70b4 <hal_i2c_begin_transmission>
}
   b816a:	b007      	add	sp, #28
   b816c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8170 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8170:	7c00      	ldrb	r0, [r0, #16]
   b8172:	2200      	movs	r2, #0
   b8174:	f7fe bfa6 	b.w	b70c4 <hal_i2c_end_transmission>

000b8178 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8178:	2101      	movs	r1, #1
   b817a:	f7ff bff9 	b.w	b8170 <_ZN7TwoWire15endTransmissionEh>

000b817e <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b817e:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8180:	2100      	movs	r1, #0
   b8182:	7c00      	ldrb	r0, [r0, #16]
   b8184:	f7fe ffde 	bl	b7144 <hal_i2c_lock>
}
   b8188:	fab0 f080 	clz	r0, r0
   b818c:	0940      	lsrs	r0, r0, #5
   b818e:	bd08      	pop	{r3, pc}

000b8190 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8190:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8192:	2100      	movs	r1, #0
   b8194:	7c00      	ldrb	r0, [r0, #16]
   b8196:	f7fe ffdd 	bl	b7154 <hal_i2c_unlock>
}
   b819a:	fab0 f080 	clz	r0, r0
   b819e:	0940      	lsrs	r0, r0, #5
   b81a0:	bd08      	pop	{r3, pc}

000b81a2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b81a2:	4770      	bx	lr

000b81a4 <_ZN9IPAddressD0Ev>:
   b81a4:	b510      	push	{r4, lr}
   b81a6:	2118      	movs	r1, #24
   b81a8:	4604      	mov	r4, r0
   b81aa:	f7fb ff78 	bl	b409e <_ZdlPvj>
   b81ae:	4620      	mov	r0, r4
   b81b0:	bd10      	pop	{r4, pc}

000b81b2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b81b2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b81b4:	7d03      	ldrb	r3, [r0, #20]
   b81b6:	2b06      	cmp	r3, #6
{
   b81b8:	b08d      	sub	sp, #52	; 0x34
   b81ba:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b81bc:	f100 0704 	add.w	r7, r0, #4
   b81c0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b81c4:	d012      	beq.n	b81ec <_ZNK9IPAddress7printToER5Print+0x3a>
   b81c6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b81ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b81ce:	220a      	movs	r2, #10
   b81d0:	4630      	mov	r0, r6
   b81d2:	f001 fac4 	bl	b975e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b81d6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b81d8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b81da:	d019      	beq.n	b8210 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b81dc:	2c00      	cmp	r4, #0
   b81de:	d0f4      	beq.n	b81ca <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b81e0:	212e      	movs	r1, #46	; 0x2e
   b81e2:	4630      	mov	r0, r6
   b81e4:	f001 faa2 	bl	b972c <_ZN5Print5printEc>
   b81e8:	4404      	add	r4, r0
   b81ea:	e7ee      	b.n	b81ca <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b81ec:	232f      	movs	r3, #47	; 0x2f
   b81ee:	466a      	mov	r2, sp
   b81f0:	4639      	mov	r1, r7
   b81f2:	200a      	movs	r0, #10
		buf[0] = 0;
   b81f4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b81f8:	f7fe ffc4 	bl	b7184 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b81fc:	4668      	mov	r0, sp
   b81fe:	f003 fd70 	bl	bbce2 <strlen>
   b8202:	6833      	ldr	r3, [r6, #0]
   b8204:	4602      	mov	r2, r0
   b8206:	68db      	ldr	r3, [r3, #12]
   b8208:	4669      	mov	r1, sp
   b820a:	4630      	mov	r0, r6
   b820c:	4798      	blx	r3
   b820e:	4604      	mov	r4, r0
    }
    return n;
}
   b8210:	4620      	mov	r0, r4
   b8212:	b00d      	add	sp, #52	; 0x34
   b8214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8218 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8218:	b510      	push	{r4, lr}
   b821a:	4b05      	ldr	r3, [pc, #20]	; (b8230 <_ZN9IPAddressC1Ev+0x18>)
   b821c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b821e:	2211      	movs	r2, #17
   b8220:	f840 3b04 	str.w	r3, [r0], #4
   b8224:	2100      	movs	r1, #0
   b8226:	f003 fcdf 	bl	bbbe8 <memset>
}
   b822a:	4620      	mov	r0, r4
   b822c:	bd10      	pop	{r4, pc}
   b822e:	bf00      	nop
   b8230:	000be5b0 	.word	0x000be5b0

000b8234 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8234:	4603      	mov	r3, r0
   b8236:	4a07      	ldr	r2, [pc, #28]	; (b8254 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8238:	b510      	push	{r4, lr}
   b823a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b823e:	f101 0210 	add.w	r2, r1, #16
   b8242:	f851 4b04 	ldr.w	r4, [r1], #4
   b8246:	f843 4b04 	str.w	r4, [r3], #4
   b824a:	4291      	cmp	r1, r2
   b824c:	d1f9      	bne.n	b8242 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b824e:	780a      	ldrb	r2, [r1, #0]
   b8250:	701a      	strb	r2, [r3, #0]
}
   b8252:	bd10      	pop	{r4, pc}
   b8254:	000be5b0 	.word	0x000be5b0

000b8258 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8258:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b825a:	2b04      	cmp	r3, #4
   b825c:	d104      	bne.n	b8268 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b825e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8260:	3800      	subs	r0, #0
   b8262:	bf18      	it	ne
   b8264:	2001      	movne	r0, #1
   b8266:	4770      	bx	lr
    } else if (version() == 6) {
   b8268:	2b06      	cmp	r3, #6
   b826a:	d107      	bne.n	b827c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b826c:	6843      	ldr	r3, [r0, #4]
   b826e:	b93b      	cbnz	r3, b8280 <_ZNK9IPAddresscvbEv+0x28>
   b8270:	6883      	ldr	r3, [r0, #8]
   b8272:	b92b      	cbnz	r3, b8280 <_ZNK9IPAddresscvbEv+0x28>
   b8274:	68c3      	ldr	r3, [r0, #12]
   b8276:	b91b      	cbnz	r3, b8280 <_ZNK9IPAddresscvbEv+0x28>
   b8278:	6900      	ldr	r0, [r0, #16]
   b827a:	e7f1      	b.n	b8260 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b827c:	2000      	movs	r0, #0
   b827e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8280:	2001      	movs	r0, #1
}
   b8282:	4770      	bx	lr

000b8284 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8284:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8286:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b828a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b828e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8292:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8296:	2304      	movs	r3, #4
   b8298:	6041      	str	r1, [r0, #4]
   b829a:	7503      	strb	r3, [r0, #20]
}
   b829c:	bd10      	pop	{r4, pc}
	...

000b82a0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b82a0:	b513      	push	{r0, r1, r4, lr}
   b82a2:	4c04      	ldr	r4, [pc, #16]	; (b82b4 <_ZN9IPAddressC1Ehhhh+0x14>)
   b82a4:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b82a6:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b82aa:	9400      	str	r4, [sp, #0]
   b82ac:	f7ff ffea 	bl	b8284 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b82b0:	b002      	add	sp, #8
   b82b2:	bd10      	pop	{r4, pc}
   b82b4:	000be5b0 	.word	0x000be5b0

000b82b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b82b8:	b507      	push	{r0, r1, r2, lr}
   b82ba:	4b06      	ldr	r3, [pc, #24]	; (b82d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b82bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b82be:	78cb      	ldrb	r3, [r1, #3]
   b82c0:	9300      	str	r3, [sp, #0]
   b82c2:	788b      	ldrb	r3, [r1, #2]
   b82c4:	784a      	ldrb	r2, [r1, #1]
   b82c6:	7809      	ldrb	r1, [r1, #0]
   b82c8:	f7ff ffdc 	bl	b8284 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b82cc:	b003      	add	sp, #12
   b82ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b82d2:	bf00      	nop
   b82d4:	000be5b0 	.word	0x000be5b0

000b82d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b82d8:	f100 0310 	add.w	r3, r0, #16
   b82dc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b82de:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b82e2:	2901      	cmp	r1, #1
   b82e4:	4618      	mov	r0, r3
   b82e6:	d108      	bne.n	b82fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b82e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b82ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b82f0:	3a01      	subs	r2, #1
   b82f2:	f103 0310 	add.w	r3, r3, #16
   b82f6:	d1f2      	bne.n	b82de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b82f8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b82fa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b82fc:	bf04      	itt	eq
   b82fe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8302:	1852      	addeq	r2, r2, r1
   b8304:	e7f4      	b.n	b82f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8306 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8306:	b40e      	push	{r1, r2, r3}
   b8308:	b5f0      	push	{r4, r5, r6, r7, lr}
   b830a:	b088      	sub	sp, #32
   b830c:	af00      	add	r7, sp, #0
   b830e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8312:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8314:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8318:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b831a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b831c:	462b      	mov	r3, r5
   b831e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8320:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8322:	f7ff f995 	bl	b7650 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b8326:	280f      	cmp	r0, #15
   b8328:	687a      	ldr	r2, [r7, #4]
   b832a:	d91a      	bls.n	b8362 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b832c:	f100 0308 	add.w	r3, r0, #8
   b8330:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8334:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b8336:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b833a:	1c41      	adds	r1, r0, #1
   b833c:	462b      	mov	r3, r5
   b833e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8340:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8342:	f7ff f985 	bl	b7650 <vsnprintf>
        if (n > 0) {
   b8346:	1e02      	subs	r2, r0, #0
   b8348:	dd04      	ble.n	b8354 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b834a:	6823      	ldr	r3, [r4, #0]
   b834c:	4669      	mov	r1, sp
   b834e:	689b      	ldr	r3, [r3, #8]
   b8350:	4620      	mov	r0, r4
   b8352:	4798      	blx	r3
   b8354:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b8356:	3720      	adds	r7, #32
   b8358:	46bd      	mov	sp, r7
   b835a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b835e:	b003      	add	sp, #12
   b8360:	4770      	bx	lr
    } else if (n > 0) {
   b8362:	2800      	cmp	r0, #0
   b8364:	d0f7      	beq.n	b8356 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b8366:	6823      	ldr	r3, [r4, #0]
   b8368:	4602      	mov	r2, r0
   b836a:	689b      	ldr	r3, [r3, #8]
   b836c:	f107 0110 	add.w	r1, r7, #16
   b8370:	4620      	mov	r0, r4
   b8372:	4798      	blx	r3
}
   b8374:	e7ef      	b.n	b8356 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b8376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8376:	b538      	push	{r3, r4, r5, lr}
   b8378:	680b      	ldr	r3, [r1, #0]
   b837a:	6003      	str	r3, [r0, #0]
   b837c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b837e:	6843      	ldr	r3, [r0, #4]
   b8380:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8382:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b8384:	d008      	beq.n	b8398 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b8386:	b115      	cbz	r5, b838e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b8388:	686b      	ldr	r3, [r5, #4]
   b838a:	3301      	adds	r3, #1
   b838c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b838e:	6860      	ldr	r0, [r4, #4]
   b8390:	b108      	cbz	r0, b8396 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b8392:	f7ff f9a4 	bl	b76de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b8396:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8398:	bd38      	pop	{r3, r4, r5, pc}

000b839a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b839a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b839c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b839e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b83a2:	689b      	ldr	r3, [r3, #8]
   b83a4:	2201      	movs	r2, #1
   b83a6:	f10d 0107 	add.w	r1, sp, #7
   b83aa:	4798      	blx	r3
}
   b83ac:	b003      	add	sp, #12
   b83ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b83b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b83b2:	460b      	mov	r3, r1
   b83b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b83b6:	2200      	movs	r2, #0
   b83b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b83ba:	e9c0 2200 	strd	r2, r2, [r0]
   b83be:	4604      	mov	r4, r0
        t_ = t;
   b83c0:	6083      	str	r3, [r0, #8]
    if (t) {
   b83c2:	b90b      	cbnz	r3, b83c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b83c4:	4620      	mov	r0, r4
   b83c6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b83c8:	f7ff ffd5 	bl	b8376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b83cc:	e7fa      	b.n	b83c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b83ce <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b83ce:	6883      	ldr	r3, [r0, #8]
   b83d0:	b1eb      	cbz	r3, b840e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b83d2:	781a      	ldrb	r2, [r3, #0]
   b83d4:	2a03      	cmp	r2, #3
   b83d6:	d81a      	bhi.n	b840e <_ZNK5spark9JSONValue4typeEv+0x40>
   b83d8:	e8df f002 	tbb	[pc, r2]
   b83dc:	1b021704 	.word	0x1b021704
   b83e0:	2005      	movs	r0, #5
   b83e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b83e4:	6802      	ldr	r2, [r0, #0]
   b83e6:	685b      	ldr	r3, [r3, #4]
   b83e8:	6852      	ldr	r2, [r2, #4]
   b83ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b83ec:	282d      	cmp	r0, #45	; 0x2d
   b83ee:	d012      	beq.n	b8416 <_ZNK5spark9JSONValue4typeEv+0x48>
   b83f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b83f4:	2b09      	cmp	r3, #9
   b83f6:	d90e      	bls.n	b8416 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b83f8:	2874      	cmp	r0, #116	; 0x74
   b83fa:	d00e      	beq.n	b841a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b83fc:	2866      	cmp	r0, #102	; 0x66
   b83fe:	d00c      	beq.n	b841a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8400:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b8404:	4258      	negs	r0, r3
   b8406:	4158      	adcs	r0, r3
   b8408:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b840a:	2006      	movs	r0, #6
   b840c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b840e:	2000      	movs	r0, #0
   b8410:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b8412:	2004      	movs	r0, #4
   b8414:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b8416:	2003      	movs	r0, #3
   b8418:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b841a:	2002      	movs	r0, #2
}
   b841c:	4770      	bx	lr

000b841e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b841e:	b510      	push	{r4, lr}
   b8420:	4604      	mov	r4, r0
    switch (type()) {
   b8422:	f7ff ffd4 	bl	b83ce <_ZNK5spark9JSONValue4typeEv>
   b8426:	2802      	cmp	r0, #2
   b8428:	d00e      	beq.n	b8448 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b842a:	1ec3      	subs	r3, r0, #3
   b842c:	b2db      	uxtb	r3, r3
   b842e:	2b01      	cmp	r3, #1
   b8430:	d814      	bhi.n	b845c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b8432:	6822      	ldr	r2, [r4, #0]
   b8434:	68a3      	ldr	r3, [r4, #8]
   b8436:	6850      	ldr	r0, [r2, #4]
   b8438:	685b      	ldr	r3, [r3, #4]
}
   b843a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b843e:	220a      	movs	r2, #10
   b8440:	2100      	movs	r1, #0
   b8442:	4418      	add	r0, r3
   b8444:	f004 bbb4 	b.w	bcbb0 <strtol>
        const char* const s = d_->json + t_->start;
   b8448:	6822      	ldr	r2, [r4, #0]
   b844a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b844c:	6852      	ldr	r2, [r2, #4]
   b844e:	685b      	ldr	r3, [r3, #4]
   b8450:	5cd0      	ldrb	r0, [r2, r3]
   b8452:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b8456:	4258      	negs	r0, r3
   b8458:	4158      	adcs	r0, r3
}
   b845a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b845c:	2000      	movs	r0, #0
   b845e:	e7fc      	b.n	b845a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b8460 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8460:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8462:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b8464:	e9c0 3300 	strd	r3, r3, [r0]
   b8468:	4604      	mov	r4, r0
        n_(0) {
   b846a:	480e      	ldr	r0, [pc, #56]	; (b84a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b846c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b8470:	b1a9      	cbz	r1, b849e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b8472:	780b      	ldrb	r3, [r1, #0]
   b8474:	2b03      	cmp	r3, #3
   b8476:	d006      	beq.n	b8486 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b8478:	b98b      	cbnz	r3, b849e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b847a:	6813      	ldr	r3, [r2, #0]
   b847c:	6858      	ldr	r0, [r3, #4]
   b847e:	684b      	ldr	r3, [r1, #4]
   b8480:	5cc3      	ldrb	r3, [r0, r3]
   b8482:	2b6e      	cmp	r3, #110	; 0x6e
   b8484:	d007      	beq.n	b8496 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b8486:	6813      	ldr	r3, [r2, #0]
   b8488:	684d      	ldr	r5, [r1, #4]
   b848a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b848c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b848e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b8490:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b8492:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b8494:	60e3      	str	r3, [r4, #12]
   b8496:	4611      	mov	r1, r2
   b8498:	4620      	mov	r0, r4
   b849a:	f7ff ff6c 	bl	b8376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b849e:	4620      	mov	r0, r4
   b84a0:	bd38      	pop	{r3, r4, r5, pc}
   b84a2:	bf00      	nop
   b84a4:	000be18b 	.word	0x000be18b

000b84a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b84a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b84aa:	2500      	movs	r5, #0
   b84ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b84ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b84b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b84b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b84ba:	4604      	mov	r4, r0
   b84bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b84be:	b14b      	cbz	r3, b84d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b84c0:	781a      	ldrb	r2, [r3, #0]
   b84c2:	2a01      	cmp	r2, #1
   b84c4:	d106      	bne.n	b84d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b84c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b84ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b84cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b84ce:	6143      	str	r3, [r0, #20]
   b84d0:	f7ff ff51 	bl	b8376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b84d4:	4620      	mov	r0, r4
   b84d6:	bd38      	pop	{r3, r4, r5, pc}

000b84d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b84d8:	b510      	push	{r4, lr}
    if (!n_) {
   b84da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b84dc:	4604      	mov	r4, r0
    if (!n_) {
   b84de:	b163      	cbz	r3, b84fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b84e0:	6880      	ldr	r0, [r0, #8]
   b84e2:	60e0      	str	r0, [r4, #12]
    --n_;
   b84e4:	3b01      	subs	r3, #1
    ++t_;
   b84e6:	3010      	adds	r0, #16
   b84e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b84ea:	6120      	str	r0, [r4, #16]
    --n_;
   b84ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   b84ee:	b113      	cbz	r3, b84f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b84f0:	f7ff fef2 	bl	b82d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b84f4:	60a0      	str	r0, [r4, #8]
    return true;
   b84f6:	2001      	movs	r0, #1
   b84f8:	e000      	b.n	b84fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b84fa:	4618      	mov	r0, r3
}
   b84fc:	bd10      	pop	{r4, pc}

000b84fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b84fe:	b510      	push	{r4, lr}
    write('}');
   b8500:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8502:	4604      	mov	r4, r0
    write('}');
   b8504:	f7ff ff49 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b8508:	2301      	movs	r3, #1
   b850a:	7123      	strb	r3, [r4, #4]
}
   b850c:	4620      	mov	r0, r4
   b850e:	bd10      	pop	{r4, pc}

000b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8510:	b508      	push	{r3, lr}
    switch (state_) {
   b8512:	7903      	ldrb	r3, [r0, #4]
   b8514:	2b01      	cmp	r3, #1
   b8516:	d002      	beq.n	b851e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b8518:	2b02      	cmp	r3, #2
   b851a:	d004      	beq.n	b8526 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b851c:	bd08      	pop	{r3, pc}
        write(',');
   b851e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8520:	f7ff ff3b 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
}
   b8524:	e7fa      	b.n	b851c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8526:	213a      	movs	r1, #58	; 0x3a
   b8528:	e7fa      	b.n	b8520 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b852a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b852a:	b510      	push	{r4, lr}
   b852c:	4604      	mov	r4, r0
    writeSeparator();
   b852e:	f7ff ffef 	bl	b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8532:	4620      	mov	r0, r4
   b8534:	217b      	movs	r1, #123	; 0x7b
   b8536:	f7ff ff30 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b853a:	2300      	movs	r3, #0
   b853c:	7123      	strb	r3, [r4, #4]
}
   b853e:	4620      	mov	r0, r4
   b8540:	bd10      	pop	{r4, pc}
	...

000b8544 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8544:	b513      	push	{r0, r1, r4, lr}
   b8546:	4604      	mov	r4, r0
   b8548:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b854a:	f7ff ffe1 	bl	b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b854e:	6823      	ldr	r3, [r4, #0]
   b8550:	9a01      	ldr	r2, [sp, #4]
   b8552:	68db      	ldr	r3, [r3, #12]
   b8554:	4903      	ldr	r1, [pc, #12]	; (b8564 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8556:	4620      	mov	r0, r4
   b8558:	4798      	blx	r3
    state_ = NEXT;
   b855a:	2301      	movs	r3, #1
}
   b855c:	4620      	mov	r0, r4
    state_ = NEXT;
   b855e:	7123      	strb	r3, [r4, #4]
}
   b8560:	b002      	add	sp, #8
   b8562:	bd10      	pop	{r4, pc}
   b8564:	000be70c 	.word	0x000be70c

000b8568 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8568:	b513      	push	{r0, r1, r4, lr}
   b856a:	4604      	mov	r4, r0
   b856c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b856e:	f7ff ffcf 	bl	b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b8572:	6823      	ldr	r3, [r4, #0]
   b8574:	9a01      	ldr	r2, [sp, #4]
   b8576:	68db      	ldr	r3, [r3, #12]
   b8578:	4903      	ldr	r1, [pc, #12]	; (b8588 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b857a:	4620      	mov	r0, r4
   b857c:	4798      	blx	r3
    state_ = NEXT;
   b857e:	2301      	movs	r3, #1
}
   b8580:	4620      	mov	r0, r4
    state_ = NEXT;
   b8582:	7123      	strb	r3, [r4, #4]
}
   b8584:	b002      	add	sp, #8
   b8586:	bd10      	pop	{r4, pc}
   b8588:	000be5bc 	.word	0x000be5bc

000b858c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8590:	460d      	mov	r5, r1
    write('"');
   b8592:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8594:	4690      	mov	r8, r2
   b8596:	4604      	mov	r4, r0
    write('"');
   b8598:	f7ff feff 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b859c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b85a0:	44a8      	add	r8, r5
    const char *s = str;
   b85a2:	462f      	mov	r7, r5
    while (s != end) {
   b85a4:	4547      	cmp	r7, r8
   b85a6:	46ba      	mov	sl, r7
   b85a8:	d03d      	beq.n	b8626 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b85aa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b85ae:	2e22      	cmp	r6, #34	; 0x22
   b85b0:	d006      	beq.n	b85c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b85b2:	2e5c      	cmp	r6, #92	; 0x5c
   b85b4:	d004      	beq.n	b85c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b85b6:	4630      	mov	r0, r6
   b85b8:	f003 fae6 	bl	bbb88 <isprint>
   b85bc:	2800      	cmp	r0, #0
   b85be:	d1f1      	bne.n	b85a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b85c0:	6823      	ldr	r3, [r4, #0]
   b85c2:	ebaa 0205 	sub.w	r2, sl, r5
   b85c6:	689b      	ldr	r3, [r3, #8]
   b85c8:	4629      	mov	r1, r5
   b85ca:	4620      	mov	r0, r4
   b85cc:	4798      	blx	r3
            write('\\');
   b85ce:	215c      	movs	r1, #92	; 0x5c
   b85d0:	4620      	mov	r0, r4
   b85d2:	f7ff fee2 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b85d6:	2e0d      	cmp	r6, #13
   b85d8:	d80a      	bhi.n	b85f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b85da:	2e07      	cmp	r6, #7
   b85dc:	d91c      	bls.n	b8618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b85de:	f1a6 0308 	sub.w	r3, r6, #8
   b85e2:	2b05      	cmp	r3, #5
   b85e4:	d818      	bhi.n	b8618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b85e6:	e8df f003 	tbb	[pc, r3]
   b85ea:	0f0d      	.short	0x0f0d
   b85ec:	15131711 	.word	0x15131711
   b85f0:	2e22      	cmp	r6, #34	; 0x22
   b85f2:	d001      	beq.n	b85f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b85f4:	2e5c      	cmp	r6, #92	; 0x5c
   b85f6:	d10f      	bne.n	b8618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b85f8:	4631      	mov	r1, r6
                write('b');
   b85fa:	4620      	mov	r0, r4
   b85fc:	f7ff fecd 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8600:	463d      	mov	r5, r7
    while (s != end) {
   b8602:	e7cf      	b.n	b85a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8604:	2162      	movs	r1, #98	; 0x62
   b8606:	e7f8      	b.n	b85fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8608:	2174      	movs	r1, #116	; 0x74
   b860a:	e7f6      	b.n	b85fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b860c:	216e      	movs	r1, #110	; 0x6e
   b860e:	e7f4      	b.n	b85fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8610:	2166      	movs	r1, #102	; 0x66
   b8612:	e7f2      	b.n	b85fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8614:	2172      	movs	r1, #114	; 0x72
   b8616:	e7f0      	b.n	b85fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8618:	6823      	ldr	r3, [r4, #0]
   b861a:	4632      	mov	r2, r6
   b861c:	68db      	ldr	r3, [r3, #12]
   b861e:	4649      	mov	r1, r9
   b8620:	4620      	mov	r0, r4
   b8622:	4798      	blx	r3
                break;
   b8624:	e7ec      	b.n	b8600 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8626:	42bd      	cmp	r5, r7
   b8628:	d005      	beq.n	b8636 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b862a:	6823      	ldr	r3, [r4, #0]
   b862c:	1b7a      	subs	r2, r7, r5
   b862e:	689b      	ldr	r3, [r3, #8]
   b8630:	4629      	mov	r1, r5
   b8632:	4620      	mov	r0, r4
   b8634:	4798      	blx	r3
    }
    write('"');
   b8636:	2122      	movs	r1, #34	; 0x22
   b8638:	4620      	mov	r0, r4
   b863a:	f7ff feae 	bl	b839a <_ZN5spark10JSONWriter5writeEc>
}
   b863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8642:	bf00      	nop
   b8644:	000be5bf 	.word	0x000be5bf

000b8648 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8648:	b513      	push	{r0, r1, r4, lr}
   b864a:	4604      	mov	r4, r0
   b864c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8650:	f7ff ff5e 	bl	b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8654:	4620      	mov	r0, r4
   b8656:	e9dd 2100 	ldrd	r2, r1, [sp]
   b865a:	f7ff ff97 	bl	b858c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b865e:	2302      	movs	r3, #2
}
   b8660:	4620      	mov	r0, r4
    state_ = VALUE;
   b8662:	7123      	strb	r3, [r4, #4]
}
   b8664:	b002      	add	sp, #8
   b8666:	bd10      	pop	{r4, pc}

000b8668 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8668:	b513      	push	{r0, r1, r4, lr}
   b866a:	4604      	mov	r4, r0
   b866c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8670:	f7ff ff4e 	bl	b8510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8674:	4620      	mov	r0, r4
   b8676:	e9dd 2100 	ldrd	r2, r1, [sp]
   b867a:	f7ff ff87 	bl	b858c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b867e:	2301      	movs	r3, #1
}
   b8680:	4620      	mov	r0, r4
    state_ = NEXT;
   b8682:	7123      	strb	r3, [r4, #4]
}
   b8684:	b002      	add	sp, #8
   b8686:	bd10      	pop	{r4, pc}

000b8688 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b8688:	6880      	ldr	r0, [r0, #8]
   b868a:	6803      	ldr	r3, [r0, #0]
   b868c:	68db      	ldr	r3, [r3, #12]
   b868e:	4718      	bx	r3

000b8690 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b8690:	4770      	bx	lr

000b8692 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b8692:	4608      	mov	r0, r1
   b8694:	b111      	cbz	r1, b869c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b8696:	680b      	ldr	r3, [r1, #0]
   b8698:	685b      	ldr	r3, [r3, #4]
   b869a:	4718      	bx	r3
}
   b869c:	4770      	bx	lr

000b869e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b869e:	4770      	bx	lr

000b86a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b86a0:	4770      	bx	lr

000b86a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b86a2:	4770      	bx	lr

000b86a4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b86a4:	4770      	bx	lr

000b86a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b86a6:	b538      	push	{r3, r4, r5, lr}
   b86a8:	4604      	mov	r4, r0
   b86aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b86ac:	6800      	ldr	r0, [r0, #0]
   b86ae:	212e      	movs	r1, #46	; 0x2e
   b86b0:	f003 fadd 	bl	bbc6e <strchrnul>
    size = s - category;
   b86b4:	6823      	ldr	r3, [r4, #0]
   b86b6:	1ac3      	subs	r3, r0, r3
   b86b8:	602b      	str	r3, [r5, #0]
    if (size) {
   b86ba:	b123      	cbz	r3, b86c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b86bc:	7803      	ldrb	r3, [r0, #0]
   b86be:	b103      	cbz	r3, b86c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b86c0:	3001      	adds	r0, #1
   b86c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b86c4:	6020      	str	r0, [r4, #0]
}
   b86c6:	4618      	mov	r0, r3
   b86c8:	bd38      	pop	{r3, r4, r5, pc}

000b86ca <_ZN5spark16JSONStreamWriterD0Ev>:
   b86ca:	b510      	push	{r4, lr}
   b86cc:	210c      	movs	r1, #12
   b86ce:	4604      	mov	r4, r0
   b86d0:	f7fb fce5 	bl	b409e <_ZdlPvj>
   b86d4:	4620      	mov	r0, r4
   b86d6:	bd10      	pop	{r4, pc}

000b86d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b86d8:	b510      	push	{r4, lr}
   b86da:	2104      	movs	r1, #4
   b86dc:	4604      	mov	r4, r0
   b86de:	f7fb fcde 	bl	b409e <_ZdlPvj>
   b86e2:	4620      	mov	r0, r4
   b86e4:	bd10      	pop	{r4, pc}

000b86e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b86e6:	b510      	push	{r4, lr}
   b86e8:	2104      	movs	r1, #4
   b86ea:	4604      	mov	r4, r0
   b86ec:	f7fb fcd7 	bl	b409e <_ZdlPvj>
   b86f0:	4620      	mov	r0, r4
   b86f2:	bd10      	pop	{r4, pc}

000b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b86f4:	f7fe bc8e 	b.w	b7014 <os_mutex_recursive_lock>

000b86f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b86f8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b86fa:	f003 fac2 	bl	bbc82 <strcmp>
}
   b86fe:	fab0 f080 	clz	r0, r0
   b8702:	0940      	lsrs	r0, r0, #5
   b8704:	bd08      	pop	{r3, pc}

000b8706 <__tcf_1>:
   b8706:	4770      	bx	lr

000b8708 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b8708:	b510      	push	{r4, lr}
   b870a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b870c:	f002 f92c 	bl	ba968 <_Z16_fetch_usbserialv>
   b8710:	4284      	cmp	r4, r0
   b8712:	d010      	beq.n	b8736 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8714:	f002 fb10 	bl	bad38 <_Z22__fetch_global_Serial1v>
   b8718:	4284      	cmp	r4, r0
   b871a:	d105      	bne.n	b8728 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b871c:	f002 fb0c 	bl	bad38 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b8720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8724:	f002 b8bb 	b.w	ba89e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b8728:	b12c      	cbz	r4, b8736 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b872a:	6823      	ldr	r3, [r4, #0]
   b872c:	4620      	mov	r0, r4
   b872e:	685b      	ldr	r3, [r3, #4]
}
   b8730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8734:	4718      	bx	r3
   b8736:	bd10      	pop	{r4, pc}

000b8738 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8738:	680b      	ldr	r3, [r1, #0]
   b873a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b873c:	684b      	ldr	r3, [r1, #4]
   b873e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8740:	b113      	cbz	r3, b8748 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8742:	685a      	ldr	r2, [r3, #4]
   b8744:	3201      	adds	r2, #1
   b8746:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8748:	4770      	bx	lr

000b874a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b874a:	b513      	push	{r0, r1, r4, lr}
   b874c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b874e:	4608      	mov	r0, r1
   b8750:	9101      	str	r1, [sp, #4]
   b8752:	f003 fac6 	bl	bbce2 <strlen>
   b8756:	9901      	ldr	r1, [sp, #4]
   b8758:	4602      	mov	r2, r0
   b875a:	4620      	mov	r0, r4
}
   b875c:	b002      	add	sp, #8
   b875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b8762:	f7ff bf81 	b.w	b8668 <_ZN5spark10JSONWriter5valueEPKcj>

000b8766 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b8766:	b513      	push	{r0, r1, r4, lr}
   b8768:	4604      	mov	r4, r0
    write(str, strlen(str));
   b876a:	4608      	mov	r0, r1
   b876c:	9101      	str	r1, [sp, #4]
   b876e:	f003 fab8 	bl	bbce2 <strlen>
   b8772:	6823      	ldr	r3, [r4, #0]
   b8774:	9901      	ldr	r1, [sp, #4]
   b8776:	68db      	ldr	r3, [r3, #12]
   b8778:	4602      	mov	r2, r0
   b877a:	4620      	mov	r0, r4
}
   b877c:	b002      	add	sp, #8
   b877e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b8782:	4718      	bx	r3

000b8784 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b8784:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b8786:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b8788:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b878c:	68db      	ldr	r3, [r3, #12]
   b878e:	2201      	movs	r2, #1
   b8790:	f10d 0107 	add.w	r1, sp, #7
   b8794:	4798      	blx	r3
}
   b8796:	b003      	add	sp, #12
   b8798:	f85d fb04 	ldr.w	pc, [sp], #4

000b879c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b879c:	b40e      	push	{r1, r2, r3}
   b879e:	b503      	push	{r0, r1, lr}
   b87a0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b87a2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b87a4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b87a8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b87aa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b87ac:	f001 f8cd 	bl	b994a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b87b0:	b002      	add	sp, #8
   b87b2:	f85d eb04 	ldr.w	lr, [sp], #4
   b87b6:	b003      	add	sp, #12
   b87b8:	4770      	bx	lr

000b87ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b87ba:	680a      	ldr	r2, [r1, #0]
   b87bc:	6002      	str	r2, [r0, #0]
   b87be:	684a      	ldr	r2, [r1, #4]
   b87c0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b87c2:	2200      	movs	r2, #0
   b87c4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b87c8:	b510      	push	{r4, lr}
   b87ca:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b87cc:	688c      	ldr	r4, [r1, #8]
   b87ce:	6084      	str	r4, [r0, #8]
   b87d0:	68cc      	ldr	r4, [r1, #12]
   b87d2:	60c4      	str	r4, [r0, #12]
   b87d4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b87d6:	608a      	str	r2, [r1, #8]
   b87d8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b87da:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b87dc:	610a      	str	r2, [r1, #16]
   b87de:	bd10      	pop	{r4, pc}

000b87e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b87e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b87e4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b87e8:	f04f 0a14 	mov.w	sl, #20
   b87ec:	9300      	str	r3, [sp, #0]
   b87ee:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b87f2:	4b18      	ldr	r3, [pc, #96]	; (b8854 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b87f4:	10a4      	asrs	r4, r4, #2
   b87f6:	4617      	mov	r7, r2
   b87f8:	435c      	muls	r4, r3
   b87fa:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b87fc:	2c00      	cmp	r4, #0
   b87fe:	dd21      	ble.n	b8844 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b8800:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b8802:	fb0a f006 	mul.w	r0, sl, r6
   b8806:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b880a:	463a      	mov	r2, r7
   b880c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8810:	5828      	ldr	r0, [r5, r0]
   b8812:	9101      	str	r1, [sp, #4]
   b8814:	455f      	cmp	r7, fp
   b8816:	bf28      	it	cs
   b8818:	465a      	movcs	r2, fp
   b881a:	f003 fa6a 	bl	bbcf2 <strncmp>
                if (cmp == 0) {
   b881e:	2800      	cmp	r0, #0
   b8820:	9901      	ldr	r1, [sp, #4]
   b8822:	f04f 0301 	mov.w	r3, #1
   b8826:	d10b      	bne.n	b8840 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8828:	455f      	cmp	r7, fp
   b882a:	d103      	bne.n	b8834 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b882c:	9a00      	ldr	r2, [sp, #0]
   b882e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8830:	4634      	mov	r4, r6
   b8832:	e7e3      	b.n	b87fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8834:	d9fc      	bls.n	b8830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8836:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8838:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b883c:	3e01      	subs	r6, #1
   b883e:	e7f7      	b.n	b8830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8840:	dbf9      	blt.n	b8836 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8842:	e7f5      	b.n	b8830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8844:	eba5 0508 	sub.w	r5, r5, r8
}
   b8848:	4802      	ldr	r0, [pc, #8]	; (b8854 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b884a:	10ad      	asrs	r5, r5, #2
   b884c:	4368      	muls	r0, r5
   b884e:	b003      	add	sp, #12
   b8850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8854:	cccccccd 	.word	0xcccccccd

000b8858 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b885a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b885c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b885e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8860:	b303      	cbz	r3, b88a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8862:	b1f9      	cbz	r1, b88a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8864:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8866:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b886a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b886c:	a903      	add	r1, sp, #12
   b886e:	a801      	add	r0, sp, #4
   b8870:	f7ff ff19 	bl	b86a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8874:	4601      	mov	r1, r0
   b8876:	b1a8      	cbz	r0, b88a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b8878:	f10d 030b 	add.w	r3, sp, #11
   b887c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b887e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8882:	4620      	mov	r0, r4
   b8884:	f7ff ffac 	bl	b87e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b8888:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b888c:	b153      	cbz	r3, b88a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b888e:	6823      	ldr	r3, [r4, #0]
   b8890:	2414      	movs	r4, #20
   b8892:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8896:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8898:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b889c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b889e:	bfa8      	it	ge
   b88a0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b88a2:	e7e3      	b.n	b886c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b88a4:	4628      	mov	r0, r5
   b88a6:	b004      	add	sp, #16
   b88a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b88ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b88ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b88ae:	4c09      	ldr	r4, [pc, #36]	; (b88d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b88b0:	7823      	ldrb	r3, [r4, #0]
   b88b2:	f3bf 8f5b 	dmb	ish
   b88b6:	07db      	lsls	r3, r3, #31
   b88b8:	d409      	bmi.n	b88ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b88ba:	4620      	mov	r0, r4
   b88bc:	f7fb fbfc 	bl	b40b8 <__cxa_guard_acquire>
   b88c0:	b128      	cbz	r0, b88ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b88c2:	4620      	mov	r0, r4
   b88c4:	f7fb fbfd 	bl	b40c2 <__cxa_guard_release>
   b88c8:	4803      	ldr	r0, [pc, #12]	; (b88d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b88ca:	f003 f94f 	bl	bbb6c <atexit>
}
   b88ce:	4803      	ldr	r0, [pc, #12]	; (b88dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b88d0:	bd10      	pop	{r4, pc}
   b88d2:	bf00      	nop
   b88d4:	2003e694 	.word	0x2003e694
   b88d8:	000b869f 	.word	0x000b869f
   b88dc:	2003e130 	.word	0x2003e130

000b88e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b88e0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b88e2:	4c09      	ldr	r4, [pc, #36]	; (b8908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b88e4:	7823      	ldrb	r3, [r4, #0]
   b88e6:	f3bf 8f5b 	dmb	ish
   b88ea:	07db      	lsls	r3, r3, #31
   b88ec:	d409      	bmi.n	b8902 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b88ee:	4620      	mov	r0, r4
   b88f0:	f7fb fbe2 	bl	b40b8 <__cxa_guard_acquire>
   b88f4:	b128      	cbz	r0, b8902 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b88f6:	4620      	mov	r0, r4
   b88f8:	f7fb fbe3 	bl	b40c2 <__cxa_guard_release>
   b88fc:	4803      	ldr	r0, [pc, #12]	; (b890c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b88fe:	f003 f935 	bl	bbb6c <atexit>
    return &factory;
}
   b8902:	4803      	ldr	r0, [pc, #12]	; (b8910 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8904:	bd10      	pop	{r4, pc}
   b8906:	bf00      	nop
   b8908:	2003e698 	.word	0x2003e698
   b890c:	000b8707 	.word	0x000b8707
   b8910:	2003e134 	.word	0x2003e134

000b8914 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8914:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8916:	2500      	movs	r5, #0
   b8918:	4604      	mov	r4, r0
   b891a:	e9c0 5500 	strd	r5, r5, [r0]
   b891e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8922:	6085      	str	r5, [r0, #8]
   b8924:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8926:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b892a:	f7fe fb63 	bl	b6ff4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b892e:	f7ff ffbd 	bl	b88ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b8932:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8934:	f7ff ffd4 	bl	b88e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b8938:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b893a:	6220      	str	r0, [r4, #32]
}
   b893c:	4620      	mov	r0, r4
   b893e:	bd38      	pop	{r3, r4, r5, pc}

000b8940 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8940:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8942:	4c0a      	ldr	r4, [pc, #40]	; (b896c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8944:	7823      	ldrb	r3, [r4, #0]
   b8946:	f3bf 8f5b 	dmb	ish
   b894a:	07db      	lsls	r3, r3, #31
   b894c:	d40c      	bmi.n	b8968 <_ZN5spark10LogManager8instanceEv+0x28>
   b894e:	4620      	mov	r0, r4
   b8950:	f7fb fbb2 	bl	b40b8 <__cxa_guard_acquire>
   b8954:	b140      	cbz	r0, b8968 <_ZN5spark10LogManager8instanceEv+0x28>
   b8956:	4806      	ldr	r0, [pc, #24]	; (b8970 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8958:	f7ff ffdc 	bl	b8914 <_ZN5spark10LogManagerC1Ev>
   b895c:	4620      	mov	r0, r4
   b895e:	f7fb fbb0 	bl	b40c2 <__cxa_guard_release>
   b8962:	4804      	ldr	r0, [pc, #16]	; (b8974 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8964:	f003 f902 	bl	bbb6c <atexit>
    return &mgr;
}
   b8968:	4801      	ldr	r0, [pc, #4]	; (b8970 <_ZN5spark10LogManager8instanceEv+0x30>)
   b896a:	bd10      	pop	{r4, pc}
   b896c:	2003e690 	.word	0x2003e690
   b8970:	2003e6a0 	.word	0x2003e6a0
   b8974:	000b8e95 	.word	0x000b8e95

000b8978 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8978:	4a02      	ldr	r2, [pc, #8]	; (b8984 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b897a:	4903      	ldr	r1, [pc, #12]	; (b8988 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b897c:	4803      	ldr	r0, [pc, #12]	; (b898c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b897e:	2300      	movs	r3, #0
   b8980:	f7fe bd60 	b.w	b7444 <log_set_callbacks>
   b8984:	000b8c79 	.word	0x000b8c79
   b8988:	000b8c05 	.word	0x000b8c05
   b898c:	000b8b85 	.word	0x000b8b85

000b8990 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8990:	2300      	movs	r3, #0
   b8992:	461a      	mov	r2, r3
   b8994:	4619      	mov	r1, r3
   b8996:	4618      	mov	r0, r3
   b8998:	f7fe bd54 	b.w	b7444 <log_set_callbacks>

000b899c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b899e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b89a0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b89a2:	4668      	mov	r0, sp
   b89a4:	f7ff fec8 	bl	b8738 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b89a8:	466a      	mov	r2, sp
   b89aa:	4629      	mov	r1, r5
   b89ac:	4620      	mov	r0, r4
   b89ae:	f7ff fd7b 	bl	b84a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b89b2:	a801      	add	r0, sp, #4
   b89b4:	f7fe feb9 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b89b8:	4620      	mov	r0, r4
   b89ba:	b003      	add	sp, #12
   b89bc:	bd30      	pop	{r4, r5, pc}

000b89be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b89be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b89c0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b89c2:	4604      	mov	r4, r0
   b89c4:	4668      	mov	r0, sp
   b89c6:	f7ff feb7 	bl	b8738 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b89ca:	466a      	mov	r2, sp
   b89cc:	4629      	mov	r1, r5
   b89ce:	4620      	mov	r0, r4
   b89d0:	f7ff fd46 	bl	b8460 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b89d4:	a801      	add	r0, sp, #4
   b89d6:	f7fe fea8 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b89da:	4620      	mov	r0, r4
   b89dc:	b003      	add	sp, #12
   b89de:	bd30      	pop	{r4, r5, pc}

000b89e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b89e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b89e2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b89e4:	4604      	mov	r4, r0
   b89e6:	4668      	mov	r0, sp
   b89e8:	f7ff fea6 	bl	b8738 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b89ec:	466a      	mov	r2, sp
   b89ee:	4629      	mov	r1, r5
   b89f0:	4620      	mov	r0, r4
   b89f2:	f7ff fcde 	bl	b83b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b89f6:	a801      	add	r0, sp, #4
   b89f8:	f7fe fe97 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b89fc:	4620      	mov	r0, r4
   b89fe:	b003      	add	sp, #12
   b8a00:	bd30      	pop	{r4, r5, pc}
	...

000b8a04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8a04:	b570      	push	{r4, r5, r6, lr}
   b8a06:	b08a      	sub	sp, #40	; 0x28
   b8a08:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b8a0a:	4601      	mov	r1, r0
   b8a0c:	a804      	add	r0, sp, #16
   b8a0e:	f7ff ffc5 	bl	b899c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8a12:	4e14      	ldr	r6, [pc, #80]	; (b8a64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8a14:	a804      	add	r0, sp, #16
   b8a16:	f7ff fd5f 	bl	b84d8 <_ZN5spark18JSONObjectIterator4nextEv>
   b8a1a:	b1e8      	cbz	r0, b8a58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b8a1c:	a904      	add	r1, sp, #16
   b8a1e:	4668      	mov	r0, sp
   b8a20:	f7ff ffcd 	bl	b89be <_ZNK5spark18JSONObjectIterator4nameEv>
   b8a24:	9802      	ldr	r0, [sp, #8]
   b8a26:	4631      	mov	r1, r6
   b8a28:	f7ff fe66 	bl	b86f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b8a2c:	4604      	mov	r4, r0
   b8a2e:	b110      	cbz	r0, b8a36 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b8a30:	1e2c      	subs	r4, r5, #0
   b8a32:	bf18      	it	ne
   b8a34:	2401      	movne	r4, #1
   b8a36:	a801      	add	r0, sp, #4
   b8a38:	f7fe fe77 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a3c:	2c00      	cmp	r4, #0
   b8a3e:	d0e9      	beq.n	b8a14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8a40:	a904      	add	r1, sp, #16
   b8a42:	4668      	mov	r0, sp
   b8a44:	f7ff ffcc 	bl	b89e0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8a48:	4668      	mov	r0, sp
   b8a4a:	f7ff fce8 	bl	b841e <_ZNK5spark9JSONValue5toIntEv>
   b8a4e:	6028      	str	r0, [r5, #0]
   b8a50:	a801      	add	r0, sp, #4
   b8a52:	f7fe fe6a 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a56:	e7dd      	b.n	b8a14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b8a58:	a805      	add	r0, sp, #20
   b8a5a:	f7fe fe66 	bl	b772a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a5e:	b00a      	add	sp, #40	; 0x28
   b8a60:	bd70      	pop	{r4, r5, r6, pc}
   b8a62:	bf00      	nop
   b8a64:	000be5c5 	.word	0x000be5c5

000b8a68 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a6a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b8a6c:	4620      	mov	r0, r4
   b8a6e:	4913      	ldr	r1, [pc, #76]	; (b8abc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8a70:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8a72:	f003 f906 	bl	bbc82 <strcmp>
   b8a76:	b950      	cbnz	r0, b8a8e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8a78:	f001 ff76 	bl	ba968 <_Z16_fetch_usbserialv>
   b8a7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8a80:	f001 ff62 	bl	ba948 <_ZN9USBSerial5beginEl>
}
   b8a84:	b003      	add	sp, #12
   b8a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b8a8a:	f001 bf6d 	b.w	ba968 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b8a8e:	490c      	ldr	r1, [pc, #48]	; (b8ac0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8a90:	4620      	mov	r0, r4
   b8a92:	f003 f8f6 	bl	bbc82 <strcmp>
   b8a96:	b978      	cbnz	r0, b8ab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8a98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b8a9c:	a901      	add	r1, sp, #4
   b8a9e:	4628      	mov	r0, r5
        int baud = 9600;
   b8aa0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8aa2:	f7ff ffaf 	bl	b8a04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8aa6:	f002 f947 	bl	bad38 <_Z22__fetch_global_Serial1v>
   b8aaa:	9901      	ldr	r1, [sp, #4]
   b8aac:	f001 fef4 	bl	ba898 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8ab0:	f002 f942 	bl	bad38 <_Z22__fetch_global_Serial1v>
}
   b8ab4:	b003      	add	sp, #12
   b8ab6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8ab8:	2000      	movs	r0, #0
   b8aba:	e7fb      	b.n	b8ab4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b8abc:	000be5ca 	.word	0x000be5ca
   b8ac0:	000be5d1 	.word	0x000be5d1

000b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ac4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8ac6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b8aca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8acc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8ace:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8ad2:	42ae      	cmp	r6, r5
   b8ad4:	d005      	beq.n	b8ae2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8ad6:	f105 0008 	add.w	r0, r5, #8
   b8ada:	f7ff fff3 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8ade:	3514      	adds	r5, #20
   b8ae0:	e7f7      	b.n	b8ad2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8ae2:	6820      	ldr	r0, [r4, #0]
   b8ae4:	f7fe fd94 	bl	b7610 <free>
}
   b8ae8:	4620      	mov	r0, r4
   b8aea:	bd70      	pop	{r4, r5, r6, pc}

000b8aec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b8aec:	b510      	push	{r4, lr}
   b8aee:	4604      	mov	r4, r0
   b8af0:	300c      	adds	r0, #12
   b8af2:	f7ff ffe7 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8af6:	4620      	mov	r0, r4
   b8af8:	f7fe fe05 	bl	b7706 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8afc:	4620      	mov	r0, r4
   b8afe:	bd10      	pop	{r4, pc}

000b8b00 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8b00:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8b02:	4b04      	ldr	r3, [pc, #16]	; (b8b14 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8b04:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b8b06:	f840 3b04 	str.w	r3, [r0], #4
   b8b0a:	f7ff ffef 	bl	b8aec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b8b0e:	4620      	mov	r0, r4
   b8b10:	bd10      	pop	{r4, pc}
   b8b12:	bf00      	nop
   b8b14:	000bdf00 	.word	0x000bdf00

000b8b18 <_ZN5spark16StreamLogHandlerD0Ev>:
   b8b18:	b510      	push	{r4, lr}
   b8b1a:	4604      	mov	r4, r0
   b8b1c:	f7ff fff0 	bl	b8b00 <_ZN5spark16StreamLogHandlerD1Ev>
   b8b20:	4620      	mov	r0, r4
   b8b22:	2124      	movs	r1, #36	; 0x24
   b8b24:	f7fb fabb 	bl	b409e <_ZdlPvj>
   b8b28:	4620      	mov	r0, r4
   b8b2a:	bd10      	pop	{r4, pc}

000b8b2c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b8b2c:	b510      	push	{r4, lr}
   b8b2e:	4b03      	ldr	r3, [pc, #12]	; (b8b3c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b8b30:	6003      	str	r3, [r0, #0]
   b8b32:	4604      	mov	r4, r0
   b8b34:	f7ff ffe4 	bl	b8b00 <_ZN5spark16StreamLogHandlerD1Ev>
   b8b38:	4620      	mov	r0, r4
   b8b3a:	bd10      	pop	{r4, pc}
   b8b3c:	000be668 	.word	0x000be668

000b8b40 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b8b40:	b510      	push	{r4, lr}
   b8b42:	4604      	mov	r4, r0
   b8b44:	f7ff fff2 	bl	b8b2c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b8b48:	4620      	mov	r0, r4
   b8b4a:	2124      	movs	r1, #36	; 0x24
   b8b4c:	f7fb faa7 	bl	b409e <_ZdlPvj>
   b8b50:	4620      	mov	r0, r4
   b8b52:	bd10      	pop	{r4, pc}

000b8b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b8b54:	2200      	movs	r2, #0
   b8b56:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b8b5a:	b510      	push	{r4, lr}
        capacity_(0) {
   b8b5c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8b5e:	680c      	ldr	r4, [r1, #0]
   b8b60:	6004      	str	r4, [r0, #0]
   b8b62:	684c      	ldr	r4, [r1, #4]
   b8b64:	6044      	str	r4, [r0, #4]
   b8b66:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b68:	600a      	str	r2, [r1, #0]
   b8b6a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8b6c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b6e:	608a      	str	r2, [r1, #8]
}
   b8b70:	bd10      	pop	{r4, pc}

000b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b8b72:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8b74:	6803      	ldr	r3, [r0, #0]
   b8b76:	4604      	mov	r4, r0
   b8b78:	6818      	ldr	r0, [r3, #0]
   b8b7a:	f7fe fa53 	bl	b7024 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b8b7e:	4620      	mov	r0, r4
   b8b80:	bd10      	pop	{r4, pc}
	...

000b8b84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b88:	b087      	sub	sp, #28
   b8b8a:	4680      	mov	r8, r0
   b8b8c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8b8e:	4b1c      	ldr	r3, [pc, #112]	; (b8c00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8b90:	685b      	ldr	r3, [r3, #4]
   b8b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8b96:	4689      	mov	r9, r1
   b8b98:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b8b9a:	b96b      	cbnz	r3, b8bb8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8b9c:	f7ff fed0 	bl	b8940 <_ZN5spark10LogManager8instanceEv>
   b8ba0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8ba2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8ba6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8ba8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b8baa:	f7ff fda3 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8bae:	7b23      	ldrb	r3, [r4, #12]
   b8bb0:	b12b      	cbz	r3, b8bbe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8bb2:	a805      	add	r0, sp, #20
   b8bb4:	f7ff ffdd 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8bb8:	b007      	add	sp, #28
   b8bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8bbe:	2301      	movs	r3, #1
   b8bc0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8bc2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8bc6:	fa5f f989 	uxtb.w	r9, r9
   b8bca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8bce:	45aa      	cmp	sl, r5
   b8bd0:	d012      	beq.n	b8bf8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8bd2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8bd6:	4631      	mov	r1, r6
   b8bd8:	1d38      	adds	r0, r7, #4
   b8bda:	f7ff fe3d 	bl	b8858 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8bde:	4581      	cmp	r9, r0
   b8be0:	d3f5      	bcc.n	b8bce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8be2:	683b      	ldr	r3, [r7, #0]
   b8be4:	9a03      	ldr	r2, [sp, #12]
   b8be6:	9200      	str	r2, [sp, #0]
   b8be8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b8bec:	464a      	mov	r2, r9
   b8bee:	4633      	mov	r3, r6
   b8bf0:	4641      	mov	r1, r8
   b8bf2:	4638      	mov	r0, r7
   b8bf4:	47d8      	blx	fp
   b8bf6:	e7ea      	b.n	b8bce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8bf8:	2300      	movs	r3, #0
   b8bfa:	7323      	strb	r3, [r4, #12]
   b8bfc:	e7d9      	b.n	b8bb2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b8bfe:	bf00      	nop
   b8c00:	e000ed00 	.word	0xe000ed00

000b8c04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c08:	469b      	mov	fp, r3
   b8c0a:	4b1a      	ldr	r3, [pc, #104]	; (b8c74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b8c0c:	685b      	ldr	r3, [r3, #4]
   b8c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8c12:	4680      	mov	r8, r0
   b8c14:	4689      	mov	r9, r1
   b8c16:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b8c18:	b96b      	cbnz	r3, b8c36 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b8c1a:	f7ff fe91 	bl	b8940 <_ZN5spark10LogManager8instanceEv>
   b8c1e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8c20:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8c24:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8c26:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8c28:	f7ff fd64 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b8c2c:	7b23      	ldrb	r3, [r4, #12]
   b8c2e:	b12b      	cbz	r3, b8c3c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b8c30:	a801      	add	r0, sp, #4
   b8c32:	f7ff ff9e 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8c36:	b003      	add	sp, #12
   b8c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b8c3c:	2301      	movs	r3, #1
   b8c3e:	7323      	strb	r3, [r4, #12]
   b8c40:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8c44:	b2f6      	uxtb	r6, r6
   b8c46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8c4a:	4555      	cmp	r5, sl
   b8c4c:	d00e      	beq.n	b8c6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b8c4e:	f855 7b04 	ldr.w	r7, [r5], #4
   b8c52:	4659      	mov	r1, fp
   b8c54:	1d38      	adds	r0, r7, #4
   b8c56:	f7ff fdff 	bl	b8858 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8c5a:	4286      	cmp	r6, r0
   b8c5c:	d3f5      	bcc.n	b8c4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b8c5e:	683b      	ldr	r3, [r7, #0]
   b8c60:	464a      	mov	r2, r9
   b8c62:	68db      	ldr	r3, [r3, #12]
   b8c64:	4641      	mov	r1, r8
   b8c66:	4638      	mov	r0, r7
   b8c68:	4798      	blx	r3
   b8c6a:	e7ee      	b.n	b8c4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b8c6c:	2300      	movs	r3, #0
   b8c6e:	7323      	strb	r3, [r4, #12]
   b8c70:	e7de      	b.n	b8c30 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8c72:	bf00      	nop
   b8c74:	e000ed00 	.word	0xe000ed00

000b8c78 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c7c:	4b16      	ldr	r3, [pc, #88]	; (b8cd8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b8c7e:	685b      	ldr	r3, [r3, #4]
   b8c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8c84:	4605      	mov	r5, r0
   b8c86:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b8c88:	bb1b      	cbnz	r3, b8cd2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b8c8a:	f7ff fe59 	bl	b8940 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8c8e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8c92:	4604      	mov	r4, r0
   b8c94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8c96:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8c98:	f7ff fd2c 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b8c9c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8ca0:	2446      	movs	r4, #70	; 0x46
   b8ca2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8ca6:	45b0      	cmp	r8, r6
   b8ca8:	d109      	bne.n	b8cbe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b8caa:	a801      	add	r0, sp, #4
   b8cac:	f7ff ff61 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8cb0:	42a5      	cmp	r5, r4
   b8cb2:	bfb4      	ite	lt
   b8cb4:	2000      	movlt	r0, #0
   b8cb6:	2001      	movge	r0, #1
}
   b8cb8:	b002      	add	sp, #8
   b8cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8cbe:	f856 0b04 	ldr.w	r0, [r6], #4
   b8cc2:	4639      	mov	r1, r7
   b8cc4:	3004      	adds	r0, #4
   b8cc6:	f7ff fdc7 	bl	b8858 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b8cca:	4284      	cmp	r4, r0
   b8ccc:	bfa8      	it	ge
   b8cce:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8cd0:	e7e9      	b.n	b8ca6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8cd2:	2000      	movs	r0, #0
   b8cd4:	e7f0      	b.n	b8cb8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8cd6:	bf00      	nop
   b8cd8:	e000ed00 	.word	0xe000ed00

000b8cdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cde:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8ce2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8ce4:	4604      	mov	r4, r0
   b8ce6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ce8:	db0d      	blt.n	b8d06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b8cea:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b8cec:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8cee:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8cf0:	dd04      	ble.n	b8cfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8cf2:	00b9      	lsls	r1, r7, #2
   b8cf4:	f7fe fc94 	bl	b7620 <realloc>
            if (!d) {
   b8cf8:	b918      	cbnz	r0, b8d02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b8cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b8cfc:	f7fe fc88 	bl	b7610 <free>
        T* d = nullptr;
   b8d00:	2000      	movs	r0, #0
        data_ = d;
   b8d02:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8d04:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8d06:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8d08:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8d0a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b8d0e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8d10:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8d14:	1d08      	adds	r0, r1, #4
   b8d16:	f002 ff4d 	bl	bbbb4 <memmove>
    new(p) T(std::move(value));
   b8d1a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b8d1e:	6863      	ldr	r3, [r4, #4]
   b8d20:	3301      	adds	r3, #1
   b8d22:	6063      	str	r3, [r4, #4]
    return true;
   b8d24:	2001      	movs	r0, #1
   b8d26:	e7e8      	b.n	b8cfa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8d28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b8d2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8d2e:	4604      	mov	r4, r0
   b8d30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8d32:	9301      	str	r3, [sp, #4]
   b8d34:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b8d36:	f7ff fcdd 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b8d3a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b8d3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8d42:	4293      	cmp	r3, r2
   b8d44:	4619      	mov	r1, r3
   b8d46:	d00b      	beq.n	b8d60 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8d48:	6809      	ldr	r1, [r1, #0]
   b8d4a:	42a9      	cmp	r1, r5
   b8d4c:	f103 0304 	add.w	r3, r3, #4
   b8d50:	d1f7      	bne.n	b8d42 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8d52:	a801      	add	r0, sp, #4
   b8d54:	f7ff ff0d 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8d58:	2500      	movs	r5, #0
}
   b8d5a:	4628      	mov	r0, r5
   b8d5c:	b003      	add	sp, #12
   b8d5e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8d60:	4629      	mov	r1, r5
   b8d62:	4620      	mov	r0, r4
   b8d64:	f7ff ffba 	bl	b8cdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8d68:	4605      	mov	r5, r0
   b8d6a:	2800      	cmp	r0, #0
   b8d6c:	d0f1      	beq.n	b8d52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b8d6e:	6863      	ldr	r3, [r4, #4]
   b8d70:	2b01      	cmp	r3, #1
   b8d72:	d101      	bne.n	b8d78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8d74:	f7ff fe00 	bl	b8978 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8d78:	a801      	add	r0, sp, #4
   b8d7a:	f7ff fefa 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8d7e:	e7ec      	b.n	b8d5a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8d80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8d80:	b570      	push	{r4, r5, r6, lr}
   b8d82:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8d84:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8d88:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b8d8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b8d8e:	4282      	cmp	r2, r0
   b8d90:	d00f      	beq.n	b8db2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8d92:	4601      	mov	r1, r0
            if (*p == value) {
   b8d94:	681d      	ldr	r5, [r3, #0]
   b8d96:	f851 6b04 	ldr.w	r6, [r1], #4
   b8d9a:	42ae      	cmp	r6, r5
   b8d9c:	d107      	bne.n	b8dae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8d9e:	1a52      	subs	r2, r2, r1
   b8da0:	f002 ff08 	bl	bbbb4 <memmove>
    --size_;
   b8da4:	6863      	ldr	r3, [r4, #4]
   b8da6:	3b01      	subs	r3, #1
   b8da8:	6063      	str	r3, [r4, #4]
    return true;
   b8daa:	2001      	movs	r0, #1
}
   b8dac:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b8dae:	4608      	mov	r0, r1
   b8db0:	e7ed      	b.n	b8d8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8db2:	2000      	movs	r0, #0
   b8db4:	e7fa      	b.n	b8dac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b8db6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8db6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b8db8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8dbc:	4604      	mov	r4, r0
   b8dbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8dc0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8dc2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8dc4:	f7ff fc96 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b8dc8:	a901      	add	r1, sp, #4
   b8dca:	4620      	mov	r0, r4
   b8dcc:	f7ff ffd8 	bl	b8d80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8dd0:	b118      	cbz	r0, b8dda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8dd2:	6863      	ldr	r3, [r4, #4]
   b8dd4:	b90b      	cbnz	r3, b8dda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b8dd6:	f7ff fddb 	bl	b8990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8dda:	a803      	add	r0, sp, #12
   b8ddc:	f7ff fec9 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8de0:	b004      	add	sp, #16
   b8de2:	bd10      	pop	{r4, pc}

000b8de4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8de4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b8de6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b8dea:	2318      	movs	r3, #24
   b8dec:	4604      	mov	r4, r0
   b8dee:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b8df2:	42ae      	cmp	r6, r5
   b8df4:	d015      	beq.n	b8e22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b8df6:	f105 0110 	add.w	r1, r5, #16
   b8dfa:	4620      	mov	r0, r4
   b8dfc:	f7ff ffc0 	bl	b8d80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b8e00:	6863      	ldr	r3, [r4, #4]
   b8e02:	b90b      	cbnz	r3, b8e08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b8e04:	f7ff fdc4 	bl	b8990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b8e08:	69e0      	ldr	r0, [r4, #28]
   b8e0a:	6929      	ldr	r1, [r5, #16]
   b8e0c:	6803      	ldr	r3, [r0, #0]
   b8e0e:	68db      	ldr	r3, [r3, #12]
   b8e10:	4798      	blx	r3
        if (h.stream) {
   b8e12:	6969      	ldr	r1, [r5, #20]
   b8e14:	b119      	cbz	r1, b8e1e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b8e16:	6a20      	ldr	r0, [r4, #32]
   b8e18:	6803      	ldr	r3, [r0, #0]
   b8e1a:	68db      	ldr	r3, [r3, #12]
   b8e1c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b8e1e:	3518      	adds	r5, #24
   b8e20:	e7e7      	b.n	b8df2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8e22:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8e26:	2618      	movs	r6, #24
   b8e28:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8e2c:	42ae      	cmp	r6, r5
   b8e2e:	d004      	beq.n	b8e3a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b8e30:	4628      	mov	r0, r5
   b8e32:	f000 fe73 	bl	b9b1c <_ZN6StringD1Ev>
   b8e36:	3518      	adds	r5, #24
   b8e38:	e7f8      	b.n	b8e2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b8e3a:	2300      	movs	r3, #0
   b8e3c:	6163      	str	r3, [r4, #20]
}
   b8e3e:	bd70      	pop	{r4, r5, r6, pc}

000b8e40 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b8e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8e42:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b8e44:	f7ff fda4 	bl	b8990 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8e48:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b8e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8e4e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8e50:	f7ff fc50 	bl	b86f4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8e54:	4620      	mov	r0, r4
   b8e56:	f7ff ffc5 	bl	b8de4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b8e5a:	a801      	add	r0, sp, #4
   b8e5c:	f7ff fe89 	bl	b8b72 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8e62:	b108      	cbz	r0, b8e68 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8e64:	f7fe f8ce 	bl	b7004 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b8e68:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8e6c:	2618      	movs	r6, #24
   b8e6e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8e72:	42ae      	cmp	r6, r5
   b8e74:	d004      	beq.n	b8e80 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b8e76:	4628      	mov	r0, r5
   b8e78:	f000 fe50 	bl	b9b1c <_ZN6StringD1Ev>
   b8e7c:	3518      	adds	r5, #24
   b8e7e:	e7f8      	b.n	b8e72 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8e80:	6920      	ldr	r0, [r4, #16]
   b8e82:	f7fe fbc5 	bl	b7610 <free>
   b8e86:	6820      	ldr	r0, [r4, #0]
   b8e88:	f7fe fbc2 	bl	b7610 <free>
}
   b8e8c:	4620      	mov	r0, r4
   b8e8e:	b002      	add	sp, #8
   b8e90:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8e94 <__tcf_2>:
    static LogManager mgr;
   b8e94:	4801      	ldr	r0, [pc, #4]	; (b8e9c <__tcf_2+0x8>)
   b8e96:	f7ff bfd3 	b.w	b8e40 <_ZN5spark10LogManagerD1Ev>
   b8e9a:	bf00      	nop
   b8e9c:	2003e6a0 	.word	0x2003e6a0

000b8ea0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8ea0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ea4:	4604      	mov	r4, r0
   b8ea6:	460d      	mov	r5, r1
   b8ea8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8eaa:	d915      	bls.n	b8ed8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b8eac:	4290      	cmp	r0, r2
   b8eae:	d214      	bcs.n	b8eda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8eb0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8eb4:	1a75      	subs	r5, r6, r1
   b8eb6:	f1a1 0714 	sub.w	r7, r1, #20
   b8eba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8ebc:	42b7      	cmp	r7, r6
   b8ebe:	d01a      	beq.n	b8ef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8ec0:	b11c      	cbz	r4, b8eca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8ec2:	4631      	mov	r1, r6
   b8ec4:	4620      	mov	r0, r4
   b8ec6:	f7ff fc78 	bl	b87ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b8eca:	f106 0008 	add.w	r0, r6, #8
   b8ece:	f7ff fdf9 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8ed2:	3e14      	subs	r6, #20
   b8ed4:	3c14      	subs	r4, #20
   b8ed6:	e7f1      	b.n	b8ebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b8ed8:	d00d      	beq.n	b8ef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b8eda:	42b5      	cmp	r5, r6
   b8edc:	d00b      	beq.n	b8ef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b8ede:	b11c      	cbz	r4, b8ee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8ee0:	4629      	mov	r1, r5
   b8ee2:	4620      	mov	r0, r4
   b8ee4:	f7ff fc69 	bl	b87ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b8ee8:	f105 0008 	add.w	r0, r5, #8
   b8eec:	f7ff fdea 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b8ef0:	3514      	adds	r5, #20
   b8ef2:	3414      	adds	r4, #20
   b8ef4:	e7f1      	b.n	b8eda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b8ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b8ef8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8efc:	4604      	mov	r4, r0
   b8efe:	460d      	mov	r5, r1
   b8f00:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8f02:	d914      	bls.n	b8f2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8f04:	4290      	cmp	r0, r2
   b8f06:	d213      	bcs.n	b8f30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b8f08:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b8f0c:	1a75      	subs	r5, r6, r1
   b8f0e:	f1a1 0710 	sub.w	r7, r1, #16
   b8f12:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8f14:	42b7      	cmp	r7, r6
   b8f16:	d018      	beq.n	b8f4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b8f18:	b11c      	cbz	r4, b8f22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b8f1a:	4631      	mov	r1, r6
   b8f1c:	4620      	mov	r0, r4
   b8f1e:	f000 fe65 	bl	b9bec <_ZN6StringC1EOS_>
                end->~T();
   b8f22:	4630      	mov	r0, r6
   b8f24:	f000 fdfa 	bl	b9b1c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8f28:	3e10      	subs	r6, #16
   b8f2a:	3c10      	subs	r4, #16
   b8f2c:	e7f2      	b.n	b8f14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b8f2e:	d00c      	beq.n	b8f4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b8f30:	42b5      	cmp	r5, r6
   b8f32:	d00a      	beq.n	b8f4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b8f34:	b11c      	cbz	r4, b8f3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b8f36:	4629      	mov	r1, r5
   b8f38:	4620      	mov	r0, r4
   b8f3a:	f000 fe57 	bl	b9bec <_ZN6StringC1EOS_>
                p->~T();
   b8f3e:	4628      	mov	r0, r5
   b8f40:	f000 fdec 	bl	b9b1c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8f44:	3510      	adds	r5, #16
   b8f46:	3410      	adds	r4, #16
   b8f48:	e7f2      	b.n	b8f30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b8f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8f4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8f4c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8f4e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8f50:	4605      	mov	r5, r0
        if (n > 0) {
   b8f52:	dd11      	ble.n	b8f78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8f54:	0130      	lsls	r0, r6, #4
   b8f56:	f7fe fb53 	bl	b7600 <malloc>
            if (!d) {
   b8f5a:	4604      	mov	r4, r0
   b8f5c:	b158      	cbz	r0, b8f76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8f5e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8f62:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b8f66:	f7ff ffc7 	bl	b8ef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b8f6a:	6828      	ldr	r0, [r5, #0]
   b8f6c:	f7fe fb50 	bl	b7610 <free>
        data_ = d;
   b8f70:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8f72:	60ae      	str	r6, [r5, #8]
        return true;
   b8f74:	2001      	movs	r0, #1
    }
   b8f76:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8f78:	2400      	movs	r4, #0
   b8f7a:	e7f6      	b.n	b8f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b8f7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f80:	4690      	mov	r8, r2
   b8f82:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8f84:	2300      	movs	r3, #0
   b8f86:	9103      	str	r1, [sp, #12]
    return size_;
   b8f88:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8f8c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8f8e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8f90:	4299      	cmp	r1, r3
        capacity_(0) {
   b8f92:	e9c0 3300 	strd	r3, r3, [r0]
   b8f96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8f9e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8fa2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8fa4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8fa6:	dc23      	bgt.n	b8ff0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8fa8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8fac:	2314      	movs	r3, #20
   b8fae:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8fb2:	42af      	cmp	r7, r5
   b8fb4:	d03b      	beq.n	b902e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b8fb6:	4629      	mov	r1, r5
   b8fb8:	a80b      	add	r0, sp, #44	; 0x2c
   b8fba:	f000 fe17 	bl	b9bec <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8fbe:	a90b      	add	r1, sp, #44	; 0x2c
   b8fc0:	a80f      	add	r0, sp, #60	; 0x3c
   b8fc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8fc4:	f000 fe12 	bl	b9bec <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8fc8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8fcc:	4299      	cmp	r1, r3
   b8fce:	da1b      	bge.n	b9008 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8fd0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8fd4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8fd8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8fdc:	4631      	mov	r1, r6
   b8fde:	f106 0010 	add.w	r0, r6, #16
   b8fe2:	f7ff ff89 	bl	b8ef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b8fe6:	b9ee      	cbnz	r6, b9024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8fea:	3301      	adds	r3, #1
   b8fec:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8fee:	e011      	b.n	b9014 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8ff0:	a808      	add	r0, sp, #32
   b8ff2:	f7ff ffab 	bl	b8f4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8ff6:	2800      	cmp	r0, #0
   b8ff8:	d1d6      	bne.n	b8fa8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b8ffa:	a808      	add	r0, sp, #32
   b8ffc:	f7fe fb83 	bl	b7706 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9000:	4620      	mov	r0, r4
   b9002:	b015      	add	sp, #84	; 0x54
   b9004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9008:	3101      	adds	r1, #1
   b900a:	a808      	add	r0, sp, #32
   b900c:	f7ff ff9e 	bl	b8f4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9010:	2800      	cmp	r0, #0
   b9012:	d1dd      	bne.n	b8fd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9014:	a80f      	add	r0, sp, #60	; 0x3c
   b9016:	f000 fd81 	bl	b9b1c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b901a:	a80b      	add	r0, sp, #44	; 0x2c
   b901c:	f000 fd7e 	bl	b9b1c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9020:	3514      	adds	r5, #20
   b9022:	e7c6      	b.n	b8fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9024:	a90f      	add	r1, sp, #60	; 0x3c
   b9026:	4630      	mov	r0, r6
   b9028:	f000 fde0 	bl	b9bec <_ZN6StringC1EOS_>
   b902c:	e7dc      	b.n	b8fe8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b902e:	2600      	movs	r6, #0
   b9030:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9034:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9036:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b903a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b903e:	429e      	cmp	r6, r3
   b9040:	da7c      	bge.n	b913c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9042:	0133      	lsls	r3, r6, #4
   b9044:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9046:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9048:	b90b      	cbnz	r3, b904e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b904a:	3601      	adds	r6, #1
   b904c:	e7f5      	b.n	b903a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b904e:	2300      	movs	r3, #0
   b9050:	9307      	str	r3, [sp, #28]
   b9052:	fb09 f306 	mul.w	r3, r9, r6
   b9056:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9058:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b905a:	a907      	add	r1, sp, #28
   b905c:	a806      	add	r0, sp, #24
   b905e:	f7ff fb22 	bl	b86a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9062:	4682      	mov	sl, r0
   b9064:	2800      	cmp	r0, #0
   b9066:	d0f0      	beq.n	b904a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9068:	f04f 0300 	mov.w	r3, #0
   b906c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9070:	4601      	mov	r1, r0
   b9072:	9a07      	ldr	r2, [sp, #28]
   b9074:	f10d 0317 	add.w	r3, sp, #23
   b9078:	4628      	mov	r0, r5
   b907a:	f7ff fbb1 	bl	b87e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b907e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9082:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9084:	2f00      	cmp	r7, #0
   b9086:	d14a      	bne.n	b911e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9088:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b908c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9090:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9094:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9098:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b909c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b90a0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b90a2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b90a6:	4293      	cmp	r3, r2
   b90a8:	db17      	blt.n	b90da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b90aa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b90ae:	f1ba 0f00 	cmp.w	sl, #0
   b90b2:	dd30      	ble.n	b9116 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b90b4:	fb09 f00a 	mul.w	r0, r9, sl
   b90b8:	f7fe faa2 	bl	b7600 <malloc>
            if (!d) {
   b90bc:	4683      	mov	fp, r0
   b90be:	b360      	cbz	r0, b911a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b90c0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b90c4:	fb09 1202 	mla	r2, r9, r2, r1
   b90c8:	f7ff feea 	bl	b8ea0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b90cc:	6828      	ldr	r0, [r5, #0]
   b90ce:	f7fe fa9f 	bl	b7610 <free>
        data_ = d;
   b90d2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b90d6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b90da:	682b      	ldr	r3, [r5, #0]
   b90dc:	9a01      	ldr	r2, [sp, #4]
   b90de:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b90e2:	686a      	ldr	r2, [r5, #4]
   b90e4:	4651      	mov	r1, sl
   b90e6:	fb09 3202 	mla	r2, r9, r2, r3
   b90ea:	f10a 0014 	add.w	r0, sl, #20
   b90ee:	f7ff fed7 	bl	b8ea0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b90f2:	f1ba 0f00 	cmp.w	sl, #0
   b90f6:	d003      	beq.n	b9100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b90f8:	a90f      	add	r1, sp, #60	; 0x3c
   b90fa:	4650      	mov	r0, sl
   b90fc:	f7ff fb5d 	bl	b87ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9100:	686b      	ldr	r3, [r5, #4]
   b9102:	3301      	adds	r3, #1
   b9104:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9106:	a811      	add	r0, sp, #68	; 0x44
   b9108:	f7ff fcdc 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b910c:	b13f      	cbz	r7, b911e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b910e:	a80b      	add	r0, sp, #44	; 0x2c
   b9110:	f7ff fcd8 	bl	b8ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9114:	e771      	b.n	b8ffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9116:	46bb      	mov	fp, r7
   b9118:	e7d8      	b.n	b90cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b911a:	2701      	movs	r7, #1
   b911c:	e7f3      	b.n	b9106 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b911e:	9b01      	ldr	r3, [sp, #4]
   b9120:	682d      	ldr	r5, [r5, #0]
   b9122:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9126:	9b06      	ldr	r3, [sp, #24]
   b9128:	781b      	ldrb	r3, [r3, #0]
   b912a:	b92b      	cbnz	r3, b9138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b912c:	f8d8 3000 	ldr.w	r3, [r8]
   b9130:	9a02      	ldr	r2, [sp, #8]
   b9132:	4413      	add	r3, r2
   b9134:	7c1b      	ldrb	r3, [r3, #16]
   b9136:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9138:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b913a:	e78e      	b.n	b905a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b913c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b913e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9140:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9142:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9144:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9146:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b914a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b914c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b914e:	60a2      	str	r2, [r4, #8]
   b9150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9152:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9154:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9156:	60e2      	str	r2, [r4, #12]
   b9158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b915a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b915c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b915e:	6122      	str	r2, [r4, #16]
   b9160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9162:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9164:	9b03      	ldr	r3, [sp, #12]
   b9166:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9168:	6162      	str	r2, [r4, #20]
   b916a:	7623      	strb	r3, [r4, #24]
   b916c:	e7cf      	b.n	b910e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9170 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9170:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9172:	4604      	mov	r4, r0
   b9174:	b087      	sub	sp, #28
   b9176:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9178:	4626      	mov	r6, r4
        stream_(&stream) {
   b917a:	4619      	mov	r1, r3
   b917c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b917e:	4617      	mov	r7, r2
        stream_(&stream) {
   b9180:	f7fb fb01 	bl	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9184:	4b0b      	ldr	r3, [pc, #44]	; (b91b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9186:	f846 3b04 	str.w	r3, [r6], #4
   b918a:	4669      	mov	r1, sp
   b918c:	a803      	add	r0, sp, #12
   b918e:	f7fb fafa 	bl	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9192:	aa03      	add	r2, sp, #12
   b9194:	4639      	mov	r1, r7
   b9196:	4630      	mov	r0, r6
   b9198:	f7ff fef0 	bl	b8f7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b919c:	a803      	add	r0, sp, #12
   b919e:	f7fb fab1 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b91a2:	4668      	mov	r0, sp
   b91a4:	f7fb faae 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b91a8:	4b03      	ldr	r3, [pc, #12]	; (b91b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b91aa:	6023      	str	r3, [r4, #0]
}
   b91ac:	4620      	mov	r0, r4
        stream_(&stream) {
   b91ae:	6225      	str	r5, [r4, #32]
}
   b91b0:	b007      	add	sp, #28
   b91b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b91b4:	000bdf00 	.word	0x000bdf00
   b91b8:	000be650 	.word	0x000be650

000b91bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b91bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b91be:	460f      	mov	r7, r1
   b91c0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b91c2:	491d      	ldr	r1, [pc, #116]	; (b9238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b91c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b91c6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b91c8:	4616      	mov	r6, r2
   b91ca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b91cc:	f002 fd59 	bl	bbc82 <strcmp>
   b91d0:	b9c0      	cbnz	r0, b9204 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b91d2:	b1a4      	cbz	r4, b91fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b91d4:	4629      	mov	r1, r5
   b91d6:	a801      	add	r0, sp, #4
   b91d8:	f7ff fcbc 	bl	b8b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b91dc:	4917      	ldr	r1, [pc, #92]	; (b923c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b91de:	2024      	movs	r0, #36	; 0x24
   b91e0:	f001 fdce 	bl	bad80 <_ZnwjRKSt9nothrow_t>
   b91e4:	4605      	mov	r5, r0
   b91e6:	b130      	cbz	r0, b91f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b91e8:	ab01      	add	r3, sp, #4
   b91ea:	4632      	mov	r2, r6
   b91ec:	4621      	mov	r1, r4
   b91ee:	f7ff ffbf 	bl	b9170 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b91f2:	4b13      	ldr	r3, [pc, #76]	; (b9240 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b91f4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b91f6:	a801      	add	r0, sp, #4
   b91f8:	f7fb fa84 	bl	b4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b91fc:	462c      	mov	r4, r5
}
   b91fe:	4620      	mov	r0, r4
   b9200:	b005      	add	sp, #20
   b9202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9204:	490f      	ldr	r1, [pc, #60]	; (b9244 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9206:	4638      	mov	r0, r7
   b9208:	f002 fd3b 	bl	bbc82 <strcmp>
   b920c:	b990      	cbnz	r0, b9234 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b920e:	2c00      	cmp	r4, #0
   b9210:	d0f5      	beq.n	b91fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9212:	4629      	mov	r1, r5
   b9214:	a801      	add	r0, sp, #4
   b9216:	f7ff fc9d 	bl	b8b54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b921a:	4908      	ldr	r1, [pc, #32]	; (b923c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b921c:	2024      	movs	r0, #36	; 0x24
   b921e:	f001 fdaf 	bl	bad80 <_ZnwjRKSt9nothrow_t>
   b9222:	4605      	mov	r5, r0
   b9224:	2800      	cmp	r0, #0
   b9226:	d0e6      	beq.n	b91f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9228:	ab01      	add	r3, sp, #4
   b922a:	4632      	mov	r2, r6
   b922c:	4621      	mov	r1, r4
   b922e:	f7ff ff9f 	bl	b9170 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9232:	e7e0      	b.n	b91f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9234:	2400      	movs	r4, #0
   b9236:	e7e2      	b.n	b91fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9238:	000be5d9 	.word	0x000be5d9
   b923c:	000be864 	.word	0x000be864
   b9240:	000be668 	.word	0x000be668
   b9244:	000be5dd 	.word	0x000be5dd

000b9248 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9248:	4b01      	ldr	r3, [pc, #4]	; (b9250 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b924a:	4a02      	ldr	r2, [pc, #8]	; (b9254 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b924c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b924e:	4770      	bx	lr
   b9250:	2003e69c 	.word	0x2003e69c
   b9254:	000be5ee 	.word	0x000be5ee

000b9258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b925c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b925e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9262:	4604      	mov	r4, r0
   b9264:	460e      	mov	r6, r1
   b9266:	4617      	mov	r7, r2
   b9268:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b926a:	f001 fb7d 	bl	ba968 <_Z16_fetch_usbserialv>
   b926e:	4581      	cmp	r9, r0
   b9270:	d04c      	beq.n	b930c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9272:	792b      	ldrb	r3, [r5, #4]
   b9274:	0719      	lsls	r1, r3, #28
   b9276:	d504      	bpl.n	b9282 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9278:	696a      	ldr	r2, [r5, #20]
   b927a:	4954      	ldr	r1, [pc, #336]	; (b93cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b927c:	4620      	mov	r0, r4
   b927e:	f7ff fa8d 	bl	b879c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9282:	f1b8 0f00 	cmp.w	r8, #0
   b9286:	d00d      	beq.n	b92a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9288:	215b      	movs	r1, #91	; 0x5b
   b928a:	4620      	mov	r0, r4
   b928c:	f7ff fa7a 	bl	b8784 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9290:	4641      	mov	r1, r8
   b9292:	4620      	mov	r0, r4
   b9294:	f7ff fa67 	bl	b8766 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9298:	6823      	ldr	r3, [r4, #0]
   b929a:	494d      	ldr	r1, [pc, #308]	; (b93d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b929c:	68db      	ldr	r3, [r3, #12]
   b929e:	2202      	movs	r2, #2
   b92a0:	4620      	mov	r0, r4
   b92a2:	4798      	blx	r3
    if (attr.has_file) {
   b92a4:	792b      	ldrb	r3, [r5, #4]
   b92a6:	07da      	lsls	r2, r3, #31
   b92a8:	d523      	bpl.n	b92f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b92aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b92ae:	212f      	movs	r1, #47	; 0x2f
   b92b0:	4640      	mov	r0, r8
   b92b2:	f002 fd45 	bl	bbd40 <strrchr>
    if (s1) {
   b92b6:	b108      	cbz	r0, b92bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b92b8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b92bc:	4641      	mov	r1, r8
   b92be:	4620      	mov	r0, r4
   b92c0:	f7ff fa51 	bl	b8766 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b92c4:	792b      	ldrb	r3, [r5, #4]
   b92c6:	079b      	lsls	r3, r3, #30
   b92c8:	d508      	bpl.n	b92dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b92ca:	213a      	movs	r1, #58	; 0x3a
   b92cc:	4620      	mov	r0, r4
   b92ce:	f7ff fa59 	bl	b8784 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b92d2:	68ea      	ldr	r2, [r5, #12]
   b92d4:	493f      	ldr	r1, [pc, #252]	; (b93d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b92d6:	4620      	mov	r0, r4
   b92d8:	f7ff fa60 	bl	b879c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b92dc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b92de:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b92e0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b92e4:	68db      	ldr	r3, [r3, #12]
   b92e6:	bf14      	ite	ne
   b92e8:	493b      	ldrne	r1, [pc, #236]	; (b93d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b92ea:	493c      	ldreq	r1, [pc, #240]	; (b93dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b92ec:	2202      	movs	r2, #2
            write(": ", 2);
   b92ee:	4620      	mov	r0, r4
   b92f0:	4798      	blx	r3
    if (attr.has_function) {
   b92f2:	792b      	ldrb	r3, [r5, #4]
   b92f4:	0758      	lsls	r0, r3, #29
   b92f6:	d51d      	bpl.n	b9334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b92f8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b92fa:	460b      	mov	r3, r1
   b92fc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b92fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9302:	b160      	cbz	r0, b931e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9304:	2820      	cmp	r0, #32
   b9306:	d108      	bne.n	b931a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9308:	4619      	mov	r1, r3
   b930a:	e7f7      	b.n	b92fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b930c:	4834      	ldr	r0, [pc, #208]	; (b93e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b930e:	f000 f966 	bl	b95de <_ZN5spark12NetworkClass9listeningEv>
   b9312:	2800      	cmp	r0, #0
   b9314:	d0ad      	beq.n	b9272 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b9316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b931a:	2828      	cmp	r0, #40	; 0x28
   b931c:	d1ee      	bne.n	b92fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b931e:	6823      	ldr	r3, [r4, #0]
   b9320:	1a52      	subs	r2, r2, r1
   b9322:	68db      	ldr	r3, [r3, #12]
   b9324:	4620      	mov	r0, r4
   b9326:	4798      	blx	r3
        write("(): ", 4);
   b9328:	6823      	ldr	r3, [r4, #0]
   b932a:	492e      	ldr	r1, [pc, #184]	; (b93e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b932c:	68db      	ldr	r3, [r3, #12]
   b932e:	2204      	movs	r2, #4
   b9330:	4620      	mov	r0, r4
   b9332:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9334:	2100      	movs	r1, #0
   b9336:	4638      	mov	r0, r7
   b9338:	f7fe f87c 	bl	b7434 <log_level_name>
   b933c:	4601      	mov	r1, r0
    write(s);
   b933e:	4620      	mov	r0, r4
   b9340:	f7ff fa11 	bl	b8766 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b9344:	6823      	ldr	r3, [r4, #0]
   b9346:	4925      	ldr	r1, [pc, #148]	; (b93dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b9348:	68db      	ldr	r3, [r3, #12]
   b934a:	2202      	movs	r2, #2
   b934c:	4620      	mov	r0, r4
   b934e:	4798      	blx	r3
    if (msg) {
   b9350:	b11e      	cbz	r6, b935a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b9352:	4631      	mov	r1, r6
   b9354:	4620      	mov	r0, r4
   b9356:	f7ff fa06 	bl	b8766 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b935a:	792b      	ldrb	r3, [r5, #4]
   b935c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b9360:	d02c      	beq.n	b93bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b9362:	6823      	ldr	r3, [r4, #0]
   b9364:	4920      	ldr	r1, [pc, #128]	; (b93e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b9366:	68db      	ldr	r3, [r3, #12]
   b9368:	2202      	movs	r2, #2
   b936a:	4620      	mov	r0, r4
   b936c:	4798      	blx	r3
        if (attr.has_code) {
   b936e:	792b      	ldrb	r3, [r5, #4]
   b9370:	06d9      	lsls	r1, r3, #27
   b9372:	d50a      	bpl.n	b938a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b9374:	6823      	ldr	r3, [r4, #0]
   b9376:	491d      	ldr	r1, [pc, #116]	; (b93ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b9378:	68db      	ldr	r3, [r3, #12]
   b937a:	2207      	movs	r2, #7
   b937c:	4620      	mov	r0, r4
   b937e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b9380:	69aa      	ldr	r2, [r5, #24]
   b9382:	491b      	ldr	r1, [pc, #108]	; (b93f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b9384:	4620      	mov	r0, r4
   b9386:	f7ff fa09 	bl	b879c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b938a:	792b      	ldrb	r3, [r5, #4]
   b938c:	069a      	lsls	r2, r3, #26
   b938e:	d511      	bpl.n	b93b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b9390:	06db      	lsls	r3, r3, #27
   b9392:	d505      	bpl.n	b93a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b9394:	6823      	ldr	r3, [r4, #0]
   b9396:	4910      	ldr	r1, [pc, #64]	; (b93d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b9398:	68db      	ldr	r3, [r3, #12]
   b939a:	2202      	movs	r2, #2
   b939c:	4620      	mov	r0, r4
   b939e:	4798      	blx	r3
            write("details = ", 10);
   b93a0:	6823      	ldr	r3, [r4, #0]
   b93a2:	4914      	ldr	r1, [pc, #80]	; (b93f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b93a4:	68db      	ldr	r3, [r3, #12]
   b93a6:	4620      	mov	r0, r4
   b93a8:	220a      	movs	r2, #10
   b93aa:	4798      	blx	r3
            write(attr.details);
   b93ac:	69e9      	ldr	r1, [r5, #28]
   b93ae:	4620      	mov	r0, r4
   b93b0:	f7ff f9d9 	bl	b8766 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b93b4:	215d      	movs	r1, #93	; 0x5d
   b93b6:	4620      	mov	r0, r4
   b93b8:	f7ff f9e4 	bl	b8784 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b93bc:	6823      	ldr	r3, [r4, #0]
   b93be:	490e      	ldr	r1, [pc, #56]	; (b93f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b93c0:	68db      	ldr	r3, [r3, #12]
   b93c2:	4620      	mov	r0, r4
   b93c4:	2202      	movs	r2, #2
}
   b93c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b93ca:	4718      	bx	r3
   b93cc:	000be5f2 	.word	0x000be5f2
   b93d0:	000be5f9 	.word	0x000be5f9
   b93d4:	000be70c 	.word	0x000be70c
   b93d8:	000be5fc 	.word	0x000be5fc
   b93dc:	000be601 	.word	0x000be601
   b93e0:	2003e6c8 	.word	0x2003e6c8
   b93e4:	000be5ff 	.word	0x000be5ff
   b93e8:	000be604 	.word	0x000be604
   b93ec:	000be607 	.word	0x000be607
   b93f0:	000be60f 	.word	0x000be60f
   b93f4:	000be612 	.word	0x000be612
   b93f8:	000be189 	.word	0x000be189

000b93fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b93fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9400:	b085      	sub	sp, #20
    return stream_;
   b9402:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b9406:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b9408:	4605      	mov	r5, r0
   b940a:	460f      	mov	r7, r1
   b940c:	4690      	mov	r8, r2
   b940e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b9410:	f001 faaa 	bl	ba968 <_Z16_fetch_usbserialv>
   b9414:	4581      	cmp	r9, r0
   b9416:	d105      	bne.n	b9424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b9418:	4849      	ldr	r0, [pc, #292]	; (b9540 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b941a:	f000 f8e0 	bl	b95de <_ZN5spark12NetworkClass9listeningEv>
   b941e:	2800      	cmp	r0, #0
   b9420:	f040 808a 	bne.w	b9538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b9424:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b9426:	4a47      	ldr	r2, [pc, #284]	; (b9544 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b9428:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b942a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b942e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b9430:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b9432:	f88d 9008 	strb.w	r9, [sp, #8]
   b9436:	f7ff f878 	bl	b852a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b943a:	4649      	mov	r1, r9
   b943c:	4640      	mov	r0, r8
   b943e:	f7fd fff9 	bl	b7434 <log_level_name>
    json.name("l", 1).value(s);
   b9442:	4941      	ldr	r1, [pc, #260]	; (b9548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b9444:	4680      	mov	r8, r0
   b9446:	2201      	movs	r2, #1
   b9448:	a801      	add	r0, sp, #4
   b944a:	f7ff f8fd 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b944e:	4641      	mov	r1, r8
   b9450:	f7ff f97b 	bl	b874a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b9454:	b13f      	cbz	r7, b9466 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b9456:	493d      	ldr	r1, [pc, #244]	; (b954c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b9458:	2201      	movs	r2, #1
   b945a:	a801      	add	r0, sp, #4
   b945c:	f7ff f8f4 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b9460:	4639      	mov	r1, r7
   b9462:	f7ff f972 	bl	b874a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b9466:	b13e      	cbz	r6, b9478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b9468:	4939      	ldr	r1, [pc, #228]	; (b9550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b946a:	2201      	movs	r2, #1
   b946c:	a801      	add	r0, sp, #4
   b946e:	f7ff f8eb 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b9472:	4631      	mov	r1, r6
   b9474:	f7ff f969 	bl	b874a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b9478:	7923      	ldrb	r3, [r4, #4]
   b947a:	07df      	lsls	r7, r3, #31
   b947c:	d50e      	bpl.n	b949c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b947e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b9480:	212f      	movs	r1, #47	; 0x2f
   b9482:	4630      	mov	r0, r6
   b9484:	f002 fc5c 	bl	bbd40 <strrchr>
    if (s1) {
   b9488:	b100      	cbz	r0, b948c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b948a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b948c:	4931      	ldr	r1, [pc, #196]	; (b9554 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b948e:	2201      	movs	r2, #1
   b9490:	a801      	add	r0, sp, #4
   b9492:	f7ff f8d9 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b9496:	4631      	mov	r1, r6
   b9498:	f7ff f957 	bl	b874a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b949c:	7923      	ldrb	r3, [r4, #4]
   b949e:	079e      	lsls	r6, r3, #30
   b94a0:	d507      	bpl.n	b94b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b94a2:	492d      	ldr	r1, [pc, #180]	; (b9558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b94a4:	2202      	movs	r2, #2
   b94a6:	a801      	add	r0, sp, #4
   b94a8:	f7ff f8ce 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b94ac:	68e1      	ldr	r1, [r4, #12]
   b94ae:	f7ff f849 	bl	b8544 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b94b2:	7923      	ldrb	r3, [r4, #4]
   b94b4:	0758      	lsls	r0, r3, #29
   b94b6:	d514      	bpl.n	b94e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b94b8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b94ba:	4633      	mov	r3, r6
   b94bc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b94be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b94c2:	b12a      	cbz	r2, b94d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b94c4:	2a20      	cmp	r2, #32
   b94c6:	d101      	bne.n	b94cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b94c8:	461e      	mov	r6, r3
   b94ca:	e7f7      	b.n	b94bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b94cc:	2a28      	cmp	r2, #40	; 0x28
   b94ce:	d1f5      	bne.n	b94bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b94d0:	4922      	ldr	r1, [pc, #136]	; (b955c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b94d2:	2202      	movs	r2, #2
   b94d4:	a801      	add	r0, sp, #4
   b94d6:	f7ff f8b7 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b94da:	1bba      	subs	r2, r7, r6
   b94dc:	4631      	mov	r1, r6
   b94de:	f7ff f8c3 	bl	b8668 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b94e2:	7923      	ldrb	r3, [r4, #4]
   b94e4:	0719      	lsls	r1, r3, #28
   b94e6:	d507      	bpl.n	b94f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b94e8:	491d      	ldr	r1, [pc, #116]	; (b9560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b94ea:	2201      	movs	r2, #1
   b94ec:	a801      	add	r0, sp, #4
   b94ee:	f7ff f8ab 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b94f2:	6961      	ldr	r1, [r4, #20]
   b94f4:	f7ff f838 	bl	b8568 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b94f8:	7923      	ldrb	r3, [r4, #4]
   b94fa:	06da      	lsls	r2, r3, #27
   b94fc:	d508      	bpl.n	b9510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b94fe:	2204      	movs	r2, #4
   b9500:	4918      	ldr	r1, [pc, #96]	; (b9564 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b9502:	eb0d 0002 	add.w	r0, sp, r2
   b9506:	f7ff f89f 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b950a:	69a1      	ldr	r1, [r4, #24]
   b950c:	f7ff f81a 	bl	b8544 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b9510:	7923      	ldrb	r3, [r4, #4]
   b9512:	069b      	lsls	r3, r3, #26
   b9514:	d507      	bpl.n	b9526 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b9516:	4914      	ldr	r1, [pc, #80]	; (b9568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b9518:	2206      	movs	r2, #6
   b951a:	a801      	add	r0, sp, #4
   b951c:	f7ff f894 	bl	b8648 <_ZN5spark10JSONWriter4nameEPKcj>
   b9520:	69e1      	ldr	r1, [r4, #28]
   b9522:	f7ff f912 	bl	b874a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b9526:	a801      	add	r0, sp, #4
   b9528:	f7fe ffe9 	bl	b84fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b952c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b952e:	490f      	ldr	r1, [pc, #60]	; (b956c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b9530:	6803      	ldr	r3, [r0, #0]
   b9532:	2202      	movs	r2, #2
   b9534:	68db      	ldr	r3, [r3, #12]
   b9536:	4798      	blx	r3
}
   b9538:	b005      	add	sp, #20
   b953a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b953e:	bf00      	nop
   b9540:	2003e6c8 	.word	0x2003e6c8
   b9544:	000be638 	.word	0x000be638
   b9548:	000be5cf 	.word	0x000be5cf
   b954c:	000be449 	.word	0x000be449
   b9550:	000bec5a 	.word	0x000bec5a
   b9554:	000bde23 	.word	0x000bde23
   b9558:	000be61d 	.word	0x000be61d
   b955c:	000be620 	.word	0x000be620
   b9560:	000be2d5 	.word	0x000be2d5
   b9564:	000be623 	.word	0x000be623
   b9568:	000be628 	.word	0x000be628
   b956c:	000be189 	.word	0x000be189

000b9570 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9570:	2300      	movs	r3, #0
   b9572:	6840      	ldr	r0, [r0, #4]
   b9574:	461a      	mov	r2, r3
   b9576:	f7fd bfe3 	b.w	b7540 <network_connect>

000b957a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b957a:	6840      	ldr	r0, [r0, #4]
   b957c:	2200      	movs	r2, #0
   b957e:	2102      	movs	r1, #2
   b9580:	f7fd bfee 	b.w	b7560 <network_disconnect>

000b9584 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9584:	2200      	movs	r2, #0
   b9586:	6840      	ldr	r0, [r0, #4]
   b9588:	4611      	mov	r1, r2
   b958a:	f7fd bfe1 	b.w	b7550 <network_connecting>

000b958e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b958e:	2200      	movs	r2, #0
   b9590:	6840      	ldr	r0, [r0, #4]
   b9592:	4611      	mov	r1, r2
   b9594:	f7fd bfec 	b.w	b7570 <network_ready>

000b9598 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9598:	2300      	movs	r3, #0
   b959a:	6840      	ldr	r0, [r0, #4]
   b959c:	461a      	mov	r2, r3
   b959e:	4619      	mov	r1, r3
   b95a0:	f7fd bfee 	b.w	b7580 <network_on>

000b95a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b95a4:	2300      	movs	r3, #0
   b95a6:	6840      	ldr	r0, [r0, #4]
   b95a8:	461a      	mov	r2, r3
   b95aa:	4619      	mov	r1, r3
   b95ac:	f7fd bff0 	b.w	b7590 <network_off>

000b95b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b95b0:	6840      	ldr	r0, [r0, #4]
   b95b2:	2100      	movs	r1, #0
   b95b4:	f7fe b814 	b.w	b75e0 <network_is_on>

000b95b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b95b8:	6840      	ldr	r0, [r0, #4]
   b95ba:	2100      	movs	r1, #0
   b95bc:	f7fe b818 	b.w	b75f0 <network_is_off>

000b95c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b95c0:	6840      	ldr	r0, [r0, #4]
   b95c2:	2200      	movs	r2, #0
   b95c4:	f081 0101 	eor.w	r1, r1, #1
   b95c8:	f7fd bfea 	b.w	b75a0 <network_listen>

000b95cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b95cc:	6840      	ldr	r0, [r0, #4]
   b95ce:	2200      	movs	r2, #0
   b95d0:	f7fd bff6 	b.w	b75c0 <network_set_listen_timeout>

000b95d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b95d4:	2200      	movs	r2, #0
   b95d6:	6840      	ldr	r0, [r0, #4]
   b95d8:	4611      	mov	r1, r2
   b95da:	f7fd bff9 	b.w	b75d0 <network_get_listen_timeout>

000b95de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b95de:	2200      	movs	r2, #0
   b95e0:	6840      	ldr	r0, [r0, #4]
   b95e2:	4611      	mov	r1, r2
   b95e4:	f7fd bfe4 	b.w	b75b0 <network_listening>

000b95e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b95e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b95ec:	b095      	sub	sp, #84	; 0x54
   b95ee:	4614      	mov	r4, r2
   b95f0:	460d      	mov	r5, r1
   b95f2:	4607      	mov	r7, r0
    IPAddress addr;
   b95f4:	f7fe fe10 	bl	b8218 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b95f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b95fa:	221c      	movs	r2, #28
   b95fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b95fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9600:	f002 faf2 	bl	bbbe8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9604:	2340      	movs	r3, #64	; 0x40
   b9606:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9608:	4620      	mov	r0, r4
   b960a:	466b      	mov	r3, sp
   b960c:	aa0c      	add	r2, sp, #48	; 0x30
   b960e:	2100      	movs	r1, #0
   b9610:	f7fd fde0 	bl	b71d4 <netdb_getaddrinfo>
    if (!r) {
   b9614:	4604      	mov	r4, r0
   b9616:	2800      	cmp	r0, #0
   b9618:	d14b      	bne.n	b96b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b961a:	4602      	mov	r2, r0
   b961c:	2101      	movs	r1, #1
   b961e:	6868      	ldr	r0, [r5, #4]
   b9620:	f7fd ffa6 	bl	b7570 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9624:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9626:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9628:	4622      	mov	r2, r4
   b962a:	6868      	ldr	r0, [r5, #4]
   b962c:	f7fd ffa0 	bl	b7570 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9630:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9632:	4681      	mov	r9, r0
        bool ok = false;
   b9634:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9636:	2e00      	cmp	r6, #0
   b9638:	d03b      	beq.n	b96b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b963a:	2900      	cmp	r1, #0
   b963c:	d139      	bne.n	b96b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b963e:	6873      	ldr	r3, [r6, #4]
   b9640:	2b02      	cmp	r3, #2
   b9642:	d003      	beq.n	b964c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9644:	2b0a      	cmp	r3, #10
   b9646:	d011      	beq.n	b966c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9648:	69f6      	ldr	r6, [r6, #28]
   b964a:	e7f4      	b.n	b9636 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b964c:	f1b8 0f00 	cmp.w	r8, #0
   b9650:	d0fa      	beq.n	b9648 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9652:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9654:	a806      	add	r0, sp, #24
   b9656:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9658:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b965a:	f7fe fe2d 	bl	b82b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b965e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9660:	1d3c      	adds	r4, r7, #4
   b9662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9664:	682b      	ldr	r3, [r5, #0]
   b9666:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9668:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b966a:	e7ed      	b.n	b9648 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b966c:	f1b9 0f00 	cmp.w	r9, #0
   b9670:	d0ea      	beq.n	b9648 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9672:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9674:	2210      	movs	r2, #16
   b9676:	a801      	add	r0, sp, #4
   b9678:	f002 fab6 	bl	bbbe8 <memset>
                    a.v = 6;
   b967c:	2306      	movs	r3, #6
   b967e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9682:	ad01      	add	r5, sp, #4
   b9684:	f104 0308 	add.w	r3, r4, #8
   b9688:	3418      	adds	r4, #24
   b968a:	6818      	ldr	r0, [r3, #0]
   b968c:	6859      	ldr	r1, [r3, #4]
   b968e:	462a      	mov	r2, r5
   b9690:	c203      	stmia	r2!, {r0, r1}
   b9692:	3308      	adds	r3, #8
   b9694:	42a3      	cmp	r3, r4
   b9696:	4615      	mov	r5, r2
   b9698:	d1f7      	bne.n	b968a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b969a:	a901      	add	r1, sp, #4
   b969c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b969e:	ad07      	add	r5, sp, #28
   b96a0:	f7fe fdc8 	bl	b8234 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b96a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96a6:	1d3c      	adds	r4, r7, #4
   b96a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96aa:	682b      	ldr	r3, [r5, #0]
   b96ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b96ae:	4649      	mov	r1, r9
   b96b0:	e7ca      	b.n	b9648 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b96b2:	9800      	ldr	r0, [sp, #0]
   b96b4:	f7fd fd86 	bl	b71c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b96b8:	4638      	mov	r0, r7
   b96ba:	b015      	add	sp, #84	; 0x54
   b96bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b96c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b96c0:	4b02      	ldr	r3, [pc, #8]	; (b96cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b96c2:	4a03      	ldr	r2, [pc, #12]	; (b96d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b96c4:	601a      	str	r2, [r3, #0]
   b96c6:	2200      	movs	r2, #0
   b96c8:	605a      	str	r2, [r3, #4]

} // spark
   b96ca:	4770      	bx	lr
   b96cc:	2003e6c8 	.word	0x2003e6c8
   b96d0:	000be6b0 	.word	0x000be6b0

000b96d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b96d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96d6:	4606      	mov	r6, r0
   b96d8:	460d      	mov	r5, r1
  size_t n = 0;
   b96da:	188f      	adds	r7, r1, r2
   b96dc:	2400      	movs	r4, #0
  while (size--) {
   b96de:	42bd      	cmp	r5, r7
   b96e0:	d00c      	beq.n	b96fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b96e2:	6833      	ldr	r3, [r6, #0]
   b96e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b96e8:	689b      	ldr	r3, [r3, #8]
   b96ea:	4630      	mov	r0, r6
   b96ec:	4798      	blx	r3
     if (chunk>=0)
   b96ee:	1e03      	subs	r3, r0, #0
   b96f0:	db01      	blt.n	b96f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b96f2:	441c      	add	r4, r3
  while (size--) {
   b96f4:	e7f3      	b.n	b96de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b96f6:	2c00      	cmp	r4, #0
   b96f8:	bf08      	it	eq
   b96fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b96fc:	4620      	mov	r0, r4
   b96fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9700 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b9700:	b513      	push	{r0, r1, r4, lr}
   b9702:	4604      	mov	r4, r0
    }
   b9704:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9706:	b159      	cbz	r1, b9720 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9708:	9101      	str	r1, [sp, #4]
   b970a:	f002 faea 	bl	bbce2 <strlen>
   b970e:	6823      	ldr	r3, [r4, #0]
   b9710:	9901      	ldr	r1, [sp, #4]
   b9712:	68db      	ldr	r3, [r3, #12]
   b9714:	4602      	mov	r2, r0
   b9716:	4620      	mov	r0, r4
    }
   b9718:	b002      	add	sp, #8
   b971a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b971e:	4718      	bx	r3
    }
   b9720:	b002      	add	sp, #8
   b9722:	bd10      	pop	{r4, pc}

000b9724 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9724:	b508      	push	{r3, lr}
  return write(str);
   b9726:	f7ff ffeb 	bl	b9700 <_ZN5Print5writeEPKc>
}
   b972a:	bd08      	pop	{r3, pc}

000b972c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b972c:	6803      	ldr	r3, [r0, #0]
   b972e:	689b      	ldr	r3, [r3, #8]
   b9730:	4718      	bx	r3

000b9732 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9732:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9734:	210d      	movs	r1, #13
{
   b9736:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9738:	f7ff fff8 	bl	b972c <_ZN5Print5printEc>
  n += print('\n');
   b973c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b973e:	4604      	mov	r4, r0
  n += print('\n');
   b9740:	4628      	mov	r0, r5
   b9742:	f7ff fff3 	bl	b972c <_ZN5Print5printEc>
  return n;
}
   b9746:	4420      	add	r0, r4
   b9748:	bd38      	pop	{r3, r4, r5, pc}

000b974a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b974a:	b538      	push	{r3, r4, r5, lr}
   b974c:	4605      	mov	r5, r0
  return write(str);
   b974e:	f7ff ffd7 	bl	b9700 <_ZN5Print5writeEPKc>
   b9752:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9754:	4628      	mov	r0, r5
   b9756:	f7ff ffec 	bl	b9732 <_ZN5Print7printlnEv>
  return n;
}
   b975a:	4420      	add	r0, r4
   b975c:	bd38      	pop	{r3, r4, r5, pc}

000b975e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b975e:	b530      	push	{r4, r5, lr}
   b9760:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9762:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9764:	2a01      	cmp	r2, #1
  *str = '\0';
   b9766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b976a:	bf98      	it	ls
   b976c:	220a      	movls	r2, #10
   b976e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9770:	460d      	mov	r5, r1
   b9772:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9776:	fb01 5312 	mls	r3, r1, r2, r5
   b977a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b977e:	2b09      	cmp	r3, #9
   b9780:	bf94      	ite	ls
   b9782:	3330      	addls	r3, #48	; 0x30
   b9784:	3337      	addhi	r3, #55	; 0x37
   b9786:	b2db      	uxtb	r3, r3
  } while(n);
   b9788:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b978a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b978e:	d9ef      	bls.n	b9770 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9790:	4621      	mov	r1, r4
   b9792:	f7ff ffb5 	bl	b9700 <_ZN5Print5writeEPKc>
}
   b9796:	b00b      	add	sp, #44	; 0x2c
   b9798:	bd30      	pop	{r4, r5, pc}
	...

000b979c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b979c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97a0:	ec55 4b10 	vmov	r4, r5, d0
   b97a4:	4606      	mov	r6, r0
   b97a6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b97a8:	ee10 2a10 	vmov	r2, s0
   b97ac:	ee10 0a10 	vmov	r0, s0
   b97b0:	462b      	mov	r3, r5
   b97b2:	4629      	mov	r1, r5
   b97b4:	f002 f90e 	bl	bb9d4 <__aeabi_dcmpun>
   b97b8:	b140      	cbz	r0, b97cc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b97ba:	4953      	ldr	r1, [pc, #332]	; (b9908 <_ZN5Print10printFloatEdh+0x16c>)
   b97bc:	4630      	mov	r0, r6
   b97be:	f7ff ff9f 	bl	b9700 <_ZN5Print5writeEPKc>
   b97c2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b97c4:	4650      	mov	r0, sl
   b97c6:	b003      	add	sp, #12
   b97c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b97cc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b97d0:	4b4e      	ldr	r3, [pc, #312]	; (b990c <_ZN5Print10printFloatEdh+0x170>)
   b97d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b97d6:	4620      	mov	r0, r4
   b97d8:	4649      	mov	r1, r9
   b97da:	f002 f8fb 	bl	bb9d4 <__aeabi_dcmpun>
   b97de:	b948      	cbnz	r0, b97f4 <_ZN5Print10printFloatEdh+0x58>
   b97e0:	4b4a      	ldr	r3, [pc, #296]	; (b990c <_ZN5Print10printFloatEdh+0x170>)
   b97e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b97e6:	4620      	mov	r0, r4
   b97e8:	4649      	mov	r1, r9
   b97ea:	f002 f8d5 	bl	bb998 <__aeabi_dcmple>
   b97ee:	b908      	cbnz	r0, b97f4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b97f0:	4947      	ldr	r1, [pc, #284]	; (b9910 <_ZN5Print10printFloatEdh+0x174>)
   b97f2:	e7e3      	b.n	b97bc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b97f4:	4b47      	ldr	r3, [pc, #284]	; (b9914 <_ZN5Print10printFloatEdh+0x178>)
   b97f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b97fa:	4620      	mov	r0, r4
   b97fc:	4629      	mov	r1, r5
   b97fe:	f002 f8df 	bl	bb9c0 <__aeabi_dcmpgt>
   b9802:	b108      	cbz	r0, b9808 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b9804:	4944      	ldr	r1, [pc, #272]	; (b9918 <_ZN5Print10printFloatEdh+0x17c>)
   b9806:	e7d9      	b.n	b97bc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b9808:	4b44      	ldr	r3, [pc, #272]	; (b991c <_ZN5Print10printFloatEdh+0x180>)
   b980a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b980e:	4620      	mov	r0, r4
   b9810:	4629      	mov	r1, r5
   b9812:	f002 f8b7 	bl	bb984 <__aeabi_dcmplt>
   b9816:	2800      	cmp	r0, #0
   b9818:	d1f4      	bne.n	b9804 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b981a:	2200      	movs	r2, #0
   b981c:	2300      	movs	r3, #0
   b981e:	4620      	mov	r0, r4
   b9820:	4629      	mov	r1, r5
   b9822:	f002 f8af 	bl	bb984 <__aeabi_dcmplt>
   b9826:	b1d0      	cbz	r0, b985e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b9828:	212d      	movs	r1, #45	; 0x2d
   b982a:	4630      	mov	r0, r6
   b982c:	f7ff ff7e 	bl	b972c <_ZN5Print5printEc>
     number = -number;
   b9830:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b9834:	4682      	mov	sl, r0
     number = -number;
   b9836:	461d      	mov	r5, r3
  double rounding = 0.5;
   b9838:	4939      	ldr	r1, [pc, #228]	; (b9920 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b983a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b9928 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b983e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b9842:	2000      	movs	r0, #0
    rounding /= 10.0;
   b9844:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b9848:	fa5f f38b 	uxtb.w	r3, fp
   b984c:	429f      	cmp	r7, r3
   b984e:	d908      	bls.n	b9862 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9850:	4642      	mov	r2, r8
   b9852:	464b      	mov	r3, r9
   b9854:	f001 ff4e 	bl	bb6f4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9858:	f10b 0b01 	add.w	fp, fp, #1
   b985c:	e7f4      	b.n	b9848 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b985e:	4682      	mov	sl, r0
   b9860:	e7ea      	b.n	b9838 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9862:	4622      	mov	r2, r4
   b9864:	462b      	mov	r3, r5
   b9866:	f001 fc65 	bl	bb134 <__adddf3>
   b986a:	460d      	mov	r5, r1
   b986c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b986e:	f002 f8ef 	bl	bba50 <__aeabi_d2uiz>
   b9872:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9874:	f001 fd9a 	bl	bb3ac <__aeabi_ui2d>
   b9878:	4602      	mov	r2, r0
   b987a:	460b      	mov	r3, r1
   b987c:	4620      	mov	r0, r4
   b987e:	4629      	mov	r1, r5
   b9880:	f001 fc56 	bl	bb130 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b9884:	220a      	movs	r2, #10
   b9886:	4604      	mov	r4, r0
   b9888:	460d      	mov	r5, r1
   b988a:	4630      	mov	r0, r6
   b988c:	4641      	mov	r1, r8
   b988e:	f7ff ff66 	bl	b975e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9892:	4482      	add	sl, r0
  if (digits > 0) {
   b9894:	2f00      	cmp	r7, #0
   b9896:	d095      	beq.n	b97c4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9898:	4922      	ldr	r1, [pc, #136]	; (b9924 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b989a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b9928 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b989e:	4630      	mov	r0, r6
   b98a0:	f7ff ff2e 	bl	b9700 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b98a4:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b98a8:	4482      	add	sl, r0
  while (digits-- > 0)
   b98aa:	2f00      	cmp	r7, #0
   b98ac:	d08a      	beq.n	b97c4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b98ae:	4642      	mov	r2, r8
   b98b0:	464b      	mov	r3, r9
   b98b2:	4620      	mov	r0, r4
   b98b4:	4629      	mov	r1, r5
   b98b6:	f001 fdf3 	bl	bb4a0 <__aeabi_dmul>
   b98ba:	4604      	mov	r4, r0
   b98bc:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b98be:	f002 f89f 	bl	bba00 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b98c2:	f1b0 0b00 	subs.w	fp, r0, #0
   b98c6:	da1c      	bge.n	b9902 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b98c8:	212d      	movs	r1, #45	; 0x2d
   b98ca:	4630      	mov	r0, r6
   b98cc:	f7ff ff2e 	bl	b972c <_ZN5Print5printEc>
            val = -n;
   b98d0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b98d4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b98d6:	220a      	movs	r2, #10
   b98d8:	4630      	mov	r0, r6
   b98da:	9301      	str	r3, [sp, #4]
   b98dc:	f7ff ff3f 	bl	b975e <_ZN5Print11printNumberEmh>
   b98e0:	9b01      	ldr	r3, [sp, #4]
   b98e2:	4418      	add	r0, r3
    n += print(toPrint);
   b98e4:	4482      	add	sl, r0
    remainder -= toPrint;
   b98e6:	4658      	mov	r0, fp
   b98e8:	f001 fd70 	bl	bb3cc <__aeabi_i2d>
   b98ec:	4602      	mov	r2, r0
   b98ee:	460b      	mov	r3, r1
   b98f0:	4620      	mov	r0, r4
   b98f2:	4629      	mov	r1, r5
   b98f4:	f001 fc1c 	bl	bb130 <__aeabi_dsub>
   b98f8:	3f01      	subs	r7, #1
   b98fa:	4604      	mov	r4, r0
   b98fc:	460d      	mov	r5, r1
   b98fe:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b9900:	e7d3      	b.n	b98aa <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b9902:	4659      	mov	r1, fp
        size_t t = 0;
   b9904:	2300      	movs	r3, #0
   b9906:	e7e6      	b.n	b98d6 <_ZN5Print10printFloatEdh+0x13a>
   b9908:	000be6e4 	.word	0x000be6e4
   b990c:	7fefffff 	.word	0x7fefffff
   b9910:	000be6e8 	.word	0x000be6e8
   b9914:	41efffff 	.word	0x41efffff
   b9918:	000be6ec 	.word	0x000be6ec
   b991c:	c1efffff 	.word	0xc1efffff
   b9920:	3fe00000 	.word	0x3fe00000
   b9924:	000be106 	.word	0x000be106
   b9928:	40240000 	.word	0x40240000

000b992c <_ZN5Print5printEfi>:
{
   b992c:	b538      	push	{r3, r4, r5, lr}
   b992e:	4604      	mov	r4, r0
   b9930:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b9934:	b2cd      	uxtb	r5, r1
   b9936:	f001 fd5b 	bl	bb3f0 <__aeabi_f2d>
   b993a:	ec41 0b10 	vmov	d0, r0, r1
   b993e:	4629      	mov	r1, r5
   b9940:	4620      	mov	r0, r4
}
   b9942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b9946:	f7ff bf29 	b.w	b979c <_ZN5Print10printFloatEdh>

000b994a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b994a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b994e:	b086      	sub	sp, #24
   b9950:	af00      	add	r7, sp, #0
   b9952:	4605      	mov	r5, r0
   b9954:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9956:	1d38      	adds	r0, r7, #4
   b9958:	2114      	movs	r1, #20
{
   b995a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b995c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b995e:	f7fd fe77 	bl	b7650 <vsnprintf>

    if (n<bufsize)
   b9962:	2813      	cmp	r0, #19
   b9964:	d80e      	bhi.n	b9984 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9966:	1d39      	adds	r1, r7, #4
   b9968:	4628      	mov	r0, r5
   b996a:	f7ff fec9 	bl	b9700 <_ZN5Print5writeEPKc>
   b996e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9970:	b11e      	cbz	r6, b997a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9972:	4628      	mov	r0, r5
   b9974:	f7ff fedd 	bl	b9732 <_ZN5Print7printlnEv>
   b9978:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b997a:	4620      	mov	r0, r4
   b997c:	3718      	adds	r7, #24
   b997e:	46bd      	mov	sp, r7
   b9980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9984:	f100 0308 	add.w	r3, r0, #8
   b9988:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b998c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b998e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9992:	4622      	mov	r2, r4
   b9994:	1c41      	adds	r1, r0, #1
   b9996:	683b      	ldr	r3, [r7, #0]
   b9998:	4668      	mov	r0, sp
   b999a:	f7fd fe59 	bl	b7650 <vsnprintf>
  return write(str);
   b999e:	4669      	mov	r1, sp
   b99a0:	4628      	mov	r0, r5
   b99a2:	f7ff fead 	bl	b9700 <_ZN5Print5writeEPKc>
   b99a6:	4604      	mov	r4, r0
   b99a8:	46c5      	mov	sp, r8
   b99aa:	e7e1      	b.n	b9970 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b99ac <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b99ac:	4b01      	ldr	r3, [pc, #4]	; (b99b4 <_GLOBAL__sub_I_RGB+0x8>)
   b99ae:	2200      	movs	r2, #0
   b99b0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b99b2:	4770      	bx	lr
   b99b4:	2003e6d0 	.word	0x2003e6d0

000b99b8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b99b8:	2100      	movs	r1, #0
   b99ba:	f7fd bc93 	b.w	b72e4 <hal_spi_release>

000b99be <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b99be:	2100      	movs	r1, #0
   b99c0:	f7fd bc88 	b.w	b72d4 <hal_spi_acquire>

000b99c4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b99c4:	b510      	push	{r4, lr}
   b99c6:	4604      	mov	r4, r0
   b99c8:	4608      	mov	r0, r1
{
    _spi = spi;
   b99ca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b99cc:	f7fd fc62 	bl	b7294 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b99d0:	2300      	movs	r3, #0
   b99d2:	6063      	str	r3, [r4, #4]
}
   b99d4:	4620      	mov	r0, r4
   b99d6:	bd10      	pop	{r4, pc}

000b99d8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b99d8:	b513      	push	{r0, r1, r4, lr}
   b99da:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b99dc:	7800      	ldrb	r0, [r0, #0]
   b99de:	f7ff ffee 	bl	b99be <_ZN8SPIClass4lockEv.isra.0>
   b99e2:	b958      	cbnz	r0, b99fc <_ZN8SPIClass5beginEv+0x24>
   b99e4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b99e6:	9001      	str	r0, [sp, #4]
   b99e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b99ec:	f7fd fc42 	bl	b7274 <hal_spi_begin>
        unlock();
   b99f0:	9801      	ldr	r0, [sp, #4]
    }
}
   b99f2:	b002      	add	sp, #8
   b99f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b99f8:	f7ff bfde 	b.w	b99b8 <_ZN8SPIClass6unlockEv.isra.0>
   b99fc:	b002      	add	sp, #8
   b99fe:	bd10      	pop	{r4, pc}

000b9a00 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b9a00:	7800      	ldrb	r0, [r0, #0]
   b9a02:	f7ff bfd9 	b.w	b99b8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b9a08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b9a08:	0840      	lsrs	r0, r0, #1
{
   b9a0a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b9a0c:	6018      	str	r0, [r3, #0]
   b9a0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b9a10:	6818      	ldr	r0, [r3, #0]
   b9a12:	4288      	cmp	r0, r1
   b9a14:	b2e5      	uxtb	r5, r4
   b9a16:	d906      	bls.n	b9a26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b9a18:	3401      	adds	r4, #1
   b9a1a:	2c08      	cmp	r4, #8
   b9a1c:	d002      	beq.n	b9a24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b9a1e:	0840      	lsrs	r0, r0, #1
   b9a20:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b9a22:	e7f5      	b.n	b9a10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b9a24:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b9a26:	4b02      	ldr	r3, [pc, #8]	; (b9a30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b9a28:	5d5b      	ldrb	r3, [r3, r5]
   b9a2a:	7013      	strb	r3, [r2, #0]
}
   b9a2c:	bd30      	pop	{r4, r5, pc}
   b9a2e:	bf00      	nop
   b9a30:	000be6f0 	.word	0x000be6f0

000b9a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b9a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9a38:	4606      	mov	r6, r0
   b9a3a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b9a3c:	7800      	ldrb	r0, [r0, #0]
{
   b9a3e:	460c      	mov	r4, r1
    CHECK(lock());
   b9a40:	f7ff ffbd 	bl	b99be <_ZN8SPIClass4lockEv.isra.0>
   b9a44:	2800      	cmp	r0, #0
   b9a46:	db1b      	blt.n	b9a80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b9a48:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b9a4a:	2214      	movs	r2, #20
   b9a4c:	2100      	movs	r1, #0
   b9a4e:	a809      	add	r0, sp, #36	; 0x24
   b9a50:	f002 f8ca 	bl	bbbe8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b9a54:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b9a56:	2200      	movs	r2, #0
   b9a58:	a909      	add	r1, sp, #36	; 0x24
   b9a5a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b9a5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b9a60:	f7fd fc28 	bl	b72b4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b9a64:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b9a68:	b113      	cbz	r3, b9a70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b9a6a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b9a6e:	b155      	cbz	r5, b9a86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b9a70:	2700      	movs	r7, #0
   b9a72:	46b9      	mov	r9, r7
   b9a74:	46b8      	mov	r8, r7
   b9a76:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b9a78:	7923      	ldrb	r3, [r4, #4]
   b9a7a:	b15d      	cbz	r5, b9a94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b9a7c:	b1c3      	cbz	r3, b9ab0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b9a7e:	2000      	movs	r0, #0
}
   b9a80:	b00f      	add	sp, #60	; 0x3c
   b9a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b9a86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b9a8a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b9a8e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b9a92:	e7f1      	b.n	b9a78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9a94:	2b00      	cmp	r3, #0
   b9a96:	d135      	bne.n	b9b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b9a98:	68a3      	ldr	r3, [r4, #8]
   b9a9a:	4543      	cmp	r3, r8
   b9a9c:	d108      	bne.n	b9ab0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b9a9e:	f88d 9020 	strb.w	r9, [sp, #32]
   b9aa2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9aa6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9aaa:	89a3      	ldrh	r3, [r4, #12]
   b9aac:	429a      	cmp	r2, r3
   b9aae:	d0e6      	beq.n	b9a7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b9ab0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9ab2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9ab4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9ab8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9aba:	ab04      	add	r3, sp, #16
   b9abc:	f10d 020f 	add.w	r2, sp, #15
   b9ac0:	f7ff ffa2 	bl	b9a08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9ac4:	7921      	ldrb	r1, [r4, #4]
   b9ac6:	b985      	cbnz	r5, b9aea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b9ac8:	b989      	cbnz	r1, b9aee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9aca:	68a3      	ldr	r3, [r4, #8]
   b9acc:	4543      	cmp	r3, r8
   b9ace:	d30e      	bcc.n	b9aee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b9ad0:	f88d 9020 	strb.w	r9, [sp, #32]
   b9ad4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9ad8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9adc:	89a3      	ldrh	r3, [r4, #12]
   b9ade:	429a      	cmp	r2, r3
   b9ae0:	d105      	bne.n	b9aee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b9ae2:	9b04      	ldr	r3, [sp, #16]
   b9ae4:	4543      	cmp	r3, r8
   b9ae6:	d102      	bne.n	b9aee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9ae8:	e7c9      	b.n	b9a7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b9aea:	2900      	cmp	r1, #0
   b9aec:	d1f9      	bne.n	b9ae2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b9aee:	2300      	movs	r3, #0
   b9af0:	9301      	str	r3, [sp, #4]
   b9af2:	7b63      	ldrb	r3, [r4, #13]
   b9af4:	9300      	str	r3, [sp, #0]
   b9af6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b9afa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b9afc:	7830      	ldrb	r0, [r6, #0]
   b9afe:	f7fd fbe1 	bl	b72c4 <hal_spi_set_settings>
   b9b02:	e7bc      	b.n	b9a7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b9b04:	e9cd 5500 	strd	r5, r5, [sp]
   b9b08:	462b      	mov	r3, r5
   b9b0a:	462a      	mov	r2, r5
   b9b0c:	2101      	movs	r1, #1
   b9b0e:	e7f5      	b.n	b9afc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b9b10 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b9b10:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b9b12:	7800      	ldrb	r0, [r0, #0]
   b9b14:	f7fd fbb6 	bl	b7284 <hal_spi_transfer>
}
   b9b18:	b2c0      	uxtb	r0, r0
   b9b1a:	bd08      	pop	{r3, pc}

000b9b1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9b1c:	b510      	push	{r4, lr}
   b9b1e:	4604      	mov	r4, r0
{
	free(buffer);
   b9b20:	6800      	ldr	r0, [r0, #0]
   b9b22:	f7fd fd75 	bl	b7610 <free>
}
   b9b26:	4620      	mov	r0, r4
   b9b28:	bd10      	pop	{r4, pc}

000b9b2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9b2a:	b510      	push	{r4, lr}
   b9b2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9b2e:	6800      	ldr	r0, [r0, #0]
   b9b30:	b108      	cbz	r0, b9b36 <_ZN6String10invalidateEv+0xc>
   b9b32:	f7fd fd6d 	bl	b7610 <free>
	buffer = NULL;
   b9b36:	2300      	movs	r3, #0
	capacity = len = 0;
   b9b38:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9b3c:	6023      	str	r3, [r4, #0]
}
   b9b3e:	bd10      	pop	{r4, pc}

000b9b40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9b40:	b538      	push	{r3, r4, r5, lr}
   b9b42:	4604      	mov	r4, r0
   b9b44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9b46:	6800      	ldr	r0, [r0, #0]
   b9b48:	3101      	adds	r1, #1
   b9b4a:	f7fd fd69 	bl	b7620 <realloc>
	if (newbuffer) {
   b9b4e:	b110      	cbz	r0, b9b56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9b50:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9b54:	2001      	movs	r0, #1
	}
	return 0;
}
   b9b56:	bd38      	pop	{r3, r4, r5, pc}

000b9b58 <_ZN6String7reserveEj>:
{
   b9b58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9b5a:	6803      	ldr	r3, [r0, #0]
{
   b9b5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9b5e:	b123      	cbz	r3, b9b6a <_ZN6String7reserveEj+0x12>
   b9b60:	6843      	ldr	r3, [r0, #4]
   b9b62:	428b      	cmp	r3, r1
   b9b64:	d301      	bcc.n	b9b6a <_ZN6String7reserveEj+0x12>
   b9b66:	2001      	movs	r0, #1
}
   b9b68:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9b6a:	4620      	mov	r0, r4
   b9b6c:	f7ff ffe8 	bl	b9b40 <_ZN6String12changeBufferEj>
   b9b70:	2800      	cmp	r0, #0
   b9b72:	d0f9      	beq.n	b9b68 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9b74:	68a3      	ldr	r3, [r4, #8]
   b9b76:	2b00      	cmp	r3, #0
   b9b78:	d1f5      	bne.n	b9b66 <_ZN6String7reserveEj+0xe>
   b9b7a:	6822      	ldr	r2, [r4, #0]
   b9b7c:	7013      	strb	r3, [r2, #0]
   b9b7e:	e7f2      	b.n	b9b66 <_ZN6String7reserveEj+0xe>

000b9b80 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9b82:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9b84:	4611      	mov	r1, r2
   b9b86:	9201      	str	r2, [sp, #4]
{
   b9b88:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9b8a:	f7ff ffe5 	bl	b9b58 <_ZN6String7reserveEj>
   b9b8e:	9a01      	ldr	r2, [sp, #4]
   b9b90:	b928      	cbnz	r0, b9b9e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9b92:	4620      	mov	r0, r4
   b9b94:	f7ff ffc9 	bl	b9b2a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9b98:	4620      	mov	r0, r4
   b9b9a:	b003      	add	sp, #12
   b9b9c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9b9e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9ba0:	4629      	mov	r1, r5
   b9ba2:	6820      	ldr	r0, [r4, #0]
   b9ba4:	f001 fff8 	bl	bbb98 <memcpy>
	buffer[len] = 0;
   b9ba8:	6822      	ldr	r2, [r4, #0]
   b9baa:	68a3      	ldr	r3, [r4, #8]
   b9bac:	2100      	movs	r1, #0
   b9bae:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9bb0:	e7f2      	b.n	b9b98 <_ZN6String4copyEPKcj+0x18>

000b9bb2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9bb2:	b538      	push	{r3, r4, r5, lr}
   b9bb4:	4605      	mov	r5, r0
	if (buffer) {
   b9bb6:	6800      	ldr	r0, [r0, #0]
{
   b9bb8:	460c      	mov	r4, r1
	if (buffer) {
   b9bba:	b168      	cbz	r0, b9bd8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9bbc:	686a      	ldr	r2, [r5, #4]
   b9bbe:	688b      	ldr	r3, [r1, #8]
   b9bc0:	429a      	cmp	r2, r3
   b9bc2:	d307      	bcc.n	b9bd4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9bc4:	6809      	ldr	r1, [r1, #0]
   b9bc6:	f002 f866 	bl	bbc96 <strcpy>
			len = rhs.len;
   b9bca:	68a3      	ldr	r3, [r4, #8]
   b9bcc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9bce:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9bd0:	60a3      	str	r3, [r4, #8]
}
   b9bd2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9bd4:	f7fd fd1c 	bl	b7610 <free>
	buffer = rhs.buffer;
   b9bd8:	6823      	ldr	r3, [r4, #0]
   b9bda:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9bdc:	6863      	ldr	r3, [r4, #4]
   b9bde:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9be0:	68a3      	ldr	r3, [r4, #8]
   b9be2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9be4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b9be6:	e9c4 3300 	strd	r3, r3, [r4]
   b9bea:	e7f1      	b.n	b9bd0 <_ZN6String4moveERS_+0x1e>

000b9bec <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9bec:	b510      	push	{r4, lr}
	buffer = NULL;
   b9bee:	2300      	movs	r3, #0
	capacity = 0;
   b9bf0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9bf4:	4604      	mov	r4, r0
	len = 0;
   b9bf6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9bf8:	7303      	strb	r3, [r0, #12]
	move(rval);
   b9bfa:	f7ff ffda 	bl	b9bb2 <_ZN6String4moveERS_>
}
   b9bfe:	4620      	mov	r0, r4
   b9c00:	bd10      	pop	{r4, pc}

000b9c02 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9c02:	4288      	cmp	r0, r1
{
   b9c04:	b510      	push	{r4, lr}
   b9c06:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9c08:	d005      	beq.n	b9c16 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9c0a:	680b      	ldr	r3, [r1, #0]
   b9c0c:	b12b      	cbz	r3, b9c1a <_ZN6StringaSERKS_+0x18>
   b9c0e:	688a      	ldr	r2, [r1, #8]
   b9c10:	4619      	mov	r1, r3
   b9c12:	f7ff ffb5 	bl	b9b80 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9c16:	4620      	mov	r0, r4
   b9c18:	bd10      	pop	{r4, pc}
	else invalidate();
   b9c1a:	f7ff ff86 	bl	b9b2a <_ZN6String10invalidateEv>
   b9c1e:	e7fa      	b.n	b9c16 <_ZN6StringaSERKS_+0x14>

000b9c20 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9c20:	b510      	push	{r4, lr}
	buffer = NULL;
   b9c22:	2300      	movs	r3, #0
String::String(const String &value)
   b9c24:	4604      	mov	r4, r0
	capacity = 0;
   b9c26:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9c2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9c2c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9c2e:	f7ff ffe8 	bl	b9c02 <_ZN6StringaSERKS_>
}
   b9c32:	4620      	mov	r0, r4
   b9c34:	bd10      	pop	{r4, pc}
	...

000b9c38 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9c38:	4b05      	ldr	r3, [pc, #20]	; (b9c50 <_GLOBAL__sub_I_System+0x18>)
   b9c3a:	2202      	movs	r2, #2
   b9c3c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9c3e:	4b05      	ldr	r3, [pc, #20]	; (b9c54 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9c40:	4a05      	ldr	r2, [pc, #20]	; (b9c58 <_GLOBAL__sub_I_System+0x20>)
   b9c42:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9c44:	2000      	movs	r0, #0
   b9c46:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9c4a:	f7fd bc0d 	b.w	b7468 <set_system_mode>
   b9c4e:	bf00      	nop
   b9c50:	2003e6ec 	.word	0x2003e6ec
   b9c54:	2003e6e0 	.word	0x2003e6e0
   b9c58:	ffff0000 	.word	0xffff0000

000b9c5c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9c5c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c5e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9c60:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c64:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c66:	2201      	movs	r2, #1
   b9c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c6c:	f10d 0107 	add.w	r1, sp, #7
   b9c70:	47a0      	blx	r4
}
   b9c72:	b002      	add	sp, #8
   b9c74:	bd10      	pop	{r4, pc}

000b9c76 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9c76:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c78:	6803      	ldr	r3, [r0, #0]
   b9c7a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c80:	46a4      	mov	ip, r4
}
   b9c82:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c86:	4760      	bx	ip

000b9c88 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9c88:	b513      	push	{r0, r1, r4, lr}
   b9c8a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9c8c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9c8e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9c92:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9c94:	f10d 0107 	add.w	r1, sp, #7
   b9c98:	2201      	movs	r2, #1
   b9c9a:	47a0      	blx	r4
}
   b9c9c:	b002      	add	sp, #8
   b9c9e:	bd10      	pop	{r4, pc}

000b9ca0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9ca0:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9ca2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9ca4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ca8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9cac:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9cae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9cb0:	d008      	beq.n	b9cc4 <_ZN9TCPClient4readEv+0x24>
   b9cb2:	6963      	ldr	r3, [r4, #20]
   b9cb4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9cb8:	1c51      	adds	r1, r2, #1
   b9cba:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9cbe:	4413      	add	r3, r2
   b9cc0:	7918      	ldrb	r0, [r3, #4]
}
   b9cc2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9cc4:	6803      	ldr	r3, [r0, #0]
   b9cc6:	691b      	ldr	r3, [r3, #16]
   b9cc8:	4798      	blx	r3
   b9cca:	2800      	cmp	r0, #0
   b9ccc:	d1f1      	bne.n	b9cb2 <_ZN9TCPClient4readEv+0x12>
   b9cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9cd2:	e7f6      	b.n	b9cc2 <_ZN9TCPClient4readEv+0x22>

000b9cd4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9cd4:	4770      	bx	lr

000b9cd6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9cd6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9cd8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9cda:	43c0      	mvns	r0, r0
   b9cdc:	0fc0      	lsrs	r0, r0, #31
   b9cde:	4770      	bx	lr

000b9ce0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9ce0:	4770      	bx	lr
	...

000b9ce4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9ce4:	4b06      	ldr	r3, [pc, #24]	; (b9d00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9ce6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9ce8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b9cea:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9cee:	d005      	beq.n	b9cfc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9cf0:	4608      	mov	r0, r1
   b9cf2:	f001 f8ff 	bl	baef4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9cf6:	2800      	cmp	r0, #0
   b9cf8:	bf08      	it	eq
   b9cfa:	2400      	moveq	r4, #0
      }
   b9cfc:	4620      	mov	r0, r4
   b9cfe:	bd10      	pop	{r4, pc}
   b9d00:	000be4a8 	.word	0x000be4a8

000b9d04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9d04:	b510      	push	{r4, lr}
   b9d06:	21ac      	movs	r1, #172	; 0xac
   b9d08:	4604      	mov	r4, r0
   b9d0a:	f7fa f9c8 	bl	b409e <_ZdlPvj>
   b9d0e:	4620      	mov	r0, r4
   b9d10:	bd10      	pop	{r4, pc}

000b9d12 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b9d12:	21ac      	movs	r1, #172	; 0xac
   b9d14:	f7fa b9c3 	b.w	b409e <_ZdlPvj>

000b9d18 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9d1c:	f04f 0800 	mov.w	r8, #0
   b9d20:	b086      	sub	sp, #24
   b9d22:	461c      	mov	r4, r3
   b9d24:	f8c0 8004 	str.w	r8, [r0, #4]
   b9d28:	4605      	mov	r5, r0
   b9d2a:	460e      	mov	r6, r1
   b9d2c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9d2e:	4641      	mov	r1, r8
   b9d30:	2210      	movs	r2, #16
   b9d32:	a802      	add	r0, sp, #8
   b9d34:	f001 ff58 	bl	bbbe8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9d38:	1c63      	adds	r3, r4, #1
   b9d3a:	d009      	beq.n	b9d50 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d40:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d44:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9d48:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d4c:	435c      	muls	r4, r3
   b9d4e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9d50:	6968      	ldr	r0, [r5, #20]
   b9d52:	2310      	movs	r3, #16
   b9d54:	9300      	str	r3, [sp, #0]
   b9d56:	6800      	ldr	r0, [r0, #0]
   b9d58:	ab02      	add	r3, sp, #8
   b9d5a:	f241 0205 	movw	r2, #4101	; 0x1005
   b9d5e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9d62:	f7fd fa47 	bl	b71f4 <sock_setsockopt>
    if (ret < 0) {
   b9d66:	2800      	cmp	r0, #0
   b9d68:	da07      	bge.n	b9d7a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9d6a:	f7fd fc89 	bl	b7680 <__errno>
   b9d6e:	6803      	ldr	r3, [r0, #0]
   b9d70:	606b      	str	r3, [r5, #4]
        return 0;
   b9d72:	2000      	movs	r0, #0
}
   b9d74:	b006      	add	sp, #24
   b9d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9d7a:	6968      	ldr	r0, [r5, #20]
   b9d7c:	2300      	movs	r3, #0
   b9d7e:	6800      	ldr	r0, [r0, #0]
   b9d80:	463a      	mov	r2, r7
   b9d82:	4631      	mov	r1, r6
   b9d84:	f7fd fa5e 	bl	b7244 <sock_send>
    if (ret < 0) {
   b9d88:	1e03      	subs	r3, r0, #0
   b9d8a:	dbee      	blt.n	b9d6a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9d8c:	4618      	mov	r0, r3
   b9d8e:	e7f1      	b.n	b9d74 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9d90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9d90:	b530      	push	{r4, r5, lr}
   b9d92:	b087      	sub	sp, #28
   b9d94:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9d96:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9d98:	4668      	mov	r0, sp
   b9d9a:	f7fe fa8d 	bl	b82b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9da0:	3404      	adds	r4, #4
   b9da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9da4:	682b      	ldr	r3, [r5, #0]
   b9da6:	7023      	strb	r3, [r4, #0]
    }
   b9da8:	b007      	add	sp, #28
   b9daa:	bd30      	pop	{r4, r5, pc}

000b9dac <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9dac:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9dae:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9db0:	4b05      	ldr	r3, [pc, #20]	; (b9dc8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9db2:	4604      	mov	r4, r0
   b9db4:	358c      	adds	r5, #140	; 0x8c
   b9db6:	f844 3b04 	str.w	r3, [r4], #4
   b9dba:	4606      	mov	r6, r0
   b9dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dc0:	682b      	ldr	r3, [r5, #0]
   b9dc2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9dc4:	4630      	mov	r0, r6
   b9dc6:	bd70      	pop	{r4, r5, r6, pc}
   b9dc8:	000be5b0 	.word	0x000be5b0

000b9dcc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9dd0:	4698      	mov	r8, r3
    stop();
   b9dd2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9dd4:	b093      	sub	sp, #76	; 0x4c
   b9dd6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9dd8:	2400      	movs	r4, #0
    stop();
   b9dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9ddc:	4606      	mov	r6, r0
   b9dde:	4617      	mov	r7, r2
    stop();
   b9de0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9de2:	4628      	mov	r0, r5
   b9de4:	466b      	mov	r3, sp
   b9de6:	4622      	mov	r2, r4
   b9de8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9dea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9dec:	f7fd f9f2 	bl	b71d4 <netdb_getaddrinfo>
   b9df0:	4605      	mov	r5, r0
   b9df2:	2800      	cmp	r0, #0
   b9df4:	d163      	bne.n	b9ebe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9df6:	9b00      	ldr	r3, [sp, #0]
   b9df8:	2b00      	cmp	r3, #0
   b9dfa:	d04b      	beq.n	b9e94 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9dfc:	695b      	ldr	r3, [r3, #20]
   b9dfe:	2b00      	cmp	r3, #0
   b9e00:	d048      	beq.n	b9e94 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9e02:	a806      	add	r0, sp, #24
   b9e04:	f7fe fa08 	bl	b8218 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9e08:	9b00      	ldr	r3, [sp, #0]
   b9e0a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9e0c:	7863      	ldrb	r3, [r4, #1]
   b9e0e:	2b02      	cmp	r3, #2
   b9e10:	d104      	bne.n	b9e1c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9e12:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9e14:	a806      	add	r0, sp, #24
   b9e16:	f7ff ffbb 	bl	b9d90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9e1a:	e026      	b.n	b9e6a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9e1c:	2b0a      	cmp	r3, #10
   b9e1e:	d124      	bne.n	b9e6a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9e20:	2211      	movs	r2, #17
   b9e22:	4629      	mov	r1, r5
   b9e24:	a801      	add	r0, sp, #4
   b9e26:	f001 fedf 	bl	bbbe8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9e2a:	68a3      	ldr	r3, [r4, #8]
   b9e2c:	2b00      	cmp	r3, #0
   b9e2e:	d038      	beq.n	b9ea2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9e30:	f104 0308 	add.w	r3, r4, #8
   b9e34:	f10d 0c04 	add.w	ip, sp, #4
   b9e38:	3418      	adds	r4, #24
   b9e3a:	6818      	ldr	r0, [r3, #0]
   b9e3c:	6859      	ldr	r1, [r3, #4]
   b9e3e:	4662      	mov	r2, ip
   b9e40:	c203      	stmia	r2!, {r0, r1}
   b9e42:	3308      	adds	r3, #8
   b9e44:	42a3      	cmp	r3, r4
   b9e46:	4694      	mov	ip, r2
   b9e48:	d1f7      	bne.n	b9e3a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9e4a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9e4c:	a901      	add	r1, sp, #4
   b9e4e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9e50:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9e54:	f7fe f9ee 	bl	b8234 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9e58:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9e5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9e60:	ac07      	add	r4, sp, #28
   b9e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e64:	f8dc 3000 	ldr.w	r3, [ip]
   b9e68:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9e6a:	a806      	add	r0, sp, #24
   b9e6c:	f7fe f9f4 	bl	b8258 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9e70:	b180      	cbz	r0, b9e94 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9e72:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9e74:	ad07      	add	r5, sp, #28
   b9e76:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9e7a:	4b12      	ldr	r3, [pc, #72]	; (b9ec4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9e7c:	930c      	str	r3, [sp, #48]	; 0x30
   b9e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e80:	ac0d      	add	r4, sp, #52	; 0x34
   b9e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e84:	682b      	ldr	r3, [r5, #0]
   b9e86:	7023      	strb	r3, [r4, #0]
   b9e88:	463a      	mov	r2, r7
   b9e8a:	4643      	mov	r3, r8
   b9e8c:	a90c      	add	r1, sp, #48	; 0x30
   b9e8e:	4630      	mov	r0, r6
   b9e90:	47c8      	blx	r9
   b9e92:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9e94:	9800      	ldr	r0, [sp, #0]
   b9e96:	f7fd f995 	bl	b71c4 <netdb_freeaddrinfo>
}
   b9e9a:	4628      	mov	r0, r5
   b9e9c:	b013      	add	sp, #76	; 0x4c
   b9e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9ea2:	68e3      	ldr	r3, [r4, #12]
   b9ea4:	2b00      	cmp	r3, #0
   b9ea6:	d1c3      	bne.n	b9e30 <_ZN9TCPClient7connectEPKctm+0x64>
   b9ea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9eac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9eb0:	f7fd f970 	bl	b7194 <inet_htonl>
   b9eb4:	4581      	cmp	r9, r0
   b9eb6:	d1bb      	bne.n	b9e30 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9eb8:	f104 0114 	add.w	r1, r4, #20
   b9ebc:	e7aa      	b.n	b9e14 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9ebe:	4625      	mov	r5, r4
   b9ec0:	e7e8      	b.n	b9e94 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9ec2:	bf00      	nop
   b9ec4:	000be5b0 	.word	0x000be5b0

000b9ec8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9ec8:	b538      	push	{r3, r4, r5, lr}
   b9eca:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9ecc:	681a      	ldr	r2, [r3, #0]
   b9ece:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9ed0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9ed2:	da10      	bge.n	b9ef6 <_ZN9TCPClient9connectedEv+0x2e>
   b9ed4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ed8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9edc:	429a      	cmp	r2, r3
   b9ede:	d10a      	bne.n	b9ef6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9ee0:	6803      	ldr	r3, [r0, #0]
   b9ee2:	691b      	ldr	r3, [r3, #16]
   b9ee4:	4798      	blx	r3
        if (!rv) {
   b9ee6:	4604      	mov	r4, r0
   b9ee8:	b928      	cbnz	r0, b9ef6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9eea:	682b      	ldr	r3, [r5, #0]
   b9eec:	4628      	mov	r0, r5
   b9eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9ef0:	4798      	blx	r3
        rv = available();
   b9ef2:	4620      	mov	r0, r4
}
   b9ef4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9ef6:	2001      	movs	r0, #1
   b9ef8:	e7fc      	b.n	b9ef4 <_ZN9TCPClient9connectedEv+0x2c>

000b9efa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9efa:	b510      	push	{r4, lr}
   b9efc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9efe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9f02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9f06:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9f08:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9f0a:	d005      	beq.n	b9f18 <_ZN9TCPClient4peekEv+0x1e>
   b9f0c:	6963      	ldr	r3, [r4, #20]
   b9f0e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9f12:	4413      	add	r3, r2
   b9f14:	7918      	ldrb	r0, [r3, #4]
}
   b9f16:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9f18:	6803      	ldr	r3, [r0, #0]
   b9f1a:	691b      	ldr	r3, [r3, #16]
   b9f1c:	4798      	blx	r3
   b9f1e:	2800      	cmp	r0, #0
   b9f20:	d1f4      	bne.n	b9f0c <_ZN9TCPClient4peekEv+0x12>
   b9f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9f26:	e7f6      	b.n	b9f16 <_ZN9TCPClient4peekEv+0x1c>

000b9f28 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f2a:	6943      	ldr	r3, [r0, #20]
   b9f2c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9f2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9f32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9f36:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9f38:	4605      	mov	r5, r0
   b9f3a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9f3c:	d016      	beq.n	b9f6c <_ZN9TCPClient4readEPhj+0x44>
   b9f3e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9f40:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9f44:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9f48:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9f4a:	42bc      	cmp	r4, r7
   b9f4c:	bf28      	it	cs
   b9f4e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9f50:	3304      	adds	r3, #4
   b9f52:	4622      	mov	r2, r4
   b9f54:	4419      	add	r1, r3
   b9f56:	4630      	mov	r0, r6
   b9f58:	f001 fe1e 	bl	bbb98 <memcpy>
   b9f5c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9f5e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9f62:	4423      	add	r3, r4
   b9f64:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9f68:	4620      	mov	r0, r4
   b9f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9f6c:	6803      	ldr	r3, [r0, #0]
   b9f6e:	691b      	ldr	r3, [r3, #16]
   b9f70:	4798      	blx	r3
   b9f72:	2800      	cmp	r0, #0
   b9f74:	d1e3      	bne.n	b9f3e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9f76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9f7a:	e7f5      	b.n	b9f68 <_ZN9TCPClient4readEPhj+0x40>

000b9f7c <_ZN9TCPClient12flush_bufferEv>:
   b9f7c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9f7e:	2300      	movs	r3, #0
   b9f80:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9f84:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9f86:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9f8a:	4770      	bx	lr

000b9f8c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f90:	461f      	mov	r7, r3
    stop();
   b9f92:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f94:	460c      	mov	r4, r1
    stop();
   b9f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f98:	b08a      	sub	sp, #40	; 0x28
   b9f9a:	4605      	mov	r5, r0
   b9f9c:	4616      	mov	r6, r2
    stop();
   b9f9e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9fa0:	7d23      	ldrb	r3, [r4, #20]
   b9fa2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9fa6:	2b04      	cmp	r3, #4
   b9fa8:	bf0c      	ite	eq
   b9faa:	2002      	moveq	r0, #2
   b9fac:	200a      	movne	r0, #10
   b9fae:	2206      	movs	r2, #6
   b9fb0:	2101      	movs	r1, #1
   b9fb2:	f7fd f957 	bl	b7264 <sock_socket>
   b9fb6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9fba:	696b      	ldr	r3, [r5, #20]
   b9fbc:	681b      	ldr	r3, [r3, #0]
   b9fbe:	2b00      	cmp	r3, #0
   b9fc0:	da08      	bge.n	b9fd4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9fc2:	682b      	ldr	r3, [r5, #0]
   b9fc4:	4628      	mov	r0, r5
   b9fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9fc8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9fca:	4798      	blx	r3
}
   b9fcc:	4620      	mov	r0, r4
   b9fce:	b00a      	add	sp, #40	; 0x28
   b9fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9fd4:	4628      	mov	r0, r5
   b9fd6:	f7ff ffd1 	bl	b9f7c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9fda:	b1b7      	cbz	r7, ba00a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9fdc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9fde:	a903      	add	r1, sp, #12
   b9fe0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9fe2:	9303      	str	r3, [sp, #12]
   b9fe4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9fe8:	f7fd f8c4 	bl	b7174 <if_index_to_name>
   b9fec:	2800      	cmp	r0, #0
   b9fee:	d1e8      	bne.n	b9fc2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9ff0:	6968      	ldr	r0, [r5, #20]
   b9ff2:	2306      	movs	r3, #6
   b9ff4:	9300      	str	r3, [sp, #0]
   b9ff6:	6800      	ldr	r0, [r0, #0]
   b9ff8:	ab03      	add	r3, sp, #12
   b9ffa:	f241 020b 	movw	r2, #4107	; 0x100b
   b9ffe:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba002:	f7fd f8f7 	bl	b71f4 <sock_setsockopt>
   ba006:	2800      	cmp	r0, #0
   ba008:	d1db      	bne.n	b9fc2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   ba00a:	221c      	movs	r2, #28
   ba00c:	2100      	movs	r1, #0
   ba00e:	a803      	add	r0, sp, #12
   ba010:	f001 fdea 	bl	bbbe8 <memset>
    if (ip.version() == 4) {
   ba014:	7d23      	ldrb	r3, [r4, #20]
   ba016:	2b04      	cmp	r3, #4
   ba018:	d11d      	bne.n	ba056 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   ba01a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   ba01e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   ba020:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   ba024:	f7fd f8c6 	bl	b71b4 <inet_htons>
   ba028:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   ba02c:	6860      	ldr	r0, [r4, #4]
   ba02e:	f7fd f8b1 	bl	b7194 <inet_htonl>
   ba032:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   ba034:	696b      	ldr	r3, [r5, #20]
   ba036:	221c      	movs	r2, #28
   ba038:	6818      	ldr	r0, [r3, #0]
   ba03a:	a903      	add	r1, sp, #12
   ba03c:	f7fd f8ea 	bl	b7214 <sock_connect>
   ba040:	2800      	cmp	r0, #0
   ba042:	d1be      	bne.n	b9fc2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   ba044:	3404      	adds	r4, #4
   ba046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba048:	696d      	ldr	r5, [r5, #20]
   ba04a:	358c      	adds	r5, #140	; 0x8c
   ba04c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba04e:	6823      	ldr	r3, [r4, #0]
   ba050:	702b      	strb	r3, [r5, #0]
    return 1; // success
   ba052:	2401      	movs	r4, #1
   ba054:	e7ba      	b.n	b9fcc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   ba056:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   ba05a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   ba05c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   ba060:	f7fd f8a8 	bl	b71b4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba064:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   ba066:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba06a:	1d23      	adds	r3, r4, #4
   ba06c:	f104 0714 	add.w	r7, r4, #20
   ba070:	6818      	ldr	r0, [r3, #0]
   ba072:	6859      	ldr	r1, [r3, #4]
   ba074:	4632      	mov	r2, r6
   ba076:	c203      	stmia	r2!, {r0, r1}
   ba078:	3308      	adds	r3, #8
   ba07a:	42bb      	cmp	r3, r7
   ba07c:	4616      	mov	r6, r2
   ba07e:	d1f7      	bne.n	ba070 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba080:	e7d8      	b.n	ba034 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba084 <_ZN9TCPClient9availableEv>:
{
   ba084:	b530      	push	{r4, r5, lr}
   ba086:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba088:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba08c:	b08b      	sub	sp, #44	; 0x2c
   ba08e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba090:	b12b      	cbz	r3, ba09e <_ZN9TCPClient9availableEv+0x1a>
   ba092:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba096:	429a      	cmp	r2, r3
   ba098:	d101      	bne.n	ba09e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba09a:	f7ff ff6f 	bl	b9f7c <_ZN9TCPClient12flush_bufferEv>
   ba09e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba0a0:	6808      	ldr	r0, [r1, #0]
   ba0a2:	2800      	cmp	r0, #0
   ba0a4:	db18      	blt.n	ba0d8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba0a6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba0aa:	2d7f      	cmp	r5, #127	; 0x7f
   ba0ac:	d814      	bhi.n	ba0d8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba0ae:	3104      	adds	r1, #4
   ba0b0:	2308      	movs	r3, #8
   ba0b2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba0b6:	4429      	add	r1, r5
   ba0b8:	f7fd f8b4 	bl	b7224 <sock_recv>
            if (ret > 0) {
   ba0bc:	2800      	cmp	r0, #0
   ba0be:	dd13      	ble.n	ba0e8 <_ZN9TCPClient9availableEv+0x64>
   ba0c0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba0c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba0c6:	b90a      	cbnz	r2, ba0cc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba0c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba0cc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba0ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba0d2:	4410      	add	r0, r2
   ba0d4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba0d8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba0da:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba0de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba0e2:	1ac0      	subs	r0, r0, r3
   ba0e4:	b00b      	add	sp, #44	; 0x2c
   ba0e6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba0e8:	f7fd faca 	bl	b7680 <__errno>
   ba0ec:	6803      	ldr	r3, [r0, #0]
   ba0ee:	2b0b      	cmp	r3, #11
   ba0f0:	d0f2      	beq.n	ba0d8 <_ZN9TCPClient9availableEv+0x54>
   ba0f2:	f7fd fac5 	bl	b7680 <__errno>
   ba0f6:	6803      	ldr	r3, [r0, #0]
   ba0f8:	2b0b      	cmp	r3, #11
   ba0fa:	d0ed      	beq.n	ba0d8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba0fc:	2320      	movs	r3, #32
   ba0fe:	2500      	movs	r5, #0
   ba100:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba104:	f7fd fabc 	bl	b7680 <__errno>
   ba108:	6803      	ldr	r3, [r0, #0]
   ba10a:	9301      	str	r3, [sp, #4]
   ba10c:	4b08      	ldr	r3, [pc, #32]	; (ba130 <_ZN9TCPClient9availableEv+0xac>)
   ba10e:	4909      	ldr	r1, [pc, #36]	; (ba134 <_ZN9TCPClient9availableEv+0xb0>)
   ba110:	9300      	str	r3, [sp, #0]
   ba112:	aa02      	add	r2, sp, #8
   ba114:	462b      	mov	r3, r5
   ba116:	2032      	movs	r0, #50	; 0x32
   ba118:	f7fd f984 	bl	b7424 <log_message>
                    sock_close(d_->sock);
   ba11c:	6963      	ldr	r3, [r4, #20]
   ba11e:	6818      	ldr	r0, [r3, #0]
   ba120:	f7fd f870 	bl	b7204 <sock_close>
   ba124:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba12a:	601a      	str	r2, [r3, #0]
   ba12c:	e7d4      	b.n	ba0d8 <_ZN9TCPClient9availableEv+0x54>
   ba12e:	bf00      	nop
   ba130:	000be6ff 	.word	0x000be6ff
   ba134:	000be6f8 	.word	0x000be6f8

000ba138 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba138:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba13a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba13c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba13e:	6818      	ldr	r0, [r3, #0]
   ba140:	2800      	cmp	r0, #0
   ba142:	db01      	blt.n	ba148 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba144:	f7fd f85e 	bl	b7204 <sock_close>
   ba148:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba14a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba14e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba150:	6960      	ldr	r0, [r4, #20]
   ba152:	2211      	movs	r2, #17
   ba154:	2100      	movs	r1, #0
   ba156:	308c      	adds	r0, #140	; 0x8c
   ba158:	f001 fd46 	bl	bbbe8 <memset>
    flush_buffer();
   ba15c:	4620      	mov	r0, r4
}
   ba15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba162:	f7ff bf0b 	b.w	b9f7c <_ZN9TCPClient12flush_bufferEv>

000ba166 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   ba166:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba168:	6818      	ldr	r0, [r3, #0]
}
   ba16a:	43c0      	mvns	r0, r0
   ba16c:	0fc0      	lsrs	r0, r0, #31
   ba16e:	4770      	bx	lr

000ba170 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba170:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba172:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba174:	4604      	mov	r4, r0
          total(0) {
   ba176:	6001      	str	r1, [r0, #0]
   ba178:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba17c:	3088      	adds	r0, #136	; 0x88
   ba17e:	f7fe f84b 	bl	b8218 <_ZN9IPAddressC1Ev>
}
   ba182:	4620      	mov	r0, r4
   ba184:	bd10      	pop	{r4, pc}
	...

000ba188 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba188:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba18a:	2300      	movs	r3, #0
   ba18c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba190:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba194:	4a0e      	ldr	r2, [pc, #56]	; (ba1d0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba196:	6103      	str	r3, [r0, #16]
   ba198:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba19a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba19c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba19e:	20ac      	movs	r0, #172	; 0xac
   ba1a0:	9101      	str	r1, [sp, #4]
   ba1a2:	f7f9 ff78 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba1a6:	1e05      	subs	r5, r0, #0
   ba1a8:	f105 060c 	add.w	r6, r5, #12
   ba1ac:	d008      	beq.n	ba1c0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba1ae:	2301      	movs	r3, #1
   ba1b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba1b4:	4b07      	ldr	r3, [pc, #28]	; (ba1d4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba1b6:	9901      	ldr	r1, [sp, #4]
   ba1b8:	602b      	str	r3, [r5, #0]
   ba1ba:	4630      	mov	r0, r6
   ba1bc:	f7ff ffd8 	bl	ba170 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba1c0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba1c2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba1c6:	f7ff fed9 	bl	b9f7c <_ZN9TCPClient12flush_bufferEv>
}
   ba1ca:	b002      	add	sp, #8
   ba1cc:	bd70      	pop	{r4, r5, r6, pc}
   ba1ce:	bf00      	nop
   ba1d0:	000be734 	.word	0x000be734
   ba1d4:	000be718 	.word	0x000be718

000ba1d8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba1d8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba1da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   ba1de:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba1e0:	f7ff ffd2 	bl	ba188 <_ZN9TCPClientC1Ei>
}
   ba1e4:	4620      	mov	r0, r4
   ba1e6:	bd10      	pop	{r4, pc}

000ba1e8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba1e8:	b510      	push	{r4, lr}
   ba1ea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba1ec:	6800      	ldr	r0, [r0, #0]
   ba1ee:	2800      	cmp	r0, #0
   ba1f0:	db01      	blt.n	ba1f6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba1f2:	f7fd f807 	bl	b7204 <sock_close>
    }
}
   ba1f6:	4620      	mov	r0, r4
   ba1f8:	bd10      	pop	{r4, pc}

000ba1fa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba1fa:	300c      	adds	r0, #12
   ba1fc:	f7ff bff4 	b.w	ba1e8 <_ZN9TCPClient4DataD1Ev>

000ba200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba200:	4b02      	ldr	r3, [pc, #8]	; (ba20c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba202:	681a      	ldr	r2, [r3, #0]
   ba204:	4b02      	ldr	r3, [pc, #8]	; (ba210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba206:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba208:	4770      	bx	lr
   ba20a:	bf00      	nop
   ba20c:	2003e138 	.word	0x2003e138
   ba210:	2003e6f0 	.word	0x2003e6f0

000ba214 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   ba214:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   ba216:	6804      	ldr	r4, [r0, #0]
   ba218:	6b24      	ldr	r4, [r4, #48]	; 0x30
   ba21a:	46a4      	mov	ip, r4
    }
   ba21c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   ba220:	4760      	bx	ip

000ba222 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   ba222:	6803      	ldr	r3, [r0, #0]
   ba224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba226:	4718      	bx	r3

000ba228 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   ba228:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   ba22a:	4770      	bx	lr

000ba22c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   ba22c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   ba22e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   ba230:	1a10      	subs	r0, r2, r0
   ba232:	4770      	bx	lr

000ba234 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   ba234:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   ba236:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   ba238:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   ba23a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
class IPAddress : public Printable {
   ba23c:	4b0c      	ldr	r3, [pc, #48]	; (ba270 <_ZN3UDP9endPacketEv+0x3c>)
   ba23e:	9302      	str	r3, [sp, #8]
   ba240:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   ba244:	4604      	mov	r4, r0
   ba246:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   ba248:	ad03      	add	r5, sp, #12
   ba24a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba24c:	6833      	ldr	r3, [r6, #0]
   ba24e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   ba250:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   ba252:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   ba254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba256:	9300      	str	r3, [sp, #0]
   ba258:	4620      	mov	r0, r4
   ba25a:	ab02      	add	r3, sp, #8
   ba25c:	47b8      	blx	r7
    flush(); // wait for send to complete
   ba25e:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   ba260:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   ba262:	69db      	ldr	r3, [r3, #28]
   ba264:	4620      	mov	r0, r4
   ba266:	4798      	blx	r3
    return result;
}
   ba268:	4628      	mov	r0, r5
   ba26a:	b009      	add	sp, #36	; 0x24
   ba26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba26e:	bf00      	nop
   ba270:	000be5b0 	.word	0x000be5b0

000ba274 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   ba274:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   ba276:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   ba278:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   ba27c:	68db      	ldr	r3, [r3, #12]
   ba27e:	2201      	movs	r2, #1
   ba280:	f10d 0107 	add.w	r1, sp, #7
   ba284:	4798      	blx	r3
}
   ba286:	b003      	add	sp, #12
   ba288:	f85d fb04 	ldr.w	pc, [sp], #4

000ba28c <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   ba28c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   ba28e:	6803      	ldr	r3, [r0, #0]
   ba290:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   ba292:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   ba294:	4798      	blx	r3
   ba296:	b128      	cbz	r0, ba2a4 <_ZN3UDP4readEv+0x18>
   ba298:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   ba29a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba29c:	1c59      	adds	r1, r3, #1
   ba29e:	86e1      	strh	r1, [r4, #54]	; 0x36
   ba2a0:	5cd0      	ldrb	r0, [r2, r3]
}
   ba2a2:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   ba2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba2a8:	e7fb      	b.n	ba2a2 <_ZN3UDP4readEv+0x16>

000ba2aa <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   ba2aa:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   ba2ac:	6803      	ldr	r3, [r0, #0]
   ba2ae:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   ba2b0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   ba2b2:	4798      	blx	r3
   ba2b4:	b118      	cbz	r0, ba2be <_ZN3UDP4peekEv+0x14>
   ba2b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   ba2b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba2ba:	5cd0      	ldrb	r0, [r2, r3]
}
   ba2bc:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   ba2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba2c2:	e7fb      	b.n	ba2bc <_ZN3UDP4peekEv+0x12>

000ba2c4 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   ba2c4:	4770      	bx	lr

000ba2c6 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   ba2c6:	b410      	push	{r4}
   ba2c8:	4603      	mov	r3, r0
   ba2ca:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   ba2cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   ba2ce:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   ba2d0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   ba2d2:	6803      	ldr	r3, [r0, #0]
   ba2d4:	1a52      	subs	r2, r2, r1
   ba2d6:	68db      	ldr	r3, [r3, #12]
   ba2d8:	4421      	add	r1, r4
}
   ba2da:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   ba2de:	4718      	bx	r3

000ba2e0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   ba2e0:	f1a0 0010 	sub.w	r0, r0, #16
   ba2e4:	f7ff bfef 	b.w	ba2c6 <_ZNK3UDP7printToER5Print>

000ba2e8 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   ba2e8:	b570      	push	{r4, r5, r6, lr}
    stop();
   ba2ea:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   ba2ec:	b08c      	sub	sp, #48	; 0x30
    stop();
   ba2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   ba2f0:	4604      	mov	r4, r0
   ba2f2:	460e      	mov	r6, r1
   ba2f4:	4615      	mov	r5, r2
    stop();
   ba2f6:	4798      	blx	r3
    const int one = 1;
   ba2f8:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   ba2fa:	221c      	movs	r2, #28
   ba2fc:	2100      	movs	r1, #0
   ba2fe:	a805      	add	r0, sp, #20
    const int one = 1;
   ba300:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   ba302:	f001 fc71 	bl	bbbe8 <memset>
    saddr.sin6_len = sizeof(saddr);
   ba306:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   ba30a:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   ba30c:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   ba310:	f7fc ff50 	bl	b71b4 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   ba314:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   ba316:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   ba31a:	2102      	movs	r1, #2
   ba31c:	200a      	movs	r0, #10
   ba31e:	f7fc ffa1 	bl	b7264 <sock_socket>
    if (_sock < 0) {
   ba322:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   ba324:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   ba326:	db25      	blt.n	ba374 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   ba328:	2204      	movs	r2, #4
   ba32a:	9200      	str	r2, [sp, #0]
   ba32c:	ab02      	add	r3, sp, #8
   ba32e:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba332:	f7fc ff5f 	bl	b71f4 <sock_setsockopt>
   ba336:	b9e8      	cbnz	r0, ba374 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   ba338:	b195      	cbz	r5, ba360 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   ba33a:	9003      	str	r0, [sp, #12]
   ba33c:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   ba340:	a903      	add	r1, sp, #12
   ba342:	b2e8      	uxtb	r0, r5
   ba344:	f7fc ff16 	bl	b7174 <if_index_to_name>
   ba348:	b9a0      	cbnz	r0, ba374 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   ba34a:	2306      	movs	r3, #6
   ba34c:	9300      	str	r3, [sp, #0]
   ba34e:	6960      	ldr	r0, [r4, #20]
   ba350:	ab03      	add	r3, sp, #12
   ba352:	f241 020b 	movw	r2, #4107	; 0x100b
   ba356:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba35a:	f7fc ff4b 	bl	b71f4 <sock_setsockopt>
   ba35e:	b948      	cbnz	r0, ba374 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   ba360:	6960      	ldr	r0, [r4, #20]
   ba362:	221c      	movs	r2, #28
   ba364:	a905      	add	r1, sp, #20
   ba366:	f7fc ff3d 	bl	b71e4 <sock_bind>
   ba36a:	b918      	cbnz	r0, ba374 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   ba36c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   ba36e:	2001      	movs	r0, #1
}
   ba370:	b00c      	add	sp, #48	; 0x30
   ba372:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   ba374:	6823      	ldr	r3, [r4, #0]
   ba376:	4620      	mov	r0, r4
   ba378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba37a:	4798      	blx	r3
   ba37c:	2000      	movs	r0, #0
   ba37e:	e7f7      	b.n	ba370 <_ZN3UDP5beginEtm+0x88>

000ba380 <_ZN3UDP4stopEv>:
void UDP::stop() {
   ba380:	b510      	push	{r4, lr}
   ba382:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   ba384:	6940      	ldr	r0, [r0, #20]
   ba386:	2800      	cmp	r0, #0
   ba388:	db01      	blt.n	ba38e <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   ba38a:	f7fc ff3b 	bl	b7204 <sock_close>
    _sock = -1;
   ba38e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba392:	6163      	str	r3, [r4, #20]
    _offset = 0;
   ba394:	2300      	movs	r3, #0
   ba396:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   ba398:	8723      	strh	r3, [r4, #56]	; 0x38
}
   ba39a:	bd10      	pop	{r4, pc}

000ba39c <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   ba39c:	b570      	push	{r4, r5, r6, lr}
   ba39e:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   ba3a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba3a2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   ba3a4:	b168      	cbz	r0, ba3c2 <_ZN3UDP5writeEPKhj+0x26>
   ba3a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   ba3a8:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   ba3aa:	4294      	cmp	r4, r2
   ba3ac:	bf28      	it	cs
   ba3ae:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   ba3b0:	4622      	mov	r2, r4
   ba3b2:	4430      	add	r0, r6
   ba3b4:	f001 fbf0 	bl	bbb98 <memcpy>
    _offset += size;
   ba3b8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   ba3ba:	4423      	add	r3, r4
   ba3bc:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   ba3be:	4620      	mov	r0, r4
   ba3c0:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   ba3c2:	4604      	mov	r4, r0
   ba3c4:	e7f1      	b.n	ba3aa <_ZN3UDP5writeEPKhj+0xe>

000ba3c6 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   ba3c6:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   ba3c8:	6803      	ldr	r3, [r0, #0]
   ba3ca:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   ba3cc:	4604      	mov	r4, r0
   ba3ce:	460f      	mov	r7, r1
   ba3d0:	4616      	mov	r6, r2
    if (available()) {
   ba3d2:	4798      	blx	r3
   ba3d4:	b190      	cbz	r0, ba3fc <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   ba3d6:	6823      	ldr	r3, [r4, #0]
   ba3d8:	4620      	mov	r0, r4
   ba3da:	691b      	ldr	r3, [r3, #16]
   ba3dc:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   ba3de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   ba3e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba3e2:	4286      	cmp	r6, r0
   ba3e4:	bfa8      	it	ge
   ba3e6:	4606      	movge	r6, r0
   ba3e8:	4419      	add	r1, r3
   ba3ea:	4632      	mov	r2, r6
   ba3ec:	4638      	mov	r0, r7
   ba3ee:	f001 fbd3 	bl	bbb98 <memcpy>
        _offset += read;
   ba3f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   ba3f4:	4433      	add	r3, r6
   ba3f6:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   ba3f8:	4630      	mov	r0, r6
   ba3fa:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   ba3fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   ba400:	e7fa      	b.n	ba3f8 <_ZN3UDP4readEPhj+0x32>

000ba402 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba402:	b530      	push	{r4, r5, lr}
   ba404:	b087      	sub	sp, #28
   ba406:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba408:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba40a:	4668      	mov	r0, sp
   ba40c:	f7fd ff54 	bl	b82b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba412:	3404      	adds	r4, #4
   ba414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba416:	682b      	ldr	r3, [r5, #0]
   ba418:	7023      	strb	r3, [r4, #0]
    }
   ba41a:	b007      	add	sp, #28
   ba41c:	bd30      	pop	{r4, r5, pc}
	...

000ba420 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   ba420:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba422:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   ba424:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   ba426:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   ba428:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   ba42a:	4a0a      	ldr	r2, [pc, #40]	; (ba454 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   ba42c:	9202      	str	r2, [sp, #8]
   ba42e:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   ba430:	468c      	mov	ip, r1
   ba432:	4606      	mov	r6, r0
   ba434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba436:	ad03      	add	r5, sp, #12
   ba438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba43a:	6823      	ldr	r3, [r4, #0]
   ba43c:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   ba43e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   ba442:	9300      	str	r3, [sp, #0]
   ba444:	4672      	mov	r2, lr
   ba446:	ab02      	add	r3, sp, #8
   ba448:	4661      	mov	r1, ip
   ba44a:	4630      	mov	r0, r6
   ba44c:	47b8      	blx	r7
    }
   ba44e:	b009      	add	sp, #36	; 0x24
   ba450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba452:	bf00      	nop
   ba454:	000be5b0 	.word	0x000be5b0

000ba458 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   ba458:	b570      	push	{r4, r5, r6, lr}
   ba45a:	4604      	mov	r4, r0
   ba45c:	4b05      	ldr	r3, [pc, #20]	; (ba474 <_ZN3UDP8remoteIPEv+0x1c>)
   ba45e:	f844 3b04 	str.w	r3, [r4], #4
   ba462:	f101 0520 	add.w	r5, r1, #32
   ba466:	4606      	mov	r6, r0
   ba468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba46c:	682b      	ldr	r3, [r5, #0]
   ba46e:	7023      	strb	r3, [r4, #0]
   ba470:	4630      	mov	r0, r6
   ba472:	bd70      	pop	{r4, r5, r6, pc}
   ba474:	000be5b0 	.word	0x000be5b0

000ba478 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   ba478:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   ba47a:	7843      	ldrb	r3, [r0, #1]
   ba47c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   ba47e:	b08d      	sub	sp, #52	; 0x34
   ba480:	4605      	mov	r5, r0
   ba482:	460c      	mov	r4, r1
   ba484:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   ba486:	d104      	bne.n	ba492 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   ba488:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   ba48a:	4620      	mov	r0, r4
   ba48c:	f7ff ffb9 	bl	ba402 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   ba490:	e022      	b.n	ba4d8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   ba492:	2b0a      	cmp	r3, #10
   ba494:	d125      	bne.n	ba4e2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   ba496:	2211      	movs	r2, #17
   ba498:	2100      	movs	r1, #0
   ba49a:	a801      	add	r0, sp, #4
   ba49c:	f001 fba4 	bl	bbbe8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba4a0:	68ab      	ldr	r3, [r5, #8]
   ba4a2:	b303      	cbz	r3, ba4e6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba4a4:	f105 0308 	add.w	r3, r5, #8
   ba4a8:	ae01      	add	r6, sp, #4
   ba4aa:	f105 0c18 	add.w	ip, r5, #24
   ba4ae:	6818      	ldr	r0, [r3, #0]
   ba4b0:	6859      	ldr	r1, [r3, #4]
   ba4b2:	4632      	mov	r2, r6
   ba4b4:	c203      	stmia	r2!, {r0, r1}
   ba4b6:	3308      	adds	r3, #8
   ba4b8:	4563      	cmp	r3, ip
   ba4ba:	4616      	mov	r6, r2
   ba4bc:	d1f7      	bne.n	ba4ae <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   ba4be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   ba4c0:	a901      	add	r1, sp, #4
   ba4c2:	a806      	add	r0, sp, #24
   ba4c4:	ae07      	add	r6, sp, #28
            a.v = 6;
   ba4c6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   ba4ca:	f7fd feb3 	bl	b8234 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba4ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   ba4d0:	3404      	adds	r4, #4
   ba4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba4d4:	6833      	ldr	r3, [r6, #0]
   ba4d6:	7023      	strb	r3, [r4, #0]
        if (port) {
   ba4d8:	b11f      	cbz	r7, ba4e2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   ba4da:	8868      	ldrh	r0, [r5, #2]
   ba4dc:	f7fc fe62 	bl	b71a4 <inet_ntohs>
   ba4e0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   ba4e2:	b00d      	add	sp, #52	; 0x34
   ba4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba4e6:	68eb      	ldr	r3, [r5, #12]
   ba4e8:	2b00      	cmp	r3, #0
   ba4ea:	d1db      	bne.n	ba4a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   ba4ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba4f0:	692e      	ldr	r6, [r5, #16]
   ba4f2:	f7fc fe4f 	bl	b7194 <inet_htonl>
   ba4f6:	4286      	cmp	r6, r0
   ba4f8:	d1d4      	bne.n	ba4a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   ba4fa:	f105 0114 	add.w	r1, r5, #20
   ba4fe:	e7c4      	b.n	ba48a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000ba500 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   ba500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba504:	4617      	mov	r7, r2
   ba506:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   ba508:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   ba50a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   ba50c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   ba50e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   ba510:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   ba512:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   ba514:	f7fc fe5e 	bl	b71d4 <netdb_getaddrinfo>
   ba518:	1e04      	subs	r4, r0, #0
   ba51a:	db20      	blt.n	ba55e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   ba51c:	9b01      	ldr	r3, [sp, #4]
   ba51e:	b32b      	cbz	r3, ba56c <_ZN3UDP11beginPacketEPKct+0x6c>
   ba520:	695b      	ldr	r3, [r3, #20]
   ba522:	b31b      	cbz	r3, ba56c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   ba524:	a802      	add	r0, sp, #8
   ba526:	f7fd fe77 	bl	b8218 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   ba52a:	9b01      	ldr	r3, [sp, #4]
   ba52c:	2200      	movs	r2, #0
   ba52e:	6958      	ldr	r0, [r3, #20]
   ba530:	a902      	add	r1, sp, #8
   ba532:	f7ff ffa1 	bl	ba478 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   ba536:	a802      	add	r0, sp, #8
   ba538:	f7fd fe8e 	bl	b8258 <_ZNK9IPAddresscvbEv>
        if (addr) {
   ba53c:	b1b0      	cbz	r0, ba56c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   ba53e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   ba540:	ad03      	add	r5, sp, #12
   ba542:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   ba546:	4b0b      	ldr	r3, [pc, #44]	; (ba574 <_ZN3UDP11beginPacketEPKct+0x74>)
   ba548:	9308      	str	r3, [sp, #32]
   ba54a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba54c:	ac09      	add	r4, sp, #36	; 0x24
   ba54e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba550:	682b      	ldr	r3, [r5, #0]
   ba552:	7023      	strb	r3, [r4, #0]
   ba554:	463a      	mov	r2, r7
   ba556:	a908      	add	r1, sp, #32
   ba558:	4630      	mov	r0, r6
   ba55a:	47c0      	blx	r8
   ba55c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   ba55e:	9801      	ldr	r0, [sp, #4]
   ba560:	f7fc fe30 	bl	b71c4 <netdb_freeaddrinfo>
}
   ba564:	4620      	mov	r0, r4
   ba566:	b00e      	add	sp, #56	; 0x38
   ba568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   ba56c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba570:	e7f5      	b.n	ba55e <_ZN3UDP11beginPacketEPKct+0x5e>
   ba572:	bf00      	nop
   ba574:	000be5b0 	.word	0x000be5b0

000ba578 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   ba578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   ba57c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   ba580:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   ba584:	b090      	sub	sp, #64	; 0x40
   ba586:	4605      	mov	r5, r0
   ba588:	460e      	mov	r6, r1
   ba58a:	4690      	mov	r8, r2
   ba58c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   ba58e:	db3c      	blt.n	ba60a <_ZN3UDP13receivePacketEPhjm+0x92>
   ba590:	2900      	cmp	r1, #0
   ba592:	d03a      	beq.n	ba60a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   ba594:	f04f 0a1c 	mov.w	sl, #28
   ba598:	af09      	add	r7, sp, #36	; 0x24
   ba59a:	4652      	mov	r2, sl
   ba59c:	2100      	movs	r1, #0
   ba59e:	4638      	mov	r0, r7
   ba5a0:	f001 fb22 	bl	bbbe8 <memset>
        socklen_t slen = sizeof(saddr);
   ba5a4:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   ba5a8:	b1dc      	cbz	r4, ba5e2 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   ba5aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba5ae:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   ba5b2:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   ba5b6:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   ba5b8:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   ba5ba:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   ba5bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   ba5c0:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   ba5c2:	9300      	str	r3, [sp, #0]
   ba5c4:	f241 0206 	movw	r2, #4102	; 0x1006
   ba5c8:	446b      	add	r3, sp
   ba5ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba5ce:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   ba5d0:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   ba5d2:	f7fc fe0f 	bl	b71f4 <sock_setsockopt>
            if (ret) {
   ba5d6:	4604      	mov	r4, r0
   ba5d8:	b120      	cbz	r0, ba5e4 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   ba5da:	4620      	mov	r0, r4
   ba5dc:	b010      	add	sp, #64	; 0x40
   ba5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   ba5e2:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   ba5e4:	ab03      	add	r3, sp, #12
   ba5e6:	e9cd 7300 	strd	r7, r3, [sp]
   ba5ea:	6968      	ldr	r0, [r5, #20]
   ba5ec:	4623      	mov	r3, r4
   ba5ee:	4642      	mov	r2, r8
   ba5f0:	4631      	mov	r1, r6
   ba5f2:	f7fc fe1f 	bl	b7234 <sock_recvfrom>
        if (ret >= 0) {
   ba5f6:	1e04      	subs	r4, r0, #0
   ba5f8:	dbef      	blt.n	ba5da <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   ba5fa:	f105 0234 	add.w	r2, r5, #52	; 0x34
   ba5fe:	f105 011c 	add.w	r1, r5, #28
   ba602:	4638      	mov	r0, r7
   ba604:	f7ff ff38 	bl	ba478 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   ba608:	e7e7      	b.n	ba5da <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   ba60a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba60e:	e7e4      	b.n	ba5da <_ZN3UDP13receivePacketEPhjm+0x62>

000ba610 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   ba610:	b538      	push	{r3, r4, r5, lr}
   ba612:	4605      	mov	r5, r0
   ba614:	4614      	mov	r4, r2
    		return address.v;
   ba616:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   ba618:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   ba61a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   ba61c:	d110      	bne.n	ba640 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   ba61e:	f640 231c 	movw	r3, #2588	; 0xa1c
   ba622:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   ba624:	f7fc fdc6 	bl	b71b4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   ba628:	3408      	adds	r4, #8
   ba62a:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   ba62c:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   ba630:	3514      	adds	r5, #20
   ba632:	f853 2b04 	ldr.w	r2, [r3], #4
   ba636:	f844 2b04 	str.w	r2, [r4], #4
   ba63a:	42ab      	cmp	r3, r5
   ba63c:	d1f9      	bne.n	ba632 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   ba63e:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   ba640:	2b04      	cmp	r3, #4
   ba642:	d1fc      	bne.n	ba63e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   ba644:	f44f 7304 	mov.w	r3, #528	; 0x210
   ba648:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   ba64a:	f7fc fdb3 	bl	b71b4 <inet_htons>
   ba64e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   ba650:	6868      	ldr	r0, [r5, #4]
   ba652:	f7fc fd9f 	bl	b7194 <inet_htonl>
   ba656:	6060      	str	r0, [r4, #4]
}
   ba658:	e7f1      	b.n	ba63e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000ba65a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   ba65a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba65e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   ba660:	af03      	add	r7, sp, #12
   ba662:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   ba666:	4698      	mov	r8, r3
   ba668:	4604      	mov	r4, r0
   ba66a:	460d      	mov	r5, r1
   ba66c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   ba66e:	2100      	movs	r1, #0
   ba670:	464a      	mov	r2, r9
   ba672:	4638      	mov	r0, r7
   ba674:	f001 fab8 	bl	bbbe8 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   ba678:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   ba67c:	463a      	mov	r2, r7
   ba67e:	4640      	mov	r0, r8
   ba680:	f7ff ffc6 	bl	ba610 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   ba684:	f89d 300d 	ldrb.w	r3, [sp, #13]
   ba688:	b153      	cbz	r3, ba6a0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   ba68a:	e9cd 7900 	strd	r7, r9, [sp]
   ba68e:	6960      	ldr	r0, [r4, #20]
   ba690:	2300      	movs	r3, #0
   ba692:	4632      	mov	r2, r6
   ba694:	4629      	mov	r1, r5
   ba696:	f7fc fddd 	bl	b7254 <sock_sendto>
}
   ba69a:	b00b      	add	sp, #44	; 0x2c
   ba69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   ba6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba6a4:	e7f9      	b.n	ba69a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000ba6a8 <_ZN3UDPC1Ev>:
UDP::UDP()
   ba6a8:	b538      	push	{r3, r4, r5, lr}
   ba6aa:	2500      	movs	r5, #0
   ba6ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba6b0:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   ba6b4:	4b0b      	ldr	r3, [pc, #44]	; (ba6e4 <_ZN3UDPC1Ev+0x3c>)
   ba6b6:	f103 0208 	add.w	r2, r3, #8
   ba6ba:	336c      	adds	r3, #108	; 0x6c
   ba6bc:	6103      	str	r3, [r0, #16]
   ba6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   ba6c2:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   ba6c4:	6002      	str	r2, [r0, #0]
   ba6c6:	6143      	str	r3, [r0, #20]
   ba6c8:	301c      	adds	r0, #28
   ba6ca:	f7fd fda5 	bl	b8218 <_ZN9IPAddressC1Ev>
   ba6ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   ba6d2:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   ba6d6:	86e5      	strh	r5, [r4, #54]	; 0x36
   ba6d8:	8725      	strh	r5, [r4, #56]	; 0x38
   ba6da:	63e5      	str	r5, [r4, #60]	; 0x3c
   ba6dc:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   ba6e0:	4620      	mov	r0, r4
   ba6e2:	bd38      	pop	{r3, r4, r5, pc}
   ba6e4:	000be794 	.word	0x000be794

000ba6e8 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   ba6e8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   ba6ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   ba6ee:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   ba6f0:	b123      	cbz	r3, ba6fc <_ZN3UDP13releaseBufferEv+0x14>
   ba6f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   ba6f4:	b110      	cbz	r0, ba6fc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   ba6f6:	2101      	movs	r1, #1
   ba6f8:	f7f9 fcd1 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   ba6fc:	2300      	movs	r3, #0
   ba6fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   ba700:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   ba704:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   ba706:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   ba708:	8723      	strh	r3, [r4, #56]	; 0x38
}
   ba70a:	bd10      	pop	{r4, pc}

000ba70c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   ba70c:	b570      	push	{r4, r5, r6, lr}
   ba70e:	4604      	mov	r4, r0
   ba710:	4616      	mov	r6, r2
   ba712:	460d      	mov	r5, r1
    releaseBuffer();
   ba714:	f7ff ffe8 	bl	ba6e8 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   ba718:	2300      	movs	r3, #0
    _buffer = buffer;
   ba71a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   ba71c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   ba71e:	b12e      	cbz	r6, ba72c <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   ba720:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   ba722:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   ba724:	3800      	subs	r0, #0
   ba726:	bf18      	it	ne
   ba728:	2001      	movne	r0, #1
   ba72a:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   ba72c:	2d00      	cmp	r5, #0
   ba72e:	d0f8      	beq.n	ba722 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   ba730:	4628      	mov	r0, r5
   ba732:	f7f9 fcb2 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   ba736:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   ba738:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   ba73a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   ba73e:	2800      	cmp	r0, #0
   ba740:	d0ef      	beq.n	ba722 <_ZN3UDP9setBufferEjPh+0x16>
   ba742:	e7ed      	b.n	ba720 <_ZN3UDP9setBufferEjPh+0x14>

000ba744 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   ba744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba746:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   ba748:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   ba74a:	4605      	mov	r5, r0
   ba74c:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   ba74e:	b91a      	cbnz	r2, ba758 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   ba750:	6c01      	ldr	r1, [r0, #64]	; 0x40
   ba752:	b109      	cbz	r1, ba758 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   ba754:	f7ff ffda 	bl	ba70c <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   ba758:	3404      	adds	r4, #4
   ba75a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba75c:	f105 0620 	add.w	r6, r5, #32
   ba760:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   ba762:	6823      	ldr	r3, [r4, #0]
   ba764:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   ba766:	2300      	movs	r3, #0
}
   ba768:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   ba76a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   ba76c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   ba76e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   ba770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba772 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   ba772:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   ba774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   ba776:	4604      	mov	r4, r0
   ba778:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   ba77a:	b92a      	cbnz	r2, ba788 <_ZN3UDP11parsePacketEm+0x16>
   ba77c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   ba77e:	b119      	cbz	r1, ba788 <_ZN3UDP11parsePacketEm+0x16>
   ba780:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   ba782:	f7ff ffc3 	bl	ba70c <_ZN3UDP9setBufferEjPh>
   ba786:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   ba788:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   ba78a:	2200      	movs	r2, #0
   ba78c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   ba78e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   ba790:	b141      	cbz	r1, ba7a4 <_ZN3UDP11parsePacketEm+0x32>
   ba792:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba794:	b132      	cbz	r2, ba7a4 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   ba796:	6820      	ldr	r0, [r4, #0]
   ba798:	6b05      	ldr	r5, [r0, #48]	; 0x30
   ba79a:	4620      	mov	r0, r4
   ba79c:	47a8      	blx	r5
        if (result > 0) {
   ba79e:	2800      	cmp	r0, #0
            _total = result;
   ba7a0:	bfc8      	it	gt
   ba7a2:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   ba7a4:	6823      	ldr	r3, [r4, #0]
   ba7a6:	691b      	ldr	r3, [r3, #16]
   ba7a8:	4620      	mov	r0, r4
}
   ba7aa:	b003      	add	sp, #12
   ba7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   ba7b0:	4718      	bx	r3
	...

000ba7b4 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   ba7b4:	b510      	push	{r4, lr}
   ba7b6:	4b07      	ldr	r3, [pc, #28]	; (ba7d4 <_ZN3UDPD1Ev+0x20>)
   ba7b8:	f103 0208 	add.w	r2, r3, #8
   ba7bc:	336c      	adds	r3, #108	; 0x6c
   ba7be:	4604      	mov	r4, r0
   ba7c0:	6002      	str	r2, [r0, #0]
   ba7c2:	6103      	str	r3, [r0, #16]
   ba7c4:	f7ff fddc 	bl	ba380 <_ZN3UDP4stopEv>
   ba7c8:	4620      	mov	r0, r4
   ba7ca:	f7ff ff8d 	bl	ba6e8 <_ZN3UDP13releaseBufferEv>
   ba7ce:	4620      	mov	r0, r4
   ba7d0:	bd10      	pop	{r4, pc}
   ba7d2:	bf00      	nop
   ba7d4:	000be794 	.word	0x000be794

000ba7d8 <_ZN3UDPD0Ev>:
   ba7d8:	b510      	push	{r4, lr}
   ba7da:	4604      	mov	r4, r0
   ba7dc:	f7ff ffea 	bl	ba7b4 <_ZN3UDPD1Ev>
   ba7e0:	4620      	mov	r0, r4
   ba7e2:	214c      	movs	r1, #76	; 0x4c
   ba7e4:	f7f9 fc5b 	bl	b409e <_ZdlPvj>
   ba7e8:	4620      	mov	r0, r4
   ba7ea:	bd10      	pop	{r4, pc}

000ba7ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba7ec:	4770      	bx	lr

000ba7ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba7ee:	7441      	strb	r1, [r0, #17]
}
   ba7f0:	4770      	bx	lr

000ba7f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba7f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba7f4:	7c00      	ldrb	r0, [r0, #16]
   ba7f6:	f7fc fdb5 	bl	b7364 <hal_usart_available_data_for_write>
}
   ba7fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba7fe:	bd08      	pop	{r3, pc}

000ba800 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba800:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba802:	7c00      	ldrb	r0, [r0, #16]
   ba804:	f7fc fd86 	bl	b7314 <hal_usart_available>
}
   ba808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba80c:	bd08      	pop	{r3, pc}

000ba80e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba80e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba810:	7c00      	ldrb	r0, [r0, #16]
   ba812:	f7fc fd8f 	bl	b7334 <hal_usart_peek>
}
   ba816:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba81a:	bd08      	pop	{r3, pc}

000ba81c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba81c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba81e:	7c00      	ldrb	r0, [r0, #16]
   ba820:	f7fc fd80 	bl	b7324 <hal_usart_read>
}
   ba824:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba828:	bd08      	pop	{r3, pc}

000ba82a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba82a:	7c00      	ldrb	r0, [r0, #16]
   ba82c:	f7fc bd8a 	b.w	b7344 <hal_usart_flush>

000ba830 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba830:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba832:	7c45      	ldrb	r5, [r0, #17]
{
   ba834:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba836:	b12d      	cbz	r5, ba844 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba838:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba83a:	b003      	add	sp, #12
   ba83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba840:	f7fc bd60 	b.w	b7304 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba844:	7c00      	ldrb	r0, [r0, #16]
   ba846:	9101      	str	r1, [sp, #4]
   ba848:	f7fc fd8c 	bl	b7364 <hal_usart_available_data_for_write>
   ba84c:	2800      	cmp	r0, #0
   ba84e:	9901      	ldr	r1, [sp, #4]
   ba850:	dcf2      	bgt.n	ba838 <_ZN11USARTSerial5writeEh+0x8>
}
   ba852:	4628      	mov	r0, r5
   ba854:	b003      	add	sp, #12
   ba856:	bd30      	pop	{r4, r5, pc}

000ba858 <_ZN11USARTSerialD0Ev>:
   ba858:	b510      	push	{r4, lr}
   ba85a:	2114      	movs	r1, #20
   ba85c:	4604      	mov	r4, r0
   ba85e:	f7f9 fc1e 	bl	b409e <_ZdlPvj>
   ba862:	4620      	mov	r0, r4
   ba864:	bd10      	pop	{r4, pc}
	...

000ba868 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba868:	b510      	push	{r4, lr}
   ba86a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba86e:	4604      	mov	r4, r0
   ba870:	4608      	mov	r0, r1
   ba872:	4611      	mov	r1, r2
   ba874:	2200      	movs	r2, #0
   ba876:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba87a:	4b04      	ldr	r3, [pc, #16]	; (ba88c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba87c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba87e:	2301      	movs	r3, #1
  _serial = serial;
   ba880:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba882:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba884:	f7fc fd7e 	bl	b7384 <hal_usart_init_ex>
}
   ba888:	4620      	mov	r0, r4
   ba88a:	bd10      	pop	{r4, pc}
   ba88c:	000be80c 	.word	0x000be80c

000ba890 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ba890:	7c00      	ldrb	r0, [r0, #16]
   ba892:	2300      	movs	r3, #0
   ba894:	f7fc bd6e 	b.w	b7374 <hal_usart_begin_config>

000ba898 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ba898:	2200      	movs	r2, #0
   ba89a:	f7ff bff9 	b.w	ba890 <_ZN11USARTSerial5beginEmm>

000ba89e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ba89e:	7c00      	ldrb	r0, [r0, #16]
   ba8a0:	f7fc bd28 	b.w	b72f4 <hal_usart_end>

000ba8a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba8a4:	7441      	strb	r1, [r0, #17]
}
   ba8a6:	4770      	bx	lr

000ba8a8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba8a8:	4770      	bx	lr

000ba8aa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba8aa:	4770      	bx	lr

000ba8ac <_ZN9USBSerial4readEv>:
{
   ba8ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba8ae:	2100      	movs	r1, #0
   ba8b0:	7c00      	ldrb	r0, [r0, #16]
   ba8b2:	f7fc fd97 	bl	b73e4 <HAL_USB_USART_Receive_Data>
}
   ba8b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba8ba:	bd08      	pop	{r3, pc}

000ba8bc <_ZN9USBSerial4peekEv>:
{
   ba8bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba8be:	2101      	movs	r1, #1
   ba8c0:	7c00      	ldrb	r0, [r0, #16]
   ba8c2:	f7fc fd8f 	bl	b73e4 <HAL_USB_USART_Receive_Data>
}
   ba8c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba8ca:	bd08      	pop	{r3, pc}

000ba8cc <_ZN9USBSerial17availableForWriteEv>:
{
   ba8cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba8ce:	7c00      	ldrb	r0, [r0, #16]
   ba8d0:	f7fc fd80 	bl	b73d4 <HAL_USB_USART_Available_Data_For_Write>
}
   ba8d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba8d8:	bd08      	pop	{r3, pc}

000ba8da <_ZN9USBSerial9availableEv>:
{
   ba8da:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba8dc:	7c00      	ldrb	r0, [r0, #16]
   ba8de:	f7fc fd71 	bl	b73c4 <HAL_USB_USART_Available_Data>
}
   ba8e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba8e6:	bd08      	pop	{r3, pc}

000ba8e8 <_ZN9USBSerial5writeEh>:
{
   ba8e8:	b513      	push	{r0, r1, r4, lr}
   ba8ea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba8ec:	7c00      	ldrb	r0, [r0, #16]
{
   ba8ee:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba8f0:	f7fc fd70 	bl	b73d4 <HAL_USB_USART_Available_Data_For_Write>
   ba8f4:	2800      	cmp	r0, #0
   ba8f6:	9901      	ldr	r1, [sp, #4]
   ba8f8:	dc01      	bgt.n	ba8fe <_ZN9USBSerial5writeEh+0x16>
   ba8fa:	7c60      	ldrb	r0, [r4, #17]
   ba8fc:	b120      	cbz	r0, ba908 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba8fe:	7c20      	ldrb	r0, [r4, #16]
   ba900:	f7fc fd78 	bl	b73f4 <HAL_USB_USART_Send_Data>
   ba904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba908:	b002      	add	sp, #8
   ba90a:	bd10      	pop	{r4, pc}

000ba90c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba90c:	7c00      	ldrb	r0, [r0, #16]
   ba90e:	f7fc bd79 	b.w	b7404 <HAL_USB_USART_Flush_Data>

000ba912 <_ZN9USBSerialD0Ev>:
   ba912:	b510      	push	{r4, lr}
   ba914:	2114      	movs	r1, #20
   ba916:	4604      	mov	r4, r0
   ba918:	f7f9 fbc1 	bl	b409e <_ZdlPvj>
   ba91c:	4620      	mov	r0, r4
   ba91e:	bd10      	pop	{r4, pc}

000ba920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba920:	b510      	push	{r4, lr}
   ba922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba926:	4604      	mov	r4, r0
   ba928:	4608      	mov	r0, r1
   ba92a:	2100      	movs	r1, #0
   ba92c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba930:	4b04      	ldr	r3, [pc, #16]	; (ba944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba932:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba934:	2301      	movs	r3, #1
  _serial = serial;
   ba936:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba938:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba93a:	4611      	mov	r1, r2
   ba93c:	f7fc fd2a 	bl	b7394 <HAL_USB_USART_Init>
}
   ba940:	4620      	mov	r0, r4
   ba942:	bd10      	pop	{r4, pc}
   ba944:	000be83c 	.word	0x000be83c

000ba948 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba948:	7c00      	ldrb	r0, [r0, #16]
   ba94a:	2200      	movs	r2, #0
   ba94c:	f7fc bd2a 	b.w	b73a4 <HAL_USB_USART_Begin>

000ba950 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ba950:	7c00      	ldrb	r0, [r0, #16]
   ba952:	f7fc bd2f 	b.w	b73b4 <HAL_USB_USART_End>

000ba956 <_Z19acquireSerialBufferv>:
{
   ba956:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba958:	2214      	movs	r2, #20
{
   ba95a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba95c:	2100      	movs	r1, #0
   ba95e:	f001 f943 	bl	bbbe8 <memset>
}
   ba962:	4620      	mov	r0, r4
   ba964:	bd10      	pop	{r4, pc}
	...

000ba968 <_Z16_fetch_usbserialv>:
{
   ba968:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba96a:	4c0f      	ldr	r4, [pc, #60]	; (ba9a8 <_Z16_fetch_usbserialv+0x40>)
{
   ba96c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba96e:	a803      	add	r0, sp, #12
   ba970:	f7ff fff1 	bl	ba956 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba974:	7821      	ldrb	r1, [r4, #0]
   ba976:	f3bf 8f5b 	dmb	ish
   ba97a:	f011 0101 	ands.w	r1, r1, #1
   ba97e:	d10f      	bne.n	ba9a0 <_Z16_fetch_usbserialv+0x38>
   ba980:	4620      	mov	r0, r4
   ba982:	9101      	str	r1, [sp, #4]
   ba984:	f7f9 fb98 	bl	b40b8 <__cxa_guard_acquire>
   ba988:	9901      	ldr	r1, [sp, #4]
   ba98a:	b148      	cbz	r0, ba9a0 <_Z16_fetch_usbserialv+0x38>
   ba98c:	aa03      	add	r2, sp, #12
   ba98e:	4807      	ldr	r0, [pc, #28]	; (ba9ac <_Z16_fetch_usbserialv+0x44>)
   ba990:	f7ff ffc6 	bl	ba920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba994:	4620      	mov	r0, r4
   ba996:	f7f9 fb94 	bl	b40c2 <__cxa_guard_release>
   ba99a:	4805      	ldr	r0, [pc, #20]	; (ba9b0 <_Z16_fetch_usbserialv+0x48>)
   ba99c:	f001 f8e6 	bl	bbb6c <atexit>
	return _usbserial;
}
   ba9a0:	4802      	ldr	r0, [pc, #8]	; (ba9ac <_Z16_fetch_usbserialv+0x44>)
   ba9a2:	b008      	add	sp, #32
   ba9a4:	bd10      	pop	{r4, pc}
   ba9a6:	bf00      	nop
   ba9a8:	2003e6f4 	.word	0x2003e6f4
   ba9ac:	2003e6f8 	.word	0x2003e6f8
   ba9b0:	000ba8a9 	.word	0x000ba8a9

000ba9b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba9b4:	4b01      	ldr	r3, [pc, #4]	; (ba9bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba9b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba9b8:	4770      	bx	lr
   ba9ba:	bf00      	nop
   ba9bc:	2003e13c 	.word	0x2003e13c

000ba9c0 <serialEventRun>:
{
   ba9c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba9c2:	4b0b      	ldr	r3, [pc, #44]	; (ba9f0 <serialEventRun+0x30>)
   ba9c4:	b143      	cbz	r3, ba9d8 <serialEventRun+0x18>
   ba9c6:	f7ff ffcf 	bl	ba968 <_Z16_fetch_usbserialv>
   ba9ca:	6803      	ldr	r3, [r0, #0]
   ba9cc:	691b      	ldr	r3, [r3, #16]
   ba9ce:	4798      	blx	r3
   ba9d0:	2800      	cmp	r0, #0
   ba9d2:	dd01      	ble.n	ba9d8 <serialEventRun+0x18>
        serialEvent();
   ba9d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba9d8:	4b06      	ldr	r3, [pc, #24]	; (ba9f4 <serialEventRun+0x34>)
   ba9da:	b143      	cbz	r3, ba9ee <serialEventRun+0x2e>
   ba9dc:	f000 f9ac 	bl	bad38 <_Z22__fetch_global_Serial1v>
   ba9e0:	6803      	ldr	r3, [r0, #0]
   ba9e2:	691b      	ldr	r3, [r3, #16]
   ba9e4:	4798      	blx	r3
   ba9e6:	2800      	cmp	r0, #0
   ba9e8:	dd01      	ble.n	ba9ee <serialEventRun+0x2e>
        serialEvent1();
   ba9ea:	f3af 8000 	nop.w
}
   ba9ee:	bd08      	pop	{r3, pc}
	...

000ba9f8 <_post_loop>:
{
   ba9f8:	b508      	push	{r3, lr}
	serialEventRun();
   ba9fa:	f7ff ffe1 	bl	ba9c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba9fe:	f7fc fb29 	bl	b7054 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   baa02:	4b01      	ldr	r3, [pc, #4]	; (baa08 <_post_loop+0x10>)
   baa04:	6018      	str	r0, [r3, #0]
}
   baa06:	bd08      	pop	{r3, pc}
   baa08:	2003e714 	.word	0x2003e714

000baa0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   baa0c:	4805      	ldr	r0, [pc, #20]	; (baa24 <_Z33system_initialize_user_backup_ramv+0x18>)
   baa0e:	4a06      	ldr	r2, [pc, #24]	; (baa28 <_Z33system_initialize_user_backup_ramv+0x1c>)
   baa10:	4906      	ldr	r1, [pc, #24]	; (baa2c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   baa12:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   baa14:	1a12      	subs	r2, r2, r0
   baa16:	f001 f8bf 	bl	bbb98 <memcpy>
    __backup_sram_signature = signature;
   baa1a:	4b05      	ldr	r3, [pc, #20]	; (baa30 <_Z33system_initialize_user_backup_ramv+0x24>)
   baa1c:	4a05      	ldr	r2, [pc, #20]	; (baa34 <_Z33system_initialize_user_backup_ramv+0x28>)
   baa1e:	601a      	str	r2, [r3, #0]
}
   baa20:	bd08      	pop	{r3, pc}
   baa22:	bf00      	nop
   baa24:	2003f400 	.word	0x2003f400
   baa28:	2003f404 	.word	0x2003f404
   baa2c:	000beda0 	.word	0x000beda0
   baa30:	2003f400 	.word	0x2003f400
   baa34:	9a271c1e 	.word	0x9a271c1e

000baa38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   baa38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   baa3a:	2300      	movs	r3, #0
   baa3c:	9300      	str	r3, [sp, #0]
   baa3e:	461a      	mov	r2, r3
   baa40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   baa44:	f7fc fd42 	bl	b74cc <system_ctrl_set_result>
}
   baa48:	b003      	add	sp, #12
   baa4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baa50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   baa50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   baa52:	8843      	ldrh	r3, [r0, #2]
   baa54:	2b0a      	cmp	r3, #10
   baa56:	d008      	beq.n	baa6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   baa58:	2b50      	cmp	r3, #80	; 0x50
   baa5a:	d10b      	bne.n	baa74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   baa5c:	4b09      	ldr	r3, [pc, #36]	; (baa84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   baa5e:	681b      	ldr	r3, [r3, #0]
   baa60:	b14b      	cbz	r3, baa76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   baa62:	b003      	add	sp, #12
   baa64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   baa68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   baa6a:	f7ff ffe5 	bl	baa38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   baa6e:	b003      	add	sp, #12
   baa70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   baa74:	2300      	movs	r3, #0
   baa76:	9300      	str	r3, [sp, #0]
   baa78:	461a      	mov	r2, r3
   baa7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   baa7e:	f7fc fd25 	bl	b74cc <system_ctrl_set_result>
}
   baa82:	e7f4      	b.n	baa6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   baa84:	2003e710 	.word	0x2003e710

000baa88 <module_user_init_hook>:
{
   baa88:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   baa8a:	4812      	ldr	r0, [pc, #72]	; (baad4 <module_user_init_hook+0x4c>)
   baa8c:	2100      	movs	r1, #0
   baa8e:	f7fc fe07 	bl	b76a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   baa92:	4b11      	ldr	r3, [pc, #68]	; (baad8 <module_user_init_hook+0x50>)
   baa94:	681a      	ldr	r2, [r3, #0]
   baa96:	4b11      	ldr	r3, [pc, #68]	; (baadc <module_user_init_hook+0x54>)
   baa98:	429a      	cmp	r2, r3
   baa9a:	4b11      	ldr	r3, [pc, #68]	; (baae0 <module_user_init_hook+0x58>)
   baa9c:	bf0c      	ite	eq
   baa9e:	2201      	moveq	r2, #1
   baaa0:	2200      	movne	r2, #0
   baaa2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   baaa4:	d001      	beq.n	baaaa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   baaa6:	f7ff ffb1 	bl	baa0c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   baaaa:	f7fc fac3 	bl	b7034 <HAL_RNG_GetRandomNumber>
   baaae:	4604      	mov	r4, r0
    srand(seed);
   baab0:	f001 f8a2 	bl	bbbf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   baab4:	4b0b      	ldr	r3, [pc, #44]	; (baae4 <module_user_init_hook+0x5c>)
   baab6:	b113      	cbz	r3, baabe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   baab8:	4620      	mov	r0, r4
   baaba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   baabe:	2100      	movs	r1, #0
   baac0:	4808      	ldr	r0, [pc, #32]	; (baae4 <module_user_init_hook+0x5c>)
   baac2:	f7fc fd35 	bl	b7530 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   baac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   baaca:	4807      	ldr	r0, [pc, #28]	; (baae8 <module_user_init_hook+0x60>)
   baacc:	2100      	movs	r1, #0
   baace:	f7fc bcf3 	b.w	b74b8 <system_ctrl_set_app_request_handler>
   baad2:	bf00      	nop
   baad4:	000ba9b5 	.word	0x000ba9b5
   baad8:	2003f400 	.word	0x2003f400
   baadc:	9a271c1e 	.word	0x9a271c1e
   baae0:	2003e70c 	.word	0x2003e70c
   baae4:	00000000 	.word	0x00000000
   baae8:	000baa51 	.word	0x000baa51

000baaec <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   baaec:	b508      	push	{r3, lr}
   baaee:	4b02      	ldr	r3, [pc, #8]	; (baaf8 <spark_protocol_instance+0xc>)
   baaf0:	681b      	ldr	r3, [r3, #0]
   baaf2:	681b      	ldr	r3, [r3, #0]
   baaf4:	9301      	str	r3, [sp, #4]
   baaf6:	bd08      	pop	{r3, pc}
   baaf8:	0003025c 	.word	0x0003025c

000baafc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   baafc:	b508      	push	{r3, lr}
   baafe:	4b02      	ldr	r3, [pc, #8]	; (bab08 <spark_protocol_set_product_id+0xc>)
   bab00:	681b      	ldr	r3, [r3, #0]
   bab02:	685b      	ldr	r3, [r3, #4]
   bab04:	9301      	str	r3, [sp, #4]
   bab06:	bd08      	pop	{r3, pc}
   bab08:	0003025c 	.word	0x0003025c

000bab0c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bab0c:	b508      	push	{r3, lr}
   bab0e:	4b02      	ldr	r3, [pc, #8]	; (bab18 <spark_protocol_set_product_firmware_version+0xc>)
   bab10:	681b      	ldr	r3, [r3, #0]
   bab12:	689b      	ldr	r3, [r3, #8]
   bab14:	9301      	str	r3, [sp, #4]
   bab16:	bd08      	pop	{r3, pc}
   bab18:	0003025c 	.word	0x0003025c

000bab1c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bab1c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bab1e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bab20:	d902      	bls.n	bab28 <pinAvailable+0xc>
    return false;
   bab22:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bab24:	b002      	add	sp, #8
   bab26:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bab28:	f1a0 030b 	sub.w	r3, r0, #11
   bab2c:	2b02      	cmp	r3, #2
   bab2e:	d81a      	bhi.n	bab66 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bab30:	4c17      	ldr	r4, [pc, #92]	; (bab90 <pinAvailable+0x74>)
   bab32:	7821      	ldrb	r1, [r4, #0]
   bab34:	f3bf 8f5b 	dmb	ish
   bab38:	f011 0101 	ands.w	r1, r1, #1
   bab3c:	d10b      	bne.n	bab56 <pinAvailable+0x3a>
   bab3e:	4620      	mov	r0, r4
   bab40:	9101      	str	r1, [sp, #4]
   bab42:	f7f9 fab9 	bl	b40b8 <__cxa_guard_acquire>
   bab46:	9901      	ldr	r1, [sp, #4]
   bab48:	b128      	cbz	r0, bab56 <pinAvailable+0x3a>
   bab4a:	4812      	ldr	r0, [pc, #72]	; (bab94 <pinAvailable+0x78>)
   bab4c:	f7fe ff3a 	bl	b99c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bab50:	4620      	mov	r0, r4
   bab52:	f7f9 fab6 	bl	b40c2 <__cxa_guard_release>
   bab56:	4b0f      	ldr	r3, [pc, #60]	; (bab94 <pinAvailable+0x78>)
   bab58:	7818      	ldrb	r0, [r3, #0]
   bab5a:	f7fc fba3 	bl	b72a4 <hal_spi_is_enabled>
   bab5e:	2800      	cmp	r0, #0
   bab60:	d1df      	bne.n	bab22 <pinAvailable+0x6>
  return true; // 'pin' is available
   bab62:	2001      	movs	r0, #1
   bab64:	e7de      	b.n	bab24 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bab66:	2801      	cmp	r0, #1
   bab68:	d809      	bhi.n	bab7e <pinAvailable+0x62>
   bab6a:	f000 f881 	bl	bac70 <_Z19__fetch_global_Wirev>
   bab6e:	2100      	movs	r1, #0
   bab70:	7c00      	ldrb	r0, [r0, #16]
   bab72:	f7fc fad7 	bl	b7124 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bab76:	f080 0001 	eor.w	r0, r0, #1
   bab7a:	b2c0      	uxtb	r0, r0
   bab7c:	e7d2      	b.n	bab24 <pinAvailable+0x8>
   bab7e:	3809      	subs	r0, #9
   bab80:	2801      	cmp	r0, #1
   bab82:	d8ee      	bhi.n	bab62 <pinAvailable+0x46>
   bab84:	f000 f8d8 	bl	bad38 <_Z22__fetch_global_Serial1v>
   bab88:	7c00      	ldrb	r0, [r0, #16]
   bab8a:	f7fc fbe3 	bl	b7354 <hal_usart_is_enabled>
   bab8e:	e7f2      	b.n	bab76 <pinAvailable+0x5a>
   bab90:	2003e4b0 	.word	0x2003e4b0
   bab94:	2003e4b4 	.word	0x2003e4b4

000bab98 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bab98:	2823      	cmp	r0, #35	; 0x23
{
   bab9a:	b538      	push	{r3, r4, r5, lr}
   bab9c:	4604      	mov	r4, r0
   bab9e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   baba0:	d80a      	bhi.n	babb8 <pinMode+0x20>
   baba2:	29ff      	cmp	r1, #255	; 0xff
   baba4:	d008      	beq.n	babb8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   baba6:	f7ff ffb9 	bl	bab1c <pinAvailable>
   babaa:	b128      	cbz	r0, babb8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   babac:	4629      	mov	r1, r5
   babae:	4620      	mov	r0, r4
}
   babb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   babb4:	f7fc ba56 	b.w	b7064 <HAL_Pin_Mode>
}
   babb8:	bd38      	pop	{r3, r4, r5, pc}

000babba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   babba:	b538      	push	{r3, r4, r5, lr}
   babbc:	4604      	mov	r4, r0
   babbe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   babc0:	f7fc fa58 	bl	b7074 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   babc4:	28ff      	cmp	r0, #255	; 0xff
   babc6:	d010      	beq.n	babea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   babc8:	2806      	cmp	r0, #6
   babca:	d804      	bhi.n	babd6 <digitalWrite+0x1c>
   babcc:	234d      	movs	r3, #77	; 0x4d
   babce:	fa23 f000 	lsr.w	r0, r3, r0
   babd2:	07c3      	lsls	r3, r0, #31
   babd4:	d409      	bmi.n	babea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   babd6:	4620      	mov	r0, r4
   babd8:	f7ff ffa0 	bl	bab1c <pinAvailable>
   babdc:	b128      	cbz	r0, babea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   babde:	4629      	mov	r1, r5
   babe0:	4620      	mov	r0, r4
}
   babe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   babe6:	f7fc ba4d 	b.w	b7084 <HAL_GPIO_Write>
}
   babea:	bd38      	pop	{r3, r4, r5, pc}

000babec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   babec:	b510      	push	{r4, lr}
   babee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   babf0:	f7fc fa40 	bl	b7074 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   babf4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   babf6:	b2db      	uxtb	r3, r3
   babf8:	2b01      	cmp	r3, #1
   babfa:	d908      	bls.n	bac0e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   babfc:	4620      	mov	r0, r4
   babfe:	f7ff ff8d 	bl	bab1c <pinAvailable>
   bac02:	b120      	cbz	r0, bac0e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bac04:	4620      	mov	r0, r4
}
   bac06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bac0a:	f7fc ba43 	b.w	b7094 <HAL_GPIO_Read>
}
   bac0e:	2000      	movs	r0, #0
   bac10:	bd10      	pop	{r4, pc}

000bac12 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bac12:	4770      	bx	lr

000bac14 <__tcf_1>:
   bac14:	4770      	bx	lr
	...

000bac18 <_Z17acquireWireBufferv>:
{
   bac18:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bac1a:	2520      	movs	r5, #32
   bac1c:	2314      	movs	r3, #20
{
   bac1e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bac20:	6003      	str	r3, [r0, #0]
   bac22:	6085      	str	r5, [r0, #8]
   bac24:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bac26:	4906      	ldr	r1, [pc, #24]	; (bac40 <_Z17acquireWireBufferv+0x28>)
   bac28:	4628      	mov	r0, r5
   bac2a:	f000 f8ab 	bl	bad84 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bac2e:	4904      	ldr	r1, [pc, #16]	; (bac40 <_Z17acquireWireBufferv+0x28>)
	};
   bac30:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bac32:	4628      	mov	r0, r5
   bac34:	f000 f8a6 	bl	bad84 <_ZnajRKSt9nothrow_t>
	};
   bac38:	60e0      	str	r0, [r4, #12]
}
   bac3a:	4620      	mov	r0, r4
   bac3c:	bd38      	pop	{r3, r4, r5, pc}
   bac3e:	bf00      	nop
   bac40:	000be864 	.word	0x000be864

000bac44 <_Z18acquireWire1Bufferv>:
   bac44:	b538      	push	{r3, r4, r5, lr}
   bac46:	2520      	movs	r5, #32
   bac48:	2314      	movs	r3, #20
   bac4a:	4604      	mov	r4, r0
   bac4c:	6003      	str	r3, [r0, #0]
   bac4e:	6085      	str	r5, [r0, #8]
   bac50:	6105      	str	r5, [r0, #16]
   bac52:	4906      	ldr	r1, [pc, #24]	; (bac6c <_Z18acquireWire1Bufferv+0x28>)
   bac54:	4628      	mov	r0, r5
   bac56:	f000 f895 	bl	bad84 <_ZnajRKSt9nothrow_t>
   bac5a:	4904      	ldr	r1, [pc, #16]	; (bac6c <_Z18acquireWire1Bufferv+0x28>)
   bac5c:	6060      	str	r0, [r4, #4]
   bac5e:	4628      	mov	r0, r5
   bac60:	f000 f890 	bl	bad84 <_ZnajRKSt9nothrow_t>
   bac64:	60e0      	str	r0, [r4, #12]
   bac66:	4620      	mov	r0, r4
   bac68:	bd38      	pop	{r3, r4, r5, pc}
   bac6a:	bf00      	nop
   bac6c:	000be864 	.word	0x000be864

000bac70 <_Z19__fetch_global_Wirev>:
{
   bac70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bac72:	4d0e      	ldr	r5, [pc, #56]	; (bacac <_Z19__fetch_global_Wirev+0x3c>)
   bac74:	7829      	ldrb	r1, [r5, #0]
   bac76:	f3bf 8f5b 	dmb	ish
   bac7a:	f011 0401 	ands.w	r4, r1, #1
{
   bac7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bac80:	d111      	bne.n	baca6 <_Z19__fetch_global_Wirev+0x36>
   bac82:	4628      	mov	r0, r5
   bac84:	f7f9 fa18 	bl	b40b8 <__cxa_guard_acquire>
   bac88:	b168      	cbz	r0, baca6 <_Z19__fetch_global_Wirev+0x36>
   bac8a:	a801      	add	r0, sp, #4
   bac8c:	f7ff ffc4 	bl	bac18 <_Z17acquireWireBufferv>
   bac90:	aa01      	add	r2, sp, #4
   bac92:	4621      	mov	r1, r4
   bac94:	4806      	ldr	r0, [pc, #24]	; (bacb0 <_Z19__fetch_global_Wirev+0x40>)
   bac96:	f7fd fa0b 	bl	b80b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bac9a:	4628      	mov	r0, r5
   bac9c:	f7f9 fa11 	bl	b40c2 <__cxa_guard_release>
   baca0:	4804      	ldr	r0, [pc, #16]	; (bacb4 <_Z19__fetch_global_Wirev+0x44>)
   baca2:	f000 ff63 	bl	bbb6c <atexit>
	return wire;
}
   baca6:	4802      	ldr	r0, [pc, #8]	; (bacb0 <_Z19__fetch_global_Wirev+0x40>)
   baca8:	b007      	add	sp, #28
   bacaa:	bd30      	pop	{r4, r5, pc}
   bacac:	2003e718 	.word	0x2003e718
   bacb0:	2003e720 	.word	0x2003e720
   bacb4:	000bac13 	.word	0x000bac13

000bacb8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bacb8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bacba:	4c0e      	ldr	r4, [pc, #56]	; (bacf4 <_Z20__fetch_global_Wire1v+0x3c>)
   bacbc:	7823      	ldrb	r3, [r4, #0]
   bacbe:	f3bf 8f5b 	dmb	ish
   bacc2:	07db      	lsls	r3, r3, #31
{
   bacc4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bacc6:	d411      	bmi.n	bacec <_Z20__fetch_global_Wire1v+0x34>
   bacc8:	4620      	mov	r0, r4
   bacca:	f7f9 f9f5 	bl	b40b8 <__cxa_guard_acquire>
   bacce:	b168      	cbz	r0, bacec <_Z20__fetch_global_Wire1v+0x34>
   bacd0:	a801      	add	r0, sp, #4
   bacd2:	f7ff ffb7 	bl	bac44 <_Z18acquireWire1Bufferv>
   bacd6:	aa01      	add	r2, sp, #4
   bacd8:	2101      	movs	r1, #1
   bacda:	4807      	ldr	r0, [pc, #28]	; (bacf8 <_Z20__fetch_global_Wire1v+0x40>)
   bacdc:	f7fd f9e8 	bl	b80b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bace0:	4620      	mov	r0, r4
   bace2:	f7f9 f9ee 	bl	b40c2 <__cxa_guard_release>
   bace6:	4805      	ldr	r0, [pc, #20]	; (bacfc <_Z20__fetch_global_Wire1v+0x44>)
   bace8:	f000 ff40 	bl	bbb6c <atexit>
	return wire;
}
   bacec:	4802      	ldr	r0, [pc, #8]	; (bacf8 <_Z20__fetch_global_Wire1v+0x40>)
   bacee:	b006      	add	sp, #24
   bacf0:	bd10      	pop	{r4, pc}
   bacf2:	bf00      	nop
   bacf4:	2003e71c 	.word	0x2003e71c
   bacf8:	2003e734 	.word	0x2003e734
   bacfc:	000bac15 	.word	0x000bac15

000bad00 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad00:	4770      	bx	lr
	...

000bad04 <_Z20acquireSerial1Bufferv>:
{
   bad04:	b538      	push	{r3, r4, r5, lr}
   bad06:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bad08:	2514      	movs	r5, #20
   bad0a:	462a      	mov	r2, r5
   bad0c:	2100      	movs	r1, #0
   bad0e:	f000 ff6b 	bl	bbbe8 <memset>
   bad12:	8025      	strh	r5, [r4, #0]
   bad14:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad16:	4907      	ldr	r1, [pc, #28]	; (bad34 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bad18:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad1a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bad1c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad1e:	f000 f831 	bl	bad84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad22:	4904      	ldr	r1, [pc, #16]	; (bad34 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bad24:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad26:	4628      	mov	r0, r5
   bad28:	f000 f82c 	bl	bad84 <_ZnajRKSt9nothrow_t>
    };
   bad2c:	60e0      	str	r0, [r4, #12]
}
   bad2e:	4620      	mov	r0, r4
   bad30:	bd38      	pop	{r3, r4, r5, pc}
   bad32:	bf00      	nop
   bad34:	000be864 	.word	0x000be864

000bad38 <_Z22__fetch_global_Serial1v>:
{
   bad38:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad3a:	4d0e      	ldr	r5, [pc, #56]	; (bad74 <_Z22__fetch_global_Serial1v+0x3c>)
   bad3c:	7829      	ldrb	r1, [r5, #0]
   bad3e:	f3bf 8f5b 	dmb	ish
   bad42:	f011 0401 	ands.w	r4, r1, #1
{
   bad46:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad48:	d111      	bne.n	bad6e <_Z22__fetch_global_Serial1v+0x36>
   bad4a:	4628      	mov	r0, r5
   bad4c:	f7f9 f9b4 	bl	b40b8 <__cxa_guard_acquire>
   bad50:	b168      	cbz	r0, bad6e <_Z22__fetch_global_Serial1v+0x36>
   bad52:	a801      	add	r0, sp, #4
   bad54:	f7ff ffd6 	bl	bad04 <_Z20acquireSerial1Bufferv>
   bad58:	aa01      	add	r2, sp, #4
   bad5a:	4621      	mov	r1, r4
   bad5c:	4806      	ldr	r0, [pc, #24]	; (bad78 <_Z22__fetch_global_Serial1v+0x40>)
   bad5e:	f7ff fd83 	bl	ba868 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bad62:	4628      	mov	r0, r5
   bad64:	f7f9 f9ad 	bl	b40c2 <__cxa_guard_release>
   bad68:	4804      	ldr	r0, [pc, #16]	; (bad7c <_Z22__fetch_global_Serial1v+0x44>)
   bad6a:	f000 feff 	bl	bbb6c <atexit>
    return serial1;
}
   bad6e:	4802      	ldr	r0, [pc, #8]	; (bad78 <_Z22__fetch_global_Serial1v+0x40>)
   bad70:	b007      	add	sp, #28
   bad72:	bd30      	pop	{r4, r5, pc}
   bad74:	2003e748 	.word	0x2003e748
   bad78:	2003e74c 	.word	0x2003e74c
   bad7c:	000bad01 	.word	0x000bad01

000bad80 <_ZnwjRKSt9nothrow_t>:
   bad80:	f7f9 b989 	b.w	b4096 <_Znwj>

000bad84 <_ZnajRKSt9nothrow_t>:
   bad84:	f7f9 b989 	b.w	b409a <_Znaj>

000bad88 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   bad88:	68c3      	ldr	r3, [r0, #12]
   bad8a:	689a      	ldr	r2, [r3, #8]
   bad8c:	60c2      	str	r2, [r0, #12]
   bad8e:	b510      	push	{r4, lr}
   bad90:	b102      	cbz	r2, bad94 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   bad92:	6050      	str	r0, [r2, #4]
   bad94:	6842      	ldr	r2, [r0, #4]
   bad96:	605a      	str	r2, [r3, #4]
   bad98:	680c      	ldr	r4, [r1, #0]
   bad9a:	4284      	cmp	r4, r0
   bad9c:	d103      	bne.n	bada6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   bad9e:	600b      	str	r3, [r1, #0]
   bada0:	6098      	str	r0, [r3, #8]
   bada2:	6043      	str	r3, [r0, #4]
   bada4:	bd10      	pop	{r4, pc}
   bada6:	6891      	ldr	r1, [r2, #8]
   bada8:	4281      	cmp	r1, r0
   badaa:	bf0c      	ite	eq
   badac:	6093      	streq	r3, [r2, #8]
   badae:	60d3      	strne	r3, [r2, #12]
   badb0:	e7f6      	b.n	bada0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000badb2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   badb2:	6883      	ldr	r3, [r0, #8]
   badb4:	68da      	ldr	r2, [r3, #12]
   badb6:	6082      	str	r2, [r0, #8]
   badb8:	b510      	push	{r4, lr}
   badba:	b102      	cbz	r2, badbe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   badbc:	6050      	str	r0, [r2, #4]
   badbe:	6842      	ldr	r2, [r0, #4]
   badc0:	605a      	str	r2, [r3, #4]
   badc2:	680c      	ldr	r4, [r1, #0]
   badc4:	4284      	cmp	r4, r0
   badc6:	d103      	bne.n	badd0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   badc8:	600b      	str	r3, [r1, #0]
   badca:	60d8      	str	r0, [r3, #12]
   badcc:	6043      	str	r3, [r0, #4]
   badce:	bd10      	pop	{r4, pc}
   badd0:	68d1      	ldr	r1, [r2, #12]
   badd2:	4281      	cmp	r1, r0
   badd4:	bf0c      	ite	eq
   badd6:	60d3      	streq	r3, [r2, #12]
   badd8:	6093      	strne	r3, [r2, #8]
   badda:	e7f6      	b.n	badca <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000baddc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   baddc:	68c3      	ldr	r3, [r0, #12]
   badde:	b123      	cbz	r3, badea <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   bade0:	4618      	mov	r0, r3
   bade2:	689b      	ldr	r3, [r3, #8]
   bade4:	2b00      	cmp	r3, #0
   bade6:	d1fb      	bne.n	bade0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   bade8:	4770      	bx	lr
   badea:	6843      	ldr	r3, [r0, #4]
   badec:	68da      	ldr	r2, [r3, #12]
   badee:	4282      	cmp	r2, r0
   badf0:	d102      	bne.n	badf8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   badf2:	4618      	mov	r0, r3
   badf4:	685b      	ldr	r3, [r3, #4]
   badf6:	e7f9      	b.n	badec <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   badf8:	68c2      	ldr	r2, [r0, #12]
   badfa:	4293      	cmp	r3, r2
   badfc:	bf18      	it	ne
   badfe:	4618      	movne	r0, r3
   bae00:	4770      	bx	lr

000bae02 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bae02:	7803      	ldrb	r3, [r0, #0]
   bae04:	b933      	cbnz	r3, bae14 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bae06:	6843      	ldr	r3, [r0, #4]
   bae08:	685b      	ldr	r3, [r3, #4]
   bae0a:	4283      	cmp	r3, r0
   bae0c:	d102      	bne.n	bae14 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   bae0e:	68db      	ldr	r3, [r3, #12]
   bae10:	4618      	mov	r0, r3
   bae12:	4770      	bx	lr
   bae14:	6882      	ldr	r2, [r0, #8]
   bae16:	b122      	cbz	r2, bae22 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   bae18:	4613      	mov	r3, r2
   bae1a:	68d2      	ldr	r2, [r2, #12]
   bae1c:	2a00      	cmp	r2, #0
   bae1e:	d1fb      	bne.n	bae18 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   bae20:	e7f6      	b.n	bae10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bae22:	6843      	ldr	r3, [r0, #4]
   bae24:	689a      	ldr	r2, [r3, #8]
   bae26:	4282      	cmp	r2, r0
   bae28:	d1f2      	bne.n	bae10 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   bae2a:	4618      	mov	r0, r3
   bae2c:	685b      	ldr	r3, [r3, #4]
   bae2e:	e7f9      	b.n	bae24 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000bae30 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   bae30:	f7ff bfd4 	b.w	baddc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000bae34 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   bae34:	f7ff bfe5 	b.w	bae02 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000bae38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   bae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bae3c:	461e      	mov	r6, r3
   bae3e:	f103 0804 	add.w	r8, r3, #4
   bae42:	2300      	movs	r3, #0
   bae44:	e9c1 3302 	strd	r3, r3, [r1, #8]
   bae48:	460c      	mov	r4, r1
   bae4a:	604a      	str	r2, [r1, #4]
   bae4c:	700b      	strb	r3, [r1, #0]
   bae4e:	b300      	cbz	r0, bae92 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   bae50:	4296      	cmp	r6, r2
   bae52:	6091      	str	r1, [r2, #8]
   bae54:	d118      	bne.n	bae88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   bae56:	6071      	str	r1, [r6, #4]
   bae58:	60f4      	str	r4, [r6, #12]
   bae5a:	2701      	movs	r7, #1
   bae5c:	f04f 0900 	mov.w	r9, #0
   bae60:	6873      	ldr	r3, [r6, #4]
   bae62:	42a3      	cmp	r3, r4
   bae64:	d03f      	beq.n	baee6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   bae66:	6860      	ldr	r0, [r4, #4]
   bae68:	7802      	ldrb	r2, [r0, #0]
   bae6a:	2a00      	cmp	r2, #0
   bae6c:	d13b      	bne.n	baee6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   bae6e:	6845      	ldr	r5, [r0, #4]
   bae70:	68ab      	ldr	r3, [r5, #8]
   bae72:	4298      	cmp	r0, r3
   bae74:	d123      	bne.n	baebe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   bae76:	68eb      	ldr	r3, [r5, #12]
   bae78:	b183      	cbz	r3, bae9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   bae7a:	781a      	ldrb	r2, [r3, #0]
   bae7c:	b972      	cbnz	r2, bae9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   bae7e:	7007      	strb	r7, [r0, #0]
   bae80:	701f      	strb	r7, [r3, #0]
   bae82:	702a      	strb	r2, [r5, #0]
   bae84:	462c      	mov	r4, r5
   bae86:	e7eb      	b.n	bae60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   bae88:	68b3      	ldr	r3, [r6, #8]
   bae8a:	4293      	cmp	r3, r2
   bae8c:	d1e5      	bne.n	bae5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bae8e:	60b1      	str	r1, [r6, #8]
   bae90:	e7e3      	b.n	bae5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bae92:	60d1      	str	r1, [r2, #12]
   bae94:	68f3      	ldr	r3, [r6, #12]
   bae96:	4293      	cmp	r3, r2
   bae98:	d1df      	bne.n	bae5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   bae9a:	e7dd      	b.n	bae58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   bae9c:	68c3      	ldr	r3, [r0, #12]
   bae9e:	42a3      	cmp	r3, r4
   baea0:	d103      	bne.n	baeaa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   baea2:	4641      	mov	r1, r8
   baea4:	f7ff ff70 	bl	bad88 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   baea8:	4604      	mov	r4, r0
   baeaa:	6863      	ldr	r3, [r4, #4]
   baeac:	4641      	mov	r1, r8
   baeae:	701f      	strb	r7, [r3, #0]
   baeb0:	4628      	mov	r0, r5
   baeb2:	f885 9000 	strb.w	r9, [r5]
   baeb6:	f7ff ff7c 	bl	badb2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   baeba:	4625      	mov	r5, r4
   baebc:	e7e2      	b.n	bae84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   baebe:	b113      	cbz	r3, baec6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   baec0:	781a      	ldrb	r2, [r3, #0]
   baec2:	2a00      	cmp	r2, #0
   baec4:	d0db      	beq.n	bae7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   baec6:	6883      	ldr	r3, [r0, #8]
   baec8:	42a3      	cmp	r3, r4
   baeca:	d103      	bne.n	baed4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   baecc:	4641      	mov	r1, r8
   baece:	f7ff ff70 	bl	badb2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   baed2:	4604      	mov	r4, r0
   baed4:	6863      	ldr	r3, [r4, #4]
   baed6:	4641      	mov	r1, r8
   baed8:	701f      	strb	r7, [r3, #0]
   baeda:	4628      	mov	r0, r5
   baedc:	f885 9000 	strb.w	r9, [r5]
   baee0:	f7ff ff52 	bl	bad88 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   baee4:	e7e9      	b.n	baeba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   baee6:	2201      	movs	r2, #1
   baee8:	701a      	strb	r2, [r3, #0]
   baeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000baeee <_ZSt25__throw_bad_function_callv>:
   baeee:	b508      	push	{r3, lr}
   baef0:	f7fc fbb6 	bl	b7660 <abort>

000baef4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   baef4:	4901      	ldr	r1, [pc, #4]	; (baefc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   baef6:	f000 b8f9 	b.w	bb0ec <_ZNKSt9type_infoeqERKS_>
   baefa:	bf00      	nop
   baefc:	000be880 	.word	0x000be880

000baf00 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   baf00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   baf02:	2400      	movs	r4, #0
   baf04:	2310      	movs	r3, #16
   baf06:	e9cd 3402 	strd	r3, r4, [sp, #8]
   baf0a:	6803      	ldr	r3, [r0, #0]
   baf0c:	4615      	mov	r5, r2
   baf0e:	699e      	ldr	r6, [r3, #24]
   baf10:	6812      	ldr	r2, [r2, #0]
   baf12:	466b      	mov	r3, sp
   baf14:	e9cd 4400 	strd	r4, r4, [sp]
   baf18:	47b0      	blx	r6
   baf1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   baf1e:	f003 0306 	and.w	r3, r3, #6
   baf22:	2b06      	cmp	r3, #6
   baf24:	bf03      	ittte	eq
   baf26:	9b00      	ldreq	r3, [sp, #0]
   baf28:	602b      	streq	r3, [r5, #0]
   baf2a:	2001      	moveq	r0, #1
   baf2c:	4620      	movne	r0, r4
   baf2e:	b004      	add	sp, #16
   baf30:	bd70      	pop	{r4, r5, r6, pc}

000baf32 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   baf32:	9800      	ldr	r0, [sp, #0]
   baf34:	4290      	cmp	r0, r2
   baf36:	bf14      	ite	ne
   baf38:	2001      	movne	r0, #1
   baf3a:	2006      	moveq	r0, #6
   baf3c:	4770      	bx	lr
	...

000baf40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   baf40:	b510      	push	{r4, lr}
   baf42:	4b03      	ldr	r3, [pc, #12]	; (baf50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   baf44:	6003      	str	r3, [r0, #0]
   baf46:	4604      	mov	r4, r0
   baf48:	f000 f8cd 	bl	bb0e6 <_ZNSt9type_infoD1Ev>
   baf4c:	4620      	mov	r0, r4
   baf4e:	bd10      	pop	{r4, pc}
   baf50:	000be8c0 	.word	0x000be8c0

000baf54 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   baf54:	b510      	push	{r4, lr}
   baf56:	4604      	mov	r4, r0
   baf58:	f7ff fff2 	bl	baf40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   baf5c:	4620      	mov	r0, r4
   baf5e:	2108      	movs	r1, #8
   baf60:	f7f9 f89d 	bl	b409e <_ZdlPvj>
   baf64:	4620      	mov	r0, r4
   baf66:	bd10      	pop	{r4, pc}

000baf68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   baf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baf6c:	461f      	mov	r7, r3
   baf6e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   baf72:	f8dd 8018 	ldr.w	r8, [sp, #24]
   baf76:	4598      	cmp	r8, r3
   baf78:	4606      	mov	r6, r0
   baf7a:	4615      	mov	r5, r2
   baf7c:	d107      	bne.n	baf8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   baf7e:	9907      	ldr	r1, [sp, #28]
   baf80:	f000 f8b4 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   baf84:	b118      	cbz	r0, baf8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   baf86:	7165      	strb	r5, [r4, #5]
   baf88:	2000      	movs	r0, #0
   baf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baf8e:	4639      	mov	r1, r7
   baf90:	4630      	mov	r0, r6
   baf92:	f000 f8ab 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   baf96:	2800      	cmp	r0, #0
   baf98:	d0f6      	beq.n	baf88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   baf9a:	2301      	movs	r3, #1
   baf9c:	f8c4 8000 	str.w	r8, [r4]
   bafa0:	7125      	strb	r5, [r4, #4]
   bafa2:	71a3      	strb	r3, [r4, #6]
   bafa4:	e7f0      	b.n	baf88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bafa6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bafa6:	b538      	push	{r3, r4, r5, lr}
   bafa8:	4615      	mov	r5, r2
   bafaa:	461c      	mov	r4, r3
   bafac:	f000 f89e 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   bafb0:	b120      	cbz	r0, bafbc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bafb2:	2308      	movs	r3, #8
   bafb4:	60e3      	str	r3, [r4, #12]
   bafb6:	2306      	movs	r3, #6
   bafb8:	6025      	str	r5, [r4, #0]
   bafba:	7123      	strb	r3, [r4, #4]
   bafbc:	bd38      	pop	{r3, r4, r5, pc}

000bafbe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bafbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bafc0:	4605      	mov	r5, r0
   bafc2:	460c      	mov	r4, r1
   bafc4:	9201      	str	r2, [sp, #4]
   bafc6:	461e      	mov	r6, r3
   bafc8:	f000 f890 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   bafcc:	b950      	cbnz	r0, bafe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bafce:	2e03      	cmp	r6, #3
   bafd0:	d808      	bhi.n	bafe4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bafd2:	6823      	ldr	r3, [r4, #0]
   bafd4:	9a01      	ldr	r2, [sp, #4]
   bafd6:	695b      	ldr	r3, [r3, #20]
   bafd8:	4629      	mov	r1, r5
   bafda:	4620      	mov	r0, r4
   bafdc:	b002      	add	sp, #8
   bafde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bafe2:	4718      	bx	r3
   bafe4:	b002      	add	sp, #8
   bafe6:	bd70      	pop	{r4, r5, r6, pc}

000bafe8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bafe8:	b510      	push	{r4, lr}
   bafea:	4b03      	ldr	r3, [pc, #12]	; (baff8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bafec:	6003      	str	r3, [r0, #0]
   bafee:	4604      	mov	r4, r0
   baff0:	f7ff ffa6 	bl	baf40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   baff4:	4620      	mov	r0, r4
   baff6:	bd10      	pop	{r4, pc}
   baff8:	000be920 	.word	0x000be920

000baffc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   baffc:	b510      	push	{r4, lr}
   baffe:	4604      	mov	r4, r0
   bb000:	f7ff fff2 	bl	bafe8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb004:	4620      	mov	r0, r4
   bb006:	210c      	movs	r1, #12
   bb008:	f7f9 f849 	bl	b409e <_ZdlPvj>
   bb00c:	4620      	mov	r0, r4
   bb00e:	bd10      	pop	{r4, pc}

000bb010 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb012:	9f08      	ldr	r7, [sp, #32]
   bb014:	4297      	cmp	r7, r2
   bb016:	4605      	mov	r5, r0
   bb018:	460e      	mov	r6, r1
   bb01a:	4614      	mov	r4, r2
   bb01c:	d00a      	beq.n	bb034 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb01e:	68a8      	ldr	r0, [r5, #8]
   bb020:	6802      	ldr	r2, [r0, #0]
   bb022:	9708      	str	r7, [sp, #32]
   bb024:	6a15      	ldr	r5, [r2, #32]
   bb026:	4631      	mov	r1, r6
   bb028:	4622      	mov	r2, r4
   bb02a:	46ac      	mov	ip, r5
   bb02c:	b003      	add	sp, #12
   bb02e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb032:	4760      	bx	ip
   bb034:	4619      	mov	r1, r3
   bb036:	9301      	str	r3, [sp, #4]
   bb038:	f000 f858 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   bb03c:	9b01      	ldr	r3, [sp, #4]
   bb03e:	2800      	cmp	r0, #0
   bb040:	d0ed      	beq.n	bb01e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb042:	2006      	movs	r0, #6
   bb044:	b003      	add	sp, #12
   bb046:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb048 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb048:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb04c:	460d      	mov	r5, r1
   bb04e:	4619      	mov	r1, r3
   bb050:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb054:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb058:	4681      	mov	r9, r0
   bb05a:	4617      	mov	r7, r2
   bb05c:	4698      	mov	r8, r3
   bb05e:	f000 f845 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   bb062:	b190      	cbz	r0, bb08a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb064:	2d00      	cmp	r5, #0
   bb066:	6034      	str	r4, [r6, #0]
   bb068:	7137      	strb	r7, [r6, #4]
   bb06a:	db09      	blt.n	bb080 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb06c:	1961      	adds	r1, r4, r5
   bb06e:	458a      	cmp	sl, r1
   bb070:	bf0c      	ite	eq
   bb072:	2106      	moveq	r1, #6
   bb074:	2101      	movne	r1, #1
   bb076:	71b1      	strb	r1, [r6, #6]
   bb078:	2000      	movs	r0, #0
   bb07a:	b001      	add	sp, #4
   bb07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb080:	3502      	adds	r5, #2
   bb082:	d1f9      	bne.n	bb078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb084:	2301      	movs	r3, #1
   bb086:	71b3      	strb	r3, [r6, #6]
   bb088:	e7f6      	b.n	bb078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb08a:	4554      	cmp	r4, sl
   bb08c:	d106      	bne.n	bb09c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb08e:	4659      	mov	r1, fp
   bb090:	4648      	mov	r0, r9
   bb092:	f000 f82b 	bl	bb0ec <_ZNKSt9type_infoeqERKS_>
   bb096:	b108      	cbz	r0, bb09c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb098:	7177      	strb	r7, [r6, #5]
   bb09a:	e7ed      	b.n	bb078 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb09c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb0a0:	6803      	ldr	r3, [r0, #0]
   bb0a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb0a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb0aa:	69dc      	ldr	r4, [r3, #28]
   bb0ac:	463a      	mov	r2, r7
   bb0ae:	4643      	mov	r3, r8
   bb0b0:	4629      	mov	r1, r5
   bb0b2:	46a4      	mov	ip, r4
   bb0b4:	b001      	add	sp, #4
   bb0b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb0ba:	4760      	bx	ip

000bb0bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb0c0:	4607      	mov	r7, r0
   bb0c2:	460c      	mov	r4, r1
   bb0c4:	4615      	mov	r5, r2
   bb0c6:	461e      	mov	r6, r3
   bb0c8:	f7ff ff6d 	bl	bafa6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb0cc:	b948      	cbnz	r0, bb0e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb0ce:	68b8      	ldr	r0, [r7, #8]
   bb0d0:	6803      	ldr	r3, [r0, #0]
   bb0d2:	699f      	ldr	r7, [r3, #24]
   bb0d4:	462a      	mov	r2, r5
   bb0d6:	4633      	mov	r3, r6
   bb0d8:	4621      	mov	r1, r4
   bb0da:	46bc      	mov	ip, r7
   bb0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb0e0:	4760      	bx	ip
   bb0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb0e6 <_ZNSt9type_infoD1Ev>:
   bb0e6:	4770      	bx	lr

000bb0e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb0e8:	2000      	movs	r0, #0
   bb0ea:	4770      	bx	lr

000bb0ec <_ZNKSt9type_infoeqERKS_>:
   bb0ec:	4281      	cmp	r1, r0
   bb0ee:	b508      	push	{r3, lr}
   bb0f0:	d00e      	beq.n	bb110 <_ZNKSt9type_infoeqERKS_+0x24>
   bb0f2:	6840      	ldr	r0, [r0, #4]
   bb0f4:	7803      	ldrb	r3, [r0, #0]
   bb0f6:	2b2a      	cmp	r3, #42	; 0x2a
   bb0f8:	d00c      	beq.n	bb114 <_ZNKSt9type_infoeqERKS_+0x28>
   bb0fa:	6849      	ldr	r1, [r1, #4]
   bb0fc:	780b      	ldrb	r3, [r1, #0]
   bb0fe:	2b2a      	cmp	r3, #42	; 0x2a
   bb100:	bf08      	it	eq
   bb102:	3101      	addeq	r1, #1
   bb104:	f000 fdbd 	bl	bbc82 <strcmp>
   bb108:	fab0 f080 	clz	r0, r0
   bb10c:	0940      	lsrs	r0, r0, #5
   bb10e:	bd08      	pop	{r3, pc}
   bb110:	2001      	movs	r0, #1
   bb112:	e7fc      	b.n	bb10e <_ZNKSt9type_infoeqERKS_+0x22>
   bb114:	2000      	movs	r0, #0
   bb116:	e7fa      	b.n	bb10e <_ZNKSt9type_infoeqERKS_+0x22>

000bb118 <nan>:
   bb118:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb120 <nan+0x8>
   bb11c:	4770      	bx	lr
   bb11e:	bf00      	nop
   bb120:	00000000 	.word	0x00000000
   bb124:	7ff80000 	.word	0x7ff80000

000bb128 <__aeabi_drsub>:
   bb128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb12c:	e002      	b.n	bb134 <__adddf3>
   bb12e:	bf00      	nop

000bb130 <__aeabi_dsub>:
   bb130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb134 <__adddf3>:
   bb134:	b530      	push	{r4, r5, lr}
   bb136:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb13a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb13e:	ea94 0f05 	teq	r4, r5
   bb142:	bf08      	it	eq
   bb144:	ea90 0f02 	teqeq	r0, r2
   bb148:	bf1f      	itttt	ne
   bb14a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb14e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb15a:	f000 80e2 	beq.w	bb322 <__adddf3+0x1ee>
   bb15e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb166:	bfb8      	it	lt
   bb168:	426d      	neglt	r5, r5
   bb16a:	dd0c      	ble.n	bb186 <__adddf3+0x52>
   bb16c:	442c      	add	r4, r5
   bb16e:	ea80 0202 	eor.w	r2, r0, r2
   bb172:	ea81 0303 	eor.w	r3, r1, r3
   bb176:	ea82 0000 	eor.w	r0, r2, r0
   bb17a:	ea83 0101 	eor.w	r1, r3, r1
   bb17e:	ea80 0202 	eor.w	r2, r0, r2
   bb182:	ea81 0303 	eor.w	r3, r1, r3
   bb186:	2d36      	cmp	r5, #54	; 0x36
   bb188:	bf88      	it	hi
   bb18a:	bd30      	pophi	{r4, r5, pc}
   bb18c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb190:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb19c:	d002      	beq.n	bb1a4 <__adddf3+0x70>
   bb19e:	4240      	negs	r0, r0
   bb1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb1a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb1a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb1ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb1b0:	d002      	beq.n	bb1b8 <__adddf3+0x84>
   bb1b2:	4252      	negs	r2, r2
   bb1b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb1b8:	ea94 0f05 	teq	r4, r5
   bb1bc:	f000 80a7 	beq.w	bb30e <__adddf3+0x1da>
   bb1c0:	f1a4 0401 	sub.w	r4, r4, #1
   bb1c4:	f1d5 0e20 	rsbs	lr, r5, #32
   bb1c8:	db0d      	blt.n	bb1e6 <__adddf3+0xb2>
   bb1ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb1ce:	fa22 f205 	lsr.w	r2, r2, r5
   bb1d2:	1880      	adds	r0, r0, r2
   bb1d4:	f141 0100 	adc.w	r1, r1, #0
   bb1d8:	fa03 f20e 	lsl.w	r2, r3, lr
   bb1dc:	1880      	adds	r0, r0, r2
   bb1de:	fa43 f305 	asr.w	r3, r3, r5
   bb1e2:	4159      	adcs	r1, r3
   bb1e4:	e00e      	b.n	bb204 <__adddf3+0xd0>
   bb1e6:	f1a5 0520 	sub.w	r5, r5, #32
   bb1ea:	f10e 0e20 	add.w	lr, lr, #32
   bb1ee:	2a01      	cmp	r2, #1
   bb1f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb1f4:	bf28      	it	cs
   bb1f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb1fa:	fa43 f305 	asr.w	r3, r3, r5
   bb1fe:	18c0      	adds	r0, r0, r3
   bb200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb208:	d507      	bpl.n	bb21a <__adddf3+0xe6>
   bb20a:	f04f 0e00 	mov.w	lr, #0
   bb20e:	f1dc 0c00 	rsbs	ip, ip, #0
   bb212:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb216:	eb6e 0101 	sbc.w	r1, lr, r1
   bb21a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb21e:	d31b      	bcc.n	bb258 <__adddf3+0x124>
   bb220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb224:	d30c      	bcc.n	bb240 <__adddf3+0x10c>
   bb226:	0849      	lsrs	r1, r1, #1
   bb228:	ea5f 0030 	movs.w	r0, r0, rrx
   bb22c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb230:	f104 0401 	add.w	r4, r4, #1
   bb234:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb23c:	f080 809a 	bcs.w	bb374 <__adddf3+0x240>
   bb240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb244:	bf08      	it	eq
   bb246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb24a:	f150 0000 	adcs.w	r0, r0, #0
   bb24e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb252:	ea41 0105 	orr.w	r1, r1, r5
   bb256:	bd30      	pop	{r4, r5, pc}
   bb258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb25c:	4140      	adcs	r0, r0
   bb25e:	eb41 0101 	adc.w	r1, r1, r1
   bb262:	3c01      	subs	r4, #1
   bb264:	bf28      	it	cs
   bb266:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb26a:	d2e9      	bcs.n	bb240 <__adddf3+0x10c>
   bb26c:	f091 0f00 	teq	r1, #0
   bb270:	bf04      	itt	eq
   bb272:	4601      	moveq	r1, r0
   bb274:	2000      	moveq	r0, #0
   bb276:	fab1 f381 	clz	r3, r1
   bb27a:	bf08      	it	eq
   bb27c:	3320      	addeq	r3, #32
   bb27e:	f1a3 030b 	sub.w	r3, r3, #11
   bb282:	f1b3 0220 	subs.w	r2, r3, #32
   bb286:	da0c      	bge.n	bb2a2 <__adddf3+0x16e>
   bb288:	320c      	adds	r2, #12
   bb28a:	dd08      	ble.n	bb29e <__adddf3+0x16a>
   bb28c:	f102 0c14 	add.w	ip, r2, #20
   bb290:	f1c2 020c 	rsb	r2, r2, #12
   bb294:	fa01 f00c 	lsl.w	r0, r1, ip
   bb298:	fa21 f102 	lsr.w	r1, r1, r2
   bb29c:	e00c      	b.n	bb2b8 <__adddf3+0x184>
   bb29e:	f102 0214 	add.w	r2, r2, #20
   bb2a2:	bfd8      	it	le
   bb2a4:	f1c2 0c20 	rsble	ip, r2, #32
   bb2a8:	fa01 f102 	lsl.w	r1, r1, r2
   bb2ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb2b0:	bfdc      	itt	le
   bb2b2:	ea41 010c 	orrle.w	r1, r1, ip
   bb2b6:	4090      	lslle	r0, r2
   bb2b8:	1ae4      	subs	r4, r4, r3
   bb2ba:	bfa2      	ittt	ge
   bb2bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb2c0:	4329      	orrge	r1, r5
   bb2c2:	bd30      	popge	{r4, r5, pc}
   bb2c4:	ea6f 0404 	mvn.w	r4, r4
   bb2c8:	3c1f      	subs	r4, #31
   bb2ca:	da1c      	bge.n	bb306 <__adddf3+0x1d2>
   bb2cc:	340c      	adds	r4, #12
   bb2ce:	dc0e      	bgt.n	bb2ee <__adddf3+0x1ba>
   bb2d0:	f104 0414 	add.w	r4, r4, #20
   bb2d4:	f1c4 0220 	rsb	r2, r4, #32
   bb2d8:	fa20 f004 	lsr.w	r0, r0, r4
   bb2dc:	fa01 f302 	lsl.w	r3, r1, r2
   bb2e0:	ea40 0003 	orr.w	r0, r0, r3
   bb2e4:	fa21 f304 	lsr.w	r3, r1, r4
   bb2e8:	ea45 0103 	orr.w	r1, r5, r3
   bb2ec:	bd30      	pop	{r4, r5, pc}
   bb2ee:	f1c4 040c 	rsb	r4, r4, #12
   bb2f2:	f1c4 0220 	rsb	r2, r4, #32
   bb2f6:	fa20 f002 	lsr.w	r0, r0, r2
   bb2fa:	fa01 f304 	lsl.w	r3, r1, r4
   bb2fe:	ea40 0003 	orr.w	r0, r0, r3
   bb302:	4629      	mov	r1, r5
   bb304:	bd30      	pop	{r4, r5, pc}
   bb306:	fa21 f004 	lsr.w	r0, r1, r4
   bb30a:	4629      	mov	r1, r5
   bb30c:	bd30      	pop	{r4, r5, pc}
   bb30e:	f094 0f00 	teq	r4, #0
   bb312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb316:	bf06      	itte	eq
   bb318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb31c:	3401      	addeq	r4, #1
   bb31e:	3d01      	subne	r5, #1
   bb320:	e74e      	b.n	bb1c0 <__adddf3+0x8c>
   bb322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb326:	bf18      	it	ne
   bb328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb32c:	d029      	beq.n	bb382 <__adddf3+0x24e>
   bb32e:	ea94 0f05 	teq	r4, r5
   bb332:	bf08      	it	eq
   bb334:	ea90 0f02 	teqeq	r0, r2
   bb338:	d005      	beq.n	bb346 <__adddf3+0x212>
   bb33a:	ea54 0c00 	orrs.w	ip, r4, r0
   bb33e:	bf04      	itt	eq
   bb340:	4619      	moveq	r1, r3
   bb342:	4610      	moveq	r0, r2
   bb344:	bd30      	pop	{r4, r5, pc}
   bb346:	ea91 0f03 	teq	r1, r3
   bb34a:	bf1e      	ittt	ne
   bb34c:	2100      	movne	r1, #0
   bb34e:	2000      	movne	r0, #0
   bb350:	bd30      	popne	{r4, r5, pc}
   bb352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb356:	d105      	bne.n	bb364 <__adddf3+0x230>
   bb358:	0040      	lsls	r0, r0, #1
   bb35a:	4149      	adcs	r1, r1
   bb35c:	bf28      	it	cs
   bb35e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb362:	bd30      	pop	{r4, r5, pc}
   bb364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb368:	bf3c      	itt	cc
   bb36a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb36e:	bd30      	popcc	{r4, r5, pc}
   bb370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb37c:	f04f 0000 	mov.w	r0, #0
   bb380:	bd30      	pop	{r4, r5, pc}
   bb382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb386:	bf1a      	itte	ne
   bb388:	4619      	movne	r1, r3
   bb38a:	4610      	movne	r0, r2
   bb38c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb390:	bf1c      	itt	ne
   bb392:	460b      	movne	r3, r1
   bb394:	4602      	movne	r2, r0
   bb396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb39a:	bf06      	itte	eq
   bb39c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb3a0:	ea91 0f03 	teqeq	r1, r3
   bb3a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb3a8:	bd30      	pop	{r4, r5, pc}
   bb3aa:	bf00      	nop

000bb3ac <__aeabi_ui2d>:
   bb3ac:	f090 0f00 	teq	r0, #0
   bb3b0:	bf04      	itt	eq
   bb3b2:	2100      	moveq	r1, #0
   bb3b4:	4770      	bxeq	lr
   bb3b6:	b530      	push	{r4, r5, lr}
   bb3b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb3bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb3c0:	f04f 0500 	mov.w	r5, #0
   bb3c4:	f04f 0100 	mov.w	r1, #0
   bb3c8:	e750      	b.n	bb26c <__adddf3+0x138>
   bb3ca:	bf00      	nop

000bb3cc <__aeabi_i2d>:
   bb3cc:	f090 0f00 	teq	r0, #0
   bb3d0:	bf04      	itt	eq
   bb3d2:	2100      	moveq	r1, #0
   bb3d4:	4770      	bxeq	lr
   bb3d6:	b530      	push	{r4, r5, lr}
   bb3d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb3dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb3e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb3e4:	bf48      	it	mi
   bb3e6:	4240      	negmi	r0, r0
   bb3e8:	f04f 0100 	mov.w	r1, #0
   bb3ec:	e73e      	b.n	bb26c <__adddf3+0x138>
   bb3ee:	bf00      	nop

000bb3f0 <__aeabi_f2d>:
   bb3f0:	0042      	lsls	r2, r0, #1
   bb3f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb3f6:	ea4f 0131 	mov.w	r1, r1, rrx
   bb3fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb3fe:	bf1f      	itttt	ne
   bb400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb40c:	4770      	bxne	lr
   bb40e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb412:	bf08      	it	eq
   bb414:	4770      	bxeq	lr
   bb416:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb41a:	bf04      	itt	eq
   bb41c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb420:	4770      	bxeq	lr
   bb422:	b530      	push	{r4, r5, lr}
   bb424:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb42c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb430:	e71c      	b.n	bb26c <__adddf3+0x138>
   bb432:	bf00      	nop

000bb434 <__aeabi_ul2d>:
   bb434:	ea50 0201 	orrs.w	r2, r0, r1
   bb438:	bf08      	it	eq
   bb43a:	4770      	bxeq	lr
   bb43c:	b530      	push	{r4, r5, lr}
   bb43e:	f04f 0500 	mov.w	r5, #0
   bb442:	e00a      	b.n	bb45a <__aeabi_l2d+0x16>

000bb444 <__aeabi_l2d>:
   bb444:	ea50 0201 	orrs.w	r2, r0, r1
   bb448:	bf08      	it	eq
   bb44a:	4770      	bxeq	lr
   bb44c:	b530      	push	{r4, r5, lr}
   bb44e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb452:	d502      	bpl.n	bb45a <__aeabi_l2d+0x16>
   bb454:	4240      	negs	r0, r0
   bb456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb45a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb45e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb462:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb466:	f43f aed8 	beq.w	bb21a <__adddf3+0xe6>
   bb46a:	f04f 0203 	mov.w	r2, #3
   bb46e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb472:	bf18      	it	ne
   bb474:	3203      	addne	r2, #3
   bb476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb47a:	bf18      	it	ne
   bb47c:	3203      	addne	r2, #3
   bb47e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb482:	f1c2 0320 	rsb	r3, r2, #32
   bb486:	fa00 fc03 	lsl.w	ip, r0, r3
   bb48a:	fa20 f002 	lsr.w	r0, r0, r2
   bb48e:	fa01 fe03 	lsl.w	lr, r1, r3
   bb492:	ea40 000e 	orr.w	r0, r0, lr
   bb496:	fa21 f102 	lsr.w	r1, r1, r2
   bb49a:	4414      	add	r4, r2
   bb49c:	e6bd      	b.n	bb21a <__adddf3+0xe6>
   bb49e:	bf00      	nop

000bb4a0 <__aeabi_dmul>:
   bb4a0:	b570      	push	{r4, r5, r6, lr}
   bb4a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb4a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb4aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb4ae:	bf1d      	ittte	ne
   bb4b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb4b4:	ea94 0f0c 	teqne	r4, ip
   bb4b8:	ea95 0f0c 	teqne	r5, ip
   bb4bc:	f000 f8de 	bleq	bb67c <__aeabi_dmul+0x1dc>
   bb4c0:	442c      	add	r4, r5
   bb4c2:	ea81 0603 	eor.w	r6, r1, r3
   bb4c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb4ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb4ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb4d2:	bf18      	it	ne
   bb4d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb4d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb4e0:	d038      	beq.n	bb554 <__aeabi_dmul+0xb4>
   bb4e2:	fba0 ce02 	umull	ip, lr, r0, r2
   bb4e6:	f04f 0500 	mov.w	r5, #0
   bb4ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb4ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb4f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb4f6:	f04f 0600 	mov.w	r6, #0
   bb4fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb4fe:	f09c 0f00 	teq	ip, #0
   bb502:	bf18      	it	ne
   bb504:	f04e 0e01 	orrne.w	lr, lr, #1
   bb508:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb50c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb510:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb514:	d204      	bcs.n	bb520 <__aeabi_dmul+0x80>
   bb516:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb51a:	416d      	adcs	r5, r5
   bb51c:	eb46 0606 	adc.w	r6, r6, r6
   bb520:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb524:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb528:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb52c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb530:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb534:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb538:	bf88      	it	hi
   bb53a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb53e:	d81e      	bhi.n	bb57e <__aeabi_dmul+0xde>
   bb540:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb544:	bf08      	it	eq
   bb546:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb54a:	f150 0000 	adcs.w	r0, r0, #0
   bb54e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb552:	bd70      	pop	{r4, r5, r6, pc}
   bb554:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb558:	ea46 0101 	orr.w	r1, r6, r1
   bb55c:	ea40 0002 	orr.w	r0, r0, r2
   bb560:	ea81 0103 	eor.w	r1, r1, r3
   bb564:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb568:	bfc2      	ittt	gt
   bb56a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb56e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb572:	bd70      	popgt	{r4, r5, r6, pc}
   bb574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb578:	f04f 0e00 	mov.w	lr, #0
   bb57c:	3c01      	subs	r4, #1
   bb57e:	f300 80ab 	bgt.w	bb6d8 <__aeabi_dmul+0x238>
   bb582:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb586:	bfde      	ittt	le
   bb588:	2000      	movle	r0, #0
   bb58a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb58e:	bd70      	pople	{r4, r5, r6, pc}
   bb590:	f1c4 0400 	rsb	r4, r4, #0
   bb594:	3c20      	subs	r4, #32
   bb596:	da35      	bge.n	bb604 <__aeabi_dmul+0x164>
   bb598:	340c      	adds	r4, #12
   bb59a:	dc1b      	bgt.n	bb5d4 <__aeabi_dmul+0x134>
   bb59c:	f104 0414 	add.w	r4, r4, #20
   bb5a0:	f1c4 0520 	rsb	r5, r4, #32
   bb5a4:	fa00 f305 	lsl.w	r3, r0, r5
   bb5a8:	fa20 f004 	lsr.w	r0, r0, r4
   bb5ac:	fa01 f205 	lsl.w	r2, r1, r5
   bb5b0:	ea40 0002 	orr.w	r0, r0, r2
   bb5b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb5b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb5bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb5c0:	fa21 f604 	lsr.w	r6, r1, r4
   bb5c4:	eb42 0106 	adc.w	r1, r2, r6
   bb5c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb5cc:	bf08      	it	eq
   bb5ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb5d2:	bd70      	pop	{r4, r5, r6, pc}
   bb5d4:	f1c4 040c 	rsb	r4, r4, #12
   bb5d8:	f1c4 0520 	rsb	r5, r4, #32
   bb5dc:	fa00 f304 	lsl.w	r3, r0, r4
   bb5e0:	fa20 f005 	lsr.w	r0, r0, r5
   bb5e4:	fa01 f204 	lsl.w	r2, r1, r4
   bb5e8:	ea40 0002 	orr.w	r0, r0, r2
   bb5ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb5f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb5f4:	f141 0100 	adc.w	r1, r1, #0
   bb5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb5fc:	bf08      	it	eq
   bb5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb602:	bd70      	pop	{r4, r5, r6, pc}
   bb604:	f1c4 0520 	rsb	r5, r4, #32
   bb608:	fa00 f205 	lsl.w	r2, r0, r5
   bb60c:	ea4e 0e02 	orr.w	lr, lr, r2
   bb610:	fa20 f304 	lsr.w	r3, r0, r4
   bb614:	fa01 f205 	lsl.w	r2, r1, r5
   bb618:	ea43 0302 	orr.w	r3, r3, r2
   bb61c:	fa21 f004 	lsr.w	r0, r1, r4
   bb620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb624:	fa21 f204 	lsr.w	r2, r1, r4
   bb628:	ea20 0002 	bic.w	r0, r0, r2
   bb62c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb634:	bf08      	it	eq
   bb636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb63a:	bd70      	pop	{r4, r5, r6, pc}
   bb63c:	f094 0f00 	teq	r4, #0
   bb640:	d10f      	bne.n	bb662 <__aeabi_dmul+0x1c2>
   bb642:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb646:	0040      	lsls	r0, r0, #1
   bb648:	eb41 0101 	adc.w	r1, r1, r1
   bb64c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb650:	bf08      	it	eq
   bb652:	3c01      	subeq	r4, #1
   bb654:	d0f7      	beq.n	bb646 <__aeabi_dmul+0x1a6>
   bb656:	ea41 0106 	orr.w	r1, r1, r6
   bb65a:	f095 0f00 	teq	r5, #0
   bb65e:	bf18      	it	ne
   bb660:	4770      	bxne	lr
   bb662:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb666:	0052      	lsls	r2, r2, #1
   bb668:	eb43 0303 	adc.w	r3, r3, r3
   bb66c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb670:	bf08      	it	eq
   bb672:	3d01      	subeq	r5, #1
   bb674:	d0f7      	beq.n	bb666 <__aeabi_dmul+0x1c6>
   bb676:	ea43 0306 	orr.w	r3, r3, r6
   bb67a:	4770      	bx	lr
   bb67c:	ea94 0f0c 	teq	r4, ip
   bb680:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb684:	bf18      	it	ne
   bb686:	ea95 0f0c 	teqne	r5, ip
   bb68a:	d00c      	beq.n	bb6a6 <__aeabi_dmul+0x206>
   bb68c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb690:	bf18      	it	ne
   bb692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb696:	d1d1      	bne.n	bb63c <__aeabi_dmul+0x19c>
   bb698:	ea81 0103 	eor.w	r1, r1, r3
   bb69c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb6a0:	f04f 0000 	mov.w	r0, #0
   bb6a4:	bd70      	pop	{r4, r5, r6, pc}
   bb6a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb6aa:	bf06      	itte	eq
   bb6ac:	4610      	moveq	r0, r2
   bb6ae:	4619      	moveq	r1, r3
   bb6b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb6b4:	d019      	beq.n	bb6ea <__aeabi_dmul+0x24a>
   bb6b6:	ea94 0f0c 	teq	r4, ip
   bb6ba:	d102      	bne.n	bb6c2 <__aeabi_dmul+0x222>
   bb6bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb6c0:	d113      	bne.n	bb6ea <__aeabi_dmul+0x24a>
   bb6c2:	ea95 0f0c 	teq	r5, ip
   bb6c6:	d105      	bne.n	bb6d4 <__aeabi_dmul+0x234>
   bb6c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb6cc:	bf1c      	itt	ne
   bb6ce:	4610      	movne	r0, r2
   bb6d0:	4619      	movne	r1, r3
   bb6d2:	d10a      	bne.n	bb6ea <__aeabi_dmul+0x24a>
   bb6d4:	ea81 0103 	eor.w	r1, r1, r3
   bb6d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb6dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb6e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb6e4:	f04f 0000 	mov.w	r0, #0
   bb6e8:	bd70      	pop	{r4, r5, r6, pc}
   bb6ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb6ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb6f2:	bd70      	pop	{r4, r5, r6, pc}

000bb6f4 <__aeabi_ddiv>:
   bb6f4:	b570      	push	{r4, r5, r6, lr}
   bb6f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb6fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb6fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb702:	bf1d      	ittte	ne
   bb704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb708:	ea94 0f0c 	teqne	r4, ip
   bb70c:	ea95 0f0c 	teqne	r5, ip
   bb710:	f000 f8a7 	bleq	bb862 <__aeabi_ddiv+0x16e>
   bb714:	eba4 0405 	sub.w	r4, r4, r5
   bb718:	ea81 0e03 	eor.w	lr, r1, r3
   bb71c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb720:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb724:	f000 8088 	beq.w	bb838 <__aeabi_ddiv+0x144>
   bb728:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb72c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb730:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb734:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb738:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb73c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb740:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb744:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb748:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb74c:	429d      	cmp	r5, r3
   bb74e:	bf08      	it	eq
   bb750:	4296      	cmpeq	r6, r2
   bb752:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb756:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb75a:	d202      	bcs.n	bb762 <__aeabi_ddiv+0x6e>
   bb75c:	085b      	lsrs	r3, r3, #1
   bb75e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb762:	1ab6      	subs	r6, r6, r2
   bb764:	eb65 0503 	sbc.w	r5, r5, r3
   bb768:	085b      	lsrs	r3, r3, #1
   bb76a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb76e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb772:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb776:	ebb6 0e02 	subs.w	lr, r6, r2
   bb77a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb77e:	bf22      	ittt	cs
   bb780:	1ab6      	subcs	r6, r6, r2
   bb782:	4675      	movcs	r5, lr
   bb784:	ea40 000c 	orrcs.w	r0, r0, ip
   bb788:	085b      	lsrs	r3, r3, #1
   bb78a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb78e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb792:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb796:	bf22      	ittt	cs
   bb798:	1ab6      	subcs	r6, r6, r2
   bb79a:	4675      	movcs	r5, lr
   bb79c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb7a0:	085b      	lsrs	r3, r3, #1
   bb7a2:	ea4f 0232 	mov.w	r2, r2, rrx
   bb7a6:	ebb6 0e02 	subs.w	lr, r6, r2
   bb7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb7ae:	bf22      	ittt	cs
   bb7b0:	1ab6      	subcs	r6, r6, r2
   bb7b2:	4675      	movcs	r5, lr
   bb7b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb7b8:	085b      	lsrs	r3, r3, #1
   bb7ba:	ea4f 0232 	mov.w	r2, r2, rrx
   bb7be:	ebb6 0e02 	subs.w	lr, r6, r2
   bb7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb7c6:	bf22      	ittt	cs
   bb7c8:	1ab6      	subcs	r6, r6, r2
   bb7ca:	4675      	movcs	r5, lr
   bb7cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb7d0:	ea55 0e06 	orrs.w	lr, r5, r6
   bb7d4:	d018      	beq.n	bb808 <__aeabi_ddiv+0x114>
   bb7d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb7da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb7de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb7e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb7e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb7ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb7ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb7f2:	d1c0      	bne.n	bb776 <__aeabi_ddiv+0x82>
   bb7f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb7f8:	d10b      	bne.n	bb812 <__aeabi_ddiv+0x11e>
   bb7fa:	ea41 0100 	orr.w	r1, r1, r0
   bb7fe:	f04f 0000 	mov.w	r0, #0
   bb802:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb806:	e7b6      	b.n	bb776 <__aeabi_ddiv+0x82>
   bb808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb80c:	bf04      	itt	eq
   bb80e:	4301      	orreq	r1, r0
   bb810:	2000      	moveq	r0, #0
   bb812:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb816:	bf88      	it	hi
   bb818:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb81c:	f63f aeaf 	bhi.w	bb57e <__aeabi_dmul+0xde>
   bb820:	ebb5 0c03 	subs.w	ip, r5, r3
   bb824:	bf04      	itt	eq
   bb826:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb82a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb82e:	f150 0000 	adcs.w	r0, r0, #0
   bb832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb836:	bd70      	pop	{r4, r5, r6, pc}
   bb838:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb83c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb840:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb844:	bfc2      	ittt	gt
   bb846:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb84a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb84e:	bd70      	popgt	{r4, r5, r6, pc}
   bb850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb854:	f04f 0e00 	mov.w	lr, #0
   bb858:	3c01      	subs	r4, #1
   bb85a:	e690      	b.n	bb57e <__aeabi_dmul+0xde>
   bb85c:	ea45 0e06 	orr.w	lr, r5, r6
   bb860:	e68d      	b.n	bb57e <__aeabi_dmul+0xde>
   bb862:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb866:	ea94 0f0c 	teq	r4, ip
   bb86a:	bf08      	it	eq
   bb86c:	ea95 0f0c 	teqeq	r5, ip
   bb870:	f43f af3b 	beq.w	bb6ea <__aeabi_dmul+0x24a>
   bb874:	ea94 0f0c 	teq	r4, ip
   bb878:	d10a      	bne.n	bb890 <__aeabi_ddiv+0x19c>
   bb87a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb87e:	f47f af34 	bne.w	bb6ea <__aeabi_dmul+0x24a>
   bb882:	ea95 0f0c 	teq	r5, ip
   bb886:	f47f af25 	bne.w	bb6d4 <__aeabi_dmul+0x234>
   bb88a:	4610      	mov	r0, r2
   bb88c:	4619      	mov	r1, r3
   bb88e:	e72c      	b.n	bb6ea <__aeabi_dmul+0x24a>
   bb890:	ea95 0f0c 	teq	r5, ip
   bb894:	d106      	bne.n	bb8a4 <__aeabi_ddiv+0x1b0>
   bb896:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb89a:	f43f aefd 	beq.w	bb698 <__aeabi_dmul+0x1f8>
   bb89e:	4610      	mov	r0, r2
   bb8a0:	4619      	mov	r1, r3
   bb8a2:	e722      	b.n	bb6ea <__aeabi_dmul+0x24a>
   bb8a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb8a8:	bf18      	it	ne
   bb8aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb8ae:	f47f aec5 	bne.w	bb63c <__aeabi_dmul+0x19c>
   bb8b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb8b6:	f47f af0d 	bne.w	bb6d4 <__aeabi_dmul+0x234>
   bb8ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb8be:	f47f aeeb 	bne.w	bb698 <__aeabi_dmul+0x1f8>
   bb8c2:	e712      	b.n	bb6ea <__aeabi_dmul+0x24a>

000bb8c4 <__gedf2>:
   bb8c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb8c8:	e006      	b.n	bb8d8 <__cmpdf2+0x4>
   bb8ca:	bf00      	nop

000bb8cc <__ledf2>:
   bb8cc:	f04f 0c01 	mov.w	ip, #1
   bb8d0:	e002      	b.n	bb8d8 <__cmpdf2+0x4>
   bb8d2:	bf00      	nop

000bb8d4 <__cmpdf2>:
   bb8d4:	f04f 0c01 	mov.w	ip, #1
   bb8d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb8dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb8e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb8e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb8e8:	bf18      	it	ne
   bb8ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb8ee:	d01b      	beq.n	bb928 <__cmpdf2+0x54>
   bb8f0:	b001      	add	sp, #4
   bb8f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb8f6:	bf0c      	ite	eq
   bb8f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb8fc:	ea91 0f03 	teqne	r1, r3
   bb900:	bf02      	ittt	eq
   bb902:	ea90 0f02 	teqeq	r0, r2
   bb906:	2000      	moveq	r0, #0
   bb908:	4770      	bxeq	lr
   bb90a:	f110 0f00 	cmn.w	r0, #0
   bb90e:	ea91 0f03 	teq	r1, r3
   bb912:	bf58      	it	pl
   bb914:	4299      	cmppl	r1, r3
   bb916:	bf08      	it	eq
   bb918:	4290      	cmpeq	r0, r2
   bb91a:	bf2c      	ite	cs
   bb91c:	17d8      	asrcs	r0, r3, #31
   bb91e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb922:	f040 0001 	orr.w	r0, r0, #1
   bb926:	4770      	bx	lr
   bb928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb92c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb930:	d102      	bne.n	bb938 <__cmpdf2+0x64>
   bb932:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb936:	d107      	bne.n	bb948 <__cmpdf2+0x74>
   bb938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb93c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb940:	d1d6      	bne.n	bb8f0 <__cmpdf2+0x1c>
   bb942:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb946:	d0d3      	beq.n	bb8f0 <__cmpdf2+0x1c>
   bb948:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb94c:	4770      	bx	lr
   bb94e:	bf00      	nop

000bb950 <__aeabi_cdrcmple>:
   bb950:	4684      	mov	ip, r0
   bb952:	4610      	mov	r0, r2
   bb954:	4662      	mov	r2, ip
   bb956:	468c      	mov	ip, r1
   bb958:	4619      	mov	r1, r3
   bb95a:	4663      	mov	r3, ip
   bb95c:	e000      	b.n	bb960 <__aeabi_cdcmpeq>
   bb95e:	bf00      	nop

000bb960 <__aeabi_cdcmpeq>:
   bb960:	b501      	push	{r0, lr}
   bb962:	f7ff ffb7 	bl	bb8d4 <__cmpdf2>
   bb966:	2800      	cmp	r0, #0
   bb968:	bf48      	it	mi
   bb96a:	f110 0f00 	cmnmi.w	r0, #0
   bb96e:	bd01      	pop	{r0, pc}

000bb970 <__aeabi_dcmpeq>:
   bb970:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb974:	f7ff fff4 	bl	bb960 <__aeabi_cdcmpeq>
   bb978:	bf0c      	ite	eq
   bb97a:	2001      	moveq	r0, #1
   bb97c:	2000      	movne	r0, #0
   bb97e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb982:	bf00      	nop

000bb984 <__aeabi_dcmplt>:
   bb984:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb988:	f7ff ffea 	bl	bb960 <__aeabi_cdcmpeq>
   bb98c:	bf34      	ite	cc
   bb98e:	2001      	movcc	r0, #1
   bb990:	2000      	movcs	r0, #0
   bb992:	f85d fb08 	ldr.w	pc, [sp], #8
   bb996:	bf00      	nop

000bb998 <__aeabi_dcmple>:
   bb998:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb99c:	f7ff ffe0 	bl	bb960 <__aeabi_cdcmpeq>
   bb9a0:	bf94      	ite	ls
   bb9a2:	2001      	movls	r0, #1
   bb9a4:	2000      	movhi	r0, #0
   bb9a6:	f85d fb08 	ldr.w	pc, [sp], #8
   bb9aa:	bf00      	nop

000bb9ac <__aeabi_dcmpge>:
   bb9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb9b0:	f7ff ffce 	bl	bb950 <__aeabi_cdrcmple>
   bb9b4:	bf94      	ite	ls
   bb9b6:	2001      	movls	r0, #1
   bb9b8:	2000      	movhi	r0, #0
   bb9ba:	f85d fb08 	ldr.w	pc, [sp], #8
   bb9be:	bf00      	nop

000bb9c0 <__aeabi_dcmpgt>:
   bb9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb9c4:	f7ff ffc4 	bl	bb950 <__aeabi_cdrcmple>
   bb9c8:	bf34      	ite	cc
   bb9ca:	2001      	movcc	r0, #1
   bb9cc:	2000      	movcs	r0, #0
   bb9ce:	f85d fb08 	ldr.w	pc, [sp], #8
   bb9d2:	bf00      	nop

000bb9d4 <__aeabi_dcmpun>:
   bb9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb9dc:	d102      	bne.n	bb9e4 <__aeabi_dcmpun+0x10>
   bb9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb9e2:	d10a      	bne.n	bb9fa <__aeabi_dcmpun+0x26>
   bb9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb9ec:	d102      	bne.n	bb9f4 <__aeabi_dcmpun+0x20>
   bb9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb9f2:	d102      	bne.n	bb9fa <__aeabi_dcmpun+0x26>
   bb9f4:	f04f 0000 	mov.w	r0, #0
   bb9f8:	4770      	bx	lr
   bb9fa:	f04f 0001 	mov.w	r0, #1
   bb9fe:	4770      	bx	lr

000bba00 <__aeabi_d2iz>:
   bba00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bba04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bba08:	d215      	bcs.n	bba36 <__aeabi_d2iz+0x36>
   bba0a:	d511      	bpl.n	bba30 <__aeabi_d2iz+0x30>
   bba0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bba10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bba14:	d912      	bls.n	bba3c <__aeabi_d2iz+0x3c>
   bba16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bba1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bba1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bba22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bba26:	fa23 f002 	lsr.w	r0, r3, r2
   bba2a:	bf18      	it	ne
   bba2c:	4240      	negne	r0, r0
   bba2e:	4770      	bx	lr
   bba30:	f04f 0000 	mov.w	r0, #0
   bba34:	4770      	bx	lr
   bba36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bba3a:	d105      	bne.n	bba48 <__aeabi_d2iz+0x48>
   bba3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bba40:	bf08      	it	eq
   bba42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bba46:	4770      	bx	lr
   bba48:	f04f 0000 	mov.w	r0, #0
   bba4c:	4770      	bx	lr
   bba4e:	bf00      	nop

000bba50 <__aeabi_d2uiz>:
   bba50:	004a      	lsls	r2, r1, #1
   bba52:	d211      	bcs.n	bba78 <__aeabi_d2uiz+0x28>
   bba54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bba58:	d211      	bcs.n	bba7e <__aeabi_d2uiz+0x2e>
   bba5a:	d50d      	bpl.n	bba78 <__aeabi_d2uiz+0x28>
   bba5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bba60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bba64:	d40e      	bmi.n	bba84 <__aeabi_d2uiz+0x34>
   bba66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bba6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bba6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bba72:	fa23 f002 	lsr.w	r0, r3, r2
   bba76:	4770      	bx	lr
   bba78:	f04f 0000 	mov.w	r0, #0
   bba7c:	4770      	bx	lr
   bba7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bba82:	d102      	bne.n	bba8a <__aeabi_d2uiz+0x3a>
   bba84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bba88:	4770      	bx	lr
   bba8a:	f04f 0000 	mov.w	r0, #0
   bba8e:	4770      	bx	lr

000bba90 <__aeabi_d2f>:
   bba90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bba94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bba98:	bf24      	itt	cs
   bba9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bba9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bbaa2:	d90d      	bls.n	bbac0 <__aeabi_d2f+0x30>
   bbaa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bbaa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bbaac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bbab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bbab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bbab8:	bf08      	it	eq
   bbaba:	f020 0001 	biceq.w	r0, r0, #1
   bbabe:	4770      	bx	lr
   bbac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bbac4:	d121      	bne.n	bbb0a <__aeabi_d2f+0x7a>
   bbac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bbaca:	bfbc      	itt	lt
   bbacc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bbad0:	4770      	bxlt	lr
   bbad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bbada:	f1c2 0218 	rsb	r2, r2, #24
   bbade:	f1c2 0c20 	rsb	ip, r2, #32
   bbae2:	fa10 f30c 	lsls.w	r3, r0, ip
   bbae6:	fa20 f002 	lsr.w	r0, r0, r2
   bbaea:	bf18      	it	ne
   bbaec:	f040 0001 	orrne.w	r0, r0, #1
   bbaf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbaf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bbaf8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bbafc:	ea40 000c 	orr.w	r0, r0, ip
   bbb00:	fa23 f302 	lsr.w	r3, r3, r2
   bbb04:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bbb08:	e7cc      	b.n	bbaa4 <__aeabi_d2f+0x14>
   bbb0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bbb0e:	d107      	bne.n	bbb20 <__aeabi_d2f+0x90>
   bbb10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bbb14:	bf1e      	ittt	ne
   bbb16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bbb1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bbb1e:	4770      	bxne	lr
   bbb20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bbb24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bbb28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bbb2c:	4770      	bx	lr
   bbb2e:	bf00      	nop

000bbb30 <__aeabi_d2ulz>:
   bbb30:	b5d0      	push	{r4, r6, r7, lr}
   bbb32:	4b0c      	ldr	r3, [pc, #48]	; (bbb64 <__aeabi_d2ulz+0x34>)
   bbb34:	2200      	movs	r2, #0
   bbb36:	4606      	mov	r6, r0
   bbb38:	460f      	mov	r7, r1
   bbb3a:	f7ff fcb1 	bl	bb4a0 <__aeabi_dmul>
   bbb3e:	f7ff ff87 	bl	bba50 <__aeabi_d2uiz>
   bbb42:	4604      	mov	r4, r0
   bbb44:	f7ff fc32 	bl	bb3ac <__aeabi_ui2d>
   bbb48:	4b07      	ldr	r3, [pc, #28]	; (bbb68 <__aeabi_d2ulz+0x38>)
   bbb4a:	2200      	movs	r2, #0
   bbb4c:	f7ff fca8 	bl	bb4a0 <__aeabi_dmul>
   bbb50:	4602      	mov	r2, r0
   bbb52:	460b      	mov	r3, r1
   bbb54:	4630      	mov	r0, r6
   bbb56:	4639      	mov	r1, r7
   bbb58:	f7ff faea 	bl	bb130 <__aeabi_dsub>
   bbb5c:	f7ff ff78 	bl	bba50 <__aeabi_d2uiz>
   bbb60:	4621      	mov	r1, r4
   bbb62:	bdd0      	pop	{r4, r6, r7, pc}
   bbb64:	3df00000 	.word	0x3df00000
   bbb68:	41f00000 	.word	0x41f00000

000bbb6c <atexit>:
   bbb6c:	2300      	movs	r3, #0
   bbb6e:	4601      	mov	r1, r0
   bbb70:	461a      	mov	r2, r3
   bbb72:	4618      	mov	r0, r3
   bbb74:	f001 b826 	b.w	bcbc4 <__register_exitproc>

000bbb78 <atof>:
   bbb78:	2100      	movs	r1, #0
   bbb7a:	f000 bf2f 	b.w	bc9dc <strtod>

000bbb7e <atol>:
   bbb7e:	220a      	movs	r2, #10
   bbb80:	2100      	movs	r1, #0
   bbb82:	f001 b815 	b.w	bcbb0 <strtol>
	...

000bbb88 <isprint>:
   bbb88:	4b02      	ldr	r3, [pc, #8]	; (bbb94 <isprint+0xc>)
   bbb8a:	4418      	add	r0, r3
   bbb8c:	7840      	ldrb	r0, [r0, #1]
   bbb8e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbb92:	4770      	bx	lr
   bbb94:	000bea7b 	.word	0x000bea7b

000bbb98 <memcpy>:
   bbb98:	440a      	add	r2, r1
   bbb9a:	4291      	cmp	r1, r2
   bbb9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbba0:	d100      	bne.n	bbba4 <memcpy+0xc>
   bbba2:	4770      	bx	lr
   bbba4:	b510      	push	{r4, lr}
   bbba6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbbaa:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbbae:	4291      	cmp	r1, r2
   bbbb0:	d1f9      	bne.n	bbba6 <memcpy+0xe>
   bbbb2:	bd10      	pop	{r4, pc}

000bbbb4 <memmove>:
   bbbb4:	4288      	cmp	r0, r1
   bbbb6:	b510      	push	{r4, lr}
   bbbb8:	eb01 0402 	add.w	r4, r1, r2
   bbbbc:	d902      	bls.n	bbbc4 <memmove+0x10>
   bbbbe:	4284      	cmp	r4, r0
   bbbc0:	4623      	mov	r3, r4
   bbbc2:	d807      	bhi.n	bbbd4 <memmove+0x20>
   bbbc4:	1e43      	subs	r3, r0, #1
   bbbc6:	42a1      	cmp	r1, r4
   bbbc8:	d008      	beq.n	bbbdc <memmove+0x28>
   bbbca:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbbce:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbbd2:	e7f8      	b.n	bbbc6 <memmove+0x12>
   bbbd4:	4402      	add	r2, r0
   bbbd6:	4601      	mov	r1, r0
   bbbd8:	428a      	cmp	r2, r1
   bbbda:	d100      	bne.n	bbbde <memmove+0x2a>
   bbbdc:	bd10      	pop	{r4, pc}
   bbbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbbe6:	e7f7      	b.n	bbbd8 <memmove+0x24>

000bbbe8 <memset>:
   bbbe8:	4402      	add	r2, r0
   bbbea:	4603      	mov	r3, r0
   bbbec:	4293      	cmp	r3, r2
   bbbee:	d100      	bne.n	bbbf2 <memset+0xa>
   bbbf0:	4770      	bx	lr
   bbbf2:	f803 1b01 	strb.w	r1, [r3], #1
   bbbf6:	e7f9      	b.n	bbbec <memset+0x4>

000bbbf8 <srand>:
   bbbf8:	b538      	push	{r3, r4, r5, lr}
   bbbfa:	4b10      	ldr	r3, [pc, #64]	; (bbc3c <srand+0x44>)
   bbbfc:	681d      	ldr	r5, [r3, #0]
   bbbfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbc00:	4604      	mov	r4, r0
   bbc02:	b9b3      	cbnz	r3, bbc32 <srand+0x3a>
   bbc04:	2018      	movs	r0, #24
   bbc06:	f7fb fcfb 	bl	b7600 <malloc>
   bbc0a:	4602      	mov	r2, r0
   bbc0c:	63a8      	str	r0, [r5, #56]	; 0x38
   bbc0e:	b920      	cbnz	r0, bbc1a <srand+0x22>
   bbc10:	4b0b      	ldr	r3, [pc, #44]	; (bbc40 <srand+0x48>)
   bbc12:	480c      	ldr	r0, [pc, #48]	; (bbc44 <srand+0x4c>)
   bbc14:	2142      	movs	r1, #66	; 0x42
   bbc16:	f7fb fd3b 	bl	b7690 <__assert_func>
   bbc1a:	490b      	ldr	r1, [pc, #44]	; (bbc48 <srand+0x50>)
   bbc1c:	4b0b      	ldr	r3, [pc, #44]	; (bbc4c <srand+0x54>)
   bbc1e:	e9c0 1300 	strd	r1, r3, [r0]
   bbc22:	4b0b      	ldr	r3, [pc, #44]	; (bbc50 <srand+0x58>)
   bbc24:	6083      	str	r3, [r0, #8]
   bbc26:	230b      	movs	r3, #11
   bbc28:	8183      	strh	r3, [r0, #12]
   bbc2a:	2100      	movs	r1, #0
   bbc2c:	2001      	movs	r0, #1
   bbc2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbc32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbc34:	2200      	movs	r2, #0
   bbc36:	611c      	str	r4, [r3, #16]
   bbc38:	615a      	str	r2, [r3, #20]
   bbc3a:	bd38      	pop	{r3, r4, r5, pc}
   bbc3c:	2003e13c 	.word	0x2003e13c
   bbc40:	000be959 	.word	0x000be959
   bbc44:	000be970 	.word	0x000be970
   bbc48:	abcd330e 	.word	0xabcd330e
   bbc4c:	e66d1234 	.word	0xe66d1234
   bbc50:	0005deec 	.word	0x0005deec

000bbc54 <strchr>:
   bbc54:	b2c9      	uxtb	r1, r1
   bbc56:	4603      	mov	r3, r0
   bbc58:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbc5c:	b11a      	cbz	r2, bbc66 <strchr+0x12>
   bbc5e:	428a      	cmp	r2, r1
   bbc60:	d1f9      	bne.n	bbc56 <strchr+0x2>
   bbc62:	4618      	mov	r0, r3
   bbc64:	4770      	bx	lr
   bbc66:	2900      	cmp	r1, #0
   bbc68:	bf18      	it	ne
   bbc6a:	2300      	movne	r3, #0
   bbc6c:	e7f9      	b.n	bbc62 <strchr+0xe>

000bbc6e <strchrnul>:
   bbc6e:	b510      	push	{r4, lr}
   bbc70:	4604      	mov	r4, r0
   bbc72:	f7ff ffef 	bl	bbc54 <strchr>
   bbc76:	b918      	cbnz	r0, bbc80 <strchrnul+0x12>
   bbc78:	4620      	mov	r0, r4
   bbc7a:	f000 f832 	bl	bbce2 <strlen>
   bbc7e:	4420      	add	r0, r4
   bbc80:	bd10      	pop	{r4, pc}

000bbc82 <strcmp>:
   bbc82:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbc86:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbc8a:	2a01      	cmp	r2, #1
   bbc8c:	bf28      	it	cs
   bbc8e:	429a      	cmpcs	r2, r3
   bbc90:	d0f7      	beq.n	bbc82 <strcmp>
   bbc92:	1ad0      	subs	r0, r2, r3
   bbc94:	4770      	bx	lr

000bbc96 <strcpy>:
   bbc96:	4603      	mov	r3, r0
   bbc98:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbc9c:	f803 2b01 	strb.w	r2, [r3], #1
   bbca0:	2a00      	cmp	r2, #0
   bbca2:	d1f9      	bne.n	bbc98 <strcpy+0x2>
   bbca4:	4770      	bx	lr
	...

000bbca8 <strdup>:
   bbca8:	4b02      	ldr	r3, [pc, #8]	; (bbcb4 <strdup+0xc>)
   bbcaa:	4601      	mov	r1, r0
   bbcac:	6818      	ldr	r0, [r3, #0]
   bbcae:	f000 b803 	b.w	bbcb8 <_strdup_r>
   bbcb2:	bf00      	nop
   bbcb4:	2003e13c 	.word	0x2003e13c

000bbcb8 <_strdup_r>:
   bbcb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbcba:	4604      	mov	r4, r0
   bbcbc:	4608      	mov	r0, r1
   bbcbe:	460d      	mov	r5, r1
   bbcc0:	f000 f80f 	bl	bbce2 <strlen>
   bbcc4:	1c42      	adds	r2, r0, #1
   bbcc6:	4611      	mov	r1, r2
   bbcc8:	4620      	mov	r0, r4
   bbcca:	9201      	str	r2, [sp, #4]
   bbccc:	f7fb fcd0 	bl	b7670 <_malloc_r>
   bbcd0:	4604      	mov	r4, r0
   bbcd2:	b118      	cbz	r0, bbcdc <_strdup_r+0x24>
   bbcd4:	9a01      	ldr	r2, [sp, #4]
   bbcd6:	4629      	mov	r1, r5
   bbcd8:	f7ff ff5e 	bl	bbb98 <memcpy>
   bbcdc:	4620      	mov	r0, r4
   bbcde:	b003      	add	sp, #12
   bbce0:	bd30      	pop	{r4, r5, pc}

000bbce2 <strlen>:
   bbce2:	4603      	mov	r3, r0
   bbce4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbce8:	2a00      	cmp	r2, #0
   bbcea:	d1fb      	bne.n	bbce4 <strlen+0x2>
   bbcec:	1a18      	subs	r0, r3, r0
   bbcee:	3801      	subs	r0, #1
   bbcf0:	4770      	bx	lr

000bbcf2 <strncmp>:
   bbcf2:	b510      	push	{r4, lr}
   bbcf4:	b17a      	cbz	r2, bbd16 <strncmp+0x24>
   bbcf6:	4603      	mov	r3, r0
   bbcf8:	3901      	subs	r1, #1
   bbcfa:	1884      	adds	r4, r0, r2
   bbcfc:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbd00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbd04:	4290      	cmp	r0, r2
   bbd06:	d101      	bne.n	bbd0c <strncmp+0x1a>
   bbd08:	42a3      	cmp	r3, r4
   bbd0a:	d101      	bne.n	bbd10 <strncmp+0x1e>
   bbd0c:	1a80      	subs	r0, r0, r2
   bbd0e:	bd10      	pop	{r4, pc}
   bbd10:	2800      	cmp	r0, #0
   bbd12:	d1f3      	bne.n	bbcfc <strncmp+0xa>
   bbd14:	e7fa      	b.n	bbd0c <strncmp+0x1a>
   bbd16:	4610      	mov	r0, r2
   bbd18:	e7f9      	b.n	bbd0e <strncmp+0x1c>

000bbd1a <strncpy>:
   bbd1a:	b510      	push	{r4, lr}
   bbd1c:	3901      	subs	r1, #1
   bbd1e:	4603      	mov	r3, r0
   bbd20:	b132      	cbz	r2, bbd30 <strncpy+0x16>
   bbd22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbd26:	f803 4b01 	strb.w	r4, [r3], #1
   bbd2a:	3a01      	subs	r2, #1
   bbd2c:	2c00      	cmp	r4, #0
   bbd2e:	d1f7      	bne.n	bbd20 <strncpy+0x6>
   bbd30:	441a      	add	r2, r3
   bbd32:	2100      	movs	r1, #0
   bbd34:	4293      	cmp	r3, r2
   bbd36:	d100      	bne.n	bbd3a <strncpy+0x20>
   bbd38:	bd10      	pop	{r4, pc}
   bbd3a:	f803 1b01 	strb.w	r1, [r3], #1
   bbd3e:	e7f9      	b.n	bbd34 <strncpy+0x1a>

000bbd40 <strrchr>:
   bbd40:	b538      	push	{r3, r4, r5, lr}
   bbd42:	4603      	mov	r3, r0
   bbd44:	460c      	mov	r4, r1
   bbd46:	b969      	cbnz	r1, bbd64 <strrchr+0x24>
   bbd48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbd4c:	f7ff bf82 	b.w	bbc54 <strchr>
   bbd50:	1c43      	adds	r3, r0, #1
   bbd52:	4605      	mov	r5, r0
   bbd54:	4621      	mov	r1, r4
   bbd56:	4618      	mov	r0, r3
   bbd58:	f7ff ff7c 	bl	bbc54 <strchr>
   bbd5c:	2800      	cmp	r0, #0
   bbd5e:	d1f7      	bne.n	bbd50 <strrchr+0x10>
   bbd60:	4628      	mov	r0, r5
   bbd62:	bd38      	pop	{r3, r4, r5, pc}
   bbd64:	2500      	movs	r5, #0
   bbd66:	e7f5      	b.n	bbd54 <strrchr+0x14>

000bbd68 <strstr>:
   bbd68:	780a      	ldrb	r2, [r1, #0]
   bbd6a:	b570      	push	{r4, r5, r6, lr}
   bbd6c:	b96a      	cbnz	r2, bbd8a <strstr+0x22>
   bbd6e:	bd70      	pop	{r4, r5, r6, pc}
   bbd70:	429a      	cmp	r2, r3
   bbd72:	d109      	bne.n	bbd88 <strstr+0x20>
   bbd74:	460c      	mov	r4, r1
   bbd76:	4605      	mov	r5, r0
   bbd78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bbd7c:	2b00      	cmp	r3, #0
   bbd7e:	d0f6      	beq.n	bbd6e <strstr+0x6>
   bbd80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bbd84:	429e      	cmp	r6, r3
   bbd86:	d0f7      	beq.n	bbd78 <strstr+0x10>
   bbd88:	3001      	adds	r0, #1
   bbd8a:	7803      	ldrb	r3, [r0, #0]
   bbd8c:	2b00      	cmp	r3, #0
   bbd8e:	d1ef      	bne.n	bbd70 <strstr+0x8>
   bbd90:	4618      	mov	r0, r3
   bbd92:	e7ec      	b.n	bbd6e <strstr+0x6>

000bbd94 <sulp>:
   bbd94:	b570      	push	{r4, r5, r6, lr}
   bbd96:	4604      	mov	r4, r0
   bbd98:	460d      	mov	r5, r1
   bbd9a:	ec45 4b10 	vmov	d0, r4, r5
   bbd9e:	4616      	mov	r6, r2
   bbda0:	f001 fe6a 	bl	bda78 <__ulp>
   bbda4:	ec51 0b10 	vmov	r0, r1, d0
   bbda8:	b17e      	cbz	r6, bbdca <sulp+0x36>
   bbdaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbdae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbdb2:	2b00      	cmp	r3, #0
   bbdb4:	dd09      	ble.n	bbdca <sulp+0x36>
   bbdb6:	051b      	lsls	r3, r3, #20
   bbdb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbdbc:	2400      	movs	r4, #0
   bbdbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbdc2:	4622      	mov	r2, r4
   bbdc4:	462b      	mov	r3, r5
   bbdc6:	f7ff fb6b 	bl	bb4a0 <__aeabi_dmul>
   bbdca:	bd70      	pop	{r4, r5, r6, pc}
   bbdcc:	0000      	movs	r0, r0
	...

000bbdd0 <_strtod_l>:
   bbdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdd4:	ed2d 8b02 	vpush	{d8}
   bbdd8:	b09d      	sub	sp, #116	; 0x74
   bbdda:	461f      	mov	r7, r3
   bbddc:	2300      	movs	r3, #0
   bbdde:	9318      	str	r3, [sp, #96]	; 0x60
   bbde0:	4ba2      	ldr	r3, [pc, #648]	; (bc06c <_strtod_l+0x29c>)
   bbde2:	9213      	str	r2, [sp, #76]	; 0x4c
   bbde4:	681b      	ldr	r3, [r3, #0]
   bbde6:	9305      	str	r3, [sp, #20]
   bbde8:	4604      	mov	r4, r0
   bbdea:	4618      	mov	r0, r3
   bbdec:	4688      	mov	r8, r1
   bbdee:	f7ff ff78 	bl	bbce2 <strlen>
   bbdf2:	f04f 0a00 	mov.w	sl, #0
   bbdf6:	4605      	mov	r5, r0
   bbdf8:	f04f 0b00 	mov.w	fp, #0
   bbdfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbe00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe02:	781a      	ldrb	r2, [r3, #0]
   bbe04:	2a2b      	cmp	r2, #43	; 0x2b
   bbe06:	d04e      	beq.n	bbea6 <_strtod_l+0xd6>
   bbe08:	d83b      	bhi.n	bbe82 <_strtod_l+0xb2>
   bbe0a:	2a0d      	cmp	r2, #13
   bbe0c:	d834      	bhi.n	bbe78 <_strtod_l+0xa8>
   bbe0e:	2a08      	cmp	r2, #8
   bbe10:	d834      	bhi.n	bbe7c <_strtod_l+0xac>
   bbe12:	2a00      	cmp	r2, #0
   bbe14:	d03e      	beq.n	bbe94 <_strtod_l+0xc4>
   bbe16:	2300      	movs	r3, #0
   bbe18:	930a      	str	r3, [sp, #40]	; 0x28
   bbe1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbe1c:	7833      	ldrb	r3, [r6, #0]
   bbe1e:	2b30      	cmp	r3, #48	; 0x30
   bbe20:	f040 80b0 	bne.w	bbf84 <_strtod_l+0x1b4>
   bbe24:	7873      	ldrb	r3, [r6, #1]
   bbe26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbe2a:	2b58      	cmp	r3, #88	; 0x58
   bbe2c:	d168      	bne.n	bbf00 <_strtod_l+0x130>
   bbe2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbe30:	9301      	str	r3, [sp, #4]
   bbe32:	ab18      	add	r3, sp, #96	; 0x60
   bbe34:	9702      	str	r7, [sp, #8]
   bbe36:	9300      	str	r3, [sp, #0]
   bbe38:	4a8d      	ldr	r2, [pc, #564]	; (bc070 <_strtod_l+0x2a0>)
   bbe3a:	ab19      	add	r3, sp, #100	; 0x64
   bbe3c:	a917      	add	r1, sp, #92	; 0x5c
   bbe3e:	4620      	mov	r0, r4
   bbe40:	f000 ff8a 	bl	bcd58 <__gethex>
   bbe44:	f010 0707 	ands.w	r7, r0, #7
   bbe48:	4605      	mov	r5, r0
   bbe4a:	d005      	beq.n	bbe58 <_strtod_l+0x88>
   bbe4c:	2f06      	cmp	r7, #6
   bbe4e:	d12c      	bne.n	bbeaa <_strtod_l+0xda>
   bbe50:	3601      	adds	r6, #1
   bbe52:	2300      	movs	r3, #0
   bbe54:	9617      	str	r6, [sp, #92]	; 0x5c
   bbe56:	930a      	str	r3, [sp, #40]	; 0x28
   bbe58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbe5a:	2b00      	cmp	r3, #0
   bbe5c:	f040 8590 	bne.w	bc980 <_strtod_l+0xbb0>
   bbe60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbe62:	b1eb      	cbz	r3, bbea0 <_strtod_l+0xd0>
   bbe64:	4652      	mov	r2, sl
   bbe66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bbe6a:	ec43 2b10 	vmov	d0, r2, r3
   bbe6e:	b01d      	add	sp, #116	; 0x74
   bbe70:	ecbd 8b02 	vpop	{d8}
   bbe74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe78:	2a20      	cmp	r2, #32
   bbe7a:	d1cc      	bne.n	bbe16 <_strtod_l+0x46>
   bbe7c:	3301      	adds	r3, #1
   bbe7e:	9317      	str	r3, [sp, #92]	; 0x5c
   bbe80:	e7be      	b.n	bbe00 <_strtod_l+0x30>
   bbe82:	2a2d      	cmp	r2, #45	; 0x2d
   bbe84:	d1c7      	bne.n	bbe16 <_strtod_l+0x46>
   bbe86:	2201      	movs	r2, #1
   bbe88:	920a      	str	r2, [sp, #40]	; 0x28
   bbe8a:	1c5a      	adds	r2, r3, #1
   bbe8c:	9217      	str	r2, [sp, #92]	; 0x5c
   bbe8e:	785b      	ldrb	r3, [r3, #1]
   bbe90:	2b00      	cmp	r3, #0
   bbe92:	d1c2      	bne.n	bbe1a <_strtod_l+0x4a>
   bbe94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbe96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbe9a:	2b00      	cmp	r3, #0
   bbe9c:	f040 856e 	bne.w	bc97c <_strtod_l+0xbac>
   bbea0:	4652      	mov	r2, sl
   bbea2:	465b      	mov	r3, fp
   bbea4:	e7e1      	b.n	bbe6a <_strtod_l+0x9a>
   bbea6:	2200      	movs	r2, #0
   bbea8:	e7ee      	b.n	bbe88 <_strtod_l+0xb8>
   bbeaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbeac:	b13a      	cbz	r2, bbebe <_strtod_l+0xee>
   bbeae:	2135      	movs	r1, #53	; 0x35
   bbeb0:	a81a      	add	r0, sp, #104	; 0x68
   bbeb2:	f001 feec 	bl	bdc8e <__copybits>
   bbeb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbeb8:	4620      	mov	r0, r4
   bbeba:	f001 faab 	bl	bd414 <_Bfree>
   bbebe:	3f01      	subs	r7, #1
   bbec0:	2f04      	cmp	r7, #4
   bbec2:	d806      	bhi.n	bbed2 <_strtod_l+0x102>
   bbec4:	e8df f007 	tbb	[pc, r7]
   bbec8:	1714030a 	.word	0x1714030a
   bbecc:	0a          	.byte	0x0a
   bbecd:	00          	.byte	0x00
   bbece:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bbed2:	0728      	lsls	r0, r5, #28
   bbed4:	d5c0      	bpl.n	bbe58 <_strtod_l+0x88>
   bbed6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bbeda:	e7bd      	b.n	bbe58 <_strtod_l+0x88>
   bbedc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bbee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bbee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bbee6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bbeea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bbeee:	e7f0      	b.n	bbed2 <_strtod_l+0x102>
   bbef0:	f8df b180 	ldr.w	fp, [pc, #384]	; bc074 <_strtod_l+0x2a4>
   bbef4:	e7ed      	b.n	bbed2 <_strtod_l+0x102>
   bbef6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bbefa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbefe:	e7e8      	b.n	bbed2 <_strtod_l+0x102>
   bbf00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf02:	1c5a      	adds	r2, r3, #1
   bbf04:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf06:	785b      	ldrb	r3, [r3, #1]
   bbf08:	2b30      	cmp	r3, #48	; 0x30
   bbf0a:	d0f9      	beq.n	bbf00 <_strtod_l+0x130>
   bbf0c:	2b00      	cmp	r3, #0
   bbf0e:	d0a3      	beq.n	bbe58 <_strtod_l+0x88>
   bbf10:	2301      	movs	r3, #1
   bbf12:	f04f 0900 	mov.w	r9, #0
   bbf16:	9304      	str	r3, [sp, #16]
   bbf18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf1a:	9308      	str	r3, [sp, #32]
   bbf1c:	f8cd 901c 	str.w	r9, [sp, #28]
   bbf20:	464f      	mov	r7, r9
   bbf22:	220a      	movs	r2, #10
   bbf24:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bbf26:	7806      	ldrb	r6, [r0, #0]
   bbf28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bbf2c:	b2d9      	uxtb	r1, r3
   bbf2e:	2909      	cmp	r1, #9
   bbf30:	d92a      	bls.n	bbf88 <_strtod_l+0x1b8>
   bbf32:	9905      	ldr	r1, [sp, #20]
   bbf34:	462a      	mov	r2, r5
   bbf36:	f7ff fedc 	bl	bbcf2 <strncmp>
   bbf3a:	b398      	cbz	r0, bbfa4 <_strtod_l+0x1d4>
   bbf3c:	2000      	movs	r0, #0
   bbf3e:	4632      	mov	r2, r6
   bbf40:	463d      	mov	r5, r7
   bbf42:	9005      	str	r0, [sp, #20]
   bbf44:	4603      	mov	r3, r0
   bbf46:	2a65      	cmp	r2, #101	; 0x65
   bbf48:	d001      	beq.n	bbf4e <_strtod_l+0x17e>
   bbf4a:	2a45      	cmp	r2, #69	; 0x45
   bbf4c:	d118      	bne.n	bbf80 <_strtod_l+0x1b0>
   bbf4e:	b91d      	cbnz	r5, bbf58 <_strtod_l+0x188>
   bbf50:	9a04      	ldr	r2, [sp, #16]
   bbf52:	4302      	orrs	r2, r0
   bbf54:	d09e      	beq.n	bbe94 <_strtod_l+0xc4>
   bbf56:	2500      	movs	r5, #0
   bbf58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bbf5c:	f108 0201 	add.w	r2, r8, #1
   bbf60:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf62:	f898 2001 	ldrb.w	r2, [r8, #1]
   bbf66:	2a2b      	cmp	r2, #43	; 0x2b
   bbf68:	d075      	beq.n	bc056 <_strtod_l+0x286>
   bbf6a:	2a2d      	cmp	r2, #45	; 0x2d
   bbf6c:	d07b      	beq.n	bc066 <_strtod_l+0x296>
   bbf6e:	f04f 0c00 	mov.w	ip, #0
   bbf72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bbf76:	2909      	cmp	r1, #9
   bbf78:	f240 8082 	bls.w	bc080 <_strtod_l+0x2b0>
   bbf7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbf80:	2600      	movs	r6, #0
   bbf82:	e09d      	b.n	bc0c0 <_strtod_l+0x2f0>
   bbf84:	2300      	movs	r3, #0
   bbf86:	e7c4      	b.n	bbf12 <_strtod_l+0x142>
   bbf88:	2f08      	cmp	r7, #8
   bbf8a:	bfd8      	it	le
   bbf8c:	9907      	ldrle	r1, [sp, #28]
   bbf8e:	f100 0001 	add.w	r0, r0, #1
   bbf92:	bfda      	itte	le
   bbf94:	fb02 3301 	mlale	r3, r2, r1, r3
   bbf98:	9307      	strle	r3, [sp, #28]
   bbf9a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bbf9e:	3701      	adds	r7, #1
   bbfa0:	9017      	str	r0, [sp, #92]	; 0x5c
   bbfa2:	e7bf      	b.n	bbf24 <_strtod_l+0x154>
   bbfa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfa6:	195a      	adds	r2, r3, r5
   bbfa8:	9217      	str	r2, [sp, #92]	; 0x5c
   bbfaa:	5d5a      	ldrb	r2, [r3, r5]
   bbfac:	2f00      	cmp	r7, #0
   bbfae:	d037      	beq.n	bc020 <_strtod_l+0x250>
   bbfb0:	9005      	str	r0, [sp, #20]
   bbfb2:	463d      	mov	r5, r7
   bbfb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bbfb8:	2b09      	cmp	r3, #9
   bbfba:	d912      	bls.n	bbfe2 <_strtod_l+0x212>
   bbfbc:	2301      	movs	r3, #1
   bbfbe:	e7c2      	b.n	bbf46 <_strtod_l+0x176>
   bbfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfc2:	1c5a      	adds	r2, r3, #1
   bbfc4:	9217      	str	r2, [sp, #92]	; 0x5c
   bbfc6:	785a      	ldrb	r2, [r3, #1]
   bbfc8:	3001      	adds	r0, #1
   bbfca:	2a30      	cmp	r2, #48	; 0x30
   bbfcc:	d0f8      	beq.n	bbfc0 <_strtod_l+0x1f0>
   bbfce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bbfd2:	2b08      	cmp	r3, #8
   bbfd4:	f200 84d9 	bhi.w	bc98a <_strtod_l+0xbba>
   bbfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbfda:	9005      	str	r0, [sp, #20]
   bbfdc:	2000      	movs	r0, #0
   bbfde:	9308      	str	r3, [sp, #32]
   bbfe0:	4605      	mov	r5, r0
   bbfe2:	3a30      	subs	r2, #48	; 0x30
   bbfe4:	f100 0301 	add.w	r3, r0, #1
   bbfe8:	d014      	beq.n	bc014 <_strtod_l+0x244>
   bbfea:	9905      	ldr	r1, [sp, #20]
   bbfec:	4419      	add	r1, r3
   bbfee:	9105      	str	r1, [sp, #20]
   bbff0:	462b      	mov	r3, r5
   bbff2:	eb00 0e05 	add.w	lr, r0, r5
   bbff6:	210a      	movs	r1, #10
   bbff8:	4573      	cmp	r3, lr
   bbffa:	d113      	bne.n	bc024 <_strtod_l+0x254>
   bbffc:	182b      	adds	r3, r5, r0
   bbffe:	2b08      	cmp	r3, #8
   bc000:	f105 0501 	add.w	r5, r5, #1
   bc004:	4405      	add	r5, r0
   bc006:	dc1c      	bgt.n	bc042 <_strtod_l+0x272>
   bc008:	9907      	ldr	r1, [sp, #28]
   bc00a:	230a      	movs	r3, #10
   bc00c:	fb03 2301 	mla	r3, r3, r1, r2
   bc010:	9307      	str	r3, [sp, #28]
   bc012:	2300      	movs	r3, #0
   bc014:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc016:	1c51      	adds	r1, r2, #1
   bc018:	9117      	str	r1, [sp, #92]	; 0x5c
   bc01a:	7852      	ldrb	r2, [r2, #1]
   bc01c:	4618      	mov	r0, r3
   bc01e:	e7c9      	b.n	bbfb4 <_strtod_l+0x1e4>
   bc020:	4638      	mov	r0, r7
   bc022:	e7d2      	b.n	bbfca <_strtod_l+0x1fa>
   bc024:	2b08      	cmp	r3, #8
   bc026:	dc04      	bgt.n	bc032 <_strtod_l+0x262>
   bc028:	9e07      	ldr	r6, [sp, #28]
   bc02a:	434e      	muls	r6, r1
   bc02c:	9607      	str	r6, [sp, #28]
   bc02e:	3301      	adds	r3, #1
   bc030:	e7e2      	b.n	bbff8 <_strtod_l+0x228>
   bc032:	f103 0c01 	add.w	ip, r3, #1
   bc036:	f1bc 0f10 	cmp.w	ip, #16
   bc03a:	bfd8      	it	le
   bc03c:	fb01 f909 	mulle.w	r9, r1, r9
   bc040:	e7f5      	b.n	bc02e <_strtod_l+0x25e>
   bc042:	2d10      	cmp	r5, #16
   bc044:	bfdc      	itt	le
   bc046:	230a      	movle	r3, #10
   bc048:	fb03 2909 	mlale	r9, r3, r9, r2
   bc04c:	e7e1      	b.n	bc012 <_strtod_l+0x242>
   bc04e:	2300      	movs	r3, #0
   bc050:	9305      	str	r3, [sp, #20]
   bc052:	2301      	movs	r3, #1
   bc054:	e77c      	b.n	bbf50 <_strtod_l+0x180>
   bc056:	f04f 0c00 	mov.w	ip, #0
   bc05a:	f108 0202 	add.w	r2, r8, #2
   bc05e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc060:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc064:	e785      	b.n	bbf72 <_strtod_l+0x1a2>
   bc066:	f04f 0c01 	mov.w	ip, #1
   bc06a:	e7f6      	b.n	bc05a <_strtod_l+0x28a>
   bc06c:	000bebf0 	.word	0x000bebf0
   bc070:	000be9d0 	.word	0x000be9d0
   bc074:	7ff00000 	.word	0x7ff00000
   bc078:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc07a:	1c51      	adds	r1, r2, #1
   bc07c:	9117      	str	r1, [sp, #92]	; 0x5c
   bc07e:	7852      	ldrb	r2, [r2, #1]
   bc080:	2a30      	cmp	r2, #48	; 0x30
   bc082:	d0f9      	beq.n	bc078 <_strtod_l+0x2a8>
   bc084:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc088:	2908      	cmp	r1, #8
   bc08a:	f63f af79 	bhi.w	bbf80 <_strtod_l+0x1b0>
   bc08e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc092:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc094:	9206      	str	r2, [sp, #24]
   bc096:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc098:	1c51      	adds	r1, r2, #1
   bc09a:	9117      	str	r1, [sp, #92]	; 0x5c
   bc09c:	7852      	ldrb	r2, [r2, #1]
   bc09e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc0a2:	2e09      	cmp	r6, #9
   bc0a4:	d937      	bls.n	bc116 <_strtod_l+0x346>
   bc0a6:	9e06      	ldr	r6, [sp, #24]
   bc0a8:	1b89      	subs	r1, r1, r6
   bc0aa:	2908      	cmp	r1, #8
   bc0ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc0b0:	dc02      	bgt.n	bc0b8 <_strtod_l+0x2e8>
   bc0b2:	4576      	cmp	r6, lr
   bc0b4:	bfa8      	it	ge
   bc0b6:	4676      	movge	r6, lr
   bc0b8:	f1bc 0f00 	cmp.w	ip, #0
   bc0bc:	d000      	beq.n	bc0c0 <_strtod_l+0x2f0>
   bc0be:	4276      	negs	r6, r6
   bc0c0:	2d00      	cmp	r5, #0
   bc0c2:	d14d      	bne.n	bc160 <_strtod_l+0x390>
   bc0c4:	9904      	ldr	r1, [sp, #16]
   bc0c6:	4301      	orrs	r1, r0
   bc0c8:	f47f aec6 	bne.w	bbe58 <_strtod_l+0x88>
   bc0cc:	2b00      	cmp	r3, #0
   bc0ce:	f47f aee1 	bne.w	bbe94 <_strtod_l+0xc4>
   bc0d2:	2a69      	cmp	r2, #105	; 0x69
   bc0d4:	d027      	beq.n	bc126 <_strtod_l+0x356>
   bc0d6:	dc24      	bgt.n	bc122 <_strtod_l+0x352>
   bc0d8:	2a49      	cmp	r2, #73	; 0x49
   bc0da:	d024      	beq.n	bc126 <_strtod_l+0x356>
   bc0dc:	2a4e      	cmp	r2, #78	; 0x4e
   bc0de:	f47f aed9 	bne.w	bbe94 <_strtod_l+0xc4>
   bc0e2:	499f      	ldr	r1, [pc, #636]	; (bc360 <_strtod_l+0x590>)
   bc0e4:	a817      	add	r0, sp, #92	; 0x5c
   bc0e6:	f001 f88f 	bl	bd208 <__match>
   bc0ea:	2800      	cmp	r0, #0
   bc0ec:	f43f aed2 	beq.w	bbe94 <_strtod_l+0xc4>
   bc0f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0f2:	781b      	ldrb	r3, [r3, #0]
   bc0f4:	2b28      	cmp	r3, #40	; 0x28
   bc0f6:	d12d      	bne.n	bc154 <_strtod_l+0x384>
   bc0f8:	499a      	ldr	r1, [pc, #616]	; (bc364 <_strtod_l+0x594>)
   bc0fa:	aa1a      	add	r2, sp, #104	; 0x68
   bc0fc:	a817      	add	r0, sp, #92	; 0x5c
   bc0fe:	f001 f897 	bl	bd230 <__hexnan>
   bc102:	2805      	cmp	r0, #5
   bc104:	d126      	bne.n	bc154 <_strtod_l+0x384>
   bc106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc108:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc10c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc110:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc114:	e6a0      	b.n	bbe58 <_strtod_l+0x88>
   bc116:	210a      	movs	r1, #10
   bc118:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc11c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc120:	e7b9      	b.n	bc096 <_strtod_l+0x2c6>
   bc122:	2a6e      	cmp	r2, #110	; 0x6e
   bc124:	e7db      	b.n	bc0de <_strtod_l+0x30e>
   bc126:	4990      	ldr	r1, [pc, #576]	; (bc368 <_strtod_l+0x598>)
   bc128:	a817      	add	r0, sp, #92	; 0x5c
   bc12a:	f001 f86d 	bl	bd208 <__match>
   bc12e:	2800      	cmp	r0, #0
   bc130:	f43f aeb0 	beq.w	bbe94 <_strtod_l+0xc4>
   bc134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc136:	498d      	ldr	r1, [pc, #564]	; (bc36c <_strtod_l+0x59c>)
   bc138:	3b01      	subs	r3, #1
   bc13a:	a817      	add	r0, sp, #92	; 0x5c
   bc13c:	9317      	str	r3, [sp, #92]	; 0x5c
   bc13e:	f001 f863 	bl	bd208 <__match>
   bc142:	b910      	cbnz	r0, bc14a <_strtod_l+0x37a>
   bc144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc146:	3301      	adds	r3, #1
   bc148:	9317      	str	r3, [sp, #92]	; 0x5c
   bc14a:	f8df b230 	ldr.w	fp, [pc, #560]	; bc37c <_strtod_l+0x5ac>
   bc14e:	f04f 0a00 	mov.w	sl, #0
   bc152:	e681      	b.n	bbe58 <_strtod_l+0x88>
   bc154:	4886      	ldr	r0, [pc, #536]	; (bc370 <_strtod_l+0x5a0>)
   bc156:	f7fe ffdf 	bl	bb118 <nan>
   bc15a:	ec5b ab10 	vmov	sl, fp, d0
   bc15e:	e67b      	b.n	bbe58 <_strtod_l+0x88>
   bc160:	9b05      	ldr	r3, [sp, #20]
   bc162:	9807      	ldr	r0, [sp, #28]
   bc164:	1af3      	subs	r3, r6, r3
   bc166:	2f00      	cmp	r7, #0
   bc168:	bf08      	it	eq
   bc16a:	462f      	moveq	r7, r5
   bc16c:	2d10      	cmp	r5, #16
   bc16e:	9306      	str	r3, [sp, #24]
   bc170:	46a8      	mov	r8, r5
   bc172:	bfa8      	it	ge
   bc174:	f04f 0810 	movge.w	r8, #16
   bc178:	f7ff f918 	bl	bb3ac <__aeabi_ui2d>
   bc17c:	2d09      	cmp	r5, #9
   bc17e:	4682      	mov	sl, r0
   bc180:	468b      	mov	fp, r1
   bc182:	dd13      	ble.n	bc1ac <_strtod_l+0x3dc>
   bc184:	4b7b      	ldr	r3, [pc, #492]	; (bc374 <_strtod_l+0x5a4>)
   bc186:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc18a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc18e:	f7ff f987 	bl	bb4a0 <__aeabi_dmul>
   bc192:	4682      	mov	sl, r0
   bc194:	4648      	mov	r0, r9
   bc196:	468b      	mov	fp, r1
   bc198:	f7ff f908 	bl	bb3ac <__aeabi_ui2d>
   bc19c:	4602      	mov	r2, r0
   bc19e:	460b      	mov	r3, r1
   bc1a0:	4650      	mov	r0, sl
   bc1a2:	4659      	mov	r1, fp
   bc1a4:	f7fe ffc6 	bl	bb134 <__adddf3>
   bc1a8:	4682      	mov	sl, r0
   bc1aa:	468b      	mov	fp, r1
   bc1ac:	2d0f      	cmp	r5, #15
   bc1ae:	dc38      	bgt.n	bc222 <_strtod_l+0x452>
   bc1b0:	9b06      	ldr	r3, [sp, #24]
   bc1b2:	2b00      	cmp	r3, #0
   bc1b4:	f43f ae50 	beq.w	bbe58 <_strtod_l+0x88>
   bc1b8:	dd24      	ble.n	bc204 <_strtod_l+0x434>
   bc1ba:	2b16      	cmp	r3, #22
   bc1bc:	dc0b      	bgt.n	bc1d6 <_strtod_l+0x406>
   bc1be:	496d      	ldr	r1, [pc, #436]	; (bc374 <_strtod_l+0x5a4>)
   bc1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc1c8:	4652      	mov	r2, sl
   bc1ca:	465b      	mov	r3, fp
   bc1cc:	f7ff f968 	bl	bb4a0 <__aeabi_dmul>
   bc1d0:	4682      	mov	sl, r0
   bc1d2:	468b      	mov	fp, r1
   bc1d4:	e640      	b.n	bbe58 <_strtod_l+0x88>
   bc1d6:	9a06      	ldr	r2, [sp, #24]
   bc1d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc1dc:	4293      	cmp	r3, r2
   bc1de:	db20      	blt.n	bc222 <_strtod_l+0x452>
   bc1e0:	4c64      	ldr	r4, [pc, #400]	; (bc374 <_strtod_l+0x5a4>)
   bc1e2:	f1c5 050f 	rsb	r5, r5, #15
   bc1e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc1ea:	4652      	mov	r2, sl
   bc1ec:	465b      	mov	r3, fp
   bc1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc1f2:	f7ff f955 	bl	bb4a0 <__aeabi_dmul>
   bc1f6:	9b06      	ldr	r3, [sp, #24]
   bc1f8:	1b5d      	subs	r5, r3, r5
   bc1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc202:	e7e3      	b.n	bc1cc <_strtod_l+0x3fc>
   bc204:	9b06      	ldr	r3, [sp, #24]
   bc206:	3316      	adds	r3, #22
   bc208:	db0b      	blt.n	bc222 <_strtod_l+0x452>
   bc20a:	9b05      	ldr	r3, [sp, #20]
   bc20c:	1b9e      	subs	r6, r3, r6
   bc20e:	4b59      	ldr	r3, [pc, #356]	; (bc374 <_strtod_l+0x5a4>)
   bc210:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc214:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc218:	4650      	mov	r0, sl
   bc21a:	4659      	mov	r1, fp
   bc21c:	f7ff fa6a 	bl	bb6f4 <__aeabi_ddiv>
   bc220:	e7d6      	b.n	bc1d0 <_strtod_l+0x400>
   bc222:	9b06      	ldr	r3, [sp, #24]
   bc224:	eba5 0808 	sub.w	r8, r5, r8
   bc228:	4498      	add	r8, r3
   bc22a:	f1b8 0f00 	cmp.w	r8, #0
   bc22e:	dd74      	ble.n	bc31a <_strtod_l+0x54a>
   bc230:	f018 030f 	ands.w	r3, r8, #15
   bc234:	d00a      	beq.n	bc24c <_strtod_l+0x47c>
   bc236:	494f      	ldr	r1, [pc, #316]	; (bc374 <_strtod_l+0x5a4>)
   bc238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc23c:	4652      	mov	r2, sl
   bc23e:	465b      	mov	r3, fp
   bc240:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc244:	f7ff f92c 	bl	bb4a0 <__aeabi_dmul>
   bc248:	4682      	mov	sl, r0
   bc24a:	468b      	mov	fp, r1
   bc24c:	f038 080f 	bics.w	r8, r8, #15
   bc250:	d04f      	beq.n	bc2f2 <_strtod_l+0x522>
   bc252:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc256:	dd22      	ble.n	bc29e <_strtod_l+0x4ce>
   bc258:	2500      	movs	r5, #0
   bc25a:	462e      	mov	r6, r5
   bc25c:	9507      	str	r5, [sp, #28]
   bc25e:	9505      	str	r5, [sp, #20]
   bc260:	2322      	movs	r3, #34	; 0x22
   bc262:	f8df b118 	ldr.w	fp, [pc, #280]	; bc37c <_strtod_l+0x5ac>
   bc266:	6023      	str	r3, [r4, #0]
   bc268:	f04f 0a00 	mov.w	sl, #0
   bc26c:	9b07      	ldr	r3, [sp, #28]
   bc26e:	2b00      	cmp	r3, #0
   bc270:	f43f adf2 	beq.w	bbe58 <_strtod_l+0x88>
   bc274:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc276:	4620      	mov	r0, r4
   bc278:	f001 f8cc 	bl	bd414 <_Bfree>
   bc27c:	9905      	ldr	r1, [sp, #20]
   bc27e:	4620      	mov	r0, r4
   bc280:	f001 f8c8 	bl	bd414 <_Bfree>
   bc284:	4631      	mov	r1, r6
   bc286:	4620      	mov	r0, r4
   bc288:	f001 f8c4 	bl	bd414 <_Bfree>
   bc28c:	9907      	ldr	r1, [sp, #28]
   bc28e:	4620      	mov	r0, r4
   bc290:	f001 f8c0 	bl	bd414 <_Bfree>
   bc294:	4629      	mov	r1, r5
   bc296:	4620      	mov	r0, r4
   bc298:	f001 f8bc 	bl	bd414 <_Bfree>
   bc29c:	e5dc      	b.n	bbe58 <_strtod_l+0x88>
   bc29e:	4b36      	ldr	r3, [pc, #216]	; (bc378 <_strtod_l+0x5a8>)
   bc2a0:	9304      	str	r3, [sp, #16]
   bc2a2:	2300      	movs	r3, #0
   bc2a4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc2a8:	4650      	mov	r0, sl
   bc2aa:	4659      	mov	r1, fp
   bc2ac:	4699      	mov	r9, r3
   bc2ae:	f1b8 0f01 	cmp.w	r8, #1
   bc2b2:	dc21      	bgt.n	bc2f8 <_strtod_l+0x528>
   bc2b4:	b10b      	cbz	r3, bc2ba <_strtod_l+0x4ea>
   bc2b6:	4682      	mov	sl, r0
   bc2b8:	468b      	mov	fp, r1
   bc2ba:	4b2f      	ldr	r3, [pc, #188]	; (bc378 <_strtod_l+0x5a8>)
   bc2bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc2c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc2c4:	4652      	mov	r2, sl
   bc2c6:	465b      	mov	r3, fp
   bc2c8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc2cc:	f7ff f8e8 	bl	bb4a0 <__aeabi_dmul>
   bc2d0:	4b2a      	ldr	r3, [pc, #168]	; (bc37c <_strtod_l+0x5ac>)
   bc2d2:	460a      	mov	r2, r1
   bc2d4:	400b      	ands	r3, r1
   bc2d6:	492a      	ldr	r1, [pc, #168]	; (bc380 <_strtod_l+0x5b0>)
   bc2d8:	428b      	cmp	r3, r1
   bc2da:	4682      	mov	sl, r0
   bc2dc:	d8bc      	bhi.n	bc258 <_strtod_l+0x488>
   bc2de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc2e2:	428b      	cmp	r3, r1
   bc2e4:	bf86      	itte	hi
   bc2e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc384 <_strtod_l+0x5b4>
   bc2ea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc2ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc2f2:	2300      	movs	r3, #0
   bc2f4:	9304      	str	r3, [sp, #16]
   bc2f6:	e084      	b.n	bc402 <_strtod_l+0x632>
   bc2f8:	f018 0f01 	tst.w	r8, #1
   bc2fc:	d005      	beq.n	bc30a <_strtod_l+0x53a>
   bc2fe:	9b04      	ldr	r3, [sp, #16]
   bc300:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc304:	f7ff f8cc 	bl	bb4a0 <__aeabi_dmul>
   bc308:	2301      	movs	r3, #1
   bc30a:	9a04      	ldr	r2, [sp, #16]
   bc30c:	3208      	adds	r2, #8
   bc30e:	f109 0901 	add.w	r9, r9, #1
   bc312:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc316:	9204      	str	r2, [sp, #16]
   bc318:	e7c9      	b.n	bc2ae <_strtod_l+0x4de>
   bc31a:	d0ea      	beq.n	bc2f2 <_strtod_l+0x522>
   bc31c:	f1c8 0800 	rsb	r8, r8, #0
   bc320:	f018 020f 	ands.w	r2, r8, #15
   bc324:	d00a      	beq.n	bc33c <_strtod_l+0x56c>
   bc326:	4b13      	ldr	r3, [pc, #76]	; (bc374 <_strtod_l+0x5a4>)
   bc328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc32c:	4650      	mov	r0, sl
   bc32e:	4659      	mov	r1, fp
   bc330:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc334:	f7ff f9de 	bl	bb6f4 <__aeabi_ddiv>
   bc338:	4682      	mov	sl, r0
   bc33a:	468b      	mov	fp, r1
   bc33c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc340:	d0d7      	beq.n	bc2f2 <_strtod_l+0x522>
   bc342:	f1b8 0f1f 	cmp.w	r8, #31
   bc346:	dd1f      	ble.n	bc388 <_strtod_l+0x5b8>
   bc348:	2500      	movs	r5, #0
   bc34a:	462e      	mov	r6, r5
   bc34c:	9507      	str	r5, [sp, #28]
   bc34e:	9505      	str	r5, [sp, #20]
   bc350:	2322      	movs	r3, #34	; 0x22
   bc352:	f04f 0a00 	mov.w	sl, #0
   bc356:	f04f 0b00 	mov.w	fp, #0
   bc35a:	6023      	str	r3, [r4, #0]
   bc35c:	e786      	b.n	bc26c <_strtod_l+0x49c>
   bc35e:	bf00      	nop
   bc360:	000be6e5 	.word	0x000be6e5
   bc364:	000be9e4 	.word	0x000be9e4
   bc368:	000be6e9 	.word	0x000be6e9
   bc36c:	000be9c9 	.word	0x000be9c9
   bc370:	000be18b 	.word	0x000be18b
   bc374:	000bec88 	.word	0x000bec88
   bc378:	000bec60 	.word	0x000bec60
   bc37c:	7ff00000 	.word	0x7ff00000
   bc380:	7ca00000 	.word	0x7ca00000
   bc384:	7fefffff 	.word	0x7fefffff
   bc388:	f018 0310 	ands.w	r3, r8, #16
   bc38c:	bf18      	it	ne
   bc38e:	236a      	movne	r3, #106	; 0x6a
   bc390:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc740 <_strtod_l+0x970>
   bc394:	9304      	str	r3, [sp, #16]
   bc396:	4650      	mov	r0, sl
   bc398:	4659      	mov	r1, fp
   bc39a:	2300      	movs	r3, #0
   bc39c:	f018 0f01 	tst.w	r8, #1
   bc3a0:	d004      	beq.n	bc3ac <_strtod_l+0x5dc>
   bc3a2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc3a6:	f7ff f87b 	bl	bb4a0 <__aeabi_dmul>
   bc3aa:	2301      	movs	r3, #1
   bc3ac:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc3b0:	f109 0908 	add.w	r9, r9, #8
   bc3b4:	d1f2      	bne.n	bc39c <_strtod_l+0x5cc>
   bc3b6:	b10b      	cbz	r3, bc3bc <_strtod_l+0x5ec>
   bc3b8:	4682      	mov	sl, r0
   bc3ba:	468b      	mov	fp, r1
   bc3bc:	9b04      	ldr	r3, [sp, #16]
   bc3be:	b1c3      	cbz	r3, bc3f2 <_strtod_l+0x622>
   bc3c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc3c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc3c8:	2b00      	cmp	r3, #0
   bc3ca:	4659      	mov	r1, fp
   bc3cc:	dd11      	ble.n	bc3f2 <_strtod_l+0x622>
   bc3ce:	2b1f      	cmp	r3, #31
   bc3d0:	f340 8124 	ble.w	bc61c <_strtod_l+0x84c>
   bc3d4:	2b34      	cmp	r3, #52	; 0x34
   bc3d6:	bfde      	ittt	le
   bc3d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc3dc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc3e0:	fa03 f202 	lslle.w	r2, r3, r2
   bc3e4:	f04f 0a00 	mov.w	sl, #0
   bc3e8:	bfcc      	ite	gt
   bc3ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc3ee:	ea02 0b01 	andle.w	fp, r2, r1
   bc3f2:	2200      	movs	r2, #0
   bc3f4:	2300      	movs	r3, #0
   bc3f6:	4650      	mov	r0, sl
   bc3f8:	4659      	mov	r1, fp
   bc3fa:	f7ff fab9 	bl	bb970 <__aeabi_dcmpeq>
   bc3fe:	2800      	cmp	r0, #0
   bc400:	d1a2      	bne.n	bc348 <_strtod_l+0x578>
   bc402:	9b07      	ldr	r3, [sp, #28]
   bc404:	9300      	str	r3, [sp, #0]
   bc406:	9908      	ldr	r1, [sp, #32]
   bc408:	462b      	mov	r3, r5
   bc40a:	463a      	mov	r2, r7
   bc40c:	4620      	mov	r0, r4
   bc40e:	f001 f869 	bl	bd4e4 <__s2b>
   bc412:	9007      	str	r0, [sp, #28]
   bc414:	2800      	cmp	r0, #0
   bc416:	f43f af1f 	beq.w	bc258 <_strtod_l+0x488>
   bc41a:	9b05      	ldr	r3, [sp, #20]
   bc41c:	1b9e      	subs	r6, r3, r6
   bc41e:	9b06      	ldr	r3, [sp, #24]
   bc420:	2b00      	cmp	r3, #0
   bc422:	bfb4      	ite	lt
   bc424:	4633      	movlt	r3, r6
   bc426:	2300      	movge	r3, #0
   bc428:	930c      	str	r3, [sp, #48]	; 0x30
   bc42a:	9b06      	ldr	r3, [sp, #24]
   bc42c:	2500      	movs	r5, #0
   bc42e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc432:	9312      	str	r3, [sp, #72]	; 0x48
   bc434:	462e      	mov	r6, r5
   bc436:	9b07      	ldr	r3, [sp, #28]
   bc438:	4620      	mov	r0, r4
   bc43a:	6859      	ldr	r1, [r3, #4]
   bc43c:	f000 ffaa 	bl	bd394 <_Balloc>
   bc440:	9005      	str	r0, [sp, #20]
   bc442:	2800      	cmp	r0, #0
   bc444:	f43f af0c 	beq.w	bc260 <_strtod_l+0x490>
   bc448:	9b07      	ldr	r3, [sp, #28]
   bc44a:	691a      	ldr	r2, [r3, #16]
   bc44c:	3202      	adds	r2, #2
   bc44e:	f103 010c 	add.w	r1, r3, #12
   bc452:	0092      	lsls	r2, r2, #2
   bc454:	300c      	adds	r0, #12
   bc456:	f7ff fb9f 	bl	bbb98 <memcpy>
   bc45a:	ec4b ab10 	vmov	d0, sl, fp
   bc45e:	aa1a      	add	r2, sp, #104	; 0x68
   bc460:	a919      	add	r1, sp, #100	; 0x64
   bc462:	4620      	mov	r0, r4
   bc464:	f001 fb84 	bl	bdb70 <__d2b>
   bc468:	ec4b ab18 	vmov	d8, sl, fp
   bc46c:	9018      	str	r0, [sp, #96]	; 0x60
   bc46e:	2800      	cmp	r0, #0
   bc470:	f43f aef6 	beq.w	bc260 <_strtod_l+0x490>
   bc474:	2101      	movs	r1, #1
   bc476:	4620      	mov	r0, r4
   bc478:	f001 f8ce 	bl	bd618 <__i2b>
   bc47c:	4606      	mov	r6, r0
   bc47e:	2800      	cmp	r0, #0
   bc480:	f43f aeee 	beq.w	bc260 <_strtod_l+0x490>
   bc484:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc486:	9904      	ldr	r1, [sp, #16]
   bc488:	2b00      	cmp	r3, #0
   bc48a:	bfab      	itete	ge
   bc48c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc48e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc490:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc492:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc496:	bfac      	ite	ge
   bc498:	eb03 0902 	addge.w	r9, r3, r2
   bc49c:	1ad7      	sublt	r7, r2, r3
   bc49e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc4a0:	eba3 0801 	sub.w	r8, r3, r1
   bc4a4:	4490      	add	r8, r2
   bc4a6:	4ba1      	ldr	r3, [pc, #644]	; (bc72c <_strtod_l+0x95c>)
   bc4a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc4ac:	4598      	cmp	r8, r3
   bc4ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc4b2:	f280 80c7 	bge.w	bc644 <_strtod_l+0x874>
   bc4b6:	eba3 0308 	sub.w	r3, r3, r8
   bc4ba:	2b1f      	cmp	r3, #31
   bc4bc:	eba2 0203 	sub.w	r2, r2, r3
   bc4c0:	f04f 0101 	mov.w	r1, #1
   bc4c4:	f300 80b1 	bgt.w	bc62a <_strtod_l+0x85a>
   bc4c8:	fa01 f303 	lsl.w	r3, r1, r3
   bc4cc:	930d      	str	r3, [sp, #52]	; 0x34
   bc4ce:	2300      	movs	r3, #0
   bc4d0:	9308      	str	r3, [sp, #32]
   bc4d2:	eb09 0802 	add.w	r8, r9, r2
   bc4d6:	9b04      	ldr	r3, [sp, #16]
   bc4d8:	45c1      	cmp	r9, r8
   bc4da:	4417      	add	r7, r2
   bc4dc:	441f      	add	r7, r3
   bc4de:	464b      	mov	r3, r9
   bc4e0:	bfa8      	it	ge
   bc4e2:	4643      	movge	r3, r8
   bc4e4:	42bb      	cmp	r3, r7
   bc4e6:	bfa8      	it	ge
   bc4e8:	463b      	movge	r3, r7
   bc4ea:	2b00      	cmp	r3, #0
   bc4ec:	bfc2      	ittt	gt
   bc4ee:	eba8 0803 	subgt.w	r8, r8, r3
   bc4f2:	1aff      	subgt	r7, r7, r3
   bc4f4:	eba9 0903 	subgt.w	r9, r9, r3
   bc4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc4fa:	2b00      	cmp	r3, #0
   bc4fc:	dd17      	ble.n	bc52e <_strtod_l+0x75e>
   bc4fe:	4631      	mov	r1, r6
   bc500:	461a      	mov	r2, r3
   bc502:	4620      	mov	r0, r4
   bc504:	f001 f948 	bl	bd798 <__pow5mult>
   bc508:	4606      	mov	r6, r0
   bc50a:	2800      	cmp	r0, #0
   bc50c:	f43f aea8 	beq.w	bc260 <_strtod_l+0x490>
   bc510:	4601      	mov	r1, r0
   bc512:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc514:	4620      	mov	r0, r4
   bc516:	f001 f895 	bl	bd644 <__multiply>
   bc51a:	900b      	str	r0, [sp, #44]	; 0x2c
   bc51c:	2800      	cmp	r0, #0
   bc51e:	f43f ae9f 	beq.w	bc260 <_strtod_l+0x490>
   bc522:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc524:	4620      	mov	r0, r4
   bc526:	f000 ff75 	bl	bd414 <_Bfree>
   bc52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc52c:	9318      	str	r3, [sp, #96]	; 0x60
   bc52e:	f1b8 0f00 	cmp.w	r8, #0
   bc532:	f300 808c 	bgt.w	bc64e <_strtod_l+0x87e>
   bc536:	9b06      	ldr	r3, [sp, #24]
   bc538:	2b00      	cmp	r3, #0
   bc53a:	dd08      	ble.n	bc54e <_strtod_l+0x77e>
   bc53c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc53e:	9905      	ldr	r1, [sp, #20]
   bc540:	4620      	mov	r0, r4
   bc542:	f001 f929 	bl	bd798 <__pow5mult>
   bc546:	9005      	str	r0, [sp, #20]
   bc548:	2800      	cmp	r0, #0
   bc54a:	f43f ae89 	beq.w	bc260 <_strtod_l+0x490>
   bc54e:	2f00      	cmp	r7, #0
   bc550:	dd08      	ble.n	bc564 <_strtod_l+0x794>
   bc552:	9905      	ldr	r1, [sp, #20]
   bc554:	463a      	mov	r2, r7
   bc556:	4620      	mov	r0, r4
   bc558:	f001 f978 	bl	bd84c <__lshift>
   bc55c:	9005      	str	r0, [sp, #20]
   bc55e:	2800      	cmp	r0, #0
   bc560:	f43f ae7e 	beq.w	bc260 <_strtod_l+0x490>
   bc564:	f1b9 0f00 	cmp.w	r9, #0
   bc568:	dd08      	ble.n	bc57c <_strtod_l+0x7ac>
   bc56a:	4631      	mov	r1, r6
   bc56c:	464a      	mov	r2, r9
   bc56e:	4620      	mov	r0, r4
   bc570:	f001 f96c 	bl	bd84c <__lshift>
   bc574:	4606      	mov	r6, r0
   bc576:	2800      	cmp	r0, #0
   bc578:	f43f ae72 	beq.w	bc260 <_strtod_l+0x490>
   bc57c:	9a05      	ldr	r2, [sp, #20]
   bc57e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc580:	4620      	mov	r0, r4
   bc582:	f001 f9ef 	bl	bd964 <__mdiff>
   bc586:	4605      	mov	r5, r0
   bc588:	2800      	cmp	r0, #0
   bc58a:	f43f ae69 	beq.w	bc260 <_strtod_l+0x490>
   bc58e:	68c3      	ldr	r3, [r0, #12]
   bc590:	930b      	str	r3, [sp, #44]	; 0x2c
   bc592:	2300      	movs	r3, #0
   bc594:	60c3      	str	r3, [r0, #12]
   bc596:	4631      	mov	r1, r6
   bc598:	f001 f9c8 	bl	bd92c <__mcmp>
   bc59c:	2800      	cmp	r0, #0
   bc59e:	da60      	bge.n	bc662 <_strtod_l+0x892>
   bc5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc5a2:	ea53 030a 	orrs.w	r3, r3, sl
   bc5a6:	f040 8082 	bne.w	bc6ae <_strtod_l+0x8de>
   bc5aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc5ae:	2b00      	cmp	r3, #0
   bc5b0:	d17d      	bne.n	bc6ae <_strtod_l+0x8de>
   bc5b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc5b6:	0d1b      	lsrs	r3, r3, #20
   bc5b8:	051b      	lsls	r3, r3, #20
   bc5ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc5be:	d976      	bls.n	bc6ae <_strtod_l+0x8de>
   bc5c0:	696b      	ldr	r3, [r5, #20]
   bc5c2:	b913      	cbnz	r3, bc5ca <_strtod_l+0x7fa>
   bc5c4:	692b      	ldr	r3, [r5, #16]
   bc5c6:	2b01      	cmp	r3, #1
   bc5c8:	dd71      	ble.n	bc6ae <_strtod_l+0x8de>
   bc5ca:	4629      	mov	r1, r5
   bc5cc:	2201      	movs	r2, #1
   bc5ce:	4620      	mov	r0, r4
   bc5d0:	f001 f93c 	bl	bd84c <__lshift>
   bc5d4:	4631      	mov	r1, r6
   bc5d6:	4605      	mov	r5, r0
   bc5d8:	f001 f9a8 	bl	bd92c <__mcmp>
   bc5dc:	2800      	cmp	r0, #0
   bc5de:	dd66      	ble.n	bc6ae <_strtod_l+0x8de>
   bc5e0:	9904      	ldr	r1, [sp, #16]
   bc5e2:	4a53      	ldr	r2, [pc, #332]	; (bc730 <_strtod_l+0x960>)
   bc5e4:	465b      	mov	r3, fp
   bc5e6:	2900      	cmp	r1, #0
   bc5e8:	f000 8081 	beq.w	bc6ee <_strtod_l+0x91e>
   bc5ec:	ea02 010b 	and.w	r1, r2, fp
   bc5f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc5f4:	dc7b      	bgt.n	bc6ee <_strtod_l+0x91e>
   bc5f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc5fa:	f77f aea9 	ble.w	bc350 <_strtod_l+0x580>
   bc5fe:	4b4d      	ldr	r3, [pc, #308]	; (bc734 <_strtod_l+0x964>)
   bc600:	4650      	mov	r0, sl
   bc602:	4659      	mov	r1, fp
   bc604:	2200      	movs	r2, #0
   bc606:	f7fe ff4b 	bl	bb4a0 <__aeabi_dmul>
   bc60a:	460b      	mov	r3, r1
   bc60c:	4303      	orrs	r3, r0
   bc60e:	bf08      	it	eq
   bc610:	2322      	moveq	r3, #34	; 0x22
   bc612:	4682      	mov	sl, r0
   bc614:	468b      	mov	fp, r1
   bc616:	bf08      	it	eq
   bc618:	6023      	streq	r3, [r4, #0]
   bc61a:	e62b      	b.n	bc274 <_strtod_l+0x4a4>
   bc61c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc620:	fa02 f303 	lsl.w	r3, r2, r3
   bc624:	ea03 0a0a 	and.w	sl, r3, sl
   bc628:	e6e3      	b.n	bc3f2 <_strtod_l+0x622>
   bc62a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc62e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc632:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc636:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc63a:	fa01 f308 	lsl.w	r3, r1, r8
   bc63e:	9308      	str	r3, [sp, #32]
   bc640:	910d      	str	r1, [sp, #52]	; 0x34
   bc642:	e746      	b.n	bc4d2 <_strtod_l+0x702>
   bc644:	2300      	movs	r3, #0
   bc646:	9308      	str	r3, [sp, #32]
   bc648:	2301      	movs	r3, #1
   bc64a:	930d      	str	r3, [sp, #52]	; 0x34
   bc64c:	e741      	b.n	bc4d2 <_strtod_l+0x702>
   bc64e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc650:	4642      	mov	r2, r8
   bc652:	4620      	mov	r0, r4
   bc654:	f001 f8fa 	bl	bd84c <__lshift>
   bc658:	9018      	str	r0, [sp, #96]	; 0x60
   bc65a:	2800      	cmp	r0, #0
   bc65c:	f47f af6b 	bne.w	bc536 <_strtod_l+0x766>
   bc660:	e5fe      	b.n	bc260 <_strtod_l+0x490>
   bc662:	465f      	mov	r7, fp
   bc664:	d16e      	bne.n	bc744 <_strtod_l+0x974>
   bc666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc668:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc66c:	b342      	cbz	r2, bc6c0 <_strtod_l+0x8f0>
   bc66e:	4a32      	ldr	r2, [pc, #200]	; (bc738 <_strtod_l+0x968>)
   bc670:	4293      	cmp	r3, r2
   bc672:	d128      	bne.n	bc6c6 <_strtod_l+0x8f6>
   bc674:	9b04      	ldr	r3, [sp, #16]
   bc676:	4651      	mov	r1, sl
   bc678:	b1eb      	cbz	r3, bc6b6 <_strtod_l+0x8e6>
   bc67a:	4b2d      	ldr	r3, [pc, #180]	; (bc730 <_strtod_l+0x960>)
   bc67c:	403b      	ands	r3, r7
   bc67e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc686:	d819      	bhi.n	bc6bc <_strtod_l+0x8ec>
   bc688:	0d1b      	lsrs	r3, r3, #20
   bc68a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc68e:	fa02 f303 	lsl.w	r3, r2, r3
   bc692:	4299      	cmp	r1, r3
   bc694:	d117      	bne.n	bc6c6 <_strtod_l+0x8f6>
   bc696:	4b29      	ldr	r3, [pc, #164]	; (bc73c <_strtod_l+0x96c>)
   bc698:	429f      	cmp	r7, r3
   bc69a:	d102      	bne.n	bc6a2 <_strtod_l+0x8d2>
   bc69c:	3101      	adds	r1, #1
   bc69e:	f43f addf 	beq.w	bc260 <_strtod_l+0x490>
   bc6a2:	4b23      	ldr	r3, [pc, #140]	; (bc730 <_strtod_l+0x960>)
   bc6a4:	403b      	ands	r3, r7
   bc6a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc6aa:	f04f 0a00 	mov.w	sl, #0
   bc6ae:	9b04      	ldr	r3, [sp, #16]
   bc6b0:	2b00      	cmp	r3, #0
   bc6b2:	d1a4      	bne.n	bc5fe <_strtod_l+0x82e>
   bc6b4:	e5de      	b.n	bc274 <_strtod_l+0x4a4>
   bc6b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc6ba:	e7ea      	b.n	bc692 <_strtod_l+0x8c2>
   bc6bc:	4613      	mov	r3, r2
   bc6be:	e7e8      	b.n	bc692 <_strtod_l+0x8c2>
   bc6c0:	ea53 030a 	orrs.w	r3, r3, sl
   bc6c4:	d08c      	beq.n	bc5e0 <_strtod_l+0x810>
   bc6c6:	9b08      	ldr	r3, [sp, #32]
   bc6c8:	b1db      	cbz	r3, bc702 <_strtod_l+0x932>
   bc6ca:	423b      	tst	r3, r7
   bc6cc:	d0ef      	beq.n	bc6ae <_strtod_l+0x8de>
   bc6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc6d0:	9a04      	ldr	r2, [sp, #16]
   bc6d2:	4650      	mov	r0, sl
   bc6d4:	4659      	mov	r1, fp
   bc6d6:	b1c3      	cbz	r3, bc70a <_strtod_l+0x93a>
   bc6d8:	f7ff fb5c 	bl	bbd94 <sulp>
   bc6dc:	4602      	mov	r2, r0
   bc6de:	460b      	mov	r3, r1
   bc6e0:	ec51 0b18 	vmov	r0, r1, d8
   bc6e4:	f7fe fd26 	bl	bb134 <__adddf3>
   bc6e8:	4682      	mov	sl, r0
   bc6ea:	468b      	mov	fp, r1
   bc6ec:	e7df      	b.n	bc6ae <_strtod_l+0x8de>
   bc6ee:	4013      	ands	r3, r2
   bc6f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc6f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc6f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc6fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc700:	e7d5      	b.n	bc6ae <_strtod_l+0x8de>
   bc702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc704:	ea13 0f0a 	tst.w	r3, sl
   bc708:	e7e0      	b.n	bc6cc <_strtod_l+0x8fc>
   bc70a:	f7ff fb43 	bl	bbd94 <sulp>
   bc70e:	4602      	mov	r2, r0
   bc710:	460b      	mov	r3, r1
   bc712:	ec51 0b18 	vmov	r0, r1, d8
   bc716:	f7fe fd0b 	bl	bb130 <__aeabi_dsub>
   bc71a:	2200      	movs	r2, #0
   bc71c:	2300      	movs	r3, #0
   bc71e:	4682      	mov	sl, r0
   bc720:	468b      	mov	fp, r1
   bc722:	f7ff f925 	bl	bb970 <__aeabi_dcmpeq>
   bc726:	2800      	cmp	r0, #0
   bc728:	d0c1      	beq.n	bc6ae <_strtod_l+0x8de>
   bc72a:	e611      	b.n	bc350 <_strtod_l+0x580>
   bc72c:	fffffc02 	.word	0xfffffc02
   bc730:	7ff00000 	.word	0x7ff00000
   bc734:	39500000 	.word	0x39500000
   bc738:	000fffff 	.word	0x000fffff
   bc73c:	7fefffff 	.word	0x7fefffff
   bc740:	000be9f8 	.word	0x000be9f8
   bc744:	4631      	mov	r1, r6
   bc746:	4628      	mov	r0, r5
   bc748:	f001 fa6e 	bl	bdc28 <__ratio>
   bc74c:	ec59 8b10 	vmov	r8, r9, d0
   bc750:	ee10 0a10 	vmov	r0, s0
   bc754:	2200      	movs	r2, #0
   bc756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc75a:	4649      	mov	r1, r9
   bc75c:	f7ff f91c 	bl	bb998 <__aeabi_dcmple>
   bc760:	2800      	cmp	r0, #0
   bc762:	d07a      	beq.n	bc85a <_strtod_l+0xa8a>
   bc764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc766:	2b00      	cmp	r3, #0
   bc768:	d04a      	beq.n	bc800 <_strtod_l+0xa30>
   bc76a:	4b95      	ldr	r3, [pc, #596]	; (bc9c0 <_strtod_l+0xbf0>)
   bc76c:	2200      	movs	r2, #0
   bc76e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc772:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc9c0 <_strtod_l+0xbf0>
   bc776:	f04f 0800 	mov.w	r8, #0
   bc77a:	4b92      	ldr	r3, [pc, #584]	; (bc9c4 <_strtod_l+0xbf4>)
   bc77c:	403b      	ands	r3, r7
   bc77e:	930d      	str	r3, [sp, #52]	; 0x34
   bc780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc782:	4b91      	ldr	r3, [pc, #580]	; (bc9c8 <_strtod_l+0xbf8>)
   bc784:	429a      	cmp	r2, r3
   bc786:	f040 80b0 	bne.w	bc8ea <_strtod_l+0xb1a>
   bc78a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc78e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc792:	ec4b ab10 	vmov	d0, sl, fp
   bc796:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc79a:	f001 f96d 	bl	bda78 <__ulp>
   bc79e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc7a2:	ec53 2b10 	vmov	r2, r3, d0
   bc7a6:	f7fe fe7b 	bl	bb4a0 <__aeabi_dmul>
   bc7aa:	4652      	mov	r2, sl
   bc7ac:	465b      	mov	r3, fp
   bc7ae:	f7fe fcc1 	bl	bb134 <__adddf3>
   bc7b2:	460b      	mov	r3, r1
   bc7b4:	4983      	ldr	r1, [pc, #524]	; (bc9c4 <_strtod_l+0xbf4>)
   bc7b6:	4a85      	ldr	r2, [pc, #532]	; (bc9cc <_strtod_l+0xbfc>)
   bc7b8:	4019      	ands	r1, r3
   bc7ba:	4291      	cmp	r1, r2
   bc7bc:	4682      	mov	sl, r0
   bc7be:	d960      	bls.n	bc882 <_strtod_l+0xab2>
   bc7c0:	ee18 3a90 	vmov	r3, s17
   bc7c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc7c8:	4293      	cmp	r3, r2
   bc7ca:	d104      	bne.n	bc7d6 <_strtod_l+0xa06>
   bc7cc:	ee18 3a10 	vmov	r3, s16
   bc7d0:	3301      	adds	r3, #1
   bc7d2:	f43f ad45 	beq.w	bc260 <_strtod_l+0x490>
   bc7d6:	f8df b200 	ldr.w	fp, [pc, #512]	; bc9d8 <_strtod_l+0xc08>
   bc7da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc7de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc7e0:	4620      	mov	r0, r4
   bc7e2:	f000 fe17 	bl	bd414 <_Bfree>
   bc7e6:	9905      	ldr	r1, [sp, #20]
   bc7e8:	4620      	mov	r0, r4
   bc7ea:	f000 fe13 	bl	bd414 <_Bfree>
   bc7ee:	4631      	mov	r1, r6
   bc7f0:	4620      	mov	r0, r4
   bc7f2:	f000 fe0f 	bl	bd414 <_Bfree>
   bc7f6:	4629      	mov	r1, r5
   bc7f8:	4620      	mov	r0, r4
   bc7fa:	f000 fe0b 	bl	bd414 <_Bfree>
   bc7fe:	e61a      	b.n	bc436 <_strtod_l+0x666>
   bc800:	f1ba 0f00 	cmp.w	sl, #0
   bc804:	d11b      	bne.n	bc83e <_strtod_l+0xa6e>
   bc806:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc80a:	b9f3      	cbnz	r3, bc84a <_strtod_l+0xa7a>
   bc80c:	4b6c      	ldr	r3, [pc, #432]	; (bc9c0 <_strtod_l+0xbf0>)
   bc80e:	2200      	movs	r2, #0
   bc810:	4640      	mov	r0, r8
   bc812:	4649      	mov	r1, r9
   bc814:	f7ff f8b6 	bl	bb984 <__aeabi_dcmplt>
   bc818:	b9d0      	cbnz	r0, bc850 <_strtod_l+0xa80>
   bc81a:	4640      	mov	r0, r8
   bc81c:	4649      	mov	r1, r9
   bc81e:	4b6c      	ldr	r3, [pc, #432]	; (bc9d0 <_strtod_l+0xc00>)
   bc820:	2200      	movs	r2, #0
   bc822:	f7fe fe3d 	bl	bb4a0 <__aeabi_dmul>
   bc826:	4680      	mov	r8, r0
   bc828:	4689      	mov	r9, r1
   bc82a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc82e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc832:	9315      	str	r3, [sp, #84]	; 0x54
   bc834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc838:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc83c:	e79d      	b.n	bc77a <_strtod_l+0x9aa>
   bc83e:	f1ba 0f01 	cmp.w	sl, #1
   bc842:	d102      	bne.n	bc84a <_strtod_l+0xa7a>
   bc844:	2f00      	cmp	r7, #0
   bc846:	f43f ad83 	beq.w	bc350 <_strtod_l+0x580>
   bc84a:	4b62      	ldr	r3, [pc, #392]	; (bc9d4 <_strtod_l+0xc04>)
   bc84c:	2200      	movs	r2, #0
   bc84e:	e78e      	b.n	bc76e <_strtod_l+0x99e>
   bc850:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc9d0 <_strtod_l+0xc00>
   bc854:	f04f 0800 	mov.w	r8, #0
   bc858:	e7e7      	b.n	bc82a <_strtod_l+0xa5a>
   bc85a:	4b5d      	ldr	r3, [pc, #372]	; (bc9d0 <_strtod_l+0xc00>)
   bc85c:	4640      	mov	r0, r8
   bc85e:	4649      	mov	r1, r9
   bc860:	2200      	movs	r2, #0
   bc862:	f7fe fe1d 	bl	bb4a0 <__aeabi_dmul>
   bc866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc868:	4680      	mov	r8, r0
   bc86a:	4689      	mov	r9, r1
   bc86c:	b933      	cbnz	r3, bc87c <_strtod_l+0xaac>
   bc86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc872:	900e      	str	r0, [sp, #56]	; 0x38
   bc874:	930f      	str	r3, [sp, #60]	; 0x3c
   bc876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc87a:	e7dd      	b.n	bc838 <_strtod_l+0xa68>
   bc87c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc880:	e7f9      	b.n	bc876 <_strtod_l+0xaa6>
   bc882:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc886:	9b04      	ldr	r3, [sp, #16]
   bc888:	2b00      	cmp	r3, #0
   bc88a:	d1a8      	bne.n	bc7de <_strtod_l+0xa0e>
   bc88c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc892:	0d1b      	lsrs	r3, r3, #20
   bc894:	051b      	lsls	r3, r3, #20
   bc896:	429a      	cmp	r2, r3
   bc898:	d1a1      	bne.n	bc7de <_strtod_l+0xa0e>
   bc89a:	4640      	mov	r0, r8
   bc89c:	4649      	mov	r1, r9
   bc89e:	f001 fa57 	bl	bdd50 <__aeabi_d2lz>
   bc8a2:	f7fe fdcf 	bl	bb444 <__aeabi_l2d>
   bc8a6:	4602      	mov	r2, r0
   bc8a8:	460b      	mov	r3, r1
   bc8aa:	4640      	mov	r0, r8
   bc8ac:	4649      	mov	r1, r9
   bc8ae:	f7fe fc3f 	bl	bb130 <__aeabi_dsub>
   bc8b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc8b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc8b8:	ea43 030a 	orr.w	r3, r3, sl
   bc8bc:	4313      	orrs	r3, r2
   bc8be:	4680      	mov	r8, r0
   bc8c0:	4689      	mov	r9, r1
   bc8c2:	d055      	beq.n	bc970 <_strtod_l+0xba0>
   bc8c4:	a336      	add	r3, pc, #216	; (adr r3, bc9a0 <_strtod_l+0xbd0>)
   bc8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8ca:	f7ff f85b 	bl	bb984 <__aeabi_dcmplt>
   bc8ce:	2800      	cmp	r0, #0
   bc8d0:	f47f acd0 	bne.w	bc274 <_strtod_l+0x4a4>
   bc8d4:	a334      	add	r3, pc, #208	; (adr r3, bc9a8 <_strtod_l+0xbd8>)
   bc8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8da:	4640      	mov	r0, r8
   bc8dc:	4649      	mov	r1, r9
   bc8de:	f7ff f86f 	bl	bb9c0 <__aeabi_dcmpgt>
   bc8e2:	2800      	cmp	r0, #0
   bc8e4:	f43f af7b 	beq.w	bc7de <_strtod_l+0xa0e>
   bc8e8:	e4c4      	b.n	bc274 <_strtod_l+0x4a4>
   bc8ea:	9b04      	ldr	r3, [sp, #16]
   bc8ec:	b333      	cbz	r3, bc93c <_strtod_l+0xb6c>
   bc8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc8f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc8f4:	d822      	bhi.n	bc93c <_strtod_l+0xb6c>
   bc8f6:	a32e      	add	r3, pc, #184	; (adr r3, bc9b0 <_strtod_l+0xbe0>)
   bc8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8fc:	4640      	mov	r0, r8
   bc8fe:	4649      	mov	r1, r9
   bc900:	f7ff f84a 	bl	bb998 <__aeabi_dcmple>
   bc904:	b1a0      	cbz	r0, bc930 <_strtod_l+0xb60>
   bc906:	4649      	mov	r1, r9
   bc908:	4640      	mov	r0, r8
   bc90a:	f7ff f8a1 	bl	bba50 <__aeabi_d2uiz>
   bc90e:	2801      	cmp	r0, #1
   bc910:	bf38      	it	cc
   bc912:	2001      	movcc	r0, #1
   bc914:	f7fe fd4a 	bl	bb3ac <__aeabi_ui2d>
   bc918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc91a:	4680      	mov	r8, r0
   bc91c:	4689      	mov	r9, r1
   bc91e:	bb23      	cbnz	r3, bc96a <_strtod_l+0xb9a>
   bc920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc924:	9010      	str	r0, [sp, #64]	; 0x40
   bc926:	9311      	str	r3, [sp, #68]	; 0x44
   bc928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc92c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc930:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc934:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc938:	1a9b      	subs	r3, r3, r2
   bc93a:	9309      	str	r3, [sp, #36]	; 0x24
   bc93c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc940:	eeb0 0a48 	vmov.f32	s0, s16
   bc944:	eef0 0a68 	vmov.f32	s1, s17
   bc948:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc94c:	f001 f894 	bl	bda78 <__ulp>
   bc950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc954:	ec53 2b10 	vmov	r2, r3, d0
   bc958:	f7fe fda2 	bl	bb4a0 <__aeabi_dmul>
   bc95c:	ec53 2b18 	vmov	r2, r3, d8
   bc960:	f7fe fbe8 	bl	bb134 <__adddf3>
   bc964:	4682      	mov	sl, r0
   bc966:	468b      	mov	fp, r1
   bc968:	e78d      	b.n	bc886 <_strtod_l+0xab6>
   bc96a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc96e:	e7db      	b.n	bc928 <_strtod_l+0xb58>
   bc970:	a311      	add	r3, pc, #68	; (adr r3, bc9b8 <_strtod_l+0xbe8>)
   bc972:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc976:	f7ff f805 	bl	bb984 <__aeabi_dcmplt>
   bc97a:	e7b2      	b.n	bc8e2 <_strtod_l+0xb12>
   bc97c:	2300      	movs	r3, #0
   bc97e:	930a      	str	r3, [sp, #40]	; 0x28
   bc980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc984:	6013      	str	r3, [r2, #0]
   bc986:	f7ff ba6b 	b.w	bbe60 <_strtod_l+0x90>
   bc98a:	2a65      	cmp	r2, #101	; 0x65
   bc98c:	f43f ab5f 	beq.w	bc04e <_strtod_l+0x27e>
   bc990:	2a45      	cmp	r2, #69	; 0x45
   bc992:	f43f ab5c 	beq.w	bc04e <_strtod_l+0x27e>
   bc996:	2301      	movs	r3, #1
   bc998:	f7ff bb94 	b.w	bc0c4 <_strtod_l+0x2f4>
   bc99c:	f3af 8000 	nop.w
   bc9a0:	94a03595 	.word	0x94a03595
   bc9a4:	3fdfffff 	.word	0x3fdfffff
   bc9a8:	35afe535 	.word	0x35afe535
   bc9ac:	3fe00000 	.word	0x3fe00000
   bc9b0:	ffc00000 	.word	0xffc00000
   bc9b4:	41dfffff 	.word	0x41dfffff
   bc9b8:	94a03595 	.word	0x94a03595
   bc9bc:	3fcfffff 	.word	0x3fcfffff
   bc9c0:	3ff00000 	.word	0x3ff00000
   bc9c4:	7ff00000 	.word	0x7ff00000
   bc9c8:	7fe00000 	.word	0x7fe00000
   bc9cc:	7c9fffff 	.word	0x7c9fffff
   bc9d0:	3fe00000 	.word	0x3fe00000
   bc9d4:	bff00000 	.word	0xbff00000
   bc9d8:	7fefffff 	.word	0x7fefffff

000bc9dc <strtod>:
   bc9dc:	460a      	mov	r2, r1
   bc9de:	4601      	mov	r1, r0
   bc9e0:	4802      	ldr	r0, [pc, #8]	; (bc9ec <strtod+0x10>)
   bc9e2:	4b03      	ldr	r3, [pc, #12]	; (bc9f0 <strtod+0x14>)
   bc9e4:	6800      	ldr	r0, [r0, #0]
   bc9e6:	f7ff b9f3 	b.w	bbdd0 <_strtod_l>
   bc9ea:	bf00      	nop
   bc9ec:	2003e13c 	.word	0x2003e13c
   bc9f0:	2003e1a8 	.word	0x2003e1a8

000bc9f4 <strtok>:
   bc9f4:	4b16      	ldr	r3, [pc, #88]	; (bca50 <strtok+0x5c>)
   bc9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc9f8:	681e      	ldr	r6, [r3, #0]
   bc9fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bc9fc:	4605      	mov	r5, r0
   bc9fe:	b9fc      	cbnz	r4, bca40 <strtok+0x4c>
   bca00:	2050      	movs	r0, #80	; 0x50
   bca02:	9101      	str	r1, [sp, #4]
   bca04:	f7fa fdfc 	bl	b7600 <malloc>
   bca08:	9901      	ldr	r1, [sp, #4]
   bca0a:	65b0      	str	r0, [r6, #88]	; 0x58
   bca0c:	4602      	mov	r2, r0
   bca0e:	b920      	cbnz	r0, bca1a <strtok+0x26>
   bca10:	4b10      	ldr	r3, [pc, #64]	; (bca54 <strtok+0x60>)
   bca12:	4811      	ldr	r0, [pc, #68]	; (bca58 <strtok+0x64>)
   bca14:	2157      	movs	r1, #87	; 0x57
   bca16:	f7fa fe3b 	bl	b7690 <__assert_func>
   bca1a:	e9c0 4400 	strd	r4, r4, [r0]
   bca1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bca22:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bca26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bca2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bca2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bca32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bca36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bca3a:	6184      	str	r4, [r0, #24]
   bca3c:	7704      	strb	r4, [r0, #28]
   bca3e:	6244      	str	r4, [r0, #36]	; 0x24
   bca40:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bca42:	2301      	movs	r3, #1
   bca44:	4628      	mov	r0, r5
   bca46:	b002      	add	sp, #8
   bca48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bca4c:	f000 b806 	b.w	bca5c <__strtok_r>
   bca50:	2003e13c 	.word	0x2003e13c
   bca54:	000be959 	.word	0x000be959
   bca58:	000bea20 	.word	0x000bea20

000bca5c <__strtok_r>:
   bca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bca5e:	b908      	cbnz	r0, bca64 <__strtok_r+0x8>
   bca60:	6810      	ldr	r0, [r2, #0]
   bca62:	b188      	cbz	r0, bca88 <__strtok_r+0x2c>
   bca64:	4604      	mov	r4, r0
   bca66:	4620      	mov	r0, r4
   bca68:	f814 5b01 	ldrb.w	r5, [r4], #1
   bca6c:	460f      	mov	r7, r1
   bca6e:	f817 6b01 	ldrb.w	r6, [r7], #1
   bca72:	b91e      	cbnz	r6, bca7c <__strtok_r+0x20>
   bca74:	b965      	cbnz	r5, bca90 <__strtok_r+0x34>
   bca76:	6015      	str	r5, [r2, #0]
   bca78:	4628      	mov	r0, r5
   bca7a:	e005      	b.n	bca88 <__strtok_r+0x2c>
   bca7c:	42b5      	cmp	r5, r6
   bca7e:	d1f6      	bne.n	bca6e <__strtok_r+0x12>
   bca80:	2b00      	cmp	r3, #0
   bca82:	d1f0      	bne.n	bca66 <__strtok_r+0xa>
   bca84:	6014      	str	r4, [r2, #0]
   bca86:	7003      	strb	r3, [r0, #0]
   bca88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bca8a:	461c      	mov	r4, r3
   bca8c:	e00c      	b.n	bcaa8 <__strtok_r+0x4c>
   bca8e:	b915      	cbnz	r5, bca96 <__strtok_r+0x3a>
   bca90:	f814 3b01 	ldrb.w	r3, [r4], #1
   bca94:	460e      	mov	r6, r1
   bca96:	f816 5b01 	ldrb.w	r5, [r6], #1
   bca9a:	42ab      	cmp	r3, r5
   bca9c:	d1f7      	bne.n	bca8e <__strtok_r+0x32>
   bca9e:	2b00      	cmp	r3, #0
   bcaa0:	d0f3      	beq.n	bca8a <__strtok_r+0x2e>
   bcaa2:	2300      	movs	r3, #0
   bcaa4:	f804 3c01 	strb.w	r3, [r4, #-1]
   bcaa8:	6014      	str	r4, [r2, #0]
   bcaaa:	e7ed      	b.n	bca88 <__strtok_r+0x2c>

000bcaac <_strtol_l.constprop.0>:
   bcaac:	2b01      	cmp	r3, #1
   bcaae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcab2:	d001      	beq.n	bcab8 <_strtol_l.constprop.0+0xc>
   bcab4:	2b24      	cmp	r3, #36	; 0x24
   bcab6:	d906      	bls.n	bcac6 <_strtol_l.constprop.0+0x1a>
   bcab8:	f7fa fde2 	bl	b7680 <__errno>
   bcabc:	2316      	movs	r3, #22
   bcabe:	6003      	str	r3, [r0, #0]
   bcac0:	2000      	movs	r0, #0
   bcac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcbac <_strtol_l.constprop.0+0x100>
   bcaca:	460d      	mov	r5, r1
   bcacc:	462e      	mov	r6, r5
   bcace:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcad2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bcad6:	f017 0708 	ands.w	r7, r7, #8
   bcada:	d1f7      	bne.n	bcacc <_strtol_l.constprop.0+0x20>
   bcadc:	2c2d      	cmp	r4, #45	; 0x2d
   bcade:	d132      	bne.n	bcb46 <_strtol_l.constprop.0+0x9a>
   bcae0:	782c      	ldrb	r4, [r5, #0]
   bcae2:	2701      	movs	r7, #1
   bcae4:	1cb5      	adds	r5, r6, #2
   bcae6:	2b00      	cmp	r3, #0
   bcae8:	d05b      	beq.n	bcba2 <_strtol_l.constprop.0+0xf6>
   bcaea:	2b10      	cmp	r3, #16
   bcaec:	d109      	bne.n	bcb02 <_strtol_l.constprop.0+0x56>
   bcaee:	2c30      	cmp	r4, #48	; 0x30
   bcaf0:	d107      	bne.n	bcb02 <_strtol_l.constprop.0+0x56>
   bcaf2:	782c      	ldrb	r4, [r5, #0]
   bcaf4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bcaf8:	2c58      	cmp	r4, #88	; 0x58
   bcafa:	d14d      	bne.n	bcb98 <_strtol_l.constprop.0+0xec>
   bcafc:	786c      	ldrb	r4, [r5, #1]
   bcafe:	2310      	movs	r3, #16
   bcb00:	3502      	adds	r5, #2
   bcb02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bcb06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bcb0a:	f04f 0c00 	mov.w	ip, #0
   bcb0e:	fbb8 f9f3 	udiv	r9, r8, r3
   bcb12:	4666      	mov	r6, ip
   bcb14:	fb03 8a19 	mls	sl, r3, r9, r8
   bcb18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bcb1c:	f1be 0f09 	cmp.w	lr, #9
   bcb20:	d816      	bhi.n	bcb50 <_strtol_l.constprop.0+0xa4>
   bcb22:	4674      	mov	r4, lr
   bcb24:	42a3      	cmp	r3, r4
   bcb26:	dd24      	ble.n	bcb72 <_strtol_l.constprop.0+0xc6>
   bcb28:	f1bc 0f00 	cmp.w	ip, #0
   bcb2c:	db1e      	blt.n	bcb6c <_strtol_l.constprop.0+0xc0>
   bcb2e:	45b1      	cmp	r9, r6
   bcb30:	d31c      	bcc.n	bcb6c <_strtol_l.constprop.0+0xc0>
   bcb32:	d101      	bne.n	bcb38 <_strtol_l.constprop.0+0x8c>
   bcb34:	45a2      	cmp	sl, r4
   bcb36:	db19      	blt.n	bcb6c <_strtol_l.constprop.0+0xc0>
   bcb38:	fb06 4603 	mla	r6, r6, r3, r4
   bcb3c:	f04f 0c01 	mov.w	ip, #1
   bcb40:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcb44:	e7e8      	b.n	bcb18 <_strtol_l.constprop.0+0x6c>
   bcb46:	2c2b      	cmp	r4, #43	; 0x2b
   bcb48:	bf04      	itt	eq
   bcb4a:	782c      	ldrbeq	r4, [r5, #0]
   bcb4c:	1cb5      	addeq	r5, r6, #2
   bcb4e:	e7ca      	b.n	bcae6 <_strtol_l.constprop.0+0x3a>
   bcb50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcb54:	f1be 0f19 	cmp.w	lr, #25
   bcb58:	d801      	bhi.n	bcb5e <_strtol_l.constprop.0+0xb2>
   bcb5a:	3c37      	subs	r4, #55	; 0x37
   bcb5c:	e7e2      	b.n	bcb24 <_strtol_l.constprop.0+0x78>
   bcb5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bcb62:	f1be 0f19 	cmp.w	lr, #25
   bcb66:	d804      	bhi.n	bcb72 <_strtol_l.constprop.0+0xc6>
   bcb68:	3c57      	subs	r4, #87	; 0x57
   bcb6a:	e7db      	b.n	bcb24 <_strtol_l.constprop.0+0x78>
   bcb6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bcb70:	e7e6      	b.n	bcb40 <_strtol_l.constprop.0+0x94>
   bcb72:	f1bc 0f00 	cmp.w	ip, #0
   bcb76:	da05      	bge.n	bcb84 <_strtol_l.constprop.0+0xd8>
   bcb78:	2322      	movs	r3, #34	; 0x22
   bcb7a:	6003      	str	r3, [r0, #0]
   bcb7c:	4646      	mov	r6, r8
   bcb7e:	b942      	cbnz	r2, bcb92 <_strtol_l.constprop.0+0xe6>
   bcb80:	4630      	mov	r0, r6
   bcb82:	e79e      	b.n	bcac2 <_strtol_l.constprop.0+0x16>
   bcb84:	b107      	cbz	r7, bcb88 <_strtol_l.constprop.0+0xdc>
   bcb86:	4276      	negs	r6, r6
   bcb88:	2a00      	cmp	r2, #0
   bcb8a:	d0f9      	beq.n	bcb80 <_strtol_l.constprop.0+0xd4>
   bcb8c:	f1bc 0f00 	cmp.w	ip, #0
   bcb90:	d000      	beq.n	bcb94 <_strtol_l.constprop.0+0xe8>
   bcb92:	1e69      	subs	r1, r5, #1
   bcb94:	6011      	str	r1, [r2, #0]
   bcb96:	e7f3      	b.n	bcb80 <_strtol_l.constprop.0+0xd4>
   bcb98:	2430      	movs	r4, #48	; 0x30
   bcb9a:	2b00      	cmp	r3, #0
   bcb9c:	d1b1      	bne.n	bcb02 <_strtol_l.constprop.0+0x56>
   bcb9e:	2308      	movs	r3, #8
   bcba0:	e7af      	b.n	bcb02 <_strtol_l.constprop.0+0x56>
   bcba2:	2c30      	cmp	r4, #48	; 0x30
   bcba4:	d0a5      	beq.n	bcaf2 <_strtol_l.constprop.0+0x46>
   bcba6:	230a      	movs	r3, #10
   bcba8:	e7ab      	b.n	bcb02 <_strtol_l.constprop.0+0x56>
   bcbaa:	bf00      	nop
   bcbac:	000bea7c 	.word	0x000bea7c

000bcbb0 <strtol>:
   bcbb0:	4613      	mov	r3, r2
   bcbb2:	460a      	mov	r2, r1
   bcbb4:	4601      	mov	r1, r0
   bcbb6:	4802      	ldr	r0, [pc, #8]	; (bcbc0 <strtol+0x10>)
   bcbb8:	6800      	ldr	r0, [r0, #0]
   bcbba:	f7ff bf77 	b.w	bcaac <_strtol_l.constprop.0>
   bcbbe:	bf00      	nop
   bcbc0:	2003e13c 	.word	0x2003e13c

000bcbc4 <__register_exitproc>:
   bcbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcbc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcc84 <__register_exitproc+0xc0>
   bcbcc:	4606      	mov	r6, r0
   bcbce:	f8d8 0000 	ldr.w	r0, [r8]
   bcbd2:	461f      	mov	r7, r3
   bcbd4:	460d      	mov	r5, r1
   bcbd6:	4691      	mov	r9, r2
   bcbd8:	f000 fbc6 	bl	bd368 <__retarget_lock_acquire_recursive>
   bcbdc:	4b25      	ldr	r3, [pc, #148]	; (bcc74 <__register_exitproc+0xb0>)
   bcbde:	681c      	ldr	r4, [r3, #0]
   bcbe0:	b934      	cbnz	r4, bcbf0 <__register_exitproc+0x2c>
   bcbe2:	4c25      	ldr	r4, [pc, #148]	; (bcc78 <__register_exitproc+0xb4>)
   bcbe4:	601c      	str	r4, [r3, #0]
   bcbe6:	4b25      	ldr	r3, [pc, #148]	; (bcc7c <__register_exitproc+0xb8>)
   bcbe8:	b113      	cbz	r3, bcbf0 <__register_exitproc+0x2c>
   bcbea:	681b      	ldr	r3, [r3, #0]
   bcbec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcbf0:	6863      	ldr	r3, [r4, #4]
   bcbf2:	2b1f      	cmp	r3, #31
   bcbf4:	dd07      	ble.n	bcc06 <__register_exitproc+0x42>
   bcbf6:	f8d8 0000 	ldr.w	r0, [r8]
   bcbfa:	f000 fbb7 	bl	bd36c <__retarget_lock_release_recursive>
   bcbfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bcc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcc06:	b34e      	cbz	r6, bcc5c <__register_exitproc+0x98>
   bcc08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcc0c:	b988      	cbnz	r0, bcc32 <__register_exitproc+0x6e>
   bcc0e:	4b1c      	ldr	r3, [pc, #112]	; (bcc80 <__register_exitproc+0xbc>)
   bcc10:	b923      	cbnz	r3, bcc1c <__register_exitproc+0x58>
   bcc12:	f8d8 0000 	ldr.w	r0, [r8]
   bcc16:	f000 fba8 	bl	bd36a <__retarget_lock_release>
   bcc1a:	e7f0      	b.n	bcbfe <__register_exitproc+0x3a>
   bcc1c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcc20:	f7fa fcee 	bl	b7600 <malloc>
   bcc24:	2800      	cmp	r0, #0
   bcc26:	d0f4      	beq.n	bcc12 <__register_exitproc+0x4e>
   bcc28:	2300      	movs	r3, #0
   bcc2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcc2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcc32:	6863      	ldr	r3, [r4, #4]
   bcc34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcc38:	2201      	movs	r2, #1
   bcc3a:	409a      	lsls	r2, r3
   bcc3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcc40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcc44:	4313      	orrs	r3, r2
   bcc46:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcc4a:	2e02      	cmp	r6, #2
   bcc4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcc50:	bf02      	ittt	eq
   bcc52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcc56:	4313      	orreq	r3, r2
   bcc58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcc5c:	6863      	ldr	r3, [r4, #4]
   bcc5e:	f8d8 0000 	ldr.w	r0, [r8]
   bcc62:	1c5a      	adds	r2, r3, #1
   bcc64:	3302      	adds	r3, #2
   bcc66:	6062      	str	r2, [r4, #4]
   bcc68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcc6c:	f000 fb7e 	bl	bd36c <__retarget_lock_release_recursive>
   bcc70:	2000      	movs	r0, #0
   bcc72:	e7c6      	b.n	bcc02 <__register_exitproc+0x3e>
   bcc74:	2003e7ec 	.word	0x2003e7ec
   bcc78:	2003e760 	.word	0x2003e760
   bcc7c:	00000000 	.word	0x00000000
   bcc80:	000b7601 	.word	0x000b7601
   bcc84:	2003e1a0 	.word	0x2003e1a0

000bcc88 <rshift>:
   bcc88:	6903      	ldr	r3, [r0, #16]
   bcc8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bcc8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcc92:	ea4f 1261 	mov.w	r2, r1, asr #5
   bcc96:	f100 0414 	add.w	r4, r0, #20
   bcc9a:	dd45      	ble.n	bcd28 <rshift+0xa0>
   bcc9c:	f011 011f 	ands.w	r1, r1, #31
   bcca0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcca4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bcca8:	d10c      	bne.n	bccc4 <rshift+0x3c>
   bccaa:	f100 0710 	add.w	r7, r0, #16
   bccae:	4629      	mov	r1, r5
   bccb0:	42b1      	cmp	r1, r6
   bccb2:	d334      	bcc.n	bcd1e <rshift+0x96>
   bccb4:	1a9b      	subs	r3, r3, r2
   bccb6:	009b      	lsls	r3, r3, #2
   bccb8:	1eea      	subs	r2, r5, #3
   bccba:	4296      	cmp	r6, r2
   bccbc:	bf38      	it	cc
   bccbe:	2300      	movcc	r3, #0
   bccc0:	4423      	add	r3, r4
   bccc2:	e015      	b.n	bccf0 <rshift+0x68>
   bccc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bccc8:	f1c1 0820 	rsb	r8, r1, #32
   bcccc:	40cf      	lsrs	r7, r1
   bccce:	f105 0e04 	add.w	lr, r5, #4
   bccd2:	46a1      	mov	r9, r4
   bccd4:	4576      	cmp	r6, lr
   bccd6:	46f4      	mov	ip, lr
   bccd8:	d815      	bhi.n	bcd06 <rshift+0x7e>
   bccda:	1a9a      	subs	r2, r3, r2
   bccdc:	0092      	lsls	r2, r2, #2
   bccde:	3a04      	subs	r2, #4
   bcce0:	3501      	adds	r5, #1
   bcce2:	42ae      	cmp	r6, r5
   bcce4:	bf38      	it	cc
   bcce6:	2200      	movcc	r2, #0
   bcce8:	18a3      	adds	r3, r4, r2
   bccea:	50a7      	str	r7, [r4, r2]
   bccec:	b107      	cbz	r7, bccf0 <rshift+0x68>
   bccee:	3304      	adds	r3, #4
   bccf0:	1b1a      	subs	r2, r3, r4
   bccf2:	42a3      	cmp	r3, r4
   bccf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bccf8:	bf08      	it	eq
   bccfa:	2300      	moveq	r3, #0
   bccfc:	6102      	str	r2, [r0, #16]
   bccfe:	bf08      	it	eq
   bcd00:	6143      	streq	r3, [r0, #20]
   bcd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcd06:	f8dc c000 	ldr.w	ip, [ip]
   bcd0a:	fa0c fc08 	lsl.w	ip, ip, r8
   bcd0e:	ea4c 0707 	orr.w	r7, ip, r7
   bcd12:	f849 7b04 	str.w	r7, [r9], #4
   bcd16:	f85e 7b04 	ldr.w	r7, [lr], #4
   bcd1a:	40cf      	lsrs	r7, r1
   bcd1c:	e7da      	b.n	bccd4 <rshift+0x4c>
   bcd1e:	f851 cb04 	ldr.w	ip, [r1], #4
   bcd22:	f847 cf04 	str.w	ip, [r7, #4]!
   bcd26:	e7c3      	b.n	bccb0 <rshift+0x28>
   bcd28:	4623      	mov	r3, r4
   bcd2a:	e7e1      	b.n	bccf0 <rshift+0x68>

000bcd2c <__hexdig_fun>:
   bcd2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bcd30:	2b09      	cmp	r3, #9
   bcd32:	d802      	bhi.n	bcd3a <__hexdig_fun+0xe>
   bcd34:	3820      	subs	r0, #32
   bcd36:	b2c0      	uxtb	r0, r0
   bcd38:	4770      	bx	lr
   bcd3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcd3e:	2b05      	cmp	r3, #5
   bcd40:	d801      	bhi.n	bcd46 <__hexdig_fun+0x1a>
   bcd42:	3847      	subs	r0, #71	; 0x47
   bcd44:	e7f7      	b.n	bcd36 <__hexdig_fun+0xa>
   bcd46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcd4a:	2b05      	cmp	r3, #5
   bcd4c:	d801      	bhi.n	bcd52 <__hexdig_fun+0x26>
   bcd4e:	3827      	subs	r0, #39	; 0x27
   bcd50:	e7f1      	b.n	bcd36 <__hexdig_fun+0xa>
   bcd52:	2000      	movs	r0, #0
   bcd54:	4770      	bx	lr
	...

000bcd58 <__gethex>:
   bcd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd5c:	ed2d 8b02 	vpush	{d8}
   bcd60:	b089      	sub	sp, #36	; 0x24
   bcd62:	ee08 0a10 	vmov	s16, r0
   bcd66:	9304      	str	r3, [sp, #16]
   bcd68:	4bb4      	ldr	r3, [pc, #720]	; (bd03c <__gethex+0x2e4>)
   bcd6a:	681b      	ldr	r3, [r3, #0]
   bcd6c:	9301      	str	r3, [sp, #4]
   bcd6e:	4618      	mov	r0, r3
   bcd70:	468b      	mov	fp, r1
   bcd72:	4690      	mov	r8, r2
   bcd74:	f7fe ffb5 	bl	bbce2 <strlen>
   bcd78:	9b01      	ldr	r3, [sp, #4]
   bcd7a:	f8db 2000 	ldr.w	r2, [fp]
   bcd7e:	4403      	add	r3, r0
   bcd80:	4682      	mov	sl, r0
   bcd82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcd86:	9305      	str	r3, [sp, #20]
   bcd88:	1c93      	adds	r3, r2, #2
   bcd8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcd8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcd92:	32fe      	adds	r2, #254	; 0xfe
   bcd94:	18d1      	adds	r1, r2, r3
   bcd96:	461f      	mov	r7, r3
   bcd98:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcd9c:	9100      	str	r1, [sp, #0]
   bcd9e:	2830      	cmp	r0, #48	; 0x30
   bcda0:	d0f8      	beq.n	bcd94 <__gethex+0x3c>
   bcda2:	f7ff ffc3 	bl	bcd2c <__hexdig_fun>
   bcda6:	4604      	mov	r4, r0
   bcda8:	2800      	cmp	r0, #0
   bcdaa:	d13a      	bne.n	bce22 <__gethex+0xca>
   bcdac:	9901      	ldr	r1, [sp, #4]
   bcdae:	4652      	mov	r2, sl
   bcdb0:	4638      	mov	r0, r7
   bcdb2:	f7fe ff9e 	bl	bbcf2 <strncmp>
   bcdb6:	4605      	mov	r5, r0
   bcdb8:	2800      	cmp	r0, #0
   bcdba:	d168      	bne.n	bce8e <__gethex+0x136>
   bcdbc:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcdc0:	eb07 060a 	add.w	r6, r7, sl
   bcdc4:	f7ff ffb2 	bl	bcd2c <__hexdig_fun>
   bcdc8:	2800      	cmp	r0, #0
   bcdca:	d062      	beq.n	bce92 <__gethex+0x13a>
   bcdcc:	4633      	mov	r3, r6
   bcdce:	7818      	ldrb	r0, [r3, #0]
   bcdd0:	2830      	cmp	r0, #48	; 0x30
   bcdd2:	461f      	mov	r7, r3
   bcdd4:	f103 0301 	add.w	r3, r3, #1
   bcdd8:	d0f9      	beq.n	bcdce <__gethex+0x76>
   bcdda:	f7ff ffa7 	bl	bcd2c <__hexdig_fun>
   bcdde:	2301      	movs	r3, #1
   bcde0:	fab0 f480 	clz	r4, r0
   bcde4:	0964      	lsrs	r4, r4, #5
   bcde6:	4635      	mov	r5, r6
   bcde8:	9300      	str	r3, [sp, #0]
   bcdea:	463a      	mov	r2, r7
   bcdec:	4616      	mov	r6, r2
   bcdee:	3201      	adds	r2, #1
   bcdf0:	7830      	ldrb	r0, [r6, #0]
   bcdf2:	f7ff ff9b 	bl	bcd2c <__hexdig_fun>
   bcdf6:	2800      	cmp	r0, #0
   bcdf8:	d1f8      	bne.n	bcdec <__gethex+0x94>
   bcdfa:	9901      	ldr	r1, [sp, #4]
   bcdfc:	4652      	mov	r2, sl
   bcdfe:	4630      	mov	r0, r6
   bce00:	f7fe ff77 	bl	bbcf2 <strncmp>
   bce04:	b980      	cbnz	r0, bce28 <__gethex+0xd0>
   bce06:	b94d      	cbnz	r5, bce1c <__gethex+0xc4>
   bce08:	eb06 050a 	add.w	r5, r6, sl
   bce0c:	462a      	mov	r2, r5
   bce0e:	4616      	mov	r6, r2
   bce10:	3201      	adds	r2, #1
   bce12:	7830      	ldrb	r0, [r6, #0]
   bce14:	f7ff ff8a 	bl	bcd2c <__hexdig_fun>
   bce18:	2800      	cmp	r0, #0
   bce1a:	d1f8      	bne.n	bce0e <__gethex+0xb6>
   bce1c:	1bad      	subs	r5, r5, r6
   bce1e:	00ad      	lsls	r5, r5, #2
   bce20:	e004      	b.n	bce2c <__gethex+0xd4>
   bce22:	2400      	movs	r4, #0
   bce24:	4625      	mov	r5, r4
   bce26:	e7e0      	b.n	bcdea <__gethex+0x92>
   bce28:	2d00      	cmp	r5, #0
   bce2a:	d1f7      	bne.n	bce1c <__gethex+0xc4>
   bce2c:	7833      	ldrb	r3, [r6, #0]
   bce2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bce32:	2b50      	cmp	r3, #80	; 0x50
   bce34:	d13b      	bne.n	bceae <__gethex+0x156>
   bce36:	7873      	ldrb	r3, [r6, #1]
   bce38:	2b2b      	cmp	r3, #43	; 0x2b
   bce3a:	d02c      	beq.n	bce96 <__gethex+0x13e>
   bce3c:	2b2d      	cmp	r3, #45	; 0x2d
   bce3e:	d02e      	beq.n	bce9e <__gethex+0x146>
   bce40:	1c71      	adds	r1, r6, #1
   bce42:	f04f 0900 	mov.w	r9, #0
   bce46:	7808      	ldrb	r0, [r1, #0]
   bce48:	f7ff ff70 	bl	bcd2c <__hexdig_fun>
   bce4c:	1e43      	subs	r3, r0, #1
   bce4e:	b2db      	uxtb	r3, r3
   bce50:	2b18      	cmp	r3, #24
   bce52:	d82c      	bhi.n	bceae <__gethex+0x156>
   bce54:	f1a0 0210 	sub.w	r2, r0, #16
   bce58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bce5c:	f7ff ff66 	bl	bcd2c <__hexdig_fun>
   bce60:	1e43      	subs	r3, r0, #1
   bce62:	b2db      	uxtb	r3, r3
   bce64:	2b18      	cmp	r3, #24
   bce66:	d91d      	bls.n	bcea4 <__gethex+0x14c>
   bce68:	f1b9 0f00 	cmp.w	r9, #0
   bce6c:	d000      	beq.n	bce70 <__gethex+0x118>
   bce6e:	4252      	negs	r2, r2
   bce70:	4415      	add	r5, r2
   bce72:	f8cb 1000 	str.w	r1, [fp]
   bce76:	b1e4      	cbz	r4, bceb2 <__gethex+0x15a>
   bce78:	9b00      	ldr	r3, [sp, #0]
   bce7a:	2b00      	cmp	r3, #0
   bce7c:	bf14      	ite	ne
   bce7e:	2700      	movne	r7, #0
   bce80:	2706      	moveq	r7, #6
   bce82:	4638      	mov	r0, r7
   bce84:	b009      	add	sp, #36	; 0x24
   bce86:	ecbd 8b02 	vpop	{d8}
   bce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bce8e:	463e      	mov	r6, r7
   bce90:	4625      	mov	r5, r4
   bce92:	2401      	movs	r4, #1
   bce94:	e7ca      	b.n	bce2c <__gethex+0xd4>
   bce96:	f04f 0900 	mov.w	r9, #0
   bce9a:	1cb1      	adds	r1, r6, #2
   bce9c:	e7d3      	b.n	bce46 <__gethex+0xee>
   bce9e:	f04f 0901 	mov.w	r9, #1
   bcea2:	e7fa      	b.n	bce9a <__gethex+0x142>
   bcea4:	230a      	movs	r3, #10
   bcea6:	fb03 0202 	mla	r2, r3, r2, r0
   bceaa:	3a10      	subs	r2, #16
   bceac:	e7d4      	b.n	bce58 <__gethex+0x100>
   bceae:	4631      	mov	r1, r6
   bceb0:	e7df      	b.n	bce72 <__gethex+0x11a>
   bceb2:	1bf3      	subs	r3, r6, r7
   bceb4:	3b01      	subs	r3, #1
   bceb6:	4621      	mov	r1, r4
   bceb8:	2b07      	cmp	r3, #7
   bceba:	dc0b      	bgt.n	bced4 <__gethex+0x17c>
   bcebc:	ee18 0a10 	vmov	r0, s16
   bcec0:	f000 fa68 	bl	bd394 <_Balloc>
   bcec4:	4604      	mov	r4, r0
   bcec6:	b940      	cbnz	r0, bceda <__gethex+0x182>
   bcec8:	4b5d      	ldr	r3, [pc, #372]	; (bd040 <__gethex+0x2e8>)
   bceca:	4602      	mov	r2, r0
   bcecc:	21de      	movs	r1, #222	; 0xde
   bcece:	485d      	ldr	r0, [pc, #372]	; (bd044 <__gethex+0x2ec>)
   bced0:	f7fa fbde 	bl	b7690 <__assert_func>
   bced4:	3101      	adds	r1, #1
   bced6:	105b      	asrs	r3, r3, #1
   bced8:	e7ee      	b.n	bceb8 <__gethex+0x160>
   bceda:	f100 0914 	add.w	r9, r0, #20
   bcede:	f04f 0b00 	mov.w	fp, #0
   bcee2:	f1ca 0301 	rsb	r3, sl, #1
   bcee6:	f8cd 9008 	str.w	r9, [sp, #8]
   bceea:	f8cd b000 	str.w	fp, [sp]
   bceee:	9306      	str	r3, [sp, #24]
   bcef0:	42b7      	cmp	r7, r6
   bcef2:	d340      	bcc.n	bcf76 <__gethex+0x21e>
   bcef4:	9802      	ldr	r0, [sp, #8]
   bcef6:	9b00      	ldr	r3, [sp, #0]
   bcef8:	f840 3b04 	str.w	r3, [r0], #4
   bcefc:	eba0 0009 	sub.w	r0, r0, r9
   bcf00:	1080      	asrs	r0, r0, #2
   bcf02:	0146      	lsls	r6, r0, #5
   bcf04:	6120      	str	r0, [r4, #16]
   bcf06:	4618      	mov	r0, r3
   bcf08:	f000 fb36 	bl	bd578 <__hi0bits>
   bcf0c:	1a30      	subs	r0, r6, r0
   bcf0e:	f8d8 6000 	ldr.w	r6, [r8]
   bcf12:	42b0      	cmp	r0, r6
   bcf14:	dd63      	ble.n	bcfde <__gethex+0x286>
   bcf16:	1b87      	subs	r7, r0, r6
   bcf18:	4639      	mov	r1, r7
   bcf1a:	4620      	mov	r0, r4
   bcf1c:	f000 feda 	bl	bdcd4 <__any_on>
   bcf20:	4682      	mov	sl, r0
   bcf22:	b1a8      	cbz	r0, bcf50 <__gethex+0x1f8>
   bcf24:	1e7b      	subs	r3, r7, #1
   bcf26:	1159      	asrs	r1, r3, #5
   bcf28:	f003 021f 	and.w	r2, r3, #31
   bcf2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bcf30:	f04f 0a01 	mov.w	sl, #1
   bcf34:	fa0a f202 	lsl.w	r2, sl, r2
   bcf38:	420a      	tst	r2, r1
   bcf3a:	d009      	beq.n	bcf50 <__gethex+0x1f8>
   bcf3c:	4553      	cmp	r3, sl
   bcf3e:	dd05      	ble.n	bcf4c <__gethex+0x1f4>
   bcf40:	1eb9      	subs	r1, r7, #2
   bcf42:	4620      	mov	r0, r4
   bcf44:	f000 fec6 	bl	bdcd4 <__any_on>
   bcf48:	2800      	cmp	r0, #0
   bcf4a:	d145      	bne.n	bcfd8 <__gethex+0x280>
   bcf4c:	f04f 0a02 	mov.w	sl, #2
   bcf50:	4639      	mov	r1, r7
   bcf52:	4620      	mov	r0, r4
   bcf54:	f7ff fe98 	bl	bcc88 <rshift>
   bcf58:	443d      	add	r5, r7
   bcf5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcf5e:	42ab      	cmp	r3, r5
   bcf60:	da4c      	bge.n	bcffc <__gethex+0x2a4>
   bcf62:	ee18 0a10 	vmov	r0, s16
   bcf66:	4621      	mov	r1, r4
   bcf68:	f000 fa54 	bl	bd414 <_Bfree>
   bcf6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcf6e:	2300      	movs	r3, #0
   bcf70:	6013      	str	r3, [r2, #0]
   bcf72:	27a3      	movs	r7, #163	; 0xa3
   bcf74:	e785      	b.n	bce82 <__gethex+0x12a>
   bcf76:	1e73      	subs	r3, r6, #1
   bcf78:	9a05      	ldr	r2, [sp, #20]
   bcf7a:	9303      	str	r3, [sp, #12]
   bcf7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bcf80:	4293      	cmp	r3, r2
   bcf82:	d019      	beq.n	bcfb8 <__gethex+0x260>
   bcf84:	f1bb 0f20 	cmp.w	fp, #32
   bcf88:	d107      	bne.n	bcf9a <__gethex+0x242>
   bcf8a:	9b02      	ldr	r3, [sp, #8]
   bcf8c:	9a00      	ldr	r2, [sp, #0]
   bcf8e:	f843 2b04 	str.w	r2, [r3], #4
   bcf92:	9302      	str	r3, [sp, #8]
   bcf94:	2300      	movs	r3, #0
   bcf96:	9300      	str	r3, [sp, #0]
   bcf98:	469b      	mov	fp, r3
   bcf9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bcf9e:	f7ff fec5 	bl	bcd2c <__hexdig_fun>
   bcfa2:	9b00      	ldr	r3, [sp, #0]
   bcfa4:	f000 000f 	and.w	r0, r0, #15
   bcfa8:	fa00 f00b 	lsl.w	r0, r0, fp
   bcfac:	4303      	orrs	r3, r0
   bcfae:	9300      	str	r3, [sp, #0]
   bcfb0:	f10b 0b04 	add.w	fp, fp, #4
   bcfb4:	9b03      	ldr	r3, [sp, #12]
   bcfb6:	e00d      	b.n	bcfd4 <__gethex+0x27c>
   bcfb8:	9b03      	ldr	r3, [sp, #12]
   bcfba:	9a06      	ldr	r2, [sp, #24]
   bcfbc:	4413      	add	r3, r2
   bcfbe:	42bb      	cmp	r3, r7
   bcfc0:	d3e0      	bcc.n	bcf84 <__gethex+0x22c>
   bcfc2:	4618      	mov	r0, r3
   bcfc4:	9901      	ldr	r1, [sp, #4]
   bcfc6:	9307      	str	r3, [sp, #28]
   bcfc8:	4652      	mov	r2, sl
   bcfca:	f7fe fe92 	bl	bbcf2 <strncmp>
   bcfce:	9b07      	ldr	r3, [sp, #28]
   bcfd0:	2800      	cmp	r0, #0
   bcfd2:	d1d7      	bne.n	bcf84 <__gethex+0x22c>
   bcfd4:	461e      	mov	r6, r3
   bcfd6:	e78b      	b.n	bcef0 <__gethex+0x198>
   bcfd8:	f04f 0a03 	mov.w	sl, #3
   bcfdc:	e7b8      	b.n	bcf50 <__gethex+0x1f8>
   bcfde:	da0a      	bge.n	bcff6 <__gethex+0x29e>
   bcfe0:	1a37      	subs	r7, r6, r0
   bcfe2:	4621      	mov	r1, r4
   bcfe4:	ee18 0a10 	vmov	r0, s16
   bcfe8:	463a      	mov	r2, r7
   bcfea:	f000 fc2f 	bl	bd84c <__lshift>
   bcfee:	1bed      	subs	r5, r5, r7
   bcff0:	4604      	mov	r4, r0
   bcff2:	f100 0914 	add.w	r9, r0, #20
   bcff6:	f04f 0a00 	mov.w	sl, #0
   bcffa:	e7ae      	b.n	bcf5a <__gethex+0x202>
   bcffc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd000:	42a8      	cmp	r0, r5
   bd002:	dd72      	ble.n	bd0ea <__gethex+0x392>
   bd004:	1b45      	subs	r5, r0, r5
   bd006:	42ae      	cmp	r6, r5
   bd008:	dc36      	bgt.n	bd078 <__gethex+0x320>
   bd00a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd00e:	2b02      	cmp	r3, #2
   bd010:	d02a      	beq.n	bd068 <__gethex+0x310>
   bd012:	2b03      	cmp	r3, #3
   bd014:	d02c      	beq.n	bd070 <__gethex+0x318>
   bd016:	2b01      	cmp	r3, #1
   bd018:	d11c      	bne.n	bd054 <__gethex+0x2fc>
   bd01a:	42ae      	cmp	r6, r5
   bd01c:	d11a      	bne.n	bd054 <__gethex+0x2fc>
   bd01e:	2e01      	cmp	r6, #1
   bd020:	d112      	bne.n	bd048 <__gethex+0x2f0>
   bd022:	9a04      	ldr	r2, [sp, #16]
   bd024:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd028:	6013      	str	r3, [r2, #0]
   bd02a:	2301      	movs	r3, #1
   bd02c:	6123      	str	r3, [r4, #16]
   bd02e:	f8c9 3000 	str.w	r3, [r9]
   bd032:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd034:	2762      	movs	r7, #98	; 0x62
   bd036:	601c      	str	r4, [r3, #0]
   bd038:	e723      	b.n	bce82 <__gethex+0x12a>
   bd03a:	bf00      	nop
   bd03c:	000bebf0 	.word	0x000bebf0
   bd040:	000beb7c 	.word	0x000beb7c
   bd044:	000beb8d 	.word	0x000beb8d
   bd048:	1e71      	subs	r1, r6, #1
   bd04a:	4620      	mov	r0, r4
   bd04c:	f000 fe42 	bl	bdcd4 <__any_on>
   bd050:	2800      	cmp	r0, #0
   bd052:	d1e6      	bne.n	bd022 <__gethex+0x2ca>
   bd054:	ee18 0a10 	vmov	r0, s16
   bd058:	4621      	mov	r1, r4
   bd05a:	f000 f9db 	bl	bd414 <_Bfree>
   bd05e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd060:	2300      	movs	r3, #0
   bd062:	6013      	str	r3, [r2, #0]
   bd064:	2750      	movs	r7, #80	; 0x50
   bd066:	e70c      	b.n	bce82 <__gethex+0x12a>
   bd068:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd06a:	2b00      	cmp	r3, #0
   bd06c:	d1f2      	bne.n	bd054 <__gethex+0x2fc>
   bd06e:	e7d8      	b.n	bd022 <__gethex+0x2ca>
   bd070:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd072:	2b00      	cmp	r3, #0
   bd074:	d1d5      	bne.n	bd022 <__gethex+0x2ca>
   bd076:	e7ed      	b.n	bd054 <__gethex+0x2fc>
   bd078:	1e6f      	subs	r7, r5, #1
   bd07a:	f1ba 0f00 	cmp.w	sl, #0
   bd07e:	d131      	bne.n	bd0e4 <__gethex+0x38c>
   bd080:	b127      	cbz	r7, bd08c <__gethex+0x334>
   bd082:	4639      	mov	r1, r7
   bd084:	4620      	mov	r0, r4
   bd086:	f000 fe25 	bl	bdcd4 <__any_on>
   bd08a:	4682      	mov	sl, r0
   bd08c:	117b      	asrs	r3, r7, #5
   bd08e:	2101      	movs	r1, #1
   bd090:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd094:	f007 071f 	and.w	r7, r7, #31
   bd098:	fa01 f707 	lsl.w	r7, r1, r7
   bd09c:	421f      	tst	r7, r3
   bd09e:	4629      	mov	r1, r5
   bd0a0:	4620      	mov	r0, r4
   bd0a2:	bf18      	it	ne
   bd0a4:	f04a 0a02 	orrne.w	sl, sl, #2
   bd0a8:	1b76      	subs	r6, r6, r5
   bd0aa:	f7ff fded 	bl	bcc88 <rshift>
   bd0ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd0b2:	2702      	movs	r7, #2
   bd0b4:	f1ba 0f00 	cmp.w	sl, #0
   bd0b8:	d048      	beq.n	bd14c <__gethex+0x3f4>
   bd0ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd0be:	2b02      	cmp	r3, #2
   bd0c0:	d015      	beq.n	bd0ee <__gethex+0x396>
   bd0c2:	2b03      	cmp	r3, #3
   bd0c4:	d017      	beq.n	bd0f6 <__gethex+0x39e>
   bd0c6:	2b01      	cmp	r3, #1
   bd0c8:	d109      	bne.n	bd0de <__gethex+0x386>
   bd0ca:	f01a 0f02 	tst.w	sl, #2
   bd0ce:	d006      	beq.n	bd0de <__gethex+0x386>
   bd0d0:	f8d9 0000 	ldr.w	r0, [r9]
   bd0d4:	ea4a 0a00 	orr.w	sl, sl, r0
   bd0d8:	f01a 0f01 	tst.w	sl, #1
   bd0dc:	d10e      	bne.n	bd0fc <__gethex+0x3a4>
   bd0de:	f047 0710 	orr.w	r7, r7, #16
   bd0e2:	e033      	b.n	bd14c <__gethex+0x3f4>
   bd0e4:	f04f 0a01 	mov.w	sl, #1
   bd0e8:	e7d0      	b.n	bd08c <__gethex+0x334>
   bd0ea:	2701      	movs	r7, #1
   bd0ec:	e7e2      	b.n	bd0b4 <__gethex+0x35c>
   bd0ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0f0:	f1c3 0301 	rsb	r3, r3, #1
   bd0f4:	9315      	str	r3, [sp, #84]	; 0x54
   bd0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0f8:	2b00      	cmp	r3, #0
   bd0fa:	d0f0      	beq.n	bd0de <__gethex+0x386>
   bd0fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd100:	f104 0314 	add.w	r3, r4, #20
   bd104:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd108:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd10c:	f04f 0c00 	mov.w	ip, #0
   bd110:	4618      	mov	r0, r3
   bd112:	f853 2b04 	ldr.w	r2, [r3], #4
   bd116:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd11a:	d01c      	beq.n	bd156 <__gethex+0x3fe>
   bd11c:	3201      	adds	r2, #1
   bd11e:	6002      	str	r2, [r0, #0]
   bd120:	2f02      	cmp	r7, #2
   bd122:	f104 0314 	add.w	r3, r4, #20
   bd126:	d13f      	bne.n	bd1a8 <__gethex+0x450>
   bd128:	f8d8 2000 	ldr.w	r2, [r8]
   bd12c:	3a01      	subs	r2, #1
   bd12e:	42b2      	cmp	r2, r6
   bd130:	d10a      	bne.n	bd148 <__gethex+0x3f0>
   bd132:	1171      	asrs	r1, r6, #5
   bd134:	2201      	movs	r2, #1
   bd136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd13a:	f006 061f 	and.w	r6, r6, #31
   bd13e:	fa02 f606 	lsl.w	r6, r2, r6
   bd142:	421e      	tst	r6, r3
   bd144:	bf18      	it	ne
   bd146:	4617      	movne	r7, r2
   bd148:	f047 0720 	orr.w	r7, r7, #32
   bd14c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd14e:	601c      	str	r4, [r3, #0]
   bd150:	9b04      	ldr	r3, [sp, #16]
   bd152:	601d      	str	r5, [r3, #0]
   bd154:	e695      	b.n	bce82 <__gethex+0x12a>
   bd156:	4299      	cmp	r1, r3
   bd158:	f843 cc04 	str.w	ip, [r3, #-4]
   bd15c:	d8d8      	bhi.n	bd110 <__gethex+0x3b8>
   bd15e:	68a3      	ldr	r3, [r4, #8]
   bd160:	459b      	cmp	fp, r3
   bd162:	db19      	blt.n	bd198 <__gethex+0x440>
   bd164:	6861      	ldr	r1, [r4, #4]
   bd166:	ee18 0a10 	vmov	r0, s16
   bd16a:	3101      	adds	r1, #1
   bd16c:	f000 f912 	bl	bd394 <_Balloc>
   bd170:	4681      	mov	r9, r0
   bd172:	b918      	cbnz	r0, bd17c <__gethex+0x424>
   bd174:	4b1a      	ldr	r3, [pc, #104]	; (bd1e0 <__gethex+0x488>)
   bd176:	4602      	mov	r2, r0
   bd178:	2184      	movs	r1, #132	; 0x84
   bd17a:	e6a8      	b.n	bcece <__gethex+0x176>
   bd17c:	6922      	ldr	r2, [r4, #16]
   bd17e:	3202      	adds	r2, #2
   bd180:	f104 010c 	add.w	r1, r4, #12
   bd184:	0092      	lsls	r2, r2, #2
   bd186:	300c      	adds	r0, #12
   bd188:	f7fe fd06 	bl	bbb98 <memcpy>
   bd18c:	4621      	mov	r1, r4
   bd18e:	ee18 0a10 	vmov	r0, s16
   bd192:	f000 f93f 	bl	bd414 <_Bfree>
   bd196:	464c      	mov	r4, r9
   bd198:	6923      	ldr	r3, [r4, #16]
   bd19a:	1c5a      	adds	r2, r3, #1
   bd19c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd1a0:	6122      	str	r2, [r4, #16]
   bd1a2:	2201      	movs	r2, #1
   bd1a4:	615a      	str	r2, [r3, #20]
   bd1a6:	e7bb      	b.n	bd120 <__gethex+0x3c8>
   bd1a8:	6922      	ldr	r2, [r4, #16]
   bd1aa:	455a      	cmp	r2, fp
   bd1ac:	dd0b      	ble.n	bd1c6 <__gethex+0x46e>
   bd1ae:	2101      	movs	r1, #1
   bd1b0:	4620      	mov	r0, r4
   bd1b2:	f7ff fd69 	bl	bcc88 <rshift>
   bd1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd1ba:	3501      	adds	r5, #1
   bd1bc:	42ab      	cmp	r3, r5
   bd1be:	f6ff aed0 	blt.w	bcf62 <__gethex+0x20a>
   bd1c2:	2701      	movs	r7, #1
   bd1c4:	e7c0      	b.n	bd148 <__gethex+0x3f0>
   bd1c6:	f016 061f 	ands.w	r6, r6, #31
   bd1ca:	d0fa      	beq.n	bd1c2 <__gethex+0x46a>
   bd1cc:	4453      	add	r3, sl
   bd1ce:	f1c6 0620 	rsb	r6, r6, #32
   bd1d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd1d6:	f000 f9cf 	bl	bd578 <__hi0bits>
   bd1da:	42b0      	cmp	r0, r6
   bd1dc:	dbe7      	blt.n	bd1ae <__gethex+0x456>
   bd1de:	e7f0      	b.n	bd1c2 <__gethex+0x46a>
   bd1e0:	000beb7c 	.word	0x000beb7c

000bd1e4 <L_shift>:
   bd1e4:	f1c2 0208 	rsb	r2, r2, #8
   bd1e8:	0092      	lsls	r2, r2, #2
   bd1ea:	b570      	push	{r4, r5, r6, lr}
   bd1ec:	f1c2 0620 	rsb	r6, r2, #32
   bd1f0:	6843      	ldr	r3, [r0, #4]
   bd1f2:	6804      	ldr	r4, [r0, #0]
   bd1f4:	fa03 f506 	lsl.w	r5, r3, r6
   bd1f8:	432c      	orrs	r4, r5
   bd1fa:	40d3      	lsrs	r3, r2
   bd1fc:	6004      	str	r4, [r0, #0]
   bd1fe:	f840 3f04 	str.w	r3, [r0, #4]!
   bd202:	4288      	cmp	r0, r1
   bd204:	d3f4      	bcc.n	bd1f0 <L_shift+0xc>
   bd206:	bd70      	pop	{r4, r5, r6, pc}

000bd208 <__match>:
   bd208:	b530      	push	{r4, r5, lr}
   bd20a:	6803      	ldr	r3, [r0, #0]
   bd20c:	3301      	adds	r3, #1
   bd20e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd212:	b914      	cbnz	r4, bd21a <__match+0x12>
   bd214:	6003      	str	r3, [r0, #0]
   bd216:	2001      	movs	r0, #1
   bd218:	bd30      	pop	{r4, r5, pc}
   bd21a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd21e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd222:	2d19      	cmp	r5, #25
   bd224:	bf98      	it	ls
   bd226:	3220      	addls	r2, #32
   bd228:	42a2      	cmp	r2, r4
   bd22a:	d0f0      	beq.n	bd20e <__match+0x6>
   bd22c:	2000      	movs	r0, #0
   bd22e:	e7f3      	b.n	bd218 <__match+0x10>

000bd230 <__hexnan>:
   bd230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd234:	680b      	ldr	r3, [r1, #0]
   bd236:	115e      	asrs	r6, r3, #5
   bd238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd23c:	f013 031f 	ands.w	r3, r3, #31
   bd240:	b087      	sub	sp, #28
   bd242:	bf18      	it	ne
   bd244:	3604      	addne	r6, #4
   bd246:	2500      	movs	r5, #0
   bd248:	1f37      	subs	r7, r6, #4
   bd24a:	4690      	mov	r8, r2
   bd24c:	6802      	ldr	r2, [r0, #0]
   bd24e:	9301      	str	r3, [sp, #4]
   bd250:	4682      	mov	sl, r0
   bd252:	f846 5c04 	str.w	r5, [r6, #-4]
   bd256:	46b9      	mov	r9, r7
   bd258:	463c      	mov	r4, r7
   bd25a:	9502      	str	r5, [sp, #8]
   bd25c:	46ab      	mov	fp, r5
   bd25e:	7851      	ldrb	r1, [r2, #1]
   bd260:	1c53      	adds	r3, r2, #1
   bd262:	9303      	str	r3, [sp, #12]
   bd264:	b341      	cbz	r1, bd2b8 <__hexnan+0x88>
   bd266:	4608      	mov	r0, r1
   bd268:	9205      	str	r2, [sp, #20]
   bd26a:	9104      	str	r1, [sp, #16]
   bd26c:	f7ff fd5e 	bl	bcd2c <__hexdig_fun>
   bd270:	2800      	cmp	r0, #0
   bd272:	d14f      	bne.n	bd314 <__hexnan+0xe4>
   bd274:	9904      	ldr	r1, [sp, #16]
   bd276:	9a05      	ldr	r2, [sp, #20]
   bd278:	2920      	cmp	r1, #32
   bd27a:	d818      	bhi.n	bd2ae <__hexnan+0x7e>
   bd27c:	9b02      	ldr	r3, [sp, #8]
   bd27e:	459b      	cmp	fp, r3
   bd280:	dd13      	ble.n	bd2aa <__hexnan+0x7a>
   bd282:	454c      	cmp	r4, r9
   bd284:	d206      	bcs.n	bd294 <__hexnan+0x64>
   bd286:	2d07      	cmp	r5, #7
   bd288:	dc04      	bgt.n	bd294 <__hexnan+0x64>
   bd28a:	462a      	mov	r2, r5
   bd28c:	4649      	mov	r1, r9
   bd28e:	4620      	mov	r0, r4
   bd290:	f7ff ffa8 	bl	bd1e4 <L_shift>
   bd294:	4544      	cmp	r4, r8
   bd296:	d950      	bls.n	bd33a <__hexnan+0x10a>
   bd298:	2300      	movs	r3, #0
   bd29a:	f1a4 0904 	sub.w	r9, r4, #4
   bd29e:	f844 3c04 	str.w	r3, [r4, #-4]
   bd2a2:	f8cd b008 	str.w	fp, [sp, #8]
   bd2a6:	464c      	mov	r4, r9
   bd2a8:	461d      	mov	r5, r3
   bd2aa:	9a03      	ldr	r2, [sp, #12]
   bd2ac:	e7d7      	b.n	bd25e <__hexnan+0x2e>
   bd2ae:	2929      	cmp	r1, #41	; 0x29
   bd2b0:	d156      	bne.n	bd360 <__hexnan+0x130>
   bd2b2:	3202      	adds	r2, #2
   bd2b4:	f8ca 2000 	str.w	r2, [sl]
   bd2b8:	f1bb 0f00 	cmp.w	fp, #0
   bd2bc:	d050      	beq.n	bd360 <__hexnan+0x130>
   bd2be:	454c      	cmp	r4, r9
   bd2c0:	d206      	bcs.n	bd2d0 <__hexnan+0xa0>
   bd2c2:	2d07      	cmp	r5, #7
   bd2c4:	dc04      	bgt.n	bd2d0 <__hexnan+0xa0>
   bd2c6:	462a      	mov	r2, r5
   bd2c8:	4649      	mov	r1, r9
   bd2ca:	4620      	mov	r0, r4
   bd2cc:	f7ff ff8a 	bl	bd1e4 <L_shift>
   bd2d0:	4544      	cmp	r4, r8
   bd2d2:	d934      	bls.n	bd33e <__hexnan+0x10e>
   bd2d4:	f1a8 0204 	sub.w	r2, r8, #4
   bd2d8:	4623      	mov	r3, r4
   bd2da:	f853 1b04 	ldr.w	r1, [r3], #4
   bd2de:	f842 1f04 	str.w	r1, [r2, #4]!
   bd2e2:	429f      	cmp	r7, r3
   bd2e4:	d2f9      	bcs.n	bd2da <__hexnan+0xaa>
   bd2e6:	1b3b      	subs	r3, r7, r4
   bd2e8:	f023 0303 	bic.w	r3, r3, #3
   bd2ec:	3304      	adds	r3, #4
   bd2ee:	3401      	adds	r4, #1
   bd2f0:	3e03      	subs	r6, #3
   bd2f2:	42b4      	cmp	r4, r6
   bd2f4:	bf88      	it	hi
   bd2f6:	2304      	movhi	r3, #4
   bd2f8:	4443      	add	r3, r8
   bd2fa:	2200      	movs	r2, #0
   bd2fc:	f843 2b04 	str.w	r2, [r3], #4
   bd300:	429f      	cmp	r7, r3
   bd302:	d2fb      	bcs.n	bd2fc <__hexnan+0xcc>
   bd304:	683b      	ldr	r3, [r7, #0]
   bd306:	b91b      	cbnz	r3, bd310 <__hexnan+0xe0>
   bd308:	4547      	cmp	r7, r8
   bd30a:	d127      	bne.n	bd35c <__hexnan+0x12c>
   bd30c:	2301      	movs	r3, #1
   bd30e:	603b      	str	r3, [r7, #0]
   bd310:	2005      	movs	r0, #5
   bd312:	e026      	b.n	bd362 <__hexnan+0x132>
   bd314:	3501      	adds	r5, #1
   bd316:	2d08      	cmp	r5, #8
   bd318:	f10b 0b01 	add.w	fp, fp, #1
   bd31c:	dd06      	ble.n	bd32c <__hexnan+0xfc>
   bd31e:	4544      	cmp	r4, r8
   bd320:	d9c3      	bls.n	bd2aa <__hexnan+0x7a>
   bd322:	2300      	movs	r3, #0
   bd324:	f844 3c04 	str.w	r3, [r4, #-4]
   bd328:	2501      	movs	r5, #1
   bd32a:	3c04      	subs	r4, #4
   bd32c:	6822      	ldr	r2, [r4, #0]
   bd32e:	f000 000f 	and.w	r0, r0, #15
   bd332:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd336:	6022      	str	r2, [r4, #0]
   bd338:	e7b7      	b.n	bd2aa <__hexnan+0x7a>
   bd33a:	2508      	movs	r5, #8
   bd33c:	e7b5      	b.n	bd2aa <__hexnan+0x7a>
   bd33e:	9b01      	ldr	r3, [sp, #4]
   bd340:	2b00      	cmp	r3, #0
   bd342:	d0df      	beq.n	bd304 <__hexnan+0xd4>
   bd344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd348:	f1c3 0320 	rsb	r3, r3, #32
   bd34c:	fa22 f303 	lsr.w	r3, r2, r3
   bd350:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd354:	401a      	ands	r2, r3
   bd356:	f846 2c04 	str.w	r2, [r6, #-4]
   bd35a:	e7d3      	b.n	bd304 <__hexnan+0xd4>
   bd35c:	3f04      	subs	r7, #4
   bd35e:	e7d1      	b.n	bd304 <__hexnan+0xd4>
   bd360:	2004      	movs	r0, #4
   bd362:	b007      	add	sp, #28
   bd364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd368 <__retarget_lock_acquire_recursive>:
   bd368:	4770      	bx	lr

000bd36a <__retarget_lock_release>:
   bd36a:	4770      	bx	lr

000bd36c <__retarget_lock_release_recursive>:
   bd36c:	4770      	bx	lr

000bd36e <__ascii_mbtowc>:
   bd36e:	b082      	sub	sp, #8
   bd370:	b901      	cbnz	r1, bd374 <__ascii_mbtowc+0x6>
   bd372:	a901      	add	r1, sp, #4
   bd374:	b142      	cbz	r2, bd388 <__ascii_mbtowc+0x1a>
   bd376:	b14b      	cbz	r3, bd38c <__ascii_mbtowc+0x1e>
   bd378:	7813      	ldrb	r3, [r2, #0]
   bd37a:	600b      	str	r3, [r1, #0]
   bd37c:	7812      	ldrb	r2, [r2, #0]
   bd37e:	1e10      	subs	r0, r2, #0
   bd380:	bf18      	it	ne
   bd382:	2001      	movne	r0, #1
   bd384:	b002      	add	sp, #8
   bd386:	4770      	bx	lr
   bd388:	4610      	mov	r0, r2
   bd38a:	e7fb      	b.n	bd384 <__ascii_mbtowc+0x16>
   bd38c:	f06f 0001 	mvn.w	r0, #1
   bd390:	e7f8      	b.n	bd384 <__ascii_mbtowc+0x16>
	...

000bd394 <_Balloc>:
   bd394:	b570      	push	{r4, r5, r6, lr}
   bd396:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd398:	4604      	mov	r4, r0
   bd39a:	460d      	mov	r5, r1
   bd39c:	b976      	cbnz	r6, bd3bc <_Balloc+0x28>
   bd39e:	2010      	movs	r0, #16
   bd3a0:	f7fa f92e 	bl	b7600 <malloc>
   bd3a4:	4602      	mov	r2, r0
   bd3a6:	6260      	str	r0, [r4, #36]	; 0x24
   bd3a8:	b920      	cbnz	r0, bd3b4 <_Balloc+0x20>
   bd3aa:	4b18      	ldr	r3, [pc, #96]	; (bd40c <_Balloc+0x78>)
   bd3ac:	4818      	ldr	r0, [pc, #96]	; (bd410 <_Balloc+0x7c>)
   bd3ae:	2166      	movs	r1, #102	; 0x66
   bd3b0:	f7fa f96e 	bl	b7690 <__assert_func>
   bd3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd3b8:	6006      	str	r6, [r0, #0]
   bd3ba:	60c6      	str	r6, [r0, #12]
   bd3bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd3be:	68f3      	ldr	r3, [r6, #12]
   bd3c0:	b183      	cbz	r3, bd3e4 <_Balloc+0x50>
   bd3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd3c4:	68db      	ldr	r3, [r3, #12]
   bd3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd3ca:	b9b8      	cbnz	r0, bd3fc <_Balloc+0x68>
   bd3cc:	2101      	movs	r1, #1
   bd3ce:	fa01 f605 	lsl.w	r6, r1, r5
   bd3d2:	1d72      	adds	r2, r6, #5
   bd3d4:	0092      	lsls	r2, r2, #2
   bd3d6:	4620      	mov	r0, r4
   bd3d8:	f000 fc9d 	bl	bdd16 <_calloc_r>
   bd3dc:	b160      	cbz	r0, bd3f8 <_Balloc+0x64>
   bd3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd3e2:	e00e      	b.n	bd402 <_Balloc+0x6e>
   bd3e4:	2221      	movs	r2, #33	; 0x21
   bd3e6:	2104      	movs	r1, #4
   bd3e8:	4620      	mov	r0, r4
   bd3ea:	f000 fc94 	bl	bdd16 <_calloc_r>
   bd3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd3f0:	60f0      	str	r0, [r6, #12]
   bd3f2:	68db      	ldr	r3, [r3, #12]
   bd3f4:	2b00      	cmp	r3, #0
   bd3f6:	d1e4      	bne.n	bd3c2 <_Balloc+0x2e>
   bd3f8:	2000      	movs	r0, #0
   bd3fa:	bd70      	pop	{r4, r5, r6, pc}
   bd3fc:	6802      	ldr	r2, [r0, #0]
   bd3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd402:	2300      	movs	r3, #0
   bd404:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd408:	e7f7      	b.n	bd3fa <_Balloc+0x66>
   bd40a:	bf00      	nop
   bd40c:	000be959 	.word	0x000be959
   bd410:	000bec02 	.word	0x000bec02

000bd414 <_Bfree>:
   bd414:	b570      	push	{r4, r5, r6, lr}
   bd416:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd418:	4605      	mov	r5, r0
   bd41a:	460c      	mov	r4, r1
   bd41c:	b976      	cbnz	r6, bd43c <_Bfree+0x28>
   bd41e:	2010      	movs	r0, #16
   bd420:	f7fa f8ee 	bl	b7600 <malloc>
   bd424:	4602      	mov	r2, r0
   bd426:	6268      	str	r0, [r5, #36]	; 0x24
   bd428:	b920      	cbnz	r0, bd434 <_Bfree+0x20>
   bd42a:	4b09      	ldr	r3, [pc, #36]	; (bd450 <_Bfree+0x3c>)
   bd42c:	4809      	ldr	r0, [pc, #36]	; (bd454 <_Bfree+0x40>)
   bd42e:	218a      	movs	r1, #138	; 0x8a
   bd430:	f7fa f92e 	bl	b7690 <__assert_func>
   bd434:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd438:	6006      	str	r6, [r0, #0]
   bd43a:	60c6      	str	r6, [r0, #12]
   bd43c:	b13c      	cbz	r4, bd44e <_Bfree+0x3a>
   bd43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd440:	6862      	ldr	r2, [r4, #4]
   bd442:	68db      	ldr	r3, [r3, #12]
   bd444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd448:	6021      	str	r1, [r4, #0]
   bd44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd44e:	bd70      	pop	{r4, r5, r6, pc}
   bd450:	000be959 	.word	0x000be959
   bd454:	000bec02 	.word	0x000bec02

000bd458 <__multadd>:
   bd458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd45c:	690d      	ldr	r5, [r1, #16]
   bd45e:	4607      	mov	r7, r0
   bd460:	460c      	mov	r4, r1
   bd462:	461e      	mov	r6, r3
   bd464:	f101 0c14 	add.w	ip, r1, #20
   bd468:	2000      	movs	r0, #0
   bd46a:	f8dc 3000 	ldr.w	r3, [ip]
   bd46e:	b299      	uxth	r1, r3
   bd470:	fb02 6101 	mla	r1, r2, r1, r6
   bd474:	0c1e      	lsrs	r6, r3, #16
   bd476:	0c0b      	lsrs	r3, r1, #16
   bd478:	fb02 3306 	mla	r3, r2, r6, r3
   bd47c:	b289      	uxth	r1, r1
   bd47e:	3001      	adds	r0, #1
   bd480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd484:	4285      	cmp	r5, r0
   bd486:	f84c 1b04 	str.w	r1, [ip], #4
   bd48a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd48e:	dcec      	bgt.n	bd46a <__multadd+0x12>
   bd490:	b30e      	cbz	r6, bd4d6 <__multadd+0x7e>
   bd492:	68a3      	ldr	r3, [r4, #8]
   bd494:	42ab      	cmp	r3, r5
   bd496:	dc19      	bgt.n	bd4cc <__multadd+0x74>
   bd498:	6861      	ldr	r1, [r4, #4]
   bd49a:	4638      	mov	r0, r7
   bd49c:	3101      	adds	r1, #1
   bd49e:	f7ff ff79 	bl	bd394 <_Balloc>
   bd4a2:	4680      	mov	r8, r0
   bd4a4:	b928      	cbnz	r0, bd4b2 <__multadd+0x5a>
   bd4a6:	4602      	mov	r2, r0
   bd4a8:	4b0c      	ldr	r3, [pc, #48]	; (bd4dc <__multadd+0x84>)
   bd4aa:	480d      	ldr	r0, [pc, #52]	; (bd4e0 <__multadd+0x88>)
   bd4ac:	21b5      	movs	r1, #181	; 0xb5
   bd4ae:	f7fa f8ef 	bl	b7690 <__assert_func>
   bd4b2:	6922      	ldr	r2, [r4, #16]
   bd4b4:	3202      	adds	r2, #2
   bd4b6:	f104 010c 	add.w	r1, r4, #12
   bd4ba:	0092      	lsls	r2, r2, #2
   bd4bc:	300c      	adds	r0, #12
   bd4be:	f7fe fb6b 	bl	bbb98 <memcpy>
   bd4c2:	4621      	mov	r1, r4
   bd4c4:	4638      	mov	r0, r7
   bd4c6:	f7ff ffa5 	bl	bd414 <_Bfree>
   bd4ca:	4644      	mov	r4, r8
   bd4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd4d0:	3501      	adds	r5, #1
   bd4d2:	615e      	str	r6, [r3, #20]
   bd4d4:	6125      	str	r5, [r4, #16]
   bd4d6:	4620      	mov	r0, r4
   bd4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd4dc:	000beb7c 	.word	0x000beb7c
   bd4e0:	000bec02 	.word	0x000bec02

000bd4e4 <__s2b>:
   bd4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd4e8:	460c      	mov	r4, r1
   bd4ea:	4615      	mov	r5, r2
   bd4ec:	461f      	mov	r7, r3
   bd4ee:	2209      	movs	r2, #9
   bd4f0:	3308      	adds	r3, #8
   bd4f2:	4606      	mov	r6, r0
   bd4f4:	fb93 f3f2 	sdiv	r3, r3, r2
   bd4f8:	2100      	movs	r1, #0
   bd4fa:	2201      	movs	r2, #1
   bd4fc:	429a      	cmp	r2, r3
   bd4fe:	db09      	blt.n	bd514 <__s2b+0x30>
   bd500:	4630      	mov	r0, r6
   bd502:	f7ff ff47 	bl	bd394 <_Balloc>
   bd506:	b940      	cbnz	r0, bd51a <__s2b+0x36>
   bd508:	4602      	mov	r2, r0
   bd50a:	4b19      	ldr	r3, [pc, #100]	; (bd570 <__s2b+0x8c>)
   bd50c:	4819      	ldr	r0, [pc, #100]	; (bd574 <__s2b+0x90>)
   bd50e:	21ce      	movs	r1, #206	; 0xce
   bd510:	f7fa f8be 	bl	b7690 <__assert_func>
   bd514:	0052      	lsls	r2, r2, #1
   bd516:	3101      	adds	r1, #1
   bd518:	e7f0      	b.n	bd4fc <__s2b+0x18>
   bd51a:	9b08      	ldr	r3, [sp, #32]
   bd51c:	6143      	str	r3, [r0, #20]
   bd51e:	2d09      	cmp	r5, #9
   bd520:	f04f 0301 	mov.w	r3, #1
   bd524:	6103      	str	r3, [r0, #16]
   bd526:	dd16      	ble.n	bd556 <__s2b+0x72>
   bd528:	f104 0909 	add.w	r9, r4, #9
   bd52c:	46c8      	mov	r8, r9
   bd52e:	442c      	add	r4, r5
   bd530:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd534:	4601      	mov	r1, r0
   bd536:	3b30      	subs	r3, #48	; 0x30
   bd538:	220a      	movs	r2, #10
   bd53a:	4630      	mov	r0, r6
   bd53c:	f7ff ff8c 	bl	bd458 <__multadd>
   bd540:	45a0      	cmp	r8, r4
   bd542:	d1f5      	bne.n	bd530 <__s2b+0x4c>
   bd544:	f1a5 0408 	sub.w	r4, r5, #8
   bd548:	444c      	add	r4, r9
   bd54a:	1b2d      	subs	r5, r5, r4
   bd54c:	1963      	adds	r3, r4, r5
   bd54e:	42bb      	cmp	r3, r7
   bd550:	db04      	blt.n	bd55c <__s2b+0x78>
   bd552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd556:	340a      	adds	r4, #10
   bd558:	2509      	movs	r5, #9
   bd55a:	e7f6      	b.n	bd54a <__s2b+0x66>
   bd55c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd560:	4601      	mov	r1, r0
   bd562:	3b30      	subs	r3, #48	; 0x30
   bd564:	220a      	movs	r2, #10
   bd566:	4630      	mov	r0, r6
   bd568:	f7ff ff76 	bl	bd458 <__multadd>
   bd56c:	e7ee      	b.n	bd54c <__s2b+0x68>
   bd56e:	bf00      	nop
   bd570:	000beb7c 	.word	0x000beb7c
   bd574:	000bec02 	.word	0x000bec02

000bd578 <__hi0bits>:
   bd578:	0c03      	lsrs	r3, r0, #16
   bd57a:	041b      	lsls	r3, r3, #16
   bd57c:	b9d3      	cbnz	r3, bd5b4 <__hi0bits+0x3c>
   bd57e:	0400      	lsls	r0, r0, #16
   bd580:	2310      	movs	r3, #16
   bd582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd586:	bf04      	itt	eq
   bd588:	0200      	lsleq	r0, r0, #8
   bd58a:	3308      	addeq	r3, #8
   bd58c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd590:	bf04      	itt	eq
   bd592:	0100      	lsleq	r0, r0, #4
   bd594:	3304      	addeq	r3, #4
   bd596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd59a:	bf04      	itt	eq
   bd59c:	0080      	lsleq	r0, r0, #2
   bd59e:	3302      	addeq	r3, #2
   bd5a0:	2800      	cmp	r0, #0
   bd5a2:	db05      	blt.n	bd5b0 <__hi0bits+0x38>
   bd5a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd5a8:	f103 0301 	add.w	r3, r3, #1
   bd5ac:	bf08      	it	eq
   bd5ae:	2320      	moveq	r3, #32
   bd5b0:	4618      	mov	r0, r3
   bd5b2:	4770      	bx	lr
   bd5b4:	2300      	movs	r3, #0
   bd5b6:	e7e4      	b.n	bd582 <__hi0bits+0xa>

000bd5b8 <__lo0bits>:
   bd5b8:	6803      	ldr	r3, [r0, #0]
   bd5ba:	f013 0207 	ands.w	r2, r3, #7
   bd5be:	4601      	mov	r1, r0
   bd5c0:	d00b      	beq.n	bd5da <__lo0bits+0x22>
   bd5c2:	07da      	lsls	r2, r3, #31
   bd5c4:	d423      	bmi.n	bd60e <__lo0bits+0x56>
   bd5c6:	0798      	lsls	r0, r3, #30
   bd5c8:	bf49      	itett	mi
   bd5ca:	085b      	lsrmi	r3, r3, #1
   bd5cc:	089b      	lsrpl	r3, r3, #2
   bd5ce:	2001      	movmi	r0, #1
   bd5d0:	600b      	strmi	r3, [r1, #0]
   bd5d2:	bf5c      	itt	pl
   bd5d4:	600b      	strpl	r3, [r1, #0]
   bd5d6:	2002      	movpl	r0, #2
   bd5d8:	4770      	bx	lr
   bd5da:	b298      	uxth	r0, r3
   bd5dc:	b9a8      	cbnz	r0, bd60a <__lo0bits+0x52>
   bd5de:	0c1b      	lsrs	r3, r3, #16
   bd5e0:	2010      	movs	r0, #16
   bd5e2:	b2da      	uxtb	r2, r3
   bd5e4:	b90a      	cbnz	r2, bd5ea <__lo0bits+0x32>
   bd5e6:	3008      	adds	r0, #8
   bd5e8:	0a1b      	lsrs	r3, r3, #8
   bd5ea:	071a      	lsls	r2, r3, #28
   bd5ec:	bf04      	itt	eq
   bd5ee:	091b      	lsreq	r3, r3, #4
   bd5f0:	3004      	addeq	r0, #4
   bd5f2:	079a      	lsls	r2, r3, #30
   bd5f4:	bf04      	itt	eq
   bd5f6:	089b      	lsreq	r3, r3, #2
   bd5f8:	3002      	addeq	r0, #2
   bd5fa:	07da      	lsls	r2, r3, #31
   bd5fc:	d403      	bmi.n	bd606 <__lo0bits+0x4e>
   bd5fe:	085b      	lsrs	r3, r3, #1
   bd600:	f100 0001 	add.w	r0, r0, #1
   bd604:	d005      	beq.n	bd612 <__lo0bits+0x5a>
   bd606:	600b      	str	r3, [r1, #0]
   bd608:	4770      	bx	lr
   bd60a:	4610      	mov	r0, r2
   bd60c:	e7e9      	b.n	bd5e2 <__lo0bits+0x2a>
   bd60e:	2000      	movs	r0, #0
   bd610:	4770      	bx	lr
   bd612:	2020      	movs	r0, #32
   bd614:	4770      	bx	lr
	...

000bd618 <__i2b>:
   bd618:	b510      	push	{r4, lr}
   bd61a:	460c      	mov	r4, r1
   bd61c:	2101      	movs	r1, #1
   bd61e:	f7ff feb9 	bl	bd394 <_Balloc>
   bd622:	4602      	mov	r2, r0
   bd624:	b928      	cbnz	r0, bd632 <__i2b+0x1a>
   bd626:	4b05      	ldr	r3, [pc, #20]	; (bd63c <__i2b+0x24>)
   bd628:	4805      	ldr	r0, [pc, #20]	; (bd640 <__i2b+0x28>)
   bd62a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd62e:	f7fa f82f 	bl	b7690 <__assert_func>
   bd632:	2301      	movs	r3, #1
   bd634:	6144      	str	r4, [r0, #20]
   bd636:	6103      	str	r3, [r0, #16]
   bd638:	bd10      	pop	{r4, pc}
   bd63a:	bf00      	nop
   bd63c:	000beb7c 	.word	0x000beb7c
   bd640:	000bec02 	.word	0x000bec02

000bd644 <__multiply>:
   bd644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd648:	4691      	mov	r9, r2
   bd64a:	690a      	ldr	r2, [r1, #16]
   bd64c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd650:	429a      	cmp	r2, r3
   bd652:	bfb8      	it	lt
   bd654:	460b      	movlt	r3, r1
   bd656:	460c      	mov	r4, r1
   bd658:	bfbc      	itt	lt
   bd65a:	464c      	movlt	r4, r9
   bd65c:	4699      	movlt	r9, r3
   bd65e:	6927      	ldr	r7, [r4, #16]
   bd660:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd664:	68a3      	ldr	r3, [r4, #8]
   bd666:	6861      	ldr	r1, [r4, #4]
   bd668:	eb07 060a 	add.w	r6, r7, sl
   bd66c:	42b3      	cmp	r3, r6
   bd66e:	b085      	sub	sp, #20
   bd670:	bfb8      	it	lt
   bd672:	3101      	addlt	r1, #1
   bd674:	f7ff fe8e 	bl	bd394 <_Balloc>
   bd678:	b930      	cbnz	r0, bd688 <__multiply+0x44>
   bd67a:	4602      	mov	r2, r0
   bd67c:	4b44      	ldr	r3, [pc, #272]	; (bd790 <__multiply+0x14c>)
   bd67e:	4845      	ldr	r0, [pc, #276]	; (bd794 <__multiply+0x150>)
   bd680:	f240 115d 	movw	r1, #349	; 0x15d
   bd684:	f7fa f804 	bl	b7690 <__assert_func>
   bd688:	f100 0514 	add.w	r5, r0, #20
   bd68c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd690:	462b      	mov	r3, r5
   bd692:	2200      	movs	r2, #0
   bd694:	4543      	cmp	r3, r8
   bd696:	d321      	bcc.n	bd6dc <__multiply+0x98>
   bd698:	f104 0314 	add.w	r3, r4, #20
   bd69c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd6a0:	f109 0314 	add.w	r3, r9, #20
   bd6a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd6a8:	9202      	str	r2, [sp, #8]
   bd6aa:	1b3a      	subs	r2, r7, r4
   bd6ac:	3a15      	subs	r2, #21
   bd6ae:	f022 0203 	bic.w	r2, r2, #3
   bd6b2:	3204      	adds	r2, #4
   bd6b4:	f104 0115 	add.w	r1, r4, #21
   bd6b8:	428f      	cmp	r7, r1
   bd6ba:	bf38      	it	cc
   bd6bc:	2204      	movcc	r2, #4
   bd6be:	9201      	str	r2, [sp, #4]
   bd6c0:	9a02      	ldr	r2, [sp, #8]
   bd6c2:	9303      	str	r3, [sp, #12]
   bd6c4:	429a      	cmp	r2, r3
   bd6c6:	d80c      	bhi.n	bd6e2 <__multiply+0x9e>
   bd6c8:	2e00      	cmp	r6, #0
   bd6ca:	dd03      	ble.n	bd6d4 <__multiply+0x90>
   bd6cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd6d0:	2b00      	cmp	r3, #0
   bd6d2:	d05a      	beq.n	bd78a <__multiply+0x146>
   bd6d4:	6106      	str	r6, [r0, #16]
   bd6d6:	b005      	add	sp, #20
   bd6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd6dc:	f843 2b04 	str.w	r2, [r3], #4
   bd6e0:	e7d8      	b.n	bd694 <__multiply+0x50>
   bd6e2:	f8b3 a000 	ldrh.w	sl, [r3]
   bd6e6:	f1ba 0f00 	cmp.w	sl, #0
   bd6ea:	d024      	beq.n	bd736 <__multiply+0xf2>
   bd6ec:	f104 0e14 	add.w	lr, r4, #20
   bd6f0:	46a9      	mov	r9, r5
   bd6f2:	f04f 0c00 	mov.w	ip, #0
   bd6f6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd6fa:	f8d9 1000 	ldr.w	r1, [r9]
   bd6fe:	fa1f fb82 	uxth.w	fp, r2
   bd702:	b289      	uxth	r1, r1
   bd704:	fb0a 110b 	mla	r1, sl, fp, r1
   bd708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd70c:	f8d9 2000 	ldr.w	r2, [r9]
   bd710:	4461      	add	r1, ip
   bd712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd716:	fb0a c20b 	mla	r2, sl, fp, ip
   bd71a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd71e:	b289      	uxth	r1, r1
   bd720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd724:	4577      	cmp	r7, lr
   bd726:	f849 1b04 	str.w	r1, [r9], #4
   bd72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd72e:	d8e2      	bhi.n	bd6f6 <__multiply+0xb2>
   bd730:	9a01      	ldr	r2, [sp, #4]
   bd732:	f845 c002 	str.w	ip, [r5, r2]
   bd736:	9a03      	ldr	r2, [sp, #12]
   bd738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd73c:	3304      	adds	r3, #4
   bd73e:	f1b9 0f00 	cmp.w	r9, #0
   bd742:	d020      	beq.n	bd786 <__multiply+0x142>
   bd744:	6829      	ldr	r1, [r5, #0]
   bd746:	f104 0c14 	add.w	ip, r4, #20
   bd74a:	46ae      	mov	lr, r5
   bd74c:	f04f 0a00 	mov.w	sl, #0
   bd750:	f8bc b000 	ldrh.w	fp, [ip]
   bd754:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd758:	fb09 220b 	mla	r2, r9, fp, r2
   bd75c:	4492      	add	sl, r2
   bd75e:	b289      	uxth	r1, r1
   bd760:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd764:	f84e 1b04 	str.w	r1, [lr], #4
   bd768:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd76c:	f8be 1000 	ldrh.w	r1, [lr]
   bd770:	0c12      	lsrs	r2, r2, #16
   bd772:	fb09 1102 	mla	r1, r9, r2, r1
   bd776:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd77a:	4567      	cmp	r7, ip
   bd77c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd780:	d8e6      	bhi.n	bd750 <__multiply+0x10c>
   bd782:	9a01      	ldr	r2, [sp, #4]
   bd784:	50a9      	str	r1, [r5, r2]
   bd786:	3504      	adds	r5, #4
   bd788:	e79a      	b.n	bd6c0 <__multiply+0x7c>
   bd78a:	3e01      	subs	r6, #1
   bd78c:	e79c      	b.n	bd6c8 <__multiply+0x84>
   bd78e:	bf00      	nop
   bd790:	000beb7c 	.word	0x000beb7c
   bd794:	000bec02 	.word	0x000bec02

000bd798 <__pow5mult>:
   bd798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd79c:	4615      	mov	r5, r2
   bd79e:	f012 0203 	ands.w	r2, r2, #3
   bd7a2:	4606      	mov	r6, r0
   bd7a4:	460f      	mov	r7, r1
   bd7a6:	d007      	beq.n	bd7b8 <__pow5mult+0x20>
   bd7a8:	4c25      	ldr	r4, [pc, #148]	; (bd840 <__pow5mult+0xa8>)
   bd7aa:	3a01      	subs	r2, #1
   bd7ac:	2300      	movs	r3, #0
   bd7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd7b2:	f7ff fe51 	bl	bd458 <__multadd>
   bd7b6:	4607      	mov	r7, r0
   bd7b8:	10ad      	asrs	r5, r5, #2
   bd7ba:	d03d      	beq.n	bd838 <__pow5mult+0xa0>
   bd7bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd7be:	b97c      	cbnz	r4, bd7e0 <__pow5mult+0x48>
   bd7c0:	2010      	movs	r0, #16
   bd7c2:	f7f9 ff1d 	bl	b7600 <malloc>
   bd7c6:	4602      	mov	r2, r0
   bd7c8:	6270      	str	r0, [r6, #36]	; 0x24
   bd7ca:	b928      	cbnz	r0, bd7d8 <__pow5mult+0x40>
   bd7cc:	4b1d      	ldr	r3, [pc, #116]	; (bd844 <__pow5mult+0xac>)
   bd7ce:	481e      	ldr	r0, [pc, #120]	; (bd848 <__pow5mult+0xb0>)
   bd7d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd7d4:	f7f9 ff5c 	bl	b7690 <__assert_func>
   bd7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd7dc:	6004      	str	r4, [r0, #0]
   bd7de:	60c4      	str	r4, [r0, #12]
   bd7e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd7e8:	b94c      	cbnz	r4, bd7fe <__pow5mult+0x66>
   bd7ea:	f240 2171 	movw	r1, #625	; 0x271
   bd7ee:	4630      	mov	r0, r6
   bd7f0:	f7ff ff12 	bl	bd618 <__i2b>
   bd7f4:	2300      	movs	r3, #0
   bd7f6:	f8c8 0008 	str.w	r0, [r8, #8]
   bd7fa:	4604      	mov	r4, r0
   bd7fc:	6003      	str	r3, [r0, #0]
   bd7fe:	f04f 0900 	mov.w	r9, #0
   bd802:	07eb      	lsls	r3, r5, #31
   bd804:	d50a      	bpl.n	bd81c <__pow5mult+0x84>
   bd806:	4639      	mov	r1, r7
   bd808:	4622      	mov	r2, r4
   bd80a:	4630      	mov	r0, r6
   bd80c:	f7ff ff1a 	bl	bd644 <__multiply>
   bd810:	4639      	mov	r1, r7
   bd812:	4680      	mov	r8, r0
   bd814:	4630      	mov	r0, r6
   bd816:	f7ff fdfd 	bl	bd414 <_Bfree>
   bd81a:	4647      	mov	r7, r8
   bd81c:	106d      	asrs	r5, r5, #1
   bd81e:	d00b      	beq.n	bd838 <__pow5mult+0xa0>
   bd820:	6820      	ldr	r0, [r4, #0]
   bd822:	b938      	cbnz	r0, bd834 <__pow5mult+0x9c>
   bd824:	4622      	mov	r2, r4
   bd826:	4621      	mov	r1, r4
   bd828:	4630      	mov	r0, r6
   bd82a:	f7ff ff0b 	bl	bd644 <__multiply>
   bd82e:	6020      	str	r0, [r4, #0]
   bd830:	f8c0 9000 	str.w	r9, [r0]
   bd834:	4604      	mov	r4, r0
   bd836:	e7e4      	b.n	bd802 <__pow5mult+0x6a>
   bd838:	4638      	mov	r0, r7
   bd83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd83e:	bf00      	nop
   bd840:	000bed50 	.word	0x000bed50
   bd844:	000be959 	.word	0x000be959
   bd848:	000bec02 	.word	0x000bec02

000bd84c <__lshift>:
   bd84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd850:	460c      	mov	r4, r1
   bd852:	6849      	ldr	r1, [r1, #4]
   bd854:	6923      	ldr	r3, [r4, #16]
   bd856:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd85a:	68a3      	ldr	r3, [r4, #8]
   bd85c:	4607      	mov	r7, r0
   bd85e:	4691      	mov	r9, r2
   bd860:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd864:	f108 0601 	add.w	r6, r8, #1
   bd868:	42b3      	cmp	r3, r6
   bd86a:	db0b      	blt.n	bd884 <__lshift+0x38>
   bd86c:	4638      	mov	r0, r7
   bd86e:	f7ff fd91 	bl	bd394 <_Balloc>
   bd872:	4605      	mov	r5, r0
   bd874:	b948      	cbnz	r0, bd88a <__lshift+0x3e>
   bd876:	4602      	mov	r2, r0
   bd878:	4b2a      	ldr	r3, [pc, #168]	; (bd924 <__lshift+0xd8>)
   bd87a:	482b      	ldr	r0, [pc, #172]	; (bd928 <__lshift+0xdc>)
   bd87c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd880:	f7f9 ff06 	bl	b7690 <__assert_func>
   bd884:	3101      	adds	r1, #1
   bd886:	005b      	lsls	r3, r3, #1
   bd888:	e7ee      	b.n	bd868 <__lshift+0x1c>
   bd88a:	2300      	movs	r3, #0
   bd88c:	f100 0114 	add.w	r1, r0, #20
   bd890:	f100 0210 	add.w	r2, r0, #16
   bd894:	4618      	mov	r0, r3
   bd896:	4553      	cmp	r3, sl
   bd898:	db37      	blt.n	bd90a <__lshift+0xbe>
   bd89a:	6920      	ldr	r0, [r4, #16]
   bd89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd8a0:	f104 0314 	add.w	r3, r4, #20
   bd8a4:	f019 091f 	ands.w	r9, r9, #31
   bd8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd8ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd8b0:	d02f      	beq.n	bd912 <__lshift+0xc6>
   bd8b2:	f1c9 0e20 	rsb	lr, r9, #32
   bd8b6:	468a      	mov	sl, r1
   bd8b8:	f04f 0c00 	mov.w	ip, #0
   bd8bc:	681a      	ldr	r2, [r3, #0]
   bd8be:	fa02 f209 	lsl.w	r2, r2, r9
   bd8c2:	ea42 020c 	orr.w	r2, r2, ip
   bd8c6:	f84a 2b04 	str.w	r2, [sl], #4
   bd8ca:	f853 2b04 	ldr.w	r2, [r3], #4
   bd8ce:	4298      	cmp	r0, r3
   bd8d0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd8d4:	d8f2      	bhi.n	bd8bc <__lshift+0x70>
   bd8d6:	1b03      	subs	r3, r0, r4
   bd8d8:	3b15      	subs	r3, #21
   bd8da:	f023 0303 	bic.w	r3, r3, #3
   bd8de:	3304      	adds	r3, #4
   bd8e0:	f104 0215 	add.w	r2, r4, #21
   bd8e4:	4290      	cmp	r0, r2
   bd8e6:	bf38      	it	cc
   bd8e8:	2304      	movcc	r3, #4
   bd8ea:	f841 c003 	str.w	ip, [r1, r3]
   bd8ee:	f1bc 0f00 	cmp.w	ip, #0
   bd8f2:	d001      	beq.n	bd8f8 <__lshift+0xac>
   bd8f4:	f108 0602 	add.w	r6, r8, #2
   bd8f8:	3e01      	subs	r6, #1
   bd8fa:	4638      	mov	r0, r7
   bd8fc:	612e      	str	r6, [r5, #16]
   bd8fe:	4621      	mov	r1, r4
   bd900:	f7ff fd88 	bl	bd414 <_Bfree>
   bd904:	4628      	mov	r0, r5
   bd906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd90a:	f842 0f04 	str.w	r0, [r2, #4]!
   bd90e:	3301      	adds	r3, #1
   bd910:	e7c1      	b.n	bd896 <__lshift+0x4a>
   bd912:	3904      	subs	r1, #4
   bd914:	f853 2b04 	ldr.w	r2, [r3], #4
   bd918:	f841 2f04 	str.w	r2, [r1, #4]!
   bd91c:	4298      	cmp	r0, r3
   bd91e:	d8f9      	bhi.n	bd914 <__lshift+0xc8>
   bd920:	e7ea      	b.n	bd8f8 <__lshift+0xac>
   bd922:	bf00      	nop
   bd924:	000beb7c 	.word	0x000beb7c
   bd928:	000bec02 	.word	0x000bec02

000bd92c <__mcmp>:
   bd92c:	b530      	push	{r4, r5, lr}
   bd92e:	6902      	ldr	r2, [r0, #16]
   bd930:	690c      	ldr	r4, [r1, #16]
   bd932:	1b12      	subs	r2, r2, r4
   bd934:	d10e      	bne.n	bd954 <__mcmp+0x28>
   bd936:	f100 0314 	add.w	r3, r0, #20
   bd93a:	3114      	adds	r1, #20
   bd93c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd94c:	42a5      	cmp	r5, r4
   bd94e:	d003      	beq.n	bd958 <__mcmp+0x2c>
   bd950:	d305      	bcc.n	bd95e <__mcmp+0x32>
   bd952:	2201      	movs	r2, #1
   bd954:	4610      	mov	r0, r2
   bd956:	bd30      	pop	{r4, r5, pc}
   bd958:	4283      	cmp	r3, r0
   bd95a:	d3f3      	bcc.n	bd944 <__mcmp+0x18>
   bd95c:	e7fa      	b.n	bd954 <__mcmp+0x28>
   bd95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd962:	e7f7      	b.n	bd954 <__mcmp+0x28>

000bd964 <__mdiff>:
   bd964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd968:	460c      	mov	r4, r1
   bd96a:	4606      	mov	r6, r0
   bd96c:	4611      	mov	r1, r2
   bd96e:	4620      	mov	r0, r4
   bd970:	4690      	mov	r8, r2
   bd972:	f7ff ffdb 	bl	bd92c <__mcmp>
   bd976:	1e05      	subs	r5, r0, #0
   bd978:	d110      	bne.n	bd99c <__mdiff+0x38>
   bd97a:	4629      	mov	r1, r5
   bd97c:	4630      	mov	r0, r6
   bd97e:	f7ff fd09 	bl	bd394 <_Balloc>
   bd982:	b930      	cbnz	r0, bd992 <__mdiff+0x2e>
   bd984:	4b3a      	ldr	r3, [pc, #232]	; (bda70 <__mdiff+0x10c>)
   bd986:	4602      	mov	r2, r0
   bd988:	f240 2132 	movw	r1, #562	; 0x232
   bd98c:	4839      	ldr	r0, [pc, #228]	; (bda74 <__mdiff+0x110>)
   bd98e:	f7f9 fe7f 	bl	b7690 <__assert_func>
   bd992:	2301      	movs	r3, #1
   bd994:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd99c:	bfa4      	itt	ge
   bd99e:	4643      	movge	r3, r8
   bd9a0:	46a0      	movge	r8, r4
   bd9a2:	4630      	mov	r0, r6
   bd9a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd9a8:	bfa6      	itte	ge
   bd9aa:	461c      	movge	r4, r3
   bd9ac:	2500      	movge	r5, #0
   bd9ae:	2501      	movlt	r5, #1
   bd9b0:	f7ff fcf0 	bl	bd394 <_Balloc>
   bd9b4:	b920      	cbnz	r0, bd9c0 <__mdiff+0x5c>
   bd9b6:	4b2e      	ldr	r3, [pc, #184]	; (bda70 <__mdiff+0x10c>)
   bd9b8:	4602      	mov	r2, r0
   bd9ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd9be:	e7e5      	b.n	bd98c <__mdiff+0x28>
   bd9c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd9c4:	6926      	ldr	r6, [r4, #16]
   bd9c6:	60c5      	str	r5, [r0, #12]
   bd9c8:	f104 0914 	add.w	r9, r4, #20
   bd9cc:	f108 0514 	add.w	r5, r8, #20
   bd9d0:	f100 0e14 	add.w	lr, r0, #20
   bd9d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd9d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd9dc:	f108 0210 	add.w	r2, r8, #16
   bd9e0:	46f2      	mov	sl, lr
   bd9e2:	2100      	movs	r1, #0
   bd9e4:	f859 3b04 	ldr.w	r3, [r9], #4
   bd9e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd9ec:	fa1f f883 	uxth.w	r8, r3
   bd9f0:	fa11 f18b 	uxtah	r1, r1, fp
   bd9f4:	0c1b      	lsrs	r3, r3, #16
   bd9f6:	eba1 0808 	sub.w	r8, r1, r8
   bd9fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd9fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bda02:	fa1f f888 	uxth.w	r8, r8
   bda06:	1419      	asrs	r1, r3, #16
   bda08:	454e      	cmp	r6, r9
   bda0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bda0e:	f84a 3b04 	str.w	r3, [sl], #4
   bda12:	d8e7      	bhi.n	bd9e4 <__mdiff+0x80>
   bda14:	1b33      	subs	r3, r6, r4
   bda16:	3b15      	subs	r3, #21
   bda18:	f023 0303 	bic.w	r3, r3, #3
   bda1c:	3304      	adds	r3, #4
   bda1e:	3415      	adds	r4, #21
   bda20:	42a6      	cmp	r6, r4
   bda22:	bf38      	it	cc
   bda24:	2304      	movcc	r3, #4
   bda26:	441d      	add	r5, r3
   bda28:	4473      	add	r3, lr
   bda2a:	469e      	mov	lr, r3
   bda2c:	462e      	mov	r6, r5
   bda2e:	4566      	cmp	r6, ip
   bda30:	d30e      	bcc.n	bda50 <__mdiff+0xec>
   bda32:	f10c 0203 	add.w	r2, ip, #3
   bda36:	1b52      	subs	r2, r2, r5
   bda38:	f022 0203 	bic.w	r2, r2, #3
   bda3c:	3d03      	subs	r5, #3
   bda3e:	45ac      	cmp	ip, r5
   bda40:	bf38      	it	cc
   bda42:	2200      	movcc	r2, #0
   bda44:	441a      	add	r2, r3
   bda46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bda4a:	b17b      	cbz	r3, bda6c <__mdiff+0x108>
   bda4c:	6107      	str	r7, [r0, #16]
   bda4e:	e7a3      	b.n	bd998 <__mdiff+0x34>
   bda50:	f856 8b04 	ldr.w	r8, [r6], #4
   bda54:	fa11 f288 	uxtah	r2, r1, r8
   bda58:	1414      	asrs	r4, r2, #16
   bda5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bda5e:	b292      	uxth	r2, r2
   bda60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bda64:	f84e 2b04 	str.w	r2, [lr], #4
   bda68:	1421      	asrs	r1, r4, #16
   bda6a:	e7e0      	b.n	bda2e <__mdiff+0xca>
   bda6c:	3f01      	subs	r7, #1
   bda6e:	e7ea      	b.n	bda46 <__mdiff+0xe2>
   bda70:	000beb7c 	.word	0x000beb7c
   bda74:	000bec02 	.word	0x000bec02

000bda78 <__ulp>:
   bda78:	b082      	sub	sp, #8
   bda7a:	ed8d 0b00 	vstr	d0, [sp]
   bda7e:	9b01      	ldr	r3, [sp, #4]
   bda80:	4912      	ldr	r1, [pc, #72]	; (bdacc <__ulp+0x54>)
   bda82:	4019      	ands	r1, r3
   bda84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bda88:	2900      	cmp	r1, #0
   bda8a:	dd05      	ble.n	bda98 <__ulp+0x20>
   bda8c:	2200      	movs	r2, #0
   bda8e:	460b      	mov	r3, r1
   bda90:	ec43 2b10 	vmov	d0, r2, r3
   bda94:	b002      	add	sp, #8
   bda96:	4770      	bx	lr
   bda98:	4249      	negs	r1, r1
   bda9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bda9e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bdaa2:	f04f 0200 	mov.w	r2, #0
   bdaa6:	f04f 0300 	mov.w	r3, #0
   bdaaa:	da04      	bge.n	bdab6 <__ulp+0x3e>
   bdaac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bdab0:	fa41 f300 	asr.w	r3, r1, r0
   bdab4:	e7ec      	b.n	bda90 <__ulp+0x18>
   bdab6:	f1a0 0114 	sub.w	r1, r0, #20
   bdaba:	291e      	cmp	r1, #30
   bdabc:	bfda      	itte	le
   bdabe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bdac2:	fa20 f101 	lsrle.w	r1, r0, r1
   bdac6:	2101      	movgt	r1, #1
   bdac8:	460a      	mov	r2, r1
   bdaca:	e7e1      	b.n	bda90 <__ulp+0x18>
   bdacc:	7ff00000 	.word	0x7ff00000

000bdad0 <__b2d>:
   bdad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdad2:	6905      	ldr	r5, [r0, #16]
   bdad4:	f100 0714 	add.w	r7, r0, #20
   bdad8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdadc:	1f2e      	subs	r6, r5, #4
   bdade:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdae2:	4620      	mov	r0, r4
   bdae4:	f7ff fd48 	bl	bd578 <__hi0bits>
   bdae8:	f1c0 0320 	rsb	r3, r0, #32
   bdaec:	280a      	cmp	r0, #10
   bdaee:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdb6c <__b2d+0x9c>
   bdaf2:	600b      	str	r3, [r1, #0]
   bdaf4:	dc14      	bgt.n	bdb20 <__b2d+0x50>
   bdaf6:	f1c0 0e0b 	rsb	lr, r0, #11
   bdafa:	fa24 f10e 	lsr.w	r1, r4, lr
   bdafe:	42b7      	cmp	r7, r6
   bdb00:	ea41 030c 	orr.w	r3, r1, ip
   bdb04:	bf34      	ite	cc
   bdb06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdb0a:	2100      	movcs	r1, #0
   bdb0c:	3015      	adds	r0, #21
   bdb0e:	fa04 f000 	lsl.w	r0, r4, r0
   bdb12:	fa21 f10e 	lsr.w	r1, r1, lr
   bdb16:	ea40 0201 	orr.w	r2, r0, r1
   bdb1a:	ec43 2b10 	vmov	d0, r2, r3
   bdb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdb20:	42b7      	cmp	r7, r6
   bdb22:	bf3a      	itte	cc
   bdb24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdb28:	f1a5 0608 	subcc.w	r6, r5, #8
   bdb2c:	2100      	movcs	r1, #0
   bdb2e:	380b      	subs	r0, #11
   bdb30:	d017      	beq.n	bdb62 <__b2d+0x92>
   bdb32:	f1c0 0c20 	rsb	ip, r0, #32
   bdb36:	fa04 f500 	lsl.w	r5, r4, r0
   bdb3a:	42be      	cmp	r6, r7
   bdb3c:	fa21 f40c 	lsr.w	r4, r1, ip
   bdb40:	ea45 0504 	orr.w	r5, r5, r4
   bdb44:	bf8c      	ite	hi
   bdb46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdb4a:	2400      	movls	r4, #0
   bdb4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdb50:	fa01 f000 	lsl.w	r0, r1, r0
   bdb54:	fa24 f40c 	lsr.w	r4, r4, ip
   bdb58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdb5c:	ea40 0204 	orr.w	r2, r0, r4
   bdb60:	e7db      	b.n	bdb1a <__b2d+0x4a>
   bdb62:	ea44 030c 	orr.w	r3, r4, ip
   bdb66:	460a      	mov	r2, r1
   bdb68:	e7d7      	b.n	bdb1a <__b2d+0x4a>
   bdb6a:	bf00      	nop
   bdb6c:	3ff00000 	.word	0x3ff00000

000bdb70 <__d2b>:
   bdb70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdb74:	4689      	mov	r9, r1
   bdb76:	2101      	movs	r1, #1
   bdb78:	ec57 6b10 	vmov	r6, r7, d0
   bdb7c:	4690      	mov	r8, r2
   bdb7e:	f7ff fc09 	bl	bd394 <_Balloc>
   bdb82:	4604      	mov	r4, r0
   bdb84:	b930      	cbnz	r0, bdb94 <__d2b+0x24>
   bdb86:	4602      	mov	r2, r0
   bdb88:	4b25      	ldr	r3, [pc, #148]	; (bdc20 <__d2b+0xb0>)
   bdb8a:	4826      	ldr	r0, [pc, #152]	; (bdc24 <__d2b+0xb4>)
   bdb8c:	f240 310a 	movw	r1, #778	; 0x30a
   bdb90:	f7f9 fd7e 	bl	b7690 <__assert_func>
   bdb94:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdb98:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdb9c:	bb35      	cbnz	r5, bdbec <__d2b+0x7c>
   bdb9e:	2e00      	cmp	r6, #0
   bdba0:	9301      	str	r3, [sp, #4]
   bdba2:	d028      	beq.n	bdbf6 <__d2b+0x86>
   bdba4:	4668      	mov	r0, sp
   bdba6:	9600      	str	r6, [sp, #0]
   bdba8:	f7ff fd06 	bl	bd5b8 <__lo0bits>
   bdbac:	9900      	ldr	r1, [sp, #0]
   bdbae:	b300      	cbz	r0, bdbf2 <__d2b+0x82>
   bdbb0:	9a01      	ldr	r2, [sp, #4]
   bdbb2:	f1c0 0320 	rsb	r3, r0, #32
   bdbb6:	fa02 f303 	lsl.w	r3, r2, r3
   bdbba:	430b      	orrs	r3, r1
   bdbbc:	40c2      	lsrs	r2, r0
   bdbbe:	6163      	str	r3, [r4, #20]
   bdbc0:	9201      	str	r2, [sp, #4]
   bdbc2:	9b01      	ldr	r3, [sp, #4]
   bdbc4:	61a3      	str	r3, [r4, #24]
   bdbc6:	2b00      	cmp	r3, #0
   bdbc8:	bf14      	ite	ne
   bdbca:	2202      	movne	r2, #2
   bdbcc:	2201      	moveq	r2, #1
   bdbce:	6122      	str	r2, [r4, #16]
   bdbd0:	b1d5      	cbz	r5, bdc08 <__d2b+0x98>
   bdbd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdbd6:	4405      	add	r5, r0
   bdbd8:	f8c9 5000 	str.w	r5, [r9]
   bdbdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdbe0:	f8c8 0000 	str.w	r0, [r8]
   bdbe4:	4620      	mov	r0, r4
   bdbe6:	b003      	add	sp, #12
   bdbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdbec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdbf0:	e7d5      	b.n	bdb9e <__d2b+0x2e>
   bdbf2:	6161      	str	r1, [r4, #20]
   bdbf4:	e7e5      	b.n	bdbc2 <__d2b+0x52>
   bdbf6:	a801      	add	r0, sp, #4
   bdbf8:	f7ff fcde 	bl	bd5b8 <__lo0bits>
   bdbfc:	9b01      	ldr	r3, [sp, #4]
   bdbfe:	6163      	str	r3, [r4, #20]
   bdc00:	2201      	movs	r2, #1
   bdc02:	6122      	str	r2, [r4, #16]
   bdc04:	3020      	adds	r0, #32
   bdc06:	e7e3      	b.n	bdbd0 <__d2b+0x60>
   bdc08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdc0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdc10:	f8c9 0000 	str.w	r0, [r9]
   bdc14:	6918      	ldr	r0, [r3, #16]
   bdc16:	f7ff fcaf 	bl	bd578 <__hi0bits>
   bdc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdc1e:	e7df      	b.n	bdbe0 <__d2b+0x70>
   bdc20:	000beb7c 	.word	0x000beb7c
   bdc24:	000bec02 	.word	0x000bec02

000bdc28 <__ratio>:
   bdc28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc2c:	4688      	mov	r8, r1
   bdc2e:	4669      	mov	r1, sp
   bdc30:	4681      	mov	r9, r0
   bdc32:	f7ff ff4d 	bl	bdad0 <__b2d>
   bdc36:	a901      	add	r1, sp, #4
   bdc38:	4640      	mov	r0, r8
   bdc3a:	ec55 4b10 	vmov	r4, r5, d0
   bdc3e:	f7ff ff47 	bl	bdad0 <__b2d>
   bdc42:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdc46:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdc4a:	eba3 0c02 	sub.w	ip, r3, r2
   bdc4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdc52:	1a9b      	subs	r3, r3, r2
   bdc54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdc58:	ec51 0b10 	vmov	r0, r1, d0
   bdc5c:	2b00      	cmp	r3, #0
   bdc5e:	bfd6      	itet	le
   bdc60:	460a      	movle	r2, r1
   bdc62:	462a      	movgt	r2, r5
   bdc64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdc68:	468b      	mov	fp, r1
   bdc6a:	462f      	mov	r7, r5
   bdc6c:	bfd4      	ite	le
   bdc6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdc72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdc76:	4620      	mov	r0, r4
   bdc78:	ee10 2a10 	vmov	r2, s0
   bdc7c:	465b      	mov	r3, fp
   bdc7e:	4639      	mov	r1, r7
   bdc80:	f7fd fd38 	bl	bb6f4 <__aeabi_ddiv>
   bdc84:	ec41 0b10 	vmov	d0, r0, r1
   bdc88:	b003      	add	sp, #12
   bdc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdc8e <__copybits>:
   bdc8e:	3901      	subs	r1, #1
   bdc90:	b570      	push	{r4, r5, r6, lr}
   bdc92:	1149      	asrs	r1, r1, #5
   bdc94:	6914      	ldr	r4, [r2, #16]
   bdc96:	3101      	adds	r1, #1
   bdc98:	f102 0314 	add.w	r3, r2, #20
   bdc9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdca4:	1f05      	subs	r5, r0, #4
   bdca6:	42a3      	cmp	r3, r4
   bdca8:	d30c      	bcc.n	bdcc4 <__copybits+0x36>
   bdcaa:	1aa3      	subs	r3, r4, r2
   bdcac:	3b11      	subs	r3, #17
   bdcae:	f023 0303 	bic.w	r3, r3, #3
   bdcb2:	3211      	adds	r2, #17
   bdcb4:	42a2      	cmp	r2, r4
   bdcb6:	bf88      	it	hi
   bdcb8:	2300      	movhi	r3, #0
   bdcba:	4418      	add	r0, r3
   bdcbc:	2300      	movs	r3, #0
   bdcbe:	4288      	cmp	r0, r1
   bdcc0:	d305      	bcc.n	bdcce <__copybits+0x40>
   bdcc2:	bd70      	pop	{r4, r5, r6, pc}
   bdcc4:	f853 6b04 	ldr.w	r6, [r3], #4
   bdcc8:	f845 6f04 	str.w	r6, [r5, #4]!
   bdccc:	e7eb      	b.n	bdca6 <__copybits+0x18>
   bdcce:	f840 3b04 	str.w	r3, [r0], #4
   bdcd2:	e7f4      	b.n	bdcbe <__copybits+0x30>

000bdcd4 <__any_on>:
   bdcd4:	f100 0214 	add.w	r2, r0, #20
   bdcd8:	6900      	ldr	r0, [r0, #16]
   bdcda:	114b      	asrs	r3, r1, #5
   bdcdc:	4298      	cmp	r0, r3
   bdcde:	b510      	push	{r4, lr}
   bdce0:	db11      	blt.n	bdd06 <__any_on+0x32>
   bdce2:	dd0a      	ble.n	bdcfa <__any_on+0x26>
   bdce4:	f011 011f 	ands.w	r1, r1, #31
   bdce8:	d007      	beq.n	bdcfa <__any_on+0x26>
   bdcea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdcee:	fa24 f001 	lsr.w	r0, r4, r1
   bdcf2:	fa00 f101 	lsl.w	r1, r0, r1
   bdcf6:	428c      	cmp	r4, r1
   bdcf8:	d10b      	bne.n	bdd12 <__any_on+0x3e>
   bdcfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdcfe:	4293      	cmp	r3, r2
   bdd00:	d803      	bhi.n	bdd0a <__any_on+0x36>
   bdd02:	2000      	movs	r0, #0
   bdd04:	bd10      	pop	{r4, pc}
   bdd06:	4603      	mov	r3, r0
   bdd08:	e7f7      	b.n	bdcfa <__any_on+0x26>
   bdd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdd0e:	2900      	cmp	r1, #0
   bdd10:	d0f5      	beq.n	bdcfe <__any_on+0x2a>
   bdd12:	2001      	movs	r0, #1
   bdd14:	e7f6      	b.n	bdd04 <__any_on+0x30>

000bdd16 <_calloc_r>:
   bdd16:	b513      	push	{r0, r1, r4, lr}
   bdd18:	434a      	muls	r2, r1
   bdd1a:	4611      	mov	r1, r2
   bdd1c:	9201      	str	r2, [sp, #4]
   bdd1e:	f7f9 fca7 	bl	b7670 <_malloc_r>
   bdd22:	4604      	mov	r4, r0
   bdd24:	b118      	cbz	r0, bdd2e <_calloc_r+0x18>
   bdd26:	9a01      	ldr	r2, [sp, #4]
   bdd28:	2100      	movs	r1, #0
   bdd2a:	f7fd ff5d 	bl	bbbe8 <memset>
   bdd2e:	4620      	mov	r0, r4
   bdd30:	b002      	add	sp, #8
   bdd32:	bd10      	pop	{r4, pc}

000bdd34 <__ascii_wctomb>:
   bdd34:	b149      	cbz	r1, bdd4a <__ascii_wctomb+0x16>
   bdd36:	2aff      	cmp	r2, #255	; 0xff
   bdd38:	bf85      	ittet	hi
   bdd3a:	238a      	movhi	r3, #138	; 0x8a
   bdd3c:	6003      	strhi	r3, [r0, #0]
   bdd3e:	700a      	strbls	r2, [r1, #0]
   bdd40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bdd44:	bf98      	it	ls
   bdd46:	2001      	movls	r0, #1
   bdd48:	4770      	bx	lr
   bdd4a:	4608      	mov	r0, r1
   bdd4c:	4770      	bx	lr
	...

000bdd50 <__aeabi_d2lz>:
   bdd50:	b538      	push	{r3, r4, r5, lr}
   bdd52:	2200      	movs	r2, #0
   bdd54:	2300      	movs	r3, #0
   bdd56:	4604      	mov	r4, r0
   bdd58:	460d      	mov	r5, r1
   bdd5a:	f7fd fe13 	bl	bb984 <__aeabi_dcmplt>
   bdd5e:	b928      	cbnz	r0, bdd6c <__aeabi_d2lz+0x1c>
   bdd60:	4620      	mov	r0, r4
   bdd62:	4629      	mov	r1, r5
   bdd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdd68:	f7fd bee2 	b.w	bbb30 <__aeabi_d2ulz>
   bdd6c:	4620      	mov	r0, r4
   bdd6e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bdd72:	f7fd fedd 	bl	bbb30 <__aeabi_d2ulz>
   bdd76:	4240      	negs	r0, r0
   bdd78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdd7c:	bd38      	pop	{r3, r4, r5, pc}
   bdd7e:	bf00      	nop

000bdd80 <dynalib_user>:
   bdd80:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdd90:	0000 0000 6574 706d 665f 6800 6d75 6469     ....temp_f.humid
   bdda0:	7469 0079 6973 6e67 6c61 735f 7274 6e65     ity.signal_stren
   bddb0:	7467 0068 6973 6e67 6c61 715f 6175 696c     gth.signal_quali
   bddc0:	7974 7000 7265 6563 746e 635f 6168 6772     ty.percent_charg
   bddd0:	0065 6f6c 676e 7469 6475 0065 616c 6974     e.longitude.lati
   bdde0:	7574 6564 5600 6c61 6575 2073 6573 746e     tude.Values sent
   bddf0:	6220 2079 6874 2065 6564 6976 6563 5400      by the device.T
   bde00:	6d65 6570 6172 7574 6572 4800 6d75 6469     emperature.Humid
   bde10:	7469 0079 6142 7474 7265 0079 6625 252c     ity.Battery.%f,%
   bde20:	2c66 6625 7b00 7422 6d65 5f70 2266 223a     f,%f.{"temp_f":"
   bde30:	6425 2c22 6822 6d75 6469 7469 2279 223a     %d","humidity":"
   bde40:	6425 2c22 7022 7265 6563 746e 635f 6168     %d","percent_cha
   bde50:	6772 2265 223a 6425 2c22 7322 6769 616e     rge":"%d","signa
   bde60:	5f6c 7473 6572 676e 6874 3a22 2522 2264     l_strength":"%d"
   bde70:	222c 6973 6e67 6c61 715f 6175 696c 7974     ,"signal_quality
   bde80:	3a22 2522 2264 222c 6f70 6973 6974 6e6f     ":"%d","position
   bde90:	3a22 7b20 7622 6c61 6575 3a22 2c31 2220     ": {"value":1, "
   bdea0:	6f63 746e 7865 2274 7b3a 6c22 7461 3a22     context":{"lat":
   bdeb0:	2220 6625 2c22 2220 6e6c 2267 203a 2522      "%f", "lng": "%
   bdec0:	2266 7d7d 007d 6f6e 6c20 636f 7461 6f69     f"}}}.no locatio
   bded0:	006e 6c25 2075 696d 6c6c 7369 6365 6e6f     n.%lu millisecon
   bdee0:	7364 7420 206f 6567 2074 5047 2053 6966     ds to get GPS fi
   bdef0:	0078 7067 0073 0000                         x.gps...

000bdef8 <_ZTVN5spark10LogHandlerE>:
	...
   bdf08:	40a5 000b 40c9 000b                         .@...@..

000bdf10 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bdf18:	40dd 000b 4111 000b 9259 000b 40cb 000b     .@...A..Y....@..
   bdf28:	6255 6469 746f 0073 6564 6166 6c75 2074     Ubidots.default 
   bdf38:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   bdf48:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   bdf58:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   bdf68:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000bdf74 <_ZTVN8particle11SPISettingsE>:
	...
   bdf7c:	490d 000b 48e1 000b 48e3 000b 5047 4d52     .I...H...H..GPRM
   bdf8c:	0043 4e47 4d52 0043 5047 4747 0041 4e47     C.GNRMC.GPGGA.GN
   bdf9c:	4747 0041 6255 6469 746f 5073 7261 6974     GGA.UbidotsParti
   bdfac:	6c63 2f65 2e33 0032 7254 6979 676e 7420     cle/3.2.Trying t
   bdfbc:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
   bdfcc:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
   bdfdc:	0020 7441 6574 706d 2074 6966 696e 6873      .Attempt finish
   bdfec:	6465 5300 7265 6576 2772 2073 6572 7073     ed.Server's resp
   bdffc:	6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d 2d2d     onse:..---------
   be00c:	002d 6974 656d 756f 2c74 6320 756f 646c     -.timeout, could
   be01c:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
   be02c:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
   be03c:	6f68 7473 5000 534f 2054 612f 6970 762f     host.POST /api/v
   be04c:	2e31 2f36 6564 6976 6563 2f73 2000 5448     1.6/devices/. HT
   be05c:	5054 312f 312e 0a0d 4800 736f 3a74 0020     TP/1.1...Host: .
   be06c:	7355 7265 412d 6567 746e 203a 5800 412d     User-Agent: .X-A
   be07c:	7475 2d68 6f54 656b 3a6e 0020 6f43 6e6e     uth-Token: .Conn
   be08c:	6365 6974 6e6f 203a 6c63 736f 0d65 000a     ection: close...
   be09c:	6f43 746e 6e65 2d74 7954 6570 203a 7061     Content-Type: ap
   be0ac:	6c70 6369 7461 6f69 2f6e 736a 6e6f 0a0d     plication/json..
   be0bc:	4300 6e6f 6574 746e 4c2d 6e65 7467 3a68     .Content-Length:
   be0cc:	0020 614d 696b 676e 7220 7165 6575 7473      .Making request
   be0dc:	7420 206f 6255 6469 746f 3a73 000a 6177      to Ubidots:..wa
   be0ec:	7469 6e69 2067 6f66 2072 6573 7672 7265     iting for server
   be0fc:	6120 736e 6577 2072 2e2e 002e 550a 6962      answer .....Ubi
   be10c:	6f64 7374 2027 6553 7672 7265 7220 7365     dots' Server res
   be11c:	6f70 736e 3a65 000a 6f43 6c75 2064 6f6e     ponse:..Could no
   be12c:	2074 6573 646e 6420 7461 2061 6f74 7520     t send data to u
   be13c:	6962 6f64 7374 7520 6973 676e 4820 5454     bidots using HTT
   be14c:	0050 4547 2054 612f 6970 762f 2e31 2f36     P.GET /api/v1.6/
   be15c:	6564 6976 6563 2f73 2f00 766c 4300 6e6f     devices/./lv.Con
   be16c:	6574 746e 542d 7079 3a65 6120 7070 696c     tent-Type: appli
   be17c:	6163 6974 6e6f 6a2f 6f73 0d6e 0d0a 000a     cation/json.....
   be18c:	6f43 6e6e 6365 6974 6e6f 4620 6961 656c     Connection Faile
   be19c:	2064 6275 6469 746f 2073 202d 7254 2079     d ubidots - Try 
   be1ac:	6741 6961 006e 0000                         Again...

000be1b4 <_ZTV7UbiHTTP>:
	...
   be1bc:	5c7d 000b 5ead 000b 5a31 000b 5a35 000b     }\...^..1Z..5Z..

000be1cc <_ZTV11UbiParticle>:
	...
   be1d4:	60b5 000b 6095 000b 60a1 000b 60a5 000b     .`...`...`...`..
   be1e4:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   be1f4:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   be204:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   be214:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   be224:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   be234:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   be244:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   be254:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   be264:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   be274:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   be284:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   be294:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   be2a4:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   be2b4:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   be2c4:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   be2d4:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   be2e4:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   be2f4:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   be304:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   be314:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   be324:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   be334:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   be344:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000be354 <_ZTV6UbiTCP>:
	...
   be35c:	69d1 000b 6a75 000b 6705 000b 6c39 000b     .i..uj...g..9l..
   be36c:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   be37c:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   be38c:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   be39c:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   be3ac:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   be3bc:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   be3cc:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   be3dc:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   be3ec:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   be3fc:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   be40c:	7720 7469 2068 4455 0050 0000                with UDP...

000be418 <_ZTV6UbiUDP>:
	...
   be420:	6d85 000b 6d25 000b 6d31 000b 6d35 000b     .m..%m..1m..5m..
   be430:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   be440:	6962 6f64 7374 632e 6d6f 5900 756f 6120     bidots.com.You a
   be450:	6572 6120 6464 6e69 2067 6f6d 6572 7420     re adding more t
   be460:	6168 206e 6874 2065 616d 6978 756d 206d     han the maximum 
   be470:	666f 6320 6e6f 6573 7563 6974 6576 6b20     of consecutive k
   be480:	7965 762d 6c61 6575 2073 6170 7269 0073     ey-values pairs.
   be490:	7325 7325 253d 0073 7325 0024 7325 2522     %s%s=%s.%s$.%s"%
   be4a0:	2273 223a 7325 0022                         s":"%s".

000be4a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000be4b0 <_ZTVN5spark13CellularClassE>:
	...
   be4b8:	77cf 000b 77c5 000b 77bb 000b 7771 000b     .w...w...w..qw..
   be4c8:	77af 000b 77a3 000b 95b1 000b 95b9 000b     .w...w..........
   be4d8:	7797 000b 778f 000b 7785 000b 777b 000b     .w...w...w..{w..
   be4e8:	95e9 000b                                   ....

000be4ec <_ZTV14CellularSignal>:
	...
   be4f4:	785d 000b 78c1 000b 785f 000b 78d1 000b     ]x...x.._x...x..
   be504:	7905 000b 7931 000b 7965 000b 7885 000b     .y..1y..ey...x..
   be514:	7863 000b 787f 000b fffc ffff 0000 0000     cx...x..........
   be524:	78b9 000b                                   .x..

000be528 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be530:	79a9 000b 79af 000b 79ed 000b 79bd 000b     .y...y...y...y..
   be540:	79ab 000b                                   .y..

000be544 <_ZTVN5spark13EthernetClassE>:
	...
   be54c:	7f37 000b 7f2d 000b 7f23 000b 7f19 000b     7...-...#.......
   be55c:	7f0d 000b 7f01 000b 95b1 000b 95b9 000b     ................
   be56c:	7ef5 000b 7eed 000b 7ee3 000b 7ed9 000b     .~...~...~...~..
   be57c:	95e9 000b                                   ....

000be580 <_ZTV7TwoWire>:
	...
   be588:	8059 000b 80a3 000b 807b 000b 805b 000b     Y.......{...[...
   be598:	8083 000b 808b 000b 8093 000b 809b 000b     ................

000be5a8 <_ZTV9IPAddress>:
	...
   be5b0:	81b3 000b 81a3 000b 81a5 000b 7525 7500     ............%u.u
   be5c0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   be5d0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   be5e0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   be5f0:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   be600:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   be610:	0069 6564 6174 6c69 2073 203d 6c00 006e     i.details = .ln.
   be620:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..

000be630 <_ZTVN5spark16JSONStreamWriterE>:
	...
   be638:	86a5 000b 86cb 000b 8689 000b 8307 000b     ................

000be648 <_ZTVN5spark16StreamLogHandlerE>:
	...
   be650:	8b01 000b 8b19 000b 9259 000b 40cb 000b     ........Y....@..

000be660 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   be668:	8b2d 000b 8b41 000b 93fd 000b 8691 000b     -...A...........

000be678 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   be680:	86a3 000b 86d9 000b 91bd 000b 8693 000b     ................

000be690 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   be698:	86a1 000b 86e7 000b 8a69 000b 8709 000b     ........i.......

000be6a8 <_ZTVN5spark12NetworkClassE>:
	...
   be6b0:	9571 000b 957b 000b 9585 000b 958f 000b     q...{...........
   be6c0:	9599 000b 95a5 000b 95b1 000b 95b9 000b     ................
   be6d0:	95c1 000b 95cd 000b 95d5 000b 95df 000b     ................
   be6e0:	95e9 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000be6f0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be6f0:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   be700:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000be710 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be718:	9ce1 000b 9d05 000b a1fb 000b 9d13 000b     ................
   be728:	9ce5 000b                                   ....

000be72c <_ZTV9TCPClient>:
	...
   be734:	5769 000b 579d 000b 9c5d 000b 9c77 000b     iW...W..]...w...
   be744:	a085 000b 9ca1 000b 9efb 000b 9cd5 000b     ................
   be754:	9f8d 000b 9dcd 000b 9f29 000b a139 000b     ........)...9...
   be764:	9ec9 000b 9cd7 000b 9c89 000b 9d19 000b     ................
   be774:	9dad 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   be784:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000be794 <_ZTV3UDP>:
	...
   be79c:	a7b5 000b a7d9 000b a275 000b a39d 000b     ........u.......
   be7ac:	a22d 000b a28d 000b a2ab 000b a2c5 000b     -...............
   be7bc:	a2e9 000b a381 000b a65b 000b a421 000b     ........[...!...
   be7cc:	a579 000b a215 000b a745 000b a501 000b     y.......E.......
   be7dc:	a235 000b a773 000b a3c7 000b a223 000b     5...s.......#...
   be7ec:	a459 000b a229 000b a2c7 000b fff0 ffff     Y...)...........
   be7fc:	0000 0000 a2e1 000b                         ........

000be804 <_ZTV11USARTSerial>:
	...
   be80c:	a7ed 000b a859 000b a831 000b 96d5 000b     ....Y...1.......
   be81c:	a801 000b a81d 000b a80f 000b a82b 000b     ............+...
   be82c:	a7ef 000b a7f3 000b                         ........

000be834 <_ZTV9USBSerial>:
	...
   be83c:	a8ab 000b a913 000b a8e9 000b 96d5 000b     ................
   be84c:	a8db 000b a8ad 000b a8bd 000b a90d 000b     ................
   be85c:	a8cd 000b a8a5 000b                         ........

000be864 <_ZSt7nothrow>:
	...

000be865 <_ZTSSt19_Sp_make_shared_tag>:
   be865:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be875:	6572 5f64 6174 0067 0000                     red_tag....

000be880 <_ZTISt19_Sp_make_shared_tag>:
   be880:	e8c0 000b e865 000b                         ....e...

000be888 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be888:	e920 000b e894 000b e944 000b                .......D...

000be894 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be894:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be8a4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be8b4:	0045 0000                                   E...

000be8b8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be8b8:	0000 0000 e888 000b af41 000b af55 000b     ........A...U...
   be8c8:	b0e9 000b b0e9 000b afbf 000b af01 000b     ................
   be8d8:	afa7 000b af69 000b af33 000b               ....i...3...

000be8e4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be8e4:	e920 000b e8f0 000b e888 000b                ...........

000be8f0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be8f0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be900:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be910:	666e 456f 0000 0000                         nfoE....

000be918 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be918:	0000 0000 e8e4 000b afe9 000b affd 000b     ................
   be928:	b0e9 000b b0e9 000b afbf 000b af01 000b     ................
   be938:	b0bd 000b b049 000b b011 000b               ....I.......

000be944 <_ZTISt9type_info>:
   be944:	e8c0 000b e94c 000b                         ....L...

000be94c <_ZTSSt9type_info>:
   be94c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be95c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be96c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be97c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be98c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be99c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be9ac:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be9bc:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   be9cc:	7974 0000                                   ty..

000be9d0 <fpi.1>:
   be9d0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be9e0:	0000 0000                                   ....

000be9e4 <fpinan.0>:
   be9e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   be9f4:	0000 0000                                   ....

000be9f8 <tinytens>:
   be9f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bea08:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bea18:	6f43 64ac 0628 1168 742f 706d 6a2f 6e65     Co.d(.h./tmp/jen
   bea28:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bea38:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bea48:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bea58:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bea68:	6362 732f 7274 6e69 2f67 7473 7472 6b6f     bc/string/strtok
   bea78:	632e                                         .c.

000bea7b <_ctype_>:
   bea7b:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bea8b:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bea9b:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   beaab:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   beabb:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   beacb:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   beadb:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   beaeb:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   beafb:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   beb7b:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   beb8b:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   beb9b:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bebab:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bebbb:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bebcb:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bebdb:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bebeb:	632e 0000                                    .c...

000bebf0 <_C_numeric_locale>:
   bebf0:	e106 000b e18b 000b e1a4 2003 4f50 4953     ........... POSI
   bec00:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   bec10:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bec20:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bec30:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bec40:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bec50:	696c 2f62 706d 6572 2e63 0063 0000 0000     lib/mprec.c.....

000bec60 <__mprec_bigtens>:
   bec60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bec70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bec80:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bec88 <__mprec_tens>:
   bec88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bec98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   beca8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   becb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   becc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   becd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bece8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   becf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bed08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bed18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bed28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bed38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bed48:	9db4 79d9 7843 44ea                         ...yCx.D

000bed50 <p05.0>:
   bed50:	0005 0000 0019 0000 007d 0000               ........}...

000bed5c <link_const_variable_data_end>:
   bed5c:	000b47ed 	.word	0x000b47ed
   bed60:	000b5a0d 	.word	0x000b5a0d
   bed64:	000b6089 	.word	0x000b6089
   bed68:	000b66d5 	.word	0x000b66d5
   bed6c:	000b6d19 	.word	0x000b6d19
   bed70:	000b6d65 	.word	0x000b6d65
   bed74:	000b7761 	.word	0x000b7761
   bed78:	000b782d 	.word	0x000b782d
   bed7c:	000b7f41 	.word	0x000b7f41
   bed80:	000b9249 	.word	0x000b9249
   bed84:	000b96c1 	.word	0x000b96c1
   bed88:	000b99ad 	.word	0x000b99ad
   bed8c:	000b9c39 	.word	0x000b9c39
   bed90:	000ba201 	.word	0x000ba201

000bed94 <link_constructors_end>:
	...
