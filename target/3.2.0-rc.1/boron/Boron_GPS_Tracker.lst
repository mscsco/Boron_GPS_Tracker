
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/3.2.0-rc.1/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a4c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000be4e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001ec  2003e128  000be4e4  0001e128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004dc  2003e318  2003e318  0002e318  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000be6d0  000be6d0  0001e6d0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000be6fc  000be6fc  0001e6fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b9187  00000000  00000000  0001e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001f107  00000000  00000000  001d7887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004b44d  00000000  00000000  001f698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003aa0  00000000  00000000  00241ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000d0f0  00000000  00000000  0024587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004868e  00000000  00000000  0025296b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0005f978  00000000  00000000  0029aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d638  00000000  00000000  002fa971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000b2a0  00000000  00000000  00447fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fa0d 	bl	bb450 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fa2f 	bl	bb4a0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e128 	.word	0x2003e128
   b404c:	000be4e4 	.word	0x000be4e4
   b4050:	2003e314 	.word	0x2003e314
   b4054:	2003e318 	.word	0x2003e318
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 f96b 	bl	ba33c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be4a4 	.word	0x000be4a4
   b4080:	000be4dc 	.word	0x000be4dc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b9ea 	b.w	b445c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa53 	bl	b4534 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 b90b 	b.w	ba2ac <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bf15 	b.w	b6ec4 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bf13 	b.w	b6ec4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bf19 	b.w	b6ed4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fe14 	bl	b6cd8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6909 	.word	0x000b6909

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3

000b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b40d2:	2300      	movs	r3, #0
   b40d4:	2202      	movs	r2, #2
   b40d6:	f002 be65 	b.w	b6da4 <spark_variable>
	...

000b40dc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40dc:	4b0a      	ldr	r3, [pc, #40]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
   b40e2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e4:	f004 f886 	bl	b81f4 <_ZN5spark10LogManager8instanceEv>
   b40e8:	4621      	mov	r1, r4
   b40ea:	f004 fabe 	bl	b866a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ee:	f006 f895 	bl	ba21c <_Z16_fetch_usbserialv>
   b40f2:	f006 f887 	bl	ba204 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f6:	4620      	mov	r0, r4
   b40f8:	4b04      	ldr	r3, [pc, #16]	; (b410c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40fa:	f840 3b04 	str.w	r3, [r0], #4
   b40fe:	f004 f94f 	bl	b83a0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}
   b4106:	bf00      	nop
   b4108:	000bd798 	.word	0x000bd798
   b410c:	000bd780 	.word	0x000bd780

000b4110 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4110:	b510      	push	{r4, lr}
   b4112:	4604      	mov	r4, r0
    }
   b4114:	f7ff ffe2 	bl	b40dc <_ZN5spark16SerialLogHandlerD1Ev>
   b4118:	4620      	mov	r0, r4
   b411a:	2124      	movs	r1, #36	; 0x24
   b411c:	f7ff ffbf 	bl	b409e <_ZdlPvj>
   b4120:	4620      	mov	r0, r4
   b4122:	bd10      	pop	{r4, pc}

000b4124 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	b40e      	push	{r1, r2, r3}
   b4126:	b503      	push	{r0, r1, lr}
   b4128:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b412a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4130:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4132:	f005 f864 	bl	b91fe <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4136:	b002      	add	sp, #8
   b4138:	f85d eb04 	ldr.w	lr, [sp], #4
   b413c:	b003      	add	sp, #12
   b413e:	4770      	bx	lr

000b4140 <_Z11displayInfov.part.0>:
    free(str_lat);
    free(str_lng);
    free(context);
}

void displayInfo()
   b4140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4144:	ed2d 8b04 	vpush	{d8-d9}
   b4148:	b0f1      	sub	sp, #452	; 0x1c4

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b414a:	f002 fbe5 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
{
    if (millis() - lastSerial >= SERIAL_PERIOD) {
        lastSerial = millis();
   b414e:	4ba8      	ldr	r3, [pc, #672]	; (b43f0 <_Z11displayInfov.part.0+0x2b0>)

        //get other vars
        temp_c = (int8_t)bme.readTemperature();
        temp_f = (temp_c * 1.8) + 32;
   b4150:	4ea8      	ldr	r6, [pc, #672]	; (b43f4 <_Z11displayInfov.part.0+0x2b4>)
        lastSerial = millis();
   b4152:	6018      	str	r0, [r3, #0]
        temp_c = (int8_t)bme.readTemperature();
   b4154:	48a8      	ldr	r0, [pc, #672]	; (b43f8 <_Z11displayInfov.part.0+0x2b8>)
   b4156:	f000 fdd9 	bl	b4d0c <_ZN15Adafruit_BME28015readTemperatureEv>
   b415a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b415e:	4ba7      	ldr	r3, [pc, #668]	; (b43fc <_Z11displayInfov.part.0+0x2bc>)
   b4160:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b4164:	f99d 0024 	ldrsb.w	r0, [sp, #36]	; 0x24
   b4168:	6018      	str	r0, [r3, #0]
        temp_f = (temp_c * 1.8) + 32;
   b416a:	f006 fd8b 	bl	bac84 <__aeabi_i2d>
   b416e:	a39e      	add	r3, pc, #632	; (adr r3, b43e8 <_Z11displayInfov.part.0+0x2a8>)
   b4170:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4174:	f006 fdf0 	bl	bad58 <__aeabi_dmul>
   b4178:	4ba1      	ldr	r3, [pc, #644]	; (b4400 <_Z11displayInfov.part.0+0x2c0>)
   b417a:	2200      	movs	r2, #0
   b417c:	f006 fc36 	bl	ba9ec <__adddf3>
   b4180:	f007 f89a 	bl	bb2b8 <__aeabi_d2iz>
   b4184:	6030      	str	r0, [r6, #0]
        humidity = (uint8_t)bme.readHumidity();
   b4186:	489c      	ldr	r0, [pc, #624]	; (b43f8 <_Z11displayInfov.part.0+0x2b8>)
   b4188:	f000 fdf0 	bl	b4d6c <_ZN15Adafruit_BME28012readHumidityEv>
   b418c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b4190:	4a9c      	ldr	r2, [pc, #624]	; (b4404 <_Z11displayInfov.part.0+0x2c4>)
   b4192:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b4196:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        voltage = (uint8_t)fuel.getVCell();
   b419a:	489b      	ldr	r0, [pc, #620]	; (b4408 <_Z11displayInfov.part.0+0x2c8>)
        humidity = (uint8_t)bme.readHumidity();
   b419c:	6013      	str	r3, [r2, #0]
        voltage = (uint8_t)fuel.getVCell();
   b419e:	f003 fb99 	bl	b78d4 <_ZN9FuelGauge8getVCellEv>
   b41a2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b41a6:	4a99      	ldr	r2, [pc, #612]	; (b440c <_Z11displayInfov.part.0+0x2cc>)
   b41a8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b41ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b41b0:	6013      	str	r3, [r2, #0]
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   b41b2:	a914      	add	r1, sp, #80	; 0x50
    const diag_source* src = nullptr;
   b41b4:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b41b6:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b41b8:	9214      	str	r2, [sp, #80]	; 0x50
    const int ret = diag_get_source(id, &src, nullptr);
   b41ba:	f002 fdad 	bl	b6d18 <diag_get_source>
   b41be:	ac0c      	add	r4, sp, #48	; 0x30
    if (ret != SYSTEM_ERROR_NONE) {
   b41c0:	2800      	cmp	r0, #0
   b41c2:	f040 80fd 	bne.w	b43c0 <_Z11displayInfov.part.0+0x280>
        return ret;
    }
    return get(src, val);
   b41c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    SPARK_ASSERT(src && src->callback);
   b41c8:	b10d      	cbz	r5, b41ce <_Z11displayInfov.part.0+0x8e>
   b41ca:	692b      	ldr	r3, [r5, #16]
   b41cc:	b923      	cbnz	r3, b41d8 <_Z11displayInfov.part.0+0x98>
   b41ce:	4a90      	ldr	r2, [pc, #576]	; (b4410 <_Z11displayInfov.part.0+0x2d0>)
   b41d0:	2100      	movs	r1, #0
   b41d2:	200a      	movs	r0, #10
   b41d4:	f002 fd80 	bl	b6cd8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b41d8:	230c      	movs	r3, #12
   b41da:	e9cd 3434 	strd	r3, r4, [sp, #208]	; 0xd0
   b41de:	2304      	movs	r3, #4
   b41e0:	9336      	str	r3, [sp, #216]	; 0xd8
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b41e2:	692b      	ldr	r3, [r5, #16]
   b41e4:	aa34      	add	r2, sp, #208	; 0xd0
   b41e6:	2101      	movs	r1, #1
   b41e8:	4628      	mov	r0, r5
   b41ea:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b41ec:	2800      	cmp	r0, #0
   b41ee:	f040 80e7 	bne.w	b43c0 <_Z11displayInfov.part.0+0x280>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b41f2:	8823      	ldrh	r3, [r4, #0]
   b41f4:	ee07 3a90 	vmov	s15, r3
   b41f8:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        percent_charge = (uint8_t)System.batteryCharge();
   b41fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b4200:	4d84      	ldr	r5, [pc, #528]	; (b4414 <_Z11displayInfov.part.0+0x2d4>)
   b4202:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b4206:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24

        CellularSignal sig = Cellular.RSSI();
   b420a:	4983      	ldr	r1, [pc, #524]	; (b4418 <_Z11displayInfov.part.0+0x2d8>)
        percent_charge = (uint8_t)System.batteryCharge();
   b420c:	602b      	str	r3, [r5, #0]
        CellularSignal sig = Cellular.RSSI();
   b420e:	4620      	mov	r0, r4
   b4210:	f002 ff3c 	bl	b708c <_ZN5spark13CellularClass4RSSIEv>
        signal_strength  = (uint8_t)sig.getStrength();
   b4214:	4620      	mov	r0, r4
   b4216:	f002 ffb5 	bl	b7184 <_ZNK14CellularSignal11getStrengthEv>
   b421a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b421e:	4f7f      	ldr	r7, [pc, #508]	; (b441c <_Z11displayInfov.part.0+0x2dc>)
   b4220:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b4224:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4228:	603b      	str	r3, [r7, #0]
        signal_quality = (uint8_t)sig.getQuality();        
   b422a:	4620      	mov	r0, r4
   b422c:	f002 ffda 	bl	b71e4 <_ZNK14CellularSignal10getQualityEv>
   b4230:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   b4234:	f8df 8220 	ldr.w	r8, [pc, #544]	; b4458 <_Z11displayInfov.part.0+0x318>

struct TinyGPSLocation
{
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   b4238:	4c79      	ldr	r4, [pc, #484]	; (b4420 <_Z11displayInfov.part.0+0x2e0>)
   b423a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   b423e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4242:	f8c8 3000 	str.w	r3, [r8]

        char buf[128];
        char pubbuf[240];
        if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   b4246:	7823      	ldrb	r3, [r4, #0]
   b4248:	2b00      	cmp	r3, #0
   b424a:	f000 80bc 	beq.w	b43c6 <_Z11displayInfov.part.0+0x286>
   b424e:	f002 fb63 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   b4252:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b4254:	1ac0      	subs	r0, r0, r3
   b4256:	f242 730f 	movw	r3, #9999	; 0x270f
   b425a:	4298      	cmp	r0, r3
   b425c:	f200 80b3 	bhi.w	b43c6 <_Z11displayInfov.part.0+0x286>

            snprintf(buf, sizeof(buf), "%f", gps.location.lat());
   b4260:	4620      	mov	r0, r4
   b4262:	f000 fef1 	bl	b5048 <_ZN15TinyGPSLocation3latEv>
   b4266:	4a6f      	ldr	r2, [pc, #444]	; (b4424 <_Z11displayInfov.part.0+0x2e4>)
   b4268:	2180      	movs	r1, #128	; 0x80
   b426a:	ed8d 0b00 	vstr	d0, [sp]
   b426e:	a814      	add	r0, sp, #80	; 0x50
   b4270:	f002 fe40 	bl	b6ef4 <snprintf>
            snprintf(buf, sizeof(buf), "%f", gps.location.lng());
   b4274:	4620      	mov	r0, r4
   b4276:	f000 ff0b 	bl	b5090 <_ZN15TinyGPSLocation3lngEv>
   b427a:	4a6a      	ldr	r2, [pc, #424]	; (b4424 <_Z11displayInfov.part.0+0x2e4>)
   b427c:	2180      	movs	r1, #128	; 0x80
   b427e:	ed8d 0b00 	vstr	d0, [sp]
   b4282:	a814      	add	r0, sp, #80	; 0x50
   b4284:	f002 fe36 	bl	b6ef4 <snprintf>

            latitude = gps.location.lat();
   b4288:	4620      	mov	r0, r4
   b428a:	f000 fedd 	bl	b5048 <_ZN15TinyGPSLocation3latEv>
   b428e:	4b66      	ldr	r3, [pc, #408]	; (b4428 <_Z11displayInfov.part.0+0x2e8>)
            longitude = gps.location.lng();
   b4290:	4620      	mov	r0, r4
            latitude = gps.location.lat();
   b4292:	ed83 0b00 	vstr	d0, [r3]
            longitude = gps.location.lng();
   b4296:	f000 fefb 	bl	b5090 <_ZN15TinyGPSLocation3lngEv>
   b429a:	4b64      	ldr	r3, [pc, #400]	; (b442c <_Z11displayInfov.part.0+0x2ec>)

            snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
   b429c:	4620      	mov	r0, r4
            longitude = gps.location.lng();
   b429e:	ed83 0b00 	vstr	d0, [r3]
            snprintf(buf, sizeof(buf), "%f,%f,%f", gps.location.lat(), gps.location.lng(), gps.altitude.meters());
   b42a2:	f000 fed1 	bl	b5048 <_ZN15TinyGPSLocation3latEv>
   b42a6:	4620      	mov	r0, r4
   b42a8:	eeb0 8a40 	vmov.f32	s16, s0
   b42ac:	eef0 8a60 	vmov.f32	s17, s1
   b42b0:	f000 feee 	bl	b5090 <_ZN15TinyGPSLocation3lngEv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   b42b4:	f04f 0900 	mov.w	r9, #0
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   b42b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   int32_t value()         { updated = false; return val; }
   b42bc:	f884 9079 	strb.w	r9, [r4, #121]	; 0x79
   b42c0:	eeb0 9a40 	vmov.f32	s18, s0
   b42c4:	eef0 9a60 	vmov.f32	s19, s1
   double meters()       { return value() / 100.0; }
   b42c8:	f006 fcdc 	bl	bac84 <__aeabi_i2d>
   b42cc:	4b58      	ldr	r3, [pc, #352]	; (b4430 <_Z11displayInfov.part.0+0x2f0>)
   b42ce:	2200      	movs	r2, #0
   b42d0:	f006 fe6c 	bl	bafac <__aeabi_ddiv>
   b42d4:	ed8d 8b00 	vstr	d8, [sp]
   b42d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b42dc:	4a55      	ldr	r2, [pc, #340]	; (b4434 <_Z11displayInfov.part.0+0x2f4>)
   b42de:	2180      	movs	r1, #128	; 0x80
   b42e0:	ed8d 9b02 	vstr	d9, [sp, #8]
   b42e4:	a814      	add	r0, sp, #80	; 0x50
   b42e6:	f002 fe05 	bl	b6ef4 <snprintf>
            snprintf(pubbuf, sizeof(pubbuf), "{\"temp_f\":\"%d\",\"humidity\":\"%d\",\"percent_charge\":\"%d\",\"signal_strength\":\"%d\",\"signal_quality\":\"%d\",\"position\": {\"value\":1, \"context\":{\"lat\": \"%f\", \"lng\": \"%f\"}}}", temp_f, humidity, percent_charge, signal_strength, signal_quality, gps.location.lat(), gps.location.lng());
   b42ea:	4a46      	ldr	r2, [pc, #280]	; (b4404 <_Z11displayInfov.part.0+0x2c4>)
   b42ec:	6833      	ldr	r3, [r6, #0]
   b42ee:	9309      	str	r3, [sp, #36]	; 0x24
   b42f0:	4620      	mov	r0, r4
   b42f2:	6816      	ldr	r6, [r2, #0]
   b42f4:	682d      	ldr	r5, [r5, #0]
   b42f6:	683f      	ldr	r7, [r7, #0]
   b42f8:	f8d8 8000 	ldr.w	r8, [r8]
   b42fc:	f000 fea4 	bl	b5048 <_ZN15TinyGPSLocation3latEv>
   b4300:	4620      	mov	r0, r4
   b4302:	eeb0 8a40 	vmov.f32	s16, s0
   b4306:	eef0 8a60 	vmov.f32	s17, s1
   b430a:	f000 fec1 	bl	b5090 <_ZN15TinyGPSLocation3lngEv>
   b430e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4310:	4a49      	ldr	r2, [pc, #292]	; (b4438 <_Z11displayInfov.part.0+0x2f8>)
   b4312:	ed8d 0b06 	vstr	d0, [sp, #24]
   b4316:	21f0      	movs	r1, #240	; 0xf0
   b4318:	ed8d 8b04 	vstr	d8, [sp, #16]
   b431c:	e9cd 7802 	strd	r7, r8, [sp, #8]
   b4320:	e9cd 6500 	strd	r6, r5, [sp]
   b4324:	a834      	add	r0, sp, #208	; 0xd0
   b4326:	f002 fde5 	bl	b6ef4 <snprintf>
            
            Serial.println(pubbuf);
   b432a:	f005 ff77 	bl	ba21c <_Z16_fetch_usbserialv>
   b432e:	a934      	add	r1, sp, #208	; 0xd0
   b4330:	f004 fe65 	bl	b8ffe <_ZN5Print7printlnEPKc>
            
            if (gettingFix) {
   b4334:	4b41      	ldr	r3, [pc, #260]	; (b443c <_Z11displayInfov.part.0+0x2fc>)
   b4336:	781a      	ldrb	r2, [r3, #0]
   b4338:	b16a      	cbz	r2, b4356 <_Z11displayInfov.part.0+0x216>
                gettingFix = false;
   b433a:	f883 9000 	strb.w	r9, [r3]
   b433e:	f002 faeb 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
                unsigned long elapsed = millis() - startFix;
   b4342:	4b3f      	ldr	r3, [pc, #252]	; (b4440 <_Z11displayInfov.part.0+0x300>)
   b4344:	681a      	ldr	r2, [r3, #0]
   b4346:	1a82      	subs	r2, r0, r2
   b4348:	9209      	str	r2, [sp, #36]	; 0x24
                Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   b434a:	f005 ff67 	bl	ba21c <_Z16_fetch_usbserialv>
   b434e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4350:	493c      	ldr	r1, [pc, #240]	; (b4444 <_Z11displayInfov.part.0+0x304>)
   b4352:	f7ff fee7 	bl	b4124 <_ZN5Print8printlnfEPKcz>
            if (!gettingFix) {
                gettingFix = true;
                startFix = millis();
            }
        }
        Serial.println(buf);
   b4356:	f005 ff61 	bl	ba21c <_Z16_fetch_usbserialv>
   b435a:	a914      	add	r1, sp, #80	; 0x50
   b435c:	f004 fe4f 	bl	b8ffe <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4360:	f002 fd30 	bl	b6dc4 <spark_cloud_flag_connected>

        if (Particle.connected()) {
   b4364:	b338      	cbz	r0, b43b6 <_Z11displayInfov.part.0+0x276>
            if (millis() - lastPublish >= PUBLISH_PERIOD) {
   b4366:	4c38      	ldr	r4, [pc, #224]	; (b4448 <_Z11displayInfov.part.0+0x308>)
   b4368:	f002 fad6 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   b436c:	6823      	ldr	r3, [r4, #0]
   b436e:	1ac0      	subs	r0, r0, r3
   b4370:	f643 2397 	movw	r3, #14999	; 0x3a97
   b4374:	4298      	cmp	r0, r3
   b4376:	d91e      	bls.n	b43b6 <_Z11displayInfov.part.0+0x276>
   b4378:	f002 face 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   b437c:	4b33      	ldr	r3, [pc, #204]	; (b444c <_Z11displayInfov.part.0+0x30c>)
                lastPublish = millis();
   b437e:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4380:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4382:	f88d 3000 	strb.w	r3, [sp]
   b4386:	4932      	ldr	r1, [pc, #200]	; (b4450 <_Z11displayInfov.part.0+0x310>)
   b4388:	233c      	movs	r3, #60	; 0x3c
   b438a:	aa34      	add	r2, sp, #208	; 0xd0
   b438c:	a80a      	add	r0, sp, #40	; 0x28
   b438e:	f003 f891 	bl	b74b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4392:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b4394:	b17c      	cbz	r4, b43b6 <_Z11displayInfov.part.0+0x276>
      if (--_M_use_count == 0)
   b4396:	6863      	ldr	r3, [r4, #4]
   b4398:	3b01      	subs	r3, #1
   b439a:	6063      	str	r3, [r4, #4]
   b439c:	b95b      	cbnz	r3, b43b6 <_Z11displayInfov.part.0+0x276>
          _M_dispose();
   b439e:	6823      	ldr	r3, [r4, #0]
   b43a0:	4620      	mov	r0, r4
   b43a2:	689b      	ldr	r3, [r3, #8]
   b43a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43a6:	68a3      	ldr	r3, [r4, #8]
   b43a8:	3b01      	subs	r3, #1
   b43aa:	60a3      	str	r3, [r4, #8]
   b43ac:	b91b      	cbnz	r3, b43b6 <_Z11displayInfov.part.0+0x276>
            _M_destroy();
   b43ae:	6823      	ldr	r3, [r4, #0]
   b43b0:	4620      	mov	r0, r4
   b43b2:	68db      	ldr	r3, [r3, #12]
   b43b4:	4798      	blx	r3
                Particle.publish("gps", pubbuf, PRIVATE);
            }
        }
    }

}
   b43b6:	b071      	add	sp, #452	; 0x1c4
   b43b8:	ecbd 8b04 	vpop	{d8-d9}
   b43bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return -1.0f;
   b43c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b43c4:	e71a      	b.n	b41fc <_Z11displayInfov.part.0+0xbc>
            strcpy(buf, "no location");
   b43c6:	4923      	ldr	r1, [pc, #140]	; (b4454 <_Z11displayInfov.part.0+0x314>)
   b43c8:	a814      	add	r0, sp, #80	; 0x50
   b43ca:	f007 f8c0 	bl	bb54e <strcpy>
            if (!gettingFix) {
   b43ce:	4b1b      	ldr	r3, [pc, #108]	; (b443c <_Z11displayInfov.part.0+0x2fc>)
   b43d0:	781a      	ldrb	r2, [r3, #0]
   b43d2:	2a00      	cmp	r2, #0
   b43d4:	d1bf      	bne.n	b4356 <_Z11displayInfov.part.0+0x216>
                gettingFix = true;
   b43d6:	2201      	movs	r2, #1
   b43d8:	701a      	strb	r2, [r3, #0]
   b43da:	f002 fa9d 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
                startFix = millis();
   b43de:	4b18      	ldr	r3, [pc, #96]	; (b4440 <_Z11displayInfov.part.0+0x300>)
   b43e0:	6018      	str	r0, [r3, #0]
   b43e2:	e7b8      	b.n	b4356 <_Z11displayInfov.part.0+0x216>
   b43e4:	f3af 8000 	nop.w
   b43e8:	cccccccd 	.word	0xcccccccd
   b43ec:	3ffccccc 	.word	0x3ffccccc
   b43f0:	2003e44c 	.word	0x2003e44c
   b43f4:	2003e49c 	.word	0x2003e49c
   b43f8:	2003e31c 	.word	0x2003e31c
   b43fc:	2003e498 	.word	0x2003e498
   b4400:	40400000 	.word	0x40400000
   b4404:	2003e444 	.word	0x2003e444
   b4408:	2003e360 	.word	0x2003e360
   b440c:	2003e4ac 	.word	0x2003e4ac
   b4410:	000b6909 	.word	0x000b6909
   b4414:	2003e488 	.word	0x2003e488
   b4418:	2003e658 	.word	0x2003e658
   b441c:	2003e490 	.word	0x2003e490
   b4420:	2003e36c 	.word	0x2003e36c
   b4424:	000bd652 	.word	0x000bd652
   b4428:	2003e450 	.word	0x2003e450
   b442c:	2003e480 	.word	0x2003e480
   b4430:	40590000 	.word	0x40590000
   b4434:	000bd64c 	.word	0x000bd64c
   b4438:	000bd655 	.word	0x000bd655
   b443c:	2003e368 	.word	0x2003e368
   b4440:	2003e494 	.word	0x2003e494
   b4444:	000bd702 	.word	0x000bd702
   b4448:	2003e448 	.word	0x2003e448
   b444c:	2003e319 	.word	0x2003e319
   b4450:	000bd722 	.word	0x000bd722
   b4454:	000bd6f6 	.word	0x000bd6f6
   b4458:	2003e48c 	.word	0x2003e48c

000b445c <setup>:
void setup() {
   b445c:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b445e:	f005 fedd 	bl	ba21c <_Z16_fetch_usbserialv>
   b4462:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4466:	f005 fec9 	bl	ba1fc <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
   b446a:	f006 f8bf 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   b446e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4472:	f005 fe6b 	bl	ba14c <_ZN11USARTSerial5beginEm>
    bme.begin();
   b4476:	4815      	ldr	r0, [pc, #84]	; (b44cc <setup+0x70>)
   b4478:	f000 fd1b 	bl	b4eb2 <_ZN15Adafruit_BME2805beginEv>
        return _variable(name, std::forward<ArgsT>(args)...);
   b447c:	4914      	ldr	r1, [pc, #80]	; (b44d0 <setup+0x74>)
   b447e:	4815      	ldr	r0, [pc, #84]	; (b44d4 <setup+0x78>)
   b4480:	f7ff fe27 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4484:	4914      	ldr	r1, [pc, #80]	; (b44d8 <setup+0x7c>)
   b4486:	4815      	ldr	r0, [pc, #84]	; (b44dc <setup+0x80>)
   b4488:	f7ff fe23 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b448c:	4914      	ldr	r1, [pc, #80]	; (b44e0 <setup+0x84>)
   b448e:	4815      	ldr	r0, [pc, #84]	; (b44e4 <setup+0x88>)
   b4490:	f7ff fe1f 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b4494:	4914      	ldr	r1, [pc, #80]	; (b44e8 <setup+0x8c>)
   b4496:	4815      	ldr	r0, [pc, #84]	; (b44ec <setup+0x90>)
   b4498:	f7ff fe1b 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
   b449c:	4914      	ldr	r1, [pc, #80]	; (b44f0 <setup+0x94>)
   b449e:	4815      	ldr	r0, [pc, #84]	; (b44f4 <setup+0x98>)
   b44a0:	f7ff fe17 	bl	b40d2 <_ZN10CloudClass9_variableEPKcRKi.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b44a4:	4914      	ldr	r1, [pc, #80]	; (b44f8 <setup+0x9c>)
   b44a6:	4815      	ldr	r0, [pc, #84]	; (b44fc <setup+0xa0>)
   b44a8:	2300      	movs	r3, #0
   b44aa:	2209      	movs	r2, #9
   b44ac:	f002 fc7a 	bl	b6da4 <spark_variable>
   b44b0:	2300      	movs	r3, #0
   b44b2:	2209      	movs	r2, #9
   b44b4:	4912      	ldr	r1, [pc, #72]	; (b4500 <setup+0xa4>)
   b44b6:	4813      	ldr	r0, [pc, #76]	; (b4504 <setup+0xa8>)
   b44b8:	f002 fc74 	bl	b6da4 <spark_variable>
   b44bc:	f002 fa2c 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   b44c0:	4b11      	ldr	r3, [pc, #68]	; (b4508 <setup+0xac>)
   b44c2:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   b44c4:	4b11      	ldr	r3, [pc, #68]	; (b450c <setup+0xb0>)
   b44c6:	2201      	movs	r2, #1
   b44c8:	701a      	strb	r2, [r3, #0]
}
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	2003e31c 	.word	0x2003e31c
   b44d0:	2003e49c 	.word	0x2003e49c
   b44d4:	000bd726 	.word	0x000bd726
   b44d8:	2003e444 	.word	0x2003e444
   b44dc:	000bd72d 	.word	0x000bd72d
   b44e0:	2003e490 	.word	0x2003e490
   b44e4:	000bd736 	.word	0x000bd736
   b44e8:	2003e48c 	.word	0x2003e48c
   b44ec:	000bd746 	.word	0x000bd746
   b44f0:	2003e488 	.word	0x2003e488
   b44f4:	000bd755 	.word	0x000bd755
   b44f8:	2003e480 	.word	0x2003e480
   b44fc:	000bd764 	.word	0x000bd764
   b4500:	2003e450 	.word	0x2003e450
   b4504:	000bd76e 	.word	0x000bd76e
   b4508:	2003e494 	.word	0x2003e494
   b450c:	2003e368 	.word	0x2003e368

000b4510 <_Z11displayInfov>:
{
   b4510:	b508      	push	{r3, lr}
   b4512:	f002 fa01 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastSerial >= SERIAL_PERIOD) {
   b4516:	4b06      	ldr	r3, [pc, #24]	; (b4530 <_Z11displayInfov+0x20>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	1ac0      	subs	r0, r0, r3
   b451c:	f242 730f 	movw	r3, #9999	; 0x270f
   b4520:	4298      	cmp	r0, r3
   b4522:	d903      	bls.n	b452c <_Z11displayInfov+0x1c>
}
   b4524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4528:	f7ff be0a 	b.w	b4140 <_Z11displayInfov.part.0>
   b452c:	bd08      	pop	{r3, pc}
   b452e:	bf00      	nop
   b4530:	2003e44c 	.word	0x2003e44c

000b4534 <loop>:
{
   b4534:	b510      	push	{r4, lr}
        if (gps.encode(Serial1.read())) {
   b4536:	4c0b      	ldr	r4, [pc, #44]	; (b4564 <loop+0x30>)
    while (Serial1.available() > 0) {
   b4538:	f006 f858 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   b453c:	6803      	ldr	r3, [r0, #0]
   b453e:	691b      	ldr	r3, [r3, #16]
   b4540:	4798      	blx	r3
   b4542:	2800      	cmp	r0, #0
   b4544:	dd0d      	ble.n	b4562 <loop+0x2e>
        if (gps.encode(Serial1.read())) {
   b4546:	f006 f851 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   b454a:	6803      	ldr	r3, [r0, #0]
   b454c:	695b      	ldr	r3, [r3, #20]
   b454e:	4798      	blx	r3
   b4550:	b2c1      	uxtb	r1, r0
   b4552:	4620      	mov	r0, r4
   b4554:	f000 ff46 	bl	b53e4 <_ZN11TinyGPSPlus6encodeEc>
   b4558:	2800      	cmp	r0, #0
   b455a:	d0ed      	beq.n	b4538 <loop+0x4>
            displayInfo();
   b455c:	f7ff ffd8 	bl	b4510 <_Z11displayInfov>
   b4560:	e7ea      	b.n	b4538 <loop+0x4>
}
   b4562:	bd10      	pop	{r4, pc}
   b4564:	2003e36c 	.word	0x2003e36c

000b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4568:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b456a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b456e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4570:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4572:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4576:	42ae      	cmp	r6, r5
   b4578:	d004      	beq.n	b4584 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b457a:	4628      	mov	r0, r5
   b457c:	f004 ff28 	bl	b93d0 <_ZN6StringD1Ev>
   b4580:	3514      	adds	r5, #20
   b4582:	e7f8      	b.n	b4576 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4584:	6820      	ldr	r0, [r4, #0]
   b4586:	f002 fca5 	bl	b6ed4 <free>
    AllocatorT::free(data_);
}
   b458a:	4620      	mov	r0, r4
   b458c:	bd70      	pop	{r4, r5, r6, pc}

000b458e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b458e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4592:	4604      	mov	r4, r0
   b4594:	460d      	mov	r5, r1
   b4596:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4598:	d916      	bls.n	b45c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b459a:	4290      	cmp	r0, r2
   b459c:	d215      	bcs.n	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b459e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b45a2:	1a75      	subs	r5, r6, r1
   b45a4:	f1a1 0714 	sub.w	r7, r1, #20
   b45a8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b45aa:	42b7      	cmp	r7, r6
   b45ac:	d01c      	beq.n	b45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b45ae:	b12c      	cbz	r4, b45bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b45b0:	4631      	mov	r1, r6
   b45b2:	4620      	mov	r0, r4
   b45b4:	f004 ff74 	bl	b94a0 <_ZN6StringC1EOS_>
   b45b8:	7c33      	ldrb	r3, [r6, #16]
   b45ba:	7423      	strb	r3, [r4, #16]
   b45bc:	4630      	mov	r0, r6
   b45be:	f004 ff07 	bl	b93d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b45c2:	3e14      	subs	r6, #20
   b45c4:	3c14      	subs	r4, #20
   b45c6:	e7f0      	b.n	b45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b45c8:	d00e      	beq.n	b45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b45ca:	42b5      	cmp	r5, r6
   b45cc:	d00c      	beq.n	b45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b45ce:	b12c      	cbz	r4, b45dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b45d0:	4629      	mov	r1, r5
   b45d2:	4620      	mov	r0, r4
   b45d4:	f004 ff64 	bl	b94a0 <_ZN6StringC1EOS_>
   b45d8:	7c2b      	ldrb	r3, [r5, #16]
   b45da:	7423      	strb	r3, [r4, #16]
   b45dc:	4628      	mov	r0, r5
   b45de:	f004 fef7 	bl	b93d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b45e2:	3514      	adds	r5, #20
   b45e4:	3414      	adds	r4, #20
   b45e6:	e7f0      	b.n	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b45e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b45ee:	2300      	movs	r3, #0
   b45f0:	e9c0 3300 	strd	r3, r3, [r0]
   b45f4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45f6:	684f      	ldr	r7, [r1, #4]
   b45f8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45fa:	4604      	mov	r4, r0
   b45fc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45fe:	dd23      	ble.n	b4648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4600:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4604:	fb08 f007 	mul.w	r0, r8, r7
   b4608:	f002 fc5c 	bl	b6ec4 <malloc>
            if (!d) {
   b460c:	4605      	mov	r5, r0
   b460e:	b1d8      	cbz	r0, b4648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4610:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4614:	fb08 1202 	mla	r2, r8, r2, r1
   b4618:	f7ff ffb9 	bl	b458e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b461c:	6820      	ldr	r0, [r4, #0]
   b461e:	f002 fc59 	bl	b6ed4 <free>
        data_ = d;
   b4622:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4624:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4626:	e9d6 7300 	ldrd	r7, r3, [r6]
   b462a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b462e:	45b8      	cmp	r8, r7
   b4630:	d008      	beq.n	b4644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4632:	4639      	mov	r1, r7
   b4634:	4628      	mov	r0, r5
   b4636:	f004 ff4d 	bl	b94d4 <_ZN6StringC1ERKS_>
   b463a:	7c3b      	ldrb	r3, [r7, #16]
   b463c:	742b      	strb	r3, [r5, #16]
   b463e:	3714      	adds	r7, #20
   b4640:	3514      	adds	r5, #20
   b4642:	e7f4      	b.n	b462e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4644:	6873      	ldr	r3, [r6, #4]
   b4646:	6063      	str	r3, [r4, #4]
}
   b4648:	4620      	mov	r0, r4
   b464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4650 <_GLOBAL__sub_I_logHandler>:
}
   b4650:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b4652:	4b31      	ldr	r3, [pc, #196]	; (b4718 <_GLOBAL__sub_I_logHandler+0xc8>)
        filter_(level, filters) {
   b4654:	4d31      	ldr	r5, [pc, #196]	; (b471c <_GLOBAL__sub_I_logHandler+0xcc>)
   b4656:	2400      	movs	r4, #0
   b4658:	701c      	strb	r4, [r3, #0]
   b465a:	4b31      	ldr	r3, [pc, #196]	; (b4720 <_GLOBAL__sub_I_logHandler+0xd0>)
   b465c:	b08d      	sub	sp, #52	; 0x34
   b465e:	2001      	movs	r0, #1
   b4660:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b4662:	4621      	mov	r1, r4
   b4664:	f002 fb72 	bl	b6d4c <system_thread_set_state>
        capacity_(0) {
   b4668:	e9cd 4400 	strd	r4, r4, [sp]
   b466c:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b466e:	f005 fdd5 	bl	ba21c <_Z16_fetch_usbserialv>
   b4672:	4669      	mov	r1, sp
   b4674:	4606      	mov	r6, r0
   b4676:	a803      	add	r0, sp, #12
   b4678:	f7ff ffb7 	bl	b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b467c:	462f      	mov	r7, r5
        stream_(&stream) {
   b467e:	a903      	add	r1, sp, #12
   b4680:	a806      	add	r0, sp, #24
   b4682:	f7ff ffb2 	bl	b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4686:	4b27      	ldr	r3, [pc, #156]	; (b4724 <_GLOBAL__sub_I_logHandler+0xd4>)
   b4688:	f847 3b04 	str.w	r3, [r7], #4
   b468c:	a906      	add	r1, sp, #24
   b468e:	a809      	add	r0, sp, #36	; 0x24
   b4690:	f7ff ffab 	bl	b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4694:	aa09      	add	r2, sp, #36	; 0x24
   b4696:	211e      	movs	r1, #30
   b4698:	4638      	mov	r0, r7
   b469a:	f004 f8c9 	bl	b8830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b469e:	a809      	add	r0, sp, #36	; 0x24
   b46a0:	f7ff ff62 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b46a4:	a806      	add	r0, sp, #24
   b46a6:	f7ff ff5f 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b46aa:	4b1f      	ldr	r3, [pc, #124]	; (b4728 <_GLOBAL__sub_I_logHandler+0xd8>)
   b46ac:	602b      	str	r3, [r5, #0]
   b46ae:	a803      	add	r0, sp, #12
   b46b0:	622e      	str	r6, [r5, #32]
   b46b2:	f7ff ff59 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b46b6:	4b1d      	ldr	r3, [pc, #116]	; (b472c <_GLOBAL__sub_I_logHandler+0xdc>)
   b46b8:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b46ba:	f005 fdaf 	bl	ba21c <_Z16_fetch_usbserialv>
   b46be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46c2:	f005 fd9b 	bl	ba1fc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b46c6:	f003 fd95 	bl	b81f4 <_ZN5spark10LogManager8instanceEv>
   b46ca:	4629      	mov	r1, r5
   b46cc:	f003 ff86 	bl	b85dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b46d0:	4668      	mov	r0, sp
   b46d2:	f7ff ff49 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   b46d6:	4816      	ldr	r0, [pc, #88]	; (b4730 <_GLOBAL__sub_I_logHandler+0xe0>)
   b46d8:	f000 fbfe 	bl	b4ed8 <_ZN11TinyGPSPlusC1Ev>
Adafruit_BME280 bme;
   b46dc:	4815      	ldr	r0, [pc, #84]	; (b4734 <_GLOBAL__sub_I_logHandler+0xe4>)
   b46de:	f000 f871 	bl	b47c4 <_ZN15Adafruit_BME280C1Ev>
FuelGauge fuel;
   b46e2:	4621      	mov	r1, r4
   b46e4:	4814      	ldr	r0, [pc, #80]	; (b4738 <_GLOBAL__sub_I_logHandler+0xe8>)
   b46e6:	f003 f8a9 	bl	b783c <_ZN9FuelGaugeC1Eb>
Ubidots ubidots(webhook, UBI_PARTICLE);
   b46ea:	4914      	ldr	r1, [pc, #80]	; (b473c <_GLOBAL__sub_I_logHandler+0xec>)
   b46ec:	4814      	ldr	r0, [pc, #80]	; (b4740 <_GLOBAL__sub_I_logHandler+0xf0>)
   b46ee:	2203      	movs	r2, #3
   b46f0:	f002 f8cc 	bl	b688c <_ZN7UbidotsC1EPc11IotProtocol>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b46f4:	f005 fe54 	bl	ba3a0 <spark_protocol_instance>
   b46f8:	4623      	mov	r3, r4
   b46fa:	4622      	mov	r2, r4
   b46fc:	f643 61f0 	movw	r1, #16112	; 0x3ef0
   b4700:	f005 fe56 	bl	ba3b0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4704:	f005 fe4c 	bl	ba3a0 <spark_protocol_instance>
   b4708:	4623      	mov	r3, r4
   b470a:	4622      	mov	r2, r4
   b470c:	2104      	movs	r1, #4
}
   b470e:	b00d      	add	sp, #52	; 0x34
   b4710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4714:	f005 be54 	b.w	ba3c0 <spark_protocol_set_product_firmware_version>
   b4718:	2003e318 	.word	0x2003e318
   b471c:	2003e458 	.word	0x2003e458
   b4720:	2003e319 	.word	0x2003e319
   b4724:	000bd780 	.word	0x000bd780
   b4728:	000bdd98 	.word	0x000bdd98
   b472c:	000bd798 	.word	0x000bd798
   b4730:	2003e36c 	.word	0x2003e36c
   b4734:	2003e31c 	.word	0x2003e31c
   b4738:	2003e360 	.word	0x2003e360
   b473c:	2003e128 	.word	0x2003e128
   b4740:	2003e4a0 	.word	0x2003e4a0

000b4744 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4744:	4770      	bx	lr

000b4746 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4746:	b510      	push	{r4, lr}
  }
   b4748:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b474a:	4604      	mov	r4, r0
  }
   b474c:	f7ff fca7 	bl	b409e <_ZdlPvj>
   b4750:	4620      	mov	r0, r4
   b4752:	bd10      	pop	{r4, pc}

000b4754 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4754:	b40e      	push	{r1, r2, r3}
   b4756:	b503      	push	{r0, r1, lr}
   b4758:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b475a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b475c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4760:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4762:	f004 fd4c 	bl	b91fe <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4766:	b002      	add	sp, #8
   b4768:	f85d eb04 	ldr.w	lr, [sp], #4
   b476c:	b003      	add	sp, #12
   b476e:	4770      	bx	lr

000b4770 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4770:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4772:	4604      	mov	r4, r0
   b4774:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4776:	7922      	ldrb	r2, [r4, #4]
   b4778:	68a3      	ldr	r3, [r4, #8]
   b477a:	b132      	cbz	r2, b478a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b477c:	b9a3      	cbnz	r3, b47a8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b477e:	490b      	ldr	r1, [pc, #44]	; (b47ac <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4780:	b002      	add	sp, #8
   b4782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4786:	f004 bc27 	b.w	b8fd8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b478a:	4a09      	ldr	r2, [pc, #36]	; (b47b0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b478c:	7b26      	ldrb	r6, [r4, #12]
   b478e:	4d09      	ldr	r5, [pc, #36]	; (b47b4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4790:	4909      	ldr	r1, [pc, #36]	; (b47b8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4792:	7b64      	ldrb	r4, [r4, #13]
   b4794:	2e01      	cmp	r6, #1
   b4796:	bf18      	it	ne
   b4798:	4629      	movne	r1, r5
   b479a:	e9cd 1400 	strd	r1, r4, [sp]
   b479e:	4907      	ldr	r1, [pc, #28]	; (b47bc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b47a0:	f7ff ffd8 	bl	b4754 <_ZN5Print6printfEPKcz>
  }
   b47a4:	b002      	add	sp, #8
   b47a6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b47a8:	4a05      	ldr	r2, [pc, #20]	; (b47c0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b47aa:	e7ef      	b.n	b478c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b47ac:	000bd7b9 	.word	0x000bd7b9
   b47b0:	000bda03 	.word	0x000bda03
   b47b4:	000bd7b5 	.word	0x000bd7b5
   b47b8:	000bd7b1 	.word	0x000bd7b1
   b47bc:	000bd7cf 	.word	0x000bd7cf
   b47c0:	000bd7a8 	.word	0x000bd7a8

000b47c4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b47c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b47c8:	6103      	str	r3, [r0, #16]
{ }
   b47ca:	4770      	bx	lr

000b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b47cc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b47ce:	4c0b      	ldr	r4, [pc, #44]	; (b47fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b47d0:	7821      	ldrb	r1, [r4, #0]
   b47d2:	f3bf 8f5b 	dmb	ish
   b47d6:	f011 0101 	ands.w	r1, r1, #1
   b47da:	d10b      	bne.n	b47f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47dc:	4620      	mov	r0, r4
   b47de:	9101      	str	r1, [sp, #4]
   b47e0:	f7ff fc6a 	bl	b40b8 <__cxa_guard_acquire>
   b47e4:	9901      	ldr	r1, [sp, #4]
   b47e6:	b128      	cbz	r0, b47f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47e8:	4805      	ldr	r0, [pc, #20]	; (b4800 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47ea:	f004 fd45 	bl	b9278 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b47ee:	4620      	mov	r0, r4
   b47f0:	f7ff fc67 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b47f4:	4802      	ldr	r0, [pc, #8]	; (b4800 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47f6:	b002      	add	sp, #8
   b47f8:	bd10      	pop	{r4, pc}
   b47fa:	bf00      	nop
   b47fc:	2003e4b0 	.word	0x2003e4b0
   b4800:	2003e4b4 	.word	0x2003e4b4

000b4804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4804:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4806:	f7ff ffe1 	bl	b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b480a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b480e:	f004 bd51 	b.w	b92b4 <_ZN8SPIClass14endTransactionEv>

000b4812 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4812:	b507      	push	{r0, r1, r2, lr}
   b4814:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4816:	f7ff ffd9 	bl	b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b481a:	9901      	ldr	r1, [sp, #4]
    }
   b481c:	b003      	add	sp, #12
   b481e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4822:	f004 bd61 	b.w	b92e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4826 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b482a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b482e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4830:	4605      	mov	r5, r0
   b4832:	460f      	mov	r7, r1
    if (_sck == -1)
   b4834:	d106      	bne.n	b4844 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4836:	f7ff ffc9 	bl	b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b483a:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b483c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4840:	f004 bdc0 	b.w	b93c4 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4844:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4846:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4848:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b484c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4850:	2100      	movs	r1, #0
   b4852:	b280      	uxth	r0, r0
   b4854:	f005 fe0b 	bl	ba46e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4858:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b485c:	fa08 f106 	lsl.w	r1, r8, r6
   b4860:	4039      	ands	r1, r7
   b4862:	b280      	uxth	r0, r0
   b4864:	f005 fe03 	bl	ba46e <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4868:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b486c:	2101      	movs	r1, #1
   b486e:	b280      	uxth	r0, r0
   b4870:	f005 fdfd 	bl	ba46e <digitalWrite>
        if (digitalRead(_miso))
   b4874:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4878:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b487a:	b280      	uxth	r0, r0
        reply <<= 1;
   b487c:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b487e:	f005 fe0f 	bl	ba4a0 <digitalRead>
   b4882:	b108      	cbz	r0, b4888 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4884:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4888:	3e01      	subs	r6, #1
   b488a:	d2df      	bcs.n	b484c <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b488c:	4620      	mov	r0, r4
   b488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4894 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4896:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b489a:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b489c:	4604      	mov	r4, r0
   b489e:	460e      	mov	r6, r1
   b48a0:	4615      	mov	r5, r2
    if (_cs == -1) {
   b48a2:	d113      	bne.n	b48cc <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b48a4:	7901      	ldrb	r1, [r0, #4]
   b48a6:	6800      	ldr	r0, [r0, #0]
   b48a8:	f003 f8a0 	bl	b79ec <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b48ac:	6820      	ldr	r0, [r4, #0]
   b48ae:	6803      	ldr	r3, [r0, #0]
   b48b0:	4631      	mov	r1, r6
   b48b2:	689b      	ldr	r3, [r3, #8]
   b48b4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b48b6:	6820      	ldr	r0, [r4, #0]
   b48b8:	6803      	ldr	r3, [r0, #0]
   b48ba:	4629      	mov	r1, r5
   b48bc:	689b      	ldr	r3, [r3, #8]
   b48be:	4798      	blx	r3
        _wire -> endTransmission();
   b48c0:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b48c2:	b004      	add	sp, #16
   b48c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b48c8:	f003 b8b0 	b.w	b7a2c <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b48cc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48d0:	3301      	adds	r3, #1
   b48d2:	d10c      	bne.n	b48ee <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b48d4:	4b16      	ldr	r3, [pc, #88]	; (b4930 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b48d6:	9300      	str	r3, [sp, #0]
   b48d8:	2300      	movs	r3, #0
   b48da:	f88d 3004 	strb.w	r3, [sp, #4]
   b48de:	4b15      	ldr	r3, [pc, #84]	; (b4934 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b48e0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48e2:	4668      	mov	r0, sp
   b48e4:	2301      	movs	r3, #1
   b48e6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48ea:	f7ff ff92 	bl	b4812 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48ee:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48f2:	2100      	movs	r1, #0
   b48f4:	b280      	uxth	r0, r0
   b48f6:	f005 fdba 	bl	ba46e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b48fa:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b48fe:	4620      	mov	r0, r4
   b4900:	f7ff ff91 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4904:	4629      	mov	r1, r5
   b4906:	4620      	mov	r0, r4
   b4908:	f7ff ff8d 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b490c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4910:	2101      	movs	r1, #1
   b4912:	b280      	uxth	r0, r0
   b4914:	f005 fdab 	bl	ba46e <digitalWrite>
    if (_sck == -1)
   b4918:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b491c:	3301      	adds	r3, #1
   b491e:	d104      	bne.n	b492a <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4920:	b004      	add	sp, #16
   b4922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4926:	f7ff bf6d 	b.w	b4804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b492a:	b004      	add	sp, #16
   b492c:	bd70      	pop	{r4, r5, r6, pc}
   b492e:	bf00      	nop
   b4930:	000bd7f4 	.word	0x000bd7f4
   b4934:	0007a120 	.word	0x0007a120

000b4938 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b493a:	00db      	lsls	r3, r3, #3
   b493c:	f002 0207 	and.w	r2, r2, #7
   b4940:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4944:	4313      	orrs	r3, r2
   b4946:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b494a:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b494e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4952:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4956:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b495a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b495e:	f366 1347 	bfi	r3, r6, #5, #3
   b4962:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4966:	00ed      	lsls	r5, r5, #3
   b4968:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b496c:	f007 0707 	and.w	r7, r7, #7
   b4970:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4978:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b497a:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b497c:	431d      	orrs	r5, r3
   b497e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4982:	f006 0207 	and.w	r2, r6, #7
   b4986:	21f2      	movs	r1, #242	; 0xf2
   b4988:	f7ff ff84 	bl	b4894 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b498c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4990:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4994:	f002 0107 	and.w	r1, r2, #7
   b4998:	009b      	lsls	r3, r3, #2
   b499a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b499e:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b49a2:	4620      	mov	r0, r4
   b49a4:	21f5      	movs	r1, #245	; 0xf5
   b49a6:	f7ff ff75 	bl	b4894 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b49aa:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b49ae:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b49b2:	f002 0107 	and.w	r1, r2, #7
   b49b6:	009b      	lsls	r3, r3, #2
   b49b8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b49bc:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b49c0:	4620      	mov	r0, r4
   b49c2:	21f4      	movs	r1, #244	; 0xf4
}
   b49c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b49c8:	f7ff bf64 	b.w	b4894 <_ZN15Adafruit_BME2806write8Ehh>

000b49cc <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b49cc:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b49ce:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49d2:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b49d4:	b085      	sub	sp, #20
   b49d6:	4604      	mov	r4, r0
   b49d8:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49da:	d118      	bne.n	b4a0e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49dc:	7901      	ldrb	r1, [r0, #4]
   b49de:	6800      	ldr	r0, [r0, #0]
   b49e0:	f003 f804 	bl	b79ec <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49e4:	6820      	ldr	r0, [r4, #0]
   b49e6:	6803      	ldr	r3, [r0, #0]
   b49e8:	4629      	mov	r1, r5
   b49ea:	689b      	ldr	r3, [r3, #8]
   b49ec:	4798      	blx	r3
        _wire -> endTransmission();
   b49ee:	6820      	ldr	r0, [r4, #0]
   b49f0:	f003 f81c 	bl	b7a2c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b49f4:	7921      	ldrb	r1, [r4, #4]
   b49f6:	6820      	ldr	r0, [r4, #0]
   b49f8:	2201      	movs	r2, #1
   b49fa:	f002 fff4 	bl	b79e6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b49fe:	6820      	ldr	r0, [r4, #0]
   b4a00:	6803      	ldr	r3, [r0, #0]
   b4a02:	695b      	ldr	r3, [r3, #20]
   b4a04:	4798      	blx	r3
   b4a06:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4a08:	4628      	mov	r0, r5
   b4a0a:	b005      	add	sp, #20
   b4a0c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a0e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a12:	3301      	adds	r3, #1
   b4a14:	d10c      	bne.n	b4a30 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4a16:	4b15      	ldr	r3, [pc, #84]	; (b4a6c <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4a18:	9300      	str	r3, [sp, #0]
   b4a1a:	2300      	movs	r3, #0
   b4a1c:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a20:	4b13      	ldr	r3, [pc, #76]	; (b4a70 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4a22:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a24:	4668      	mov	r0, sp
   b4a26:	2301      	movs	r3, #1
   b4a28:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a2c:	f7ff fef1 	bl	b4812 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a30:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a34:	2100      	movs	r1, #0
   b4a36:	b280      	uxth	r0, r0
   b4a38:	f005 fd19 	bl	ba46e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a3c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a40:	4620      	mov	r0, r4
   b4a42:	f7ff fef0 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4a46:	2100      	movs	r1, #0
   b4a48:	4620      	mov	r0, r4
   b4a4a:	f7ff feec 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
   b4a4e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4a50:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a54:	2101      	movs	r1, #1
   b4a56:	b280      	uxth	r0, r0
   b4a58:	f005 fd09 	bl	ba46e <digitalWrite>
        if (_sck == -1)
   b4a5c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a60:	3301      	adds	r3, #1
   b4a62:	d1d1      	bne.n	b4a08 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4a64:	f7ff fece 	bl	b4804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a68:	e7ce      	b.n	b4a08 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4a6a:	bf00      	nop
   b4a6c:	000bd7f4 	.word	0x000bd7f4
   b4a70:	0007a120 	.word	0x0007a120

000b4a74 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4a74:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4a76:	21f3      	movs	r1, #243	; 0xf3
   b4a78:	f7ff ffa8 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4a7c:	f000 0001 	and.w	r0, r0, #1
   b4a80:	bd08      	pop	{r3, pc}
	...

000b4a84 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a84:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a86:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a8a:	3301      	adds	r3, #1
{
   b4a8c:	b085      	sub	sp, #20
   b4a8e:	4604      	mov	r4, r0
   b4a90:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a92:	d11f      	bne.n	b4ad4 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a94:	7901      	ldrb	r1, [r0, #4]
   b4a96:	6800      	ldr	r0, [r0, #0]
   b4a98:	f002 ffa8 	bl	b79ec <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a9c:	6820      	ldr	r0, [r4, #0]
   b4a9e:	6803      	ldr	r3, [r0, #0]
   b4aa0:	4629      	mov	r1, r5
   b4aa2:	689b      	ldr	r3, [r3, #8]
   b4aa4:	4798      	blx	r3
        _wire -> endTransmission();
   b4aa6:	6820      	ldr	r0, [r4, #0]
   b4aa8:	f002 ffc0 	bl	b7a2c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4aac:	7921      	ldrb	r1, [r4, #4]
   b4aae:	6820      	ldr	r0, [r4, #0]
   b4ab0:	2202      	movs	r2, #2
   b4ab2:	f002 ff98 	bl	b79e6 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4ab6:	6820      	ldr	r0, [r4, #0]
   b4ab8:	6803      	ldr	r3, [r0, #0]
   b4aba:	695b      	ldr	r3, [r3, #20]
   b4abc:	4798      	blx	r3
   b4abe:	4605      	mov	r5, r0
   b4ac0:	6820      	ldr	r0, [r4, #0]
   b4ac2:	6803      	ldr	r3, [r0, #0]
   b4ac4:	695b      	ldr	r3, [r3, #20]
   b4ac6:	4798      	blx	r3
   b4ac8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4acc:	b285      	uxth	r5, r0
}
   b4ace:	4628      	mov	r0, r5
   b4ad0:	b005      	add	sp, #20
   b4ad2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4ad4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ad8:	3301      	adds	r3, #1
   b4ada:	d10c      	bne.n	b4af6 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4adc:	4b18      	ldr	r3, [pc, #96]	; (b4b40 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4ade:	9300      	str	r3, [sp, #0]
   b4ae0:	2300      	movs	r3, #0
   b4ae2:	f88d 3004 	strb.w	r3, [sp, #4]
   b4ae6:	4b17      	ldr	r3, [pc, #92]	; (b4b44 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4ae8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4aea:	4668      	mov	r0, sp
   b4aec:	2301      	movs	r3, #1
   b4aee:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4af2:	f7ff fe8e 	bl	b4812 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4af6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4afa:	2100      	movs	r1, #0
   b4afc:	b280      	uxth	r0, r0
   b4afe:	f005 fcb6 	bl	ba46e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b02:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4b06:	4620      	mov	r0, r4
   b4b08:	f7ff fe8d 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4b0c:	2100      	movs	r1, #0
   b4b0e:	4620      	mov	r0, r4
   b4b10:	f7ff fe89 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
   b4b14:	2100      	movs	r1, #0
   b4b16:	4605      	mov	r5, r0
   b4b18:	4620      	mov	r0, r4
   b4b1a:	f7ff fe84 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
   b4b1e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4b22:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4b24:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b28:	2101      	movs	r1, #1
   b4b2a:	b280      	uxth	r0, r0
   b4b2c:	f005 fc9f 	bl	ba46e <digitalWrite>
        if (_sck == -1)
   b4b30:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b34:	3301      	adds	r3, #1
   b4b36:	d1ca      	bne.n	b4ace <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4b38:	f7ff fe64 	bl	b4804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b3c:	e7c7      	b.n	b4ace <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4b3e:	bf00      	nop
   b4b40:	000bd7f4 	.word	0x000bd7f4
   b4b44:	0007a120 	.word	0x0007a120

000b4b48 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4b48:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4b4a:	f7ff ff9b 	bl	b4a84 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4b4e:	ba40      	rev16	r0, r0
}
   b4b50:	b280      	uxth	r0, r0
   b4b52:	bd08      	pop	{r3, pc}

000b4b54 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4b54:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b56:	2188      	movs	r1, #136	; 0x88
{
   b4b58:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b5a:	f7ff fff5 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b5e:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b60:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4b62:	4620      	mov	r0, r4
   b4b64:	f7ff fff0 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b68:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4b6a:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	f7ff ffeb 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b72:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4b74:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff ffe6 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b7c:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b7e:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff ffe1 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b86:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b88:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff ffdc 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b90:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b92:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff ffd7 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b9a:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b9c:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	f7ff ffd2 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ba4:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4ba6:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff ffcd 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4bae:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4bb0:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4bb2:	4620      	mov	r0, r4
   b4bb4:	f7ff ffc8 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4bb8:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4bba:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	f7ff ffc3 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
   b4bc2:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4bc4:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	f7ff ffbe 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bcc:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4bce:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	f7ff fefb 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4bd6:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bd8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff ffb3 	bl	b4b48 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4be2:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4be4:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4be6:	4620      	mov	r0, r4
   b4be8:	f7ff fef0 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bec:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bf2:	4620      	mov	r0, r4
   b4bf4:	f7ff feea 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
   b4bf8:	21e5      	movs	r1, #229	; 0xe5
   b4bfa:	4605      	mov	r5, r0
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f7ff fee5 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
   b4c02:	f000 030f 	and.w	r3, r0, #15
   b4c06:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4c0a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4c0c:	21e6      	movs	r1, #230	; 0xe6
   b4c0e:	4620      	mov	r0, r4
   b4c10:	f7ff fedc 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
   b4c14:	21e5      	movs	r1, #229	; 0xe5
   b4c16:	4605      	mov	r5, r0
   b4c18:	4620      	mov	r0, r4
   b4c1a:	f7ff fed7 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
   b4c1e:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4c22:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4c26:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4c28:	21e7      	movs	r1, #231	; 0xe7
   b4c2a:	4620      	mov	r0, r4
   b4c2c:	f7ff fece 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
   b4c30:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4c34:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c38 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4c38:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c3a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c3e:	3301      	adds	r3, #1
{
   b4c40:	b085      	sub	sp, #20
   b4c42:	4604      	mov	r4, r0
   b4c44:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c46:	d123      	bne.n	b4c90 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c48:	7901      	ldrb	r1, [r0, #4]
   b4c4a:	6800      	ldr	r0, [r0, #0]
   b4c4c:	f002 fece 	bl	b79ec <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c50:	6820      	ldr	r0, [r4, #0]
   b4c52:	6803      	ldr	r3, [r0, #0]
   b4c54:	4629      	mov	r1, r5
   b4c56:	689b      	ldr	r3, [r3, #8]
   b4c58:	4798      	blx	r3
        _wire -> endTransmission();
   b4c5a:	6820      	ldr	r0, [r4, #0]
   b4c5c:	f002 fee6 	bl	b7a2c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4c60:	7921      	ldrb	r1, [r4, #4]
   b4c62:	6820      	ldr	r0, [r4, #0]
   b4c64:	2203      	movs	r2, #3
   b4c66:	f002 febe 	bl	b79e6 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4c6a:	6820      	ldr	r0, [r4, #0]
   b4c6c:	6803      	ldr	r3, [r0, #0]
   b4c6e:	695b      	ldr	r3, [r3, #20]
   b4c70:	4798      	blx	r3
        value <<= 8;
   b4c72:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c74:	6820      	ldr	r0, [r4, #0]
   b4c76:	6803      	ldr	r3, [r0, #0]
   b4c78:	695b      	ldr	r3, [r3, #20]
   b4c7a:	4798      	blx	r3
   b4c7c:	4328      	orrs	r0, r5
        value <<= 8;
   b4c7e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c80:	6820      	ldr	r0, [r4, #0]
   b4c82:	6803      	ldr	r3, [r0, #0]
   b4c84:	695b      	ldr	r3, [r3, #20]
   b4c86:	4798      	blx	r3
   b4c88:	4305      	orrs	r5, r0
}
   b4c8a:	4628      	mov	r0, r5
   b4c8c:	b005      	add	sp, #20
   b4c8e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c90:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c94:	3301      	adds	r3, #1
   b4c96:	d10c      	bne.n	b4cb2 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c98:	4b1a      	ldr	r3, [pc, #104]	; (b4d04 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c9a:	9300      	str	r3, [sp, #0]
   b4c9c:	2300      	movs	r3, #0
   b4c9e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4ca2:	4b19      	ldr	r3, [pc, #100]	; (b4d08 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4ca4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4ca6:	4668      	mov	r0, sp
   b4ca8:	2301      	movs	r3, #1
   b4caa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4cae:	f7ff fdb0 	bl	b4812 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4cb2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cb6:	2100      	movs	r1, #0
   b4cb8:	b280      	uxth	r0, r0
   b4cba:	f005 fbd8 	bl	ba46e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4cbe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	f7ff fdaf 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4cc8:	2100      	movs	r1, #0
   b4cca:	4620      	mov	r0, r4
   b4ccc:	f7ff fdab 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4cd0:	2100      	movs	r1, #0
        value <<= 8;
   b4cd2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	f7ff fda6 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
   b4cda:	4328      	orrs	r0, r5
        value <<= 8;
   b4cdc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cde:	2100      	movs	r1, #0
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	f7ff fda0 	bl	b4826 <_ZN15Adafruit_BME2807spixferEh>
   b4ce6:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4ce8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cec:	2101      	movs	r1, #1
   b4cee:	b280      	uxth	r0, r0
   b4cf0:	f005 fbbd 	bl	ba46e <digitalWrite>
        if (_sck == -1)
   b4cf4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4cf8:	3301      	adds	r3, #1
   b4cfa:	d1c6      	bne.n	b4c8a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4cfc:	f7ff fd82 	bl	b4804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4d00:	e7c3      	b.n	b4c8a <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4d02:	bf00      	nop
   b4d04:	000bd7f4 	.word	0x000bd7f4
   b4d08:	0007a120 	.word	0x0007a120

000b4d0c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4d0c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4d0e:	21fa      	movs	r1, #250	; 0xfa
{
   b4d10:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4d12:	f7ff ff91 	bl	b4c38 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4d16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d1a:	d01f      	beq.n	b4d5c <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d1c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4d1e:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4d64 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d22:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d24:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d28:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4d2c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d30:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d32:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4d36:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4d3a:	131b      	asrs	r3, r3, #12
   b4d3c:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d3e:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4d40:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4d44:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4d4a:	3380      	adds	r3, #128	; 0x80
   b4d4c:	121b      	asrs	r3, r3, #8
   b4d4e:	ee07 3a90 	vmov	s15, r3
   b4d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4d56:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4d5a:	bd10      	pop	{r4, pc}
        return NAN;
   b4d5c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4d68 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4d60:	e7fb      	b.n	b4d5a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4d62:	bf00      	nop
   b4d64:	42c80000 	.word	0x42c80000
   b4d68:	7fc00000 	.word	0x7fc00000

000b4d6c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4d6c:	b538      	push	{r3, r4, r5, lr}
   b4d6e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4d70:	f7ff ffcc 	bl	b4d0c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4d74:	21fd      	movs	r1, #253	; 0xfd
   b4d76:	4620      	mov	r0, r4
   b4d78:	f7ff fe84 	bl	b4a84 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4d7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d80:	d038      	beq.n	b4df4 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d82:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d84:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d88:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d8c:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d90:	0509      	lsls	r1, r1, #20
   b4d92:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d96:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d9e:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4da0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4da4:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4da8:	436b      	muls	r3, r5
   b4daa:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4dac:	4369      	muls	r1, r5
   b4dae:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4db0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4db4:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4db6:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4db8:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4dbc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4dc0:	434b      	muls	r3, r1
   b4dc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4dc6:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4dc8:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4dca:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4dcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4dd0:	4352      	muls	r2, r2
   b4dd2:	11d2      	asrs	r2, r2, #7
   b4dd4:	434a      	muls	r2, r1
   b4dd6:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4dda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4dde:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4de2:	bfa8      	it	ge
   b4de4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4de8:	131b      	asrs	r3, r3, #12
   b4dea:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4dee:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4df2:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4dfc <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4df8:	e7fb      	b.n	b4df2 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4dfa:	bf00      	nop
   b4dfc:	7fc00000 	.word	0x7fc00000

000b4e00 <_ZN15Adafruit_BME2804initEv>:
{
   b4e00:	b530      	push	{r4, r5, lr}
   b4e02:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4e04:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4e08:	1c42      	adds	r2, r0, #1
{
   b4e0a:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4e0c:	d119      	bne.n	b4e42 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4e0e:	6820      	ldr	r0, [r4, #0]
   b4e10:	f002 fdba 	bl	b7988 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4e14:	21d0      	movs	r1, #208	; 0xd0
   b4e16:	4620      	mov	r0, r4
   b4e18:	f7ff fdd8 	bl	b49cc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4e1c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4e1e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4e20:	d145      	bne.n	b4eae <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4e22:	4620      	mov	r0, r4
   b4e24:	22b6      	movs	r2, #182	; 0xb6
   b4e26:	21e0      	movs	r1, #224	; 0xe0
   b4e28:	f7ff fd34 	bl	b4894 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4e30:	f002 f898 	bl	b6f64 <delay>
    while (isReadingCalibration())
   b4e34:	4620      	mov	r0, r4
   b4e36:	f7ff fe1d 	bl	b4a74 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4e3a:	4605      	mov	r5, r0
   b4e3c:	b328      	cbz	r0, b4e8a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4e3e:	2064      	movs	r0, #100	; 0x64
   b4e40:	e7f6      	b.n	b4e30 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4e42:	2101      	movs	r1, #1
   b4e44:	b280      	uxth	r0, r0
   b4e46:	f005 fb12 	bl	ba46e <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4e4a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e4e:	2101      	movs	r1, #1
   b4e50:	b280      	uxth	r0, r0
   b4e52:	f005 fafb 	bl	ba44c <pinMode>
        if (_sck == -1) {
   b4e56:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4e5a:	1c43      	adds	r3, r0, #1
   b4e5c:	d104      	bne.n	b4e68 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4e5e:	f7ff fcb5 	bl	b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4e62:	f004 fa13 	bl	b928c <_ZN8SPIClass5beginEv>
    }
   b4e66:	e7d5      	b.n	b4e14 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4e68:	2101      	movs	r1, #1
   b4e6a:	b280      	uxth	r0, r0
   b4e6c:	f005 faee 	bl	ba44c <pinMode>
            pinMode(_mosi, OUTPUT);
   b4e70:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4e74:	2101      	movs	r1, #1
   b4e76:	b280      	uxth	r0, r0
   b4e78:	f005 fae8 	bl	ba44c <pinMode>
            pinMode(_miso, INPUT);
   b4e7c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4e80:	2100      	movs	r1, #0
   b4e82:	b280      	uxth	r0, r0
   b4e84:	f005 fae2 	bl	ba44c <pinMode>
   b4e88:	e7c4      	b.n	b4e14 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4e8a:	4620      	mov	r0, r4
   b4e8c:	f7ff fe62 	bl	b4b54 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4e90:	2305      	movs	r3, #5
   b4e92:	9300      	str	r3, [sp, #0]
   b4e94:	461a      	mov	r2, r3
   b4e96:	2103      	movs	r1, #3
   b4e98:	4620      	mov	r0, r4
   b4e9a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4e9e:	f7ff fd4b 	bl	b4938 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4ea2:	2064      	movs	r0, #100	; 0x64
   b4ea4:	f002 f85e 	bl	b6f64 <delay>
    return true;
   b4ea8:	2001      	movs	r0, #1
}
   b4eaa:	b005      	add	sp, #20
   b4eac:	bd30      	pop	{r4, r5, pc}
        return false;
   b4eae:	2000      	movs	r0, #0
   b4eb0:	e7fb      	b.n	b4eaa <_ZN15Adafruit_BME2804initEv+0xaa>

000b4eb2 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4eb2:	2377      	movs	r3, #119	; 0x77
{
   b4eb4:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4eb6:	7103      	strb	r3, [r0, #4]
{
   b4eb8:	4604      	mov	r4, r0
	_wire = &Wire;
   b4eba:	f005 fb33 	bl	ba524 <_Z19__fetch_global_Wirev>
   b4ebe:	6020      	str	r0, [r4, #0]
	status = init();
   b4ec0:	4620      	mov	r0, r4
   b4ec2:	f7ff ff9d 	bl	b4e00 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4ec6:	b930      	cbnz	r0, b4ed6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4ec8:	2376      	movs	r3, #118	; 0x76
   b4eca:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4ecc:	4620      	mov	r0, r4
}
   b4ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4ed2:	f7ff bf95 	b.w	b4e00 <_ZN15Adafruit_BME2804initEv>
}
   b4ed6:	bd10      	pop	{r4, pc}

000b4ed8 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   b4ed8:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   b4eda:	2102      	movs	r1, #2
   b4edc:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   b4ee0:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   b4ee2:	8082      	strh	r2, [r0, #4]
   b4ee4:	6082      	str	r2, [r0, #8]
   b4ee6:	7302      	strb	r2, [r0, #12]
   b4ee8:	8202      	strh	r2, [r0, #16]
   b4eea:	6142      	str	r2, [r0, #20]
   b4eec:	7602      	strb	r2, [r0, #24]
   b4eee:	8382      	strh	r2, [r0, #28]
   b4ef0:	6202      	str	r2, [r0, #32]
   b4ef2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b4ef6:	8502      	strh	r2, [r0, #40]	; 0x28
   b4ef8:	62c2      	str	r2, [r0, #44]	; 0x2c
   b4efa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   b4efe:	8702      	strh	r2, [r0, #56]	; 0x38
   b4f00:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   b4f02:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   b4f06:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   b4f08:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   b4f0c:	6602      	str	r2, [r0, #96]	; 0x60
   b4f0e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   b4f12:	6702      	str	r2, [r0, #112]	; 0x70
   b4f14:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   b4f18:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   b4f1c:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   b4f20:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   b4f24:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   b4f28:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   b4f2c:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   b4f30:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   b4f34:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   b4f38:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   b4f3c:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   b4f40:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   b4f44:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   b4f48:	4770      	bx	lr

000b4f4a <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   b4f4a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b4f4e:	2b05      	cmp	r3, #5
   b4f50:	d802      	bhi.n	b4f58 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   b4f52:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   b4f56:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   b4f58:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b4f5c:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   b4f5e:	bf94      	ite	ls
   b4f60:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   b4f64:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   b4f68:	4770      	bx	lr

000b4f6a <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   b4f6a:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   b4f6c:	7805      	ldrb	r5, [r0, #0]
{
   b4f6e:	4604      	mov	r4, r0
  if (negative) ++term;
   b4f70:	2d2d      	cmp	r5, #45	; 0x2d
   b4f72:	bf08      	it	eq
   b4f74:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   b4f76:	4620      	mov	r0, r4
   b4f78:	f006 fa5d 	bl	bb436 <atol>
   b4f7c:	2364      	movs	r3, #100	; 0x64
   b4f7e:	4358      	muls	r0, r3
   b4f80:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   b4f82:	f814 3b01 	ldrb.w	r3, [r4], #1
   b4f86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   b4f8a:	2909      	cmp	r1, #9
   b4f8c:	d9f8      	bls.n	b4f80 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   b4f8e:	2b2e      	cmp	r3, #46	; 0x2e
   b4f90:	d10b      	bne.n	b4faa <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   b4f92:	7853      	ldrb	r3, [r2, #1]
   b4f94:	3b30      	subs	r3, #48	; 0x30
   b4f96:	2b09      	cmp	r3, #9
   b4f98:	d807      	bhi.n	b4faa <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   b4f9a:	210a      	movs	r1, #10
   b4f9c:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   b4fa0:	7893      	ldrb	r3, [r2, #2]
   b4fa2:	3b30      	subs	r3, #48	; 0x30
   b4fa4:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   b4fa6:	bf98      	it	ls
   b4fa8:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   b4faa:	2d2d      	cmp	r5, #45	; 0x2d
   b4fac:	bf08      	it	eq
   b4fae:	4240      	negeq	r0, r0
}
   b4fb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4fb4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   b4fb4:	b538      	push	{r3, r4, r5, lr}
   b4fb6:	4604      	mov	r4, r0
   b4fb8:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   b4fba:	f006 fa3c 	bl	bb436 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   b4fbe:	2364      	movs	r3, #100	; 0x64
   b4fc0:	fbb0 f2f3 	udiv	r2, r0, r3
   b4fc4:	fb03 0312 	mls	r3, r3, r2, r0
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   b4fc8:	4811      	ldr	r0, [pc, #68]	; (b5010 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   b4fca:	802a      	strh	r2, [r5, #0]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   b4fcc:	4343      	muls	r3, r0
  deg.deg = (int16_t)(leftOfDecimal / 100);
   b4fce:	4620      	mov	r0, r4

  while (isdigit(*term))
   b4fd0:	7802      	ldrb	r2, [r0, #0]
   b4fd2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   b4fd6:	2c09      	cmp	r4, #9
   b4fd8:	4601      	mov	r1, r0
   b4fda:	f100 0001 	add.w	r0, r0, #1
   b4fde:	d9f7      	bls.n	b4fd0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   b4fe0:	2a2e      	cmp	r2, #46	; 0x2e
   b4fe2:	d10b      	bne.n	b4ffc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   b4fe4:	480a      	ldr	r0, [pc, #40]	; (b5010 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   b4fe6:	240a      	movs	r4, #10
    while (isdigit(*++term))
   b4fe8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b4fec:	3a30      	subs	r2, #48	; 0x30
   b4fee:	2a09      	cmp	r2, #9
   b4ff0:	d804      	bhi.n	b4ffc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   b4ff2:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   b4ff6:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   b4ffa:	e7f5      	b.n	b4fe8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   b4ffc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5000:	3301      	adds	r3, #1
   b5002:	2203      	movs	r2, #3
   b5004:	fbb3 f3f2 	udiv	r3, r3, r2
   b5008:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   b500a:	2300      	movs	r3, #0
   b500c:	722b      	strb	r3, [r5, #8]
}
   b500e:	bd38      	pop	{r3, r4, r5, pc}
   b5010:	00989680 	.word	0x00989680

000b5014 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   b5014:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   b5016:	69c3      	ldr	r3, [r0, #28]
   b5018:	6043      	str	r3, [r0, #4]
   b501a:	6a03      	ldr	r3, [r0, #32]
   b501c:	6083      	str	r3, [r0, #8]
   b501e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   b5022:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   b5024:	6a83      	ldr	r3, [r0, #40]	; 0x28
   b5026:	6103      	str	r3, [r0, #16]
   b5028:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b502a:	6143      	str	r3, [r0, #20]
   b502c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   b5030:	7603      	strb	r3, [r0, #24]
{
   b5032:	4604      	mov	r4, r0
   b5034:	f001 fc70 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b5038:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b503c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   b503e:	8023      	strh	r3, [r4, #0]
}
   b5040:	bd10      	pop	{r4, pc}
   b5042:	0000      	movs	r0, r0
   b5044:	0000      	movs	r0, r0
	...

000b5048 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   b5048:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   b504a:	2300      	movs	r3, #0
{
   b504c:	4604      	mov	r4, r0
   updated = false;
   b504e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   b5050:	6880      	ldr	r0, [r0, #8]
   b5052:	f005 fe07 	bl	bac64 <__aeabi_ui2d>
   b5056:	a30c      	add	r3, pc, #48	; (adr r3, b5088 <_ZN15TinyGPSLocation3latEv+0x40>)
   b5058:	e9d3 2300 	ldrd	r2, r3, [r3]
   b505c:	f005 ffa6 	bl	bafac <__aeabi_ddiv>
   b5060:	4606      	mov	r6, r0
   b5062:	88a0      	ldrh	r0, [r4, #4]
   b5064:	460f      	mov	r7, r1
   b5066:	f005 fe0d 	bl	bac84 <__aeabi_i2d>
   b506a:	460b      	mov	r3, r1
   b506c:	4602      	mov	r2, r0
   b506e:	4639      	mov	r1, r7
   b5070:	4630      	mov	r0, r6
   b5072:	f005 fcbb 	bl	ba9ec <__adddf3>
   return rawLatData.negative ? -ret : ret;
   b5076:	7b23      	ldrb	r3, [r4, #12]
   b5078:	b113      	cbz	r3, b5080 <_ZN15TinyGPSLocation3latEv+0x38>
   b507a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b507e:	4619      	mov	r1, r3
}
   b5080:	ec41 0b10 	vmov	d0, r0, r1
   b5084:	bdd0      	pop	{r4, r6, r7, pc}
   b5086:	bf00      	nop
   b5088:	00000000 	.word	0x00000000
   b508c:	41cdcd65 	.word	0x41cdcd65

000b5090 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   b5090:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   b5092:	2300      	movs	r3, #0
{
   b5094:	4604      	mov	r4, r0
   updated = false;
   b5096:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   b5098:	6940      	ldr	r0, [r0, #20]
   b509a:	f005 fde3 	bl	bac64 <__aeabi_ui2d>
   b509e:	a30c      	add	r3, pc, #48	; (adr r3, b50d0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   b50a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b50a4:	f005 ff82 	bl	bafac <__aeabi_ddiv>
   b50a8:	4606      	mov	r6, r0
   b50aa:	8a20      	ldrh	r0, [r4, #16]
   b50ac:	460f      	mov	r7, r1
   b50ae:	f005 fde9 	bl	bac84 <__aeabi_i2d>
   b50b2:	460b      	mov	r3, r1
   b50b4:	4602      	mov	r2, r0
   b50b6:	4639      	mov	r1, r7
   b50b8:	4630      	mov	r0, r6
   b50ba:	f005 fc97 	bl	ba9ec <__adddf3>
   return rawLngData.negative ? -ret : ret;
   b50be:	7e23      	ldrb	r3, [r4, #24]
   b50c0:	b113      	cbz	r3, b50c8 <_ZN15TinyGPSLocation3lngEv+0x38>
   b50c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b50c6:	4619      	mov	r1, r3
}
   b50c8:	ec41 0b10 	vmov	d0, r0, r1
   b50cc:	bdd0      	pop	{r4, r6, r7, pc}
   b50ce:	bf00      	nop
   b50d0:	00000000 	.word	0x00000000
   b50d4:	41cdcd65 	.word	0x41cdcd65

000b50d8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   b50d8:	b510      	push	{r4, lr}
   date = newDate;
   b50da:	6883      	ldr	r3, [r0, #8]
   b50dc:	6043      	str	r3, [r0, #4]
{
   b50de:	4604      	mov	r4, r0
   b50e0:	f001 fc1a 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b50e4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b50e8:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   b50ea:	8023      	strh	r3, [r4, #0]
}
   b50ec:	bd10      	pop	{r4, pc}

000b50ee <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   b50ee:	b510      	push	{r4, lr}
   time = newTime;
   b50f0:	6883      	ldr	r3, [r0, #8]
   b50f2:	6043      	str	r3, [r0, #4]
{
   b50f4:	4604      	mov	r4, r0
   b50f6:	f001 fc0f 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b50fa:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b50fe:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   b5100:	8023      	strh	r3, [r4, #0]
}
   b5102:	bd10      	pop	{r4, pc}

000b5104 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   b5104:	b510      	push	{r4, lr}
   b5106:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   b5108:	4608      	mov	r0, r1
   b510a:	f7ff ff2e 	bl	b4f6a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   b510e:	60a0      	str	r0, [r4, #8]
}
   b5110:	bd10      	pop	{r4, pc}

000b5112 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   b5112:	b510      	push	{r4, lr}
   b5114:	4604      	mov	r4, r0
   newDate = atol(term);
   b5116:	4608      	mov	r0, r1
   b5118:	f006 f98d 	bl	bb436 <atol>
   b511c:	60a0      	str	r0, [r4, #8]
}
   b511e:	bd10      	pop	{r4, pc}

000b5120 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   b5120:	b510      	push	{r4, lr}
   val = newval;
   b5122:	68c3      	ldr	r3, [r0, #12]
   b5124:	6083      	str	r3, [r0, #8]
{
   b5126:	4604      	mov	r4, r0
   b5128:	f001 fbf6 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b512c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b5130:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   b5132:	8023      	strh	r3, [r4, #0]
}
   b5134:	bd10      	pop	{r4, pc}

000b5136 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   b5136:	b510      	push	{r4, lr}
   b5138:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   b513a:	4608      	mov	r0, r1
   b513c:	f7ff ff15 	bl	b4f6a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   b5140:	60e0      	str	r0, [r4, #12]
}
   b5142:	bd10      	pop	{r4, pc}

000b5144 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   b5144:	b510      	push	{r4, lr}
   val = newval;
   b5146:	68c3      	ldr	r3, [r0, #12]
   b5148:	6083      	str	r3, [r0, #8]
{
   b514a:	4604      	mov	r4, r0
   b514c:	f001 fbe4 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b5150:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b5154:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   b5156:	8023      	strh	r3, [r4, #0]
}
   b5158:	bd10      	pop	{r4, pc}

000b515a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   b515a:	b510      	push	{r4, lr}
   b515c:	4604      	mov	r4, r0
   newval = atol(term);
   b515e:	4608      	mov	r0, r1
   b5160:	f006 f969 	bl	bb436 <atol>
   b5164:	60e0      	str	r0, [r4, #12]
}
   b5166:	bd10      	pop	{r4, pc}

000b5168 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   b5168:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   b516a:	4601      	mov	r1, r0
{
   b516c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   b516e:	3010      	adds	r0, #16
   b5170:	f006 f9ed 	bl	bb54e <strcpy>
   b5174:	f001 fbd0 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   b5178:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   b517c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   b517e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   b5180:	bd10      	pop	{r4, pc}

000b5182 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   b5182:	2210      	movs	r2, #16
   b5184:	f006 ba25 	b.w	bb5d2 <strncpy>

000b5188 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   b5188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   b518a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   b518e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   b5190:	2d00      	cmp	r5, #0
   b5192:	d064      	beq.n	b525e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   b5194:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   b5198:	f7ff fed7 	bl	b4f4a <_ZN11TinyGPSPlus7fromHexEc>
   b519c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   b51a0:	4602      	mov	r2, r0
   b51a2:	4620      	mov	r0, r4
   b51a4:	f7ff fed1 	bl	b4f4a <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   b51a8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   b51ac:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   b51b0:	b2c0      	uxtb	r0, r0
   b51b2:	4283      	cmp	r3, r0
   b51b4:	d14b      	bne.n	b524e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   b51b6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   b51ba:	3301      	adds	r3, #1
   b51bc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   b51c0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b51c4:	b123      	cbz	r3, b51d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   b51c6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   b51ca:	3301      	adds	r3, #1
   b51cc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   b51d0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   b51d4:	b333      	cbz	r3, b5224 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   b51d6:	2b01      	cmp	r3, #1
   b51d8:	d115      	bne.n	b5206 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   b51da:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b51de:	f7ff ff7b 	bl	b50d8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   b51e2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b51e6:	f7ff ff82 	bl	b50ee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   b51ea:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b51ee:	b153      	cbz	r3, b5206 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   b51f0:	4620      	mov	r0, r4
   b51f2:	f7ff ff0f 	bl	b5014 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   b51f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b51fa:	f7ff ff91 	bl	b5120 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   b51fe:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   b5202:	f7ff ff8d 	bl	b5120 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   b5206:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   b520a:	b336      	cbz	r6, b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b520c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   b5210:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   b5212:	6a99      	ldr	r1, [r3, #40]	; 0x28
   b5214:	f006 f991 	bl	bb53a <strcmp>
   b5218:	b9f8      	cbnz	r0, b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   b521a:	4630      	mov	r0, r6
   b521c:	f7ff ffa4 	bl	b5168 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   b5220:	6b36      	ldr	r6, [r6, #48]	; 0x30
   b5222:	e7f2      	b.n	b520a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   b5224:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5228:	f7ff ff61 	bl	b50ee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   b522c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   b5230:	b133      	cbz	r3, b5240 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   b5232:	4620      	mov	r0, r4
   b5234:	f7ff feee 	bl	b5014 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   b5238:	f104 0078 	add.w	r0, r4, #120	; 0x78
   b523c:	f7ff ff70 	bl	b5120 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   b5240:	f104 0088 	add.w	r0, r4, #136	; 0x88
   b5244:	f7ff ff7e 	bl	b5144 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   b5248:	f104 0098 	add.w	r0, r4, #152	; 0x98
   b524c:	e7d9      	b.n	b5202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   b524e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   b5252:	3301      	adds	r3, #1
   b5254:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   b5258:	2500      	movs	r5, #0
}
   b525a:	4628      	mov	r0, r5
   b525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   b525e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   b5262:	bb6a      	cbnz	r2, b52c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   b5264:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   b5268:	495a      	ldr	r1, [pc, #360]	; (b53d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   b526a:	4630      	mov	r0, r6
   b526c:	f006 f965 	bl	bb53a <strcmp>
   b5270:	b120      	cbz	r0, b527c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   b5272:	4959      	ldr	r1, [pc, #356]	; (b53d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   b5274:	4630      	mov	r0, r6
   b5276:	f006 f960 	bl	bb53a <strcmp>
   b527a:	b998      	cbnz	r0, b52a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   b527c:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   b527e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   b5282:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b5286:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   b528a:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   b528e:	2f00      	cmp	r7, #0
   b5290:	d0e3      	beq.n	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b5292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   b5294:	4631      	mov	r1, r6
   b5296:	f006 f950 	bl	bb53a <strcmp>
   b529a:	2800      	cmp	r0, #0
   b529c:	f280 8094 	bge.w	b53c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   b52a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   b52a2:	e7f0      	b.n	b5286 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   b52a4:	494d      	ldr	r1, [pc, #308]	; (b53dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   b52a6:	4630      	mov	r0, r6
   b52a8:	f006 f947 	bl	bb53a <strcmp>
   b52ac:	b120      	cbz	r0, b52b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   b52ae:	494c      	ldr	r1, [pc, #304]	; (b53e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   b52b0:	4630      	mov	r0, r6
   b52b2:	f006 f942 	bl	bb53a <strcmp>
   b52b6:	b908      	cbnz	r0, b52bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   b52b8:	2300      	movs	r3, #0
   b52ba:	e7e0      	b.n	b527e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   b52bc:	2302      	movs	r3, #2
   b52be:	e7de      	b.n	b527e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   b52c0:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   b52c4:	2902      	cmp	r1, #2
   b52c6:	d023      	beq.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   b52c8:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   b52cc:	b303      	cbz	r3, b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   b52ce:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   b52d2:	3a01      	subs	r2, #1
   b52d4:	2a28      	cmp	r2, #40	; 0x28
   b52d6:	d81b      	bhi.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   b52d8:	e8df f002 	tbb	[pc, r2]
   b52dc:	49423b15 	.word	0x49423b15
   b52e0:	6e68634c 	.word	0x6e68634c
   b52e4:	1a1a1a72 	.word	0x1a1a1a72
   b52e8:	1a1a1a1a 	.word	0x1a1a1a1a
   b52ec:	1a1a1a1a 	.word	0x1a1a1a1a
   b52f0:	1a1a1a1a 	.word	0x1a1a1a1a
   b52f4:	1a1a1a1a 	.word	0x1a1a1a1a
   b52f8:	1a1a1a1a 	.word	0x1a1a1a1a
   b52fc:	423b3415 	.word	0x423b3415
   b5300:	59534c49 	.word	0x59534c49
   b5304:	5d          	.byte	0x5d
   b5305:	00          	.byte	0x00
      time.setTime(term);
   b5306:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b530a:	3048      	adds	r0, #72	; 0x48
   b530c:	f7ff fefa 	bl	b5104 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b5310:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   b5314:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b5318:	2e00      	cmp	r6, #0
   b531a:	d09e      	beq.n	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b531c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   b5320:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   b5322:	6a99      	ldr	r1, [r3, #40]	; 0x28
   b5324:	f006 f909 	bl	bb53a <strcmp>
   b5328:	2800      	cmp	r0, #0
   b532a:	d196      	bne.n	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b532c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   b532e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   b5332:	429a      	cmp	r2, r3
   b5334:	dc91      	bgt.n	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   b5336:	d103      	bne.n	b5340 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   b5338:	4639      	mov	r1, r7
   b533a:	4630      	mov	r0, r6
   b533c:	f7ff ff21 	bl	b5182 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   b5340:	6b36      	ldr	r6, [r6, #48]	; 0x30
   b5342:	e7e9      	b.n	b5318 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   b5344:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   b5348:	4243      	negs	r3, r0
   b534a:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   b534c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   b5350:	e7de      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   b5352:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   b5356:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   b535a:	f7ff fe2b 	bl	b4fb4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   b535e:	e7d7      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   b5360:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   b5364:	424b      	negs	r3, r1
   b5366:	414b      	adcs	r3, r1
   b5368:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   b536c:	e7d0      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   b536e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5372:	e7f0      	b.n	b5356 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   b5374:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   b5378:	4253      	negs	r3, r2
   b537a:	4153      	adcs	r3, r2
   b537c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   b5380:	e7c6      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   b5382:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b5386:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   b5388:	f7ff fed5 	bl	b5136 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   b538c:	e7c0      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   b538e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b5392:	3068      	adds	r0, #104	; 0x68
   b5394:	e7f8      	b.n	b5388 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   b5396:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b539a:	3038      	adds	r0, #56	; 0x38
   b539c:	f7ff feb9 	bl	b5112 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   b53a0:	e7b6      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   b53a2:	2b30      	cmp	r3, #48	; 0x30
   b53a4:	bf94      	ite	ls
   b53a6:	2300      	movls	r3, #0
   b53a8:	2301      	movhi	r3, #1
   b53aa:	e7cf      	b.n	b534c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   b53ac:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b53b0:	3088      	adds	r0, #136	; 0x88
   b53b2:	f7ff fed2 	bl	b515a <_ZN14TinyGPSInteger3setEPKc>
      break;
   b53b6:	e7ab      	b.n	b5310 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   b53b8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b53bc:	3098      	adds	r0, #152	; 0x98
   b53be:	e7e3      	b.n	b5388 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   b53c0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   b53c4:	3078      	adds	r0, #120	; 0x78
   b53c6:	e7df      	b.n	b5388 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   b53c8:	f43f af47 	beq.w	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   b53cc:	2300      	movs	r3, #0
   b53ce:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   b53d2:	e742      	b.n	b525a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   b53d4:	000bd800 	.word	0x000bd800
   b53d8:	000bd806 	.word	0x000bd806
   b53dc:	000bd80c 	.word	0x000bd80c
   b53e0:	000bd812 	.word	0x000bd812

000b53e4 <_ZN11TinyGPSPlus6encodeEc>:
{
   b53e4:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   b53e6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   b53ea:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   b53ec:	f103 0301 	add.w	r3, r3, #1
{
   b53f0:	4604      	mov	r4, r0
   b53f2:	460d      	mov	r5, r1
  ++encodedCharCount;
   b53f4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   b53f8:	d03a      	beq.n	b5470 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   b53fa:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   b53fe:	d814      	bhi.n	b542a <_ZN11TinyGPSPlus6encodeEc+0x46>
   b5400:	290a      	cmp	r1, #10
   b5402:	d01c      	beq.n	b543e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   b5404:	290d      	cmp	r1, #13
   b5406:	d01a      	beq.n	b543e <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   b5408:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   b540a:	bf9f      	itttt	ls
   b540c:	1c5a      	addls	r2, r3, #1
   b540e:	191b      	addls	r3, r3, r4
   b5410:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   b5414:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   b5418:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   b541c:	bb98      	cbnz	r0, b5486 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   b541e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   b5422:	404d      	eors	r5, r1
   b5424:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   b5428:	e021      	b.n	b546e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   b542a:	292a      	cmp	r1, #42	; 0x2a
   b542c:	d007      	beq.n	b543e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   b542e:	292c      	cmp	r1, #44	; 0x2c
   b5430:	d1ea      	bne.n	b5408 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   b5432:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   b5436:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   b543a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   b543e:	2b0e      	cmp	r3, #14
   b5440:	f04f 0000 	mov.w	r0, #0
   b5444:	d805      	bhi.n	b5452 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   b5446:	4423      	add	r3, r4
   b5448:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   b544c:	4620      	mov	r0, r4
   b544e:	f7ff fe9b 	bl	b5188 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   b5452:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   b5456:	3301      	adds	r3, #1
   b5458:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   b545c:	2300      	movs	r3, #0
   b545e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   b5462:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   b5466:	425d      	negs	r5, r3
   b5468:	415d      	adcs	r5, r3
   b546a:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   b546e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   b5470:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   b5472:	2302      	movs	r3, #2
    parity = 0;
   b5474:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   b5478:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   b547c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   b5480:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   b5484:	e7f3      	b.n	b546e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   b5486:	2000      	movs	r0, #0
   b5488:	e7f1      	b.n	b546e <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000b548c <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   b548c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b548e:	201c      	movs	r0, #28
   b5490:	f7fe fe01 	bl	b4096 <_Znwj>
   b5494:	4604      	mov	r4, r0
   b5496:	b148      	cbz	r0, b54ac <_Z10builderTcpv+0x20>
   b5498:	4b06      	ldr	r3, [pc, #24]	; (b54b4 <_Z10builderTcpv+0x28>)
   b549a:	4907      	ldr	r1, [pc, #28]	; (b54b8 <_Z10builderTcpv+0x2c>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	9300      	str	r3, [sp, #0]
   b54a0:	6809      	ldr	r1, [r1, #0]
   b54a2:	4b06      	ldr	r3, [pc, #24]	; (b54bc <_Z10builderTcpv+0x30>)
   b54a4:	f242 3234 	movw	r2, #9012	; 0x2334
   b54a8:	f000 fe40 	bl	b612c <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   b54ac:	4620      	mov	r0, r4
   b54ae:	b002      	add	sp, #8
   b54b0:	bd10      	pop	{r4, pc}
   b54b2:	bf00      	nop
   b54b4:	2003e544 	.word	0x2003e544
   b54b8:	2003e540 	.word	0x2003e540
   b54bc:	000bd818 	.word	0x000bd818

000b54c0 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   b54c0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   b54c2:	2020      	movs	r0, #32
   b54c4:	f7fe fde7 	bl	b4096 <_Znwj>
   b54c8:	4604      	mov	r4, r0
   b54ca:	b140      	cbz	r0, b54de <_Z11builderHttpv+0x1e>
   b54cc:	4b05      	ldr	r3, [pc, #20]	; (b54e4 <_Z11builderHttpv+0x24>)
   b54ce:	4906      	ldr	r1, [pc, #24]	; (b54e8 <_Z11builderHttpv+0x28>)
   b54d0:	681b      	ldr	r3, [r3, #0]
   b54d2:	9300      	str	r3, [sp, #0]
   b54d4:	6809      	ldr	r1, [r1, #0]
   b54d6:	4b05      	ldr	r3, [pc, #20]	; (b54ec <_Z11builderHttpv+0x2c>)
   b54d8:	2250      	movs	r2, #80	; 0x50
   b54da:	f000 fa41 	bl	b5960 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   b54de:	4620      	mov	r0, r4
   b54e0:	b002      	add	sp, #8
   b54e2:	bd10      	pop	{r4, pc}
   b54e4:	2003e544 	.word	0x2003e544
   b54e8:	2003e540 	.word	0x2003e540
   b54ec:	000bd818 	.word	0x000bd818

000b54f0 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   b54f0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   b54f2:	201c      	movs	r0, #28
   b54f4:	f7fe fdcf 	bl	b4096 <_Znwj>
   b54f8:	4604      	mov	r4, r0
   b54fa:	b148      	cbz	r0, b5510 <_Z10builderUdpv+0x20>
   b54fc:	4b06      	ldr	r3, [pc, #24]	; (b5518 <_Z10builderUdpv+0x28>)
   b54fe:	4907      	ldr	r1, [pc, #28]	; (b551c <_Z10builderUdpv+0x2c>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	9300      	str	r3, [sp, #0]
   b5504:	6809      	ldr	r1, [r1, #0]
   b5506:	4b06      	ldr	r3, [pc, #24]	; (b5520 <_Z10builderUdpv+0x30>)
   b5508:	f242 3234 	movw	r2, #9012	; 0x2334
   b550c:	f001 f91e 	bl	b674c <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   b5510:	4620      	mov	r0, r4
   b5512:	b002      	add	sp, #8
   b5514:	bd10      	pop	{r4, pc}
   b5516:	bf00      	nop
   b5518:	2003e544 	.word	0x2003e544
   b551c:	2003e540 	.word	0x2003e540
   b5520:	000bd818 	.word	0x000bd818

000b5524 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   b5524:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   b5526:	2014      	movs	r0, #20
   b5528:	f7fe fdb5 	bl	b4096 <_Znwj>
   b552c:	4604      	mov	r4, r0
   b552e:	b140      	cbz	r0, b5542 <_Z15builderParticlev+0x1e>
   b5530:	4b05      	ldr	r3, [pc, #20]	; (b5548 <_Z15builderParticlev+0x24>)
   b5532:	4906      	ldr	r1, [pc, #24]	; (b554c <_Z15builderParticlev+0x28>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	9300      	str	r3, [sp, #0]
   b5538:	2300      	movs	r3, #0
   b553a:	6809      	ldr	r1, [r1, #0]
   b553c:	461a      	mov	r2, r3
   b553e:	f000 fd2b 	bl	b5f98 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   b5542:	4620      	mov	r0, r4
   b5544:	b002      	add	sp, #8
   b5546:	bd10      	pop	{r4, pc}
   b5548:	2003e544 	.word	0x2003e544
   b554c:	2003e540 	.word	0x2003e540

000b5550 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b5550:	2a01      	cmp	r2, #1
   b5552:	d102      	bne.n	b555a <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5554:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b5556:	2000      	movs	r0, #0
   b5558:	4770      	bx	lr
	  switch (__op)
   b555a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b555c:	bf04      	itt	eq
   b555e:	680b      	ldreq	r3, [r1, #0]
   b5560:	6003      	streq	r3, [r0, #0]
	      break;
   b5562:	e7f8      	b.n	b5556 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b5564 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5564:	6803      	ldr	r3, [r0, #0]
   b5566:	4718      	bx	r3

000b5568 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5568:	b510      	push	{r4, lr}
      if (_M_manager)
   b556a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b556c:	4604      	mov	r4, r0
      if (_M_manager)
   b556e:	b113      	cbz	r3, b5576 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5570:	2203      	movs	r2, #3
   b5572:	4601      	mov	r1, r0
   b5574:	4798      	blx	r3
    }
   b5576:	4620      	mov	r0, r4
   b5578:	bd10      	pop	{r4, pc}
	...

000b557c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   b557c:	b510      	push	{r4, lr}
   b557e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b5580:	2200      	movs	r2, #0
	operator=(_Functor&& __f)
   b5582:	4603      	mov	r3, r0
    _Function_base() : _M_manager(nullptr) { }
   b5584:	9204      	str	r2, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   b5586:	b121      	cbz	r1, b5592 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b5588:	4a0f      	ldr	r2, [pc, #60]	; (b55c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x4c>)
   b558a:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b558c:	4a0f      	ldr	r2, [pc, #60]	; (b55cc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x50>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b558e:	9102      	str	r1, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b5590:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5592:	aa02      	add	r2, sp, #8
   b5594:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5598:	466c      	mov	r4, sp
   b559a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b559e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b55a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b55a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b55aa:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55ae:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b55b0:	6898      	ldr	r0, [r3, #8]
   b55b2:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b55b4:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b55b6:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55b8:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b55ba:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b55bc:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b55be:	4610      	mov	r0, r2
   b55c0:	f7ff ffd2 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
	}
   b55c4:	b006      	add	sp, #24
   b55c6:	bd10      	pop	{r4, pc}
   b55c8:	000b5565 	.word	0x000b5565
   b55cc:	000b5551 	.word	0x000b5551

000b55d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b55d0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b55d2:	6984      	ldr	r4, [r0, #24]
   b55d4:	4b0a      	ldr	r3, [pc, #40]	; (b5600 <_ZN9TCPClientD1Ev+0x30>)
   b55d6:	6003      	str	r3, [r0, #0]
   b55d8:	4605      	mov	r5, r0
   b55da:	b17c      	cbz	r4, b55fc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b55dc:	6863      	ldr	r3, [r4, #4]
   b55de:	3b01      	subs	r3, #1
   b55e0:	6063      	str	r3, [r4, #4]
   b55e2:	b95b      	cbnz	r3, b55fc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b55e4:	6823      	ldr	r3, [r4, #0]
   b55e6:	4620      	mov	r0, r4
   b55e8:	689b      	ldr	r3, [r3, #8]
   b55ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b55ec:	68a3      	ldr	r3, [r4, #8]
   b55ee:	3b01      	subs	r3, #1
   b55f0:	60a3      	str	r3, [r4, #8]
   b55f2:	b91b      	cbnz	r3, b55fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b55f4:	6823      	ldr	r3, [r4, #0]
   b55f6:	4620      	mov	r0, r4
   b55f8:	68db      	ldr	r3, [r3, #12]
   b55fa:	4798      	blx	r3
   b55fc:	4628      	mov	r0, r5
   b55fe:	bd38      	pop	{r3, r4, r5, pc}
   b5600:	000bde7c 	.word	0x000bde7c

000b5604 <_ZN9TCPClientD0Ev>:
   b5604:	b510      	push	{r4, lr}
   b5606:	4604      	mov	r4, r0
   b5608:	f7ff ffe2 	bl	b55d0 <_ZN9TCPClientD1Ev>
   b560c:	4620      	mov	r0, r4
   b560e:	211c      	movs	r1, #28
   b5610:	f7fe fd45 	bl	b409e <_ZdlPvj>
   b5614:	4620      	mov	r0, r4
   b5616:	bd10      	pop	{r4, pc}

000b5618 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   b5618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   b561c:	f100 0108 	add.w	r1, r0, #8
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b5620:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   b5622:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   b5624:	b14a      	cbz	r2, b563a <_ZN10UbiBuilder7builderEv+0x22>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b5626:	7c17      	ldrb	r7, [r2, #16]
   b5628:	7806      	ldrb	r6, [r0, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b562a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b562e:	42b7      	cmp	r7, r6
   b5630:	bf2a      	itet	cs
   b5632:	4613      	movcs	r3, r2
   b5634:	462a      	movcc	r2, r5
   b5636:	4622      	movcs	r2, r4
   b5638:	e7f4      	b.n	b5624 <_ZN10UbiBuilder7builderEv+0xc>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   b563a:	4299      	cmp	r1, r3
   b563c:	d004      	beq.n	b5648 <_ZN10UbiBuilder7builderEv+0x30>
	      || _M_impl._M_key_compare(__k,
   b563e:	7800      	ldrb	r0, [r0, #0]
   b5640:	7c1a      	ldrb	r2, [r3, #16]
   b5642:	4290      	cmp	r0, r2
   b5644:	bf38      	it	cc
   b5646:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5648:	69da      	ldr	r2, [r3, #28]
   b564a:	b90a      	cbnz	r2, b5650 <_ZN10UbiBuilder7builderEv+0x38>
	__throw_bad_function_call();
   b564c:	f005 f8a9 	bl	ba7a2 <_ZSt25__throw_bad_function_callv>
}
   b5650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5654:	6a1a      	ldr	r2, [r3, #32]
   b5656:	f103 0014 	add.w	r0, r3, #20
   b565a:	4710      	bx	r2

000b565c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b565e:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5660:	4616      	mov	r6, r2
   b5662:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   b5664:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   b5666:	2201      	movs	r2, #1
      while (__x != 0)
   b5668:	b163      	cbz	r3, b5684 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x28>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b566a:	7c1d      	ldrb	r5, [r3, #16]
   b566c:	7832      	ldrb	r2, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b566e:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
   b5672:	4295      	cmp	r5, r2
   b5674:	bf88      	it	hi
   b5676:	2201      	movhi	r2, #1
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b5678:	461d      	mov	r5, r3
   b567a:	bf96      	itet	ls
   b567c:	2200      	movls	r2, #0
   b567e:	463b      	movhi	r3, r7
   b5680:	4603      	movls	r3, r0
   b5682:	e7f1      	b.n	b5668 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   b5684:	b192      	cbz	r2, b56ac <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x50>
	  if (__j == begin())
   b5686:	68ca      	ldr	r2, [r1, #12]
   b5688:	42aa      	cmp	r2, r5
   b568a:	d103      	bne.n	b5694 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b568c:	e9c4 3500 	strd	r3, r5, [r4]
    }
   b5690:	4620      	mov	r0, r4
   b5692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   b5694:	4628      	mov	r0, r5
   b5696:	f005 f827 	bl	ba6e8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b569a:	7833      	ldrb	r3, [r6, #0]
   b569c:	7c02      	ldrb	r2, [r0, #16]
   b569e:	429a      	cmp	r2, r3
   b56a0:	f04f 0300 	mov.w	r3, #0
   b56a4:	d3f2      	bcc.n	b568c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b56a6:	e9c4 0300 	strd	r0, r3, [r4]
   b56aa:	e7f1      	b.n	b5690 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x34>
   b56ac:	4628      	mov	r0, r5
   b56ae:	e7f4      	b.n	b569a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3e>

000b56b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   b56b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
      { return &this->_M_impl._M_header; }
   b56b4:	f100 0904 	add.w	r9, r0, #4
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b56b8:	6885      	ldr	r5, [r0, #8]
   b56ba:	4606      	mov	r6, r0
   b56bc:	460f      	mov	r7, r1
      { return &this->_M_impl._M_header; }
   b56be:	464c      	mov	r4, r9
      while (__x != 0)
   b56c0:	b14d      	cbz	r5, b56d6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x26>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b56c2:	7c28      	ldrb	r0, [r5, #16]
   b56c4:	7839      	ldrb	r1, [r7, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
   b56c6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   b56ca:	4288      	cmp	r0, r1
   b56cc:	bf2a      	itet	cs
   b56ce:	462c      	movcs	r4, r5
   b56d0:	4615      	movcc	r5, r2
   b56d2:	461d      	movcs	r5, r3
   b56d4:	e7f4      	b.n	b56c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   b56d6:	45a1      	cmp	r9, r4
   b56d8:	d003      	beq.n	b56e2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x32>
   b56da:	783a      	ldrb	r2, [r7, #0]
   b56dc:	7c23      	ldrb	r3, [r4, #16]
   b56de:	429a      	cmp	r2, r3
   b56e0:	d22f      	bcs.n	b5742 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x92>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56e2:	2024      	movs	r0, #36	; 0x24
   b56e4:	f7fe fcd7 	bl	b4096 <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   b56e8:	f897 a000 	ldrb.w	sl, [r7]
   b56ec:	f880 a010 	strb.w	sl, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   b56f0:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   b56f2:	45a1      	cmp	r9, r4
   b56f4:	4680      	mov	r8, r0
   b56f6:	61c3      	str	r3, [r0, #28]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
   b56f8:	f100 0210 	add.w	r2, r0, #16
   b56fc:	d126      	bne.n	b574c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x9c>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   b56fe:	6973      	ldr	r3, [r6, #20]
   b5700:	b11b      	cbz	r3, b570a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x5a>
   b5702:	6937      	ldr	r7, [r6, #16]
   b5704:	7c3b      	ldrb	r3, [r7, #16]
   b5706:	4553      	cmp	r3, sl
   b5708:	d309      	bcc.n	b571e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6e>
	    return _M_get_insert_unique_pos(__k);
   b570a:	4631      	mov	r1, r6
   b570c:	a802      	add	r0, sp, #8
   b570e:	f7ff ffa5 	bl	b565c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b5712:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
	    if (__res.second)
   b5716:	2f00      	cmp	r7, #0
   b5718:	d052      	beq.n	b57c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   b571a:	2c00      	cmp	r4, #0
   b571c:	d14e      	bne.n	b57bc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b571e:	45b9      	cmp	r9, r7
   b5720:	d04c      	beq.n	b57bc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
			    || _M_impl._M_key_compare(_S_key(__z),
   b5722:	f898 0010 	ldrb.w	r0, [r8, #16]
   b5726:	7c3b      	ldrb	r3, [r7, #16]
   b5728:	4298      	cmp	r0, r3
   b572a:	bf2c      	ite	cs
   b572c:	2000      	movcs	r0, #0
   b572e:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b5730:	464b      	mov	r3, r9
   b5732:	463a      	mov	r2, r7
   b5734:	4641      	mov	r1, r8
   b5736:	f004 ffd9 	bl	ba6ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b573a:	6973      	ldr	r3, [r6, #20]
   b573c:	3301      	adds	r3, #1
   b573e:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   b5740:	4644      	mov	r4, r8
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   b5742:	f104 0014 	add.w	r0, r4, #20
   b5746:	b004      	add	sp, #16
   b5748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return __x < __y; }
   b574c:	7c23      	ldrb	r3, [r4, #16]
   b574e:	9201      	str	r2, [sp, #4]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   b5750:	4553      	cmp	r3, sl
   b5752:	d918      	bls.n	b5786 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
	  if (__pos._M_node == _M_leftmost()) // begin()
   b5754:	68f3      	ldr	r3, [r6, #12]
   b5756:	429c      	cmp	r4, r3
   b5758:	d009      	beq.n	b576e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
	_M_node = _Rb_tree_decrement(_M_node);
   b575a:	4620      	mov	r0, r4
   b575c:	f004 ffc4 	bl	ba6e8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   b5760:	7c03      	ldrb	r3, [r0, #16]
   b5762:	9a01      	ldr	r2, [sp, #4]
   b5764:	4553      	cmp	r3, sl
   b5766:	d205      	bcs.n	b5774 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc4>
      { return static_cast<_Link_type>(__x->_M_right); }
   b5768:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
   b576a:	b953      	cbnz	r3, b5782 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd2>
   b576c:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   b576e:	4627      	mov	r7, r4
   b5770:	461c      	mov	r4, r3
   b5772:	e7d0      	b.n	b5716 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b5774:	4631      	mov	r1, r6
   b5776:	a802      	add	r0, sp, #8
   b5778:	f7ff ff70 	bl	b565c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b577c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   b5780:	e7f5      	b.n	b576e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
   b5782:	4623      	mov	r3, r4
   b5784:	e7f3      	b.n	b576e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xbe>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   b5786:	d21b      	bcs.n	b57c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
	  if (__pos._M_node == _M_rightmost())
   b5788:	6937      	ldr	r7, [r6, #16]
   b578a:	42bc      	cmp	r4, r7
   b578c:	d00b      	beq.n	b57a6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
	_M_node = _Rb_tree_increment(_M_node);
   b578e:	4620      	mov	r0, r4
   b5790:	f004 ffa8 	bl	ba6e4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b5794:	7c03      	ldrb	r3, [r0, #16]
   b5796:	9a01      	ldr	r2, [sp, #4]
   b5798:	4553      	cmp	r3, sl
	_M_node = _Rb_tree_increment(_M_node);
   b579a:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   b579c:	d905      	bls.n	b57aa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
   b579e:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
   b57a0:	b953      	cbnz	r3, b57b8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x108>
   b57a2:	4627      	mov	r7, r4
   b57a4:	461d      	mov	r5, r3
   b57a6:	462c      	mov	r4, r5
   b57a8:	e7b5      	b.n	b5716 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x66>
	    return _M_get_insert_unique_pos(__k);
   b57aa:	4631      	mov	r1, r6
   b57ac:	a802      	add	r0, sp, #8
   b57ae:	f7ff ff55 	bl	b565c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   b57b2:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
   b57b6:	e7f6      	b.n	b57a6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
   b57b8:	4607      	mov	r7, r0
   b57ba:	e7f4      	b.n	b57a6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xf6>
			    || _M_impl._M_key_compare(_S_key(__z),
   b57bc:	2001      	movs	r0, #1
   b57be:	e7b7      	b.n	b5730 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x80>
    class function<_Res(_ArgTypes...)>
   b57c0:	f108 0014 	add.w	r0, r8, #20
   b57c4:	f7ff fed0 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b57c8:	4640      	mov	r0, r8
   b57ca:	2124      	movs	r1, #36	; 0x24
   b57cc:	f7fe fc67 	bl	b409e <_ZdlPvj>
   b57d0:	46a0      	mov	r8, r4
   b57d2:	e7b5      	b.n	b5740 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x90>

000b57d4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   b57d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b57d8:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   b57da:	2600      	movs	r6, #0
   b57dc:	4617      	mov	r7, r2
	  : _Node_allocator()
   b57de:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   b57e2:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   b57e6:	e9c0 2605 	strd	r2, r6, [r0, #20]
   b57ea:	4604      	mov	r4, r0
   b57ec:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   b57ee:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   b57f0:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   b57f2:	f10d 0107 	add.w	r1, sp, #7
   b57f6:	2301      	movs	r3, #1
   b57f8:	4628      	mov	r0, r5
   b57fa:	f88d 3007 	strb.w	r3, [sp, #7]
   b57fe:	f7ff ff57 	bl	b56b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b5802:	4916      	ldr	r1, [pc, #88]	; (b585c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   b5804:	f7ff feba 	bl	b557c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   b5808:	f10d 0107 	add.w	r1, sp, #7
   b580c:	4628      	mov	r0, r5
   b580e:	f88d 6007 	strb.w	r6, [sp, #7]
   b5812:	f7ff ff4d 	bl	b56b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b5816:	4912      	ldr	r1, [pc, #72]	; (b5860 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   b5818:	f7ff feb0 	bl	b557c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   b581c:	2302      	movs	r3, #2
   b581e:	f10d 0107 	add.w	r1, sp, #7
   b5822:	4628      	mov	r0, r5
   b5824:	f88d 3007 	strb.w	r3, [sp, #7]
   b5828:	f7ff ff42 	bl	b56b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b582c:	490d      	ldr	r1, [pc, #52]	; (b5864 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   b582e:	f7ff fea5 	bl	b557c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   b5832:	2303      	movs	r3, #3
   b5834:	f10d 0107 	add.w	r1, sp, #7
   b5838:	4628      	mov	r0, r5
   b583a:	f88d 3007 	strb.w	r3, [sp, #7]
   b583e:	f7ff ff37 	bl	b56b0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   b5842:	4909      	ldr	r1, [pc, #36]	; (b5868 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   b5844:	f7ff fe9a 	bl	b557c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   b5848:	4b08      	ldr	r3, [pc, #32]	; (b586c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   b584a:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   b584e:	4b08      	ldr	r3, [pc, #32]	; (b5870 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   b5850:	4620      	mov	r0, r4
  _token = token;
   b5852:	601f      	str	r7, [r3, #0]
}
   b5854:	b002      	add	sp, #8
   b5856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b585a:	bf00      	nop
   b585c:	000b548d 	.word	0x000b548d
   b5860:	000b54c1 	.word	0x000b54c1
   b5864:	000b54f1 	.word	0x000b54f1
   b5868:	000b5525 	.word	0x000b5525
   b586c:	2003e540 	.word	0x2003e540
   b5870:	2003e544 	.word	0x2003e544

000b5874 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   b5874:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b5876:	4805      	ldr	r0, [pc, #20]	; (b588c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b5878:	f004 f908 	bl	b9a8c <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b587c:	4804      	ldr	r0, [pc, #16]	; (b5890 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b587e:	f004 f905 	bl	b9a8c <_ZN9TCPClientC1Ev>
   b5882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b5886:	4803      	ldr	r0, [pc, #12]	; (b5894 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b5888:	f004 bb68 	b.w	b9f5c <_ZN3UDPC1Ev>
   b588c:	2003e524 	.word	0x2003e524
   b5890:	2003e4bc 	.word	0x2003e4bc
   b5894:	2003e4d8 	.word	0x2003e4d8

000b5898 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   b5898:	7501      	strb	r1, [r0, #20]
   b589a:	4770      	bx	lr

000b589c <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   b589c:	2200      	movs	r2, #0
	  : _Node_allocator()
   b589e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b58a0:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b58a4:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b58a8:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b58aa:	4770      	bx	lr

000b58ac <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   b58ac:	b570      	push	{r4, r5, r6, lr}
   b58ae:	4606      	mov	r6, r0
   b58b0:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   b58b4:	2014      	movs	r0, #20
   b58b6:	f001 fb05 	bl	b6ec4 <malloc>
   b58ba:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   b58bc:	2014      	movs	r0, #20
   b58be:	f001 fb01 	bl	b6ec4 <malloc>
   b58c2:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   b58c4:	4630      	mov	r0, r6
   b58c6:	f005 fe68 	bl	bb59a <strlen>
    for (int i = 0; i < len - 2; i++) {
   b58ca:	4632      	mov	r2, r6
   b58cc:	2300      	movs	r3, #0
   b58ce:	3802      	subs	r0, #2
   b58d0:	4298      	cmp	r0, r3
   b58d2:	dd14      	ble.n	b58fe <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   b58d4:	f812 1b01 	ldrb.w	r1, [r2], #1
   b58d8:	290d      	cmp	r1, #13
   b58da:	d13a      	bne.n	b5952 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b58dc:	7811      	ldrb	r1, [r2, #0]
   b58de:	290a      	cmp	r1, #10
   b58e0:	d137      	bne.n	b5952 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b58e2:	7851      	ldrb	r1, [r2, #1]
   b58e4:	290d      	cmp	r1, #13
   b58e6:	d134      	bne.n	b5952 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   b58e8:	7891      	ldrb	r1, [r2, #2]
   b58ea:	290a      	cmp	r1, #10
   b58ec:	d131      	bne.n	b5952 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   b58ee:	3304      	adds	r3, #4
   b58f0:	18f1      	adds	r1, r6, r3
   b58f2:	2214      	movs	r2, #20
   b58f4:	4628      	mov	r0, r5
   b58f6:	f005 fe6c 	bl	bb5d2 <strncpy>
        parsed[20] = '\0';
   b58fa:	2300      	movs	r3, #0
   b58fc:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   b58fe:	210a      	movs	r1, #10
   b5900:	4628      	mov	r0, r5
   b5902:	f005 fe03 	bl	bb50c <strchr>
    if (pch == NULL) {
   b5906:	4606      	mov	r6, r0
   b5908:	b328      	cbz	r0, b5956 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   b590a:	210a      	movs	r1, #10
   b590c:	3001      	adds	r0, #1
   b590e:	f005 fdfd 	bl	bb50c <strchr>
    if (pch2 == NULL) {
   b5912:	b300      	cbz	r0, b5956 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   b5914:	4631      	mov	r1, r6
   b5916:	4620      	mov	r0, r4
   b5918:	f005 fe19 	bl	bb54e <strcpy>
    dst[strlen(dst) - 1] = '\0';
   b591c:	4620      	mov	r0, r4
   b591e:	f005 fe3c 	bl	bb59a <strlen>
   b5922:	4420      	add	r0, r4
   b5924:	2300      	movs	r3, #0
   b5926:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   b592a:	4620      	mov	r0, r4
   b592c:	f005 fd80 	bl	bb430 <atof>
   b5930:	ec51 0b10 	vmov	r0, r1, d0
   b5934:	f005 fd08 	bl	bb348 <__aeabi_d2f>
   b5938:	ee08 0a10 	vmov	s16, r0
    free(dst);
   b593c:	4620      	mov	r0, r4
   b593e:	f001 fac9 	bl	b6ed4 <free>
    free(parsed);
   b5942:	4628      	mov	r0, r5
   b5944:	f001 fac6 	bl	b6ed4 <free>
}
   b5948:	eeb0 0a48 	vmov.f32	s0, s16
   b594c:	ecbd 8b02 	vpop	{d8}
   b5950:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   b5952:	3301      	adds	r3, #1
   b5954:	e7bc      	b.n	b58d0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   b5956:	ed9f 8a01 	vldr	s16, [pc, #4]	; b595c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   b595a:	e7f5      	b.n	b5948 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   b595c:	cda2425f 	.word	0xcda2425f

000b5960 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5960:	b530      	push	{r4, r5, lr}
   b5962:	4d07      	ldr	r5, [pc, #28]	; (b5980 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   b5964:	6005      	str	r5, [r0, #0]
   b5966:	2500      	movs	r5, #0
  _user_agent = user_agent;
   b5968:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b596c:	7505      	strb	r5, [r0, #20]
  _token = token;
   b596e:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b5970:	f241 3588 	movw	r5, #5000	; 0x1388
   b5974:	6185      	str	r5, [r0, #24]
   b5976:	2505      	movs	r5, #5
  _port = port;
   b5978:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   b597c:	7705      	strb	r5, [r0, #28]
}
   b597e:	bd30      	pop	{r4, r5, pc}
   b5980:	000bda34 	.word	0x000bda34

000b5984 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   b5984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5988:	f8df 808c 	ldr.w	r8, [pc, #140]	; b5a18 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   b598c:	f8df a08c 	ldr.w	sl, [pc, #140]	; b5a1c <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   b5990:	f8df b08c 	ldr.w	fp, [pc, #140]	; b5a20 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   b5994:	4604      	mov	r4, r0
   b5996:	460d      	mov	r5, r1
   b5998:	4617      	mov	r7, r2
   b599a:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b599c:	4640      	mov	r0, r8
   b599e:	fa5f f986 	uxtb.w	r9, r6
   b59a2:	f003 feeb 	bl	b977c <_ZN9TCPClient9connectedEv>
   b59a6:	bb88      	cbnz	r0, b5a0c <_ZN7UbiHTTP9reconnectEPKci+0x88>
   b59a8:	7f23      	ldrb	r3, [r4, #28]
   b59aa:	454b      	cmp	r3, r9
   b59ac:	d92e      	bls.n	b5a0c <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   b59ae:	7d23      	ldrb	r3, [r4, #20]
   b59b0:	b1cb      	cbz	r3, b59e6 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   b59b2:	f004 fc33 	bl	ba21c <_Z16_fetch_usbserialv>
   b59b6:	4651      	mov	r1, sl
   b59b8:	f003 fb0e 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(host);
   b59bc:	f004 fc2e 	bl	ba21c <_Z16_fetch_usbserialv>
   b59c0:	4629      	mov	r1, r5
   b59c2:	f003 fb09 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b59c6:	f004 fc29 	bl	ba21c <_Z16_fetch_usbserialv>
   b59ca:	4659      	mov	r1, fp
   b59cc:	f003 fb04 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b59d0:	f004 fc24 	bl	ba21c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b59d4:	220a      	movs	r2, #10
   b59d6:	4649      	mov	r1, r9
   b59d8:	9001      	str	r0, [sp, #4]
   b59da:	f003 fb1a 	bl	b9012 <_ZN5Print11printNumberEmh>
        n += println();
   b59de:	9b01      	ldr	r3, [sp, #4]
   b59e0:	4618      	mov	r0, r3
   b59e2:	f003 fb00 	bl	b8fe6 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   b59e6:	2300      	movs	r3, #0
   b59e8:	b2ba      	uxth	r2, r7
   b59ea:	4629      	mov	r1, r5
   b59ec:	4640      	mov	r0, r8
   b59ee:	f003 fe47 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   b59f2:	7d23      	ldrb	r3, [r4, #20]
   b59f4:	b123      	cbz	r3, b5a00 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   b59f6:	f004 fc11 	bl	ba21c <_Z16_fetch_usbserialv>
   b59fa:	4906      	ldr	r1, [pc, #24]	; (b5a14 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   b59fc:	f003 faff 	bl	b8ffe <_ZN5Print7printlnEPKc>
    delay(1000);
   b5a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5a04:	f001 faae 	bl	b6f64 <delay>
   b5a08:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   b5a0a:	e7c7      	b.n	b599c <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   b5a0c:	b003      	add	sp, #12
   b5a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a12:	bf00      	nop
   b5a14:	000bd856 	.word	0x000bd856
   b5a18:	2003e548 	.word	0x2003e548
   b5a1c:	000bd82c 	.word	0x000bd82c
   b5a20:	000bd842 	.word	0x000bd842

000b5a24 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   b5a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a26:	4605      	mov	r5, r0
   b5a28:	460c      	mov	r4, r1
    response[i] = '\0';
   b5a2a:	f240 22bd 	movw	r2, #701	; 0x2bd
   b5a2e:	2100      	movs	r1, #0
   b5a30:	4620      	mov	r0, r4
   b5a32:	f005 fd35 	bl	bb4a0 <memset>
  if (_debug) {
   b5a36:	7d2b      	ldrb	r3, [r5, #20]
   b5a38:	b14b      	cbz	r3, b5a4e <_ZN7UbiHTTP16readServerAnswerEPc+0x2a>
    Serial.println("----------");
   b5a3a:	f004 fbef 	bl	ba21c <_Z16_fetch_usbserialv>
   b5a3e:	4914      	ldr	r1, [pc, #80]	; (b5a90 <_ZN7UbiHTTP16readServerAnswerEPc+0x6c>)
   b5a40:	f003 fadd 	bl	b8ffe <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b5a44:	f004 fbea 	bl	ba21c <_Z16_fetch_usbserialv>
   b5a48:	4912      	ldr	r1, [pc, #72]	; (b5a94 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   b5a4a:	f003 fad8 	bl	b8ffe <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   b5a4e:	4e12      	ldr	r6, [pc, #72]	; (b5a98 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   b5a50:	f204 27bb 	addw	r7, r4, #699	; 0x2bb
   b5a54:	4630      	mov	r0, r6
   b5a56:	f003 ff6f 	bl	b9938 <_ZN9TCPClient9availableEv>
   b5a5a:	b170      	cbz	r0, b5a7a <_ZN7UbiHTTP16readServerAnswerEPc+0x56>
    response[j] = (char)_client_http_ubi.read();
   b5a5c:	4630      	mov	r0, r6
   b5a5e:	f003 fd79 	bl	b9554 <_ZN9TCPClient4readEv>
   b5a62:	7020      	strb	r0, [r4, #0]
    if (_debug) {
   b5a64:	7d2b      	ldrb	r3, [r5, #20]
   b5a66:	b12b      	cbz	r3, b5a74 <_ZN7UbiHTTP16readServerAnswerEPc+0x50>
      Serial.write(response[j]);
   b5a68:	f004 fbd8 	bl	ba21c <_Z16_fetch_usbserialv>
   b5a6c:	6803      	ldr	r3, [r0, #0]
   b5a6e:	7821      	ldrb	r1, [r4, #0]
   b5a70:	689b      	ldr	r3, [r3, #8]
   b5a72:	4798      	blx	r3
    if (j >= MAX_BUFFER_SIZE - 1) {
   b5a74:	3401      	adds	r4, #1
   b5a76:	42a7      	cmp	r7, r4
   b5a78:	d1ec      	bne.n	b5a54 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
  if (_debug) {
   b5a7a:	7d2b      	ldrb	r3, [r5, #20]
   b5a7c:	b133      	cbz	r3, b5a8c <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
    Serial.println("\n----------");
   b5a7e:	f004 fbcd 	bl	ba21c <_Z16_fetch_usbserialv>
}
   b5a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("\n----------");
   b5a86:	4905      	ldr	r1, [pc, #20]	; (b5a9c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   b5a88:	f003 bab9 	b.w	b8ffe <_ZN5Print7printlnEPKc>
}
   b5a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5a8e:	bf00      	nop
   b5a90:	000bd87b 	.word	0x000bd87b
   b5a94:	000bd867 	.word	0x000bd867
   b5a98:	2003e548 	.word	0x2003e548
   b5a9c:	000bd87a 	.word	0x000bd87a

000b5aa0 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   b5aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5aa2:	4f0e      	ldr	r7, [pc, #56]	; (b5adc <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   b5aa4:	4604      	mov	r4, r0
  int timeout = 0;
   b5aa6:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   b5aa8:	4638      	mov	r0, r7
   b5aaa:	f003 ff45 	bl	b9938 <_ZN9TCPClient9availableEv>
   b5aae:	4605      	mov	r5, r0
   b5ab0:	b990      	cbnz	r0, b5ad8 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   b5ab2:	69a3      	ldr	r3, [r4, #24]
   b5ab4:	42b3      	cmp	r3, r6
   b5ab6:	dd0f      	ble.n	b5ad8 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   b5ab8:	2001      	movs	r0, #1
   b5aba:	f001 fa53 	bl	b6f64 <delay>
    if (timeout > _timeout - 1) {
   b5abe:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b5ac0:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b5ac2:	42b3      	cmp	r3, r6
   b5ac4:	dcf0      	bgt.n	b5aa8 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
   b5ac6:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b5ac8:	b128      	cbz	r0, b5ad6 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b5aca:	f004 fba7 	bl	ba21c <_Z16_fetch_usbserialv>
   b5ace:	4904      	ldr	r1, [pc, #16]	; (b5ae0 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   b5ad0:	f003 fa95 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b5ad4:	4628      	mov	r0, r5
}
   b5ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b5ad8:	2001      	movs	r0, #1
   b5ada:	e7fc      	b.n	b5ad6 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   b5adc:	2003e548 	.word	0x2003e548
   b5ae0:	000bd886 	.word	0x000bd886

000b5ae4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ae6:	460f      	mov	r7, r1
  reconnect(_host, _port);
   b5ae8:	6902      	ldr	r2, [r0, #16]
   b5aea:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5aec:	4604      	mov	r4, r0
   b5aee:	461d      	mov	r5, r3
  reconnect(_host, _port);
   b5af0:	f7ff ff48 	bl	b5984 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   b5af4:	4878      	ldr	r0, [pc, #480]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5af6:	f003 fe41 	bl	b977c <_ZN9TCPClient9connectedEv>
   b5afa:	4606      	mov	r6, r0
   b5afc:	2800      	cmp	r0, #0
   b5afe:	f000 80e1 	beq.w	b5cc4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   b5b02:	4976      	ldr	r1, [pc, #472]	; (b5cdc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5b04:	4874      	ldr	r0, [pc, #464]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b06:	f003 fa67 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5b0a:	4639      	mov	r1, r7
   b5b0c:	4872      	ldr	r0, [pc, #456]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b0e:	f003 fa63 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   b5b12:	4973      	ldr	r1, [pc, #460]	; (b5ce0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5b14:	4870      	ldr	r0, [pc, #448]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b16:	f003 fa5f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   b5b1a:	4972      	ldr	r1, [pc, #456]	; (b5ce4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5b1c:	486e      	ldr	r0, [pc, #440]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b1e:	f003 fa5b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5b22:	6861      	ldr	r1, [r4, #4]
   b5b24:	486c      	ldr	r0, [pc, #432]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b26:	f003 fa57 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5b2a:	496f      	ldr	r1, [pc, #444]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5b2c:	486a      	ldr	r0, [pc, #424]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b2e:	f003 fa53 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   b5b32:	496e      	ldr	r1, [pc, #440]	; (b5cec <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5b34:	4868      	ldr	r0, [pc, #416]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b36:	f003 fa4f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5b3a:	68a1      	ldr	r1, [r4, #8]
   b5b3c:	4866      	ldr	r0, [pc, #408]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b3e:	f003 fa4b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5b42:	4969      	ldr	r1, [pc, #420]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5b44:	4864      	ldr	r0, [pc, #400]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b46:	f003 fa47 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   b5b4a:	4969      	ldr	r1, [pc, #420]	; (b5cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5b4c:	4862      	ldr	r0, [pc, #392]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b4e:	f003 fa43 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5b52:	68e1      	ldr	r1, [r4, #12]
   b5b54:	4860      	ldr	r0, [pc, #384]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b56:	f003 fa3f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5b5a:	4963      	ldr	r1, [pc, #396]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5b5c:	485e      	ldr	r0, [pc, #376]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b5e:	f003 fa3b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   b5b62:	4964      	ldr	r1, [pc, #400]	; (b5cf4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5b64:	485c      	ldr	r0, [pc, #368]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b66:	f003 fa37 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   b5b6a:	4963      	ldr	r1, [pc, #396]	; (b5cf8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5b6c:	485a      	ldr	r0, [pc, #360]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b6e:	f003 fa33 	bl	b8fd8 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   b5b72:	4628      	mov	r0, r5
   b5b74:	f005 fd11 	bl	bb59a <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   b5b78:	4960      	ldr	r1, [pc, #384]	; (b5cfc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   b5b7a:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   b5b7c:	4856      	ldr	r0, [pc, #344]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b7e:	f003 fa2b 	bl	b8fd8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b5b82:	220a      	movs	r2, #10
   b5b84:	4631      	mov	r1, r6
   b5b86:	4854      	ldr	r0, [pc, #336]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b88:	f003 fa43 	bl	b9012 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   b5b8c:	495c      	ldr	r1, [pc, #368]	; (b5d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5b8e:	4852      	ldr	r0, [pc, #328]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b90:	f003 fa22 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   b5b94:	4629      	mov	r1, r5
   b5b96:	4850      	ldr	r0, [pc, #320]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5b98:	f003 fa1e 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   b5b9c:	4952      	ldr	r1, [pc, #328]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5b9e:	484e      	ldr	r0, [pc, #312]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5ba0:	f003 fa1a 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   b5ba4:	484c      	ldr	r0, [pc, #304]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5ba6:	f003 fcef 	bl	b9588 <_ZN9TCPClient5flushEv>
    if (_debug) {
   b5baa:	7d23      	ldrb	r3, [r4, #20]
   b5bac:	2b00      	cmp	r3, #0
   b5bae:	d069      	beq.n	b5c84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   b5bb0:	f004 fb34 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bb4:	4953      	ldr	r1, [pc, #332]	; (b5d04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   b5bb6:	f003 fa22 	bl	b8ffe <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   b5bba:	f004 fb2f 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bbe:	4947      	ldr	r1, [pc, #284]	; (b5cdc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   b5bc0:	f003 fa0a 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5bc4:	f004 fb2a 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bc8:	4639      	mov	r1, r7
   b5bca:	f003 fa05 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5bce:	f004 fb25 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bd2:	4943      	ldr	r1, [pc, #268]	; (b5ce0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   b5bd4:	f003 fa00 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5bd8:	f004 fb20 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bdc:	4941      	ldr	r1, [pc, #260]	; (b5ce4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   b5bde:	f003 f9fb 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5be2:	f004 fb1b 	bl	ba21c <_Z16_fetch_usbserialv>
   b5be6:	6861      	ldr	r1, [r4, #4]
   b5be8:	f003 f9f6 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5bec:	f004 fb16 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bf0:	493d      	ldr	r1, [pc, #244]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5bf2:	f003 f9f1 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5bf6:	f004 fb11 	bl	ba21c <_Z16_fetch_usbserialv>
   b5bfa:	493c      	ldr	r1, [pc, #240]	; (b5cec <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   b5bfc:	f003 f9ec 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5c00:	f004 fb0c 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c04:	68a1      	ldr	r1, [r4, #8]
   b5c06:	f003 f9e7 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c0a:	f004 fb07 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c0e:	4936      	ldr	r1, [pc, #216]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5c10:	f003 f9e2 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5c14:	f004 fb02 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c18:	4935      	ldr	r1, [pc, #212]	; (b5cf0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   b5c1a:	f003 f9dd 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5c1e:	f004 fafd 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c22:	68e1      	ldr	r1, [r4, #12]
   b5c24:	f003 f9d8 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c28:	f004 faf8 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c2c:	492e      	ldr	r1, [pc, #184]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5c2e:	f003 f9d3 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   b5c32:	f004 faf3 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c36:	492f      	ldr	r1, [pc, #188]	; (b5cf4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   b5c38:	f003 f9ce 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   b5c3c:	f004 faee 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c40:	492d      	ldr	r1, [pc, #180]	; (b5cf8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   b5c42:	f003 f9c9 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   b5c46:	f004 fae9 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c4a:	492c      	ldr	r1, [pc, #176]	; (b5cfc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   b5c4c:	f003 f9c4 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   b5c50:	f004 fae4 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c54:	220a      	movs	r2, #10
   b5c56:	4631      	mov	r1, r6
   b5c58:	f003 f9db 	bl	b9012 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   b5c5c:	f004 fade 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c60:	4927      	ldr	r1, [pc, #156]	; (b5d00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   b5c62:	f003 f9b9 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(payload);
   b5c66:	f004 fad9 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c6a:	4629      	mov	r1, r5
   b5c6c:	f003 f9b4 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5c70:	f004 fad4 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c74:	491c      	ldr	r1, [pc, #112]	; (b5ce8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   b5c76:	f003 f9af 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   b5c7a:	f004 facf 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c7e:	4922      	ldr	r1, [pc, #136]	; (b5d08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   b5c80:	f003 f9bd 	bl	b8ffe <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff ff0b 	bl	b5aa0 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   b5c8a:	7d23      	ldrb	r3, [r4, #20]
   b5c8c:	b92b      	cbnz	r3, b5c9a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   b5c8e:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   b5c90:	4811      	ldr	r0, [pc, #68]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   b5c92:	f003 feab 	bl	b99ec <_ZN9TCPClient4stopEv>
}
   b5c96:	4620      	mov	r0, r4
   b5c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   b5c9a:	f004 fabf 	bl	ba21c <_Z16_fetch_usbserialv>
   b5c9e:	491b      	ldr	r1, [pc, #108]	; (b5d0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   b5ca0:	4d0d      	ldr	r5, [pc, #52]	; (b5cd8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   b5ca2:	f003 f9ac 	bl	b8ffe <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   b5ca6:	4628      	mov	r0, r5
   b5ca8:	f003 fe46 	bl	b9938 <_ZN9TCPClient9availableEv>
   b5cac:	2800      	cmp	r0, #0
   b5cae:	d0ee      	beq.n	b5c8e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   b5cb0:	4628      	mov	r0, r5
   b5cb2:	f003 fc4f 	bl	b9554 <_ZN9TCPClient4readEv>
   b5cb6:	4604      	mov	r4, r0
        Serial.print(c);
   b5cb8:	f004 fab0 	bl	ba21c <_Z16_fetch_usbserialv>
   b5cbc:	b2e1      	uxtb	r1, r4
   b5cbe:	f003 f98f 	bl	b8fe0 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   b5cc2:	e7f0      	b.n	b5ca6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   b5cc4:	7d24      	ldrb	r4, [r4, #20]
   b5cc6:	2c00      	cmp	r4, #0
   b5cc8:	d0e2      	beq.n	b5c90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   b5cca:	f004 faa7 	bl	ba21c <_Z16_fetch_usbserialv>
   b5cce:	4910      	ldr	r1, [pc, #64]	; (b5d10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   b5cd0:	f003 f995 	bl	b8ffe <_ZN5Print7printlnEPKc>
  bool result = false;
   b5cd4:	4634      	mov	r4, r6
   b5cd6:	e7db      	b.n	b5c90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   b5cd8:	2003e548 	.word	0x2003e548
   b5cdc:	000bd8b9 	.word	0x000bd8b9
   b5ce0:	000bd8d1 	.word	0x000bd8d1
   b5ce4:	000bd8dd 	.word	0x000bd8dd
   b5ce8:	000bda01 	.word	0x000bda01
   b5cec:	000bd8e4 	.word	0x000bd8e4
   b5cf0:	000bd8f1 	.word	0x000bd8f1
   b5cf4:	000bd900 	.word	0x000bd900
   b5cf8:	000bd914 	.word	0x000bd914
   b5cfc:	000bd935 	.word	0x000bd935
   b5d00:	000bd9ff 	.word	0x000bd9ff
   b5d04:	000bd946 	.word	0x000bd946
   b5d08:	000bd962 	.word	0x000bd962
   b5d0c:	000bd980 	.word	0x000bd980
   b5d10:	000bd99c 	.word	0x000bd99c

000b5d14 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5d14:	b570      	push	{r4, r5, r6, lr}
   b5d16:	ed2d 8b02 	vpush	{d8}
   b5d1a:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5d1c:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   b5d1e:	460e      	mov	r6, r1
   b5d20:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   b5d22:	6841      	ldr	r1, [r0, #4]
   b5d24:	4866      	ldr	r0, [pc, #408]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d26:	2250      	movs	r2, #80	; 0x50
   b5d28:	f003 fcaa 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	6861      	ldr	r1, [r4, #4]
   b5d30:	2250      	movs	r2, #80	; 0x50
   b5d32:	f7ff fe27 	bl	b5984 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   b5d36:	4862      	ldr	r0, [pc, #392]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d38:	f003 fd20 	bl	b977c <_ZN9TCPClient9connectedEv>
   b5d3c:	2800      	cmp	r0, #0
   b5d3e:	f000 80b6 	beq.w	b5eae <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   b5d42:	4960      	ldr	r1, [pc, #384]	; (b5ec4 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5d44:	485e      	ldr	r0, [pc, #376]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d46:	f003 f947 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   b5d4a:	4631      	mov	r1, r6
   b5d4c:	485c      	ldr	r0, [pc, #368]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d4e:	f003 f943 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   b5d52:	495d      	ldr	r1, [pc, #372]	; (b5ec8 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5d54:	485a      	ldr	r0, [pc, #360]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d56:	f003 f93f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   b5d5a:	4629      	mov	r1, r5
   b5d5c:	4858      	ldr	r0, [pc, #352]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d5e:	f003 f93b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   b5d62:	495a      	ldr	r1, [pc, #360]	; (b5ecc <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5d64:	4856      	ldr	r0, [pc, #344]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d66:	f003 f937 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   b5d6a:	4959      	ldr	r1, [pc, #356]	; (b5ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5d6c:	4854      	ldr	r0, [pc, #336]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d6e:	f003 f933 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   b5d72:	4958      	ldr	r1, [pc, #352]	; (b5ed4 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5d74:	4852      	ldr	r0, [pc, #328]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d76:	f003 f92f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   b5d7a:	6861      	ldr	r1, [r4, #4]
   b5d7c:	4850      	ldr	r0, [pc, #320]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d7e:	f003 f92b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5d82:	4955      	ldr	r1, [pc, #340]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5d84:	484e      	ldr	r0, [pc, #312]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d86:	f003 f927 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   b5d8a:	4954      	ldr	r1, [pc, #336]	; (b5edc <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5d8c:	484c      	ldr	r0, [pc, #304]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d8e:	f003 f923 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   b5d92:	68a1      	ldr	r1, [r4, #8]
   b5d94:	484a      	ldr	r0, [pc, #296]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d96:	f003 f91f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5d9a:	494f      	ldr	r1, [pc, #316]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5d9c:	4848      	ldr	r0, [pc, #288]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5d9e:	f003 f91b 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   b5da2:	494f      	ldr	r1, [pc, #316]	; (b5ee0 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5da4:	4846      	ldr	r0, [pc, #280]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5da6:	f003 f917 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   b5daa:	68e1      	ldr	r1, [r4, #12]
   b5dac:	4844      	ldr	r0, [pc, #272]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5dae:	f003 f913 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   b5db2:	4949      	ldr	r1, [pc, #292]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5db4:	4842      	ldr	r0, [pc, #264]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5db6:	f003 f90f 	bl	b8fd8 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   b5dba:	494a      	ldr	r1, [pc, #296]	; (b5ee4 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5dbc:	4840      	ldr	r0, [pc, #256]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5dbe:	f003 f90b 	bl	b8fd8 <_ZN5Print5printEPKc>
    if (_debug) {
   b5dc2:	7d23      	ldrb	r3, [r4, #20]
   b5dc4:	2b00      	cmp	r3, #0
   b5dc6:	d04f      	beq.n	b5e68 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   b5dc8:	f004 fa28 	bl	ba21c <_Z16_fetch_usbserialv>
   b5dcc:	493d      	ldr	r1, [pc, #244]	; (b5ec4 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   b5dce:	f003 f903 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   b5dd2:	f004 fa23 	bl	ba21c <_Z16_fetch_usbserialv>
   b5dd6:	4631      	mov	r1, r6
   b5dd8:	f003 f8fe 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("/");
   b5ddc:	f004 fa1e 	bl	ba21c <_Z16_fetch_usbserialv>
   b5de0:	4939      	ldr	r1, [pc, #228]	; (b5ec8 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   b5de2:	f003 f8f9 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   b5de6:	f004 fa19 	bl	ba21c <_Z16_fetch_usbserialv>
   b5dea:	4629      	mov	r1, r5
   b5dec:	f003 f8f4 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   b5df0:	f004 fa14 	bl	ba21c <_Z16_fetch_usbserialv>
   b5df4:	4935      	ldr	r1, [pc, #212]	; (b5ecc <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   b5df6:	f003 f8ef 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   b5dfa:	f004 fa0f 	bl	ba21c <_Z16_fetch_usbserialv>
   b5dfe:	4934      	ldr	r1, [pc, #208]	; (b5ed0 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   b5e00:	f003 f8ea 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   b5e04:	f004 fa0a 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e08:	4932      	ldr	r1, [pc, #200]	; (b5ed4 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   b5e0a:	f003 f8e5 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_host);
   b5e0e:	f004 fa05 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e12:	6861      	ldr	r1, [r4, #4]
   b5e14:	f003 f8e0 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5e18:	f004 fa00 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e1c:	492e      	ldr	r1, [pc, #184]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5e1e:	f003 f8db 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   b5e22:	f004 f9fb 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e26:	492d      	ldr	r1, [pc, #180]	; (b5edc <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   b5e28:	f003 f8d6 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   b5e2c:	f004 f9f6 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e30:	68a1      	ldr	r1, [r4, #8]
   b5e32:	f003 f8d1 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5e36:	f004 f9f1 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e3a:	4927      	ldr	r1, [pc, #156]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5e3c:	f003 f8cc 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   b5e40:	f004 f9ec 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e44:	4926      	ldr	r1, [pc, #152]	; (b5ee0 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   b5e46:	f003 f8c7 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(_token);
   b5e4a:	f004 f9e7 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e4e:	68e1      	ldr	r1, [r4, #12]
   b5e50:	f003 f8c2 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   b5e54:	f004 f9e2 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e58:	491f      	ldr	r1, [pc, #124]	; (b5ed8 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   b5e5a:	f003 f8bd 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   b5e5e:	f004 f9dd 	bl	ba21c <_Z16_fetch_usbserialv>
   b5e62:	4920      	ldr	r1, [pc, #128]	; (b5ee4 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   b5e64:	f003 f8b8 	bl	b8fd8 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   b5e68:	4620      	mov	r0, r4
   b5e6a:	f7ff fe19 	bl	b5aa0 <_ZN7UbiHTTP16waitServerAnswerEv>
   b5e6e:	b948      	cbnz	r0, b5e84 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   b5e70:	4813      	ldr	r0, [pc, #76]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   b5e72:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b5ee8 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   b5e76:	f003 fdb9 	bl	b99ec <_ZN9TCPClient4stopEv>
}
   b5e7a:	eeb0 0a48 	vmov.f32	s0, s16
   b5e7e:	ecbd 8b02 	vpop	{d8}
   b5e82:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5e84:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b5e88:	f001 f81c 	bl	b6ec4 <malloc>
    readServerAnswer(response);
   b5e8c:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b5e8e:	4605      	mov	r5, r0
    readServerAnswer(response);
   b5e90:	4620      	mov	r0, r4
   b5e92:	f7ff fdc7 	bl	b5a24 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   b5e96:	4628      	mov	r0, r5
   b5e98:	f7ff fd08 	bl	b58ac <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   b5e9c:	4808      	ldr	r0, [pc, #32]	; (b5ec0 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   b5e9e:	eeb0 8a40 	vmov.f32	s16, s0
   b5ea2:	f003 fda3 	bl	b99ec <_ZN9TCPClient4stopEv>
    free(response);
   b5ea6:	4628      	mov	r0, r5
   b5ea8:	f001 f814 	bl	b6ed4 <free>
    return value;
   b5eac:	e7e5      	b.n	b5e7a <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   b5eae:	7d23      	ldrb	r3, [r4, #20]
   b5eb0:	2b00      	cmp	r3, #0
   b5eb2:	d0dd      	beq.n	b5e70 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   b5eb4:	f004 f9b2 	bl	ba21c <_Z16_fetch_usbserialv>
   b5eb8:	490c      	ldr	r1, [pc, #48]	; (b5eec <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   b5eba:	f003 f8a0 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b5ebe:	e7d7      	b.n	b5e70 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   b5ec0:	2003e548 	.word	0x2003e548
   b5ec4:	000bd9c6 	.word	0x000bd9c6
   b5ec8:	000bd9db 	.word	0x000bd9db
   b5ecc:	000bd9dd 	.word	0x000bd9dd
   b5ed0:	000bd8d1 	.word	0x000bd8d1
   b5ed4:	000bd8dd 	.word	0x000bd8dd
   b5ed8:	000bda01 	.word	0x000bda01
   b5edc:	000bd8e4 	.word	0x000bd8e4
   b5ee0:	000bd8f1 	.word	0x000bd8f1
   b5ee4:	000bd9e1 	.word	0x000bd9e1
   b5ee8:	cda2425f 	.word	0xcda2425f
   b5eec:	000bda04 	.word	0x000bda04

000b5ef0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b5ef0:	4801      	ldr	r0, [pc, #4]	; (b5ef8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b5ef2:	f003 bdcb 	b.w	b9a8c <_ZN9TCPClientC1Ev>
   b5ef6:	bf00      	nop
   b5ef8:	2003e548 	.word	0x2003e548

000b5efc <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   b5efc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b5f04 <_ZN11UbiParticle3getEPKcS1_+0x8>
   b5f00:	4770      	bx	lr
   b5f02:	bf00      	nop
   b5f04:	cda2425f 	.word	0xcda2425f

000b5f08 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   b5f08:	7401      	strb	r1, [r0, #16]
   b5f0a:	4770      	bx	lr

000b5f0c <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   b5f0c:	2200      	movs	r2, #0
	  : _Node_allocator()
   b5f0e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b5f10:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b5f14:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b5f18:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   b5f1a:	4770      	bx	lr

000b5f1c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b5f1c:	b530      	push	{r4, r5, lr}
   b5f1e:	b085      	sub	sp, #20
   b5f20:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5f22:	9b08      	ldr	r3, [sp, #32]
   b5f24:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5f26:	f88d 3000 	strb.w	r3, [sp]
   b5f2a:	a802      	add	r0, sp, #8
   b5f2c:	233c      	movs	r3, #60	; 0x3c
   b5f2e:	f001 fac1 	bl	b74b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b5f32:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5f34:	9c02      	ldr	r4, [sp, #8]
   b5f36:	f000 ff11 	bl	b6d5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5f3a:	b120      	cbz	r0, b5f46 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b5f3c:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b5f3e:	b913      	cbnz	r3, b5f46 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   b5f40:	f000 ff38 	bl	b6db4 <spark_process>
    }
   b5f44:	e7fa      	b.n	b5f3c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   b5f46:	7863      	ldrb	r3, [r4, #1]
   b5f48:	f3bf 8f5b 	dmb	ish
   b5f4c:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b5f4e:	b9ab      	cbnz	r3, b5f7c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   b5f50:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b5f52:	9c03      	ldr	r4, [sp, #12]
   b5f54:	b17c      	cbz	r4, b5f76 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   b5f56:	6863      	ldr	r3, [r4, #4]
   b5f58:	3b01      	subs	r3, #1
   b5f5a:	6063      	str	r3, [r4, #4]
   b5f5c:	b95b      	cbnz	r3, b5f76 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   b5f5e:	6823      	ldr	r3, [r4, #0]
   b5f60:	4620      	mov	r0, r4
   b5f62:	689b      	ldr	r3, [r3, #8]
   b5f64:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5f66:	68a3      	ldr	r3, [r4, #8]
   b5f68:	3b01      	subs	r3, #1
   b5f6a:	60a3      	str	r3, [r4, #8]
   b5f6c:	b91b      	cbnz	r3, b5f76 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   b5f6e:	6823      	ldr	r3, [r4, #0]
   b5f70:	4620      	mov	r0, r4
   b5f72:	68db      	ldr	r3, [r3, #12]
   b5f74:	4798      	blx	r3
}
   b5f76:	4628      	mov	r0, r5
   b5f78:	b005      	add	sp, #20
   b5f7a:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b5f7c:	2000      	movs	r0, #0
   b5f7e:	f000 feed 	bl	b6d5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5f82:	b120      	cbz	r0, b5f8e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   b5f84:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b5f86:	b913      	cbnz	r3, b5f8e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   b5f88:	f000 ff14 	bl	b6db4 <spark_process>
    }
   b5f8c:	e7fa      	b.n	b5f84 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5f8e:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b5f90:	2b01      	cmp	r3, #1
   b5f92:	d1dd      	bne.n	b5f50 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   b5f94:	7b25      	ldrb	r5, [r4, #12]
   b5f96:	e7dc      	b.n	b5f52 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000b5f98 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b5f98:	b510      	push	{r4, lr}
   b5f9a:	4c04      	ldr	r4, [pc, #16]	; (b5fac <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   b5f9c:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   b5f9e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b5fa2:	2400      	movs	r4, #0
  _token = token;
   b5fa4:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   b5fa6:	7404      	strb	r4, [r0, #16]
  _token = token;
   b5fa8:	60c3      	str	r3, [r0, #12]
}
   b5faa:	bd10      	pop	{r4, pc}
   b5fac:	000bda4c 	.word	0x000bda4c

000b5fb0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b5fb0:	b538      	push	{r3, r4, r5, lr}
   b5fb2:	4604      	mov	r4, r0
      while (__x != 0)
   b5fb4:	b184      	cbz	r4, b5fd8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
	  _M_erase(_S_right(__x));
   b5fb6:	68e0      	ldr	r0, [r4, #12]
   b5fb8:	f7ff fffa 	bl	b5fb0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      if (_M_manager)
   b5fbc:	69e3      	ldr	r3, [r4, #28]
      { return static_cast<_Link_type>(__x->_M_left); }
   b5fbe:	68a5      	ldr	r5, [r4, #8]
   b5fc0:	b123      	cbz	r3, b5fcc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
    class function<_Res(_ArgTypes...)>
   b5fc2:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5fc6:	2203      	movs	r2, #3
   b5fc8:	4608      	mov	r0, r1
   b5fca:	4798      	blx	r3
   b5fcc:	4620      	mov	r0, r4
   b5fce:	2124      	movs	r1, #36	; 0x24
   b5fd0:	f7fe f865 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b5fd4:	462c      	mov	r4, r5
      }
   b5fd6:	e7ed      	b.n	b5fb4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4>
    }
   b5fd8:	bd38      	pop	{r3, r4, r5, pc}

000b5fda <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   b5fda:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5fdc:	b08d      	sub	sp, #52	; 0x34
   b5fde:	4604      	mov	r4, r0
        return spark_deviceID();
   b5fe0:	a801      	add	r0, sp, #4
   b5fe2:	460d      	mov	r5, r1
   b5fe4:	4617      	mov	r7, r2
   b5fe6:	461e      	mov	r6, r3
   b5fe8:	f000 fef4 	bl	b6dd4 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   b5fec:	9803      	ldr	r0, [sp, #12]
   b5fee:	3001      	adds	r0, #1
   b5ff0:	f7fe f853 	bl	b409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   b5ff4:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   b5ff6:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   b5ff8:	f005 faa9 	bl	bb54e <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   b5ffc:	462a      	mov	r2, r5
   b5ffe:	4639      	mov	r1, r7
   b6000:	4633      	mov	r3, r6
  _iot_protocol = iot_protocol;
   b6002:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   b6004:	a805      	add	r0, sp, #20
   b6006:	f7ff fbe5 	bl	b57d4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   b600a:	20c8      	movs	r0, #200	; 0xc8
   b600c:	f000 ff5a 	bl	b6ec4 <malloc>
   b6010:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   b6012:	a805      	add	r0, sp, #20
   b6014:	f7ff fb00 	bl	b5618 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   b6018:	2300      	movs	r3, #0
  _token = token;
   b601a:	e9c4 0501 	strd	r0, r5, [r4, #4]
  _current_value = 0;
   b601e:	7423      	strb	r3, [r4, #16]
      { _M_erase(_M_begin()); }
   b6020:	9808      	ldr	r0, [sp, #32]
   b6022:	f7ff ffc5 	bl	b5fb0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
  String particle_id_str = System.deviceID();
   b6026:	a801      	add	r0, sp, #4
   b6028:	f003 f9d2 	bl	b93d0 <_ZN6StringD1Ev>
}
   b602c:	b00d      	add	sp, #52	; 0x34
   b602e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6030 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   b6030:	b538      	push	{r3, r4, r5, lr}
   b6032:	2500      	movs	r5, #0
   b6034:	4604      	mov	r4, r0
   b6036:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   b6038:	f7ff ffcf 	bl	b5fda <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   b603c:	4620      	mov	r0, r4
   b603e:	bd38      	pop	{r3, r4, r5, pc}

000b6040 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6044:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6046:	2018      	movs	r0, #24
   b6048:	4615      	mov	r5, r2
   b604a:	460f      	mov	r7, r1
   b604c:	f7fe f823 	bl	b4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   b6050:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   b6054:	686b      	ldr	r3, [r5, #4]
   b6056:	f8d5 9000 	ldr.w	r9, [r5]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   b605a:	68ba      	ldr	r2, [r7, #8]
   b605c:	6143      	str	r3, [r0, #20]
   b605e:	4606      	mov	r6, r0
   b6060:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   b6064:	4655      	mov	r5, sl
      bool __comp = true;
   b6066:	2301      	movs	r3, #1
      while (__x != 0)
   b6068:	b152      	cbz	r2, b6080 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b606a:	6913      	ldr	r3, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
   b606c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   b6070:	454b      	cmp	r3, r9
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   b6072:	4615      	mov	r5, r2
   b6074:	bfcb      	itete	gt
   b6076:	2301      	movgt	r3, #1
   b6078:	2300      	movle	r3, #0
   b607a:	4602      	movgt	r2, r0
   b607c:	460a      	movle	r2, r1
   b607e:	e7f3      	b.n	b6068 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   b6080:	b1ab      	cbz	r3, b60ae <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6e>
	  if (__j == begin())
   b6082:	68fb      	ldr	r3, [r7, #12]
   b6084:	42ab      	cmp	r3, r5
   b6086:	d024      	beq.n	b60d2 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	_M_node = _Rb_tree_decrement(_M_node);
   b6088:	4628      	mov	r0, r5
   b608a:	f004 fb2d 	bl	ba6e8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   b608e:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   b6090:	f8d8 3010 	ldr.w	r3, [r8, #16]
   b6094:	454b      	cmp	r3, r9
   b6096:	db1c      	blt.n	b60d2 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x92>
	::operator delete(__p
   b6098:	2118      	movs	r1, #24
   b609a:	4630      	mov	r0, r6
   b609c:	f7fd ffff 	bl	b409e <_ZdlPvj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b60a0:	f8c4 8000 	str.w	r8, [r4]
   b60a4:	2300      	movs	r3, #0
   b60a6:	7123      	strb	r3, [r4, #4]
      }
   b60a8:	4620      	mov	r0, r4
   b60aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b60ae:	46a8      	mov	r8, r5
   b60b0:	e7ee      	b.n	b6090 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   b60b2:	6928      	ldr	r0, [r5, #16]
   b60b4:	4581      	cmp	r9, r0
   b60b6:	bfac      	ite	ge
   b60b8:	2000      	movge	r0, #0
   b60ba:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   b60bc:	4653      	mov	r3, sl
   b60be:	462a      	mov	r2, r5
   b60c0:	4631      	mov	r1, r6
   b60c2:	f004 fb13 	bl	ba6ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   b60c6:	697b      	ldr	r3, [r7, #20]
   b60c8:	6026      	str	r6, [r4, #0]
   b60ca:	3301      	adds	r3, #1
   b60cc:	617b      	str	r3, [r7, #20]
   b60ce:	2301      	movs	r3, #1
   b60d0:	e7e9      	b.n	b60a6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x66>
      bool __insert_left = (__x != 0 || __p == _M_end()
   b60d2:	45aa      	cmp	sl, r5
   b60d4:	d1ed      	bne.n	b60b2 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x72>
			    || _M_impl._M_key_compare(_S_key(__z),
   b60d6:	2001      	movs	r0, #1
   b60d8:	e7f0      	b.n	b60bc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7c>
	...

000b60dc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
}
   b60dc:	b508      	push	{r3, lr}
        val_(val) {
   b60de:	4b07      	ldr	r3, [pc, #28]	; (b60fc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   b60e0:	4807      	ldr	r0, [pc, #28]	; (b6100 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b60e2:	2200      	movs	r2, #0
   b60e4:	701a      	strb	r2, [r3, #0]
   b60e6:	f003 fcd1 	bl	b9a8c <_ZN9TCPClientC1Ev>
   b60ea:	4806      	ldr	r0, [pc, #24]	; (b6104 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b60ec:	f003 fcce 	bl	b9a8c <_ZN9TCPClientC1Ev>
   b60f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b60f4:	4804      	ldr	r0, [pc, #16]	; (b6108 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b60f6:	f003 bf31 	b.w	b9f5c <_ZN3UDPC1Ev>
   b60fa:	bf00      	nop
   b60fc:	2003e5e8 	.word	0x2003e5e8
   b6100:	2003e5cc 	.word	0x2003e5cc
   b6104:	2003e564 	.word	0x2003e564
   b6108:	2003e580 	.word	0x2003e580

000b610c <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   b610c:	7501      	strb	r1, [r0, #20]
   b610e:	4770      	bx	lr

000b6110 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   b6110:	b538      	push	{r3, r4, r5, lr}
   b6112:	4604      	mov	r4, r0
      while (__x != 0)
   b6114:	b14c      	cbz	r4, b612a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x1a>
	  _M_erase(_S_right(__x));
   b6116:	68e0      	ldr	r0, [r4, #12]
   b6118:	f7ff fffa 	bl	b6110 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      { return static_cast<_Link_type>(__x->_M_left); }
   b611c:	68a5      	ldr	r5, [r4, #8]
   b611e:	4620      	mov	r0, r4
   b6120:	2118      	movs	r1, #24
   b6122:	f7fd ffbc 	bl	b409e <_ZdlPvj>
	  __x = __y;
   b6126:	462c      	mov	r4, r5
      while (__x != 0)
   b6128:	e7f4      	b.n	b6114 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0+0x4>
    }
   b612a:	bd38      	pop	{r3, r4, r5, pc}

000b612c <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b612c:	b530      	push	{r4, r5, lr}
   b612e:	4d06      	ldr	r5, [pc, #24]	; (b6148 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   b6130:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b6132:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6136:	2500      	movs	r5, #0
  _token = token;
   b6138:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b613a:	7505      	strb	r5, [r0, #20]
   b613c:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b6140:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   b6144:	6185      	str	r5, [r0, #24]
}
   b6146:	bd30      	pop	{r4, r5, pc}
   b6148:	000bdb00 	.word	0x000bdb00

000b614c <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   b614c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6150:	460d      	mov	r5, r1
   b6152:	4617      	mov	r7, r2
   b6154:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   b6156:	f004 f861 	bl	ba21c <_Z16_fetch_usbserialv>
   b615a:	491e      	ldr	r1, [pc, #120]	; (b61d4 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b615c:	4e1e      	ldr	r6, [pc, #120]	; (b61d8 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   b615e:	f8df a07c 	ldr.w	sl, [pc, #124]	; b61dc <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   b6162:	f8df b07c 	ldr.w	fp, [pc, #124]	; b61e0 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   b6166:	f002 ff4a 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b616a:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b616c:	4630      	mov	r0, r6
   b616e:	f003 fc54 	bl	b9a1a <_ZN9TCPClient6statusEv>
   b6172:	bb60      	cbnz	r0, b61ce <_ZN6UbiTCP9reconnectEPKci+0x82>
   b6174:	2c05      	cmp	r4, #5
   b6176:	d02a      	beq.n	b61ce <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   b6178:	f898 3014 	ldrb.w	r3, [r8, #20]
   b617c:	b1c3      	cbz	r3, b61b0 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   b617e:	f004 f84d 	bl	ba21c <_Z16_fetch_usbserialv>
   b6182:	4651      	mov	r1, sl
   b6184:	f002 ff28 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(host);
   b6188:	f004 f848 	bl	ba21c <_Z16_fetch_usbserialv>
   b618c:	4629      	mov	r1, r5
   b618e:	f002 ff23 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   b6192:	f004 f843 	bl	ba21c <_Z16_fetch_usbserialv>
   b6196:	4659      	mov	r1, fp
   b6198:	f002 ff1e 	bl	b8fd8 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   b619c:	f004 f83e 	bl	ba21c <_Z16_fetch_usbserialv>
   b61a0:	220a      	movs	r2, #10
   b61a2:	4681      	mov	r9, r0
   b61a4:	4621      	mov	r1, r4
   b61a6:	f002 ff34 	bl	b9012 <_ZN5Print11printNumberEmh>
        n += println();
   b61aa:	4648      	mov	r0, r9
   b61ac:	f002 ff1b 	bl	b8fe6 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   b61b0:	4630      	mov	r0, r6
   b61b2:	f003 fc1b 	bl	b99ec <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   b61b6:	2300      	movs	r3, #0
   b61b8:	b2ba      	uxth	r2, r7
   b61ba:	4629      	mov	r1, r5
   b61bc:	4630      	mov	r0, r6
   b61be:	f003 fa5f 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   b61c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b61c6:	f000 fecd 	bl	b6f64 <delay>
   b61ca:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   b61cc:	e7ce      	b.n	b616c <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   b61ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61d2:	bf00      	nop
   b61d4:	000bda5c 	.word	0x000bda5c
   b61d8:	2003e5ec 	.word	0x2003e5ec
   b61dc:	000bd82c 	.word	0x000bd82c
   b61e0:	000bd842 	.word	0x000bd842

000b61e4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b61e4:	b570      	push	{r4, r5, r6, lr}
   b61e6:	4604      	mov	r4, r0
   b61e8:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   b61ea:	6881      	ldr	r1, [r0, #8]
   b61ec:	482e      	ldr	r0, [pc, #184]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   b61ee:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   b61f0:	f002 fef2 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   b61f4:	492d      	ldr	r1, [pc, #180]	; (b62ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b61f6:	482c      	ldr	r0, [pc, #176]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b61f8:	f002 feee 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   b61fc:	68e1      	ldr	r1, [r4, #12]
   b61fe:	482a      	ldr	r0, [pc, #168]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6200:	f002 feea 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   b6204:	492a      	ldr	r1, [pc, #168]	; (b62b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b6206:	4828      	ldr	r0, [pc, #160]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6208:	f002 fee6 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   b620c:	4631      	mov	r1, r6
   b620e:	4826      	ldr	r0, [pc, #152]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6210:	f002 fee2 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   b6214:	4927      	ldr	r1, [pc, #156]	; (b62b4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b6216:	4824      	ldr	r0, [pc, #144]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6218:	f002 fede 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   b621c:	4629      	mov	r1, r5
   b621e:	4822      	ldr	r0, [pc, #136]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6220:	f002 feda 	bl	b8fd8 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   b6224:	4924      	ldr	r1, [pc, #144]	; (b62b8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b6226:	4820      	ldr	r0, [pc, #128]	; (b62a8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   b6228:	f002 fed6 	bl	b8fd8 <_ZN5Print5printEPKc>
  if (_debug) {
   b622c:	7d23      	ldrb	r3, [r4, #20]
   b622e:	2b00      	cmp	r3, #0
   b6230:	d038      	beq.n	b62a4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   b6232:	f003 fff3 	bl	ba21c <_Z16_fetch_usbserialv>
   b6236:	4921      	ldr	r1, [pc, #132]	; (b62bc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   b6238:	f002 fee1 	bl	b8ffe <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   b623c:	f003 ffee 	bl	ba21c <_Z16_fetch_usbserialv>
   b6240:	491f      	ldr	r1, [pc, #124]	; (b62c0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   b6242:	f002 fedc 	bl	b8ffe <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   b6246:	f003 ffe9 	bl	ba21c <_Z16_fetch_usbserialv>
   b624a:	68a1      	ldr	r1, [r4, #8]
   b624c:	f002 fec4 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   b6250:	f003 ffe4 	bl	ba21c <_Z16_fetch_usbserialv>
   b6254:	4915      	ldr	r1, [pc, #84]	; (b62ac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   b6256:	f002 febf 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print(_token);
   b625a:	f003 ffdf 	bl	ba21c <_Z16_fetch_usbserialv>
   b625e:	68e1      	ldr	r1, [r4, #12]
   b6260:	f002 feba 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print("|");
   b6264:	f003 ffda 	bl	ba21c <_Z16_fetch_usbserialv>
   b6268:	4911      	ldr	r1, [pc, #68]	; (b62b0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   b626a:	f002 feb5 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   b626e:	f003 ffd5 	bl	ba21c <_Z16_fetch_usbserialv>
   b6272:	4631      	mov	r1, r6
   b6274:	f002 feb0 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print(":");
   b6278:	f003 ffd0 	bl	ba21c <_Z16_fetch_usbserialv>
   b627c:	490d      	ldr	r1, [pc, #52]	; (b62b4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   b627e:	f002 feab 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   b6282:	f003 ffcb 	bl	ba21c <_Z16_fetch_usbserialv>
   b6286:	4629      	mov	r1, r5
   b6288:	f002 fea6 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.print("|end");
   b628c:	f003 ffc6 	bl	ba21c <_Z16_fetch_usbserialv>
   b6290:	4909      	ldr	r1, [pc, #36]	; (b62b8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   b6292:	f002 fea1 	bl	b8fd8 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   b6296:	f003 ffc1 	bl	ba21c <_Z16_fetch_usbserialv>
}
   b629a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   b629e:	4909      	ldr	r1, [pc, #36]	; (b62c4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   b62a0:	f002 bead 	b.w	b8ffe <_ZN5Print7printlnEPKc>
}
   b62a4:	bd70      	pop	{r4, r5, r6, pc}
   b62a6:	bf00      	nop
   b62a8:	2003e5ec 	.word	0x2003e5ec
   b62ac:	000bda74 	.word	0x000bda74
   b62b0:	000bda77 	.word	0x000bda77
   b62b4:	000bd878 	.word	0x000bd878
   b62b8:	000bda79 	.word	0x000bda79
   b62bc:	000bda94 	.word	0x000bda94
   b62c0:	000bda7e 	.word	0x000bda7e
   b62c4:	000bda93 	.word	0x000bda93

000b62c8 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   b62c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b62ca:	4f0e      	ldr	r7, [pc, #56]	; (b6304 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   b62cc:	4604      	mov	r4, r0
  int timeout = 0;
   b62ce:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   b62d0:	4638      	mov	r0, r7
   b62d2:	f003 fb31 	bl	b9938 <_ZN9TCPClient9availableEv>
   b62d6:	4605      	mov	r5, r0
   b62d8:	b990      	cbnz	r0, b6300 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   b62da:	69a3      	ldr	r3, [r4, #24]
   b62dc:	42b3      	cmp	r3, r6
   b62de:	dd0f      	ble.n	b6300 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   b62e0:	2001      	movs	r0, #1
   b62e2:	f000 fe3f 	bl	b6f64 <delay>
    if (timeout > _timeout - 1) {
   b62e6:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   b62e8:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   b62ea:	42b3      	cmp	r3, r6
   b62ec:	dcf0      	bgt.n	b62d0 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
   b62ee:	7d20      	ldrb	r0, [r4, #20]
      if (_debug) {
   b62f0:	b128      	cbz	r0, b62fe <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   b62f2:	f003 ff93 	bl	ba21c <_Z16_fetch_usbserialv>
   b62f6:	4904      	ldr	r1, [pc, #16]	; (b6308 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   b62f8:	f002 fe81 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b62fc:	4628      	mov	r0, r5
}
   b62fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   b6300:	2001      	movs	r0, #1
   b6302:	e7fc      	b.n	b62fe <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   b6304:	2003e5ec 	.word	0x2003e5ec
   b6308:	000bd886 	.word	0x000bd886

000b630c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   b6310:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6312:	4606      	mov	r6, r0
   b6314:	4688      	mov	r8, r1
   b6316:	4614      	mov	r4, r2
  if (_debug) {
   b6318:	b14b      	cbz	r3, b632e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   b631a:	f003 ff7f 	bl	ba21c <_Z16_fetch_usbserialv>
   b631e:	4927      	ldr	r1, [pc, #156]	; (b63bc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   b6320:	f002 fe6d 	bl	b8ffe <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b6324:	f003 ff7a 	bl	ba21c <_Z16_fetch_usbserialv>
   b6328:	4925      	ldr	r1, [pc, #148]	; (b63c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   b632a:	f002 fe68 	bl	b8ffe <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b632e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b63d4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   b6332:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6334:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b6338:	4648      	mov	r0, r9
   b633a:	f003 fafd 	bl	b9938 <_ZN9TCPClient9availableEv>
   b633e:	b178      	cbz	r0, b6360 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   b6340:	4648      	mov	r0, r9
   b6342:	f003 f907 	bl	b9554 <_ZN9TCPClient4readEv>
    if (_debug) {
   b6346:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   b6348:	b2c7      	uxtb	r7, r0
    if (_debug) {
   b634a:	b12b      	cbz	r3, b6358 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   b634c:	f003 ff66 	bl	ba21c <_Z16_fetch_usbserialv>
   b6350:	6803      	ldr	r3, [r0, #0]
   b6352:	4639      	mov	r1, r7
   b6354:	689b      	ldr	r3, [r3, #8]
   b6356:	4798      	blx	r3
    response[j] = c;
   b6358:	5567      	strb	r7, [r4, r5]
    j++;
   b635a:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b635c:	4555      	cmp	r5, sl
   b635e:	d1eb      	bne.n	b6338 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   b6360:	7d33      	ldrb	r3, [r6, #20]
   b6362:	b123      	cbz	r3, b636e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   b6364:	f003 ff5a 	bl	ba21c <_Z16_fetch_usbserialv>
   b6368:	4916      	ldr	r1, [pc, #88]	; (b63c4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   b636a:	f002 fe48 	bl	b8ffe <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b636e:	2300      	movs	r3, #0
   b6370:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   b6372:	4915      	ldr	r1, [pc, #84]	; (b63c8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   b6374:	4640      	mov	r0, r8
   b6376:	f005 f8e0 	bl	bb53a <strcmp>
   b637a:	b968      	cbnz	r0, b6398 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   b637c:	4913      	ldr	r1, [pc, #76]	; (b63cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   b637e:	4620      	mov	r0, r4
   b6380:	f005 f94e 	bl	bb620 <strstr>
      result = 1;
   b6384:	ed9f 0a12 	vldr	s0, [pc, #72]	; b63d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b6388:	2800      	cmp	r0, #0
   b638a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b638e:	bf18      	it	ne
   b6390:	eeb0 0a67 	vmovne.f32	s0, s15
}
   b6394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   b6398:	217c      	movs	r1, #124	; 0x7c
   b639a:	4620      	mov	r0, r4
   b639c:	f005 f8b6 	bl	bb50c <strchr>
  if (pch != NULL) {
   b63a0:	b148      	cbz	r0, b63b6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   b63a2:	3001      	adds	r0, #1
   b63a4:	f005 f844 	bl	bb430 <atof>
   b63a8:	ec51 0b10 	vmov	r0, r1, d0
   b63ac:	f004 ffcc 	bl	bb348 <__aeabi_d2f>
   b63b0:	ee00 0a10 	vmov	s0, r0
   b63b4:	e7ee      	b.n	b6394 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   b63b6:	ed9f 0a06 	vldr	s0, [pc, #24]	; b63d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   b63ba:	e7eb      	b.n	b6394 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   b63bc:	000bd87b 	.word	0x000bd87b
   b63c0:	000bd867 	.word	0x000bd867
   b63c4:	000bd87a 	.word	0x000bd87a
   b63c8:	000bda99 	.word	0x000bda99
   b63cc:	000bda9e 	.word	0x000bda9e
   b63d0:	cda2425f 	.word	0xcda2425f
   b63d4:	2003e5ec 	.word	0x2003e5ec

000b63d8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b63d8:	b570      	push	{r4, r5, r6, lr}
   b63da:	ed2d 8b02 	vpush	{d8}
   b63de:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b63e0:	6841      	ldr	r1, [r0, #4]
   b63e2:	4822      	ldr	r0, [pc, #136]	; (b646c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b63e4:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   b63e8:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b63ea:	2300      	movs	r3, #0
   b63ec:	f003 f948 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b63f0:	4620      	mov	r0, r4
   b63f2:	6861      	ldr	r1, [r4, #4]
   b63f4:	f242 3234 	movw	r2, #9012	; 0x2334
   b63f8:	f7ff fea8 	bl	b614c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b63fc:	481b      	ldr	r0, [pc, #108]	; (b646c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b63fe:	f003 f9bd 	bl	b977c <_ZN9TCPClient9connectedEv>
   b6402:	b180      	cbz	r0, b6426 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.print(payload);
   b6404:	4629      	mov	r1, r5
   b6406:	4819      	ldr	r0, [pc, #100]	; (b646c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6408:	f002 fde6 	bl	b8fd8 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   b640c:	4620      	mov	r0, r4
   b640e:	f7ff ff5b 	bl	b62c8 <_ZN6UbiTCP16waitServerAnswerEv>
   b6412:	4605      	mov	r5, r0
   b6414:	b980      	cbnz	r0, b6438 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x60>
    _client_tcp_ubi.stop();
   b6416:	4815      	ldr	r0, [pc, #84]	; (b646c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6418:	f003 fae8 	bl	b99ec <_ZN9TCPClient4stopEv>
    return false;
   b641c:	2500      	movs	r5, #0
}
   b641e:	ecbd 8b02 	vpop	{d8}
   b6422:	4628      	mov	r0, r5
   b6424:	bd70      	pop	{r4, r5, r6, pc}
    if (_debug) {
   b6426:	7d23      	ldrb	r3, [r4, #20]
   b6428:	2b00      	cmp	r3, #0
   b642a:	d0f4      	beq.n	b6416 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   b642c:	f003 fef6 	bl	ba21c <_Z16_fetch_usbserialv>
   b6430:	490f      	ldr	r1, [pc, #60]	; (b6470 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   b6432:	f002 fde4 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b6436:	e7ee      	b.n	b6416 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
  char* response = (char*)malloc(sizeof(char) * 100);
   b6438:	2064      	movs	r0, #100	; 0x64
   b643a:	f000 fd43 	bl	b6ec4 <malloc>
  float value = parseTCPAnswer("POST", response);
   b643e:	490d      	ldr	r1, [pc, #52]	; (b6474 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>)
   b6440:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   b6442:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   b6444:	4620      	mov	r0, r4
   b6446:	f7ff ff61 	bl	b630c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   b644a:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   b644c:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   b6450:	f000 fd40 	bl	b6ed4 <free>
  if (value != ERROR_VALUE) {
   b6454:	eddf 7a08 	vldr	s15, [pc, #32]	; b6478 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>
   b6458:	eeb4 8a67 	vcmp.f32	s16, s15
   b645c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6460:	d0d9      	beq.n	b6416 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   b6462:	4802      	ldr	r0, [pc, #8]	; (b646c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   b6464:	f003 fac2 	bl	b99ec <_ZN9TCPClient4stopEv>
    return true;
   b6468:	e7d9      	b.n	b641e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
   b646a:	bf00      	nop
   b646c:	2003e5ec 	.word	0x2003e5ec
   b6470:	000bdaa1 	.word	0x000bdaa1
   b6474:	000bda99 	.word	0x000bda99
   b6478:	cda2425f 	.word	0xcda2425f

000b647c <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b647c:	b570      	push	{r4, r5, r6, lr}
   b647e:	ed2d 8b02 	vpush	{d8}
   b6482:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6484:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   b6486:	460d      	mov	r5, r1
   b6488:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b648a:	6841      	ldr	r1, [r0, #4]
   b648c:	481e      	ldr	r0, [pc, #120]	; (b6508 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b648e:	f242 3234 	movw	r2, #9012	; 0x2334
   b6492:	f003 f8f5 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6496:	4620      	mov	r0, r4
   b6498:	6861      	ldr	r1, [r4, #4]
   b649a:	f242 3234 	movw	r2, #9012	; 0x2334
   b649e:	f7ff fe55 	bl	b614c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b64a2:	4819      	ldr	r0, [pc, #100]	; (b6508 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   b64a4:	f003 f96a 	bl	b977c <_ZN9TCPClient9connectedEv>
   b64a8:	b328      	cbz	r0, b64f6 <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   b64aa:	4620      	mov	r0, r4
   b64ac:	4632      	mov	r2, r6
   b64ae:	4629      	mov	r1, r5
   b64b0:	f7ff fe98 	bl	b61e4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b64b4:	4620      	mov	r0, r4
   b64b6:	f7ff ff07 	bl	b62c8 <_ZN6UbiTCP16waitServerAnswerEv>
   b64ba:	b948      	cbnz	r0, b64d0 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   b64bc:	4812      	ldr	r0, [pc, #72]	; (b6508 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   b64be:	ed9f 8a13 	vldr	s16, [pc, #76]	; b650c <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   b64c2:	f003 fa93 	bl	b99ec <_ZN9TCPClient4stopEv>
}
   b64c6:	eeb0 0a48 	vmov.f32	s0, s16
   b64ca:	ecbd 8b02 	vpop	{d8}
   b64ce:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b64d0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b64d4:	f000 fcf6 	bl	b6ec4 <malloc>
    float value = parseTCPAnswer("LV", response);
   b64d8:	490d      	ldr	r1, [pc, #52]	; (b6510 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   b64da:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b64dc:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   b64de:	4620      	mov	r0, r4
   b64e0:	f7ff ff14 	bl	b630c <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   b64e4:	4808      	ldr	r0, [pc, #32]	; (b6508 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   b64e6:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   b64ea:	f003 fa7f 	bl	b99ec <_ZN9TCPClient4stopEv>
    free(response);
   b64ee:	4628      	mov	r0, r5
   b64f0:	f000 fcf0 	bl	b6ed4 <free>
    return value;
   b64f4:	e7e7      	b.n	b64c6 <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   b64f6:	7d23      	ldrb	r3, [r4, #20]
   b64f8:	2b00      	cmp	r3, #0
   b64fa:	d0df      	beq.n	b64bc <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   b64fc:	f003 fe8e 	bl	ba21c <_Z16_fetch_usbserialv>
   b6500:	4904      	ldr	r1, [pc, #16]	; (b6514 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   b6502:	f002 fd7c 	bl	b8ffe <_ZN5Print7printlnEPKc>
   b6506:	e7d9      	b.n	b64bc <_ZN6UbiTCP3getEPKcS1_+0x40>
   b6508:	2003e5ec 	.word	0x2003e5ec
   b650c:	cda2425f 	.word	0xcda2425f
   b6510:	000bdabf 	.word	0x000bdabf
   b6514:	000bdac2 	.word	0x000bdac2

000b6518 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   b6518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b651c:	460d      	mov	r5, r1
   b651e:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b6520:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   b6524:	f000 fcce 	bl	b6ec4 <malloc>
  if (_debug) {
   b6528:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   b652a:	4607      	mov	r7, r0
  if (_debug) {
   b652c:	b14b      	cbz	r3, b6542 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   b652e:	f003 fe75 	bl	ba21c <_Z16_fetch_usbserialv>
   b6532:	493a      	ldr	r1, [pc, #232]	; (b661c <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   b6534:	f002 fd63 	bl	b8ffe <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   b6538:	f003 fe70 	bl	ba21c <_Z16_fetch_usbserialv>
   b653c:	4938      	ldr	r1, [pc, #224]	; (b6620 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   b653e:	f002 fd5e 	bl	b8ffe <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   b6542:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b6634 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   b6546:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6548:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   b654c:	4648      	mov	r0, r9
   b654e:	f003 f9f3 	bl	b9938 <_ZN9TCPClient9availableEv>
   b6552:	b188      	cbz	r0, b6578 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   b6554:	4648      	mov	r0, r9
   b6556:	f002 fffd 	bl	b9554 <_ZN9TCPClient4readEv>
    if (_debug) {
   b655a:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   b655c:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   b6560:	b12b      	cbz	r3, b656e <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   b6562:	f003 fe5b 	bl	ba21c <_Z16_fetch_usbserialv>
   b6566:	6803      	ldr	r3, [r0, #0]
   b6568:	4641      	mov	r1, r8
   b656a:	689b      	ldr	r3, [r3, #8]
   b656c:	4798      	blx	r3
    response[j] = c;
   b656e:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   b6572:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   b6574:	4556      	cmp	r6, sl
   b6576:	d1e9      	bne.n	b654c <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   b6578:	7d2b      	ldrb	r3, [r5, #20]
   b657a:	b123      	cbz	r3, b6586 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   b657c:	f003 fe4e 	bl	ba21c <_Z16_fetch_usbserialv>
   b6580:	4928      	ldr	r1, [pc, #160]	; (b6624 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   b6582:	f002 fd3c 	bl	b8ffe <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   b6586:	2500      	movs	r5, #0
	  : _Node_allocator()
   b6588:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   b658a:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   b658e:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   b6592:	4925      	ldr	r1, [pc, #148]	; (b6628 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   b6594:	7125      	strb	r5, [r4, #4]
   b6596:	4638      	mov	r0, r7
  response[j] = '\0';
   b6598:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   b659a:	f005 fe87 	bl	bc2ac <strtok>
    if (strcmp(token, "OK") == 0) {
   b659e:	f8df 9098 	ldr.w	r9, [pc, #152]	; b6638 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   b65a2:	f8df a098 	ldr.w	sl, [pc, #152]	; b663c <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   b65a6:	f8df 8080 	ldr.w	r8, [pc, #128]	; b6628 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   b65aa:	4606      	mov	r6, r0
  while (token != NULL) {
   b65ac:	b37e      	cbz	r6, b660e <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   b65ae:	4649      	mov	r1, r9
   b65b0:	4630      	mov	r0, r6
   b65b2:	f004 ffc2 	bl	bb53a <strcmp>
   b65b6:	bb00      	cbnz	r0, b65fa <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   b65b8:	4641      	mov	r1, r8
   b65ba:	f005 fe77 	bl	bc2ac <strtok>
      if (strcmp(token, "null") == 0) {
   b65be:	491b      	ldr	r1, [pc, #108]	; (b662c <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   b65c0:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   b65c2:	f004 ffba 	bl	bb53a <strcmp>
   b65c6:	b918      	cbnz	r0, b65d0 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   b65c8:	4b19      	ldr	r3, [pc, #100]	; (b6630 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   b65ca:	9500      	str	r5, [sp, #0]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	e008      	b.n	b65e2 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   b65d0:	4630      	mov	r0, r6
   b65d2:	f004 ff2d 	bl	bb430 <atof>
   b65d6:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   b65da:	9500      	str	r5, [sp, #0]
   b65dc:	f004 feb4 	bl	bb348 <__aeabi_d2f>
   b65e0:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   b65e2:	466a      	mov	r2, sp
   b65e4:	4621      	mov	r1, r4
   b65e6:	a802      	add	r0, sp, #8
   b65e8:	f7ff fd2a 	bl	b6040 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   b65ec:	4641      	mov	r1, r8
   b65ee:	2000      	movs	r0, #0
   b65f0:	f005 fe5c 	bl	bc2ac <strtok>
    mapKey++;
   b65f4:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   b65f6:	4606      	mov	r6, r0
  while (token != NULL) {
   b65f8:	e7d8      	b.n	b65ac <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   b65fa:	4651      	mov	r1, sl
   b65fc:	4630      	mov	r0, r6
   b65fe:	f004 ff9c 	bl	bb53a <strcmp>
   b6602:	2800      	cmp	r0, #0
   b6604:	d1f2      	bne.n	b65ec <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   b6606:	4641      	mov	r1, r8
   b6608:	f005 fe50 	bl	bc2ac <strtok>
   b660c:	e7dc      	b.n	b65c8 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   b660e:	4638      	mov	r0, r7
   b6610:	f000 fc60 	bl	b6ed4 <free>
}
   b6614:	4620      	mov	r0, r4
   b6616:	b004      	add	sp, #16
   b6618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b661c:	000bd87b 	.word	0x000bd87b
   b6620:	000bd867 	.word	0x000bd867
   b6624:	000bd87a 	.word	0x000bd87a
   b6628:	000bda77 	.word	0x000bda77
   b662c:	000bdae8 	.word	0x000bdae8
   b6630:	cda2425f 	.word	0xcda2425f
   b6634:	2003e5ec 	.word	0x2003e5ec
   b6638:	000bda9e 	.word	0x000bda9e
   b663c:	000bdaed 	.word	0x000bdaed

000b6640 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b6640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   b6644:	1d07      	adds	r7, r0, #4
   b6646:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   b6648:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b664a:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   b664e:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   b6652:	7103      	strb	r3, [r0, #4]
   b6654:	460d      	mov	r5, r1
   b6656:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b6658:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   b665a:	4604      	mov	r4, r0
   b665c:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   b665e:	482d      	ldr	r0, [pc, #180]	; (b6714 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6660:	f242 3234 	movw	r2, #9012	; 0x2334
   b6664:	f003 f80c 	bl	b9680 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   b6668:	4628      	mov	r0, r5
   b666a:	6869      	ldr	r1, [r5, #4]
   b666c:	f242 3234 	movw	r2, #9012	; 0x2334
   b6670:	f7ff fd6c 	bl	b614c <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   b6674:	4827      	ldr	r0, [pc, #156]	; (b6714 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6676:	f003 f881 	bl	b977c <_ZN9TCPClient9connectedEv>
   b667a:	b310      	cbz	r0, b66c2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   b667c:	4631      	mov	r1, r6
   b667e:	4642      	mov	r2, r8
   b6680:	4628      	mov	r0, r5
   b6682:	f7ff fdaf 	bl	b61e4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   b6686:	4628      	mov	r0, r5
   b6688:	f7ff fe1e 	bl	b62c8 <_ZN6UbiTCP16waitServerAnswerEv>
   b668c:	4606      	mov	r6, r0
   b668e:	b9c0      	cbnz	r0, b66c2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   b6690:	4820      	ldr	r0, [pc, #128]	; (b6714 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   b6692:	4f21      	ldr	r7, [pc, #132]	; (b6718 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   b6694:	f003 f9aa 	bl	b99ec <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   b6698:	4920      	ldr	r1, [pc, #128]	; (b671c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   b669a:	4640      	mov	r0, r8
   b669c:	f005 fe06 	bl	bc2ac <strtok>
      int mapKey = 0;
   b66a0:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   b66a2:	4e1e      	ldr	r6, [pc, #120]	; (b671c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
      while (token != NULL) {
   b66a4:	2800      	cmp	r0, #0
   b66a6:	d030      	beq.n	b670a <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xca>
   b66a8:	4621      	mov	r1, r4
   b66aa:	a802      	add	r0, sp, #8
   b66ac:	466a      	mov	r2, sp
   b66ae:	9500      	str	r5, [sp, #0]
   b66b0:	9701      	str	r7, [sp, #4]
   b66b2:	f7ff fcc5 	bl	b6040 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   b66b6:	4631      	mov	r1, r6
   b66b8:	2000      	movs	r0, #0
        mapKey++;
   b66ba:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   b66bc:	f005 fdf6 	bl	bc2ac <strtok>
      while (token != NULL) {
   b66c0:	e7f0      	b.n	b66a4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   b66c2:	4629      	mov	r1, r5
   b66c4:	a802      	add	r0, sp, #8
   b66c6:	f7ff ff27 	bl	b6518 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   b66ca:	68a0      	ldr	r0, [r4, #8]
   b66cc:	f7ff fd20 	bl	b6110 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
      if (__x._M_root() != nullptr)
   b66d0:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   b66d2:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   b66d4:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   b66d8:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   b66dc:	b17a      	cbz	r2, b66fe <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xbe>
      _M_header._M_color = __from._M_header._M_color;
   b66de:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b66e2:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   b66e4:	9905      	ldr	r1, [sp, #20]
   b66e6:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   b66e8:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   b66ea:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   b66ec:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   b66ee:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   b66f0:	9a07      	ldr	r2, [sp, #28]
   b66f2:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   b66f4:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   b66f6:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   b66fa:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   b66fc:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   b66fe:	9804      	ldr	r0, [sp, #16]
   b6700:	f7ff fd06 	bl	b6110 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0>
  _client_tcp_ubi.stop();
   b6704:	4803      	ldr	r0, [pc, #12]	; (b6714 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd4>)
   b6706:	f003 f971 	bl	b99ec <_ZN9TCPClient4stopEv>
}
   b670a:	4620      	mov	r0, r4
   b670c:	b008      	add	sp, #32
   b670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6712:	bf00      	nop
   b6714:	2003e5ec 	.word	0x2003e5ec
   b6718:	cda2425f 	.word	0xcda2425f
   b671c:	000bdaf3 	.word	0x000bdaf3

000b6720 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   b6720:	4801      	ldr	r0, [pc, #4]	; (b6728 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b6722:	f003 b9b3 	b.w	b9a8c <_ZN9TCPClientC1Ev>
   b6726:	bf00      	nop
   b6728:	2003e5ec 	.word	0x2003e5ec

000b672c <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   b672c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6734 <_ZN6UbiUDP3getEPKcS1_+0x8>
   b6730:	4770      	bx	lr
   b6732:	bf00      	nop
   b6734:	cda2425f 	.word	0xcda2425f

000b6738 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   b6738:	7501      	strb	r1, [r0, #20]
   b673a:	4770      	bx	lr

000b673c <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   b673c:	2200      	movs	r2, #0
	  : _Node_allocator()
   b673e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   b6740:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   b6744:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   b6748:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   b674a:	4770      	bx	lr

000b674c <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b674c:	b530      	push	{r4, r5, lr}
   b674e:	4d06      	ldr	r5, [pc, #24]	; (b6768 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   b6750:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   b6752:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6756:	2500      	movs	r5, #0
  _token = token;
   b6758:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b675a:	7505      	strb	r5, [r0, #20]
   b675c:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   b6760:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   b6764:	6185      	str	r5, [r0, #24]
}
   b6766:	bd30      	pop	{r4, r5, pc}
   b6768:	000bdbc4 	.word	0x000bdbc4

000b676c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   b676c:	4801      	ldr	r0, [pc, #4]	; (b6774 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b676e:	f003 bbf5 	b.w	b9f5c <_ZN3UDPC1Ev>
   b6772:	bf00      	nop
   b6774:	2003e608 	.word	0x2003e608

000b6778 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   b6778:	b510      	push	{r4, lr}
   b677a:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   b677c:	684a      	ldr	r2, [r1, #4]
   b677e:	4902      	ldr	r1, [pc, #8]	; (b6788 <_ZN6UbiUDP11getServerIpEv+0x10>)
   b6780:	f002 fb8c 	bl	b8e9c <_ZN5spark12NetworkClass7resolveEPKc>
}
   b6784:	4620      	mov	r0, r4
   b6786:	bd10      	pop	{r4, pc}
   b6788:	2003e658 	.word	0x2003e658

000b678c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b678c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b678e:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   b6790:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b6792:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   b6794:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   b6796:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   b6798:	f7ff ffee 	bl	b6778 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   b679c:	a802      	add	r0, sp, #8
   b679e:	f001 f9b5 	bl	b7b0c <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   b67a2:	b9a0      	cbnz	r0, b67ce <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   b67a4:	7d33      	ldrb	r3, [r6, #20]
   b67a6:	b123      	cbz	r3, b67b2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   b67a8:	f003 fd38 	bl	ba21c <_Z16_fetch_usbserialv>
   b67ac:	4927      	ldr	r1, [pc, #156]	; (b684c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   b67ae:	f002 fc26 	bl	b8ffe <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   b67b2:	23f3      	movs	r3, #243	; 0xf3
   b67b4:	9300      	str	r3, [sp, #0]
   b67b6:	2237      	movs	r2, #55	; 0x37
   b67b8:	233d      	movs	r3, #61	; 0x3d
   b67ba:	21a9      	movs	r1, #169	; 0xa9
   b67bc:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   b67be:	ad09      	add	r5, sp, #36	; 0x24
   b67c0:	f001 f9c8 	bl	b7b54 <_ZN9IPAddressC1Ehhhh>
   b67c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67c6:	ac03      	add	r4, sp, #12
   b67c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67ca:	682b      	ldr	r3, [r5, #0]
   b67cc:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   b67ce:	2200      	movs	r2, #0
   b67d0:	f240 21bd 	movw	r1, #701	; 0x2bd
   b67d4:	481e      	ldr	r0, [pc, #120]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b67d6:	f003 fbf3 	bl	b9fc0 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   b67da:	2200      	movs	r2, #0
   b67dc:	f242 3134 	movw	r1, #9012	; 0x2334
   b67e0:	481b      	ldr	r0, [pc, #108]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b67e2:	f003 f9db 	bl	b9b9c <_ZN3UDP5beginEtm>
   b67e6:	ad03      	add	r5, sp, #12
   b67e8:	4b1a      	ldr	r3, [pc, #104]	; (b6854 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   b67ea:	9308      	str	r3, [sp, #32]
   b67ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67ee:	ac09      	add	r4, sp, #36	; 0x24
   b67f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67f2:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b67f4:	4816      	ldr	r0, [pc, #88]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b67f6:	7023      	strb	r3, [r4, #0]
   b67f8:	f242 3234 	movw	r2, #9012	; 0x2334
   b67fc:	a908      	add	r1, sp, #32
   b67fe:	f003 fbfb 	bl	b9ff8 <_ZN3UDP11beginPacketE9IPAddresst>
   b6802:	b958      	cbnz	r0, b681c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   b6804:	7d33      	ldrb	r3, [r6, #20]
   b6806:	b123      	cbz	r3, b6812 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   b6808:	f003 fd08 	bl	ba21c <_Z16_fetch_usbserialv>
   b680c:	4912      	ldr	r1, [pc, #72]	; (b6858 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   b680e:	f002 fbf6 	bl	b8ffe <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   b6812:	480f      	ldr	r0, [pc, #60]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6814:	f003 fa0e 	bl	b9c34 <_ZN3UDP4stopEv>
    return false;
   b6818:	2000      	movs	r0, #0
   b681a:	e014      	b.n	b6846 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   b681c:	2f00      	cmp	r7, #0
   b681e:	d0f1      	beq.n	b6804 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   b6820:	4638      	mov	r0, r7
   b6822:	f004 feba 	bl	bb59a <strlen>
   b6826:	4639      	mov	r1, r7
   b6828:	4602      	mov	r2, r0
   b682a:	4809      	ldr	r0, [pc, #36]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b682c:	f003 fa10 	bl	b9c50 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b6830:	2800      	cmp	r0, #0
   b6832:	d0e7      	beq.n	b6804 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   b6834:	4806      	ldr	r0, [pc, #24]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6836:	f003 f957 	bl	b9ae8 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   b683a:	2800      	cmp	r0, #0
   b683c:	d0e2      	beq.n	b6804 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   b683e:	4804      	ldr	r0, [pc, #16]	; (b6850 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   b6840:	f003 f9f8 	bl	b9c34 <_ZN3UDP4stopEv>
  return true;
   b6844:	2001      	movs	r0, #1
}
   b6846:	b00f      	add	sp, #60	; 0x3c
   b6848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b684a:	bf00      	nop
   b684c:	000bdb10 	.word	0x000bdb10
   b6850:	2003e608 	.word	0x2003e608
   b6854:	000bdcf8 	.word	0x000bdcf8
   b6858:	000bdb9c 	.word	0x000bdb9c

000b685c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b685c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   b685e:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b6860:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b6862:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   b6864:	e9cd 2100 	strd	r2, r1, [sp]
   b6868:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   b686a:	f000 fb2b 	bl	b6ec4 <malloc>
   b686e:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   b6870:	2014      	movs	r0, #20
   b6872:	f7fd fc10 	bl	b4096 <_Znwj>
   b6876:	4605      	mov	r5, r0
   b6878:	b120      	cbz	r0, b6884 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   b687a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b687e:	4633      	mov	r3, r6
   b6880:	f7ff fbd6 	bl	b6030 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   b6884:	6025      	str	r5, [r4, #0]
}
   b6886:	b002      	add	sp, #8
   b6888:	bd70      	pop	{r4, r5, r6, pc}
	...

000b688c <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   b688c:	b538      	push	{r3, r4, r5, lr}
   b688e:	2500      	movs	r5, #0
   b6890:	4604      	mov	r4, r0
   b6892:	4613      	mov	r3, r2
   b6894:	7245      	strb	r5, [r0, #9]
   b6896:	7285      	strb	r5, [r0, #10]
   b6898:	4a02      	ldr	r2, [pc, #8]	; (b68a4 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   b689a:	f7ff ffdf 	bl	b685c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   b689e:	4620      	mov	r0, r4
   b68a0:	bd38      	pop	{r3, r4, r5, pc}
   b68a2:	bf00      	nop
   b68a4:	000bdbd4 	.word	0x000bdbd4

000b68a8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b68a8:	b508      	push	{r3, lr}
   b68aa:	4b02      	ldr	r3, [pc, #8]	; (b68b4 <cellular_signal+0xc>)
   b68ac:	681b      	ldr	r3, [r3, #0]
   b68ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68b0:	9301      	str	r3, [sp, #4]
   b68b2:	bd08      	pop	{r3, pc}
   b68b4:	00030274 	.word	0x00030274

000b68b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b68b8:	b508      	push	{r3, lr}
   b68ba:	4b02      	ldr	r3, [pc, #8]	; (b68c4 <os_mutex_recursive_create+0xc>)
   b68bc:	681b      	ldr	r3, [r3, #0]
   b68be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68c0:	9301      	str	r3, [sp, #4]
   b68c2:	bd08      	pop	{r3, pc}
   b68c4:	00030248 	.word	0x00030248

000b68c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b68c8:	b508      	push	{r3, lr}
   b68ca:	4b02      	ldr	r3, [pc, #8]	; (b68d4 <os_mutex_recursive_destroy+0xc>)
   b68cc:	681b      	ldr	r3, [r3, #0]
   b68ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b68d0:	9301      	str	r3, [sp, #4]
   b68d2:	bd08      	pop	{r3, pc}
   b68d4:	00030248 	.word	0x00030248

000b68d8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b68d8:	b508      	push	{r3, lr}
   b68da:	4b02      	ldr	r3, [pc, #8]	; (b68e4 <os_mutex_recursive_lock+0xc>)
   b68dc:	681b      	ldr	r3, [r3, #0]
   b68de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b68e0:	9301      	str	r3, [sp, #4]
   b68e2:	bd08      	pop	{r3, pc}
   b68e4:	00030248 	.word	0x00030248

000b68e8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b68e8:	b508      	push	{r3, lr}
   b68ea:	4b02      	ldr	r3, [pc, #8]	; (b68f4 <os_mutex_recursive_unlock+0xc>)
   b68ec:	681b      	ldr	r3, [r3, #0]
   b68ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b68f0:	9301      	str	r3, [sp, #4]
   b68f2:	bd08      	pop	{r3, pc}
   b68f4:	00030248 	.word	0x00030248

000b68f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b68f8:	b508      	push	{r3, lr}
   b68fa:	4b02      	ldr	r3, [pc, #8]	; (b6904 <HAL_RNG_GetRandomNumber+0xc>)
   b68fc:	681b      	ldr	r3, [r3, #0]
   b68fe:	685b      	ldr	r3, [r3, #4]
   b6900:	9301      	str	r3, [sp, #4]
   b6902:	bd08      	pop	{r3, pc}
   b6904:	00030218 	.word	0x00030218

000b6908 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6908:	b508      	push	{r3, lr}
   b690a:	4b02      	ldr	r3, [pc, #8]	; (b6914 <HAL_Delay_Microseconds+0xc>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	68db      	ldr	r3, [r3, #12]
   b6910:	9301      	str	r3, [sp, #4]
   b6912:	bd08      	pop	{r3, pc}
   b6914:	00030218 	.word	0x00030218

000b6918 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6918:	b508      	push	{r3, lr}
   b691a:	4b02      	ldr	r3, [pc, #8]	; (b6924 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b691c:	681b      	ldr	r3, [r3, #0]
   b691e:	695b      	ldr	r3, [r3, #20]
   b6920:	9301      	str	r3, [sp, #4]
   b6922:	bd08      	pop	{r3, pc}
   b6924:	00030218 	.word	0x00030218

000b6928 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6928:	b508      	push	{r3, lr}
   b692a:	4b02      	ldr	r3, [pc, #8]	; (b6934 <HAL_Pin_Mode+0xc>)
   b692c:	681b      	ldr	r3, [r3, #0]
   b692e:	689b      	ldr	r3, [r3, #8]
   b6930:	9301      	str	r3, [sp, #4]
   b6932:	bd08      	pop	{r3, pc}
   b6934:	0003022c 	.word	0x0003022c

000b6938 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6938:	b508      	push	{r3, lr}
   b693a:	4b02      	ldr	r3, [pc, #8]	; (b6944 <HAL_Get_Pin_Mode+0xc>)
   b693c:	681b      	ldr	r3, [r3, #0]
   b693e:	68db      	ldr	r3, [r3, #12]
   b6940:	9301      	str	r3, [sp, #4]
   b6942:	bd08      	pop	{r3, pc}
   b6944:	0003022c 	.word	0x0003022c

000b6948 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6948:	b508      	push	{r3, lr}
   b694a:	4b02      	ldr	r3, [pc, #8]	; (b6954 <HAL_GPIO_Write+0xc>)
   b694c:	681b      	ldr	r3, [r3, #0]
   b694e:	691b      	ldr	r3, [r3, #16]
   b6950:	9301      	str	r3, [sp, #4]
   b6952:	bd08      	pop	{r3, pc}
   b6954:	0003022c 	.word	0x0003022c

000b6958 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6958:	b508      	push	{r3, lr}
   b695a:	4b02      	ldr	r3, [pc, #8]	; (b6964 <HAL_GPIO_Read+0xc>)
   b695c:	681b      	ldr	r3, [r3, #0]
   b695e:	695b      	ldr	r3, [r3, #20]
   b6960:	9301      	str	r3, [sp, #4]
   b6962:	bd08      	pop	{r3, pc}
   b6964:	0003022c 	.word	0x0003022c

000b6968 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6968:	b508      	push	{r3, lr}
   b696a:	4b02      	ldr	r3, [pc, #8]	; (b6974 <hal_i2c_begin+0xc>)
   b696c:	681b      	ldr	r3, [r3, #0]
   b696e:	68db      	ldr	r3, [r3, #12]
   b6970:	9301      	str	r3, [sp, #4]
   b6972:	bd08      	pop	{r3, pc}
   b6974:	00030228 	.word	0x00030228

000b6978 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6978:	b508      	push	{r3, lr}
   b697a:	4b02      	ldr	r3, [pc, #8]	; (b6984 <hal_i2c_begin_transmission+0xc>)
   b697c:	681b      	ldr	r3, [r3, #0]
   b697e:	699b      	ldr	r3, [r3, #24]
   b6980:	9301      	str	r3, [sp, #4]
   b6982:	bd08      	pop	{r3, pc}
   b6984:	00030228 	.word	0x00030228

000b6988 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6988:	b508      	push	{r3, lr}
   b698a:	4b02      	ldr	r3, [pc, #8]	; (b6994 <hal_i2c_end_transmission+0xc>)
   b698c:	681b      	ldr	r3, [r3, #0]
   b698e:	69db      	ldr	r3, [r3, #28]
   b6990:	9301      	str	r3, [sp, #4]
   b6992:	bd08      	pop	{r3, pc}
   b6994:	00030228 	.word	0x00030228

000b6998 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6998:	b508      	push	{r3, lr}
   b699a:	4b02      	ldr	r3, [pc, #8]	; (b69a4 <hal_i2c_write+0xc>)
   b699c:	681b      	ldr	r3, [r3, #0]
   b699e:	6a1b      	ldr	r3, [r3, #32]
   b69a0:	9301      	str	r3, [sp, #4]
   b69a2:	bd08      	pop	{r3, pc}
   b69a4:	00030228 	.word	0x00030228

000b69a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b69a8:	b508      	push	{r3, lr}
   b69aa:	4b02      	ldr	r3, [pc, #8]	; (b69b4 <hal_i2c_available+0xc>)
   b69ac:	681b      	ldr	r3, [r3, #0]
   b69ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69b0:	9301      	str	r3, [sp, #4]
   b69b2:	bd08      	pop	{r3, pc}
   b69b4:	00030228 	.word	0x00030228

000b69b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b69b8:	b508      	push	{r3, lr}
   b69ba:	4b02      	ldr	r3, [pc, #8]	; (b69c4 <hal_i2c_read+0xc>)
   b69bc:	681b      	ldr	r3, [r3, #0]
   b69be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b69c0:	9301      	str	r3, [sp, #4]
   b69c2:	bd08      	pop	{r3, pc}
   b69c4:	00030228 	.word	0x00030228

000b69c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b69c8:	b508      	push	{r3, lr}
   b69ca:	4b02      	ldr	r3, [pc, #8]	; (b69d4 <hal_i2c_peek+0xc>)
   b69cc:	681b      	ldr	r3, [r3, #0]
   b69ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69d0:	9301      	str	r3, [sp, #4]
   b69d2:	bd08      	pop	{r3, pc}
   b69d4:	00030228 	.word	0x00030228

000b69d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b69d8:	b508      	push	{r3, lr}
   b69da:	4b02      	ldr	r3, [pc, #8]	; (b69e4 <hal_i2c_flush+0xc>)
   b69dc:	681b      	ldr	r3, [r3, #0]
   b69de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69e0:	9301      	str	r3, [sp, #4]
   b69e2:	bd08      	pop	{r3, pc}
   b69e4:	00030228 	.word	0x00030228

000b69e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b69e8:	b508      	push	{r3, lr}
   b69ea:	4b02      	ldr	r3, [pc, #8]	; (b69f4 <hal_i2c_is_enabled+0xc>)
   b69ec:	681b      	ldr	r3, [r3, #0]
   b69ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69f0:	9301      	str	r3, [sp, #4]
   b69f2:	bd08      	pop	{r3, pc}
   b69f4:	00030228 	.word	0x00030228

000b69f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b69f8:	b508      	push	{r3, lr}
   b69fa:	4b02      	ldr	r3, [pc, #8]	; (b6a04 <hal_i2c_init+0xc>)
   b69fc:	681b      	ldr	r3, [r3, #0]
   b69fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a00:	9301      	str	r3, [sp, #4]
   b6a02:	bd08      	pop	{r3, pc}
   b6a04:	00030228 	.word	0x00030228

000b6a08 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6a08:	b508      	push	{r3, lr}
   b6a0a:	4b02      	ldr	r3, [pc, #8]	; (b6a14 <hal_i2c_lock+0xc>)
   b6a0c:	681b      	ldr	r3, [r3, #0]
   b6a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6a10:	9301      	str	r3, [sp, #4]
   b6a12:	bd08      	pop	{r3, pc}
   b6a14:	00030228 	.word	0x00030228

000b6a18 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6a18:	b508      	push	{r3, lr}
   b6a1a:	4b02      	ldr	r3, [pc, #8]	; (b6a24 <hal_i2c_unlock+0xc>)
   b6a1c:	681b      	ldr	r3, [r3, #0]
   b6a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6a20:	9301      	str	r3, [sp, #4]
   b6a22:	bd08      	pop	{r3, pc}
   b6a24:	00030228 	.word	0x00030228

000b6a28 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6a28:	b508      	push	{r3, lr}
   b6a2a:	4b02      	ldr	r3, [pc, #8]	; (b6a34 <hal_i2c_request_ex+0xc>)
   b6a2c:	681b      	ldr	r3, [r3, #0]
   b6a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6a30:	9301      	str	r3, [sp, #4]
   b6a32:	bd08      	pop	{r3, pc}
   b6a34:	00030228 	.word	0x00030228

000b6a38 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6a38:	b508      	push	{r3, lr}
   b6a3a:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <if_index_to_name+0xc>)
   b6a3c:	681b      	ldr	r3, [r3, #0]
   b6a3e:	695b      	ldr	r3, [r3, #20]
   b6a40:	9301      	str	r3, [sp, #4]
   b6a42:	bd08      	pop	{r3, pc}
   b6a44:	0003026c 	.word	0x0003026c

000b6a48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6a48:	b508      	push	{r3, lr}
   b6a4a:	4b02      	ldr	r3, [pc, #8]	; (b6a54 <inet_inet_ntop+0xc>)
   b6a4c:	681b      	ldr	r3, [r3, #0]
   b6a4e:	695b      	ldr	r3, [r3, #20]
   b6a50:	9301      	str	r3, [sp, #4]
   b6a52:	bd08      	pop	{r3, pc}
   b6a54:	00030264 	.word	0x00030264

000b6a58 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6a58:	b508      	push	{r3, lr}
   b6a5a:	4b02      	ldr	r3, [pc, #8]	; (b6a64 <inet_htonl+0xc>)
   b6a5c:	681b      	ldr	r3, [r3, #0]
   b6a5e:	6a1b      	ldr	r3, [r3, #32]
   b6a60:	9301      	str	r3, [sp, #4]
   b6a62:	bd08      	pop	{r3, pc}
   b6a64:	00030264 	.word	0x00030264

000b6a68 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6a68:	b508      	push	{r3, lr}
   b6a6a:	4b02      	ldr	r3, [pc, #8]	; (b6a74 <inet_ntohs+0xc>)
   b6a6c:	681b      	ldr	r3, [r3, #0]
   b6a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a70:	9301      	str	r3, [sp, #4]
   b6a72:	bd08      	pop	{r3, pc}
   b6a74:	00030264 	.word	0x00030264

000b6a78 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6a78:	b508      	push	{r3, lr}
   b6a7a:	4b02      	ldr	r3, [pc, #8]	; (b6a84 <inet_htons+0xc>)
   b6a7c:	681b      	ldr	r3, [r3, #0]
   b6a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a80:	9301      	str	r3, [sp, #4]
   b6a82:	bd08      	pop	{r3, pc}
   b6a84:	00030264 	.word	0x00030264

000b6a88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6a88:	b508      	push	{r3, lr}
   b6a8a:	4b02      	ldr	r3, [pc, #8]	; (b6a94 <netdb_freeaddrinfo+0xc>)
   b6a8c:	681b      	ldr	r3, [r3, #0]
   b6a8e:	689b      	ldr	r3, [r3, #8]
   b6a90:	9301      	str	r3, [sp, #4]
   b6a92:	bd08      	pop	{r3, pc}
   b6a94:	00030268 	.word	0x00030268

000b6a98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6a98:	b508      	push	{r3, lr}
   b6a9a:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <netdb_getaddrinfo+0xc>)
   b6a9c:	681b      	ldr	r3, [r3, #0]
   b6a9e:	68db      	ldr	r3, [r3, #12]
   b6aa0:	9301      	str	r3, [sp, #4]
   b6aa2:	bd08      	pop	{r3, pc}
   b6aa4:	00030268 	.word	0x00030268

000b6aa8 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6aa8:	b508      	push	{r3, lr}
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <sock_bind+0xc>)
   b6aac:	681b      	ldr	r3, [r3, #0]
   b6aae:	685b      	ldr	r3, [r3, #4]
   b6ab0:	9301      	str	r3, [sp, #4]
   b6ab2:	bd08      	pop	{r3, pc}
   b6ab4:	00030238 	.word	0x00030238

000b6ab8 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6ab8:	b508      	push	{r3, lr}
   b6aba:	4b02      	ldr	r3, [pc, #8]	; (b6ac4 <sock_setsockopt+0xc>)
   b6abc:	681b      	ldr	r3, [r3, #0]
   b6abe:	699b      	ldr	r3, [r3, #24]
   b6ac0:	9301      	str	r3, [sp, #4]
   b6ac2:	bd08      	pop	{r3, pc}
   b6ac4:	00030238 	.word	0x00030238

000b6ac8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6ac8:	b508      	push	{r3, lr}
   b6aca:	4b02      	ldr	r3, [pc, #8]	; (b6ad4 <sock_close+0xc>)
   b6acc:	681b      	ldr	r3, [r3, #0]
   b6ace:	69db      	ldr	r3, [r3, #28]
   b6ad0:	9301      	str	r3, [sp, #4]
   b6ad2:	bd08      	pop	{r3, pc}
   b6ad4:	00030238 	.word	0x00030238

000b6ad8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6ad8:	b508      	push	{r3, lr}
   b6ada:	4b02      	ldr	r3, [pc, #8]	; (b6ae4 <sock_connect+0xc>)
   b6adc:	681b      	ldr	r3, [r3, #0]
   b6ade:	6a1b      	ldr	r3, [r3, #32]
   b6ae0:	9301      	str	r3, [sp, #4]
   b6ae2:	bd08      	pop	{r3, pc}
   b6ae4:	00030238 	.word	0x00030238

000b6ae8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6ae8:	b508      	push	{r3, lr}
   b6aea:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <sock_recv+0xc>)
   b6aec:	681b      	ldr	r3, [r3, #0]
   b6aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6af0:	9301      	str	r3, [sp, #4]
   b6af2:	bd08      	pop	{r3, pc}
   b6af4:	00030238 	.word	0x00030238

000b6af8 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6af8:	b508      	push	{r3, lr}
   b6afa:	4b02      	ldr	r3, [pc, #8]	; (b6b04 <sock_recvfrom+0xc>)
   b6afc:	681b      	ldr	r3, [r3, #0]
   b6afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b00:	9301      	str	r3, [sp, #4]
   b6b02:	bd08      	pop	{r3, pc}
   b6b04:	00030238 	.word	0x00030238

000b6b08 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6b08:	b508      	push	{r3, lr}
   b6b0a:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <sock_send+0xc>)
   b6b0c:	681b      	ldr	r3, [r3, #0]
   b6b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b10:	9301      	str	r3, [sp, #4]
   b6b12:	bd08      	pop	{r3, pc}
   b6b14:	00030238 	.word	0x00030238

000b6b18 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6b18:	b508      	push	{r3, lr}
   b6b1a:	4b02      	ldr	r3, [pc, #8]	; (b6b24 <sock_sendto+0xc>)
   b6b1c:	681b      	ldr	r3, [r3, #0]
   b6b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b20:	9301      	str	r3, [sp, #4]
   b6b22:	bd08      	pop	{r3, pc}
   b6b24:	00030238 	.word	0x00030238

000b6b28 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6b28:	b508      	push	{r3, lr}
   b6b2a:	4b02      	ldr	r3, [pc, #8]	; (b6b34 <sock_socket+0xc>)
   b6b2c:	681b      	ldr	r3, [r3, #0]
   b6b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b30:	9301      	str	r3, [sp, #4]
   b6b32:	bd08      	pop	{r3, pc}
   b6b34:	00030238 	.word	0x00030238

000b6b38 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6b38:	b508      	push	{r3, lr}
   b6b3a:	4b02      	ldr	r3, [pc, #8]	; (b6b44 <hal_spi_begin+0xc>)
   b6b3c:	681b      	ldr	r3, [r3, #0]
   b6b3e:	681b      	ldr	r3, [r3, #0]
   b6b40:	9301      	str	r3, [sp, #4]
   b6b42:	bd08      	pop	{r3, pc}
   b6b44:	00030230 	.word	0x00030230

000b6b48 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6b48:	b508      	push	{r3, lr}
   b6b4a:	4b02      	ldr	r3, [pc, #8]	; (b6b54 <hal_spi_transfer+0xc>)
   b6b4c:	681b      	ldr	r3, [r3, #0]
   b6b4e:	695b      	ldr	r3, [r3, #20]
   b6b50:	9301      	str	r3, [sp, #4]
   b6b52:	bd08      	pop	{r3, pc}
   b6b54:	00030230 	.word	0x00030230

000b6b58 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6b58:	b508      	push	{r3, lr}
   b6b5a:	4b02      	ldr	r3, [pc, #8]	; (b6b64 <hal_spi_init+0xc>)
   b6b5c:	681b      	ldr	r3, [r3, #0]
   b6b5e:	69db      	ldr	r3, [r3, #28]
   b6b60:	9301      	str	r3, [sp, #4]
   b6b62:	bd08      	pop	{r3, pc}
   b6b64:	00030230 	.word	0x00030230

000b6b68 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6b68:	b508      	push	{r3, lr}
   b6b6a:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <hal_spi_is_enabled+0xc>)
   b6b6c:	681b      	ldr	r3, [r3, #0]
   b6b6e:	6a1b      	ldr	r3, [r3, #32]
   b6b70:	9301      	str	r3, [sp, #4]
   b6b72:	bd08      	pop	{r3, pc}
   b6b74:	00030230 	.word	0x00030230

000b6b78 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6b78:	b508      	push	{r3, lr}
   b6b7a:	4b02      	ldr	r3, [pc, #8]	; (b6b84 <hal_spi_info+0xc>)
   b6b7c:	681b      	ldr	r3, [r3, #0]
   b6b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b80:	9301      	str	r3, [sp, #4]
   b6b82:	bd08      	pop	{r3, pc}
   b6b84:	00030230 	.word	0x00030230

000b6b88 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6b88:	b508      	push	{r3, lr}
   b6b8a:	4b02      	ldr	r3, [pc, #8]	; (b6b94 <hal_spi_set_settings+0xc>)
   b6b8c:	681b      	ldr	r3, [r3, #0]
   b6b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b90:	9301      	str	r3, [sp, #4]
   b6b92:	bd08      	pop	{r3, pc}
   b6b94:	00030230 	.word	0x00030230

000b6b98 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6b98:	b508      	push	{r3, lr}
   b6b9a:	4b02      	ldr	r3, [pc, #8]	; (b6ba4 <hal_spi_acquire+0xc>)
   b6b9c:	681b      	ldr	r3, [r3, #0]
   b6b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ba0:	9301      	str	r3, [sp, #4]
   b6ba2:	bd08      	pop	{r3, pc}
   b6ba4:	00030230 	.word	0x00030230

000b6ba8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6ba8:	b508      	push	{r3, lr}
   b6baa:	4b02      	ldr	r3, [pc, #8]	; (b6bb4 <hal_spi_release+0xc>)
   b6bac:	681b      	ldr	r3, [r3, #0]
   b6bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bb0:	9301      	str	r3, [sp, #4]
   b6bb2:	bd08      	pop	{r3, pc}
   b6bb4:	00030230 	.word	0x00030230

000b6bb8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6bb8:	b508      	push	{r3, lr}
   b6bba:	4b02      	ldr	r3, [pc, #8]	; (b6bc4 <hal_usart_end+0xc>)
   b6bbc:	681b      	ldr	r3, [r3, #0]
   b6bbe:	689b      	ldr	r3, [r3, #8]
   b6bc0:	9301      	str	r3, [sp, #4]
   b6bc2:	bd08      	pop	{r3, pc}
   b6bc4:	0003023c 	.word	0x0003023c

000b6bc8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6bc8:	b508      	push	{r3, lr}
   b6bca:	4b02      	ldr	r3, [pc, #8]	; (b6bd4 <hal_usart_write+0xc>)
   b6bcc:	681b      	ldr	r3, [r3, #0]
   b6bce:	68db      	ldr	r3, [r3, #12]
   b6bd0:	9301      	str	r3, [sp, #4]
   b6bd2:	bd08      	pop	{r3, pc}
   b6bd4:	0003023c 	.word	0x0003023c

000b6bd8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6bd8:	b508      	push	{r3, lr}
   b6bda:	4b02      	ldr	r3, [pc, #8]	; (b6be4 <hal_usart_available+0xc>)
   b6bdc:	681b      	ldr	r3, [r3, #0]
   b6bde:	691b      	ldr	r3, [r3, #16]
   b6be0:	9301      	str	r3, [sp, #4]
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	0003023c 	.word	0x0003023c

000b6be8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6be8:	b508      	push	{r3, lr}
   b6bea:	4b02      	ldr	r3, [pc, #8]	; (b6bf4 <hal_usart_read+0xc>)
   b6bec:	681b      	ldr	r3, [r3, #0]
   b6bee:	695b      	ldr	r3, [r3, #20]
   b6bf0:	9301      	str	r3, [sp, #4]
   b6bf2:	bd08      	pop	{r3, pc}
   b6bf4:	0003023c 	.word	0x0003023c

000b6bf8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6bf8:	b508      	push	{r3, lr}
   b6bfa:	4b02      	ldr	r3, [pc, #8]	; (b6c04 <hal_usart_peek+0xc>)
   b6bfc:	681b      	ldr	r3, [r3, #0]
   b6bfe:	699b      	ldr	r3, [r3, #24]
   b6c00:	9301      	str	r3, [sp, #4]
   b6c02:	bd08      	pop	{r3, pc}
   b6c04:	0003023c 	.word	0x0003023c

000b6c08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <hal_usart_flush+0xc>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	69db      	ldr	r3, [r3, #28]
   b6c10:	9301      	str	r3, [sp, #4]
   b6c12:	bd08      	pop	{r3, pc}
   b6c14:	0003023c 	.word	0x0003023c

000b6c18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6c18:	b508      	push	{r3, lr}
   b6c1a:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <hal_usart_is_enabled+0xc>)
   b6c1c:	681b      	ldr	r3, [r3, #0]
   b6c1e:	6a1b      	ldr	r3, [r3, #32]
   b6c20:	9301      	str	r3, [sp, #4]
   b6c22:	bd08      	pop	{r3, pc}
   b6c24:	0003023c 	.word	0x0003023c

000b6c28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6c28:	b508      	push	{r3, lr}
   b6c2a:	4b02      	ldr	r3, [pc, #8]	; (b6c34 <hal_usart_available_data_for_write+0xc>)
   b6c2c:	681b      	ldr	r3, [r3, #0]
   b6c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c30:	9301      	str	r3, [sp, #4]
   b6c32:	bd08      	pop	{r3, pc}
   b6c34:	0003023c 	.word	0x0003023c

000b6c38 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6c38:	b508      	push	{r3, lr}
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <hal_usart_begin_config+0xc>)
   b6c3c:	681b      	ldr	r3, [r3, #0]
   b6c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	bd08      	pop	{r3, pc}
   b6c44:	0003023c 	.word	0x0003023c

000b6c48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <hal_usart_init_ex+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	0003023c 	.word	0x0003023c

000b6c58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <HAL_USB_USART_Init+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	681b      	ldr	r3, [r3, #0]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	0003024c 	.word	0x0003024c

000b6c68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <HAL_USB_USART_Begin+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	685b      	ldr	r3, [r3, #4]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	0003024c 	.word	0x0003024c

000b6c78 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <HAL_USB_USART_End+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	689b      	ldr	r3, [r3, #8]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	0003024c 	.word	0x0003024c

000b6c88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b02      	ldr	r3, [pc, #8]	; (b6c94 <HAL_USB_USART_Available_Data+0xc>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	691b      	ldr	r3, [r3, #16]
   b6c90:	9301      	str	r3, [sp, #4]
   b6c92:	bd08      	pop	{r3, pc}
   b6c94:	0003024c 	.word	0x0003024c

000b6c98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b02      	ldr	r3, [pc, #8]	; (b6ca4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	695b      	ldr	r3, [r3, #20]
   b6ca0:	9301      	str	r3, [sp, #4]
   b6ca2:	bd08      	pop	{r3, pc}
   b6ca4:	0003024c 	.word	0x0003024c

000b6ca8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ca8:	b508      	push	{r3, lr}
   b6caa:	4b02      	ldr	r3, [pc, #8]	; (b6cb4 <HAL_USB_USART_Receive_Data+0xc>)
   b6cac:	681b      	ldr	r3, [r3, #0]
   b6cae:	699b      	ldr	r3, [r3, #24]
   b6cb0:	9301      	str	r3, [sp, #4]
   b6cb2:	bd08      	pop	{r3, pc}
   b6cb4:	0003024c 	.word	0x0003024c

000b6cb8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b02      	ldr	r3, [pc, #8]	; (b6cc4 <HAL_USB_USART_Send_Data+0xc>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	69db      	ldr	r3, [r3, #28]
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	bd08      	pop	{r3, pc}
   b6cc4:	0003024c 	.word	0x0003024c

000b6cc8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6cc8:	b508      	push	{r3, lr}
   b6cca:	4b02      	ldr	r3, [pc, #8]	; (b6cd4 <HAL_USB_USART_Flush_Data+0xc>)
   b6ccc:	681b      	ldr	r3, [r3, #0]
   b6cce:	6a1b      	ldr	r3, [r3, #32]
   b6cd0:	9301      	str	r3, [sp, #4]
   b6cd2:	bd08      	pop	{r3, pc}
   b6cd4:	0003024c 	.word	0x0003024c

000b6cd8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6cd8:	b508      	push	{r3, lr}
   b6cda:	4b02      	ldr	r3, [pc, #8]	; (b6ce4 <panic_+0xc>)
   b6cdc:	681b      	ldr	r3, [r3, #0]
   b6cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ce0:	9301      	str	r3, [sp, #4]
   b6ce2:	bd08      	pop	{r3, pc}
   b6ce4:	00030260 	.word	0x00030260

000b6ce8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b02      	ldr	r3, [pc, #8]	; (b6cf4 <log_message+0xc>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cf0:	9301      	str	r3, [sp, #4]
   b6cf2:	bd08      	pop	{r3, pc}
   b6cf4:	00030260 	.word	0x00030260

000b6cf8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <log_level_name+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	00030260 	.word	0x00030260

000b6d08 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <log_set_callbacks+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030260 	.word	0x00030260

000b6d18 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b03      	ldr	r3, [pc, #12]	; (b6d28 <diag_get_source+0x10>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6d22:	9301      	str	r3, [sp, #4]
   b6d24:	bd08      	pop	{r3, pc}
   b6d26:	0000      	.short	0x0000
   b6d28:	00030260 	.word	0x00030260

000b6d2c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <set_system_mode+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	685b      	ldr	r3, [r3, #4]
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030220 	.word	0x00030220

000b6d3c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <system_delay_ms+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	695b      	ldr	r3, [r3, #20]
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	00030220 	.word	0x00030220

000b6d4c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <system_thread_set_state+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030220 	.word	0x00030220

000b6d5c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <application_thread_current+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030220 	.word	0x00030220

000b6d6c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <application_thread_invoke+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	00030220 	.word	0x00030220

000b6d7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b03      	ldr	r3, [pc, #12]	; (b6d8c <system_ctrl_set_app_request_handler+0x10>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6d86:	9301      	str	r3, [sp, #4]
   b6d88:	bd08      	pop	{r3, pc}
   b6d8a:	0000      	.short	0x0000
   b6d8c:	00030220 	.word	0x00030220

000b6d90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6d90:	b508      	push	{r3, lr}
   b6d92:	4b03      	ldr	r3, [pc, #12]	; (b6da0 <system_ctrl_set_result+0x10>)
   b6d94:	681b      	ldr	r3, [r3, #0]
   b6d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6d9a:	9301      	str	r3, [sp, #4]
   b6d9c:	bd08      	pop	{r3, pc}
   b6d9e:	0000      	.short	0x0000
   b6da0:	00030220 	.word	0x00030220

000b6da4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <spark_variable+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	681b      	ldr	r3, [r3, #0]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030244 	.word	0x00030244

000b6db4 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <spark_process+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	689b      	ldr	r3, [r3, #8]
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030244 	.word	0x00030244

000b6dc4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <spark_cloud_flag_connected+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	695b      	ldr	r3, [r3, #20]
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030244 	.word	0x00030244

000b6dd4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <spark_deviceID+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	69db      	ldr	r3, [r3, #28]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030244 	.word	0x00030244

000b6de4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <spark_send_event+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6a1b      	ldr	r3, [r3, #32]
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030244 	.word	0x00030244

000b6df4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030244 	.word	0x00030244

000b6e04 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <network_connect+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	685b      	ldr	r3, [r3, #4]
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030240 	.word	0x00030240

000b6e14 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <network_connecting+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	689b      	ldr	r3, [r3, #8]
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030240 	.word	0x00030240

000b6e24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <network_disconnect+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	68db      	ldr	r3, [r3, #12]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030240 	.word	0x00030240

000b6e34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <network_ready+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	691b      	ldr	r3, [r3, #16]
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030240 	.word	0x00030240

000b6e44 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <network_on+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	695b      	ldr	r3, [r3, #20]
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030240 	.word	0x00030240

000b6e54 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <network_off+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	699b      	ldr	r3, [r3, #24]
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030240 	.word	0x00030240

000b6e64 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <network_listen+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	69db      	ldr	r3, [r3, #28]
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030240 	.word	0x00030240

000b6e74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <network_listening+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6a1b      	ldr	r3, [r3, #32]
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030240 	.word	0x00030240

000b6e84 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <network_set_listen_timeout+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	00030240 	.word	0x00030240

000b6e94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <network_get_listen_timeout+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	00030240 	.word	0x00030240

000b6ea4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <network_is_on+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	00030240 	.word	0x00030240

000b6eb4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <network_is_off+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	00030240 	.word	0x00030240

000b6ec4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <malloc+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	681b      	ldr	r3, [r3, #0]
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	0003021c 	.word	0x0003021c

000b6ed4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <free+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	685b      	ldr	r3, [r3, #4]
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	0003021c 	.word	0x0003021c

000b6ee4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <realloc+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	689b      	ldr	r3, [r3, #8]
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	0003021c 	.word	0x0003021c

000b6ef4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <snprintf+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	69db      	ldr	r3, [r3, #28]
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	0003021c 	.word	0x0003021c

000b6f04 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <vsnprintf+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	0003021c 	.word	0x0003021c

000b6f14 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <abort+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	0003021c 	.word	0x0003021c

000b6f24 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <_malloc_r+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	0003021c 	.word	0x0003021c

000b6f34 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <__errno+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	0003021c 	.word	0x0003021c

000b6f44 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <__assert_func+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	0003021c 	.word	0x0003021c

000b6f54 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <newlib_impure_ptr_callback+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	0003021c 	.word	0x0003021c

000b6f64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6f64:	2100      	movs	r1, #0
   b6f66:	f7ff bee9 	b.w	b6d3c <system_delay_ms>

000b6f6a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6f6a:	b510      	push	{r4, lr}
      if (_M_empty())
   b6f6c:	6883      	ldr	r3, [r0, #8]
   b6f6e:	4604      	mov	r4, r0
   b6f70:	b90b      	cbnz	r3, b6f76 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6f72:	f003 fc16 	bl	ba7a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f76:	68c3      	ldr	r3, [r0, #12]
   b6f78:	4798      	blx	r3
      if (_M_manager)
   b6f7a:	68a3      	ldr	r3, [r4, #8]
   b6f7c:	b11b      	cbz	r3, b6f86 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6f7e:	2203      	movs	r2, #3
   b6f80:	4621      	mov	r1, r4
   b6f82:	4620      	mov	r0, r4
   b6f84:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6f86:	4620      	mov	r0, r4
   b6f88:	2110      	movs	r1, #16
}
   b6f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6f8e:	f7fd b886 	b.w	b409e <_ZdlPvj>

000b6f92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6f92:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6f94:	6843      	ldr	r3, [r0, #4]
   b6f96:	3b01      	subs	r3, #1
    {
   b6f98:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6f9a:	6043      	str	r3, [r0, #4]
   b6f9c:	b963      	cbnz	r3, b6fb8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6f9e:	6803      	ldr	r3, [r0, #0]
   b6fa0:	689b      	ldr	r3, [r3, #8]
   b6fa2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6fa4:	68a3      	ldr	r3, [r4, #8]
   b6fa6:	3b01      	subs	r3, #1
   b6fa8:	60a3      	str	r3, [r4, #8]
   b6faa:	b92b      	cbnz	r3, b6fb8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6fac:	6823      	ldr	r3, [r4, #0]
   b6fae:	4620      	mov	r0, r4
   b6fb0:	68db      	ldr	r3, [r3, #12]
    }
   b6fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6fb6:	4718      	bx	r3
    }
   b6fb8:	bd10      	pop	{r4, pc}

000b6fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fba:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6fbc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fc0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6fc2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6fc6:	42ae      	cmp	r6, r5
   b6fc8:	d004      	beq.n	b6fd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6fca:	4628      	mov	r0, r5
   b6fcc:	f002 fa00 	bl	b93d0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6fd0:	3510      	adds	r5, #16
   b6fd2:	e7f8      	b.n	b6fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6fd4:	6820      	ldr	r0, [r4, #0]
   b6fd6:	f7ff ff7d 	bl	b6ed4 <free>
    AllocatorT::free(data_);
}
   b6fda:	4620      	mov	r0, r4
   b6fdc:	bd70      	pop	{r4, r5, r6, pc}

000b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6fde:	b510      	push	{r4, lr}
   b6fe0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6fe2:	6800      	ldr	r0, [r0, #0]
   b6fe4:	b108      	cbz	r0, b6fea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6fe6:	f7ff ffd4 	bl	b6f92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6fea:	4620      	mov	r0, r4
   b6fec:	bd10      	pop	{r4, pc}

000b6fee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6fee:	b513      	push	{r0, r1, r4, lr}
   b6ff0:	460b      	mov	r3, r1
   b6ff2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ff4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6ff8:	466c      	mov	r4, sp
   b6ffa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6ffe:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7002:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7006:	e894 0003 	ldmia.w	r4, {r0, r1}
   b700a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b700e:	b002      	add	sp, #8
   b7010:	bd10      	pop	{r4, pc}
	...

000b7014 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7014:	4802      	ldr	r0, [pc, #8]	; (b7020 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7016:	2300      	movs	r3, #0
   b7018:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b701a:	f7ff bc4d 	b.w	b68b8 <os_mutex_recursive_create>
   b701e:	bf00      	nop
   b7020:	2003e654 	.word	0x2003e654

000b7024 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7024:	2200      	movs	r2, #0
   b7026:	6840      	ldr	r0, [r0, #4]
   b7028:	4611      	mov	r1, r2
   b702a:	f7ff bf03 	b.w	b6e34 <network_ready>

000b702e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b702e:	2200      	movs	r2, #0
   b7030:	6840      	ldr	r0, [r0, #4]
   b7032:	4611      	mov	r1, r2
   b7034:	f7ff bf1e 	b.w	b6e74 <network_listening>

000b7038 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7038:	2200      	movs	r2, #0
   b703a:	6840      	ldr	r0, [r0, #4]
   b703c:	4611      	mov	r1, r2
   b703e:	f7ff bf29 	b.w	b6e94 <network_get_listen_timeout>

000b7042 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7042:	6840      	ldr	r0, [r0, #4]
   b7044:	2200      	movs	r2, #0
   b7046:	f7ff bf1d 	b.w	b6e84 <network_set_listen_timeout>

000b704a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b704a:	6840      	ldr	r0, [r0, #4]
   b704c:	2200      	movs	r2, #0
   b704e:	f081 0101 	eor.w	r1, r1, #1
   b7052:	f7ff bf07 	b.w	b6e64 <network_listen>

000b7056 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7056:	2300      	movs	r3, #0
   b7058:	6840      	ldr	r0, [r0, #4]
   b705a:	461a      	mov	r2, r3
   b705c:	4619      	mov	r1, r3
   b705e:	f7ff bef9 	b.w	b6e54 <network_off>

000b7062 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7062:	2300      	movs	r3, #0
   b7064:	6840      	ldr	r0, [r0, #4]
   b7066:	461a      	mov	r2, r3
   b7068:	4619      	mov	r1, r3
   b706a:	f7ff beeb 	b.w	b6e44 <network_on>

000b706e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b706e:	2200      	movs	r2, #0
   b7070:	6840      	ldr	r0, [r0, #4]
   b7072:	4611      	mov	r1, r2
   b7074:	f7ff bece 	b.w	b6e14 <network_connecting>

000b7078 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7078:	6840      	ldr	r0, [r0, #4]
   b707a:	2200      	movs	r2, #0
   b707c:	2102      	movs	r1, #2
   b707e:	f7ff bed1 	b.w	b6e24 <network_disconnect>

000b7082 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7082:	2300      	movs	r3, #0
   b7084:	6840      	ldr	r0, [r0, #4]
   b7086:	461a      	mov	r2, r3
   b7088:	f7ff bebc 	b.w	b6e04 <network_connect>

000b708c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b708c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b708e:	4b13      	ldr	r3, [pc, #76]	; (b70dc <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b7090:	6003      	str	r3, [r0, #0]
   b7092:	2518      	movs	r5, #24
   b7094:	3330      	adds	r3, #48	; 0x30
   b7096:	b086      	sub	sp, #24
   b7098:	460e      	mov	r6, r1
   b709a:	6043      	str	r3, [r0, #4]
   b709c:	462a      	mov	r2, r5
   b709e:	2100      	movs	r1, #0
   b70a0:	4604      	mov	r4, r0
   b70a2:	3008      	adds	r0, #8
   b70a4:	f004 f9fc 	bl	bb4a0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b70a8:	2200      	movs	r2, #0
   b70aa:	6870      	ldr	r0, [r6, #4]
   b70ac:	4611      	mov	r1, r2
   b70ae:	f7ff fec1 	bl	b6e34 <network_ready>
   b70b2:	b178      	cbz	r0, b70d4 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b70b4:	2100      	movs	r1, #0
   b70b6:	462a      	mov	r2, r5
   b70b8:	4668      	mov	r0, sp
   b70ba:	f004 f9f1 	bl	bb4a0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b70be:	4669      	mov	r1, sp
   b70c0:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b70c2:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b70c6:	f7ff fbef 	bl	b68a8 <cellular_signal>
   b70ca:	b918      	cbnz	r0, b70d4 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b70cc:	4669      	mov	r1, sp
   b70ce:	4620      	mov	r0, r4
   b70d0:	f000 f8b8 	bl	b7244 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b70d4:	4620      	mov	r0, r4
   b70d6:	b006      	add	sp, #24
   b70d8:	bd70      	pop	{r4, r5, r6, pc}
   b70da:	bf00      	nop
   b70dc:	000bdc3c 	.word	0x000bdc3c

000b70e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b70e0:	4b08      	ldr	r3, [pc, #32]	; (b7104 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b70e2:	b510      	push	{r4, lr}
   b70e4:	2428      	movs	r4, #40	; 0x28
   b70e6:	4622      	mov	r2, r4
   b70e8:	4618      	mov	r0, r3
   b70ea:	2100      	movs	r1, #0
   b70ec:	f004 f9d8 	bl	bb4a0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b70f0:	4b05      	ldr	r3, [pc, #20]	; (b7108 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b70f2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b70f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b70f8:	6042      	str	r2, [r0, #4]
   b70fa:	2204      	movs	r2, #4
   b70fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b70fe:	4a03      	ldr	r2, [pc, #12]	; (b710c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7100:	601a      	str	r2, [r3, #0]
   b7102:	bd10      	pop	{r4, pc}
   b7104:	2003e660 	.word	0x2003e660
   b7108:	2003e658 	.word	0x2003e658
   b710c:	000bdc00 	.word	0x000bdc00

000b7110 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b7110:	4770      	bx	lr

000b7112 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b7112:	7b00      	ldrb	r0, [r0, #12]
   b7114:	4770      	bx	lr

000b7116 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b7116:	7b03      	ldrb	r3, [r0, #12]
   b7118:	b14b      	cbz	r3, b712e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b711a:	6903      	ldr	r3, [r0, #16]
   b711c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b7120:	d005      	beq.n	b712e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b7122:	6980      	ldr	r0, [r0, #24]
   b7124:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b7128:	bf18      	it	ne
   b712a:	2001      	movne	r0, #1
   b712c:	4770      	bx	lr
   b712e:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   b7130:	4770      	bx	lr

000b7132 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b7132:	6803      	ldr	r3, [r0, #0]
   b7134:	6a1b      	ldr	r3, [r3, #32]
   b7136:	4718      	bx	r3

000b7138 <_ZNK14CellularSignal7printToER5Print>:
{
   b7138:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b713a:	6803      	ldr	r3, [r0, #0]
{
   b713c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b713e:	691b      	ldr	r3, [r3, #16]
{
   b7140:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b7142:	4798      	blx	r3
   b7144:	2102      	movs	r1, #2
   b7146:	4628      	mov	r0, r5
   b7148:	f002 f84a 	bl	b91e0 <_ZN5Print5printEfi>
    n += p.print(',');
   b714c:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b714e:	4604      	mov	r4, r0
    n += p.print(',');
   b7150:	4628      	mov	r0, r5
   b7152:	f001 ff45 	bl	b8fe0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b7156:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b7158:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b715a:	699b      	ldr	r3, [r3, #24]
   b715c:	4630      	mov	r0, r6
   b715e:	4798      	blx	r3
   b7160:	2102      	movs	r1, #2
   b7162:	4628      	mov	r0, r5
   b7164:	f002 f83c 	bl	b91e0 <_ZN5Print5printEfi>
}
   b7168:	4420      	add	r0, r4
   b716a:	bd70      	pop	{r4, r5, r6, pc}

000b716c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b716c:	f1a0 0004 	sub.w	r0, r0, #4
   b7170:	f7ff bfe2 	b.w	b7138 <_ZNK14CellularSignal7printToER5Print>

000b7174 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b7174:	b510      	push	{r4, lr}
   b7176:	2120      	movs	r1, #32
   b7178:	4604      	mov	r4, r0
   b717a:	f7fc ff90 	bl	b409e <_ZdlPvj>
   b717e:	4620      	mov	r0, r4
   b7180:	bd10      	pop	{r4, pc}
	...

000b7184 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b7184:	7b03      	ldrb	r3, [r0, #12]
   b7186:	b17b      	cbz	r3, b71a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b7188:	6943      	ldr	r3, [r0, #20]
   b718a:	2b00      	cmp	r3, #0
   b718c:	db0c      	blt.n	b71a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b718e:	ee07 3a90 	vmov	s15, r3
   b7192:	ed9f 7a07 	vldr	s14, [pc, #28]	; b71b0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b7196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b719a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b719e:	eddf 7a05 	vldr	s15, [pc, #20]	; b71b4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b71a2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b71a6:	4770      	bx	lr
    return -1.0f;
   b71a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b71ac:	4770      	bx	lr
   b71ae:	bf00      	nop
   b71b0:	477fff00 	.word	0x477fff00
   b71b4:	42c80000 	.word	0x42c80000

000b71b8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b71b8:	7b03      	ldrb	r3, [r0, #12]
   b71ba:	b163      	cbz	r3, b71d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b71bc:	6903      	ldr	r3, [r0, #16]
   b71be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b71c2:	d008      	beq.n	b71d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b71c4:	ee07 3a90 	vmov	s15, r3
   b71c8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b71dc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b71cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b71d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b71d4:	4770      	bx	lr
    return 0.0f;
   b71d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b71e0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b71da:	4770      	bx	lr
   b71dc:	42c80000 	.word	0x42c80000
   b71e0:	00000000 	.word	0x00000000

000b71e4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b71e4:	7b03      	ldrb	r3, [r0, #12]
   b71e6:	b17b      	cbz	r3, b7208 <_ZNK14CellularSignal10getQualityEv+0x24>
   b71e8:	69c3      	ldr	r3, [r0, #28]
   b71ea:	2b00      	cmp	r3, #0
   b71ec:	db0c      	blt.n	b7208 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b71ee:	ee07 3a90 	vmov	s15, r3
   b71f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b7210 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b71f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b71fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b71fe:	eddf 7a05 	vldr	s15, [pc, #20]	; b7214 <_ZNK14CellularSignal10getQualityEv+0x30>
   b7202:	ee20 0a27 	vmul.f32	s0, s0, s15
   b7206:	4770      	bx	lr
    return -1.0f;
   b7208:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b720c:	4770      	bx	lr
   b720e:	bf00      	nop
   b7210:	477fff00 	.word	0x477fff00
   b7214:	42c80000 	.word	0x42c80000

000b7218 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b7218:	7b03      	ldrb	r3, [r0, #12]
   b721a:	b163      	cbz	r3, b7236 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b721c:	6983      	ldr	r3, [r0, #24]
   b721e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b7222:	d008      	beq.n	b7236 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b7224:	ee07 3a90 	vmov	s15, r3
   b7228:	ed9f 7a04 	vldr	s14, [pc, #16]	; b723c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b722c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7230:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b7234:	4770      	bx	lr
    return 0.0f;
   b7236:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7240 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b723a:	4770      	bx	lr
   b723c:	42c80000 	.word	0x42c80000
   b7240:	00000000 	.word	0x00000000

000b7244 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b7244:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b7246:	460d      	mov	r5, r1
   b7248:	f100 0408 	add.w	r4, r0, #8
   b724c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7250:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7254:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b7258:	2001      	movs	r0, #1
   b725a:	bd30      	pop	{r4, r5, pc}

000b725c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b725c:	4770      	bx	lr

000b725e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b725e:	2000      	movs	r0, #0
   b7260:	4770      	bx	lr

000b7262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7262:	b510      	push	{r4, lr}
   b7264:	2110      	movs	r1, #16
   b7266:	4604      	mov	r4, r0
   b7268:	f7fc ff19 	bl	b409e <_ZdlPvj>
   b726c:	4620      	mov	r0, r4
   b726e:	bd10      	pop	{r4, pc}

000b7270 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7270:	b508      	push	{r3, lr}
      { delete this; }
   b7272:	f7ff fff6 	bl	b7262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7276:	bd08      	pop	{r3, pc}

000b7278 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7278:	b530      	push	{r4, r5, lr}
        type_(type) {
   b727a:	2200      	movs	r2, #0
   b727c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7280:	6002      	str	r2, [r0, #0]
   b7282:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7284:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7286:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7288:	680c      	ldr	r4, [r1, #0]
   b728a:	8085      	strh	r5, [r0, #4]
   b728c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b728e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7290:	bd30      	pop	{r4, r5, pc}

000b7292 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7292:	b510      	push	{r4, lr}
   b7294:	4604      	mov	r4, r0
    free((void*)msg_);
   b7296:	6800      	ldr	r0, [r0, #0]
   b7298:	f7ff fe1c 	bl	b6ed4 <free>
}
   b729c:	4620      	mov	r0, r4
   b729e:	bd10      	pop	{r4, pc}

000b72a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b72a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b72a2:	68c4      	ldr	r4, [r0, #12]
   b72a4:	b1f4      	cbz	r4, b72e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b72a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b72a8:	2b02      	cmp	r3, #2
   b72aa:	d103      	bne.n	b72b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b72ac:	f104 000c 	add.w	r0, r4, #12
   b72b0:	f7ff ffef 	bl	b7292 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b72b4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b72b6:	b135      	cbz	r5, b72c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b72b8:	4628      	mov	r0, r5
   b72ba:	f7fe f955 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
   b72be:	2110      	movs	r1, #16
   b72c0:	4628      	mov	r0, r5
   b72c2:	f7fc feec 	bl	b409e <_ZdlPvj>
   b72c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b72c8:	b135      	cbz	r5, b72d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b72ca:	4628      	mov	r0, r5
   b72cc:	f7fe f94c 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
   b72d0:	2110      	movs	r1, #16
   b72d2:	4628      	mov	r0, r5
   b72d4:	f7fc fee3 	bl	b409e <_ZdlPvj>
   b72d8:	4620      	mov	r0, r4
   b72da:	2114      	movs	r1, #20
   b72dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b72e0:	f7fc bedd 	b.w	b409e <_ZdlPvj>
   b72e4:	bd38      	pop	{r3, r4, r5, pc}

000b72e6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b72e6:	680b      	ldr	r3, [r1, #0]
   b72e8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b72ea:	684b      	ldr	r3, [r1, #4]
   b72ec:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b72ee:	b113      	cbz	r3, b72f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b72f0:	685a      	ldr	r2, [r3, #4]
   b72f2:	3201      	adds	r2, #1
   b72f4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b72f6:	4770      	bx	lr

000b72f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b72f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b72fa:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b72fc:	4668      	mov	r0, sp
   b72fe:	460d      	mov	r5, r1
   b7300:	f7ff fff1 	bl	b72e6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7304:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7306:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7308:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b730a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b730c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b730e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7310:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7312:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7314:	f7ff fe63 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7318:	b135      	cbz	r5, b7328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b731a:	1d28      	adds	r0, r5, #4
   b731c:	f7ff fe5f 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7320:	2108      	movs	r1, #8
   b7322:	4628      	mov	r0, r5
   b7324:	f7fc febb 	bl	b409e <_ZdlPvj>
        return p;
    }
   b7328:	4620      	mov	r0, r4
   b732a:	b003      	add	sp, #12
   b732c:	bd30      	pop	{r4, r5, pc}

000b732e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b732e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7330:	b510      	push	{r4, lr}
      if (_M_empty())
   b7332:	b90a      	cbnz	r2, b7338 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7334:	f003 fa35 	bl	ba7a2 <_ZSt25__throw_bad_function_callv>
    }
   b7338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b733c:	68c3      	ldr	r3, [r0, #12]
   b733e:	4718      	bx	r3

000b7340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7340:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7342:	6800      	ldr	r0, [r0, #0]
   b7344:	f100 0110 	add.w	r1, r0, #16
   b7348:	f7ff fff1 	bl	b732e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b734c:	bd08      	pop	{r3, pc}

000b734e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b734e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7350:	b510      	push	{r4, lr}
      if (_M_empty())
   b7352:	b90a      	cbnz	r2, b7358 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7354:	f003 fa25 	bl	ba7a2 <_ZSt25__throw_bad_function_callv>
    }
   b7358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b735c:	68c3      	ldr	r3, [r0, #12]
   b735e:	4718      	bx	r3

000b7360 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7360:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7362:	6800      	ldr	r0, [r0, #0]
   b7364:	f100 0110 	add.w	r1, r0, #16
   b7368:	f7ff fff1 	bl	b734e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b736c:	bd08      	pop	{r3, pc}
	...

000b7370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7370:	b538      	push	{r3, r4, r5, lr}
   b7372:	2300      	movs	r3, #0
   b7374:	4604      	mov	r4, r0
   b7376:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7378:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b737a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b737c:	f7fc fe8b 	bl	b4096 <_Znwj>
   b7380:	b128      	cbz	r0, b738e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7382:	2301      	movs	r3, #1
   b7384:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7388:	4b02      	ldr	r3, [pc, #8]	; (b7394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b738a:	6003      	str	r3, [r0, #0]
   b738c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b738e:	6020      	str	r0, [r4, #0]
	}
   b7390:	4620      	mov	r0, r4
   b7392:	bd38      	pop	{r3, r4, r5, pc}
   b7394:	000bdc78 	.word	0x000bdc78

000b7398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7398:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b739a:	2300      	movs	r3, #0
   b739c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b739e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b73a0:	4604      	mov	r4, r0
   b73a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b73a4:	b12b      	cbz	r3, b73b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b73a6:	2202      	movs	r2, #2
   b73a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b73aa:	68eb      	ldr	r3, [r5, #12]
   b73ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b73ae:	68ab      	ldr	r3, [r5, #8]
   b73b0:	60a3      	str	r3, [r4, #8]
    }
   b73b2:	4620      	mov	r0, r4
   b73b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b73b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b73b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73ba:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b73bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b73be:	4668      	mov	r0, sp
   b73c0:	f7ff ff5a 	bl	b7278 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b73c4:	f04f 0302 	mov.w	r3, #2
   b73c8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b73cc:	2a00      	cmp	r2, #0
   b73ce:	d103      	bne.n	b73d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b73d0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b73d4:	2900      	cmp	r1, #0
   b73d6:	d1f7      	bne.n	b73c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b73d8:	d125      	bne.n	b7426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b73da:	f104 050c 	add.w	r5, r4, #12
   b73de:	4669      	mov	r1, sp
   b73e0:	4628      	mov	r0, r5
   b73e2:	f7ff ff49 	bl	b7278 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b73e6:	f3bf 8f5b 	dmb	ish
   b73ea:	2301      	movs	r3, #1
   b73ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b73ee:	2000      	movs	r0, #0
   b73f0:	f104 0308 	add.w	r3, r4, #8
   b73f4:	f3bf 8f5b 	dmb	ish
   b73f8:	e853 6f00 	ldrex	r6, [r3]
   b73fc:	e843 0200 	strex	r2, r0, [r3]
   b7400:	2a00      	cmp	r2, #0
   b7402:	d1f9      	bne.n	b73f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7404:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7408:	b16e      	cbz	r6, b7426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b740a:	f7ff fca7 	bl	b6d5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b740e:	b178      	cbz	r0, b7430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7410:	4629      	mov	r1, r5
   b7412:	4630      	mov	r0, r6
   b7414:	f7ff ff8b 	bl	b732e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7418:	4630      	mov	r0, r6
   b741a:	f7fe f8a5 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b741e:	2110      	movs	r1, #16
   b7420:	4630      	mov	r0, r6
   b7422:	f7fc fe3c 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b7426:	4668      	mov	r0, sp
   b7428:	f7ff ff33 	bl	b7292 <_ZN8particle5ErrorD1Ev>
    }
   b742c:	b009      	add	sp, #36	; 0x24
   b742e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7430:	4631      	mov	r1, r6
   b7432:	a802      	add	r0, sp, #8
   b7434:	f7ff ffb0 	bl	b7398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7438:	68e0      	ldr	r0, [r4, #12]
   b743a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b743e:	b108      	cbz	r0, b7444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7440:	f004 f88e 	bl	bb560 <strdup>
        type_(type) {
   b7444:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7446:	2010      	movs	r0, #16
   b7448:	f8ad 501c 	strh.w	r5, [sp, #28]
   b744c:	f7fc fe23 	bl	b4096 <_Znwj>
   b7450:	4605      	mov	r5, r0
   b7452:	b1e8      	cbz	r0, b7490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7454:	2700      	movs	r7, #0
   b7456:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7458:	2018      	movs	r0, #24
   b745a:	f7fc fe1c 	bl	b4096 <_Znwj>
   b745e:	4604      	mov	r4, r0
   b7460:	b188      	cbz	r0, b7486 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7462:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7464:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7466:	a802      	add	r0, sp, #8
   b7468:	f7ff fdc1 	bl	b6fee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b746c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b746e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7470:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7472:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7474:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7476:	a906      	add	r1, sp, #24
   b7478:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b747a:	60e3      	str	r3, [r4, #12]
   b747c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7480:	9205      	str	r2, [sp, #20]
   b7482:	f7ff fef9 	bl	b7278 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7486:	4b08      	ldr	r3, [pc, #32]	; (b74a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7488:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b748a:	4b08      	ldr	r3, [pc, #32]	; (b74ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b748c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b748e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7490:	a806      	add	r0, sp, #24
   b7492:	f7ff fefe 	bl	b7292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7496:	a802      	add	r0, sp, #8
   b7498:	f7fe f866 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b749c:	2200      	movs	r2, #0
   b749e:	4629      	mov	r1, r5
   b74a0:	4803      	ldr	r0, [pc, #12]	; (b74b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b74a2:	f7ff fc63 	bl	b6d6c <application_thread_invoke>
   b74a6:	e7b7      	b.n	b7418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b74a8:	000b7341 	.word	0x000b7341
   b74ac:	000b75c5 	.word	0x000b75c5
   b74b0:	000b6f6b 	.word	0x000b6f6b

000b74b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b74b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74b8:	b08b      	sub	sp, #44	; 0x2c
   b74ba:	4605      	mov	r5, r0
   b74bc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b74c0:	460f      	mov	r7, r1
   b74c2:	4690      	mov	r8, r2
   b74c4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b74c6:	f7ff fc7d 	bl	b6dc4 <spark_cloud_flag_connected>
   b74ca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b74cc:	4683      	mov	fp, r0
   b74ce:	bb38      	cbnz	r0, b7520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b74d0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b74d4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b74d6:	a905      	add	r1, sp, #20
   b74d8:	4630      	mov	r0, r6
   b74da:	f8ad 3018 	strh.w	r3, [sp, #24]
   b74de:	f7ff fecb 	bl	b7278 <_ZN8particle5ErrorC1EOS0_>
   b74e2:	2014      	movs	r0, #20
   b74e4:	f7fc fdd7 	bl	b4096 <_Znwj>
   b74e8:	4604      	mov	r4, r0
   b74ea:	b148      	cbz	r0, b7500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b74ec:	2302      	movs	r3, #2
   b74ee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b74f0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b74f2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b74f6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b74f8:	4631      	mov	r1, r6
   b74fa:	300c      	adds	r0, #12
   b74fc:	f7ff febc 	bl	b7278 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7500:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7502:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7504:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7508:	f7ff ff32 	bl	b7370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b750c:	4630      	mov	r0, r6
   b750e:	f7ff fec0 	bl	b7292 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7512:	a805      	add	r0, sp, #20
   b7514:	f7ff febd 	bl	b7292 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7518:	4628      	mov	r0, r5
   b751a:	b00b      	add	sp, #44	; 0x2c
   b751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7520:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7522:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7524:	2014      	movs	r0, #20
   b7526:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b752a:	9307      	str	r3, [sp, #28]
   b752c:	f7fc fdb3 	bl	b4096 <_Znwj>
   b7530:	4601      	mov	r1, r0
   b7532:	b118      	cbz	r0, b753c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7534:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7538:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b753a:	7044      	strb	r4, [r0, #1]
   b753c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b753e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7540:	f7ff ff16 	bl	b7370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7544:	4b1e      	ldr	r3, [pc, #120]	; (b75c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7546:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7548:	2008      	movs	r0, #8
   b754a:	f7fc fda4 	bl	b4096 <_Znwj>
   b754e:	4604      	mov	r4, r0
   b7550:	b110      	cbz	r0, b7558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7552:	a903      	add	r1, sp, #12
   b7554:	f7ff fec7 	bl	b72e6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7558:	9600      	str	r6, [sp, #0]
   b755a:	fa5f f38a 	uxtb.w	r3, sl
   b755e:	464a      	mov	r2, r9
   b7560:	4641      	mov	r1, r8
   b7562:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7564:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7566:	f7ff fc3d 	bl	b6de4 <spark_send_event>
   b756a:	b9b8      	cbnz	r0, b759c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b756c:	9b03      	ldr	r3, [sp, #12]
   b756e:	785b      	ldrb	r3, [r3, #1]
   b7570:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7574:	b993      	cbnz	r3, b759c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7576:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b757a:	a905      	add	r1, sp, #20
   b757c:	a803      	add	r0, sp, #12
   b757e:	9205      	str	r2, [sp, #20]
   b7580:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7584:	f7ff ff18 	bl	b73b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7588:	a805      	add	r0, sp, #20
   b758a:	f7ff fe82 	bl	b7292 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b758e:	a805      	add	r0, sp, #20
   b7590:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7592:	f7ff feb1 	bl	b72f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7596:	a806      	add	r0, sp, #24
   b7598:	f7ff fd21 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b759c:	a903      	add	r1, sp, #12
   b759e:	a805      	add	r0, sp, #20
   b75a0:	f7ff fea1 	bl	b72e6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b75a4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b75a6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b75a8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b75aa:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b75ac:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b75ae:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b75b0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b75b2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b75b4:	f7ff fd13 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75b8:	a804      	add	r0, sp, #16
   b75ba:	f7ff fd10 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b75be:	e7ab      	b.n	b7518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b75c0:	000b7641 	.word	0x000b7641

000b75c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b75c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b75c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c8:	4605      	mov	r5, r0
	switch (__op)
   b75ca:	d103      	bne.n	b75d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b75cc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b75ce:	6003      	str	r3, [r0, #0]
      }
   b75d0:	2000      	movs	r0, #0
   b75d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b75d4:	2a02      	cmp	r2, #2
   b75d6:	d010      	beq.n	b75fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b75d8:	2a03      	cmp	r2, #3
   b75da:	d1f9      	bne.n	b75d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b75dc:	6804      	ldr	r4, [r0, #0]
   b75de:	2c00      	cmp	r4, #0
   b75e0:	d0f6      	beq.n	b75d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b75e2:	f104 0010 	add.w	r0, r4, #16
   b75e6:	f7ff fe54 	bl	b7292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b75ea:	4620      	mov	r0, r4
   b75ec:	f7fd ffbc 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b75f0:	2118      	movs	r1, #24
   b75f2:	4620      	mov	r0, r4
   b75f4:	f7fc fd53 	bl	b409e <_ZdlPvj>
   b75f8:	e7ea      	b.n	b75d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b75fa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b75fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b75fe:	f7fc fd4a 	bl	b4096 <_Znwj>
   b7602:	4604      	mov	r4, r0
   b7604:	b150      	cbz	r0, b761c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b7606:	4631      	mov	r1, r6
   b7608:	f7ff fec6 	bl	b7398 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b760c:	6930      	ldr	r0, [r6, #16]
   b760e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7612:	b108      	cbz	r0, b7618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7614:	f003 ffa4 	bl	bb560 <strdup>
        type_(type) {
   b7618:	6120      	str	r0, [r4, #16]
   b761a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b761c:	602c      	str	r4, [r5, #0]
	}
   b761e:	e7d7      	b.n	b75d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7620 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7620:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7622:	2300      	movs	r3, #0
   b7624:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7626:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7628:	4604      	mov	r4, r0
   b762a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b762c:	b12b      	cbz	r3, b763a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b762e:	2202      	movs	r2, #2
   b7630:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7632:	68eb      	ldr	r3, [r5, #12]
   b7634:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7636:	68ab      	ldr	r3, [r5, #8]
   b7638:	60a3      	str	r3, [r4, #8]
    }
   b763a:	4620      	mov	r0, r4
   b763c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7640:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7642:	b089      	sub	sp, #36	; 0x24
   b7644:	4604      	mov	r4, r0
   b7646:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7648:	a801      	add	r0, sp, #4
   b764a:	4611      	mov	r1, r2
   b764c:	f7ff fe54 	bl	b72f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7650:	b1a4      	cbz	r4, b767c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7652:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7654:	b11d      	cbz	r5, b765e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7656:	4628      	mov	r0, r5
   b7658:	f003 ff82 	bl	bb560 <strdup>
   b765c:	4605      	mov	r5, r0
   b765e:	a801      	add	r0, sp, #4
   b7660:	a903      	add	r1, sp, #12
        type_(type) {
   b7662:	9503      	str	r5, [sp, #12]
   b7664:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7668:	f7ff fea6 	bl	b73b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b766c:	a803      	add	r0, sp, #12
   b766e:	f7ff fe10 	bl	b7292 <_ZN8particle5ErrorD1Ev>
   b7672:	a802      	add	r0, sp, #8
   b7674:	f7ff fcb3 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7678:	b009      	add	sp, #36	; 0x24
   b767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b767c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b767e:	2301      	movs	r3, #1
   b7680:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7684:	2a00      	cmp	r2, #0
   b7686:	d103      	bne.n	b7690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7688:	e8c5 3f41 	strexb	r1, r3, [r5]
   b768c:	2900      	cmp	r1, #0
   b768e:	d1f7      	bne.n	b7680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7690:	d1ef      	bne.n	b7672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7692:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7694:	f3bf 8f5b 	dmb	ish
   b7698:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b769a:	1d2b      	adds	r3, r5, #4
   b769c:	f3bf 8f5b 	dmb	ish
   b76a0:	e853 6f00 	ldrex	r6, [r3]
   b76a4:	e843 4200 	strex	r2, r4, [r3]
   b76a8:	2a00      	cmp	r2, #0
   b76aa:	d1f9      	bne.n	b76a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b76ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b76b0:	2e00      	cmp	r6, #0
   b76b2:	d0de      	beq.n	b7672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b76b4:	4620      	mov	r0, r4
   b76b6:	f7ff fb51 	bl	b6d5c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b76ba:	4607      	mov	r7, r0
   b76bc:	b160      	cbz	r0, b76d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b76be:	f105 010c 	add.w	r1, r5, #12
   b76c2:	4630      	mov	r0, r6
   b76c4:	f7ff fe43 	bl	b734e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b76c8:	4630      	mov	r0, r6
   b76ca:	f7fd ff4d 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b76ce:	2110      	movs	r1, #16
   b76d0:	4630      	mov	r0, r6
   b76d2:	f7fc fce4 	bl	b409e <_ZdlPvj>
   b76d6:	e7cc      	b.n	b7672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b76d8:	4631      	mov	r1, r6
   b76da:	a803      	add	r0, sp, #12
   b76dc:	f7ff ffa0 	bl	b7620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b76e0:	7b2b      	ldrb	r3, [r5, #12]
   b76e2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b76e6:	2010      	movs	r0, #16
   b76e8:	f7fc fcd5 	bl	b4096 <_Znwj>
   b76ec:	4605      	mov	r5, r0
   b76ee:	b1d0      	cbz	r0, b7726 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b76f0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b76f2:	2014      	movs	r0, #20
   b76f4:	f7fc fccf 	bl	b4096 <_Znwj>
   b76f8:	4604      	mov	r4, r0
   b76fa:	b178      	cbz	r0, b771c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b76fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b76fe:	4601      	mov	r1, r0
   b7700:	a803      	add	r0, sp, #12
   b7702:	f7ff fc74 	bl	b6fee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7706:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7708:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b770a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b770c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b770e:	9205      	str	r2, [sp, #20]
   b7710:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7712:	60e3      	str	r3, [r4, #12]
   b7714:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7718:	9206      	str	r2, [sp, #24]
   b771a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b771c:	4b06      	ldr	r3, [pc, #24]	; (b7738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b771e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7720:	4b06      	ldr	r3, [pc, #24]	; (b773c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7722:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7724:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7726:	a803      	add	r0, sp, #12
   b7728:	f7fd ff1e 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b772c:	2200      	movs	r2, #0
   b772e:	4629      	mov	r1, r5
   b7730:	4803      	ldr	r0, [pc, #12]	; (b7740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7732:	f7ff fb1b 	bl	b6d6c <application_thread_invoke>
   b7736:	e7c7      	b.n	b76c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7738:	000b7361 	.word	0x000b7361
   b773c:	000b7745 	.word	0x000b7745
   b7740:	000b6f6b 	.word	0x000b6f6b

000b7744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7744:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7746:	b570      	push	{r4, r5, r6, lr}
   b7748:	4604      	mov	r4, r0
	switch (__op)
   b774a:	d103      	bne.n	b7754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b774c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b774e:	6003      	str	r3, [r0, #0]
      }
   b7750:	2000      	movs	r0, #0
   b7752:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7754:	2a02      	cmp	r2, #2
   b7756:	d00c      	beq.n	b7772 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7758:	2a03      	cmp	r2, #3
   b775a:	d1f9      	bne.n	b7750 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b775c:	6804      	ldr	r4, [r0, #0]
   b775e:	2c00      	cmp	r4, #0
   b7760:	d0f6      	beq.n	b7750 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7762:	4620      	mov	r0, r4
   b7764:	f7fd ff00 	bl	b5568 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7768:	2114      	movs	r1, #20
   b776a:	4620      	mov	r0, r4
   b776c:	f7fc fc97 	bl	b409e <_ZdlPvj>
   b7770:	e7ee      	b.n	b7750 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7772:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7774:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7776:	f7fc fc8e 	bl	b4096 <_Znwj>
   b777a:	4605      	mov	r5, r0
   b777c:	b120      	cbz	r0, b7788 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b777e:	4631      	mov	r1, r6
   b7780:	f7ff ff4e 	bl	b7620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7784:	7c33      	ldrb	r3, [r6, #16]
   b7786:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7788:	6025      	str	r5, [r4, #0]
	}
   b778a:	e7e1      	b.n	b7750 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b778c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b778c:	2200      	movs	r2, #0
   b778e:	6840      	ldr	r0, [r0, #4]
   b7790:	4611      	mov	r1, r2
   b7792:	f7ff bb6f 	b.w	b6e74 <network_listening>

000b7796 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7796:	2200      	movs	r2, #0
   b7798:	6840      	ldr	r0, [r0, #4]
   b779a:	4611      	mov	r1, r2
   b779c:	f7ff bb7a 	b.w	b6e94 <network_get_listen_timeout>

000b77a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77a0:	6840      	ldr	r0, [r0, #4]
   b77a2:	2200      	movs	r2, #0
   b77a4:	f7ff bb6e 	b.w	b6e84 <network_set_listen_timeout>

000b77a8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77a8:	6840      	ldr	r0, [r0, #4]
   b77aa:	2200      	movs	r2, #0
   b77ac:	f081 0101 	eor.w	r1, r1, #1
   b77b0:	f7ff bb58 	b.w	b6e64 <network_listen>

000b77b4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77b4:	2300      	movs	r3, #0
   b77b6:	6840      	ldr	r0, [r0, #4]
   b77b8:	461a      	mov	r2, r3
   b77ba:	4619      	mov	r1, r3
   b77bc:	f7ff bb4a 	b.w	b6e54 <network_off>

000b77c0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77c0:	2300      	movs	r3, #0
   b77c2:	6840      	ldr	r0, [r0, #4]
   b77c4:	461a      	mov	r2, r3
   b77c6:	4619      	mov	r1, r3
   b77c8:	f7ff bb3c 	b.w	b6e44 <network_on>

000b77cc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b77cc:	2200      	movs	r2, #0
   b77ce:	6840      	ldr	r0, [r0, #4]
   b77d0:	4611      	mov	r1, r2
   b77d2:	f7ff bb2f 	b.w	b6e34 <network_ready>

000b77d6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b77d6:	2200      	movs	r2, #0
   b77d8:	6840      	ldr	r0, [r0, #4]
   b77da:	4611      	mov	r1, r2
   b77dc:	f7ff bb1a 	b.w	b6e14 <network_connecting>

000b77e0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b77e0:	6840      	ldr	r0, [r0, #4]
   b77e2:	2200      	movs	r2, #0
   b77e4:	2102      	movs	r1, #2
   b77e6:	f7ff bb1d 	b.w	b6e24 <network_disconnect>

000b77ea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b77ea:	2300      	movs	r3, #0
   b77ec:	6840      	ldr	r0, [r0, #4]
   b77ee:	461a      	mov	r2, r3
   b77f0:	f7ff bb08 	b.w	b6e04 <network_connect>

000b77f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b77f4:	4b02      	ldr	r3, [pc, #8]	; (b7800 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b77f6:	2203      	movs	r2, #3
   b77f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b77fa:	4a02      	ldr	r2, [pc, #8]	; (b7804 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b77fc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b77fe:	4770      	bx	lr
   b7800:	2003e688 	.word	0x2003e688
   b7804:	000bdc94 	.word	0x000bdc94

000b7808 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7808:	0909      	lsrs	r1, r1, #4
   b780a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b780e:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b7812:	ed9f 0a03 	vldr	s0, [pc, #12]	; b7820 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b7816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b781a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b781e:	4770      	bx	lr
   b7820:	44480000 	.word	0x44480000

000b7824 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b7824:	6800      	ldr	r0, [r0, #0]
   b7826:	f000 b904 	b.w	b7a32 <_ZN7TwoWire4lockEv>

000b782a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b782a:	b510      	push	{r4, lr}
   b782c:	4604      	mov	r4, r0
      lock_(_lock) {
   b782e:	6001      	str	r1, [r0, #0]
   b7830:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b7832:	b10a      	cbz	r2, b7838 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b7834:	f7ff fff6 	bl	b7824 <_ZN9FuelGauge4lockEv>
}
   b7838:	4620      	mov	r0, r4
   b783a:	bd10      	pop	{r4, pc}

000b783c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b783c:	b513      	push	{r0, r1, r4, lr}
   b783e:	4604      	mov	r4, r0
   b7840:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b7842:	f002 fe93 	bl	ba56c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b7846:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b7848:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b784a:	4620      	mov	r0, r4
   b784c:	f7ff ffed 	bl	b782a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b7850:	4620      	mov	r0, r4
   b7852:	b002      	add	sp, #8
   b7854:	bd10      	pop	{r4, pc}

000b7856 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b7856:	6800      	ldr	r0, [r0, #0]
   b7858:	f000 b8f4 	b.w	b7a44 <_ZN7TwoWire6unlockEv>

000b785c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b785c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7860:	4604      	mov	r4, r0
   b7862:	460d      	mov	r5, r1
   b7864:	4617      	mov	r7, r2
   b7866:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b7868:	f7ff ffdc 	bl	b7824 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b786c:	2236      	movs	r2, #54	; 0x36
   b786e:	2300      	movs	r3, #0
   b7870:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b7874:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b7876:	230a      	movs	r3, #10
   b7878:	f04f 0801 	mov.w	r8, #1
   b787c:	4669      	mov	r1, sp
   b787e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b7882:	f000 f8b7 	bl	b79f4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b7886:	6820      	ldr	r0, [r4, #0]
   b7888:	6803      	ldr	r3, [r0, #0]
   b788a:	4629      	mov	r1, r5
   b788c:	689b      	ldr	r3, [r3, #8]
   b788e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b7890:	6820      	ldr	r0, [r4, #0]
   b7892:	4641      	mov	r1, r8
   b7894:	f000 f8c6 	bl	b7a24 <_ZN7TwoWire15endTransmissionEh>
   b7898:	4605      	mov	r5, r0
   b789a:	b140      	cbz	r0, b78ae <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b789c:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b78a0:	4620      	mov	r0, r4
   b78a2:	f7ff ffd8 	bl	b7856 <_ZN9FuelGauge6unlockEv>
}
   b78a6:	4628      	mov	r0, r5
   b78a8:	b004      	add	sp, #16
   b78aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b78ae:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b78b0:	6820      	ldr	r0, [r4, #0]
   b78b2:	9301      	str	r3, [sp, #4]
   b78b4:	4669      	mov	r1, sp
   b78b6:	f000 f86d 	bl	b7994 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b78ba:	2802      	cmp	r0, #2
   b78bc:	d1ee      	bne.n	b789c <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b78be:	6820      	ldr	r0, [r4, #0]
   b78c0:	6803      	ldr	r3, [r0, #0]
   b78c2:	695b      	ldr	r3, [r3, #20]
   b78c4:	4798      	blx	r3
   b78c6:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b78c8:	6820      	ldr	r0, [r4, #0]
   b78ca:	6803      	ldr	r3, [r0, #0]
   b78cc:	695b      	ldr	r3, [r3, #20]
   b78ce:	4798      	blx	r3
   b78d0:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b78d2:	e7e5      	b.n	b78a0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b78d4 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b78d4:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b78d6:	2300      	movs	r3, #0
   b78d8:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b78dc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b78e0:	f10d 0206 	add.w	r2, sp, #6
   b78e4:	f10d 0307 	add.w	r3, sp, #7
   b78e8:	2102      	movs	r1, #2
   b78ea:	f7ff ffb7 	bl	b785c <_ZN9FuelGauge12readRegisterEhRhS0_>
   b78ee:	b940      	cbnz	r0, b7902 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b78f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b78f4:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b78f8:	b003      	add	sp, #12
   b78fa:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b78fe:	f7ff bf83 	b.w	b7808 <_ZN8particle6detail9_getVCellEhh>
}
   b7902:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b7906:	b003      	add	sp, #12
   b7908:	f85d fb04 	ldr.w	pc, [sp], #4

000b790c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b790c:	4770      	bx	lr

000b790e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b790e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7910:	4606      	mov	r6, r0
   b7912:	4615      	mov	r5, r2
   b7914:	460c      	mov	r4, r1
   b7916:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7918:	42bc      	cmp	r4, r7
   b791a:	d006      	beq.n	b792a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b791c:	6833      	ldr	r3, [r6, #0]
   b791e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7922:	689b      	ldr	r3, [r3, #8]
   b7924:	4630      	mov	r0, r6
   b7926:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7928:	e7f6      	b.n	b7918 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b792a:	4628      	mov	r0, r5
   b792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b792e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b792e:	7c00      	ldrb	r0, [r0, #16]
   b7930:	2200      	movs	r2, #0
   b7932:	f7ff b831 	b.w	b6998 <hal_i2c_write>

000b7936 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7936:	7c00      	ldrb	r0, [r0, #16]
   b7938:	2100      	movs	r1, #0
   b793a:	f7ff b835 	b.w	b69a8 <hal_i2c_available>

000b793e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b793e:	7c00      	ldrb	r0, [r0, #16]
   b7940:	2100      	movs	r1, #0
   b7942:	f7ff b839 	b.w	b69b8 <hal_i2c_read>

000b7946 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7946:	7c00      	ldrb	r0, [r0, #16]
   b7948:	2100      	movs	r1, #0
   b794a:	f7ff b83d 	b.w	b69c8 <hal_i2c_peek>

000b794e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b794e:	7c00      	ldrb	r0, [r0, #16]
   b7950:	2100      	movs	r1, #0
   b7952:	f7ff b841 	b.w	b69d8 <hal_i2c_flush>

000b7956 <_ZN7TwoWireD0Ev>:
   b7956:	b510      	push	{r4, lr}
   b7958:	2114      	movs	r1, #20
   b795a:	4604      	mov	r4, r0
   b795c:	f7fc fb9f 	bl	b409e <_ZdlPvj>
   b7960:	4620      	mov	r0, r4
   b7962:	bd10      	pop	{r4, pc}

000b7964 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7964:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b796a:	4604      	mov	r4, r0
   b796c:	4608      	mov	r0, r1
   b796e:	2100      	movs	r1, #0
   b7970:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7974:	4b03      	ldr	r3, [pc, #12]	; (b7984 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7976:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7978:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b797a:	4611      	mov	r1, r2
   b797c:	f7ff f83c 	bl	b69f8 <hal_i2c_init>
}
   b7980:	4620      	mov	r0, r4
   b7982:	bd10      	pop	{r4, pc}
   b7984:	000bdcd0 	.word	0x000bdcd0

000b7988 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7988:	2300      	movs	r3, #0
   b798a:	7c00      	ldrb	r0, [r0, #16]
   b798c:	461a      	mov	r2, r3
   b798e:	4619      	mov	r1, r3
   b7990:	f7fe bfea 	b.w	b6968 <hal_i2c_begin>

000b7994 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7996:	2200      	movs	r2, #0
   b7998:	2314      	movs	r3, #20
   b799a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b799e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b79a2:	780b      	ldrb	r3, [r1, #0]
   b79a4:	f88d 3008 	strb.w	r3, [sp, #8]
   b79a8:	684b      	ldr	r3, [r1, #4]
   b79aa:	9303      	str	r3, [sp, #12]
   b79ac:	68cb      	ldr	r3, [r1, #12]
   b79ae:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b79b0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b79b2:	7a0b      	ldrb	r3, [r1, #8]
   b79b4:	9305      	str	r3, [sp, #20]
   b79b6:	a901      	add	r1, sp, #4
   b79b8:	f7ff f836 	bl	b6a28 <hal_i2c_request_ex>
}
   b79bc:	b007      	add	sp, #28
   b79be:	f85d fb04 	ldr.w	pc, [sp], #4

000b79c2 <_ZN7TwoWire11requestFromEhjh>:
{
   b79c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b79c4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b79c6:	f88d 1000 	strb.w	r1, [sp]
   b79ca:	f04f 0164 	mov.w	r1, #100	; 0x64
   b79ce:	9103      	str	r1, [sp, #12]
   b79d0:	bf18      	it	ne
   b79d2:	2301      	movne	r3, #1
   b79d4:	4669      	mov	r1, sp
    size_ = size;
   b79d6:	9201      	str	r2, [sp, #4]
   b79d8:	f88d 3008 	strb.w	r3, [sp, #8]
   b79dc:	f7ff ffda 	bl	b7994 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b79e0:	b005      	add	sp, #20
   b79e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b79e6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b79e6:	2301      	movs	r3, #1
   b79e8:	f7ff bfeb 	b.w	b79c2 <_ZN7TwoWire11requestFromEhjh>

000b79ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b79ec:	7c00      	ldrb	r0, [r0, #16]
   b79ee:	2200      	movs	r2, #0
   b79f0:	f7fe bfc2 	b.w	b6978 <hal_i2c_begin_transmission>

000b79f4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b79f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b79f6:	2300      	movs	r3, #0
   b79f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b79fc:	684a      	ldr	r2, [r1, #4]
   b79fe:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b7a00:	2314      	movs	r3, #20
    };
   b7a02:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b7a04:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b7a08:	780b      	ldrb	r3, [r1, #0]
    };
   b7a0a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7a0c:	7a0a      	ldrb	r2, [r1, #8]
   b7a0e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b7a10:	7c00      	ldrb	r0, [r0, #16]
    };
   b7a12:	f88d 3008 	strb.w	r3, [sp, #8]
   b7a16:	aa01      	add	r2, sp, #4
   b7a18:	4619      	mov	r1, r3
   b7a1a:	f7fe ffad 	bl	b6978 <hal_i2c_begin_transmission>
}
   b7a1e:	b007      	add	sp, #28
   b7a20:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a24 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7a24:	7c00      	ldrb	r0, [r0, #16]
   b7a26:	2200      	movs	r2, #0
   b7a28:	f7fe bfae 	b.w	b6988 <hal_i2c_end_transmission>

000b7a2c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7a2c:	2101      	movs	r1, #1
   b7a2e:	f7ff bff9 	b.w	b7a24 <_ZN7TwoWire15endTransmissionEh>

000b7a32 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7a32:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7a34:	2100      	movs	r1, #0
   b7a36:	7c00      	ldrb	r0, [r0, #16]
   b7a38:	f7fe ffe6 	bl	b6a08 <hal_i2c_lock>
}
   b7a3c:	fab0 f080 	clz	r0, r0
   b7a40:	0940      	lsrs	r0, r0, #5
   b7a42:	bd08      	pop	{r3, pc}

000b7a44 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7a44:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7a46:	2100      	movs	r1, #0
   b7a48:	7c00      	ldrb	r0, [r0, #16]
   b7a4a:	f7fe ffe5 	bl	b6a18 <hal_i2c_unlock>
}
   b7a4e:	fab0 f080 	clz	r0, r0
   b7a52:	0940      	lsrs	r0, r0, #5
   b7a54:	bd08      	pop	{r3, pc}

000b7a56 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7a56:	4770      	bx	lr

000b7a58 <_ZN9IPAddressD0Ev>:
   b7a58:	b510      	push	{r4, lr}
   b7a5a:	2118      	movs	r1, #24
   b7a5c:	4604      	mov	r4, r0
   b7a5e:	f7fc fb1e 	bl	b409e <_ZdlPvj>
   b7a62:	4620      	mov	r0, r4
   b7a64:	bd10      	pop	{r4, pc}

000b7a66 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7a66:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7a68:	7d03      	ldrb	r3, [r0, #20]
   b7a6a:	2b06      	cmp	r3, #6
{
   b7a6c:	b08d      	sub	sp, #52	; 0x34
   b7a6e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7a70:	f100 0704 	add.w	r7, r0, #4
   b7a74:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7a78:	d012      	beq.n	b7aa0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7a7a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7a7e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7a82:	220a      	movs	r2, #10
   b7a84:	4630      	mov	r0, r6
   b7a86:	f001 fac4 	bl	b9012 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7a8a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7a8c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7a8e:	d019      	beq.n	b7ac4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7a90:	2c00      	cmp	r4, #0
   b7a92:	d0f4      	beq.n	b7a7e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7a94:	212e      	movs	r1, #46	; 0x2e
   b7a96:	4630      	mov	r0, r6
   b7a98:	f001 faa2 	bl	b8fe0 <_ZN5Print5printEc>
   b7a9c:	4404      	add	r4, r0
   b7a9e:	e7ee      	b.n	b7a7e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7aa0:	232f      	movs	r3, #47	; 0x2f
   b7aa2:	466a      	mov	r2, sp
   b7aa4:	4639      	mov	r1, r7
   b7aa6:	200a      	movs	r0, #10
		buf[0] = 0;
   b7aa8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7aac:	f7fe ffcc 	bl	b6a48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7ab0:	4668      	mov	r0, sp
   b7ab2:	f003 fd72 	bl	bb59a <strlen>
   b7ab6:	6833      	ldr	r3, [r6, #0]
   b7ab8:	4602      	mov	r2, r0
   b7aba:	68db      	ldr	r3, [r3, #12]
   b7abc:	4669      	mov	r1, sp
   b7abe:	4630      	mov	r0, r6
   b7ac0:	4798      	blx	r3
   b7ac2:	4604      	mov	r4, r0
    }
    return n;
}
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	b00d      	add	sp, #52	; 0x34
   b7ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7acc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7acc:	b510      	push	{r4, lr}
   b7ace:	4b05      	ldr	r3, [pc, #20]	; (b7ae4 <_ZN9IPAddressC1Ev+0x18>)
   b7ad0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7ad2:	2211      	movs	r2, #17
   b7ad4:	f840 3b04 	str.w	r3, [r0], #4
   b7ad8:	2100      	movs	r1, #0
   b7ada:	f003 fce1 	bl	bb4a0 <memset>
}
   b7ade:	4620      	mov	r0, r4
   b7ae0:	bd10      	pop	{r4, pc}
   b7ae2:	bf00      	nop
   b7ae4:	000bdcf8 	.word	0x000bdcf8

000b7ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7ae8:	4603      	mov	r3, r0
   b7aea:	4a07      	ldr	r2, [pc, #28]	; (b7b08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7aec:	b510      	push	{r4, lr}
   b7aee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7af2:	f101 0210 	add.w	r2, r1, #16
   b7af6:	f851 4b04 	ldr.w	r4, [r1], #4
   b7afa:	f843 4b04 	str.w	r4, [r3], #4
   b7afe:	4291      	cmp	r1, r2
   b7b00:	d1f9      	bne.n	b7af6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7b02:	780a      	ldrb	r2, [r1, #0]
   b7b04:	701a      	strb	r2, [r3, #0]
}
   b7b06:	bd10      	pop	{r4, pc}
   b7b08:	000bdcf8 	.word	0x000bdcf8

000b7b0c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7b0c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7b0e:	2b04      	cmp	r3, #4
   b7b10:	d104      	bne.n	b7b1c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7b12:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7b14:	3800      	subs	r0, #0
   b7b16:	bf18      	it	ne
   b7b18:	2001      	movne	r0, #1
   b7b1a:	4770      	bx	lr
    } else if (version() == 6) {
   b7b1c:	2b06      	cmp	r3, #6
   b7b1e:	d107      	bne.n	b7b30 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7b20:	6843      	ldr	r3, [r0, #4]
   b7b22:	b93b      	cbnz	r3, b7b34 <_ZNK9IPAddresscvbEv+0x28>
   b7b24:	6883      	ldr	r3, [r0, #8]
   b7b26:	b92b      	cbnz	r3, b7b34 <_ZNK9IPAddresscvbEv+0x28>
   b7b28:	68c3      	ldr	r3, [r0, #12]
   b7b2a:	b91b      	cbnz	r3, b7b34 <_ZNK9IPAddresscvbEv+0x28>
   b7b2c:	6900      	ldr	r0, [r0, #16]
   b7b2e:	e7f1      	b.n	b7b14 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7b30:	2000      	movs	r0, #0
   b7b32:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7b34:	2001      	movs	r0, #1
}
   b7b36:	4770      	bx	lr

000b7b38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7b38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7b3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7b3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7b42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7b46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7b4a:	2304      	movs	r3, #4
   b7b4c:	6041      	str	r1, [r0, #4]
   b7b4e:	7503      	strb	r3, [r0, #20]
}
   b7b50:	bd10      	pop	{r4, pc}
	...

000b7b54 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7b54:	b513      	push	{r0, r1, r4, lr}
   b7b56:	4c04      	ldr	r4, [pc, #16]	; (b7b68 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7b58:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7b5a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7b5e:	9400      	str	r4, [sp, #0]
   b7b60:	f7ff ffea 	bl	b7b38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7b64:	b002      	add	sp, #8
   b7b66:	bd10      	pop	{r4, pc}
   b7b68:	000bdcf8 	.word	0x000bdcf8

000b7b6c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7b6c:	b507      	push	{r0, r1, r2, lr}
   b7b6e:	4b06      	ldr	r3, [pc, #24]	; (b7b88 <_ZN9IPAddressC1EPKh+0x1c>)
   b7b70:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7b72:	78cb      	ldrb	r3, [r1, #3]
   b7b74:	9300      	str	r3, [sp, #0]
   b7b76:	788b      	ldrb	r3, [r1, #2]
   b7b78:	784a      	ldrb	r2, [r1, #1]
   b7b7a:	7809      	ldrb	r1, [r1, #0]
   b7b7c:	f7ff ffdc 	bl	b7b38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7b80:	b003      	add	sp, #12
   b7b82:	f85d fb04 	ldr.w	pc, [sp], #4
   b7b86:	bf00      	nop
   b7b88:	000bdcf8 	.word	0x000bdcf8

000b7b8c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7b8c:	f100 0310 	add.w	r3, r0, #16
   b7b90:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7b92:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7b96:	2901      	cmp	r1, #1
   b7b98:	4618      	mov	r0, r3
   b7b9a:	d108      	bne.n	b7bae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7b9c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7ba0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7ba4:	3a01      	subs	r2, #1
   b7ba6:	f103 0310 	add.w	r3, r3, #16
   b7baa:	d1f2      	bne.n	b7b92 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7bac:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7bae:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7bb0:	bf04      	itt	eq
   b7bb2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7bb6:	1852      	addeq	r2, r2, r1
   b7bb8:	e7f4      	b.n	b7ba4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7bba <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7bba:	b40e      	push	{r1, r2, r3}
   b7bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7bbe:	b088      	sub	sp, #32
   b7bc0:	af00      	add	r7, sp, #0
   b7bc2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bc6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7bc8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bcc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7bce:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bd0:	462b      	mov	r3, r5
   b7bd2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7bd4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bd6:	f7ff f995 	bl	b6f04 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7bda:	280f      	cmp	r0, #15
   b7bdc:	687a      	ldr	r2, [r7, #4]
   b7bde:	d91a      	bls.n	b7c16 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7be0:	f100 0308 	add.w	r3, r0, #8
   b7be4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7be8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7bea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bee:	1c41      	adds	r1, r0, #1
   b7bf0:	462b      	mov	r3, r5
   b7bf2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7bf4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7bf6:	f7ff f985 	bl	b6f04 <vsnprintf>
        if (n > 0) {
   b7bfa:	1e02      	subs	r2, r0, #0
   b7bfc:	dd04      	ble.n	b7c08 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7bfe:	6823      	ldr	r3, [r4, #0]
   b7c00:	4669      	mov	r1, sp
   b7c02:	689b      	ldr	r3, [r3, #8]
   b7c04:	4620      	mov	r0, r4
   b7c06:	4798      	blx	r3
   b7c08:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7c0a:	3720      	adds	r7, #32
   b7c0c:	46bd      	mov	sp, r7
   b7c0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7c12:	b003      	add	sp, #12
   b7c14:	4770      	bx	lr
    } else if (n > 0) {
   b7c16:	2800      	cmp	r0, #0
   b7c18:	d0f7      	beq.n	b7c0a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7c1a:	6823      	ldr	r3, [r4, #0]
   b7c1c:	4602      	mov	r2, r0
   b7c1e:	689b      	ldr	r3, [r3, #8]
   b7c20:	f107 0110 	add.w	r1, r7, #16
   b7c24:	4620      	mov	r0, r4
   b7c26:	4798      	blx	r3
}
   b7c28:	e7ef      	b.n	b7c0a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7c2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c2a:	b538      	push	{r3, r4, r5, lr}
   b7c2c:	680b      	ldr	r3, [r1, #0]
   b7c2e:	6003      	str	r3, [r0, #0]
   b7c30:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7c32:	6843      	ldr	r3, [r0, #4]
   b7c34:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c36:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7c38:	d008      	beq.n	b7c4c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7c3a:	b115      	cbz	r5, b7c42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7c3c:	686b      	ldr	r3, [r5, #4]
   b7c3e:	3301      	adds	r3, #1
   b7c40:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7c42:	6860      	ldr	r0, [r4, #4]
   b7c44:	b108      	cbz	r0, b7c4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7c46:	f7ff f9a4 	bl	b6f92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7c4a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c4c:	bd38      	pop	{r3, r4, r5, pc}

000b7c4e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7c4e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7c50:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7c52:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7c56:	689b      	ldr	r3, [r3, #8]
   b7c58:	2201      	movs	r2, #1
   b7c5a:	f10d 0107 	add.w	r1, sp, #7
   b7c5e:	4798      	blx	r3
}
   b7c60:	b003      	add	sp, #12
   b7c62:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7c66:	460b      	mov	r3, r1
   b7c68:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7c6a:	2200      	movs	r2, #0
   b7c6c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7c6e:	e9c0 2200 	strd	r2, r2, [r0]
   b7c72:	4604      	mov	r4, r0
        t_ = t;
   b7c74:	6083      	str	r3, [r0, #8]
    if (t) {
   b7c76:	b90b      	cbnz	r3, b7c7c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7c78:	4620      	mov	r0, r4
   b7c7a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7c7c:	f7ff ffd5 	bl	b7c2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7c80:	e7fa      	b.n	b7c78 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7c82 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7c82:	6883      	ldr	r3, [r0, #8]
   b7c84:	b1eb      	cbz	r3, b7cc2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7c86:	781a      	ldrb	r2, [r3, #0]
   b7c88:	2a03      	cmp	r2, #3
   b7c8a:	d81a      	bhi.n	b7cc2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b7c8c:	e8df f002 	tbb	[pc, r2]
   b7c90:	1b021704 	.word	0x1b021704
   b7c94:	2005      	movs	r0, #5
   b7c96:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7c98:	6802      	ldr	r2, [r0, #0]
   b7c9a:	685b      	ldr	r3, [r3, #4]
   b7c9c:	6852      	ldr	r2, [r2, #4]
   b7c9e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7ca0:	282d      	cmp	r0, #45	; 0x2d
   b7ca2:	d012      	beq.n	b7cca <_ZNK5spark9JSONValue4typeEv+0x48>
   b7ca4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7ca8:	2b09      	cmp	r3, #9
   b7caa:	d90e      	bls.n	b7cca <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7cac:	2874      	cmp	r0, #116	; 0x74
   b7cae:	d00e      	beq.n	b7cce <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7cb0:	2866      	cmp	r0, #102	; 0x66
   b7cb2:	d00c      	beq.n	b7cce <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7cb4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7cb8:	4258      	negs	r0, r3
   b7cba:	4158      	adcs	r0, r3
   b7cbc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7cbe:	2006      	movs	r0, #6
   b7cc0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7cc2:	2000      	movs	r0, #0
   b7cc4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7cc6:	2004      	movs	r0, #4
   b7cc8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7cca:	2003      	movs	r0, #3
   b7ccc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7cce:	2002      	movs	r0, #2
}
   b7cd0:	4770      	bx	lr

000b7cd2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7cd2:	b510      	push	{r4, lr}
   b7cd4:	4604      	mov	r4, r0
    switch (type()) {
   b7cd6:	f7ff ffd4 	bl	b7c82 <_ZNK5spark9JSONValue4typeEv>
   b7cda:	2802      	cmp	r0, #2
   b7cdc:	d00e      	beq.n	b7cfc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7cde:	1ec3      	subs	r3, r0, #3
   b7ce0:	b2db      	uxtb	r3, r3
   b7ce2:	2b01      	cmp	r3, #1
   b7ce4:	d814      	bhi.n	b7d10 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7ce6:	6822      	ldr	r2, [r4, #0]
   b7ce8:	68a3      	ldr	r3, [r4, #8]
   b7cea:	6850      	ldr	r0, [r2, #4]
   b7cec:	685b      	ldr	r3, [r3, #4]
}
   b7cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7cf2:	220a      	movs	r2, #10
   b7cf4:	2100      	movs	r1, #0
   b7cf6:	4418      	add	r0, r3
   b7cf8:	f004 bbb6 	b.w	bc468 <strtol>
        const char* const s = d_->json + t_->start;
   b7cfc:	6822      	ldr	r2, [r4, #0]
   b7cfe:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7d00:	6852      	ldr	r2, [r2, #4]
   b7d02:	685b      	ldr	r3, [r3, #4]
   b7d04:	5cd0      	ldrb	r0, [r2, r3]
   b7d06:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7d0a:	4258      	negs	r0, r3
   b7d0c:	4158      	adcs	r0, r3
}
   b7d0e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7d10:	2000      	movs	r0, #0
   b7d12:	e7fc      	b.n	b7d0e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7d14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7d14:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7d16:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7d18:	e9c0 3300 	strd	r3, r3, [r0]
   b7d1c:	4604      	mov	r4, r0
        n_(0) {
   b7d1e:	480e      	ldr	r0, [pc, #56]	; (b7d58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7d20:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7d24:	b1a9      	cbz	r1, b7d52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7d26:	780b      	ldrb	r3, [r1, #0]
   b7d28:	2b03      	cmp	r3, #3
   b7d2a:	d006      	beq.n	b7d3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7d2c:	b98b      	cbnz	r3, b7d52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7d2e:	6813      	ldr	r3, [r2, #0]
   b7d30:	6858      	ldr	r0, [r3, #4]
   b7d32:	684b      	ldr	r3, [r1, #4]
   b7d34:	5cc3      	ldrb	r3, [r0, r3]
   b7d36:	2b6e      	cmp	r3, #110	; 0x6e
   b7d38:	d007      	beq.n	b7d4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7d3a:	6813      	ldr	r3, [r2, #0]
   b7d3c:	684d      	ldr	r5, [r1, #4]
   b7d3e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7d40:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7d42:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7d44:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7d46:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7d48:	60e3      	str	r3, [r4, #12]
   b7d4a:	4611      	mov	r1, r2
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7ff ff6c 	bl	b7c2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7d52:	4620      	mov	r0, r4
   b7d54:	bd38      	pop	{r3, r4, r5, pc}
   b7d56:	bf00      	nop
   b7d58:	000bda03 	.word	0x000bda03

000b7d5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7d5c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7d5e:	2500      	movs	r5, #0
   b7d60:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7d62:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7d66:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7d6a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7d6e:	4604      	mov	r4, r0
   b7d70:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7d72:	b14b      	cbz	r3, b7d88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7d74:	781a      	ldrb	r2, [r3, #0]
   b7d76:	2a01      	cmp	r2, #1
   b7d78:	d106      	bne.n	b7d88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7d7a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7d7e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7d80:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7d82:	6143      	str	r3, [r0, #20]
   b7d84:	f7ff ff51 	bl	b7c2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7d88:	4620      	mov	r0, r4
   b7d8a:	bd38      	pop	{r3, r4, r5, pc}

000b7d8c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7d8c:	b510      	push	{r4, lr}
    if (!n_) {
   b7d8e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7d90:	4604      	mov	r4, r0
    if (!n_) {
   b7d92:	b163      	cbz	r3, b7dae <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7d94:	6880      	ldr	r0, [r0, #8]
   b7d96:	60e0      	str	r0, [r4, #12]
    --n_;
   b7d98:	3b01      	subs	r3, #1
    ++t_;
   b7d9a:	3010      	adds	r0, #16
   b7d9c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7d9e:	6120      	str	r0, [r4, #16]
    --n_;
   b7da0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7da2:	b113      	cbz	r3, b7daa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7da4:	f7ff fef2 	bl	b7b8c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7da8:	60a0      	str	r0, [r4, #8]
    return true;
   b7daa:	2001      	movs	r0, #1
   b7dac:	e000      	b.n	b7db0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7dae:	4618      	mov	r0, r3
}
   b7db0:	bd10      	pop	{r4, pc}

000b7db2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7db2:	b510      	push	{r4, lr}
    write('}');
   b7db4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7db6:	4604      	mov	r4, r0
    write('}');
   b7db8:	f7ff ff49 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7dbc:	2301      	movs	r3, #1
   b7dbe:	7123      	strb	r3, [r4, #4]
}
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7dc4:	b508      	push	{r3, lr}
    switch (state_) {
   b7dc6:	7903      	ldrb	r3, [r0, #4]
   b7dc8:	2b01      	cmp	r3, #1
   b7dca:	d002      	beq.n	b7dd2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7dcc:	2b02      	cmp	r3, #2
   b7dce:	d004      	beq.n	b7dda <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7dd0:	bd08      	pop	{r3, pc}
        write(',');
   b7dd2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7dd4:	f7ff ff3b 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
}
   b7dd8:	e7fa      	b.n	b7dd0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b7dda:	213a      	movs	r1, #58	; 0x3a
   b7ddc:	e7fa      	b.n	b7dd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7dde <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7dde:	b510      	push	{r4, lr}
   b7de0:	4604      	mov	r4, r0
    writeSeparator();
   b7de2:	f7ff ffef 	bl	b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7de6:	4620      	mov	r0, r4
   b7de8:	217b      	movs	r1, #123	; 0x7b
   b7dea:	f7ff ff30 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7dee:	2300      	movs	r3, #0
   b7df0:	7123      	strb	r3, [r4, #4]
}
   b7df2:	4620      	mov	r0, r4
   b7df4:	bd10      	pop	{r4, pc}
	...

000b7df8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b7df8:	b513      	push	{r0, r1, r4, lr}
   b7dfa:	4604      	mov	r4, r0
   b7dfc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7dfe:	f7ff ffe1 	bl	b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7e02:	6823      	ldr	r3, [r4, #0]
   b7e04:	9a01      	ldr	r2, [sp, #4]
   b7e06:	68db      	ldr	r3, [r3, #12]
   b7e08:	4903      	ldr	r1, [pc, #12]	; (b7e18 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b7e0a:	4620      	mov	r0, r4
   b7e0c:	4798      	blx	r3
    state_ = NEXT;
   b7e0e:	2301      	movs	r3, #1
}
   b7e10:	4620      	mov	r0, r4
    state_ = NEXT;
   b7e12:	7123      	strb	r3, [r4, #4]
}
   b7e14:	b002      	add	sp, #8
   b7e16:	bd10      	pop	{r4, pc}
   b7e18:	000bde54 	.word	0x000bde54

000b7e1c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b7e1c:	b513      	push	{r0, r1, r4, lr}
   b7e1e:	4604      	mov	r4, r0
   b7e20:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7e22:	f7ff ffcf 	bl	b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b7e26:	6823      	ldr	r3, [r4, #0]
   b7e28:	9a01      	ldr	r2, [sp, #4]
   b7e2a:	68db      	ldr	r3, [r3, #12]
   b7e2c:	4903      	ldr	r1, [pc, #12]	; (b7e3c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b7e2e:	4620      	mov	r0, r4
   b7e30:	4798      	blx	r3
    state_ = NEXT;
   b7e32:	2301      	movs	r3, #1
}
   b7e34:	4620      	mov	r0, r4
    state_ = NEXT;
   b7e36:	7123      	strb	r3, [r4, #4]
}
   b7e38:	b002      	add	sp, #8
   b7e3a:	bd10      	pop	{r4, pc}
   b7e3c:	000bdd04 	.word	0x000bdd04

000b7e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e44:	460d      	mov	r5, r1
    write('"');
   b7e46:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7e48:	4690      	mov	r8, r2
   b7e4a:	4604      	mov	r4, r0
    write('"');
   b7e4c:	f7ff feff 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7e50:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7ef8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7e54:	44a8      	add	r8, r5
    const char *s = str;
   b7e56:	462f      	mov	r7, r5
    while (s != end) {
   b7e58:	4547      	cmp	r7, r8
   b7e5a:	46ba      	mov	sl, r7
   b7e5c:	d03d      	beq.n	b7eda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7e5e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7e62:	2e22      	cmp	r6, #34	; 0x22
   b7e64:	d006      	beq.n	b7e74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7e66:	2e5c      	cmp	r6, #92	; 0x5c
   b7e68:	d004      	beq.n	b7e74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7e6a:	4630      	mov	r0, r6
   b7e6c:	f003 fae8 	bl	bb440 <isprint>
   b7e70:	2800      	cmp	r0, #0
   b7e72:	d1f1      	bne.n	b7e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7e74:	6823      	ldr	r3, [r4, #0]
   b7e76:	ebaa 0205 	sub.w	r2, sl, r5
   b7e7a:	689b      	ldr	r3, [r3, #8]
   b7e7c:	4629      	mov	r1, r5
   b7e7e:	4620      	mov	r0, r4
   b7e80:	4798      	blx	r3
            write('\\');
   b7e82:	215c      	movs	r1, #92	; 0x5c
   b7e84:	4620      	mov	r0, r4
   b7e86:	f7ff fee2 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7e8a:	2e0d      	cmp	r6, #13
   b7e8c:	d80a      	bhi.n	b7ea4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7e8e:	2e07      	cmp	r6, #7
   b7e90:	d91c      	bls.n	b7ecc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7e92:	f1a6 0308 	sub.w	r3, r6, #8
   b7e96:	2b05      	cmp	r3, #5
   b7e98:	d818      	bhi.n	b7ecc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7e9a:	e8df f003 	tbb	[pc, r3]
   b7e9e:	0f0d      	.short	0x0f0d
   b7ea0:	15131711 	.word	0x15131711
   b7ea4:	2e22      	cmp	r6, #34	; 0x22
   b7ea6:	d001      	beq.n	b7eac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7ea8:	2e5c      	cmp	r6, #92	; 0x5c
   b7eaa:	d10f      	bne.n	b7ecc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7eac:	4631      	mov	r1, r6
                write('b');
   b7eae:	4620      	mov	r0, r4
   b7eb0:	f7ff fecd 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7eb4:	463d      	mov	r5, r7
    while (s != end) {
   b7eb6:	e7cf      	b.n	b7e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7eb8:	2162      	movs	r1, #98	; 0x62
   b7eba:	e7f8      	b.n	b7eae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7ebc:	2174      	movs	r1, #116	; 0x74
   b7ebe:	e7f6      	b.n	b7eae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7ec0:	216e      	movs	r1, #110	; 0x6e
   b7ec2:	e7f4      	b.n	b7eae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7ec4:	2166      	movs	r1, #102	; 0x66
   b7ec6:	e7f2      	b.n	b7eae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7ec8:	2172      	movs	r1, #114	; 0x72
   b7eca:	e7f0      	b.n	b7eae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7ecc:	6823      	ldr	r3, [r4, #0]
   b7ece:	4632      	mov	r2, r6
   b7ed0:	68db      	ldr	r3, [r3, #12]
   b7ed2:	4649      	mov	r1, r9
   b7ed4:	4620      	mov	r0, r4
   b7ed6:	4798      	blx	r3
                break;
   b7ed8:	e7ec      	b.n	b7eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b7eda:	42bd      	cmp	r5, r7
   b7edc:	d005      	beq.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7ede:	6823      	ldr	r3, [r4, #0]
   b7ee0:	1b7a      	subs	r2, r7, r5
   b7ee2:	689b      	ldr	r3, [r3, #8]
   b7ee4:	4629      	mov	r1, r5
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	4798      	blx	r3
    }
    write('"');
   b7eea:	2122      	movs	r1, #34	; 0x22
   b7eec:	4620      	mov	r0, r4
   b7eee:	f7ff feae 	bl	b7c4e <_ZN5spark10JSONWriter5writeEc>
}
   b7ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7ef6:	bf00      	nop
   b7ef8:	000bdd07 	.word	0x000bdd07

000b7efc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7efc:	b513      	push	{r0, r1, r4, lr}
   b7efe:	4604      	mov	r4, r0
   b7f00:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7f04:	f7ff ff5e 	bl	b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7f08:	4620      	mov	r0, r4
   b7f0a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7f0e:	f7ff ff97 	bl	b7e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7f12:	2302      	movs	r3, #2
}
   b7f14:	4620      	mov	r0, r4
    state_ = VALUE;
   b7f16:	7123      	strb	r3, [r4, #4]
}
   b7f18:	b002      	add	sp, #8
   b7f1a:	bd10      	pop	{r4, pc}

000b7f1c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7f1c:	b513      	push	{r0, r1, r4, lr}
   b7f1e:	4604      	mov	r4, r0
   b7f20:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7f24:	f7ff ff4e 	bl	b7dc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7f28:	4620      	mov	r0, r4
   b7f2a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7f2e:	f7ff ff87 	bl	b7e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7f32:	2301      	movs	r3, #1
}
   b7f34:	4620      	mov	r0, r4
    state_ = NEXT;
   b7f36:	7123      	strb	r3, [r4, #4]
}
   b7f38:	b002      	add	sp, #8
   b7f3a:	bd10      	pop	{r4, pc}

000b7f3c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b7f3c:	6880      	ldr	r0, [r0, #8]
   b7f3e:	6803      	ldr	r3, [r0, #0]
   b7f40:	68db      	ldr	r3, [r3, #12]
   b7f42:	4718      	bx	r3

000b7f44 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7f44:	4770      	bx	lr

000b7f46 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7f46:	4608      	mov	r0, r1
   b7f48:	b111      	cbz	r1, b7f50 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b7f4a:	680b      	ldr	r3, [r1, #0]
   b7f4c:	685b      	ldr	r3, [r3, #4]
   b7f4e:	4718      	bx	r3
}
   b7f50:	4770      	bx	lr

000b7f52 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7f52:	4770      	bx	lr

000b7f54 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7f54:	4770      	bx	lr

000b7f56 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7f56:	4770      	bx	lr

000b7f58 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7f58:	4770      	bx	lr

000b7f5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b7f5a:	b538      	push	{r3, r4, r5, lr}
   b7f5c:	4604      	mov	r4, r0
   b7f5e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7f60:	6800      	ldr	r0, [r0, #0]
   b7f62:	212e      	movs	r1, #46	; 0x2e
   b7f64:	f003 fadf 	bl	bb526 <strchrnul>
    size = s - category;
   b7f68:	6823      	ldr	r3, [r4, #0]
   b7f6a:	1ac3      	subs	r3, r0, r3
   b7f6c:	602b      	str	r3, [r5, #0]
    if (size) {
   b7f6e:	b123      	cbz	r3, b7f7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7f70:	7803      	ldrb	r3, [r0, #0]
   b7f72:	b103      	cbz	r3, b7f76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7f74:	3001      	adds	r0, #1
   b7f76:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f78:	6020      	str	r0, [r4, #0]
}
   b7f7a:	4618      	mov	r0, r3
   b7f7c:	bd38      	pop	{r3, r4, r5, pc}

000b7f7e <_ZN5spark16JSONStreamWriterD0Ev>:
   b7f7e:	b510      	push	{r4, lr}
   b7f80:	210c      	movs	r1, #12
   b7f82:	4604      	mov	r4, r0
   b7f84:	f7fc f88b 	bl	b409e <_ZdlPvj>
   b7f88:	4620      	mov	r0, r4
   b7f8a:	bd10      	pop	{r4, pc}

000b7f8c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7f8c:	b510      	push	{r4, lr}
   b7f8e:	2104      	movs	r1, #4
   b7f90:	4604      	mov	r4, r0
   b7f92:	f7fc f884 	bl	b409e <_ZdlPvj>
   b7f96:	4620      	mov	r0, r4
   b7f98:	bd10      	pop	{r4, pc}

000b7f9a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7f9a:	b510      	push	{r4, lr}
   b7f9c:	2104      	movs	r1, #4
   b7f9e:	4604      	mov	r4, r0
   b7fa0:	f7fc f87d 	bl	b409e <_ZdlPvj>
   b7fa4:	4620      	mov	r0, r4
   b7fa6:	bd10      	pop	{r4, pc}

000b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7fa8:	f7fe bc96 	b.w	b68d8 <os_mutex_recursive_lock>

000b7fac <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7fac:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7fae:	f003 fac4 	bl	bb53a <strcmp>
}
   b7fb2:	fab0 f080 	clz	r0, r0
   b7fb6:	0940      	lsrs	r0, r0, #5
   b7fb8:	bd08      	pop	{r3, pc}

000b7fba <__tcf_1>:
   b7fba:	4770      	bx	lr

000b7fbc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7fbc:	b510      	push	{r4, lr}
   b7fbe:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b7fc0:	f002 f92c 	bl	ba21c <_Z16_fetch_usbserialv>
   b7fc4:	4284      	cmp	r4, r0
   b7fc6:	d010      	beq.n	b7fea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b7fc8:	f002 fb10 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   b7fcc:	4284      	cmp	r4, r0
   b7fce:	d105      	bne.n	b7fdc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7fd0:	f002 fb0c 	bl	ba5ec <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b7fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b7fd8:	f002 b8bb 	b.w	ba152 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7fdc:	b12c      	cbz	r4, b7fea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7fde:	6823      	ldr	r3, [r4, #0]
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	685b      	ldr	r3, [r3, #4]
}
   b7fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7fe8:	4718      	bx	r3
   b7fea:	bd10      	pop	{r4, pc}

000b7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7fec:	680b      	ldr	r3, [r1, #0]
   b7fee:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7ff0:	684b      	ldr	r3, [r1, #4]
   b7ff2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7ff4:	b113      	cbz	r3, b7ffc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7ff6:	685a      	ldr	r2, [r3, #4]
   b7ff8:	3201      	adds	r2, #1
   b7ffa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7ffc:	4770      	bx	lr

000b7ffe <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7ffe:	b513      	push	{r0, r1, r4, lr}
   b8000:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b8002:	4608      	mov	r0, r1
   b8004:	9101      	str	r1, [sp, #4]
   b8006:	f003 fac8 	bl	bb59a <strlen>
   b800a:	9901      	ldr	r1, [sp, #4]
   b800c:	4602      	mov	r2, r0
   b800e:	4620      	mov	r0, r4
}
   b8010:	b002      	add	sp, #8
   b8012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b8016:	f7ff bf81 	b.w	b7f1c <_ZN5spark10JSONWriter5valueEPKcj>

000b801a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b801a:	b513      	push	{r0, r1, r4, lr}
   b801c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b801e:	4608      	mov	r0, r1
   b8020:	9101      	str	r1, [sp, #4]
   b8022:	f003 faba 	bl	bb59a <strlen>
   b8026:	6823      	ldr	r3, [r4, #0]
   b8028:	9901      	ldr	r1, [sp, #4]
   b802a:	68db      	ldr	r3, [r3, #12]
   b802c:	4602      	mov	r2, r0
   b802e:	4620      	mov	r0, r4
}
   b8030:	b002      	add	sp, #8
   b8032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b8036:	4718      	bx	r3

000b8038 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b8038:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b803a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b803c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b8040:	68db      	ldr	r3, [r3, #12]
   b8042:	2201      	movs	r2, #1
   b8044:	f10d 0107 	add.w	r1, sp, #7
   b8048:	4798      	blx	r3
}
   b804a:	b003      	add	sp, #12
   b804c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8050 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8050:	b40e      	push	{r1, r2, r3}
   b8052:	b503      	push	{r0, r1, lr}
   b8054:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b8056:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8058:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b805c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b805e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b8060:	f001 f8cd 	bl	b91fe <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b8064:	b002      	add	sp, #8
   b8066:	f85d eb04 	ldr.w	lr, [sp], #4
   b806a:	b003      	add	sp, #12
   b806c:	4770      	bx	lr

000b806e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b806e:	680a      	ldr	r2, [r1, #0]
   b8070:	6002      	str	r2, [r0, #0]
   b8072:	684a      	ldr	r2, [r1, #4]
   b8074:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b8076:	2200      	movs	r2, #0
   b8078:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b807c:	b510      	push	{r4, lr}
   b807e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8080:	688c      	ldr	r4, [r1, #8]
   b8082:	6084      	str	r4, [r0, #8]
   b8084:	68cc      	ldr	r4, [r1, #12]
   b8086:	60c4      	str	r4, [r0, #12]
   b8088:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b808a:	608a      	str	r2, [r1, #8]
   b808c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b808e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8090:	610a      	str	r2, [r1, #16]
   b8092:	bd10      	pop	{r4, pc}

000b8094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b8098:	e9d0 8400 	ldrd	r8, r4, [r0]
   b809c:	f04f 0a14 	mov.w	sl, #20
   b80a0:	9300      	str	r3, [sp, #0]
   b80a2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b80a6:	4b18      	ldr	r3, [pc, #96]	; (b8108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b80a8:	10a4      	asrs	r4, r4, #2
   b80aa:	4617      	mov	r7, r2
   b80ac:	435c      	muls	r4, r3
   b80ae:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b80b0:	2c00      	cmp	r4, #0
   b80b2:	dd21      	ble.n	b80f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b80b4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b80b6:	fb0a f006 	mul.w	r0, sl, r6
   b80ba:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b80be:	463a      	mov	r2, r7
   b80c0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b80c4:	5828      	ldr	r0, [r5, r0]
   b80c6:	9101      	str	r1, [sp, #4]
   b80c8:	455f      	cmp	r7, fp
   b80ca:	bf28      	it	cs
   b80cc:	465a      	movcs	r2, fp
   b80ce:	f003 fa6c 	bl	bb5aa <strncmp>
                if (cmp == 0) {
   b80d2:	2800      	cmp	r0, #0
   b80d4:	9901      	ldr	r1, [sp, #4]
   b80d6:	f04f 0301 	mov.w	r3, #1
   b80da:	d10b      	bne.n	b80f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b80dc:	455f      	cmp	r7, fp
   b80de:	d103      	bne.n	b80e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b80e0:	9a00      	ldr	r2, [sp, #0]
   b80e2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b80e4:	4634      	mov	r4, r6
   b80e6:	e7e3      	b.n	b80b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b80e8:	d9fc      	bls.n	b80e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b80ea:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b80ec:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b80f0:	3e01      	subs	r6, #1
   b80f2:	e7f7      	b.n	b80e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b80f4:	dbf9      	blt.n	b80ea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b80f6:	e7f5      	b.n	b80e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b80f8:	eba5 0508 	sub.w	r5, r5, r8
}
   b80fc:	4802      	ldr	r0, [pc, #8]	; (b8108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b80fe:	10ad      	asrs	r5, r5, #2
   b8100:	4368      	muls	r0, r5
   b8102:	b003      	add	sp, #12
   b8104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8108:	cccccccd 	.word	0xcccccccd

000b810c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b810c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b810e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b8110:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8112:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8114:	b303      	cbz	r3, b8158 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8116:	b1f9      	cbz	r1, b8158 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8118:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b811a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b811e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b8120:	a903      	add	r1, sp, #12
   b8122:	a801      	add	r0, sp, #4
   b8124:	f7ff ff19 	bl	b7f5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8128:	4601      	mov	r1, r0
   b812a:	b1a8      	cbz	r0, b8158 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b812c:	f10d 030b 	add.w	r3, sp, #11
   b8130:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b8132:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8136:	4620      	mov	r0, r4
   b8138:	f7ff ffac 	bl	b8094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b813c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b8140:	b153      	cbz	r3, b8158 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b8142:	6823      	ldr	r3, [r4, #0]
   b8144:	2414      	movs	r4, #20
   b8146:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b814a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b814c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b8150:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b8152:	bfa8      	it	ge
   b8154:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b8156:	e7e3      	b.n	b8120 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b8158:	4628      	mov	r0, r5
   b815a:	b004      	add	sp, #16
   b815c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8160 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b8160:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b8162:	4c09      	ldr	r4, [pc, #36]	; (b8188 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8164:	7823      	ldrb	r3, [r4, #0]
   b8166:	f3bf 8f5b 	dmb	ish
   b816a:	07db      	lsls	r3, r3, #31
   b816c:	d409      	bmi.n	b8182 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b816e:	4620      	mov	r0, r4
   b8170:	f7fb ffa2 	bl	b40b8 <__cxa_guard_acquire>
   b8174:	b128      	cbz	r0, b8182 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8176:	4620      	mov	r0, r4
   b8178:	f7fb ffa3 	bl	b40c2 <__cxa_guard_release>
   b817c:	4803      	ldr	r0, [pc, #12]	; (b818c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b817e:	f003 f951 	bl	bb424 <atexit>
}
   b8182:	4803      	ldr	r0, [pc, #12]	; (b8190 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8184:	bd10      	pop	{r4, pc}
   b8186:	bf00      	nop
   b8188:	2003e694 	.word	0x2003e694
   b818c:	000b7f53 	.word	0x000b7f53
   b8190:	2003e130 	.word	0x2003e130

000b8194 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8194:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8196:	4c09      	ldr	r4, [pc, #36]	; (b81bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8198:	7823      	ldrb	r3, [r4, #0]
   b819a:	f3bf 8f5b 	dmb	ish
   b819e:	07db      	lsls	r3, r3, #31
   b81a0:	d409      	bmi.n	b81b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b81a2:	4620      	mov	r0, r4
   b81a4:	f7fb ff88 	bl	b40b8 <__cxa_guard_acquire>
   b81a8:	b128      	cbz	r0, b81b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b81aa:	4620      	mov	r0, r4
   b81ac:	f7fb ff89 	bl	b40c2 <__cxa_guard_release>
   b81b0:	4803      	ldr	r0, [pc, #12]	; (b81c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b81b2:	f003 f937 	bl	bb424 <atexit>
    return &factory;
}
   b81b6:	4803      	ldr	r0, [pc, #12]	; (b81c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b81b8:	bd10      	pop	{r4, pc}
   b81ba:	bf00      	nop
   b81bc:	2003e698 	.word	0x2003e698
   b81c0:	000b7fbb 	.word	0x000b7fbb
   b81c4:	2003e134 	.word	0x2003e134

000b81c8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b81c8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b81ca:	2500      	movs	r5, #0
   b81cc:	4604      	mov	r4, r0
   b81ce:	e9c0 5500 	strd	r5, r5, [r0]
   b81d2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b81d6:	6085      	str	r5, [r0, #8]
   b81d8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b81da:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b81de:	f7fe fb6b 	bl	b68b8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b81e2:	f7ff ffbd 	bl	b8160 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b81e6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b81e8:	f7ff ffd4 	bl	b8194 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b81ec:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b81ee:	6220      	str	r0, [r4, #32]
}
   b81f0:	4620      	mov	r0, r4
   b81f2:	bd38      	pop	{r3, r4, r5, pc}

000b81f4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b81f4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b81f6:	4c0a      	ldr	r4, [pc, #40]	; (b8220 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b81f8:	7823      	ldrb	r3, [r4, #0]
   b81fa:	f3bf 8f5b 	dmb	ish
   b81fe:	07db      	lsls	r3, r3, #31
   b8200:	d40c      	bmi.n	b821c <_ZN5spark10LogManager8instanceEv+0x28>
   b8202:	4620      	mov	r0, r4
   b8204:	f7fb ff58 	bl	b40b8 <__cxa_guard_acquire>
   b8208:	b140      	cbz	r0, b821c <_ZN5spark10LogManager8instanceEv+0x28>
   b820a:	4806      	ldr	r0, [pc, #24]	; (b8224 <_ZN5spark10LogManager8instanceEv+0x30>)
   b820c:	f7ff ffdc 	bl	b81c8 <_ZN5spark10LogManagerC1Ev>
   b8210:	4620      	mov	r0, r4
   b8212:	f7fb ff56 	bl	b40c2 <__cxa_guard_release>
   b8216:	4804      	ldr	r0, [pc, #16]	; (b8228 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8218:	f003 f904 	bl	bb424 <atexit>
    return &mgr;
}
   b821c:	4801      	ldr	r0, [pc, #4]	; (b8224 <_ZN5spark10LogManager8instanceEv+0x30>)
   b821e:	bd10      	pop	{r4, pc}
   b8220:	2003e690 	.word	0x2003e690
   b8224:	2003e6a0 	.word	0x2003e6a0
   b8228:	000b8749 	.word	0x000b8749

000b822c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b822c:	4a02      	ldr	r2, [pc, #8]	; (b8238 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b822e:	4903      	ldr	r1, [pc, #12]	; (b823c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b8230:	4803      	ldr	r0, [pc, #12]	; (b8240 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b8232:	2300      	movs	r3, #0
   b8234:	f7fe bd68 	b.w	b6d08 <log_set_callbacks>
   b8238:	000b852d 	.word	0x000b852d
   b823c:	000b84b9 	.word	0x000b84b9
   b8240:	000b8439 	.word	0x000b8439

000b8244 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8244:	2300      	movs	r3, #0
   b8246:	461a      	mov	r2, r3
   b8248:	4619      	mov	r1, r3
   b824a:	4618      	mov	r0, r3
   b824c:	f7fe bd5c 	b.w	b6d08 <log_set_callbacks>

000b8250 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8250:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b8252:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8254:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8256:	4668      	mov	r0, sp
   b8258:	f7ff fec8 	bl	b7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b825c:	466a      	mov	r2, sp
   b825e:	4629      	mov	r1, r5
   b8260:	4620      	mov	r0, r4
   b8262:	f7ff fd7b 	bl	b7d5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8266:	a801      	add	r0, sp, #4
   b8268:	f7fe feb9 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b826c:	4620      	mov	r0, r4
   b826e:	b003      	add	sp, #12
   b8270:	bd30      	pop	{r4, r5, pc}

000b8272 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8272:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8274:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8276:	4604      	mov	r4, r0
   b8278:	4668      	mov	r0, sp
   b827a:	f7ff feb7 	bl	b7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b827e:	466a      	mov	r2, sp
   b8280:	4629      	mov	r1, r5
   b8282:	4620      	mov	r0, r4
   b8284:	f7ff fd46 	bl	b7d14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8288:	a801      	add	r0, sp, #4
   b828a:	f7fe fea8 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b828e:	4620      	mov	r0, r4
   b8290:	b003      	add	sp, #12
   b8292:	bd30      	pop	{r4, r5, pc}

000b8294 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8296:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8298:	4604      	mov	r4, r0
   b829a:	4668      	mov	r0, sp
   b829c:	f7ff fea6 	bl	b7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b82a0:	466a      	mov	r2, sp
   b82a2:	4629      	mov	r1, r5
   b82a4:	4620      	mov	r0, r4
   b82a6:	f7ff fcde 	bl	b7c66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b82aa:	a801      	add	r0, sp, #4
   b82ac:	f7fe fe97 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82b0:	4620      	mov	r0, r4
   b82b2:	b003      	add	sp, #12
   b82b4:	bd30      	pop	{r4, r5, pc}
	...

000b82b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b82b8:	b570      	push	{r4, r5, r6, lr}
   b82ba:	b08a      	sub	sp, #40	; 0x28
   b82bc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b82be:	4601      	mov	r1, r0
   b82c0:	a804      	add	r0, sp, #16
   b82c2:	f7ff ffc5 	bl	b8250 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b82c6:	4e14      	ldr	r6, [pc, #80]	; (b8318 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b82c8:	a804      	add	r0, sp, #16
   b82ca:	f7ff fd5f 	bl	b7d8c <_ZN5spark18JSONObjectIterator4nextEv>
   b82ce:	b1e8      	cbz	r0, b830c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b82d0:	a904      	add	r1, sp, #16
   b82d2:	4668      	mov	r0, sp
   b82d4:	f7ff ffcd 	bl	b8272 <_ZNK5spark18JSONObjectIterator4nameEv>
   b82d8:	9802      	ldr	r0, [sp, #8]
   b82da:	4631      	mov	r1, r6
   b82dc:	f7ff fe66 	bl	b7fac <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b82e0:	4604      	mov	r4, r0
   b82e2:	b110      	cbz	r0, b82ea <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b82e4:	1e2c      	subs	r4, r5, #0
   b82e6:	bf18      	it	ne
   b82e8:	2401      	movne	r4, #1
   b82ea:	a801      	add	r0, sp, #4
   b82ec:	f7fe fe77 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82f0:	2c00      	cmp	r4, #0
   b82f2:	d0e9      	beq.n	b82c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b82f4:	a904      	add	r1, sp, #16
   b82f6:	4668      	mov	r0, sp
   b82f8:	f7ff ffcc 	bl	b8294 <_ZNK5spark18JSONObjectIterator5valueEv>
   b82fc:	4668      	mov	r0, sp
   b82fe:	f7ff fce8 	bl	b7cd2 <_ZNK5spark9JSONValue5toIntEv>
   b8302:	6028      	str	r0, [r5, #0]
   b8304:	a801      	add	r0, sp, #4
   b8306:	f7fe fe6a 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b830a:	e7dd      	b.n	b82c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b830c:	a805      	add	r0, sp, #20
   b830e:	f7fe fe66 	bl	b6fde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8312:	b00a      	add	sp, #40	; 0x28
   b8314:	bd70      	pop	{r4, r5, r6, pc}
   b8316:	bf00      	nop
   b8318:	000bdd0d 	.word	0x000bdd0d

000b831c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b831e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b8320:	4620      	mov	r0, r4
   b8322:	4913      	ldr	r1, [pc, #76]	; (b8370 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8324:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8326:	f003 f908 	bl	bb53a <strcmp>
   b832a:	b950      	cbnz	r0, b8342 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b832c:	f001 ff76 	bl	ba21c <_Z16_fetch_usbserialv>
   b8330:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8334:	f001 ff62 	bl	ba1fc <_ZN9USBSerial5beginEl>
}
   b8338:	b003      	add	sp, #12
   b833a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b833e:	f001 bf6d 	b.w	ba21c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b8342:	490c      	ldr	r1, [pc, #48]	; (b8374 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8344:	4620      	mov	r0, r4
   b8346:	f003 f8f8 	bl	bb53a <strcmp>
   b834a:	b978      	cbnz	r0, b836c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b834c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b8350:	a901      	add	r1, sp, #4
   b8352:	4628      	mov	r0, r5
        int baud = 9600;
   b8354:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8356:	f7ff ffaf 	bl	b82b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b835a:	f002 f947 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   b835e:	9901      	ldr	r1, [sp, #4]
   b8360:	f001 fef4 	bl	ba14c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8364:	f002 f942 	bl	ba5ec <_Z22__fetch_global_Serial1v>
}
   b8368:	b003      	add	sp, #12
   b836a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b836c:	2000      	movs	r0, #0
   b836e:	e7fb      	b.n	b8368 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b8370:	000bdd12 	.word	0x000bdd12
   b8374:	000bdd19 	.word	0x000bdd19

000b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8378:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b837a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b837e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8380:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8382:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8386:	42ae      	cmp	r6, r5
   b8388:	d005      	beq.n	b8396 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b838a:	f105 0008 	add.w	r0, r5, #8
   b838e:	f7ff fff3 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8392:	3514      	adds	r5, #20
   b8394:	e7f7      	b.n	b8386 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8396:	6820      	ldr	r0, [r4, #0]
   b8398:	f7fe fd9c 	bl	b6ed4 <free>
}
   b839c:	4620      	mov	r0, r4
   b839e:	bd70      	pop	{r4, r5, r6, pc}

000b83a0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b83a0:	b510      	push	{r4, lr}
   b83a2:	4604      	mov	r4, r0
   b83a4:	300c      	adds	r0, #12
   b83a6:	f7ff ffe7 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b83aa:	4620      	mov	r0, r4
   b83ac:	f7fe fe05 	bl	b6fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b83b0:	4620      	mov	r0, r4
   b83b2:	bd10      	pop	{r4, pc}

000b83b4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b83b4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b83b6:	4b04      	ldr	r3, [pc, #16]	; (b83c8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b83b8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b83ba:	f840 3b04 	str.w	r3, [r0], #4
   b83be:	f7ff ffef 	bl	b83a0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b83c2:	4620      	mov	r0, r4
   b83c4:	bd10      	pop	{r4, pc}
   b83c6:	bf00      	nop
   b83c8:	000bd780 	.word	0x000bd780

000b83cc <_ZN5spark16StreamLogHandlerD0Ev>:
   b83cc:	b510      	push	{r4, lr}
   b83ce:	4604      	mov	r4, r0
   b83d0:	f7ff fff0 	bl	b83b4 <_ZN5spark16StreamLogHandlerD1Ev>
   b83d4:	4620      	mov	r0, r4
   b83d6:	2124      	movs	r1, #36	; 0x24
   b83d8:	f7fb fe61 	bl	b409e <_ZdlPvj>
   b83dc:	4620      	mov	r0, r4
   b83de:	bd10      	pop	{r4, pc}

000b83e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b83e0:	b510      	push	{r4, lr}
   b83e2:	4b03      	ldr	r3, [pc, #12]	; (b83f0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b83e4:	6003      	str	r3, [r0, #0]
   b83e6:	4604      	mov	r4, r0
   b83e8:	f7ff ffe4 	bl	b83b4 <_ZN5spark16StreamLogHandlerD1Ev>
   b83ec:	4620      	mov	r0, r4
   b83ee:	bd10      	pop	{r4, pc}
   b83f0:	000bddb0 	.word	0x000bddb0

000b83f4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b83f4:	b510      	push	{r4, lr}
   b83f6:	4604      	mov	r4, r0
   b83f8:	f7ff fff2 	bl	b83e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b83fc:	4620      	mov	r0, r4
   b83fe:	2124      	movs	r1, #36	; 0x24
   b8400:	f7fb fe4d 	bl	b409e <_ZdlPvj>
   b8404:	4620      	mov	r0, r4
   b8406:	bd10      	pop	{r4, pc}

000b8408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b8408:	2200      	movs	r2, #0
   b840a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b840e:	b510      	push	{r4, lr}
        capacity_(0) {
   b8410:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8412:	680c      	ldr	r4, [r1, #0]
   b8414:	6004      	str	r4, [r0, #0]
   b8416:	684c      	ldr	r4, [r1, #4]
   b8418:	6044      	str	r4, [r0, #4]
   b841a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b841c:	600a      	str	r2, [r1, #0]
   b841e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8420:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8422:	608a      	str	r2, [r1, #8]
}
   b8424:	bd10      	pop	{r4, pc}

000b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b8426:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8428:	6803      	ldr	r3, [r0, #0]
   b842a:	4604      	mov	r4, r0
   b842c:	6818      	ldr	r0, [r3, #0]
   b842e:	f7fe fa5b 	bl	b68e8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b8432:	4620      	mov	r0, r4
   b8434:	bd10      	pop	{r4, pc}
	...

000b8438 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b843c:	b087      	sub	sp, #28
   b843e:	4680      	mov	r8, r0
   b8440:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8442:	4b1c      	ldr	r3, [pc, #112]	; (b84b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8444:	685b      	ldr	r3, [r3, #4]
   b8446:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b844a:	4689      	mov	r9, r1
   b844c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b844e:	b96b      	cbnz	r3, b846c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8450:	f7ff fed0 	bl	b81f4 <_ZN5spark10LogManager8instanceEv>
   b8454:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8456:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b845a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b845c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b845e:	f7ff fda3 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8462:	7b23      	ldrb	r3, [r4, #12]
   b8464:	b12b      	cbz	r3, b8472 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8466:	a805      	add	r0, sp, #20
   b8468:	f7ff ffdd 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b846c:	b007      	add	sp, #28
   b846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8472:	2301      	movs	r3, #1
   b8474:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8476:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b847a:	fa5f f989 	uxtb.w	r9, r9
   b847e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8482:	45aa      	cmp	sl, r5
   b8484:	d012      	beq.n	b84ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8486:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b848a:	4631      	mov	r1, r6
   b848c:	1d38      	adds	r0, r7, #4
   b848e:	f7ff fe3d 	bl	b810c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8492:	4581      	cmp	r9, r0
   b8494:	d3f5      	bcc.n	b8482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8496:	683b      	ldr	r3, [r7, #0]
   b8498:	9a03      	ldr	r2, [sp, #12]
   b849a:	9200      	str	r2, [sp, #0]
   b849c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b84a0:	464a      	mov	r2, r9
   b84a2:	4633      	mov	r3, r6
   b84a4:	4641      	mov	r1, r8
   b84a6:	4638      	mov	r0, r7
   b84a8:	47d8      	blx	fp
   b84aa:	e7ea      	b.n	b8482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b84ac:	2300      	movs	r3, #0
   b84ae:	7323      	strb	r3, [r4, #12]
   b84b0:	e7d9      	b.n	b8466 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b84b2:	bf00      	nop
   b84b4:	e000ed00 	.word	0xe000ed00

000b84b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b84b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84bc:	469b      	mov	fp, r3
   b84be:	4b1a      	ldr	r3, [pc, #104]	; (b8528 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b84c0:	685b      	ldr	r3, [r3, #4]
   b84c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b84c6:	4680      	mov	r8, r0
   b84c8:	4689      	mov	r9, r1
   b84ca:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b84cc:	b96b      	cbnz	r3, b84ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b84ce:	f7ff fe91 	bl	b81f4 <_ZN5spark10LogManager8instanceEv>
   b84d2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b84d4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b84d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b84da:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b84dc:	f7ff fd64 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b84e0:	7b23      	ldrb	r3, [r4, #12]
   b84e2:	b12b      	cbz	r3, b84f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b84e4:	a801      	add	r0, sp, #4
   b84e6:	f7ff ff9e 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b84ea:	b003      	add	sp, #12
   b84ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b84f0:	2301      	movs	r3, #1
   b84f2:	7323      	strb	r3, [r4, #12]
   b84f4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b84f8:	b2f6      	uxtb	r6, r6
   b84fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b84fe:	4555      	cmp	r5, sl
   b8500:	d00e      	beq.n	b8520 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b8502:	f855 7b04 	ldr.w	r7, [r5], #4
   b8506:	4659      	mov	r1, fp
   b8508:	1d38      	adds	r0, r7, #4
   b850a:	f7ff fdff 	bl	b810c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b850e:	4286      	cmp	r6, r0
   b8510:	d3f5      	bcc.n	b84fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b8512:	683b      	ldr	r3, [r7, #0]
   b8514:	464a      	mov	r2, r9
   b8516:	68db      	ldr	r3, [r3, #12]
   b8518:	4641      	mov	r1, r8
   b851a:	4638      	mov	r0, r7
   b851c:	4798      	blx	r3
   b851e:	e7ee      	b.n	b84fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b8520:	2300      	movs	r3, #0
   b8522:	7323      	strb	r3, [r4, #12]
   b8524:	e7de      	b.n	b84e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8526:	bf00      	nop
   b8528:	e000ed00 	.word	0xe000ed00

000b852c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b852c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8530:	4b16      	ldr	r3, [pc, #88]	; (b858c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b8532:	685b      	ldr	r3, [r3, #4]
   b8534:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8538:	4605      	mov	r5, r0
   b853a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b853c:	bb1b      	cbnz	r3, b8586 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b853e:	f7ff fe59 	bl	b81f4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8542:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8546:	4604      	mov	r4, r0
   b8548:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b854a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b854c:	f7ff fd2c 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
   b8550:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8554:	2446      	movs	r4, #70	; 0x46
   b8556:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b855a:	45b0      	cmp	r8, r6
   b855c:	d109      	bne.n	b8572 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b855e:	a801      	add	r0, sp, #4
   b8560:	f7ff ff61 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8564:	42a5      	cmp	r5, r4
   b8566:	bfb4      	ite	lt
   b8568:	2000      	movlt	r0, #0
   b856a:	2001      	movge	r0, #1
}
   b856c:	b002      	add	sp, #8
   b856e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8572:	f856 0b04 	ldr.w	r0, [r6], #4
   b8576:	4639      	mov	r1, r7
   b8578:	3004      	adds	r0, #4
   b857a:	f7ff fdc7 	bl	b810c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b857e:	4284      	cmp	r4, r0
   b8580:	bfa8      	it	ge
   b8582:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8584:	e7e9      	b.n	b855a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8586:	2000      	movs	r0, #0
   b8588:	e7f0      	b.n	b856c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b858a:	bf00      	nop
   b858c:	e000ed00 	.word	0xe000ed00

000b8590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8592:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8596:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8598:	4604      	mov	r4, r0
   b859a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b859c:	db0d      	blt.n	b85ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b859e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b85a0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b85a2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b85a4:	dd04      	ble.n	b85b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b85a6:	00b9      	lsls	r1, r7, #2
   b85a8:	f7fe fc9c 	bl	b6ee4 <realloc>
            if (!d) {
   b85ac:	b918      	cbnz	r0, b85b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b85ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b85b0:	f7fe fc90 	bl	b6ed4 <free>
        T* d = nullptr;
   b85b4:	2000      	movs	r0, #0
        data_ = d;
   b85b6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b85b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b85ba:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b85bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85be:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b85c2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85c4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b85c8:	1d08      	adds	r0, r1, #4
   b85ca:	f002 ff4f 	bl	bb46c <memmove>
    new(p) T(std::move(value));
   b85ce:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b85d2:	6863      	ldr	r3, [r4, #4]
   b85d4:	3301      	adds	r3, #1
   b85d6:	6063      	str	r3, [r4, #4]
    return true;
   b85d8:	2001      	movs	r0, #1
   b85da:	e7e8      	b.n	b85ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b85dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b85dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b85de:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b85e2:	4604      	mov	r4, r0
   b85e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b85e6:	9301      	str	r3, [sp, #4]
   b85e8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b85ea:	f7ff fcdd 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b85ee:	e9d4 3200 	ldrd	r3, r2, [r4]
   b85f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b85f6:	4293      	cmp	r3, r2
   b85f8:	4619      	mov	r1, r3
   b85fa:	d00b      	beq.n	b8614 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b85fc:	6809      	ldr	r1, [r1, #0]
   b85fe:	42a9      	cmp	r1, r5
   b8600:	f103 0304 	add.w	r3, r3, #4
   b8604:	d1f7      	bne.n	b85f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8606:	a801      	add	r0, sp, #4
   b8608:	f7ff ff0d 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b860c:	2500      	movs	r5, #0
}
   b860e:	4628      	mov	r0, r5
   b8610:	b003      	add	sp, #12
   b8612:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8614:	4629      	mov	r1, r5
   b8616:	4620      	mov	r0, r4
   b8618:	f7ff ffba 	bl	b8590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b861c:	4605      	mov	r5, r0
   b861e:	2800      	cmp	r0, #0
   b8620:	d0f1      	beq.n	b8606 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b8622:	6863      	ldr	r3, [r4, #4]
   b8624:	2b01      	cmp	r3, #1
   b8626:	d101      	bne.n	b862c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8628:	f7ff fe00 	bl	b822c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b862c:	a801      	add	r0, sp, #4
   b862e:	f7ff fefa 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8632:	e7ec      	b.n	b860e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8634:	b570      	push	{r4, r5, r6, lr}
   b8636:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8638:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b863c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b863e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b8642:	4282      	cmp	r2, r0
   b8644:	d00f      	beq.n	b8666 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8646:	4601      	mov	r1, r0
            if (*p == value) {
   b8648:	681d      	ldr	r5, [r3, #0]
   b864a:	f851 6b04 	ldr.w	r6, [r1], #4
   b864e:	42ae      	cmp	r6, r5
   b8650:	d107      	bne.n	b8662 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8652:	1a52      	subs	r2, r2, r1
   b8654:	f002 ff0a 	bl	bb46c <memmove>
    --size_;
   b8658:	6863      	ldr	r3, [r4, #4]
   b865a:	3b01      	subs	r3, #1
   b865c:	6063      	str	r3, [r4, #4]
    return true;
   b865e:	2001      	movs	r0, #1
}
   b8660:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b8662:	4608      	mov	r0, r1
   b8664:	e7ed      	b.n	b8642 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8666:	2000      	movs	r0, #0
   b8668:	e7fa      	b.n	b8660 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b866a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b866a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b866c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8670:	4604      	mov	r4, r0
   b8672:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8674:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8676:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8678:	f7ff fc96 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b867c:	a901      	add	r1, sp, #4
   b867e:	4620      	mov	r0, r4
   b8680:	f7ff ffd8 	bl	b8634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8684:	b118      	cbz	r0, b868e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8686:	6863      	ldr	r3, [r4, #4]
   b8688:	b90b      	cbnz	r3, b868e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b868a:	f7ff fddb 	bl	b8244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b868e:	a803      	add	r0, sp, #12
   b8690:	f7ff fec9 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8694:	b004      	add	sp, #16
   b8696:	bd10      	pop	{r4, pc}

000b8698 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8698:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b869a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b869e:	2318      	movs	r3, #24
   b86a0:	4604      	mov	r4, r0
   b86a2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b86a6:	42ae      	cmp	r6, r5
   b86a8:	d015      	beq.n	b86d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b86aa:	f105 0110 	add.w	r1, r5, #16
   b86ae:	4620      	mov	r0, r4
   b86b0:	f7ff ffc0 	bl	b8634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b86b4:	6863      	ldr	r3, [r4, #4]
   b86b6:	b90b      	cbnz	r3, b86bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b86b8:	f7ff fdc4 	bl	b8244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b86bc:	69e0      	ldr	r0, [r4, #28]
   b86be:	6929      	ldr	r1, [r5, #16]
   b86c0:	6803      	ldr	r3, [r0, #0]
   b86c2:	68db      	ldr	r3, [r3, #12]
   b86c4:	4798      	blx	r3
        if (h.stream) {
   b86c6:	6969      	ldr	r1, [r5, #20]
   b86c8:	b119      	cbz	r1, b86d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b86ca:	6a20      	ldr	r0, [r4, #32]
   b86cc:	6803      	ldr	r3, [r0, #0]
   b86ce:	68db      	ldr	r3, [r3, #12]
   b86d0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b86d2:	3518      	adds	r5, #24
   b86d4:	e7e7      	b.n	b86a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b86d6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b86da:	2618      	movs	r6, #24
   b86dc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b86e0:	42ae      	cmp	r6, r5
   b86e2:	d004      	beq.n	b86ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b86e4:	4628      	mov	r0, r5
   b86e6:	f000 fe73 	bl	b93d0 <_ZN6StringD1Ev>
   b86ea:	3518      	adds	r5, #24
   b86ec:	e7f8      	b.n	b86e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b86ee:	2300      	movs	r3, #0
   b86f0:	6163      	str	r3, [r4, #20]
}
   b86f2:	bd70      	pop	{r4, r5, r6, pc}

000b86f4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b86f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86f6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b86f8:	f7ff fda4 	bl	b8244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b86fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b8700:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8702:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8704:	f7ff fc50 	bl	b7fa8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8708:	4620      	mov	r0, r4
   b870a:	f7ff ffc5 	bl	b8698 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b870e:	a801      	add	r0, sp, #4
   b8710:	f7ff fe89 	bl	b8426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8714:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8716:	b108      	cbz	r0, b871c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8718:	f7fe f8d6 	bl	b68c8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b871c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8720:	2618      	movs	r6, #24
   b8722:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8726:	42ae      	cmp	r6, r5
   b8728:	d004      	beq.n	b8734 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b872a:	4628      	mov	r0, r5
   b872c:	f000 fe50 	bl	b93d0 <_ZN6StringD1Ev>
   b8730:	3518      	adds	r5, #24
   b8732:	e7f8      	b.n	b8726 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8734:	6920      	ldr	r0, [r4, #16]
   b8736:	f7fe fbcd 	bl	b6ed4 <free>
   b873a:	6820      	ldr	r0, [r4, #0]
   b873c:	f7fe fbca 	bl	b6ed4 <free>
}
   b8740:	4620      	mov	r0, r4
   b8742:	b002      	add	sp, #8
   b8744:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8748 <__tcf_2>:
    static LogManager mgr;
   b8748:	4801      	ldr	r0, [pc, #4]	; (b8750 <__tcf_2+0x8>)
   b874a:	f7ff bfd3 	b.w	b86f4 <_ZN5spark10LogManagerD1Ev>
   b874e:	bf00      	nop
   b8750:	2003e6a0 	.word	0x2003e6a0

000b8754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8754:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8758:	4604      	mov	r4, r0
   b875a:	460d      	mov	r5, r1
   b875c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b875e:	d915      	bls.n	b878c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b8760:	4290      	cmp	r0, r2
   b8762:	d214      	bcs.n	b878e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8764:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8768:	1a75      	subs	r5, r6, r1
   b876a:	f1a1 0714 	sub.w	r7, r1, #20
   b876e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8770:	42b7      	cmp	r7, r6
   b8772:	d01a      	beq.n	b87aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8774:	b11c      	cbz	r4, b877e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8776:	4631      	mov	r1, r6
   b8778:	4620      	mov	r0, r4
   b877a:	f7ff fc78 	bl	b806e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b877e:	f106 0008 	add.w	r0, r6, #8
   b8782:	f7ff fdf9 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8786:	3e14      	subs	r6, #20
   b8788:	3c14      	subs	r4, #20
   b878a:	e7f1      	b.n	b8770 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b878c:	d00d      	beq.n	b87aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b878e:	42b5      	cmp	r5, r6
   b8790:	d00b      	beq.n	b87aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b8792:	b11c      	cbz	r4, b879c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8794:	4629      	mov	r1, r5
   b8796:	4620      	mov	r0, r4
   b8798:	f7ff fc69 	bl	b806e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b879c:	f105 0008 	add.w	r0, r5, #8
   b87a0:	f7ff fdea 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b87a4:	3514      	adds	r5, #20
   b87a6:	3414      	adds	r4, #20
   b87a8:	e7f1      	b.n	b878e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b87aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b87ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b87ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87b0:	4604      	mov	r4, r0
   b87b2:	460d      	mov	r5, r1
   b87b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b87b6:	d914      	bls.n	b87e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b87b8:	4290      	cmp	r0, r2
   b87ba:	d213      	bcs.n	b87e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b87bc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b87c0:	1a75      	subs	r5, r6, r1
   b87c2:	f1a1 0710 	sub.w	r7, r1, #16
   b87c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b87c8:	42b7      	cmp	r7, r6
   b87ca:	d018      	beq.n	b87fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b87cc:	b11c      	cbz	r4, b87d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b87ce:	4631      	mov	r1, r6
   b87d0:	4620      	mov	r0, r4
   b87d2:	f000 fe65 	bl	b94a0 <_ZN6StringC1EOS_>
                end->~T();
   b87d6:	4630      	mov	r0, r6
   b87d8:	f000 fdfa 	bl	b93d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b87dc:	3e10      	subs	r6, #16
   b87de:	3c10      	subs	r4, #16
   b87e0:	e7f2      	b.n	b87c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b87e2:	d00c      	beq.n	b87fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b87e4:	42b5      	cmp	r5, r6
   b87e6:	d00a      	beq.n	b87fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b87e8:	b11c      	cbz	r4, b87f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b87ea:	4629      	mov	r1, r5
   b87ec:	4620      	mov	r0, r4
   b87ee:	f000 fe57 	bl	b94a0 <_ZN6StringC1EOS_>
                p->~T();
   b87f2:	4628      	mov	r0, r5
   b87f4:	f000 fdec 	bl	b93d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b87f8:	3510      	adds	r5, #16
   b87fa:	3410      	adds	r4, #16
   b87fc:	e7f2      	b.n	b87e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b87fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8800:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8802:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8804:	4605      	mov	r5, r0
        if (n > 0) {
   b8806:	dd11      	ble.n	b882c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8808:	0130      	lsls	r0, r6, #4
   b880a:	f7fe fb5b 	bl	b6ec4 <malloc>
            if (!d) {
   b880e:	4604      	mov	r4, r0
   b8810:	b158      	cbz	r0, b882a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8812:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8816:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b881a:	f7ff ffc7 	bl	b87ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b881e:	6828      	ldr	r0, [r5, #0]
   b8820:	f7fe fb58 	bl	b6ed4 <free>
        data_ = d;
   b8824:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8826:	60ae      	str	r6, [r5, #8]
        return true;
   b8828:	2001      	movs	r0, #1
    }
   b882a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b882c:	2400      	movs	r4, #0
   b882e:	e7f6      	b.n	b881e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b8830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8834:	4690      	mov	r8, r2
   b8836:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8838:	2300      	movs	r3, #0
   b883a:	9103      	str	r1, [sp, #12]
    return size_;
   b883c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8840:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8842:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8844:	4299      	cmp	r1, r3
        capacity_(0) {
   b8846:	e9c0 3300 	strd	r3, r3, [r0]
   b884a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b884e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8852:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8856:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8858:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b885a:	dc23      	bgt.n	b88a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b885c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8860:	2314      	movs	r3, #20
   b8862:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8866:	42af      	cmp	r7, r5
   b8868:	d03b      	beq.n	b88e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b886a:	4629      	mov	r1, r5
   b886c:	a80b      	add	r0, sp, #44	; 0x2c
   b886e:	f000 fe17 	bl	b94a0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8872:	a90b      	add	r1, sp, #44	; 0x2c
   b8874:	a80f      	add	r0, sp, #60	; 0x3c
   b8876:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8878:	f000 fe12 	bl	b94a0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b887c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8880:	4299      	cmp	r1, r3
   b8882:	da1b      	bge.n	b88bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8884:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8886:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8888:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b888c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8890:	4631      	mov	r1, r6
   b8892:	f106 0010 	add.w	r0, r6, #16
   b8896:	f7ff ff89 	bl	b87ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b889a:	b9ee      	cbnz	r6, b88d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b889e:	3301      	adds	r3, #1
   b88a0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b88a2:	e011      	b.n	b88c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b88a4:	a808      	add	r0, sp, #32
   b88a6:	f7ff ffab 	bl	b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b88aa:	2800      	cmp	r0, #0
   b88ac:	d1d6      	bne.n	b885c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b88ae:	a808      	add	r0, sp, #32
   b88b0:	f7fe fb83 	bl	b6fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b88b4:	4620      	mov	r0, r4
   b88b6:	b015      	add	sp, #84	; 0x54
   b88b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b88bc:	3101      	adds	r1, #1
   b88be:	a808      	add	r0, sp, #32
   b88c0:	f7ff ff9e 	bl	b8800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b88c4:	2800      	cmp	r0, #0
   b88c6:	d1dd      	bne.n	b8884 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b88c8:	a80f      	add	r0, sp, #60	; 0x3c
   b88ca:	f000 fd81 	bl	b93d0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b88ce:	a80b      	add	r0, sp, #44	; 0x2c
   b88d0:	f000 fd7e 	bl	b93d0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b88d4:	3514      	adds	r5, #20
   b88d6:	e7c6      	b.n	b8866 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b88d8:	a90f      	add	r1, sp, #60	; 0x3c
   b88da:	4630      	mov	r0, r6
   b88dc:	f000 fde0 	bl	b94a0 <_ZN6StringC1EOS_>
   b88e0:	e7dc      	b.n	b889c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b88e2:	2600      	movs	r6, #0
   b88e4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b88e8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b88ea:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b88ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b88f2:	429e      	cmp	r6, r3
   b88f4:	da7c      	bge.n	b89f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b88f6:	0133      	lsls	r3, r6, #4
   b88f8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b88fa:	9306      	str	r3, [sp, #24]
        if (!category) {
   b88fc:	b90b      	cbnz	r3, b8902 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b88fe:	3601      	adds	r6, #1
   b8900:	e7f5      	b.n	b88ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8902:	2300      	movs	r3, #0
   b8904:	9307      	str	r3, [sp, #28]
   b8906:	fb09 f306 	mul.w	r3, r9, r6
   b890a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b890c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b890e:	a907      	add	r1, sp, #28
   b8910:	a806      	add	r0, sp, #24
   b8912:	f7ff fb22 	bl	b7f5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8916:	4682      	mov	sl, r0
   b8918:	2800      	cmp	r0, #0
   b891a:	d0f0      	beq.n	b88fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b891c:	f04f 0300 	mov.w	r3, #0
   b8920:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8924:	4601      	mov	r1, r0
   b8926:	9a07      	ldr	r2, [sp, #28]
   b8928:	f10d 0317 	add.w	r3, sp, #23
   b892c:	4628      	mov	r0, r5
   b892e:	f7ff fbb1 	bl	b8094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8932:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8936:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8938:	2f00      	cmp	r7, #0
   b893a:	d14a      	bne.n	b89d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b893c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8940:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8944:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8948:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b894c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8950:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8954:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8956:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b895a:	4293      	cmp	r3, r2
   b895c:	db17      	blt.n	b898e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b895e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8962:	f1ba 0f00 	cmp.w	sl, #0
   b8966:	dd30      	ble.n	b89ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8968:	fb09 f00a 	mul.w	r0, r9, sl
   b896c:	f7fe faaa 	bl	b6ec4 <malloc>
            if (!d) {
   b8970:	4683      	mov	fp, r0
   b8972:	b360      	cbz	r0, b89ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8974:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8978:	fb09 1202 	mla	r2, r9, r2, r1
   b897c:	f7ff feea 	bl	b8754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b8980:	6828      	ldr	r0, [r5, #0]
   b8982:	f7fe faa7 	bl	b6ed4 <free>
        data_ = d;
   b8986:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b898a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b898e:	682b      	ldr	r3, [r5, #0]
   b8990:	9a01      	ldr	r2, [sp, #4]
   b8992:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8996:	686a      	ldr	r2, [r5, #4]
   b8998:	4651      	mov	r1, sl
   b899a:	fb09 3202 	mla	r2, r9, r2, r3
   b899e:	f10a 0014 	add.w	r0, sl, #20
   b89a2:	f7ff fed7 	bl	b8754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b89a6:	f1ba 0f00 	cmp.w	sl, #0
   b89aa:	d003      	beq.n	b89b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b89ac:	a90f      	add	r1, sp, #60	; 0x3c
   b89ae:	4650      	mov	r0, sl
   b89b0:	f7ff fb5d 	bl	b806e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b89b4:	686b      	ldr	r3, [r5, #4]
   b89b6:	3301      	adds	r3, #1
   b89b8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b89ba:	a811      	add	r0, sp, #68	; 0x44
   b89bc:	f7ff fcdc 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b89c0:	b13f      	cbz	r7, b89d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b89c2:	a80b      	add	r0, sp, #44	; 0x2c
   b89c4:	f7ff fcd8 	bl	b8378 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b89c8:	e771      	b.n	b88ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b89ca:	46bb      	mov	fp, r7
   b89cc:	e7d8      	b.n	b8980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b89ce:	2701      	movs	r7, #1
   b89d0:	e7f3      	b.n	b89ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b89d2:	9b01      	ldr	r3, [sp, #4]
   b89d4:	682d      	ldr	r5, [r5, #0]
   b89d6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b89da:	9b06      	ldr	r3, [sp, #24]
   b89dc:	781b      	ldrb	r3, [r3, #0]
   b89de:	b92b      	cbnz	r3, b89ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b89e0:	f8d8 3000 	ldr.w	r3, [r8]
   b89e4:	9a02      	ldr	r2, [sp, #8]
   b89e6:	4413      	add	r3, r2
   b89e8:	7c1b      	ldrb	r3, [r3, #16]
   b89ea:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b89ec:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b89ee:	e78e      	b.n	b890e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89f0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b89f2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89f4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b89f6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89f8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b89fa:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b89fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b89fe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a00:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a02:	60a2      	str	r2, [r4, #8]
   b8a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8a06:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a08:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8a0a:	60e2      	str	r2, [r4, #12]
   b8a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8a0e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a10:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8a12:	6122      	str	r2, [r4, #16]
   b8a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8a16:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b8a18:	9b03      	ldr	r3, [sp, #12]
   b8a1a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b8a1c:	6162      	str	r2, [r4, #20]
   b8a1e:	7623      	strb	r3, [r4, #24]
   b8a20:	e7cf      	b.n	b89c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a26:	4604      	mov	r4, r0
   b8a28:	b087      	sub	sp, #28
   b8a2a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b8a2c:	4626      	mov	r6, r4
        stream_(&stream) {
   b8a2e:	4619      	mov	r1, r3
   b8a30:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8a32:	4617      	mov	r7, r2
        stream_(&stream) {
   b8a34:	f7fb fdd9 	bl	b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b8a38:	4b0b      	ldr	r3, [pc, #44]	; (b8a68 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b8a3a:	f846 3b04 	str.w	r3, [r6], #4
   b8a3e:	4669      	mov	r1, sp
   b8a40:	a803      	add	r0, sp, #12
   b8a42:	f7fb fdd2 	bl	b45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8a46:	aa03      	add	r2, sp, #12
   b8a48:	4639      	mov	r1, r7
   b8a4a:	4630      	mov	r0, r6
   b8a4c:	f7ff fef0 	bl	b8830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8a50:	a803      	add	r0, sp, #12
   b8a52:	f7fb fd89 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8a56:	4668      	mov	r0, sp
   b8a58:	f7fb fd86 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8a5c:	4b03      	ldr	r3, [pc, #12]	; (b8a6c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8a5e:	6023      	str	r3, [r4, #0]
}
   b8a60:	4620      	mov	r0, r4
        stream_(&stream) {
   b8a62:	6225      	str	r5, [r4, #32]
}
   b8a64:	b007      	add	sp, #28
   b8a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8a68:	000bd780 	.word	0x000bd780
   b8a6c:	000bdd98 	.word	0x000bdd98

000b8a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a72:	460f      	mov	r7, r1
   b8a74:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a76:	491d      	ldr	r1, [pc, #116]	; (b8aec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a7a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8a7c:	4616      	mov	r6, r2
   b8a7e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8a80:	f002 fd5b 	bl	bb53a <strcmp>
   b8a84:	b9c0      	cbnz	r0, b8ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8a86:	b1a4      	cbz	r4, b8ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8a88:	4629      	mov	r1, r5
   b8a8a:	a801      	add	r0, sp, #4
   b8a8c:	f7ff fcbc 	bl	b8408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8a90:	4917      	ldr	r1, [pc, #92]	; (b8af0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8a92:	2024      	movs	r0, #36	; 0x24
   b8a94:	f001 fdce 	bl	ba634 <_ZnwjRKSt9nothrow_t>
   b8a98:	4605      	mov	r5, r0
   b8a9a:	b130      	cbz	r0, b8aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8a9c:	ab01      	add	r3, sp, #4
   b8a9e:	4632      	mov	r2, r6
   b8aa0:	4621      	mov	r1, r4
   b8aa2:	f7ff ffbf 	bl	b8a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8aa6:	4b13      	ldr	r3, [pc, #76]	; (b8af4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8aa8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8aaa:	a801      	add	r0, sp, #4
   b8aac:	f7fb fd5c 	bl	b4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8ab0:	462c      	mov	r4, r5
}
   b8ab2:	4620      	mov	r0, r4
   b8ab4:	b005      	add	sp, #20
   b8ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8ab8:	490f      	ldr	r1, [pc, #60]	; (b8af8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8aba:	4638      	mov	r0, r7
   b8abc:	f002 fd3d 	bl	bb53a <strcmp>
   b8ac0:	b990      	cbnz	r0, b8ae8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8ac2:	2c00      	cmp	r4, #0
   b8ac4:	d0f5      	beq.n	b8ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8ac6:	4629      	mov	r1, r5
   b8ac8:	a801      	add	r0, sp, #4
   b8aca:	f7ff fc9d 	bl	b8408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8ace:	4908      	ldr	r1, [pc, #32]	; (b8af0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8ad0:	2024      	movs	r0, #36	; 0x24
   b8ad2:	f001 fdaf 	bl	ba634 <_ZnwjRKSt9nothrow_t>
   b8ad6:	4605      	mov	r5, r0
   b8ad8:	2800      	cmp	r0, #0
   b8ada:	d0e6      	beq.n	b8aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8adc:	ab01      	add	r3, sp, #4
   b8ade:	4632      	mov	r2, r6
   b8ae0:	4621      	mov	r1, r4
   b8ae2:	f7ff ff9f 	bl	b8a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8ae6:	e7e0      	b.n	b8aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8ae8:	2400      	movs	r4, #0
   b8aea:	e7e2      	b.n	b8ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8aec:	000bdd21 	.word	0x000bdd21
   b8af0:	000bdfac 	.word	0x000bdfac
   b8af4:	000bddb0 	.word	0x000bddb0
   b8af8:	000bdd25 	.word	0x000bdd25

000b8afc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8afc:	4b01      	ldr	r3, [pc, #4]	; (b8b04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8afe:	4a02      	ldr	r2, [pc, #8]	; (b8b08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8b00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8b02:	4770      	bx	lr
   b8b04:	2003e69c 	.word	0x2003e69c
   b8b08:	000bdd36 	.word	0x000bdd36

000b8b0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b10:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8b12:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8b16:	4604      	mov	r4, r0
   b8b18:	460e      	mov	r6, r1
   b8b1a:	4617      	mov	r7, r2
   b8b1c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8b1e:	f001 fb7d 	bl	ba21c <_Z16_fetch_usbserialv>
   b8b22:	4581      	cmp	r9, r0
   b8b24:	d04c      	beq.n	b8bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8b26:	792b      	ldrb	r3, [r5, #4]
   b8b28:	0719      	lsls	r1, r3, #28
   b8b2a:	d504      	bpl.n	b8b36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b8b2c:	696a      	ldr	r2, [r5, #20]
   b8b2e:	4954      	ldr	r1, [pc, #336]	; (b8c80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8b30:	4620      	mov	r0, r4
   b8b32:	f7ff fa8d 	bl	b8050 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8b36:	f1b8 0f00 	cmp.w	r8, #0
   b8b3a:	d00d      	beq.n	b8b58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b8b3c:	215b      	movs	r1, #91	; 0x5b
   b8b3e:	4620      	mov	r0, r4
   b8b40:	f7ff fa7a 	bl	b8038 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8b44:	4641      	mov	r1, r8
   b8b46:	4620      	mov	r0, r4
   b8b48:	f7ff fa67 	bl	b801a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8b4c:	6823      	ldr	r3, [r4, #0]
   b8b4e:	494d      	ldr	r1, [pc, #308]	; (b8c84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8b50:	68db      	ldr	r3, [r3, #12]
   b8b52:	2202      	movs	r2, #2
   b8b54:	4620      	mov	r0, r4
   b8b56:	4798      	blx	r3
    if (attr.has_file) {
   b8b58:	792b      	ldrb	r3, [r5, #4]
   b8b5a:	07da      	lsls	r2, r3, #31
   b8b5c:	d523      	bpl.n	b8ba6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8b5e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8b62:	212f      	movs	r1, #47	; 0x2f
   b8b64:	4640      	mov	r0, r8
   b8b66:	f002 fd47 	bl	bb5f8 <strrchr>
    if (s1) {
   b8b6a:	b108      	cbz	r0, b8b70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8b6c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8b70:	4641      	mov	r1, r8
   b8b72:	4620      	mov	r0, r4
   b8b74:	f7ff fa51 	bl	b801a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8b78:	792b      	ldrb	r3, [r5, #4]
   b8b7a:	079b      	lsls	r3, r3, #30
   b8b7c:	d508      	bpl.n	b8b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8b7e:	213a      	movs	r1, #58	; 0x3a
   b8b80:	4620      	mov	r0, r4
   b8b82:	f7ff fa59 	bl	b8038 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8b86:	68ea      	ldr	r2, [r5, #12]
   b8b88:	493f      	ldr	r1, [pc, #252]	; (b8c88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8b8a:	4620      	mov	r0, r4
   b8b8c:	f7ff fa60 	bl	b8050 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8b90:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8b92:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8b94:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8b98:	68db      	ldr	r3, [r3, #12]
   b8b9a:	bf14      	ite	ne
   b8b9c:	493b      	ldrne	r1, [pc, #236]	; (b8c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8b9e:	493c      	ldreq	r1, [pc, #240]	; (b8c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8ba0:	2202      	movs	r2, #2
            write(": ", 2);
   b8ba2:	4620      	mov	r0, r4
   b8ba4:	4798      	blx	r3
    if (attr.has_function) {
   b8ba6:	792b      	ldrb	r3, [r5, #4]
   b8ba8:	0758      	lsls	r0, r3, #29
   b8baa:	d51d      	bpl.n	b8be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8bac:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8bae:	460b      	mov	r3, r1
   b8bb0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8bb2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8bb6:	b160      	cbz	r0, b8bd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8bb8:	2820      	cmp	r0, #32
   b8bba:	d108      	bne.n	b8bce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8bbc:	4619      	mov	r1, r3
   b8bbe:	e7f7      	b.n	b8bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8bc0:	4834      	ldr	r0, [pc, #208]	; (b8c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8bc2:	f000 f966 	bl	b8e92 <_ZN5spark12NetworkClass9listeningEv>
   b8bc6:	2800      	cmp	r0, #0
   b8bc8:	d0ad      	beq.n	b8b26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8bce:	2828      	cmp	r0, #40	; 0x28
   b8bd0:	d1ee      	bne.n	b8bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8bd2:	6823      	ldr	r3, [r4, #0]
   b8bd4:	1a52      	subs	r2, r2, r1
   b8bd6:	68db      	ldr	r3, [r3, #12]
   b8bd8:	4620      	mov	r0, r4
   b8bda:	4798      	blx	r3
        write("(): ", 4);
   b8bdc:	6823      	ldr	r3, [r4, #0]
   b8bde:	492e      	ldr	r1, [pc, #184]	; (b8c98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8be0:	68db      	ldr	r3, [r3, #12]
   b8be2:	2204      	movs	r2, #4
   b8be4:	4620      	mov	r0, r4
   b8be6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8be8:	2100      	movs	r1, #0
   b8bea:	4638      	mov	r0, r7
   b8bec:	f7fe f884 	bl	b6cf8 <log_level_name>
   b8bf0:	4601      	mov	r1, r0
    write(s);
   b8bf2:	4620      	mov	r0, r4
   b8bf4:	f7ff fa11 	bl	b801a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8bf8:	6823      	ldr	r3, [r4, #0]
   b8bfa:	4925      	ldr	r1, [pc, #148]	; (b8c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8bfc:	68db      	ldr	r3, [r3, #12]
   b8bfe:	2202      	movs	r2, #2
   b8c00:	4620      	mov	r0, r4
   b8c02:	4798      	blx	r3
    if (msg) {
   b8c04:	b11e      	cbz	r6, b8c0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8c06:	4631      	mov	r1, r6
   b8c08:	4620      	mov	r0, r4
   b8c0a:	f7ff fa06 	bl	b801a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8c0e:	792b      	ldrb	r3, [r5, #4]
   b8c10:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8c14:	d02c      	beq.n	b8c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8c16:	6823      	ldr	r3, [r4, #0]
   b8c18:	4920      	ldr	r1, [pc, #128]	; (b8c9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8c1a:	68db      	ldr	r3, [r3, #12]
   b8c1c:	2202      	movs	r2, #2
   b8c1e:	4620      	mov	r0, r4
   b8c20:	4798      	blx	r3
        if (attr.has_code) {
   b8c22:	792b      	ldrb	r3, [r5, #4]
   b8c24:	06d9      	lsls	r1, r3, #27
   b8c26:	d50a      	bpl.n	b8c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8c28:	6823      	ldr	r3, [r4, #0]
   b8c2a:	491d      	ldr	r1, [pc, #116]	; (b8ca0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8c2c:	68db      	ldr	r3, [r3, #12]
   b8c2e:	2207      	movs	r2, #7
   b8c30:	4620      	mov	r0, r4
   b8c32:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8c34:	69aa      	ldr	r2, [r5, #24]
   b8c36:	491b      	ldr	r1, [pc, #108]	; (b8ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8c38:	4620      	mov	r0, r4
   b8c3a:	f7ff fa09 	bl	b8050 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8c3e:	792b      	ldrb	r3, [r5, #4]
   b8c40:	069a      	lsls	r2, r3, #26
   b8c42:	d511      	bpl.n	b8c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8c44:	06db      	lsls	r3, r3, #27
   b8c46:	d505      	bpl.n	b8c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8c48:	6823      	ldr	r3, [r4, #0]
   b8c4a:	4910      	ldr	r1, [pc, #64]	; (b8c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b8c4c:	68db      	ldr	r3, [r3, #12]
   b8c4e:	2202      	movs	r2, #2
   b8c50:	4620      	mov	r0, r4
   b8c52:	4798      	blx	r3
            write("details = ", 10);
   b8c54:	6823      	ldr	r3, [r4, #0]
   b8c56:	4914      	ldr	r1, [pc, #80]	; (b8ca8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8c58:	68db      	ldr	r3, [r3, #12]
   b8c5a:	4620      	mov	r0, r4
   b8c5c:	220a      	movs	r2, #10
   b8c5e:	4798      	blx	r3
            write(attr.details);
   b8c60:	69e9      	ldr	r1, [r5, #28]
   b8c62:	4620      	mov	r0, r4
   b8c64:	f7ff f9d9 	bl	b801a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8c68:	215d      	movs	r1, #93	; 0x5d
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	f7ff f9e4 	bl	b8038 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8c70:	6823      	ldr	r3, [r4, #0]
   b8c72:	490e      	ldr	r1, [pc, #56]	; (b8cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8c74:	68db      	ldr	r3, [r3, #12]
   b8c76:	4620      	mov	r0, r4
   b8c78:	2202      	movs	r2, #2
}
   b8c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8c7e:	4718      	bx	r3
   b8c80:	000bdd3a 	.word	0x000bdd3a
   b8c84:	000bdd41 	.word	0x000bdd41
   b8c88:	000bde54 	.word	0x000bde54
   b8c8c:	000bdd44 	.word	0x000bdd44
   b8c90:	000bdd49 	.word	0x000bdd49
   b8c94:	2003e6c8 	.word	0x2003e6c8
   b8c98:	000bdd47 	.word	0x000bdd47
   b8c9c:	000bdd4c 	.word	0x000bdd4c
   b8ca0:	000bdd4f 	.word	0x000bdd4f
   b8ca4:	000bdd57 	.word	0x000bdd57
   b8ca8:	000bdd5a 	.word	0x000bdd5a
   b8cac:	000bda01 	.word	0x000bda01

000b8cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8cb4:	b085      	sub	sp, #20
    return stream_;
   b8cb6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8cba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8cbc:	4605      	mov	r5, r0
   b8cbe:	460f      	mov	r7, r1
   b8cc0:	4690      	mov	r8, r2
   b8cc2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8cc4:	f001 faaa 	bl	ba21c <_Z16_fetch_usbserialv>
   b8cc8:	4581      	cmp	r9, r0
   b8cca:	d105      	bne.n	b8cd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8ccc:	4849      	ldr	r0, [pc, #292]	; (b8df4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8cce:	f000 f8e0 	bl	b8e92 <_ZN5spark12NetworkClass9listeningEv>
   b8cd2:	2800      	cmp	r0, #0
   b8cd4:	f040 808a 	bne.w	b8dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8cd8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b8cda:	4a47      	ldr	r2, [pc, #284]	; (b8df8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8cdc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8cde:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8ce2:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8ce4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8ce6:	f88d 9008 	strb.w	r9, [sp, #8]
   b8cea:	f7ff f878 	bl	b7dde <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8cee:	4649      	mov	r1, r9
   b8cf0:	4640      	mov	r0, r8
   b8cf2:	f7fe f801 	bl	b6cf8 <log_level_name>
    json.name("l", 1).value(s);
   b8cf6:	4941      	ldr	r1, [pc, #260]	; (b8dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8cf8:	4680      	mov	r8, r0
   b8cfa:	2201      	movs	r2, #1
   b8cfc:	a801      	add	r0, sp, #4
   b8cfe:	f7ff f8fd 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d02:	4641      	mov	r1, r8
   b8d04:	f7ff f97b 	bl	b7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8d08:	b13f      	cbz	r7, b8d1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b8d0a:	493d      	ldr	r1, [pc, #244]	; (b8e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8d0c:	2201      	movs	r2, #1
   b8d0e:	a801      	add	r0, sp, #4
   b8d10:	f7ff f8f4 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d14:	4639      	mov	r1, r7
   b8d16:	f7ff f972 	bl	b7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b8d1a:	b13e      	cbz	r6, b8d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8d1c:	4939      	ldr	r1, [pc, #228]	; (b8e04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8d1e:	2201      	movs	r2, #1
   b8d20:	a801      	add	r0, sp, #4
   b8d22:	f7ff f8eb 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d26:	4631      	mov	r1, r6
   b8d28:	f7ff f969 	bl	b7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b8d2c:	7923      	ldrb	r3, [r4, #4]
   b8d2e:	07df      	lsls	r7, r3, #31
   b8d30:	d50e      	bpl.n	b8d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8d32:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8d34:	212f      	movs	r1, #47	; 0x2f
   b8d36:	4630      	mov	r0, r6
   b8d38:	f002 fc5e 	bl	bb5f8 <strrchr>
    if (s1) {
   b8d3c:	b100      	cbz	r0, b8d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b8d3e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8d40:	4931      	ldr	r1, [pc, #196]	; (b8e08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8d42:	2201      	movs	r2, #1
   b8d44:	a801      	add	r0, sp, #4
   b8d46:	f7ff f8d9 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d4a:	4631      	mov	r1, r6
   b8d4c:	f7ff f957 	bl	b7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8d50:	7923      	ldrb	r3, [r4, #4]
   b8d52:	079e      	lsls	r6, r3, #30
   b8d54:	d507      	bpl.n	b8d66 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8d56:	492d      	ldr	r1, [pc, #180]	; (b8e0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8d58:	2202      	movs	r2, #2
   b8d5a:	a801      	add	r0, sp, #4
   b8d5c:	f7ff f8ce 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d60:	68e1      	ldr	r1, [r4, #12]
   b8d62:	f7ff f849 	bl	b7df8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8d66:	7923      	ldrb	r3, [r4, #4]
   b8d68:	0758      	lsls	r0, r3, #29
   b8d6a:	d514      	bpl.n	b8d96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8d6c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8d6e:	4633      	mov	r3, r6
   b8d70:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8d72:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d76:	b12a      	cbz	r2, b8d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8d78:	2a20      	cmp	r2, #32
   b8d7a:	d101      	bne.n	b8d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b8d7c:	461e      	mov	r6, r3
   b8d7e:	e7f7      	b.n	b8d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8d80:	2a28      	cmp	r2, #40	; 0x28
   b8d82:	d1f5      	bne.n	b8d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8d84:	4922      	ldr	r1, [pc, #136]	; (b8e10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8d86:	2202      	movs	r2, #2
   b8d88:	a801      	add	r0, sp, #4
   b8d8a:	f7ff f8b7 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8d8e:	1bba      	subs	r2, r7, r6
   b8d90:	4631      	mov	r1, r6
   b8d92:	f7ff f8c3 	bl	b7f1c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8d96:	7923      	ldrb	r3, [r4, #4]
   b8d98:	0719      	lsls	r1, r3, #28
   b8d9a:	d507      	bpl.n	b8dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8d9c:	491d      	ldr	r1, [pc, #116]	; (b8e14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8d9e:	2201      	movs	r2, #1
   b8da0:	a801      	add	r0, sp, #4
   b8da2:	f7ff f8ab 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8da6:	6961      	ldr	r1, [r4, #20]
   b8da8:	f7ff f838 	bl	b7e1c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8dac:	7923      	ldrb	r3, [r4, #4]
   b8dae:	06da      	lsls	r2, r3, #27
   b8db0:	d508      	bpl.n	b8dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8db2:	2204      	movs	r2, #4
   b8db4:	4918      	ldr	r1, [pc, #96]	; (b8e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8db6:	eb0d 0002 	add.w	r0, sp, r2
   b8dba:	f7ff f89f 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8dbe:	69a1      	ldr	r1, [r4, #24]
   b8dc0:	f7ff f81a 	bl	b7df8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8dc4:	7923      	ldrb	r3, [r4, #4]
   b8dc6:	069b      	lsls	r3, r3, #26
   b8dc8:	d507      	bpl.n	b8dda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b8dca:	4914      	ldr	r1, [pc, #80]	; (b8e1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b8dcc:	2206      	movs	r2, #6
   b8dce:	a801      	add	r0, sp, #4
   b8dd0:	f7ff f894 	bl	b7efc <_ZN5spark10JSONWriter4nameEPKcj>
   b8dd4:	69e1      	ldr	r1, [r4, #28]
   b8dd6:	f7ff f912 	bl	b7ffe <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b8dda:	a801      	add	r0, sp, #4
   b8ddc:	f7fe ffe9 	bl	b7db2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8de0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8de2:	490f      	ldr	r1, [pc, #60]	; (b8e20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8de4:	6803      	ldr	r3, [r0, #0]
   b8de6:	2202      	movs	r2, #2
   b8de8:	68db      	ldr	r3, [r3, #12]
   b8dea:	4798      	blx	r3
}
   b8dec:	b005      	add	sp, #20
   b8dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8df2:	bf00      	nop
   b8df4:	2003e6c8 	.word	0x2003e6c8
   b8df8:	000bdd80 	.word	0x000bdd80
   b8dfc:	000bdd17 	.word	0x000bdd17
   b8e00:	000bdbed 	.word	0x000bdbed
   b8e04:	000be3a2 	.word	0x000be3a2
   b8e08:	000bd653 	.word	0x000bd653
   b8e0c:	000bdd65 	.word	0x000bdd65
   b8e10:	000bdd68 	.word	0x000bdd68
   b8e14:	000bda72 	.word	0x000bda72
   b8e18:	000bdd6b 	.word	0x000bdd6b
   b8e1c:	000bdd70 	.word	0x000bdd70
   b8e20:	000bda01 	.word	0x000bda01

000b8e24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8e24:	2300      	movs	r3, #0
   b8e26:	6840      	ldr	r0, [r0, #4]
   b8e28:	461a      	mov	r2, r3
   b8e2a:	f7fd bfeb 	b.w	b6e04 <network_connect>

000b8e2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8e2e:	6840      	ldr	r0, [r0, #4]
   b8e30:	2200      	movs	r2, #0
   b8e32:	2102      	movs	r1, #2
   b8e34:	f7fd bff6 	b.w	b6e24 <network_disconnect>

000b8e38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8e38:	2200      	movs	r2, #0
   b8e3a:	6840      	ldr	r0, [r0, #4]
   b8e3c:	4611      	mov	r1, r2
   b8e3e:	f7fd bfe9 	b.w	b6e14 <network_connecting>

000b8e42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8e42:	2200      	movs	r2, #0
   b8e44:	6840      	ldr	r0, [r0, #4]
   b8e46:	4611      	mov	r1, r2
   b8e48:	f7fd bff4 	b.w	b6e34 <network_ready>

000b8e4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8e4c:	2300      	movs	r3, #0
   b8e4e:	6840      	ldr	r0, [r0, #4]
   b8e50:	461a      	mov	r2, r3
   b8e52:	4619      	mov	r1, r3
   b8e54:	f7fd bff6 	b.w	b6e44 <network_on>

000b8e58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8e58:	2300      	movs	r3, #0
   b8e5a:	6840      	ldr	r0, [r0, #4]
   b8e5c:	461a      	mov	r2, r3
   b8e5e:	4619      	mov	r1, r3
   b8e60:	f7fd bff8 	b.w	b6e54 <network_off>

000b8e64 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8e64:	6840      	ldr	r0, [r0, #4]
   b8e66:	2100      	movs	r1, #0
   b8e68:	f7fe b81c 	b.w	b6ea4 <network_is_on>

000b8e6c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8e6c:	6840      	ldr	r0, [r0, #4]
   b8e6e:	2100      	movs	r1, #0
   b8e70:	f7fe b820 	b.w	b6eb4 <network_is_off>

000b8e74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8e74:	6840      	ldr	r0, [r0, #4]
   b8e76:	2200      	movs	r2, #0
   b8e78:	f081 0101 	eor.w	r1, r1, #1
   b8e7c:	f7fd bff2 	b.w	b6e64 <network_listen>

000b8e80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8e80:	6840      	ldr	r0, [r0, #4]
   b8e82:	2200      	movs	r2, #0
   b8e84:	f7fd bffe 	b.w	b6e84 <network_set_listen_timeout>

000b8e88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8e88:	2200      	movs	r2, #0
   b8e8a:	6840      	ldr	r0, [r0, #4]
   b8e8c:	4611      	mov	r1, r2
   b8e8e:	f7fe b801 	b.w	b6e94 <network_get_listen_timeout>

000b8e92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8e92:	2200      	movs	r2, #0
   b8e94:	6840      	ldr	r0, [r0, #4]
   b8e96:	4611      	mov	r1, r2
   b8e98:	f7fd bfec 	b.w	b6e74 <network_listening>

000b8e9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ea0:	b095      	sub	sp, #84	; 0x54
   b8ea2:	4614      	mov	r4, r2
   b8ea4:	460d      	mov	r5, r1
   b8ea6:	4607      	mov	r7, r0
    IPAddress addr;
   b8ea8:	f7fe fe10 	bl	b7acc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8eac:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8eae:	221c      	movs	r2, #28
   b8eb0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8eb2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8eb4:	f002 faf4 	bl	bb4a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8eb8:	2340      	movs	r3, #64	; 0x40
   b8eba:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8ebc:	4620      	mov	r0, r4
   b8ebe:	466b      	mov	r3, sp
   b8ec0:	aa0c      	add	r2, sp, #48	; 0x30
   b8ec2:	2100      	movs	r1, #0
   b8ec4:	f7fd fde8 	bl	b6a98 <netdb_getaddrinfo>
    if (!r) {
   b8ec8:	4604      	mov	r4, r0
   b8eca:	2800      	cmp	r0, #0
   b8ecc:	d14b      	bne.n	b8f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8ece:	4602      	mov	r2, r0
   b8ed0:	2101      	movs	r1, #1
   b8ed2:	6868      	ldr	r0, [r5, #4]
   b8ed4:	f7fd ffae 	bl	b6e34 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8ed8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8eda:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8edc:	4622      	mov	r2, r4
   b8ede:	6868      	ldr	r0, [r5, #4]
   b8ee0:	f7fd ffa8 	bl	b6e34 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8ee4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8ee6:	4681      	mov	r9, r0
        bool ok = false;
   b8ee8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8eea:	2e00      	cmp	r6, #0
   b8eec:	d03b      	beq.n	b8f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8eee:	2900      	cmp	r1, #0
   b8ef0:	d139      	bne.n	b8f66 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8ef2:	6873      	ldr	r3, [r6, #4]
   b8ef4:	2b02      	cmp	r3, #2
   b8ef6:	d003      	beq.n	b8f00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8ef8:	2b0a      	cmp	r3, #10
   b8efa:	d011      	beq.n	b8f20 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8efc:	69f6      	ldr	r6, [r6, #28]
   b8efe:	e7f4      	b.n	b8eea <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8f00:	f1b8 0f00 	cmp.w	r8, #0
   b8f04:	d0fa      	beq.n	b8efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8f06:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8f08:	a806      	add	r0, sp, #24
   b8f0a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8f0c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8f0e:	f7fe fe2d 	bl	b7b6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f14:	1d3c      	adds	r4, r7, #4
   b8f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f18:	682b      	ldr	r3, [r5, #0]
   b8f1a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8f1c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8f1e:	e7ed      	b.n	b8efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8f20:	f1b9 0f00 	cmp.w	r9, #0
   b8f24:	d0ea      	beq.n	b8efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8f26:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8f28:	2210      	movs	r2, #16
   b8f2a:	a801      	add	r0, sp, #4
   b8f2c:	f002 fab8 	bl	bb4a0 <memset>
                    a.v = 6;
   b8f30:	2306      	movs	r3, #6
   b8f32:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8f36:	ad01      	add	r5, sp, #4
   b8f38:	f104 0308 	add.w	r3, r4, #8
   b8f3c:	3418      	adds	r4, #24
   b8f3e:	6818      	ldr	r0, [r3, #0]
   b8f40:	6859      	ldr	r1, [r3, #4]
   b8f42:	462a      	mov	r2, r5
   b8f44:	c203      	stmia	r2!, {r0, r1}
   b8f46:	3308      	adds	r3, #8
   b8f48:	42a3      	cmp	r3, r4
   b8f4a:	4615      	mov	r5, r2
   b8f4c:	d1f7      	bne.n	b8f3e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8f4e:	a901      	add	r1, sp, #4
   b8f50:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8f52:	ad07      	add	r5, sp, #28
   b8f54:	f7fe fdc8 	bl	b7ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f5a:	1d3c      	adds	r4, r7, #4
   b8f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f5e:	682b      	ldr	r3, [r5, #0]
   b8f60:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8f62:	4649      	mov	r1, r9
   b8f64:	e7ca      	b.n	b8efc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8f66:	9800      	ldr	r0, [sp, #0]
   b8f68:	f7fd fd8e 	bl	b6a88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8f6c:	4638      	mov	r0, r7
   b8f6e:	b015      	add	sp, #84	; 0x54
   b8f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8f74:	4b02      	ldr	r3, [pc, #8]	; (b8f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8f76:	4a03      	ldr	r2, [pc, #12]	; (b8f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8f78:	601a      	str	r2, [r3, #0]
   b8f7a:	2200      	movs	r2, #0
   b8f7c:	605a      	str	r2, [r3, #4]

} // spark
   b8f7e:	4770      	bx	lr
   b8f80:	2003e6c8 	.word	0x2003e6c8
   b8f84:	000bddf8 	.word	0x000bddf8

000b8f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f8a:	4606      	mov	r6, r0
   b8f8c:	460d      	mov	r5, r1
  size_t n = 0;
   b8f8e:	188f      	adds	r7, r1, r2
   b8f90:	2400      	movs	r4, #0
  while (size--) {
   b8f92:	42bd      	cmp	r5, r7
   b8f94:	d00c      	beq.n	b8fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8f96:	6833      	ldr	r3, [r6, #0]
   b8f98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8f9c:	689b      	ldr	r3, [r3, #8]
   b8f9e:	4630      	mov	r0, r6
   b8fa0:	4798      	blx	r3
     if (chunk>=0)
   b8fa2:	1e03      	subs	r3, r0, #0
   b8fa4:	db01      	blt.n	b8faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8fa6:	441c      	add	r4, r3
  while (size--) {
   b8fa8:	e7f3      	b.n	b8f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8faa:	2c00      	cmp	r4, #0
   b8fac:	bf08      	it	eq
   b8fae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8fb0:	4620      	mov	r0, r4
   b8fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8fb4:	b513      	push	{r0, r1, r4, lr}
   b8fb6:	4604      	mov	r4, r0
    }
   b8fb8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8fba:	b159      	cbz	r1, b8fd4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8fbc:	9101      	str	r1, [sp, #4]
   b8fbe:	f002 faec 	bl	bb59a <strlen>
   b8fc2:	6823      	ldr	r3, [r4, #0]
   b8fc4:	9901      	ldr	r1, [sp, #4]
   b8fc6:	68db      	ldr	r3, [r3, #12]
   b8fc8:	4602      	mov	r2, r0
   b8fca:	4620      	mov	r0, r4
    }
   b8fcc:	b002      	add	sp, #8
   b8fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8fd2:	4718      	bx	r3
    }
   b8fd4:	b002      	add	sp, #8
   b8fd6:	bd10      	pop	{r4, pc}

000b8fd8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8fd8:	b508      	push	{r3, lr}
  return write(str);
   b8fda:	f7ff ffeb 	bl	b8fb4 <_ZN5Print5writeEPKc>
}
   b8fde:	bd08      	pop	{r3, pc}

000b8fe0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8fe0:	6803      	ldr	r3, [r0, #0]
   b8fe2:	689b      	ldr	r3, [r3, #8]
   b8fe4:	4718      	bx	r3

000b8fe6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8fe6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8fe8:	210d      	movs	r1, #13
{
   b8fea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8fec:	f7ff fff8 	bl	b8fe0 <_ZN5Print5printEc>
  n += print('\n');
   b8ff0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8ff2:	4604      	mov	r4, r0
  n += print('\n');
   b8ff4:	4628      	mov	r0, r5
   b8ff6:	f7ff fff3 	bl	b8fe0 <_ZN5Print5printEc>
  return n;
}
   b8ffa:	4420      	add	r0, r4
   b8ffc:	bd38      	pop	{r3, r4, r5, pc}

000b8ffe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8ffe:	b538      	push	{r3, r4, r5, lr}
   b9000:	4605      	mov	r5, r0
  return write(str);
   b9002:	f7ff ffd7 	bl	b8fb4 <_ZN5Print5writeEPKc>
   b9006:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9008:	4628      	mov	r0, r5
   b900a:	f7ff ffec 	bl	b8fe6 <_ZN5Print7printlnEv>
  return n;
}
   b900e:	4420      	add	r0, r4
   b9010:	bd38      	pop	{r3, r4, r5, pc}

000b9012 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9012:	b530      	push	{r4, r5, lr}
   b9014:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9016:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9018:	2a01      	cmp	r2, #1
  *str = '\0';
   b901a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b901e:	bf98      	it	ls
   b9020:	220a      	movls	r2, #10
   b9022:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9024:	460d      	mov	r5, r1
   b9026:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b902a:	fb01 5312 	mls	r3, r1, r2, r5
   b902e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9032:	2b09      	cmp	r3, #9
   b9034:	bf94      	ite	ls
   b9036:	3330      	addls	r3, #48	; 0x30
   b9038:	3337      	addhi	r3, #55	; 0x37
   b903a:	b2db      	uxtb	r3, r3
  } while(n);
   b903c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b903e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9042:	d9ef      	bls.n	b9024 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9044:	4621      	mov	r1, r4
   b9046:	f7ff ffb5 	bl	b8fb4 <_ZN5Print5writeEPKc>
}
   b904a:	b00b      	add	sp, #44	; 0x2c
   b904c:	bd30      	pop	{r4, r5, pc}
	...

000b9050 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b9050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9054:	ec55 4b10 	vmov	r4, r5, d0
   b9058:	4606      	mov	r6, r0
   b905a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b905c:	ee10 2a10 	vmov	r2, s0
   b9060:	ee10 0a10 	vmov	r0, s0
   b9064:	462b      	mov	r3, r5
   b9066:	4629      	mov	r1, r5
   b9068:	f002 f910 	bl	bb28c <__aeabi_dcmpun>
   b906c:	b140      	cbz	r0, b9080 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b906e:	4953      	ldr	r1, [pc, #332]	; (b91bc <_ZN5Print10printFloatEdh+0x16c>)
   b9070:	4630      	mov	r0, r6
   b9072:	f7ff ff9f 	bl	b8fb4 <_ZN5Print5writeEPKc>
   b9076:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9078:	4650      	mov	r0, sl
   b907a:	b003      	add	sp, #12
   b907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9080:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9084:	4b4e      	ldr	r3, [pc, #312]	; (b91c0 <_ZN5Print10printFloatEdh+0x170>)
   b9086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b908a:	4620      	mov	r0, r4
   b908c:	4649      	mov	r1, r9
   b908e:	f002 f8fd 	bl	bb28c <__aeabi_dcmpun>
   b9092:	b948      	cbnz	r0, b90a8 <_ZN5Print10printFloatEdh+0x58>
   b9094:	4b4a      	ldr	r3, [pc, #296]	; (b91c0 <_ZN5Print10printFloatEdh+0x170>)
   b9096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b909a:	4620      	mov	r0, r4
   b909c:	4649      	mov	r1, r9
   b909e:	f002 f8d7 	bl	bb250 <__aeabi_dcmple>
   b90a2:	b908      	cbnz	r0, b90a8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b90a4:	4947      	ldr	r1, [pc, #284]	; (b91c4 <_ZN5Print10printFloatEdh+0x174>)
   b90a6:	e7e3      	b.n	b9070 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b90a8:	4b47      	ldr	r3, [pc, #284]	; (b91c8 <_ZN5Print10printFloatEdh+0x178>)
   b90aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b90ae:	4620      	mov	r0, r4
   b90b0:	4629      	mov	r1, r5
   b90b2:	f002 f8e1 	bl	bb278 <__aeabi_dcmpgt>
   b90b6:	b108      	cbz	r0, b90bc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b90b8:	4944      	ldr	r1, [pc, #272]	; (b91cc <_ZN5Print10printFloatEdh+0x17c>)
   b90ba:	e7d9      	b.n	b9070 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b90bc:	4b44      	ldr	r3, [pc, #272]	; (b91d0 <_ZN5Print10printFloatEdh+0x180>)
   b90be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b90c2:	4620      	mov	r0, r4
   b90c4:	4629      	mov	r1, r5
   b90c6:	f002 f8b9 	bl	bb23c <__aeabi_dcmplt>
   b90ca:	2800      	cmp	r0, #0
   b90cc:	d1f4      	bne.n	b90b8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b90ce:	2200      	movs	r2, #0
   b90d0:	2300      	movs	r3, #0
   b90d2:	4620      	mov	r0, r4
   b90d4:	4629      	mov	r1, r5
   b90d6:	f002 f8b1 	bl	bb23c <__aeabi_dcmplt>
   b90da:	b1d0      	cbz	r0, b9112 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b90dc:	212d      	movs	r1, #45	; 0x2d
   b90de:	4630      	mov	r0, r6
   b90e0:	f7ff ff7e 	bl	b8fe0 <_ZN5Print5printEc>
     number = -number;
   b90e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b90e8:	4682      	mov	sl, r0
     number = -number;
   b90ea:	461d      	mov	r5, r3
  double rounding = 0.5;
   b90ec:	4939      	ldr	r1, [pc, #228]	; (b91d4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b90ee:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b91dc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b90f2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b90f6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b90f8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b90fc:	fa5f f38b 	uxtb.w	r3, fp
   b9100:	429f      	cmp	r7, r3
   b9102:	d908      	bls.n	b9116 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9104:	4642      	mov	r2, r8
   b9106:	464b      	mov	r3, r9
   b9108:	f001 ff50 	bl	bafac <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b910c:	f10b 0b01 	add.w	fp, fp, #1
   b9110:	e7f4      	b.n	b90fc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9112:	4682      	mov	sl, r0
   b9114:	e7ea      	b.n	b90ec <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9116:	4622      	mov	r2, r4
   b9118:	462b      	mov	r3, r5
   b911a:	f001 fc67 	bl	ba9ec <__adddf3>
   b911e:	460d      	mov	r5, r1
   b9120:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9122:	f002 f8f1 	bl	bb308 <__aeabi_d2uiz>
   b9126:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9128:	f001 fd9c 	bl	bac64 <__aeabi_ui2d>
   b912c:	4602      	mov	r2, r0
   b912e:	460b      	mov	r3, r1
   b9130:	4620      	mov	r0, r4
   b9132:	4629      	mov	r1, r5
   b9134:	f001 fc58 	bl	ba9e8 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b9138:	220a      	movs	r2, #10
   b913a:	4604      	mov	r4, r0
   b913c:	460d      	mov	r5, r1
   b913e:	4630      	mov	r0, r6
   b9140:	4641      	mov	r1, r8
   b9142:	f7ff ff66 	bl	b9012 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9146:	4482      	add	sl, r0
  if (digits > 0) {
   b9148:	2f00      	cmp	r7, #0
   b914a:	d095      	beq.n	b9078 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b914c:	4922      	ldr	r1, [pc, #136]	; (b91d8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b914e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b91dc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9152:	4630      	mov	r0, r6
   b9154:	f7ff ff2e 	bl	b8fb4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9158:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b915c:	4482      	add	sl, r0
  while (digits-- > 0)
   b915e:	2f00      	cmp	r7, #0
   b9160:	d08a      	beq.n	b9078 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9162:	4642      	mov	r2, r8
   b9164:	464b      	mov	r3, r9
   b9166:	4620      	mov	r0, r4
   b9168:	4629      	mov	r1, r5
   b916a:	f001 fdf5 	bl	bad58 <__aeabi_dmul>
   b916e:	4604      	mov	r4, r0
   b9170:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9172:	f002 f8a1 	bl	bb2b8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9176:	f1b0 0b00 	subs.w	fp, r0, #0
   b917a:	da1c      	bge.n	b91b6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b917c:	212d      	movs	r1, #45	; 0x2d
   b917e:	4630      	mov	r0, r6
   b9180:	f7ff ff2e 	bl	b8fe0 <_ZN5Print5printEc>
            val = -n;
   b9184:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9188:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b918a:	220a      	movs	r2, #10
   b918c:	4630      	mov	r0, r6
   b918e:	9301      	str	r3, [sp, #4]
   b9190:	f7ff ff3f 	bl	b9012 <_ZN5Print11printNumberEmh>
   b9194:	9b01      	ldr	r3, [sp, #4]
   b9196:	4418      	add	r0, r3
    n += print(toPrint);
   b9198:	4482      	add	sl, r0
    remainder -= toPrint;
   b919a:	4658      	mov	r0, fp
   b919c:	f001 fd72 	bl	bac84 <__aeabi_i2d>
   b91a0:	4602      	mov	r2, r0
   b91a2:	460b      	mov	r3, r1
   b91a4:	4620      	mov	r0, r4
   b91a6:	4629      	mov	r1, r5
   b91a8:	f001 fc1e 	bl	ba9e8 <__aeabi_dsub>
   b91ac:	3f01      	subs	r7, #1
   b91ae:	4604      	mov	r4, r0
   b91b0:	460d      	mov	r5, r1
   b91b2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b91b4:	e7d3      	b.n	b915e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b91b6:	4659      	mov	r1, fp
        size_t t = 0;
   b91b8:	2300      	movs	r3, #0
   b91ba:	e7e6      	b.n	b918a <_ZN5Print10printFloatEdh+0x13a>
   b91bc:	000bde2c 	.word	0x000bde2c
   b91c0:	7fefffff 	.word	0x7fefffff
   b91c4:	000bde30 	.word	0x000bde30
   b91c8:	41efffff 	.word	0x41efffff
   b91cc:	000bde34 	.word	0x000bde34
   b91d0:	c1efffff 	.word	0xc1efffff
   b91d4:	3fe00000 	.word	0x3fe00000
   b91d8:	000bd97e 	.word	0x000bd97e
   b91dc:	40240000 	.word	0x40240000

000b91e0 <_ZN5Print5printEfi>:
{
   b91e0:	b538      	push	{r3, r4, r5, lr}
   b91e2:	4604      	mov	r4, r0
   b91e4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b91e8:	b2cd      	uxtb	r5, r1
   b91ea:	f001 fd5d 	bl	baca8 <__aeabi_f2d>
   b91ee:	ec41 0b10 	vmov	d0, r0, r1
   b91f2:	4629      	mov	r1, r5
   b91f4:	4620      	mov	r0, r4
}
   b91f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b91fa:	f7ff bf29 	b.w	b9050 <_ZN5Print10printFloatEdh>

000b91fe <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b91fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9202:	b086      	sub	sp, #24
   b9204:	af00      	add	r7, sp, #0
   b9206:	4605      	mov	r5, r0
   b9208:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b920a:	1d38      	adds	r0, r7, #4
   b920c:	2114      	movs	r1, #20
{
   b920e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9210:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9212:	f7fd fe77 	bl	b6f04 <vsnprintf>

    if (n<bufsize)
   b9216:	2813      	cmp	r0, #19
   b9218:	d80e      	bhi.n	b9238 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b921a:	1d39      	adds	r1, r7, #4
   b921c:	4628      	mov	r0, r5
   b921e:	f7ff fec9 	bl	b8fb4 <_ZN5Print5writeEPKc>
   b9222:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9224:	b11e      	cbz	r6, b922e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9226:	4628      	mov	r0, r5
   b9228:	f7ff fedd 	bl	b8fe6 <_ZN5Print7printlnEv>
   b922c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b922e:	4620      	mov	r0, r4
   b9230:	3718      	adds	r7, #24
   b9232:	46bd      	mov	sp, r7
   b9234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9238:	f100 0308 	add.w	r3, r0, #8
   b923c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9240:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9242:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9246:	4622      	mov	r2, r4
   b9248:	1c41      	adds	r1, r0, #1
   b924a:	683b      	ldr	r3, [r7, #0]
   b924c:	4668      	mov	r0, sp
   b924e:	f7fd fe59 	bl	b6f04 <vsnprintf>
  return write(str);
   b9252:	4669      	mov	r1, sp
   b9254:	4628      	mov	r0, r5
   b9256:	f7ff fead 	bl	b8fb4 <_ZN5Print5writeEPKc>
   b925a:	4604      	mov	r4, r0
   b925c:	46c5      	mov	sp, r8
   b925e:	e7e1      	b.n	b9224 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9260 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9260:	4b01      	ldr	r3, [pc, #4]	; (b9268 <_GLOBAL__sub_I_RGB+0x8>)
   b9262:	2200      	movs	r2, #0
   b9264:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9266:	4770      	bx	lr
   b9268:	2003e6d0 	.word	0x2003e6d0

000b926c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b926c:	2100      	movs	r1, #0
   b926e:	f7fd bc9b 	b.w	b6ba8 <hal_spi_release>

000b9272 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b9272:	2100      	movs	r1, #0
   b9274:	f7fd bc90 	b.w	b6b98 <hal_spi_acquire>

000b9278 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9278:	b510      	push	{r4, lr}
   b927a:	4604      	mov	r4, r0
   b927c:	4608      	mov	r0, r1
{
    _spi = spi;
   b927e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9280:	f7fd fc6a 	bl	b6b58 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9284:	2300      	movs	r3, #0
   b9286:	6063      	str	r3, [r4, #4]
}
   b9288:	4620      	mov	r0, r4
   b928a:	bd10      	pop	{r4, pc}

000b928c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b928c:	b513      	push	{r0, r1, r4, lr}
   b928e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b9290:	7800      	ldrb	r0, [r0, #0]
   b9292:	f7ff ffee 	bl	b9272 <_ZN8SPIClass4lockEv.isra.0>
   b9296:	b958      	cbnz	r0, b92b0 <_ZN8SPIClass5beginEv+0x24>
   b9298:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b929a:	9001      	str	r0, [sp, #4]
   b929c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b92a0:	f7fd fc4a 	bl	b6b38 <hal_spi_begin>
        unlock();
   b92a4:	9801      	ldr	r0, [sp, #4]
    }
}
   b92a6:	b002      	add	sp, #8
   b92a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b92ac:	f7ff bfde 	b.w	b926c <_ZN8SPIClass6unlockEv.isra.0>
   b92b0:	b002      	add	sp, #8
   b92b2:	bd10      	pop	{r4, pc}

000b92b4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b92b4:	7800      	ldrb	r0, [r0, #0]
   b92b6:	f7ff bfd9 	b.w	b926c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b92bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b92bc:	0840      	lsrs	r0, r0, #1
{
   b92be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b92c0:	6018      	str	r0, [r3, #0]
   b92c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b92c4:	6818      	ldr	r0, [r3, #0]
   b92c6:	4288      	cmp	r0, r1
   b92c8:	b2e5      	uxtb	r5, r4
   b92ca:	d906      	bls.n	b92da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b92cc:	3401      	adds	r4, #1
   b92ce:	2c08      	cmp	r4, #8
   b92d0:	d002      	beq.n	b92d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b92d2:	0840      	lsrs	r0, r0, #1
   b92d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b92d6:	e7f5      	b.n	b92c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b92d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b92da:	4b02      	ldr	r3, [pc, #8]	; (b92e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b92dc:	5d5b      	ldrb	r3, [r3, r5]
   b92de:	7013      	strb	r3, [r2, #0]
}
   b92e0:	bd30      	pop	{r4, r5, pc}
   b92e2:	bf00      	nop
   b92e4:	000bde38 	.word	0x000bde38

000b92e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b92e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b92ec:	4606      	mov	r6, r0
   b92ee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b92f0:	7800      	ldrb	r0, [r0, #0]
{
   b92f2:	460c      	mov	r4, r1
    CHECK(lock());
   b92f4:	f7ff ffbd 	bl	b9272 <_ZN8SPIClass4lockEv.isra.0>
   b92f8:	2800      	cmp	r0, #0
   b92fa:	db1b      	blt.n	b9334 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b92fc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b92fe:	2214      	movs	r2, #20
   b9300:	2100      	movs	r1, #0
   b9302:	a809      	add	r0, sp, #36	; 0x24
   b9304:	f002 f8cc 	bl	bb4a0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b9308:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b930a:	2200      	movs	r2, #0
   b930c:	a909      	add	r1, sp, #36	; 0x24
   b930e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b9310:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b9314:	f7fd fc30 	bl	b6b78 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b9318:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b931c:	b113      	cbz	r3, b9324 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b931e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b9322:	b155      	cbz	r5, b933a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b9324:	2700      	movs	r7, #0
   b9326:	46b9      	mov	r9, r7
   b9328:	46b8      	mov	r8, r7
   b932a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b932c:	7923      	ldrb	r3, [r4, #4]
   b932e:	b15d      	cbz	r5, b9348 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b9330:	b1c3      	cbz	r3, b9364 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b9332:	2000      	movs	r0, #0
}
   b9334:	b00f      	add	sp, #60	; 0x3c
   b9336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b933a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b933e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b9342:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b9346:	e7f1      	b.n	b932c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9348:	2b00      	cmp	r3, #0
   b934a:	d135      	bne.n	b93b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b934c:	68a3      	ldr	r3, [r4, #8]
   b934e:	4543      	cmp	r3, r8
   b9350:	d108      	bne.n	b9364 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b9352:	f88d 9020 	strb.w	r9, [sp, #32]
   b9356:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b935a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b935e:	89a3      	ldrh	r3, [r4, #12]
   b9360:	429a      	cmp	r2, r3
   b9362:	d0e6      	beq.n	b9332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b9364:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9366:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9368:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b936c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b936e:	ab04      	add	r3, sp, #16
   b9370:	f10d 020f 	add.w	r2, sp, #15
   b9374:	f7ff ffa2 	bl	b92bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9378:	7921      	ldrb	r1, [r4, #4]
   b937a:	b985      	cbnz	r5, b939e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b937c:	b989      	cbnz	r1, b93a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b937e:	68a3      	ldr	r3, [r4, #8]
   b9380:	4543      	cmp	r3, r8
   b9382:	d30e      	bcc.n	b93a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b9384:	f88d 9020 	strb.w	r9, [sp, #32]
   b9388:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b938c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9390:	89a3      	ldrh	r3, [r4, #12]
   b9392:	429a      	cmp	r2, r3
   b9394:	d105      	bne.n	b93a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b9396:	9b04      	ldr	r3, [sp, #16]
   b9398:	4543      	cmp	r3, r8
   b939a:	d102      	bne.n	b93a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b939c:	e7c9      	b.n	b9332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b939e:	2900      	cmp	r1, #0
   b93a0:	d1f9      	bne.n	b9396 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b93a2:	2300      	movs	r3, #0
   b93a4:	9301      	str	r3, [sp, #4]
   b93a6:	7b63      	ldrb	r3, [r4, #13]
   b93a8:	9300      	str	r3, [sp, #0]
   b93aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b93ae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b93b0:	7830      	ldrb	r0, [r6, #0]
   b93b2:	f7fd fbe9 	bl	b6b88 <hal_spi_set_settings>
   b93b6:	e7bc      	b.n	b9332 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b93b8:	e9cd 5500 	strd	r5, r5, [sp]
   b93bc:	462b      	mov	r3, r5
   b93be:	462a      	mov	r2, r5
   b93c0:	2101      	movs	r1, #1
   b93c2:	e7f5      	b.n	b93b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b93c4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b93c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b93c6:	7800      	ldrb	r0, [r0, #0]
   b93c8:	f7fd fbbe 	bl	b6b48 <hal_spi_transfer>
}
   b93cc:	b2c0      	uxtb	r0, r0
   b93ce:	bd08      	pop	{r3, pc}

000b93d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b93d0:	b510      	push	{r4, lr}
   b93d2:	4604      	mov	r4, r0
{
	free(buffer);
   b93d4:	6800      	ldr	r0, [r0, #0]
   b93d6:	f7fd fd7d 	bl	b6ed4 <free>
}
   b93da:	4620      	mov	r0, r4
   b93dc:	bd10      	pop	{r4, pc}

000b93de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b93de:	b510      	push	{r4, lr}
   b93e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b93e2:	6800      	ldr	r0, [r0, #0]
   b93e4:	b108      	cbz	r0, b93ea <_ZN6String10invalidateEv+0xc>
   b93e6:	f7fd fd75 	bl	b6ed4 <free>
	buffer = NULL;
   b93ea:	2300      	movs	r3, #0
	capacity = len = 0;
   b93ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b93f0:	6023      	str	r3, [r4, #0]
}
   b93f2:	bd10      	pop	{r4, pc}

000b93f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b93f4:	b538      	push	{r3, r4, r5, lr}
   b93f6:	4604      	mov	r4, r0
   b93f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b93fa:	6800      	ldr	r0, [r0, #0]
   b93fc:	3101      	adds	r1, #1
   b93fe:	f7fd fd71 	bl	b6ee4 <realloc>
	if (newbuffer) {
   b9402:	b110      	cbz	r0, b940a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9404:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9408:	2001      	movs	r0, #1
	}
	return 0;
}
   b940a:	bd38      	pop	{r3, r4, r5, pc}

000b940c <_ZN6String7reserveEj>:
{
   b940c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b940e:	6803      	ldr	r3, [r0, #0]
{
   b9410:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9412:	b123      	cbz	r3, b941e <_ZN6String7reserveEj+0x12>
   b9414:	6843      	ldr	r3, [r0, #4]
   b9416:	428b      	cmp	r3, r1
   b9418:	d301      	bcc.n	b941e <_ZN6String7reserveEj+0x12>
   b941a:	2001      	movs	r0, #1
}
   b941c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b941e:	4620      	mov	r0, r4
   b9420:	f7ff ffe8 	bl	b93f4 <_ZN6String12changeBufferEj>
   b9424:	2800      	cmp	r0, #0
   b9426:	d0f9      	beq.n	b941c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9428:	68a3      	ldr	r3, [r4, #8]
   b942a:	2b00      	cmp	r3, #0
   b942c:	d1f5      	bne.n	b941a <_ZN6String7reserveEj+0xe>
   b942e:	6822      	ldr	r2, [r4, #0]
   b9430:	7013      	strb	r3, [r2, #0]
   b9432:	e7f2      	b.n	b941a <_ZN6String7reserveEj+0xe>

000b9434 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9434:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9436:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9438:	4611      	mov	r1, r2
   b943a:	9201      	str	r2, [sp, #4]
{
   b943c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b943e:	f7ff ffe5 	bl	b940c <_ZN6String7reserveEj>
   b9442:	9a01      	ldr	r2, [sp, #4]
   b9444:	b928      	cbnz	r0, b9452 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9446:	4620      	mov	r0, r4
   b9448:	f7ff ffc9 	bl	b93de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b944c:	4620      	mov	r0, r4
   b944e:	b003      	add	sp, #12
   b9450:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9452:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9454:	4629      	mov	r1, r5
   b9456:	6820      	ldr	r0, [r4, #0]
   b9458:	f001 fffa 	bl	bb450 <memcpy>
	buffer[len] = 0;
   b945c:	6822      	ldr	r2, [r4, #0]
   b945e:	68a3      	ldr	r3, [r4, #8]
   b9460:	2100      	movs	r1, #0
   b9462:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9464:	e7f2      	b.n	b944c <_ZN6String4copyEPKcj+0x18>

000b9466 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9466:	b538      	push	{r3, r4, r5, lr}
   b9468:	4605      	mov	r5, r0
	if (buffer) {
   b946a:	6800      	ldr	r0, [r0, #0]
{
   b946c:	460c      	mov	r4, r1
	if (buffer) {
   b946e:	b168      	cbz	r0, b948c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9470:	686a      	ldr	r2, [r5, #4]
   b9472:	688b      	ldr	r3, [r1, #8]
   b9474:	429a      	cmp	r2, r3
   b9476:	d307      	bcc.n	b9488 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9478:	6809      	ldr	r1, [r1, #0]
   b947a:	f002 f868 	bl	bb54e <strcpy>
			len = rhs.len;
   b947e:	68a3      	ldr	r3, [r4, #8]
   b9480:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9482:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9484:	60a3      	str	r3, [r4, #8]
}
   b9486:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9488:	f7fd fd24 	bl	b6ed4 <free>
	buffer = rhs.buffer;
   b948c:	6823      	ldr	r3, [r4, #0]
   b948e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9490:	6863      	ldr	r3, [r4, #4]
   b9492:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9494:	68a3      	ldr	r3, [r4, #8]
   b9496:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9498:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b949a:	e9c4 3300 	strd	r3, r3, [r4]
   b949e:	e7f1      	b.n	b9484 <_ZN6String4moveERS_+0x1e>

000b94a0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b94a0:	b510      	push	{r4, lr}
	buffer = NULL;
   b94a2:	2300      	movs	r3, #0
	capacity = 0;
   b94a4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b94a8:	4604      	mov	r4, r0
	len = 0;
   b94aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   b94ac:	7303      	strb	r3, [r0, #12]
	move(rval);
   b94ae:	f7ff ffda 	bl	b9466 <_ZN6String4moveERS_>
}
   b94b2:	4620      	mov	r0, r4
   b94b4:	bd10      	pop	{r4, pc}

000b94b6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b94b6:	4288      	cmp	r0, r1
{
   b94b8:	b510      	push	{r4, lr}
   b94ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b94bc:	d005      	beq.n	b94ca <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b94be:	680b      	ldr	r3, [r1, #0]
   b94c0:	b12b      	cbz	r3, b94ce <_ZN6StringaSERKS_+0x18>
   b94c2:	688a      	ldr	r2, [r1, #8]
   b94c4:	4619      	mov	r1, r3
   b94c6:	f7ff ffb5 	bl	b9434 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b94ca:	4620      	mov	r0, r4
   b94cc:	bd10      	pop	{r4, pc}
	else invalidate();
   b94ce:	f7ff ff86 	bl	b93de <_ZN6String10invalidateEv>
   b94d2:	e7fa      	b.n	b94ca <_ZN6StringaSERKS_+0x14>

000b94d4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b94d4:	b510      	push	{r4, lr}
	buffer = NULL;
   b94d6:	2300      	movs	r3, #0
String::String(const String &value)
   b94d8:	4604      	mov	r4, r0
	capacity = 0;
   b94da:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b94de:	6083      	str	r3, [r0, #8]
	flags = 0;
   b94e0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b94e2:	f7ff ffe8 	bl	b94b6 <_ZN6StringaSERKS_>
}
   b94e6:	4620      	mov	r0, r4
   b94e8:	bd10      	pop	{r4, pc}
	...

000b94ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b94ec:	4b05      	ldr	r3, [pc, #20]	; (b9504 <_GLOBAL__sub_I_System+0x18>)
   b94ee:	2202      	movs	r2, #2
   b94f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b94f2:	4b05      	ldr	r3, [pc, #20]	; (b9508 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b94f4:	4a05      	ldr	r2, [pc, #20]	; (b950c <_GLOBAL__sub_I_System+0x20>)
   b94f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b94f8:	2000      	movs	r0, #0
   b94fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b94fe:	f7fd bc15 	b.w	b6d2c <set_system_mode>
   b9502:	bf00      	nop
   b9504:	2003e6ec 	.word	0x2003e6ec
   b9508:	2003e6e0 	.word	0x2003e6e0
   b950c:	ffff0000 	.word	0xffff0000

000b9510 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9510:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9512:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9514:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9518:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b951a:	2201      	movs	r2, #1
   b951c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9520:	f10d 0107 	add.w	r1, sp, #7
   b9524:	47a0      	blx	r4
}
   b9526:	b002      	add	sp, #8
   b9528:	bd10      	pop	{r4, pc}

000b952a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b952a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b952c:	6803      	ldr	r3, [r0, #0]
   b952e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9534:	46a4      	mov	ip, r4
}
   b9536:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b953a:	4760      	bx	ip

000b953c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b953c:	b513      	push	{r0, r1, r4, lr}
   b953e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9540:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9542:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9546:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9548:	f10d 0107 	add.w	r1, sp, #7
   b954c:	2201      	movs	r2, #1
   b954e:	47a0      	blx	r4
}
   b9550:	b002      	add	sp, #8
   b9552:	bd10      	pop	{r4, pc}

000b9554 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9554:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9556:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9558:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b955c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9560:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9562:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9564:	d008      	beq.n	b9578 <_ZN9TCPClient4readEv+0x24>
   b9566:	6963      	ldr	r3, [r4, #20]
   b9568:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b956c:	1c51      	adds	r1, r2, #1
   b956e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9572:	4413      	add	r3, r2
   b9574:	7918      	ldrb	r0, [r3, #4]
}
   b9576:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9578:	6803      	ldr	r3, [r0, #0]
   b957a:	691b      	ldr	r3, [r3, #16]
   b957c:	4798      	blx	r3
   b957e:	2800      	cmp	r0, #0
   b9580:	d1f1      	bne.n	b9566 <_ZN9TCPClient4readEv+0x12>
   b9582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9586:	e7f6      	b.n	b9576 <_ZN9TCPClient4readEv+0x22>

000b9588 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9588:	4770      	bx	lr

000b958a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b958a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b958c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b958e:	43c0      	mvns	r0, r0
   b9590:	0fc0      	lsrs	r0, r0, #31
   b9592:	4770      	bx	lr

000b9594 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9594:	4770      	bx	lr
	...

000b9598 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9598:	4b06      	ldr	r3, [pc, #24]	; (b95b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b959a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b959c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b959e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b95a2:	d005      	beq.n	b95b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b95a4:	4608      	mov	r0, r1
   b95a6:	f001 f8ff 	bl	ba7a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b95aa:	2800      	cmp	r0, #0
   b95ac:	bf08      	it	eq
   b95ae:	2400      	moveq	r4, #0
      }
   b95b0:	4620      	mov	r0, r4
   b95b2:	bd10      	pop	{r4, pc}
   b95b4:	000bdbf0 	.word	0x000bdbf0

000b95b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b95b8:	b510      	push	{r4, lr}
   b95ba:	21ac      	movs	r1, #172	; 0xac
   b95bc:	4604      	mov	r4, r0
   b95be:	f7fa fd6e 	bl	b409e <_ZdlPvj>
   b95c2:	4620      	mov	r0, r4
   b95c4:	bd10      	pop	{r4, pc}

000b95c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b95c6:	21ac      	movs	r1, #172	; 0xac
   b95c8:	f7fa bd69 	b.w	b409e <_ZdlPvj>

000b95cc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b95cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b95d0:	f04f 0800 	mov.w	r8, #0
   b95d4:	b086      	sub	sp, #24
   b95d6:	461c      	mov	r4, r3
   b95d8:	f8c0 8004 	str.w	r8, [r0, #4]
   b95dc:	4605      	mov	r5, r0
   b95de:	460e      	mov	r6, r1
   b95e0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b95e2:	4641      	mov	r1, r8
   b95e4:	2210      	movs	r2, #16
   b95e6:	a802      	add	r0, sp, #8
   b95e8:	f001 ff5a 	bl	bb4a0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b95ec:	1c63      	adds	r3, r4, #1
   b95ee:	d009      	beq.n	b9604 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b95f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95f4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b95f8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b95fc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9600:	435c      	muls	r4, r3
   b9602:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9604:	6968      	ldr	r0, [r5, #20]
   b9606:	2310      	movs	r3, #16
   b9608:	9300      	str	r3, [sp, #0]
   b960a:	6800      	ldr	r0, [r0, #0]
   b960c:	ab02      	add	r3, sp, #8
   b960e:	f241 0205 	movw	r2, #4101	; 0x1005
   b9612:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9616:	f7fd fa4f 	bl	b6ab8 <sock_setsockopt>
    if (ret < 0) {
   b961a:	2800      	cmp	r0, #0
   b961c:	da07      	bge.n	b962e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b961e:	f7fd fc89 	bl	b6f34 <__errno>
   b9622:	6803      	ldr	r3, [r0, #0]
   b9624:	606b      	str	r3, [r5, #4]
        return 0;
   b9626:	2000      	movs	r0, #0
}
   b9628:	b006      	add	sp, #24
   b962a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b962e:	6968      	ldr	r0, [r5, #20]
   b9630:	2300      	movs	r3, #0
   b9632:	6800      	ldr	r0, [r0, #0]
   b9634:	463a      	mov	r2, r7
   b9636:	4631      	mov	r1, r6
   b9638:	f7fd fa66 	bl	b6b08 <sock_send>
    if (ret < 0) {
   b963c:	1e03      	subs	r3, r0, #0
   b963e:	dbee      	blt.n	b961e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9640:	4618      	mov	r0, r3
   b9642:	e7f1      	b.n	b9628 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9644 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9644:	b530      	push	{r4, r5, lr}
   b9646:	b087      	sub	sp, #28
   b9648:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b964a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b964c:	4668      	mov	r0, sp
   b964e:	f7fe fa8d 	bl	b7b6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9654:	3404      	adds	r4, #4
   b9656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9658:	682b      	ldr	r3, [r5, #0]
   b965a:	7023      	strb	r3, [r4, #0]
    }
   b965c:	b007      	add	sp, #28
   b965e:	bd30      	pop	{r4, r5, pc}

000b9660 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9660:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9662:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9664:	4b05      	ldr	r3, [pc, #20]	; (b967c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9666:	4604      	mov	r4, r0
   b9668:	358c      	adds	r5, #140	; 0x8c
   b966a:	f844 3b04 	str.w	r3, [r4], #4
   b966e:	4606      	mov	r6, r0
   b9670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9674:	682b      	ldr	r3, [r5, #0]
   b9676:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9678:	4630      	mov	r0, r6
   b967a:	bd70      	pop	{r4, r5, r6, pc}
   b967c:	000bdcf8 	.word	0x000bdcf8

000b9680 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9684:	4698      	mov	r8, r3
    stop();
   b9686:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9688:	b093      	sub	sp, #76	; 0x4c
   b968a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b968c:	2400      	movs	r4, #0
    stop();
   b968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9690:	4606      	mov	r6, r0
   b9692:	4617      	mov	r7, r2
    stop();
   b9694:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9696:	4628      	mov	r0, r5
   b9698:	466b      	mov	r3, sp
   b969a:	4622      	mov	r2, r4
   b969c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b969e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b96a0:	f7fd f9fa 	bl	b6a98 <netdb_getaddrinfo>
   b96a4:	4605      	mov	r5, r0
   b96a6:	2800      	cmp	r0, #0
   b96a8:	d163      	bne.n	b9772 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b96aa:	9b00      	ldr	r3, [sp, #0]
   b96ac:	2b00      	cmp	r3, #0
   b96ae:	d04b      	beq.n	b9748 <_ZN9TCPClient7connectEPKctm+0xc8>
   b96b0:	695b      	ldr	r3, [r3, #20]
   b96b2:	2b00      	cmp	r3, #0
   b96b4:	d048      	beq.n	b9748 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b96b6:	a806      	add	r0, sp, #24
   b96b8:	f7fe fa08 	bl	b7acc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b96bc:	9b00      	ldr	r3, [sp, #0]
   b96be:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b96c0:	7863      	ldrb	r3, [r4, #1]
   b96c2:	2b02      	cmp	r3, #2
   b96c4:	d104      	bne.n	b96d0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b96c6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b96c8:	a806      	add	r0, sp, #24
   b96ca:	f7ff ffbb 	bl	b9644 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b96ce:	e026      	b.n	b971e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b96d0:	2b0a      	cmp	r3, #10
   b96d2:	d124      	bne.n	b971e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b96d4:	2211      	movs	r2, #17
   b96d6:	4629      	mov	r1, r5
   b96d8:	a801      	add	r0, sp, #4
   b96da:	f001 fee1 	bl	bb4a0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b96de:	68a3      	ldr	r3, [r4, #8]
   b96e0:	2b00      	cmp	r3, #0
   b96e2:	d038      	beq.n	b9756 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b96e4:	f104 0308 	add.w	r3, r4, #8
   b96e8:	f10d 0c04 	add.w	ip, sp, #4
   b96ec:	3418      	adds	r4, #24
   b96ee:	6818      	ldr	r0, [r3, #0]
   b96f0:	6859      	ldr	r1, [r3, #4]
   b96f2:	4662      	mov	r2, ip
   b96f4:	c203      	stmia	r2!, {r0, r1}
   b96f6:	3308      	adds	r3, #8
   b96f8:	42a3      	cmp	r3, r4
   b96fa:	4694      	mov	ip, r2
   b96fc:	d1f7      	bne.n	b96ee <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b96fe:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9700:	a901      	add	r1, sp, #4
   b9702:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9704:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9708:	f7fe f9ee 	bl	b7ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b970c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9710:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9714:	ac07      	add	r4, sp, #28
   b9716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9718:	f8dc 3000 	ldr.w	r3, [ip]
   b971c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b971e:	a806      	add	r0, sp, #24
   b9720:	f7fe f9f4 	bl	b7b0c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9724:	b180      	cbz	r0, b9748 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9726:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9728:	ad07      	add	r5, sp, #28
   b972a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b972e:	4b12      	ldr	r3, [pc, #72]	; (b9778 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9730:	930c      	str	r3, [sp, #48]	; 0x30
   b9732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9734:	ac0d      	add	r4, sp, #52	; 0x34
   b9736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9738:	682b      	ldr	r3, [r5, #0]
   b973a:	7023      	strb	r3, [r4, #0]
   b973c:	463a      	mov	r2, r7
   b973e:	4643      	mov	r3, r8
   b9740:	a90c      	add	r1, sp, #48	; 0x30
   b9742:	4630      	mov	r0, r6
   b9744:	47c8      	blx	r9
   b9746:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9748:	9800      	ldr	r0, [sp, #0]
   b974a:	f7fd f99d 	bl	b6a88 <netdb_freeaddrinfo>
}
   b974e:	4628      	mov	r0, r5
   b9750:	b013      	add	sp, #76	; 0x4c
   b9752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9756:	68e3      	ldr	r3, [r4, #12]
   b9758:	2b00      	cmp	r3, #0
   b975a:	d1c3      	bne.n	b96e4 <_ZN9TCPClient7connectEPKctm+0x64>
   b975c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9760:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9764:	f7fd f978 	bl	b6a58 <inet_htonl>
   b9768:	4581      	cmp	r9, r0
   b976a:	d1bb      	bne.n	b96e4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b976c:	f104 0114 	add.w	r1, r4, #20
   b9770:	e7aa      	b.n	b96c8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9772:	4625      	mov	r5, r4
   b9774:	e7e8      	b.n	b9748 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9776:	bf00      	nop
   b9778:	000bdcf8 	.word	0x000bdcf8

000b977c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b977c:	b538      	push	{r3, r4, r5, lr}
   b977e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9780:	681a      	ldr	r2, [r3, #0]
   b9782:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9784:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9786:	da10      	bge.n	b97aa <_ZN9TCPClient9connectedEv+0x2e>
   b9788:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b978c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9790:	429a      	cmp	r2, r3
   b9792:	d10a      	bne.n	b97aa <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9794:	6803      	ldr	r3, [r0, #0]
   b9796:	691b      	ldr	r3, [r3, #16]
   b9798:	4798      	blx	r3
        if (!rv) {
   b979a:	4604      	mov	r4, r0
   b979c:	b928      	cbnz	r0, b97aa <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b979e:	682b      	ldr	r3, [r5, #0]
   b97a0:	4628      	mov	r0, r5
   b97a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b97a4:	4798      	blx	r3
        rv = available();
   b97a6:	4620      	mov	r0, r4
}
   b97a8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b97aa:	2001      	movs	r0, #1
   b97ac:	e7fc      	b.n	b97a8 <_ZN9TCPClient9connectedEv+0x2c>

000b97ae <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b97ae:	b510      	push	{r4, lr}
   b97b0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b97ba:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b97bc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97be:	d005      	beq.n	b97cc <_ZN9TCPClient4peekEv+0x1e>
   b97c0:	6963      	ldr	r3, [r4, #20]
   b97c2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b97c6:	4413      	add	r3, r2
   b97c8:	7918      	ldrb	r0, [r3, #4]
}
   b97ca:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97cc:	6803      	ldr	r3, [r0, #0]
   b97ce:	691b      	ldr	r3, [r3, #16]
   b97d0:	4798      	blx	r3
   b97d2:	2800      	cmp	r0, #0
   b97d4:	d1f4      	bne.n	b97c0 <_ZN9TCPClient4peekEv+0x12>
   b97d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b97da:	e7f6      	b.n	b97ca <_ZN9TCPClient4peekEv+0x1c>

000b97dc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b97dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b97de:	6943      	ldr	r3, [r0, #20]
   b97e0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b97e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b97ea:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b97ec:	4605      	mov	r5, r0
   b97ee:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b97f0:	d016      	beq.n	b9820 <_ZN9TCPClient4readEPhj+0x44>
   b97f2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b97f4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b97f8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b97fc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b97fe:	42bc      	cmp	r4, r7
   b9800:	bf28      	it	cs
   b9802:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9804:	3304      	adds	r3, #4
   b9806:	4622      	mov	r2, r4
   b9808:	4419      	add	r1, r3
   b980a:	4630      	mov	r0, r6
   b980c:	f001 fe20 	bl	bb450 <memcpy>
   b9810:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9812:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9816:	4423      	add	r3, r4
   b9818:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b981c:	4620      	mov	r0, r4
   b981e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9820:	6803      	ldr	r3, [r0, #0]
   b9822:	691b      	ldr	r3, [r3, #16]
   b9824:	4798      	blx	r3
   b9826:	2800      	cmp	r0, #0
   b9828:	d1e3      	bne.n	b97f2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b982a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b982e:	e7f5      	b.n	b981c <_ZN9TCPClient4readEPhj+0x40>

000b9830 <_ZN9TCPClient12flush_bufferEv>:
   b9830:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9832:	2300      	movs	r3, #0
   b9834:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9838:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b983a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b983e:	4770      	bx	lr

000b9840 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9844:	461f      	mov	r7, r3
    stop();
   b9846:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9848:	460c      	mov	r4, r1
    stop();
   b984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b984c:	b08a      	sub	sp, #40	; 0x28
   b984e:	4605      	mov	r5, r0
   b9850:	4616      	mov	r6, r2
    stop();
   b9852:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9854:	7d23      	ldrb	r3, [r4, #20]
   b9856:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b985a:	2b04      	cmp	r3, #4
   b985c:	bf0c      	ite	eq
   b985e:	2002      	moveq	r0, #2
   b9860:	200a      	movne	r0, #10
   b9862:	2206      	movs	r2, #6
   b9864:	2101      	movs	r1, #1
   b9866:	f7fd f95f 	bl	b6b28 <sock_socket>
   b986a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b986e:	696b      	ldr	r3, [r5, #20]
   b9870:	681b      	ldr	r3, [r3, #0]
   b9872:	2b00      	cmp	r3, #0
   b9874:	da08      	bge.n	b9888 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9876:	682b      	ldr	r3, [r5, #0]
   b9878:	4628      	mov	r0, r5
   b987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b987c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b987e:	4798      	blx	r3
}
   b9880:	4620      	mov	r0, r4
   b9882:	b00a      	add	sp, #40	; 0x28
   b9884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9888:	4628      	mov	r0, r5
   b988a:	f7ff ffd1 	bl	b9830 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b988e:	b1b7      	cbz	r7, b98be <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9890:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9892:	a903      	add	r1, sp, #12
   b9894:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9896:	9303      	str	r3, [sp, #12]
   b9898:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b989c:	f7fd f8cc 	bl	b6a38 <if_index_to_name>
   b98a0:	2800      	cmp	r0, #0
   b98a2:	d1e8      	bne.n	b9876 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b98a4:	6968      	ldr	r0, [r5, #20]
   b98a6:	2306      	movs	r3, #6
   b98a8:	9300      	str	r3, [sp, #0]
   b98aa:	6800      	ldr	r0, [r0, #0]
   b98ac:	ab03      	add	r3, sp, #12
   b98ae:	f241 020b 	movw	r2, #4107	; 0x100b
   b98b2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b98b6:	f7fd f8ff 	bl	b6ab8 <sock_setsockopt>
   b98ba:	2800      	cmp	r0, #0
   b98bc:	d1db      	bne.n	b9876 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b98be:	221c      	movs	r2, #28
   b98c0:	2100      	movs	r1, #0
   b98c2:	a803      	add	r0, sp, #12
   b98c4:	f001 fdec 	bl	bb4a0 <memset>
    if (ip.version() == 4) {
   b98c8:	7d23      	ldrb	r3, [r4, #20]
   b98ca:	2b04      	cmp	r3, #4
   b98cc:	d11d      	bne.n	b990a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b98ce:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b98d2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b98d4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b98d8:	f7fd f8ce 	bl	b6a78 <inet_htons>
   b98dc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b98e0:	6860      	ldr	r0, [r4, #4]
   b98e2:	f7fd f8b9 	bl	b6a58 <inet_htonl>
   b98e6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b98e8:	696b      	ldr	r3, [r5, #20]
   b98ea:	221c      	movs	r2, #28
   b98ec:	6818      	ldr	r0, [r3, #0]
   b98ee:	a903      	add	r1, sp, #12
   b98f0:	f7fd f8f2 	bl	b6ad8 <sock_connect>
   b98f4:	2800      	cmp	r0, #0
   b98f6:	d1be      	bne.n	b9876 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b98f8:	3404      	adds	r4, #4
   b98fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b98fc:	696d      	ldr	r5, [r5, #20]
   b98fe:	358c      	adds	r5, #140	; 0x8c
   b9900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9902:	6823      	ldr	r3, [r4, #0]
   b9904:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9906:	2401      	movs	r4, #1
   b9908:	e7ba      	b.n	b9880 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b990a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b990e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9910:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9914:	f7fd f8b0 	bl	b6a78 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9918:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b991a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b991e:	1d23      	adds	r3, r4, #4
   b9920:	f104 0714 	add.w	r7, r4, #20
   b9924:	6818      	ldr	r0, [r3, #0]
   b9926:	6859      	ldr	r1, [r3, #4]
   b9928:	4632      	mov	r2, r6
   b992a:	c203      	stmia	r2!, {r0, r1}
   b992c:	3308      	adds	r3, #8
   b992e:	42bb      	cmp	r3, r7
   b9930:	4616      	mov	r6, r2
   b9932:	d1f7      	bne.n	b9924 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9934:	e7d8      	b.n	b98e8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9938 <_ZN9TCPClient9availableEv>:
{
   b9938:	b530      	push	{r4, r5, lr}
   b993a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b993c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9940:	b08b      	sub	sp, #44	; 0x2c
   b9942:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9944:	b12b      	cbz	r3, b9952 <_ZN9TCPClient9availableEv+0x1a>
   b9946:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b994a:	429a      	cmp	r2, r3
   b994c:	d101      	bne.n	b9952 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b994e:	f7ff ff6f 	bl	b9830 <_ZN9TCPClient12flush_bufferEv>
   b9952:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9954:	6808      	ldr	r0, [r1, #0]
   b9956:	2800      	cmp	r0, #0
   b9958:	db18      	blt.n	b998c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b995a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b995e:	2d7f      	cmp	r5, #127	; 0x7f
   b9960:	d814      	bhi.n	b998c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9962:	3104      	adds	r1, #4
   b9964:	2308      	movs	r3, #8
   b9966:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b996a:	4429      	add	r1, r5
   b996c:	f7fd f8bc 	bl	b6ae8 <sock_recv>
            if (ret > 0) {
   b9970:	2800      	cmp	r0, #0
   b9972:	dd13      	ble.n	b999c <_ZN9TCPClient9availableEv+0x64>
   b9974:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9976:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b997a:	b90a      	cbnz	r2, b9980 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b997c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9980:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9982:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9986:	4410      	add	r0, r2
   b9988:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b998c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b998e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9992:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9996:	1ac0      	subs	r0, r0, r3
   b9998:	b00b      	add	sp, #44	; 0x2c
   b999a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b999c:	f7fd faca 	bl	b6f34 <__errno>
   b99a0:	6803      	ldr	r3, [r0, #0]
   b99a2:	2b0b      	cmp	r3, #11
   b99a4:	d0f2      	beq.n	b998c <_ZN9TCPClient9availableEv+0x54>
   b99a6:	f7fd fac5 	bl	b6f34 <__errno>
   b99aa:	6803      	ldr	r3, [r0, #0]
   b99ac:	2b0b      	cmp	r3, #11
   b99ae:	d0ed      	beq.n	b998c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b99b0:	2320      	movs	r3, #32
   b99b2:	2500      	movs	r5, #0
   b99b4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b99b8:	f7fd fabc 	bl	b6f34 <__errno>
   b99bc:	6803      	ldr	r3, [r0, #0]
   b99be:	9301      	str	r3, [sp, #4]
   b99c0:	4b08      	ldr	r3, [pc, #32]	; (b99e4 <_ZN9TCPClient9availableEv+0xac>)
   b99c2:	4909      	ldr	r1, [pc, #36]	; (b99e8 <_ZN9TCPClient9availableEv+0xb0>)
   b99c4:	9300      	str	r3, [sp, #0]
   b99c6:	aa02      	add	r2, sp, #8
   b99c8:	462b      	mov	r3, r5
   b99ca:	2032      	movs	r0, #50	; 0x32
   b99cc:	f7fd f98c 	bl	b6ce8 <log_message>
                    sock_close(d_->sock);
   b99d0:	6963      	ldr	r3, [r4, #20]
   b99d2:	6818      	ldr	r0, [r3, #0]
   b99d4:	f7fd f878 	bl	b6ac8 <sock_close>
   b99d8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b99da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b99de:	601a      	str	r2, [r3, #0]
   b99e0:	e7d4      	b.n	b998c <_ZN9TCPClient9availableEv+0x54>
   b99e2:	bf00      	nop
   b99e4:	000bde47 	.word	0x000bde47
   b99e8:	000bde40 	.word	0x000bde40

000b99ec <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b99ec:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b99ee:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b99f0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b99f2:	6818      	ldr	r0, [r3, #0]
   b99f4:	2800      	cmp	r0, #0
   b99f6:	db01      	blt.n	b99fc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b99f8:	f7fd f866 	bl	b6ac8 <sock_close>
   b99fc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b99fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a02:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9a04:	6960      	ldr	r0, [r4, #20]
   b9a06:	2211      	movs	r2, #17
   b9a08:	2100      	movs	r1, #0
   b9a0a:	308c      	adds	r0, #140	; 0x8c
   b9a0c:	f001 fd48 	bl	bb4a0 <memset>
    flush_buffer();
   b9a10:	4620      	mov	r0, r4
}
   b9a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9a16:	f7ff bf0b 	b.w	b9830 <_ZN9TCPClient12flush_bufferEv>

000b9a1a <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b9a1a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9a1c:	6818      	ldr	r0, [r3, #0]
}
   b9a1e:	43c0      	mvns	r0, r0
   b9a20:	0fc0      	lsrs	r0, r0, #31
   b9a22:	4770      	bx	lr

000b9a24 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9a24:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9a26:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9a28:	4604      	mov	r4, r0
          total(0) {
   b9a2a:	6001      	str	r1, [r0, #0]
   b9a2c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9a30:	3088      	adds	r0, #136	; 0x88
   b9a32:	f7fe f84b 	bl	b7acc <_ZN9IPAddressC1Ev>
}
   b9a36:	4620      	mov	r0, r4
   b9a38:	bd10      	pop	{r4, pc}
	...

000b9a3c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9a3e:	2300      	movs	r3, #0
   b9a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9a44:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9a48:	4a0e      	ldr	r2, [pc, #56]	; (b9a84 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9a4a:	6103      	str	r3, [r0, #16]
   b9a4c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9a4e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9a50:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9a52:	20ac      	movs	r0, #172	; 0xac
   b9a54:	9101      	str	r1, [sp, #4]
   b9a56:	f7fa fb1e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9a5a:	1e05      	subs	r5, r0, #0
   b9a5c:	f105 060c 	add.w	r6, r5, #12
   b9a60:	d008      	beq.n	b9a74 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9a62:	2301      	movs	r3, #1
   b9a64:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9a68:	4b07      	ldr	r3, [pc, #28]	; (b9a88 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9a6a:	9901      	ldr	r1, [sp, #4]
   b9a6c:	602b      	str	r3, [r5, #0]
   b9a6e:	4630      	mov	r0, r6
   b9a70:	f7ff ffd8 	bl	b9a24 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9a74:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9a76:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9a7a:	f7ff fed9 	bl	b9830 <_ZN9TCPClient12flush_bufferEv>
}
   b9a7e:	b002      	add	sp, #8
   b9a80:	bd70      	pop	{r4, r5, r6, pc}
   b9a82:	bf00      	nop
   b9a84:	000bde7c 	.word	0x000bde7c
   b9a88:	000bde60 	.word	0x000bde60

000b9a8c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9a8c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9a8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9a92:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9a94:	f7ff ffd2 	bl	b9a3c <_ZN9TCPClientC1Ei>
}
   b9a98:	4620      	mov	r0, r4
   b9a9a:	bd10      	pop	{r4, pc}

000b9a9c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9a9c:	b510      	push	{r4, lr}
   b9a9e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9aa0:	6800      	ldr	r0, [r0, #0]
   b9aa2:	2800      	cmp	r0, #0
   b9aa4:	db01      	blt.n	b9aaa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9aa6:	f7fd f80f 	bl	b6ac8 <sock_close>
    }
}
   b9aaa:	4620      	mov	r0, r4
   b9aac:	bd10      	pop	{r4, pc}

000b9aae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9aae:	300c      	adds	r0, #12
   b9ab0:	f7ff bff4 	b.w	b9a9c <_ZN9TCPClient4DataD1Ev>

000b9ab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9ab4:	4b02      	ldr	r3, [pc, #8]	; (b9ac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9ab6:	681a      	ldr	r2, [r3, #0]
   b9ab8:	4b02      	ldr	r3, [pc, #8]	; (b9ac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9aba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9abc:	4770      	bx	lr
   b9abe:	bf00      	nop
   b9ac0:	2003e138 	.word	0x2003e138
   b9ac4:	2003e6f0 	.word	0x2003e6f0

000b9ac8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b9ac8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b9aca:	6804      	ldr	r4, [r0, #0]
   b9acc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b9ace:	46a4      	mov	ip, r4
    }
   b9ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b9ad4:	4760      	bx	ip

000b9ad6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b9ad6:	6803      	ldr	r3, [r0, #0]
   b9ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9ada:	4718      	bx	r3

000b9adc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b9adc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b9ade:	4770      	bx	lr

000b9ae0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b9ae0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b9ae2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b9ae4:	1a10      	subs	r0, r2, r0
   b9ae6:	4770      	bx	lr

000b9ae8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b9ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9aea:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b9aec:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9aee:	6a9f      	ldr	r7, [r3, #40]	; 0x28
class IPAddress : public Printable {
   b9af0:	4b0c      	ldr	r3, [pc, #48]	; (b9b24 <_ZN3UDP9endPacketEv+0x3c>)
   b9af2:	9302      	str	r3, [sp, #8]
   b9af4:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b9af8:	4604      	mov	r4, r0
   b9afa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9afc:	ad03      	add	r5, sp, #12
   b9afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b00:	6833      	ldr	r3, [r6, #0]
   b9b02:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9b04:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b9b06:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b9b08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9b0a:	9300      	str	r3, [sp, #0]
   b9b0c:	4620      	mov	r0, r4
   b9b0e:	ab02      	add	r3, sp, #8
   b9b10:	47b8      	blx	r7
    flush(); // wait for send to complete
   b9b12:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b9b14:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b9b16:	69db      	ldr	r3, [r3, #28]
   b9b18:	4620      	mov	r0, r4
   b9b1a:	4798      	blx	r3
    return result;
}
   b9b1c:	4628      	mov	r0, r5
   b9b1e:	b009      	add	sp, #36	; 0x24
   b9b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9b22:	bf00      	nop
   b9b24:	000bdcf8 	.word	0x000bdcf8

000b9b28 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b9b28:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b9b2a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b9b2c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b9b30:	68db      	ldr	r3, [r3, #12]
   b9b32:	2201      	movs	r2, #1
   b9b34:	f10d 0107 	add.w	r1, sp, #7
   b9b38:	4798      	blx	r3
}
   b9b3a:	b003      	add	sp, #12
   b9b3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9b40 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b9b40:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b9b42:	6803      	ldr	r3, [r0, #0]
   b9b44:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b9b46:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b9b48:	4798      	blx	r3
   b9b4a:	b128      	cbz	r0, b9b58 <_ZN3UDP4readEv+0x18>
   b9b4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b9b4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9b50:	1c59      	adds	r1, r3, #1
   b9b52:	86e1      	strh	r1, [r4, #54]	; 0x36
   b9b54:	5cd0      	ldrb	r0, [r2, r3]
}
   b9b56:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b9b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9b5c:	e7fb      	b.n	b9b56 <_ZN3UDP4readEv+0x16>

000b9b5e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b9b5e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b9b60:	6803      	ldr	r3, [r0, #0]
   b9b62:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b9b64:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b9b66:	4798      	blx	r3
   b9b68:	b118      	cbz	r0, b9b72 <_ZN3UDP4peekEv+0x14>
   b9b6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b9b6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9b6e:	5cd0      	ldrb	r0, [r2, r3]
}
   b9b70:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b9b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9b76:	e7fb      	b.n	b9b70 <_ZN3UDP4peekEv+0x12>

000b9b78 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b9b78:	4770      	bx	lr

000b9b7a <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b9b7a:	b410      	push	{r4}
   b9b7c:	4603      	mov	r3, r0
   b9b7e:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b9b80:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b9b82:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b9b84:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b9b86:	6803      	ldr	r3, [r0, #0]
   b9b88:	1a52      	subs	r2, r2, r1
   b9b8a:	68db      	ldr	r3, [r3, #12]
   b9b8c:	4421      	add	r1, r4
}
   b9b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b9b92:	4718      	bx	r3

000b9b94 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b9b94:	f1a0 0010 	sub.w	r0, r0, #16
   b9b98:	f7ff bfef 	b.w	b9b7a <_ZNK3UDP7printToER5Print>

000b9b9c <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b9b9c:	b570      	push	{r4, r5, r6, lr}
    stop();
   b9b9e:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b9ba0:	b08c      	sub	sp, #48	; 0x30
    stop();
   b9ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b9ba4:	4604      	mov	r4, r0
   b9ba6:	460e      	mov	r6, r1
   b9ba8:	4615      	mov	r5, r2
    stop();
   b9baa:	4798      	blx	r3
    const int one = 1;
   b9bac:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b9bae:	221c      	movs	r2, #28
   b9bb0:	2100      	movs	r1, #0
   b9bb2:	a805      	add	r0, sp, #20
    const int one = 1;
   b9bb4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b9bb6:	f001 fc73 	bl	bb4a0 <memset>
    saddr.sin6_len = sizeof(saddr);
   b9bba:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b9bbe:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b9bc0:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b9bc4:	f7fc ff58 	bl	b6a78 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b9bc8:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b9bca:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b9bce:	2102      	movs	r1, #2
   b9bd0:	200a      	movs	r0, #10
   b9bd2:	f7fc ffa9 	bl	b6b28 <sock_socket>
    if (_sock < 0) {
   b9bd6:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b9bd8:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b9bda:	db25      	blt.n	b9c28 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b9bdc:	2204      	movs	r2, #4
   b9bde:	9200      	str	r2, [sp, #0]
   b9be0:	ab02      	add	r3, sp, #8
   b9be2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9be6:	f7fc ff67 	bl	b6ab8 <sock_setsockopt>
   b9bea:	b9e8      	cbnz	r0, b9c28 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b9bec:	b195      	cbz	r5, b9c14 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b9bee:	9003      	str	r0, [sp, #12]
   b9bf0:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b9bf4:	a903      	add	r1, sp, #12
   b9bf6:	b2e8      	uxtb	r0, r5
   b9bf8:	f7fc ff1e 	bl	b6a38 <if_index_to_name>
   b9bfc:	b9a0      	cbnz	r0, b9c28 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b9bfe:	2306      	movs	r3, #6
   b9c00:	9300      	str	r3, [sp, #0]
   b9c02:	6960      	ldr	r0, [r4, #20]
   b9c04:	ab03      	add	r3, sp, #12
   b9c06:	f241 020b 	movw	r2, #4107	; 0x100b
   b9c0a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9c0e:	f7fc ff53 	bl	b6ab8 <sock_setsockopt>
   b9c12:	b948      	cbnz	r0, b9c28 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b9c14:	6960      	ldr	r0, [r4, #20]
   b9c16:	221c      	movs	r2, #28
   b9c18:	a905      	add	r1, sp, #20
   b9c1a:	f7fc ff45 	bl	b6aa8 <sock_bind>
   b9c1e:	b918      	cbnz	r0, b9c28 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b9c20:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b9c22:	2001      	movs	r0, #1
}
   b9c24:	b00c      	add	sp, #48	; 0x30
   b9c26:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b9c28:	6823      	ldr	r3, [r4, #0]
   b9c2a:	4620      	mov	r0, r4
   b9c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c2e:	4798      	blx	r3
   b9c30:	2000      	movs	r0, #0
   b9c32:	e7f7      	b.n	b9c24 <_ZN3UDP5beginEtm+0x88>

000b9c34 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b9c34:	b510      	push	{r4, lr}
   b9c36:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b9c38:	6940      	ldr	r0, [r0, #20]
   b9c3a:	2800      	cmp	r0, #0
   b9c3c:	db01      	blt.n	b9c42 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b9c3e:	f7fc ff43 	bl	b6ac8 <sock_close>
    _sock = -1;
   b9c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c46:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b9c48:	2300      	movs	r3, #0
   b9c4a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b9c4c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b9c4e:	bd10      	pop	{r4, pc}

000b9c50 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b9c50:	b570      	push	{r4, r5, r6, lr}
   b9c52:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b9c54:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9c56:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b9c58:	b168      	cbz	r0, b9c76 <_ZN3UDP5writeEPKhj+0x26>
   b9c5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b9c5c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b9c5e:	4294      	cmp	r4, r2
   b9c60:	bf28      	it	cs
   b9c62:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b9c64:	4622      	mov	r2, r4
   b9c66:	4430      	add	r0, r6
   b9c68:	f001 fbf2 	bl	bb450 <memcpy>
    _offset += size;
   b9c6c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b9c6e:	4423      	add	r3, r4
   b9c70:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b9c72:	4620      	mov	r0, r4
   b9c74:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b9c76:	4604      	mov	r4, r0
   b9c78:	e7f1      	b.n	b9c5e <_ZN3UDP5writeEPKhj+0xe>

000b9c7a <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b9c7a:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b9c7c:	6803      	ldr	r3, [r0, #0]
   b9c7e:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b9c80:	4604      	mov	r4, r0
   b9c82:	460f      	mov	r7, r1
   b9c84:	4616      	mov	r6, r2
    if (available()) {
   b9c86:	4798      	blx	r3
   b9c88:	b190      	cbz	r0, b9cb0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b9c8a:	6823      	ldr	r3, [r4, #0]
   b9c8c:	4620      	mov	r0, r4
   b9c8e:	691b      	ldr	r3, [r3, #16]
   b9c90:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b9c92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b9c94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9c96:	4286      	cmp	r6, r0
   b9c98:	bfa8      	it	ge
   b9c9a:	4606      	movge	r6, r0
   b9c9c:	4419      	add	r1, r3
   b9c9e:	4632      	mov	r2, r6
   b9ca0:	4638      	mov	r0, r7
   b9ca2:	f001 fbd5 	bl	bb450 <memcpy>
        _offset += read;
   b9ca6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b9ca8:	4433      	add	r3, r6
   b9caa:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b9cac:	4630      	mov	r0, r6
   b9cae:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b9cb0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   b9cb4:	e7fa      	b.n	b9cac <_ZN3UDP4readEPhj+0x32>

000b9cb6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9cb6:	b530      	push	{r4, r5, lr}
   b9cb8:	b087      	sub	sp, #28
   b9cba:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9cbc:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9cbe:	4668      	mov	r0, sp
   b9cc0:	f7fd ff54 	bl	b7b6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cc6:	3404      	adds	r4, #4
   b9cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cca:	682b      	ldr	r3, [r5, #0]
   b9ccc:	7023      	strb	r3, [r4, #0]
    }
   b9cce:	b007      	add	sp, #28
   b9cd0:	bd30      	pop	{r4, r5, pc}
	...

000b9cd4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9cd6:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9cd8:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9cda:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9cdc:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b9cde:	4a0a      	ldr	r2, [pc, #40]	; (b9d08 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b9ce0:	9202      	str	r2, [sp, #8]
   b9ce2:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b9ce4:	468c      	mov	ip, r1
   b9ce6:	4606      	mov	r6, r0
   b9ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9cea:	ad03      	add	r5, sp, #12
   b9cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9cee:	6823      	ldr	r3, [r4, #0]
   b9cf0:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b9cf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b9cf6:	9300      	str	r3, [sp, #0]
   b9cf8:	4672      	mov	r2, lr
   b9cfa:	ab02      	add	r3, sp, #8
   b9cfc:	4661      	mov	r1, ip
   b9cfe:	4630      	mov	r0, r6
   b9d00:	47b8      	blx	r7
    }
   b9d02:	b009      	add	sp, #36	; 0x24
   b9d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9d06:	bf00      	nop
   b9d08:	000bdcf8 	.word	0x000bdcf8

000b9d0c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b9d0c:	b570      	push	{r4, r5, r6, lr}
   b9d0e:	4604      	mov	r4, r0
   b9d10:	4b05      	ldr	r3, [pc, #20]	; (b9d28 <_ZN3UDP8remoteIPEv+0x1c>)
   b9d12:	f844 3b04 	str.w	r3, [r4], #4
   b9d16:	f101 0520 	add.w	r5, r1, #32
   b9d1a:	4606      	mov	r6, r0
   b9d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d20:	682b      	ldr	r3, [r5, #0]
   b9d22:	7023      	strb	r3, [r4, #0]
   b9d24:	4630      	mov	r0, r6
   b9d26:	bd70      	pop	{r4, r5, r6, pc}
   b9d28:	000bdcf8 	.word	0x000bdcf8

000b9d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b9d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b9d2e:	7843      	ldrb	r3, [r0, #1]
   b9d30:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b9d32:	b08d      	sub	sp, #52	; 0x34
   b9d34:	4605      	mov	r5, r0
   b9d36:	460c      	mov	r4, r1
   b9d38:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b9d3a:	d104      	bne.n	b9d46 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9d3c:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   b9d3e:	4620      	mov	r0, r4
   b9d40:	f7ff ffb9 	bl	b9cb6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b9d44:	e022      	b.n	b9d8c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b9d46:	2b0a      	cmp	r3, #10
   b9d48:	d125      	bne.n	b9d96 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b9d4a:	2211      	movs	r2, #17
   b9d4c:	2100      	movs	r1, #0
   b9d4e:	a801      	add	r0, sp, #4
   b9d50:	f001 fba6 	bl	bb4a0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9d54:	68ab      	ldr	r3, [r5, #8]
   b9d56:	b303      	cbz	r3, b9d9a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9d58:	f105 0308 	add.w	r3, r5, #8
   b9d5c:	ae01      	add	r6, sp, #4
   b9d5e:	f105 0c18 	add.w	ip, r5, #24
   b9d62:	6818      	ldr	r0, [r3, #0]
   b9d64:	6859      	ldr	r1, [r3, #4]
   b9d66:	4632      	mov	r2, r6
   b9d68:	c203      	stmia	r2!, {r0, r1}
   b9d6a:	3308      	adds	r3, #8
   b9d6c:	4563      	cmp	r3, ip
   b9d6e:	4616      	mov	r6, r2
   b9d70:	d1f7      	bne.n	b9d62 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b9d72:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9d74:	a901      	add	r1, sp, #4
   b9d76:	a806      	add	r0, sp, #24
   b9d78:	ae07      	add	r6, sp, #28
            a.v = 6;
   b9d7a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9d7e:	f7fd feb3 	bl	b7ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9d82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9d84:	3404      	adds	r4, #4
   b9d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d88:	6833      	ldr	r3, [r6, #0]
   b9d8a:	7023      	strb	r3, [r4, #0]
        if (port) {
   b9d8c:	b11f      	cbz	r7, b9d96 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b9d8e:	8868      	ldrh	r0, [r5, #2]
   b9d90:	f7fc fe6a 	bl	b6a68 <inet_ntohs>
   b9d94:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b9d96:	b00d      	add	sp, #52	; 0x34
   b9d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9d9a:	68eb      	ldr	r3, [r5, #12]
   b9d9c:	2b00      	cmp	r3, #0
   b9d9e:	d1db      	bne.n	b9d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b9da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9da4:	692e      	ldr	r6, [r5, #16]
   b9da6:	f7fc fe57 	bl	b6a58 <inet_htonl>
   b9daa:	4286      	cmp	r6, r0
   b9dac:	d1d4      	bne.n	b9d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b9dae:	f105 0114 	add.w	r1, r5, #20
   b9db2:	e7c4      	b.n	b9d3e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b9db4 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b9db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9db8:	4617      	mov	r7, r2
   b9dba:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b9dbc:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b9dbe:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9dc0:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b9dc2:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9dc4:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b9dc6:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b9dc8:	f7fc fe66 	bl	b6a98 <netdb_getaddrinfo>
   b9dcc:	1e04      	subs	r4, r0, #0
   b9dce:	db20      	blt.n	b9e12 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b9dd0:	9b01      	ldr	r3, [sp, #4]
   b9dd2:	b32b      	cbz	r3, b9e20 <_ZN3UDP11beginPacketEPKct+0x6c>
   b9dd4:	695b      	ldr	r3, [r3, #20]
   b9dd6:	b31b      	cbz	r3, b9e20 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b9dd8:	a802      	add	r0, sp, #8
   b9dda:	f7fd fe77 	bl	b7acc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9dde:	9b01      	ldr	r3, [sp, #4]
   b9de0:	2200      	movs	r2, #0
   b9de2:	6958      	ldr	r0, [r3, #20]
   b9de4:	a902      	add	r1, sp, #8
   b9de6:	f7ff ffa1 	bl	b9d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b9dea:	a802      	add	r0, sp, #8
   b9dec:	f7fd fe8e 	bl	b7b0c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9df0:	b1b0      	cbz	r0, b9e20 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b9df2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9df4:	ad03      	add	r5, sp, #12
   b9df6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b9dfa:	4b0b      	ldr	r3, [pc, #44]	; (b9e28 <_ZN3UDP11beginPacketEPKct+0x74>)
   b9dfc:	9308      	str	r3, [sp, #32]
   b9dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e00:	ac09      	add	r4, sp, #36	; 0x24
   b9e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e04:	682b      	ldr	r3, [r5, #0]
   b9e06:	7023      	strb	r3, [r4, #0]
   b9e08:	463a      	mov	r2, r7
   b9e0a:	a908      	add	r1, sp, #32
   b9e0c:	4630      	mov	r0, r6
   b9e0e:	47c0      	blx	r8
   b9e10:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b9e12:	9801      	ldr	r0, [sp, #4]
   b9e14:	f7fc fe38 	bl	b6a88 <netdb_freeaddrinfo>
}
   b9e18:	4620      	mov	r0, r4
   b9e1a:	b00e      	add	sp, #56	; 0x38
   b9e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b9e20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9e24:	e7f5      	b.n	b9e12 <_ZN3UDP11beginPacketEPKct+0x5e>
   b9e26:	bf00      	nop
   b9e28:	000bdcf8 	.word	0x000bdcf8

000b9e2c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b9e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b9e30:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b9e34:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b9e38:	b090      	sub	sp, #64	; 0x40
   b9e3a:	4605      	mov	r5, r0
   b9e3c:	460e      	mov	r6, r1
   b9e3e:	4690      	mov	r8, r2
   b9e40:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b9e42:	db3c      	blt.n	b9ebe <_ZN3UDP13receivePacketEPhjm+0x92>
   b9e44:	2900      	cmp	r1, #0
   b9e46:	d03a      	beq.n	b9ebe <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b9e48:	f04f 0a1c 	mov.w	sl, #28
   b9e4c:	af09      	add	r7, sp, #36	; 0x24
   b9e4e:	4652      	mov	r2, sl
   b9e50:	2100      	movs	r1, #0
   b9e52:	4638      	mov	r0, r7
   b9e54:	f001 fb24 	bl	bb4a0 <memset>
        socklen_t slen = sizeof(saddr);
   b9e58:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b9e5c:	b1dc      	cbz	r4, b9e96 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b9e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9e62:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b9e66:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b9e6a:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b9e6c:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9e6e:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b9e70:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b9e74:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9e76:	9300      	str	r3, [sp, #0]
   b9e78:	f241 0206 	movw	r2, #4102	; 0x1006
   b9e7c:	446b      	add	r3, sp
   b9e7e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9e82:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b9e84:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b9e86:	f7fc fe17 	bl	b6ab8 <sock_setsockopt>
            if (ret) {
   b9e8a:	4604      	mov	r4, r0
   b9e8c:	b120      	cbz	r0, b9e98 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b9e8e:	4620      	mov	r0, r4
   b9e90:	b010      	add	sp, #64	; 0x40
   b9e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b9e96:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b9e98:	ab03      	add	r3, sp, #12
   b9e9a:	e9cd 7300 	strd	r7, r3, [sp]
   b9e9e:	6968      	ldr	r0, [r5, #20]
   b9ea0:	4623      	mov	r3, r4
   b9ea2:	4642      	mov	r2, r8
   b9ea4:	4631      	mov	r1, r6
   b9ea6:	f7fc fe27 	bl	b6af8 <sock_recvfrom>
        if (ret >= 0) {
   b9eaa:	1e04      	subs	r4, r0, #0
   b9eac:	dbef      	blt.n	b9e8e <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b9eae:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b9eb2:	f105 011c 	add.w	r1, r5, #28
   b9eb6:	4638      	mov	r0, r7
   b9eb8:	f7ff ff38 	bl	b9d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b9ebc:	e7e7      	b.n	b9e8e <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b9ebe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9ec2:	e7e4      	b.n	b9e8e <_ZN3UDP13receivePacketEPhjm+0x62>

000b9ec4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b9ec4:	b538      	push	{r3, r4, r5, lr}
   b9ec6:	4605      	mov	r5, r0
   b9ec8:	4614      	mov	r4, r2
    		return address.v;
   b9eca:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b9ecc:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b9ece:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b9ed0:	d110      	bne.n	b9ef4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b9ed2:	f640 231c 	movw	r3, #2588	; 0xa1c
   b9ed6:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b9ed8:	f7fc fdce 	bl	b6a78 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b9edc:	3408      	adds	r4, #8
   b9ede:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b9ee0:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b9ee4:	3514      	adds	r5, #20
   b9ee6:	f853 2b04 	ldr.w	r2, [r3], #4
   b9eea:	f844 2b04 	str.w	r2, [r4], #4
   b9eee:	42ab      	cmp	r3, r5
   b9ef0:	d1f9      	bne.n	b9ee6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b9ef2:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b9ef4:	2b04      	cmp	r3, #4
   b9ef6:	d1fc      	bne.n	b9ef2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b9ef8:	f44f 7304 	mov.w	r3, #528	; 0x210
   b9efc:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b9efe:	f7fc fdbb 	bl	b6a78 <inet_htons>
   b9f02:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b9f04:	6868      	ldr	r0, [r5, #4]
   b9f06:	f7fc fda7 	bl	b6a58 <inet_htonl>
   b9f0a:	6060      	str	r0, [r4, #4]
}
   b9f0c:	e7f1      	b.n	b9ef2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b9f0e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b9f0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9f12:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b9f14:	af03      	add	r7, sp, #12
   b9f16:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b9f1a:	4698      	mov	r8, r3
   b9f1c:	4604      	mov	r4, r0
   b9f1e:	460d      	mov	r5, r1
   b9f20:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b9f22:	2100      	movs	r1, #0
   b9f24:	464a      	mov	r2, r9
   b9f26:	4638      	mov	r0, r7
   b9f28:	f001 faba 	bl	bb4a0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b9f2c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b9f30:	463a      	mov	r2, r7
   b9f32:	4640      	mov	r0, r8
   b9f34:	f7ff ffc6 	bl	b9ec4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b9f38:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b9f3c:	b153      	cbz	r3, b9f54 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b9f3e:	e9cd 7900 	strd	r7, r9, [sp]
   b9f42:	6960      	ldr	r0, [r4, #20]
   b9f44:	2300      	movs	r3, #0
   b9f46:	4632      	mov	r2, r6
   b9f48:	4629      	mov	r1, r5
   b9f4a:	f7fc fde5 	bl	b6b18 <sock_sendto>
}
   b9f4e:	b00b      	add	sp, #44	; 0x2c
   b9f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b9f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9f58:	e7f9      	b.n	b9f4e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b9f5c <_ZN3UDPC1Ev>:
UDP::UDP()
   b9f5c:	b538      	push	{r3, r4, r5, lr}
   b9f5e:	2500      	movs	r5, #0
   b9f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9f64:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b9f68:	4b0b      	ldr	r3, [pc, #44]	; (b9f98 <_ZN3UDPC1Ev+0x3c>)
   b9f6a:	f103 0208 	add.w	r2, r3, #8
   b9f6e:	336c      	adds	r3, #108	; 0x6c
   b9f70:	6103      	str	r3, [r0, #16]
   b9f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   b9f76:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b9f78:	6002      	str	r2, [r0, #0]
   b9f7a:	6143      	str	r3, [r0, #20]
   b9f7c:	301c      	adds	r0, #28
   b9f7e:	f7fd fda5 	bl	b7acc <_ZN9IPAddressC1Ev>
   b9f82:	f44f 7300 	mov.w	r3, #512	; 0x200
   b9f86:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b9f8a:	86e5      	strh	r5, [r4, #54]	; 0x36
   b9f8c:	8725      	strh	r5, [r4, #56]	; 0x38
   b9f8e:	63e5      	str	r5, [r4, #60]	; 0x3c
   b9f90:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b9f94:	4620      	mov	r0, r4
   b9f96:	bd38      	pop	{r3, r4, r5, pc}
   b9f98:	000bdedc 	.word	0x000bdedc

000b9f9c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b9f9c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b9f9e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b9fa2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b9fa4:	b123      	cbz	r3, b9fb0 <_ZN3UDP13releaseBufferEv+0x14>
   b9fa6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b9fa8:	b110      	cbz	r0, b9fb0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b9faa:	2101      	movs	r1, #1
   b9fac:	f7fa f877 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b9fb0:	2300      	movs	r3, #0
   b9fb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b9fb4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b9fb8:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b9fba:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b9fbc:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b9fbe:	bd10      	pop	{r4, pc}

000b9fc0 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b9fc0:	b570      	push	{r4, r5, r6, lr}
   b9fc2:	4604      	mov	r4, r0
   b9fc4:	4616      	mov	r6, r2
   b9fc6:	460d      	mov	r5, r1
    releaseBuffer();
   b9fc8:	f7ff ffe8 	bl	b9f9c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b9fcc:	2300      	movs	r3, #0
    _buffer = buffer;
   b9fce:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b9fd0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b9fd2:	b12e      	cbz	r6, b9fe0 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b9fd4:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b9fd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b9fd8:	3800      	subs	r0, #0
   b9fda:	bf18      	it	ne
   b9fdc:	2001      	movne	r0, #1
   b9fde:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b9fe0:	2d00      	cmp	r5, #0
   b9fe2:	d0f8      	beq.n	b9fd6 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b9fe4:	4628      	mov	r0, r5
   b9fe6:	f7fa f858 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b9fea:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b9fec:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b9fee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b9ff2:	2800      	cmp	r0, #0
   b9ff4:	d0ef      	beq.n	b9fd6 <_ZN3UDP9setBufferEjPh+0x16>
   b9ff6:	e7ed      	b.n	b9fd4 <_ZN3UDP9setBufferEjPh+0x14>

000b9ff8 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b9ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ffa:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b9ffc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b9ffe:	4605      	mov	r5, r0
   ba000:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   ba002:	b91a      	cbnz	r2, ba00c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   ba004:	6c01      	ldr	r1, [r0, #64]	; 0x40
   ba006:	b109      	cbz	r1, ba00c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   ba008:	f7ff ffda 	bl	b9fc0 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   ba00c:	3404      	adds	r4, #4
   ba00e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba010:	f105 0620 	add.w	r6, r5, #32
   ba014:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   ba016:	6823      	ldr	r3, [r4, #0]
   ba018:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   ba01a:	2300      	movs	r3, #0
}
   ba01c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   ba01e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   ba020:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   ba022:	872b      	strh	r3, [r5, #56]	; 0x38
}
   ba024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba026 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   ba026:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   ba028:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   ba02a:	4604      	mov	r4, r0
   ba02c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   ba02e:	b92a      	cbnz	r2, ba03c <_ZN3UDP11parsePacketEm+0x16>
   ba030:	6c01      	ldr	r1, [r0, #64]	; 0x40
   ba032:	b119      	cbz	r1, ba03c <_ZN3UDP11parsePacketEm+0x16>
   ba034:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   ba036:	f7ff ffc3 	bl	b9fc0 <_ZN3UDP9setBufferEjPh>
   ba03a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   ba03c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   ba03e:	2200      	movs	r2, #0
   ba040:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   ba042:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   ba044:	b141      	cbz	r1, ba058 <_ZN3UDP11parsePacketEm+0x32>
   ba046:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba048:	b132      	cbz	r2, ba058 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   ba04a:	6820      	ldr	r0, [r4, #0]
   ba04c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   ba04e:	4620      	mov	r0, r4
   ba050:	47a8      	blx	r5
        if (result > 0) {
   ba052:	2800      	cmp	r0, #0
            _total = result;
   ba054:	bfc8      	it	gt
   ba056:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   ba058:	6823      	ldr	r3, [r4, #0]
   ba05a:	691b      	ldr	r3, [r3, #16]
   ba05c:	4620      	mov	r0, r4
}
   ba05e:	b003      	add	sp, #12
   ba060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   ba064:	4718      	bx	r3
	...

000ba068 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   ba068:	b510      	push	{r4, lr}
   ba06a:	4b07      	ldr	r3, [pc, #28]	; (ba088 <_ZN3UDPD1Ev+0x20>)
   ba06c:	f103 0208 	add.w	r2, r3, #8
   ba070:	336c      	adds	r3, #108	; 0x6c
   ba072:	4604      	mov	r4, r0
   ba074:	6002      	str	r2, [r0, #0]
   ba076:	6103      	str	r3, [r0, #16]
   ba078:	f7ff fddc 	bl	b9c34 <_ZN3UDP4stopEv>
   ba07c:	4620      	mov	r0, r4
   ba07e:	f7ff ff8d 	bl	b9f9c <_ZN3UDP13releaseBufferEv>
   ba082:	4620      	mov	r0, r4
   ba084:	bd10      	pop	{r4, pc}
   ba086:	bf00      	nop
   ba088:	000bdedc 	.word	0x000bdedc

000ba08c <_ZN3UDPD0Ev>:
   ba08c:	b510      	push	{r4, lr}
   ba08e:	4604      	mov	r4, r0
   ba090:	f7ff ffea 	bl	ba068 <_ZN3UDPD1Ev>
   ba094:	4620      	mov	r0, r4
   ba096:	214c      	movs	r1, #76	; 0x4c
   ba098:	f7fa f801 	bl	b409e <_ZdlPvj>
   ba09c:	4620      	mov	r0, r4
   ba09e:	bd10      	pop	{r4, pc}

000ba0a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba0a0:	4770      	bx	lr

000ba0a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba0a2:	7441      	strb	r1, [r0, #17]
}
   ba0a4:	4770      	bx	lr

000ba0a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba0a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba0a8:	7c00      	ldrb	r0, [r0, #16]
   ba0aa:	f7fc fdbd 	bl	b6c28 <hal_usart_available_data_for_write>
}
   ba0ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba0b2:	bd08      	pop	{r3, pc}

000ba0b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba0b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba0b6:	7c00      	ldrb	r0, [r0, #16]
   ba0b8:	f7fc fd8e 	bl	b6bd8 <hal_usart_available>
}
   ba0bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba0c0:	bd08      	pop	{r3, pc}

000ba0c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba0c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba0c4:	7c00      	ldrb	r0, [r0, #16]
   ba0c6:	f7fc fd97 	bl	b6bf8 <hal_usart_peek>
}
   ba0ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba0ce:	bd08      	pop	{r3, pc}

000ba0d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba0d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba0d2:	7c00      	ldrb	r0, [r0, #16]
   ba0d4:	f7fc fd88 	bl	b6be8 <hal_usart_read>
}
   ba0d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba0dc:	bd08      	pop	{r3, pc}

000ba0de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba0de:	7c00      	ldrb	r0, [r0, #16]
   ba0e0:	f7fc bd92 	b.w	b6c08 <hal_usart_flush>

000ba0e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba0e6:	7c45      	ldrb	r5, [r0, #17]
{
   ba0e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba0ea:	b12d      	cbz	r5, ba0f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba0ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba0ee:	b003      	add	sp, #12
   ba0f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba0f4:	f7fc bd68 	b.w	b6bc8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba0f8:	7c00      	ldrb	r0, [r0, #16]
   ba0fa:	9101      	str	r1, [sp, #4]
   ba0fc:	f7fc fd94 	bl	b6c28 <hal_usart_available_data_for_write>
   ba100:	2800      	cmp	r0, #0
   ba102:	9901      	ldr	r1, [sp, #4]
   ba104:	dcf2      	bgt.n	ba0ec <_ZN11USARTSerial5writeEh+0x8>
}
   ba106:	4628      	mov	r0, r5
   ba108:	b003      	add	sp, #12
   ba10a:	bd30      	pop	{r4, r5, pc}

000ba10c <_ZN11USARTSerialD0Ev>:
   ba10c:	b510      	push	{r4, lr}
   ba10e:	2114      	movs	r1, #20
   ba110:	4604      	mov	r4, r0
   ba112:	f7f9 ffc4 	bl	b409e <_ZdlPvj>
   ba116:	4620      	mov	r0, r4
   ba118:	bd10      	pop	{r4, pc}
	...

000ba11c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba11c:	b510      	push	{r4, lr}
   ba11e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba122:	4604      	mov	r4, r0
   ba124:	4608      	mov	r0, r1
   ba126:	4611      	mov	r1, r2
   ba128:	2200      	movs	r2, #0
   ba12a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba12e:	4b04      	ldr	r3, [pc, #16]	; (ba140 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba130:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba132:	2301      	movs	r3, #1
  _serial = serial;
   ba134:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba136:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba138:	f7fc fd86 	bl	b6c48 <hal_usart_init_ex>
}
   ba13c:	4620      	mov	r0, r4
   ba13e:	bd10      	pop	{r4, pc}
   ba140:	000bdf54 	.word	0x000bdf54

000ba144 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ba144:	7c00      	ldrb	r0, [r0, #16]
   ba146:	2300      	movs	r3, #0
   ba148:	f7fc bd76 	b.w	b6c38 <hal_usart_begin_config>

000ba14c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ba14c:	2200      	movs	r2, #0
   ba14e:	f7ff bff9 	b.w	ba144 <_ZN11USARTSerial5beginEmm>

000ba152 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ba152:	7c00      	ldrb	r0, [r0, #16]
   ba154:	f7fc bd30 	b.w	b6bb8 <hal_usart_end>

000ba158 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba158:	7441      	strb	r1, [r0, #17]
}
   ba15a:	4770      	bx	lr

000ba15c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba15c:	4770      	bx	lr

000ba15e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba15e:	4770      	bx	lr

000ba160 <_ZN9USBSerial4readEv>:
{
   ba160:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba162:	2100      	movs	r1, #0
   ba164:	7c00      	ldrb	r0, [r0, #16]
   ba166:	f7fc fd9f 	bl	b6ca8 <HAL_USB_USART_Receive_Data>
}
   ba16a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba16e:	bd08      	pop	{r3, pc}

000ba170 <_ZN9USBSerial4peekEv>:
{
   ba170:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba172:	2101      	movs	r1, #1
   ba174:	7c00      	ldrb	r0, [r0, #16]
   ba176:	f7fc fd97 	bl	b6ca8 <HAL_USB_USART_Receive_Data>
}
   ba17a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba17e:	bd08      	pop	{r3, pc}

000ba180 <_ZN9USBSerial17availableForWriteEv>:
{
   ba180:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba182:	7c00      	ldrb	r0, [r0, #16]
   ba184:	f7fc fd88 	bl	b6c98 <HAL_USB_USART_Available_Data_For_Write>
}
   ba188:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba18c:	bd08      	pop	{r3, pc}

000ba18e <_ZN9USBSerial9availableEv>:
{
   ba18e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba190:	7c00      	ldrb	r0, [r0, #16]
   ba192:	f7fc fd79 	bl	b6c88 <HAL_USB_USART_Available_Data>
}
   ba196:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba19a:	bd08      	pop	{r3, pc}

000ba19c <_ZN9USBSerial5writeEh>:
{
   ba19c:	b513      	push	{r0, r1, r4, lr}
   ba19e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba1a0:	7c00      	ldrb	r0, [r0, #16]
{
   ba1a2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba1a4:	f7fc fd78 	bl	b6c98 <HAL_USB_USART_Available_Data_For_Write>
   ba1a8:	2800      	cmp	r0, #0
   ba1aa:	9901      	ldr	r1, [sp, #4]
   ba1ac:	dc01      	bgt.n	ba1b2 <_ZN9USBSerial5writeEh+0x16>
   ba1ae:	7c60      	ldrb	r0, [r4, #17]
   ba1b0:	b120      	cbz	r0, ba1bc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba1b2:	7c20      	ldrb	r0, [r4, #16]
   ba1b4:	f7fc fd80 	bl	b6cb8 <HAL_USB_USART_Send_Data>
   ba1b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba1bc:	b002      	add	sp, #8
   ba1be:	bd10      	pop	{r4, pc}

000ba1c0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba1c0:	7c00      	ldrb	r0, [r0, #16]
   ba1c2:	f7fc bd81 	b.w	b6cc8 <HAL_USB_USART_Flush_Data>

000ba1c6 <_ZN9USBSerialD0Ev>:
   ba1c6:	b510      	push	{r4, lr}
   ba1c8:	2114      	movs	r1, #20
   ba1ca:	4604      	mov	r4, r0
   ba1cc:	f7f9 ff67 	bl	b409e <_ZdlPvj>
   ba1d0:	4620      	mov	r0, r4
   ba1d2:	bd10      	pop	{r4, pc}

000ba1d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba1d4:	b510      	push	{r4, lr}
   ba1d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba1da:	4604      	mov	r4, r0
   ba1dc:	4608      	mov	r0, r1
   ba1de:	2100      	movs	r1, #0
   ba1e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba1e4:	4b04      	ldr	r3, [pc, #16]	; (ba1f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba1e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba1e8:	2301      	movs	r3, #1
  _serial = serial;
   ba1ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba1ec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba1ee:	4611      	mov	r1, r2
   ba1f0:	f7fc fd32 	bl	b6c58 <HAL_USB_USART_Init>
}
   ba1f4:	4620      	mov	r0, r4
   ba1f6:	bd10      	pop	{r4, pc}
   ba1f8:	000bdf84 	.word	0x000bdf84

000ba1fc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba1fc:	7c00      	ldrb	r0, [r0, #16]
   ba1fe:	2200      	movs	r2, #0
   ba200:	f7fc bd32 	b.w	b6c68 <HAL_USB_USART_Begin>

000ba204 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ba204:	7c00      	ldrb	r0, [r0, #16]
   ba206:	f7fc bd37 	b.w	b6c78 <HAL_USB_USART_End>

000ba20a <_Z19acquireSerialBufferv>:
{
   ba20a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba20c:	2214      	movs	r2, #20
{
   ba20e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba210:	2100      	movs	r1, #0
   ba212:	f001 f945 	bl	bb4a0 <memset>
}
   ba216:	4620      	mov	r0, r4
   ba218:	bd10      	pop	{r4, pc}
	...

000ba21c <_Z16_fetch_usbserialv>:
{
   ba21c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba21e:	4c0f      	ldr	r4, [pc, #60]	; (ba25c <_Z16_fetch_usbserialv+0x40>)
{
   ba220:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba222:	a803      	add	r0, sp, #12
   ba224:	f7ff fff1 	bl	ba20a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba228:	7821      	ldrb	r1, [r4, #0]
   ba22a:	f3bf 8f5b 	dmb	ish
   ba22e:	f011 0101 	ands.w	r1, r1, #1
   ba232:	d10f      	bne.n	ba254 <_Z16_fetch_usbserialv+0x38>
   ba234:	4620      	mov	r0, r4
   ba236:	9101      	str	r1, [sp, #4]
   ba238:	f7f9 ff3e 	bl	b40b8 <__cxa_guard_acquire>
   ba23c:	9901      	ldr	r1, [sp, #4]
   ba23e:	b148      	cbz	r0, ba254 <_Z16_fetch_usbserialv+0x38>
   ba240:	aa03      	add	r2, sp, #12
   ba242:	4807      	ldr	r0, [pc, #28]	; (ba260 <_Z16_fetch_usbserialv+0x44>)
   ba244:	f7ff ffc6 	bl	ba1d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba248:	4620      	mov	r0, r4
   ba24a:	f7f9 ff3a 	bl	b40c2 <__cxa_guard_release>
   ba24e:	4805      	ldr	r0, [pc, #20]	; (ba264 <_Z16_fetch_usbserialv+0x48>)
   ba250:	f001 f8e8 	bl	bb424 <atexit>
	return _usbserial;
}
   ba254:	4802      	ldr	r0, [pc, #8]	; (ba260 <_Z16_fetch_usbserialv+0x44>)
   ba256:	b008      	add	sp, #32
   ba258:	bd10      	pop	{r4, pc}
   ba25a:	bf00      	nop
   ba25c:	2003e6f4 	.word	0x2003e6f4
   ba260:	2003e6f8 	.word	0x2003e6f8
   ba264:	000ba15d 	.word	0x000ba15d

000ba268 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba268:	4b01      	ldr	r3, [pc, #4]	; (ba270 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba26a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba26c:	4770      	bx	lr
   ba26e:	bf00      	nop
   ba270:	2003e13c 	.word	0x2003e13c

000ba274 <serialEventRun>:
{
   ba274:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba276:	4b0b      	ldr	r3, [pc, #44]	; (ba2a4 <serialEventRun+0x30>)
   ba278:	b143      	cbz	r3, ba28c <serialEventRun+0x18>
   ba27a:	f7ff ffcf 	bl	ba21c <_Z16_fetch_usbserialv>
   ba27e:	6803      	ldr	r3, [r0, #0]
   ba280:	691b      	ldr	r3, [r3, #16]
   ba282:	4798      	blx	r3
   ba284:	2800      	cmp	r0, #0
   ba286:	dd01      	ble.n	ba28c <serialEventRun+0x18>
        serialEvent();
   ba288:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba28c:	4b06      	ldr	r3, [pc, #24]	; (ba2a8 <serialEventRun+0x34>)
   ba28e:	b143      	cbz	r3, ba2a2 <serialEventRun+0x2e>
   ba290:	f000 f9ac 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   ba294:	6803      	ldr	r3, [r0, #0]
   ba296:	691b      	ldr	r3, [r3, #16]
   ba298:	4798      	blx	r3
   ba29a:	2800      	cmp	r0, #0
   ba29c:	dd01      	ble.n	ba2a2 <serialEventRun+0x2e>
        serialEvent1();
   ba29e:	f3af 8000 	nop.w
}
   ba2a2:	bd08      	pop	{r3, pc}
	...

000ba2ac <_post_loop>:
{
   ba2ac:	b508      	push	{r3, lr}
	serialEventRun();
   ba2ae:	f7ff ffe1 	bl	ba274 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba2b2:	f7fc fb31 	bl	b6918 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba2b6:	4b01      	ldr	r3, [pc, #4]	; (ba2bc <_post_loop+0x10>)
   ba2b8:	6018      	str	r0, [r3, #0]
}
   ba2ba:	bd08      	pop	{r3, pc}
   ba2bc:	2003e714 	.word	0x2003e714

000ba2c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2c0:	4805      	ldr	r0, [pc, #20]	; (ba2d8 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba2c2:	4a06      	ldr	r2, [pc, #24]	; (ba2dc <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba2c4:	4906      	ldr	r1, [pc, #24]	; (ba2e0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba2c6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2c8:	1a12      	subs	r2, r2, r0
   ba2ca:	f001 f8c1 	bl	bb450 <memcpy>
    __backup_sram_signature = signature;
   ba2ce:	4b05      	ldr	r3, [pc, #20]	; (ba2e4 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba2d0:	4a05      	ldr	r2, [pc, #20]	; (ba2e8 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba2d2:	601a      	str	r2, [r3, #0]
}
   ba2d4:	bd08      	pop	{r3, pc}
   ba2d6:	bf00      	nop
   ba2d8:	2003f400 	.word	0x2003f400
   ba2dc:	2003f404 	.word	0x2003f404
   ba2e0:	000be4e0 	.word	0x000be4e0
   ba2e4:	2003f400 	.word	0x2003f400
   ba2e8:	9a271c1e 	.word	0x9a271c1e

000ba2ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba2ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba2ee:	2300      	movs	r3, #0
   ba2f0:	9300      	str	r3, [sp, #0]
   ba2f2:	461a      	mov	r2, r3
   ba2f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba2f8:	f7fc fd4a 	bl	b6d90 <system_ctrl_set_result>
}
   ba2fc:	b003      	add	sp, #12
   ba2fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba304 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba304:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba306:	8843      	ldrh	r3, [r0, #2]
   ba308:	2b0a      	cmp	r3, #10
   ba30a:	d008      	beq.n	ba31e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba30c:	2b50      	cmp	r3, #80	; 0x50
   ba30e:	d10b      	bne.n	ba328 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba310:	4b09      	ldr	r3, [pc, #36]	; (ba338 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba312:	681b      	ldr	r3, [r3, #0]
   ba314:	b14b      	cbz	r3, ba32a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba316:	b003      	add	sp, #12
   ba318:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba31c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba31e:	f7ff ffe5 	bl	ba2ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba322:	b003      	add	sp, #12
   ba324:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba328:	2300      	movs	r3, #0
   ba32a:	9300      	str	r3, [sp, #0]
   ba32c:	461a      	mov	r2, r3
   ba32e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba332:	f7fc fd2d 	bl	b6d90 <system_ctrl_set_result>
}
   ba336:	e7f4      	b.n	ba322 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba338:	2003e710 	.word	0x2003e710

000ba33c <module_user_init_hook>:
{
   ba33c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba33e:	4812      	ldr	r0, [pc, #72]	; (ba388 <module_user_init_hook+0x4c>)
   ba340:	2100      	movs	r1, #0
   ba342:	f7fc fe07 	bl	b6f54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba346:	4b11      	ldr	r3, [pc, #68]	; (ba38c <module_user_init_hook+0x50>)
   ba348:	681a      	ldr	r2, [r3, #0]
   ba34a:	4b11      	ldr	r3, [pc, #68]	; (ba390 <module_user_init_hook+0x54>)
   ba34c:	429a      	cmp	r2, r3
   ba34e:	4b11      	ldr	r3, [pc, #68]	; (ba394 <module_user_init_hook+0x58>)
   ba350:	bf0c      	ite	eq
   ba352:	2201      	moveq	r2, #1
   ba354:	2200      	movne	r2, #0
   ba356:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba358:	d001      	beq.n	ba35e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba35a:	f7ff ffb1 	bl	ba2c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba35e:	f7fc facb 	bl	b68f8 <HAL_RNG_GetRandomNumber>
   ba362:	4604      	mov	r4, r0
    srand(seed);
   ba364:	f001 f8a4 	bl	bb4b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba368:	4b0b      	ldr	r3, [pc, #44]	; (ba398 <module_user_init_hook+0x5c>)
   ba36a:	b113      	cbz	r3, ba372 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba36c:	4620      	mov	r0, r4
   ba36e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba372:	2100      	movs	r1, #0
   ba374:	4808      	ldr	r0, [pc, #32]	; (ba398 <module_user_init_hook+0x5c>)
   ba376:	f7fc fd3d 	bl	b6df4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba37e:	4807      	ldr	r0, [pc, #28]	; (ba39c <module_user_init_hook+0x60>)
   ba380:	2100      	movs	r1, #0
   ba382:	f7fc bcfb 	b.w	b6d7c <system_ctrl_set_app_request_handler>
   ba386:	bf00      	nop
   ba388:	000ba269 	.word	0x000ba269
   ba38c:	2003f400 	.word	0x2003f400
   ba390:	9a271c1e 	.word	0x9a271c1e
   ba394:	2003e70c 	.word	0x2003e70c
   ba398:	00000000 	.word	0x00000000
   ba39c:	000ba305 	.word	0x000ba305

000ba3a0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   ba3a0:	b508      	push	{r3, lr}
   ba3a2:	4b02      	ldr	r3, [pc, #8]	; (ba3ac <spark_protocol_instance+0xc>)
   ba3a4:	681b      	ldr	r3, [r3, #0]
   ba3a6:	681b      	ldr	r3, [r3, #0]
   ba3a8:	9301      	str	r3, [sp, #4]
   ba3aa:	bd08      	pop	{r3, pc}
   ba3ac:	0003025c 	.word	0x0003025c

000ba3b0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   ba3b0:	b508      	push	{r3, lr}
   ba3b2:	4b02      	ldr	r3, [pc, #8]	; (ba3bc <spark_protocol_set_product_id+0xc>)
   ba3b4:	681b      	ldr	r3, [r3, #0]
   ba3b6:	685b      	ldr	r3, [r3, #4]
   ba3b8:	9301      	str	r3, [sp, #4]
   ba3ba:	bd08      	pop	{r3, pc}
   ba3bc:	0003025c 	.word	0x0003025c

000ba3c0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   ba3c0:	b508      	push	{r3, lr}
   ba3c2:	4b02      	ldr	r3, [pc, #8]	; (ba3cc <spark_protocol_set_product_firmware_version+0xc>)
   ba3c4:	681b      	ldr	r3, [r3, #0]
   ba3c6:	689b      	ldr	r3, [r3, #8]
   ba3c8:	9301      	str	r3, [sp, #4]
   ba3ca:	bd08      	pop	{r3, pc}
   ba3cc:	0003025c 	.word	0x0003025c

000ba3d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba3d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba3d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba3d4:	d902      	bls.n	ba3dc <pinAvailable+0xc>
    return false;
   ba3d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba3d8:	b002      	add	sp, #8
   ba3da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba3dc:	f1a0 030b 	sub.w	r3, r0, #11
   ba3e0:	2b02      	cmp	r3, #2
   ba3e2:	d81a      	bhi.n	ba41a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba3e4:	4c17      	ldr	r4, [pc, #92]	; (ba444 <pinAvailable+0x74>)
   ba3e6:	7821      	ldrb	r1, [r4, #0]
   ba3e8:	f3bf 8f5b 	dmb	ish
   ba3ec:	f011 0101 	ands.w	r1, r1, #1
   ba3f0:	d10b      	bne.n	ba40a <pinAvailable+0x3a>
   ba3f2:	4620      	mov	r0, r4
   ba3f4:	9101      	str	r1, [sp, #4]
   ba3f6:	f7f9 fe5f 	bl	b40b8 <__cxa_guard_acquire>
   ba3fa:	9901      	ldr	r1, [sp, #4]
   ba3fc:	b128      	cbz	r0, ba40a <pinAvailable+0x3a>
   ba3fe:	4812      	ldr	r0, [pc, #72]	; (ba448 <pinAvailable+0x78>)
   ba400:	f7fe ff3a 	bl	b9278 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba404:	4620      	mov	r0, r4
   ba406:	f7f9 fe5c 	bl	b40c2 <__cxa_guard_release>
   ba40a:	4b0f      	ldr	r3, [pc, #60]	; (ba448 <pinAvailable+0x78>)
   ba40c:	7818      	ldrb	r0, [r3, #0]
   ba40e:	f7fc fbab 	bl	b6b68 <hal_spi_is_enabled>
   ba412:	2800      	cmp	r0, #0
   ba414:	d1df      	bne.n	ba3d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba416:	2001      	movs	r0, #1
   ba418:	e7de      	b.n	ba3d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba41a:	2801      	cmp	r0, #1
   ba41c:	d809      	bhi.n	ba432 <pinAvailable+0x62>
   ba41e:	f000 f881 	bl	ba524 <_Z19__fetch_global_Wirev>
   ba422:	2100      	movs	r1, #0
   ba424:	7c00      	ldrb	r0, [r0, #16]
   ba426:	f7fc fadf 	bl	b69e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba42a:	f080 0001 	eor.w	r0, r0, #1
   ba42e:	b2c0      	uxtb	r0, r0
   ba430:	e7d2      	b.n	ba3d8 <pinAvailable+0x8>
   ba432:	3809      	subs	r0, #9
   ba434:	2801      	cmp	r0, #1
   ba436:	d8ee      	bhi.n	ba416 <pinAvailable+0x46>
   ba438:	f000 f8d8 	bl	ba5ec <_Z22__fetch_global_Serial1v>
   ba43c:	7c00      	ldrb	r0, [r0, #16]
   ba43e:	f7fc fbeb 	bl	b6c18 <hal_usart_is_enabled>
   ba442:	e7f2      	b.n	ba42a <pinAvailable+0x5a>
   ba444:	2003e4b0 	.word	0x2003e4b0
   ba448:	2003e4b4 	.word	0x2003e4b4

000ba44c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba44c:	2823      	cmp	r0, #35	; 0x23
{
   ba44e:	b538      	push	{r3, r4, r5, lr}
   ba450:	4604      	mov	r4, r0
   ba452:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba454:	d80a      	bhi.n	ba46c <pinMode+0x20>
   ba456:	29ff      	cmp	r1, #255	; 0xff
   ba458:	d008      	beq.n	ba46c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba45a:	f7ff ffb9 	bl	ba3d0 <pinAvailable>
   ba45e:	b128      	cbz	r0, ba46c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba460:	4629      	mov	r1, r5
   ba462:	4620      	mov	r0, r4
}
   ba464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba468:	f7fc ba5e 	b.w	b6928 <HAL_Pin_Mode>
}
   ba46c:	bd38      	pop	{r3, r4, r5, pc}

000ba46e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ba46e:	b538      	push	{r3, r4, r5, lr}
   ba470:	4604      	mov	r4, r0
   ba472:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ba474:	f7fc fa60 	bl	b6938 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba478:	28ff      	cmp	r0, #255	; 0xff
   ba47a:	d010      	beq.n	ba49e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba47c:	2806      	cmp	r0, #6
   ba47e:	d804      	bhi.n	ba48a <digitalWrite+0x1c>
   ba480:	234d      	movs	r3, #77	; 0x4d
   ba482:	fa23 f000 	lsr.w	r0, r3, r0
   ba486:	07c3      	lsls	r3, r0, #31
   ba488:	d409      	bmi.n	ba49e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba48a:	4620      	mov	r0, r4
   ba48c:	f7ff ffa0 	bl	ba3d0 <pinAvailable>
   ba490:	b128      	cbz	r0, ba49e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ba492:	4629      	mov	r1, r5
   ba494:	4620      	mov	r0, r4
}
   ba496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   ba49a:	f7fc ba55 	b.w	b6948 <HAL_GPIO_Write>
}
   ba49e:	bd38      	pop	{r3, r4, r5, pc}

000ba4a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   ba4a0:	b510      	push	{r4, lr}
   ba4a2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ba4a4:	f7fc fa48 	bl	b6938 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   ba4a8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   ba4aa:	b2db      	uxtb	r3, r3
   ba4ac:	2b01      	cmp	r3, #1
   ba4ae:	d908      	bls.n	ba4c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   ba4b0:	4620      	mov	r0, r4
   ba4b2:	f7ff ff8d 	bl	ba3d0 <pinAvailable>
   ba4b6:	b120      	cbz	r0, ba4c2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   ba4b8:	4620      	mov	r0, r4
}
   ba4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   ba4be:	f7fc ba4b 	b.w	b6958 <HAL_GPIO_Read>
}
   ba4c2:	2000      	movs	r0, #0
   ba4c4:	bd10      	pop	{r4, pc}

000ba4c6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4c6:	4770      	bx	lr

000ba4c8 <__tcf_1>:
   ba4c8:	4770      	bx	lr
	...

000ba4cc <_Z17acquireWireBufferv>:
{
   ba4cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba4ce:	2520      	movs	r5, #32
   ba4d0:	2314      	movs	r3, #20
{
   ba4d2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba4d4:	6003      	str	r3, [r0, #0]
   ba4d6:	6085      	str	r5, [r0, #8]
   ba4d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4da:	4906      	ldr	r1, [pc, #24]	; (ba4f4 <_Z17acquireWireBufferv+0x28>)
   ba4dc:	4628      	mov	r0, r5
   ba4de:	f000 f8ab 	bl	ba638 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4e2:	4904      	ldr	r1, [pc, #16]	; (ba4f4 <_Z17acquireWireBufferv+0x28>)
	};
   ba4e4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba4e6:	4628      	mov	r0, r5
   ba4e8:	f000 f8a6 	bl	ba638 <_ZnajRKSt9nothrow_t>
	};
   ba4ec:	60e0      	str	r0, [r4, #12]
}
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	bd38      	pop	{r3, r4, r5, pc}
   ba4f2:	bf00      	nop
   ba4f4:	000bdfac 	.word	0x000bdfac

000ba4f8 <_Z18acquireWire1Bufferv>:
   ba4f8:	b538      	push	{r3, r4, r5, lr}
   ba4fa:	2520      	movs	r5, #32
   ba4fc:	2314      	movs	r3, #20
   ba4fe:	4604      	mov	r4, r0
   ba500:	6003      	str	r3, [r0, #0]
   ba502:	6085      	str	r5, [r0, #8]
   ba504:	6105      	str	r5, [r0, #16]
   ba506:	4906      	ldr	r1, [pc, #24]	; (ba520 <_Z18acquireWire1Bufferv+0x28>)
   ba508:	4628      	mov	r0, r5
   ba50a:	f000 f895 	bl	ba638 <_ZnajRKSt9nothrow_t>
   ba50e:	4904      	ldr	r1, [pc, #16]	; (ba520 <_Z18acquireWire1Bufferv+0x28>)
   ba510:	6060      	str	r0, [r4, #4]
   ba512:	4628      	mov	r0, r5
   ba514:	f000 f890 	bl	ba638 <_ZnajRKSt9nothrow_t>
   ba518:	60e0      	str	r0, [r4, #12]
   ba51a:	4620      	mov	r0, r4
   ba51c:	bd38      	pop	{r3, r4, r5, pc}
   ba51e:	bf00      	nop
   ba520:	000bdfac 	.word	0x000bdfac

000ba524 <_Z19__fetch_global_Wirev>:
{
   ba524:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba526:	4d0e      	ldr	r5, [pc, #56]	; (ba560 <_Z19__fetch_global_Wirev+0x3c>)
   ba528:	7829      	ldrb	r1, [r5, #0]
   ba52a:	f3bf 8f5b 	dmb	ish
   ba52e:	f011 0401 	ands.w	r4, r1, #1
{
   ba532:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba534:	d111      	bne.n	ba55a <_Z19__fetch_global_Wirev+0x36>
   ba536:	4628      	mov	r0, r5
   ba538:	f7f9 fdbe 	bl	b40b8 <__cxa_guard_acquire>
   ba53c:	b168      	cbz	r0, ba55a <_Z19__fetch_global_Wirev+0x36>
   ba53e:	a801      	add	r0, sp, #4
   ba540:	f7ff ffc4 	bl	ba4cc <_Z17acquireWireBufferv>
   ba544:	aa01      	add	r2, sp, #4
   ba546:	4621      	mov	r1, r4
   ba548:	4806      	ldr	r0, [pc, #24]	; (ba564 <_Z19__fetch_global_Wirev+0x40>)
   ba54a:	f7fd fa0b 	bl	b7964 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba54e:	4628      	mov	r0, r5
   ba550:	f7f9 fdb7 	bl	b40c2 <__cxa_guard_release>
   ba554:	4804      	ldr	r0, [pc, #16]	; (ba568 <_Z19__fetch_global_Wirev+0x44>)
   ba556:	f000 ff65 	bl	bb424 <atexit>
	return wire;
}
   ba55a:	4802      	ldr	r0, [pc, #8]	; (ba564 <_Z19__fetch_global_Wirev+0x40>)
   ba55c:	b007      	add	sp, #28
   ba55e:	bd30      	pop	{r4, r5, pc}
   ba560:	2003e718 	.word	0x2003e718
   ba564:	2003e720 	.word	0x2003e720
   ba568:	000ba4c7 	.word	0x000ba4c7

000ba56c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   ba56c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ba56e:	4c0e      	ldr	r4, [pc, #56]	; (ba5a8 <_Z20__fetch_global_Wire1v+0x3c>)
   ba570:	7823      	ldrb	r3, [r4, #0]
   ba572:	f3bf 8f5b 	dmb	ish
   ba576:	07db      	lsls	r3, r3, #31
{
   ba578:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   ba57a:	d411      	bmi.n	ba5a0 <_Z20__fetch_global_Wire1v+0x34>
   ba57c:	4620      	mov	r0, r4
   ba57e:	f7f9 fd9b 	bl	b40b8 <__cxa_guard_acquire>
   ba582:	b168      	cbz	r0, ba5a0 <_Z20__fetch_global_Wire1v+0x34>
   ba584:	a801      	add	r0, sp, #4
   ba586:	f7ff ffb7 	bl	ba4f8 <_Z18acquireWire1Bufferv>
   ba58a:	aa01      	add	r2, sp, #4
   ba58c:	2101      	movs	r1, #1
   ba58e:	4807      	ldr	r0, [pc, #28]	; (ba5ac <_Z20__fetch_global_Wire1v+0x40>)
   ba590:	f7fd f9e8 	bl	b7964 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba594:	4620      	mov	r0, r4
   ba596:	f7f9 fd94 	bl	b40c2 <__cxa_guard_release>
   ba59a:	4805      	ldr	r0, [pc, #20]	; (ba5b0 <_Z20__fetch_global_Wire1v+0x44>)
   ba59c:	f000 ff42 	bl	bb424 <atexit>
	return wire;
}
   ba5a0:	4802      	ldr	r0, [pc, #8]	; (ba5ac <_Z20__fetch_global_Wire1v+0x40>)
   ba5a2:	b006      	add	sp, #24
   ba5a4:	bd10      	pop	{r4, pc}
   ba5a6:	bf00      	nop
   ba5a8:	2003e71c 	.word	0x2003e71c
   ba5ac:	2003e734 	.word	0x2003e734
   ba5b0:	000ba4c9 	.word	0x000ba4c9

000ba5b4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5b4:	4770      	bx	lr
	...

000ba5b8 <_Z20acquireSerial1Bufferv>:
{
   ba5b8:	b538      	push	{r3, r4, r5, lr}
   ba5ba:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba5bc:	2514      	movs	r5, #20
   ba5be:	462a      	mov	r2, r5
   ba5c0:	2100      	movs	r1, #0
   ba5c2:	f000 ff6d 	bl	bb4a0 <memset>
   ba5c6:	8025      	strh	r5, [r4, #0]
   ba5c8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5ca:	4907      	ldr	r1, [pc, #28]	; (ba5e8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba5cc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5ce:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba5d0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5d2:	f000 f831 	bl	ba638 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5d6:	4904      	ldr	r1, [pc, #16]	; (ba5e8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba5d8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5da:	4628      	mov	r0, r5
   ba5dc:	f000 f82c 	bl	ba638 <_ZnajRKSt9nothrow_t>
    };
   ba5e0:	60e0      	str	r0, [r4, #12]
}
   ba5e2:	4620      	mov	r0, r4
   ba5e4:	bd38      	pop	{r3, r4, r5, pc}
   ba5e6:	bf00      	nop
   ba5e8:	000bdfac 	.word	0x000bdfac

000ba5ec <_Z22__fetch_global_Serial1v>:
{
   ba5ec:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5ee:	4d0e      	ldr	r5, [pc, #56]	; (ba628 <_Z22__fetch_global_Serial1v+0x3c>)
   ba5f0:	7829      	ldrb	r1, [r5, #0]
   ba5f2:	f3bf 8f5b 	dmb	ish
   ba5f6:	f011 0401 	ands.w	r4, r1, #1
{
   ba5fa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5fc:	d111      	bne.n	ba622 <_Z22__fetch_global_Serial1v+0x36>
   ba5fe:	4628      	mov	r0, r5
   ba600:	f7f9 fd5a 	bl	b40b8 <__cxa_guard_acquire>
   ba604:	b168      	cbz	r0, ba622 <_Z22__fetch_global_Serial1v+0x36>
   ba606:	a801      	add	r0, sp, #4
   ba608:	f7ff ffd6 	bl	ba5b8 <_Z20acquireSerial1Bufferv>
   ba60c:	aa01      	add	r2, sp, #4
   ba60e:	4621      	mov	r1, r4
   ba610:	4806      	ldr	r0, [pc, #24]	; (ba62c <_Z22__fetch_global_Serial1v+0x40>)
   ba612:	f7ff fd83 	bl	ba11c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba616:	4628      	mov	r0, r5
   ba618:	f7f9 fd53 	bl	b40c2 <__cxa_guard_release>
   ba61c:	4804      	ldr	r0, [pc, #16]	; (ba630 <_Z22__fetch_global_Serial1v+0x44>)
   ba61e:	f000 ff01 	bl	bb424 <atexit>
    return serial1;
}
   ba622:	4802      	ldr	r0, [pc, #8]	; (ba62c <_Z22__fetch_global_Serial1v+0x40>)
   ba624:	b007      	add	sp, #28
   ba626:	bd30      	pop	{r4, r5, pc}
   ba628:	2003e748 	.word	0x2003e748
   ba62c:	2003e74c 	.word	0x2003e74c
   ba630:	000ba5b5 	.word	0x000ba5b5

000ba634 <_ZnwjRKSt9nothrow_t>:
   ba634:	f7f9 bd2f 	b.w	b4096 <_Znwj>

000ba638 <_ZnajRKSt9nothrow_t>:
   ba638:	f7f9 bd2f 	b.w	b409a <_Znaj>

000ba63c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   ba63c:	68c3      	ldr	r3, [r0, #12]
   ba63e:	689a      	ldr	r2, [r3, #8]
   ba640:	60c2      	str	r2, [r0, #12]
   ba642:	b510      	push	{r4, lr}
   ba644:	b102      	cbz	r2, ba648 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   ba646:	6050      	str	r0, [r2, #4]
   ba648:	6842      	ldr	r2, [r0, #4]
   ba64a:	605a      	str	r2, [r3, #4]
   ba64c:	680c      	ldr	r4, [r1, #0]
   ba64e:	4284      	cmp	r4, r0
   ba650:	d103      	bne.n	ba65a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   ba652:	600b      	str	r3, [r1, #0]
   ba654:	6098      	str	r0, [r3, #8]
   ba656:	6043      	str	r3, [r0, #4]
   ba658:	bd10      	pop	{r4, pc}
   ba65a:	6891      	ldr	r1, [r2, #8]
   ba65c:	4281      	cmp	r1, r0
   ba65e:	bf0c      	ite	eq
   ba660:	6093      	streq	r3, [r2, #8]
   ba662:	60d3      	strne	r3, [r2, #12]
   ba664:	e7f6      	b.n	ba654 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000ba666 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   ba666:	6883      	ldr	r3, [r0, #8]
   ba668:	68da      	ldr	r2, [r3, #12]
   ba66a:	6082      	str	r2, [r0, #8]
   ba66c:	b510      	push	{r4, lr}
   ba66e:	b102      	cbz	r2, ba672 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   ba670:	6050      	str	r0, [r2, #4]
   ba672:	6842      	ldr	r2, [r0, #4]
   ba674:	605a      	str	r2, [r3, #4]
   ba676:	680c      	ldr	r4, [r1, #0]
   ba678:	4284      	cmp	r4, r0
   ba67a:	d103      	bne.n	ba684 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   ba67c:	600b      	str	r3, [r1, #0]
   ba67e:	60d8      	str	r0, [r3, #12]
   ba680:	6043      	str	r3, [r0, #4]
   ba682:	bd10      	pop	{r4, pc}
   ba684:	68d1      	ldr	r1, [r2, #12]
   ba686:	4281      	cmp	r1, r0
   ba688:	bf0c      	ite	eq
   ba68a:	60d3      	streq	r3, [r2, #12]
   ba68c:	6093      	strne	r3, [r2, #8]
   ba68e:	e7f6      	b.n	ba67e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000ba690 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   ba690:	68c3      	ldr	r3, [r0, #12]
   ba692:	b123      	cbz	r3, ba69e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   ba694:	4618      	mov	r0, r3
   ba696:	689b      	ldr	r3, [r3, #8]
   ba698:	2b00      	cmp	r3, #0
   ba69a:	d1fb      	bne.n	ba694 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   ba69c:	4770      	bx	lr
   ba69e:	6843      	ldr	r3, [r0, #4]
   ba6a0:	68da      	ldr	r2, [r3, #12]
   ba6a2:	4282      	cmp	r2, r0
   ba6a4:	d102      	bne.n	ba6ac <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   ba6a6:	4618      	mov	r0, r3
   ba6a8:	685b      	ldr	r3, [r3, #4]
   ba6aa:	e7f9      	b.n	ba6a0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   ba6ac:	68c2      	ldr	r2, [r0, #12]
   ba6ae:	4293      	cmp	r3, r2
   ba6b0:	bf18      	it	ne
   ba6b2:	4618      	movne	r0, r3
   ba6b4:	4770      	bx	lr

000ba6b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   ba6b6:	7803      	ldrb	r3, [r0, #0]
   ba6b8:	b933      	cbnz	r3, ba6c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   ba6ba:	6843      	ldr	r3, [r0, #4]
   ba6bc:	685b      	ldr	r3, [r3, #4]
   ba6be:	4283      	cmp	r3, r0
   ba6c0:	d102      	bne.n	ba6c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   ba6c2:	68db      	ldr	r3, [r3, #12]
   ba6c4:	4618      	mov	r0, r3
   ba6c6:	4770      	bx	lr
   ba6c8:	6882      	ldr	r2, [r0, #8]
   ba6ca:	b122      	cbz	r2, ba6d6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   ba6cc:	4613      	mov	r3, r2
   ba6ce:	68d2      	ldr	r2, [r2, #12]
   ba6d0:	2a00      	cmp	r2, #0
   ba6d2:	d1fb      	bne.n	ba6cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   ba6d4:	e7f6      	b.n	ba6c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   ba6d6:	6843      	ldr	r3, [r0, #4]
   ba6d8:	689a      	ldr	r2, [r3, #8]
   ba6da:	4282      	cmp	r2, r0
   ba6dc:	d1f2      	bne.n	ba6c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   ba6de:	4618      	mov	r0, r3
   ba6e0:	685b      	ldr	r3, [r3, #4]
   ba6e2:	e7f9      	b.n	ba6d8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000ba6e4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   ba6e4:	f7ff bfd4 	b.w	ba690 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

000ba6e8 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   ba6e8:	f7ff bfe5 	b.w	ba6b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000ba6ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   ba6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba6f0:	461e      	mov	r6, r3
   ba6f2:	f103 0804 	add.w	r8, r3, #4
   ba6f6:	2300      	movs	r3, #0
   ba6f8:	e9c1 3302 	strd	r3, r3, [r1, #8]
   ba6fc:	460c      	mov	r4, r1
   ba6fe:	604a      	str	r2, [r1, #4]
   ba700:	700b      	strb	r3, [r1, #0]
   ba702:	b300      	cbz	r0, ba746 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   ba704:	4296      	cmp	r6, r2
   ba706:	6091      	str	r1, [r2, #8]
   ba708:	d118      	bne.n	ba73c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   ba70a:	6071      	str	r1, [r6, #4]
   ba70c:	60f4      	str	r4, [r6, #12]
   ba70e:	2701      	movs	r7, #1
   ba710:	f04f 0900 	mov.w	r9, #0
   ba714:	6873      	ldr	r3, [r6, #4]
   ba716:	42a3      	cmp	r3, r4
   ba718:	d03f      	beq.n	ba79a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   ba71a:	6860      	ldr	r0, [r4, #4]
   ba71c:	7802      	ldrb	r2, [r0, #0]
   ba71e:	2a00      	cmp	r2, #0
   ba720:	d13b      	bne.n	ba79a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   ba722:	6845      	ldr	r5, [r0, #4]
   ba724:	68ab      	ldr	r3, [r5, #8]
   ba726:	4298      	cmp	r0, r3
   ba728:	d123      	bne.n	ba772 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   ba72a:	68eb      	ldr	r3, [r5, #12]
   ba72c:	b183      	cbz	r3, ba750 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   ba72e:	781a      	ldrb	r2, [r3, #0]
   ba730:	b972      	cbnz	r2, ba750 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   ba732:	7007      	strb	r7, [r0, #0]
   ba734:	701f      	strb	r7, [r3, #0]
   ba736:	702a      	strb	r2, [r5, #0]
   ba738:	462c      	mov	r4, r5
   ba73a:	e7eb      	b.n	ba714 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   ba73c:	68b3      	ldr	r3, [r6, #8]
   ba73e:	4293      	cmp	r3, r2
   ba740:	d1e5      	bne.n	ba70e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba742:	60b1      	str	r1, [r6, #8]
   ba744:	e7e3      	b.n	ba70e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba746:	60d1      	str	r1, [r2, #12]
   ba748:	68f3      	ldr	r3, [r6, #12]
   ba74a:	4293      	cmp	r3, r2
   ba74c:	d1df      	bne.n	ba70e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ba74e:	e7dd      	b.n	ba70c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   ba750:	68c3      	ldr	r3, [r0, #12]
   ba752:	42a3      	cmp	r3, r4
   ba754:	d103      	bne.n	ba75e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   ba756:	4641      	mov	r1, r8
   ba758:	f7ff ff70 	bl	ba63c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ba75c:	4604      	mov	r4, r0
   ba75e:	6863      	ldr	r3, [r4, #4]
   ba760:	4641      	mov	r1, r8
   ba762:	701f      	strb	r7, [r3, #0]
   ba764:	4628      	mov	r0, r5
   ba766:	f885 9000 	strb.w	r9, [r5]
   ba76a:	f7ff ff7c 	bl	ba666 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ba76e:	4625      	mov	r5, r4
   ba770:	e7e2      	b.n	ba738 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   ba772:	b113      	cbz	r3, ba77a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   ba774:	781a      	ldrb	r2, [r3, #0]
   ba776:	2a00      	cmp	r2, #0
   ba778:	d0db      	beq.n	ba732 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   ba77a:	6883      	ldr	r3, [r0, #8]
   ba77c:	42a3      	cmp	r3, r4
   ba77e:	d103      	bne.n	ba788 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   ba780:	4641      	mov	r1, r8
   ba782:	f7ff ff70 	bl	ba666 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ba786:	4604      	mov	r4, r0
   ba788:	6863      	ldr	r3, [r4, #4]
   ba78a:	4641      	mov	r1, r8
   ba78c:	701f      	strb	r7, [r3, #0]
   ba78e:	4628      	mov	r0, r5
   ba790:	f885 9000 	strb.w	r9, [r5]
   ba794:	f7ff ff52 	bl	ba63c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ba798:	e7e9      	b.n	ba76e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   ba79a:	2201      	movs	r2, #1
   ba79c:	701a      	strb	r2, [r3, #0]
   ba79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000ba7a2 <_ZSt25__throw_bad_function_callv>:
   ba7a2:	b508      	push	{r3, lr}
   ba7a4:	f7fc fbb6 	bl	b6f14 <abort>

000ba7a8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba7a8:	4901      	ldr	r1, [pc, #4]	; (ba7b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba7aa:	f000 b8f9 	b.w	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba7ae:	bf00      	nop
   ba7b0:	000bdfc8 	.word	0x000bdfc8

000ba7b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba7b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba7b6:	2400      	movs	r4, #0
   ba7b8:	2310      	movs	r3, #16
   ba7ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba7be:	6803      	ldr	r3, [r0, #0]
   ba7c0:	4615      	mov	r5, r2
   ba7c2:	699e      	ldr	r6, [r3, #24]
   ba7c4:	6812      	ldr	r2, [r2, #0]
   ba7c6:	466b      	mov	r3, sp
   ba7c8:	e9cd 4400 	strd	r4, r4, [sp]
   ba7cc:	47b0      	blx	r6
   ba7ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba7d2:	f003 0306 	and.w	r3, r3, #6
   ba7d6:	2b06      	cmp	r3, #6
   ba7d8:	bf03      	ittte	eq
   ba7da:	9b00      	ldreq	r3, [sp, #0]
   ba7dc:	602b      	streq	r3, [r5, #0]
   ba7de:	2001      	moveq	r0, #1
   ba7e0:	4620      	movne	r0, r4
   ba7e2:	b004      	add	sp, #16
   ba7e4:	bd70      	pop	{r4, r5, r6, pc}

000ba7e6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba7e6:	9800      	ldr	r0, [sp, #0]
   ba7e8:	4290      	cmp	r0, r2
   ba7ea:	bf14      	ite	ne
   ba7ec:	2001      	movne	r0, #1
   ba7ee:	2006      	moveq	r0, #6
   ba7f0:	4770      	bx	lr
	...

000ba7f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba7f4:	b510      	push	{r4, lr}
   ba7f6:	4b03      	ldr	r3, [pc, #12]	; (ba804 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba7f8:	6003      	str	r3, [r0, #0]
   ba7fa:	4604      	mov	r4, r0
   ba7fc:	f000 f8cd 	bl	ba99a <_ZNSt9type_infoD1Ev>
   ba800:	4620      	mov	r0, r4
   ba802:	bd10      	pop	{r4, pc}
   ba804:	000be008 	.word	0x000be008

000ba808 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba808:	b510      	push	{r4, lr}
   ba80a:	4604      	mov	r4, r0
   ba80c:	f7ff fff2 	bl	ba7f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba810:	4620      	mov	r0, r4
   ba812:	2108      	movs	r1, #8
   ba814:	f7f9 fc43 	bl	b409e <_ZdlPvj>
   ba818:	4620      	mov	r0, r4
   ba81a:	bd10      	pop	{r4, pc}

000ba81c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba820:	461f      	mov	r7, r3
   ba822:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba826:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba82a:	4598      	cmp	r8, r3
   ba82c:	4606      	mov	r6, r0
   ba82e:	4615      	mov	r5, r2
   ba830:	d107      	bne.n	ba842 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba832:	9907      	ldr	r1, [sp, #28]
   ba834:	f000 f8b4 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba838:	b118      	cbz	r0, ba842 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba83a:	7165      	strb	r5, [r4, #5]
   ba83c:	2000      	movs	r0, #0
   ba83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba842:	4639      	mov	r1, r7
   ba844:	4630      	mov	r0, r6
   ba846:	f000 f8ab 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba84a:	2800      	cmp	r0, #0
   ba84c:	d0f6      	beq.n	ba83c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba84e:	2301      	movs	r3, #1
   ba850:	f8c4 8000 	str.w	r8, [r4]
   ba854:	7125      	strb	r5, [r4, #4]
   ba856:	71a3      	strb	r3, [r4, #6]
   ba858:	e7f0      	b.n	ba83c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba85a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba85a:	b538      	push	{r3, r4, r5, lr}
   ba85c:	4615      	mov	r5, r2
   ba85e:	461c      	mov	r4, r3
   ba860:	f000 f89e 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba864:	b120      	cbz	r0, ba870 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba866:	2308      	movs	r3, #8
   ba868:	60e3      	str	r3, [r4, #12]
   ba86a:	2306      	movs	r3, #6
   ba86c:	6025      	str	r5, [r4, #0]
   ba86e:	7123      	strb	r3, [r4, #4]
   ba870:	bd38      	pop	{r3, r4, r5, pc}

000ba872 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba872:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba874:	4605      	mov	r5, r0
   ba876:	460c      	mov	r4, r1
   ba878:	9201      	str	r2, [sp, #4]
   ba87a:	461e      	mov	r6, r3
   ba87c:	f000 f890 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba880:	b950      	cbnz	r0, ba898 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba882:	2e03      	cmp	r6, #3
   ba884:	d808      	bhi.n	ba898 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba886:	6823      	ldr	r3, [r4, #0]
   ba888:	9a01      	ldr	r2, [sp, #4]
   ba88a:	695b      	ldr	r3, [r3, #20]
   ba88c:	4629      	mov	r1, r5
   ba88e:	4620      	mov	r0, r4
   ba890:	b002      	add	sp, #8
   ba892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba896:	4718      	bx	r3
   ba898:	b002      	add	sp, #8
   ba89a:	bd70      	pop	{r4, r5, r6, pc}

000ba89c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba89c:	b510      	push	{r4, lr}
   ba89e:	4b03      	ldr	r3, [pc, #12]	; (ba8ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba8a0:	6003      	str	r3, [r0, #0]
   ba8a2:	4604      	mov	r4, r0
   ba8a4:	f7ff ffa6 	bl	ba7f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba8a8:	4620      	mov	r0, r4
   ba8aa:	bd10      	pop	{r4, pc}
   ba8ac:	000be068 	.word	0x000be068

000ba8b0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba8b0:	b510      	push	{r4, lr}
   ba8b2:	4604      	mov	r4, r0
   ba8b4:	f7ff fff2 	bl	ba89c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba8b8:	4620      	mov	r0, r4
   ba8ba:	210c      	movs	r1, #12
   ba8bc:	f7f9 fbef 	bl	b409e <_ZdlPvj>
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	bd10      	pop	{r4, pc}

000ba8c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba8c6:	9f08      	ldr	r7, [sp, #32]
   ba8c8:	4297      	cmp	r7, r2
   ba8ca:	4605      	mov	r5, r0
   ba8cc:	460e      	mov	r6, r1
   ba8ce:	4614      	mov	r4, r2
   ba8d0:	d00a      	beq.n	ba8e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba8d2:	68a8      	ldr	r0, [r5, #8]
   ba8d4:	6802      	ldr	r2, [r0, #0]
   ba8d6:	9708      	str	r7, [sp, #32]
   ba8d8:	6a15      	ldr	r5, [r2, #32]
   ba8da:	4631      	mov	r1, r6
   ba8dc:	4622      	mov	r2, r4
   ba8de:	46ac      	mov	ip, r5
   ba8e0:	b003      	add	sp, #12
   ba8e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba8e6:	4760      	bx	ip
   ba8e8:	4619      	mov	r1, r3
   ba8ea:	9301      	str	r3, [sp, #4]
   ba8ec:	f000 f858 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba8f0:	9b01      	ldr	r3, [sp, #4]
   ba8f2:	2800      	cmp	r0, #0
   ba8f4:	d0ed      	beq.n	ba8d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba8f6:	2006      	movs	r0, #6
   ba8f8:	b003      	add	sp, #12
   ba8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba8fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba8fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba900:	460d      	mov	r5, r1
   ba902:	4619      	mov	r1, r3
   ba904:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba908:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba90c:	4681      	mov	r9, r0
   ba90e:	4617      	mov	r7, r2
   ba910:	4698      	mov	r8, r3
   ba912:	f000 f845 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba916:	b190      	cbz	r0, ba93e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba918:	2d00      	cmp	r5, #0
   ba91a:	6034      	str	r4, [r6, #0]
   ba91c:	7137      	strb	r7, [r6, #4]
   ba91e:	db09      	blt.n	ba934 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba920:	1961      	adds	r1, r4, r5
   ba922:	458a      	cmp	sl, r1
   ba924:	bf0c      	ite	eq
   ba926:	2106      	moveq	r1, #6
   ba928:	2101      	movne	r1, #1
   ba92a:	71b1      	strb	r1, [r6, #6]
   ba92c:	2000      	movs	r0, #0
   ba92e:	b001      	add	sp, #4
   ba930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba934:	3502      	adds	r5, #2
   ba936:	d1f9      	bne.n	ba92c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba938:	2301      	movs	r3, #1
   ba93a:	71b3      	strb	r3, [r6, #6]
   ba93c:	e7f6      	b.n	ba92c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba93e:	4554      	cmp	r4, sl
   ba940:	d106      	bne.n	ba950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba942:	4659      	mov	r1, fp
   ba944:	4648      	mov	r0, r9
   ba946:	f000 f82b 	bl	ba9a0 <_ZNKSt9type_infoeqERKS_>
   ba94a:	b108      	cbz	r0, ba950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba94c:	7177      	strb	r7, [r6, #5]
   ba94e:	e7ed      	b.n	ba92c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba950:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba954:	6803      	ldr	r3, [r0, #0]
   ba956:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba95a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba95e:	69dc      	ldr	r4, [r3, #28]
   ba960:	463a      	mov	r2, r7
   ba962:	4643      	mov	r3, r8
   ba964:	4629      	mov	r1, r5
   ba966:	46a4      	mov	ip, r4
   ba968:	b001      	add	sp, #4
   ba96a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba96e:	4760      	bx	ip

000ba970 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba974:	4607      	mov	r7, r0
   ba976:	460c      	mov	r4, r1
   ba978:	4615      	mov	r5, r2
   ba97a:	461e      	mov	r6, r3
   ba97c:	f7ff ff6d 	bl	ba85a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba980:	b948      	cbnz	r0, ba996 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba982:	68b8      	ldr	r0, [r7, #8]
   ba984:	6803      	ldr	r3, [r0, #0]
   ba986:	699f      	ldr	r7, [r3, #24]
   ba988:	462a      	mov	r2, r5
   ba98a:	4633      	mov	r3, r6
   ba98c:	4621      	mov	r1, r4
   ba98e:	46bc      	mov	ip, r7
   ba990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba994:	4760      	bx	ip
   ba996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba99a <_ZNSt9type_infoD1Ev>:
   ba99a:	4770      	bx	lr

000ba99c <_ZNKSt9type_info14__is_pointer_pEv>:
   ba99c:	2000      	movs	r0, #0
   ba99e:	4770      	bx	lr

000ba9a0 <_ZNKSt9type_infoeqERKS_>:
   ba9a0:	4281      	cmp	r1, r0
   ba9a2:	b508      	push	{r3, lr}
   ba9a4:	d00e      	beq.n	ba9c4 <_ZNKSt9type_infoeqERKS_+0x24>
   ba9a6:	6840      	ldr	r0, [r0, #4]
   ba9a8:	7803      	ldrb	r3, [r0, #0]
   ba9aa:	2b2a      	cmp	r3, #42	; 0x2a
   ba9ac:	d00c      	beq.n	ba9c8 <_ZNKSt9type_infoeqERKS_+0x28>
   ba9ae:	6849      	ldr	r1, [r1, #4]
   ba9b0:	780b      	ldrb	r3, [r1, #0]
   ba9b2:	2b2a      	cmp	r3, #42	; 0x2a
   ba9b4:	bf08      	it	eq
   ba9b6:	3101      	addeq	r1, #1
   ba9b8:	f000 fdbf 	bl	bb53a <strcmp>
   ba9bc:	fab0 f080 	clz	r0, r0
   ba9c0:	0940      	lsrs	r0, r0, #5
   ba9c2:	bd08      	pop	{r3, pc}
   ba9c4:	2001      	movs	r0, #1
   ba9c6:	e7fc      	b.n	ba9c2 <_ZNKSt9type_infoeqERKS_+0x22>
   ba9c8:	2000      	movs	r0, #0
   ba9ca:	e7fa      	b.n	ba9c2 <_ZNKSt9type_infoeqERKS_+0x22>
   ba9cc:	0000      	movs	r0, r0
	...

000ba9d0 <nan>:
   ba9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba9d8 <nan+0x8>
   ba9d4:	4770      	bx	lr
   ba9d6:	bf00      	nop
   ba9d8:	00000000 	.word	0x00000000
   ba9dc:	7ff80000 	.word	0x7ff80000

000ba9e0 <__aeabi_drsub>:
   ba9e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba9e4:	e002      	b.n	ba9ec <__adddf3>
   ba9e6:	bf00      	nop

000ba9e8 <__aeabi_dsub>:
   ba9e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba9ec <__adddf3>:
   ba9ec:	b530      	push	{r4, r5, lr}
   ba9ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba9f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba9f6:	ea94 0f05 	teq	r4, r5
   ba9fa:	bf08      	it	eq
   ba9fc:	ea90 0f02 	teqeq	r0, r2
   baa00:	bf1f      	itttt	ne
   baa02:	ea54 0c00 	orrsne.w	ip, r4, r0
   baa06:	ea55 0c02 	orrsne.w	ip, r5, r2
   baa0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   baa0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baa12:	f000 80e2 	beq.w	babda <__adddf3+0x1ee>
   baa16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   baa1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   baa1e:	bfb8      	it	lt
   baa20:	426d      	neglt	r5, r5
   baa22:	dd0c      	ble.n	baa3e <__adddf3+0x52>
   baa24:	442c      	add	r4, r5
   baa26:	ea80 0202 	eor.w	r2, r0, r2
   baa2a:	ea81 0303 	eor.w	r3, r1, r3
   baa2e:	ea82 0000 	eor.w	r0, r2, r0
   baa32:	ea83 0101 	eor.w	r1, r3, r1
   baa36:	ea80 0202 	eor.w	r2, r0, r2
   baa3a:	ea81 0303 	eor.w	r3, r1, r3
   baa3e:	2d36      	cmp	r5, #54	; 0x36
   baa40:	bf88      	it	hi
   baa42:	bd30      	pophi	{r4, r5, pc}
   baa44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   baa48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   baa4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   baa50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   baa54:	d002      	beq.n	baa5c <__adddf3+0x70>
   baa56:	4240      	negs	r0, r0
   baa58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   baa60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   baa64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   baa68:	d002      	beq.n	baa70 <__adddf3+0x84>
   baa6a:	4252      	negs	r2, r2
   baa6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   baa70:	ea94 0f05 	teq	r4, r5
   baa74:	f000 80a7 	beq.w	babc6 <__adddf3+0x1da>
   baa78:	f1a4 0401 	sub.w	r4, r4, #1
   baa7c:	f1d5 0e20 	rsbs	lr, r5, #32
   baa80:	db0d      	blt.n	baa9e <__adddf3+0xb2>
   baa82:	fa02 fc0e 	lsl.w	ip, r2, lr
   baa86:	fa22 f205 	lsr.w	r2, r2, r5
   baa8a:	1880      	adds	r0, r0, r2
   baa8c:	f141 0100 	adc.w	r1, r1, #0
   baa90:	fa03 f20e 	lsl.w	r2, r3, lr
   baa94:	1880      	adds	r0, r0, r2
   baa96:	fa43 f305 	asr.w	r3, r3, r5
   baa9a:	4159      	adcs	r1, r3
   baa9c:	e00e      	b.n	baabc <__adddf3+0xd0>
   baa9e:	f1a5 0520 	sub.w	r5, r5, #32
   baaa2:	f10e 0e20 	add.w	lr, lr, #32
   baaa6:	2a01      	cmp	r2, #1
   baaa8:	fa03 fc0e 	lsl.w	ip, r3, lr
   baaac:	bf28      	it	cs
   baaae:	f04c 0c02 	orrcs.w	ip, ip, #2
   baab2:	fa43 f305 	asr.w	r3, r3, r5
   baab6:	18c0      	adds	r0, r0, r3
   baab8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   baabc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baac0:	d507      	bpl.n	baad2 <__adddf3+0xe6>
   baac2:	f04f 0e00 	mov.w	lr, #0
   baac6:	f1dc 0c00 	rsbs	ip, ip, #0
   baaca:	eb7e 0000 	sbcs.w	r0, lr, r0
   baace:	eb6e 0101 	sbc.w	r1, lr, r1
   baad2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   baad6:	d31b      	bcc.n	bab10 <__adddf3+0x124>
   baad8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   baadc:	d30c      	bcc.n	baaf8 <__adddf3+0x10c>
   baade:	0849      	lsrs	r1, r1, #1
   baae0:	ea5f 0030 	movs.w	r0, r0, rrx
   baae4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   baae8:	f104 0401 	add.w	r4, r4, #1
   baaec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   baaf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   baaf4:	f080 809a 	bcs.w	bac2c <__adddf3+0x240>
   baaf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   baafc:	bf08      	it	eq
   baafe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bab02:	f150 0000 	adcs.w	r0, r0, #0
   bab06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bab0a:	ea41 0105 	orr.w	r1, r1, r5
   bab0e:	bd30      	pop	{r4, r5, pc}
   bab10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bab14:	4140      	adcs	r0, r0
   bab16:	eb41 0101 	adc.w	r1, r1, r1
   bab1a:	3c01      	subs	r4, #1
   bab1c:	bf28      	it	cs
   bab1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bab22:	d2e9      	bcs.n	baaf8 <__adddf3+0x10c>
   bab24:	f091 0f00 	teq	r1, #0
   bab28:	bf04      	itt	eq
   bab2a:	4601      	moveq	r1, r0
   bab2c:	2000      	moveq	r0, #0
   bab2e:	fab1 f381 	clz	r3, r1
   bab32:	bf08      	it	eq
   bab34:	3320      	addeq	r3, #32
   bab36:	f1a3 030b 	sub.w	r3, r3, #11
   bab3a:	f1b3 0220 	subs.w	r2, r3, #32
   bab3e:	da0c      	bge.n	bab5a <__adddf3+0x16e>
   bab40:	320c      	adds	r2, #12
   bab42:	dd08      	ble.n	bab56 <__adddf3+0x16a>
   bab44:	f102 0c14 	add.w	ip, r2, #20
   bab48:	f1c2 020c 	rsb	r2, r2, #12
   bab4c:	fa01 f00c 	lsl.w	r0, r1, ip
   bab50:	fa21 f102 	lsr.w	r1, r1, r2
   bab54:	e00c      	b.n	bab70 <__adddf3+0x184>
   bab56:	f102 0214 	add.w	r2, r2, #20
   bab5a:	bfd8      	it	le
   bab5c:	f1c2 0c20 	rsble	ip, r2, #32
   bab60:	fa01 f102 	lsl.w	r1, r1, r2
   bab64:	fa20 fc0c 	lsr.w	ip, r0, ip
   bab68:	bfdc      	itt	le
   bab6a:	ea41 010c 	orrle.w	r1, r1, ip
   bab6e:	4090      	lslle	r0, r2
   bab70:	1ae4      	subs	r4, r4, r3
   bab72:	bfa2      	ittt	ge
   bab74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bab78:	4329      	orrge	r1, r5
   bab7a:	bd30      	popge	{r4, r5, pc}
   bab7c:	ea6f 0404 	mvn.w	r4, r4
   bab80:	3c1f      	subs	r4, #31
   bab82:	da1c      	bge.n	babbe <__adddf3+0x1d2>
   bab84:	340c      	adds	r4, #12
   bab86:	dc0e      	bgt.n	baba6 <__adddf3+0x1ba>
   bab88:	f104 0414 	add.w	r4, r4, #20
   bab8c:	f1c4 0220 	rsb	r2, r4, #32
   bab90:	fa20 f004 	lsr.w	r0, r0, r4
   bab94:	fa01 f302 	lsl.w	r3, r1, r2
   bab98:	ea40 0003 	orr.w	r0, r0, r3
   bab9c:	fa21 f304 	lsr.w	r3, r1, r4
   baba0:	ea45 0103 	orr.w	r1, r5, r3
   baba4:	bd30      	pop	{r4, r5, pc}
   baba6:	f1c4 040c 	rsb	r4, r4, #12
   babaa:	f1c4 0220 	rsb	r2, r4, #32
   babae:	fa20 f002 	lsr.w	r0, r0, r2
   babb2:	fa01 f304 	lsl.w	r3, r1, r4
   babb6:	ea40 0003 	orr.w	r0, r0, r3
   babba:	4629      	mov	r1, r5
   babbc:	bd30      	pop	{r4, r5, pc}
   babbe:	fa21 f004 	lsr.w	r0, r1, r4
   babc2:	4629      	mov	r1, r5
   babc4:	bd30      	pop	{r4, r5, pc}
   babc6:	f094 0f00 	teq	r4, #0
   babca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   babce:	bf06      	itte	eq
   babd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   babd4:	3401      	addeq	r4, #1
   babd6:	3d01      	subne	r5, #1
   babd8:	e74e      	b.n	baa78 <__adddf3+0x8c>
   babda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   babde:	bf18      	it	ne
   babe0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   babe4:	d029      	beq.n	bac3a <__adddf3+0x24e>
   babe6:	ea94 0f05 	teq	r4, r5
   babea:	bf08      	it	eq
   babec:	ea90 0f02 	teqeq	r0, r2
   babf0:	d005      	beq.n	babfe <__adddf3+0x212>
   babf2:	ea54 0c00 	orrs.w	ip, r4, r0
   babf6:	bf04      	itt	eq
   babf8:	4619      	moveq	r1, r3
   babfa:	4610      	moveq	r0, r2
   babfc:	bd30      	pop	{r4, r5, pc}
   babfe:	ea91 0f03 	teq	r1, r3
   bac02:	bf1e      	ittt	ne
   bac04:	2100      	movne	r1, #0
   bac06:	2000      	movne	r0, #0
   bac08:	bd30      	popne	{r4, r5, pc}
   bac0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bac0e:	d105      	bne.n	bac1c <__adddf3+0x230>
   bac10:	0040      	lsls	r0, r0, #1
   bac12:	4149      	adcs	r1, r1
   bac14:	bf28      	it	cs
   bac16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bac1a:	bd30      	pop	{r4, r5, pc}
   bac1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bac20:	bf3c      	itt	cc
   bac22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bac26:	bd30      	popcc	{r4, r5, pc}
   bac28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bac2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bac30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bac34:	f04f 0000 	mov.w	r0, #0
   bac38:	bd30      	pop	{r4, r5, pc}
   bac3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bac3e:	bf1a      	itte	ne
   bac40:	4619      	movne	r1, r3
   bac42:	4610      	movne	r0, r2
   bac44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bac48:	bf1c      	itt	ne
   bac4a:	460b      	movne	r3, r1
   bac4c:	4602      	movne	r2, r0
   bac4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bac52:	bf06      	itte	eq
   bac54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bac58:	ea91 0f03 	teqeq	r1, r3
   bac5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bac60:	bd30      	pop	{r4, r5, pc}
   bac62:	bf00      	nop

000bac64 <__aeabi_ui2d>:
   bac64:	f090 0f00 	teq	r0, #0
   bac68:	bf04      	itt	eq
   bac6a:	2100      	moveq	r1, #0
   bac6c:	4770      	bxeq	lr
   bac6e:	b530      	push	{r4, r5, lr}
   bac70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bac74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bac78:	f04f 0500 	mov.w	r5, #0
   bac7c:	f04f 0100 	mov.w	r1, #0
   bac80:	e750      	b.n	bab24 <__adddf3+0x138>
   bac82:	bf00      	nop

000bac84 <__aeabi_i2d>:
   bac84:	f090 0f00 	teq	r0, #0
   bac88:	bf04      	itt	eq
   bac8a:	2100      	moveq	r1, #0
   bac8c:	4770      	bxeq	lr
   bac8e:	b530      	push	{r4, r5, lr}
   bac90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bac94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bac98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bac9c:	bf48      	it	mi
   bac9e:	4240      	negmi	r0, r0
   baca0:	f04f 0100 	mov.w	r1, #0
   baca4:	e73e      	b.n	bab24 <__adddf3+0x138>
   baca6:	bf00      	nop

000baca8 <__aeabi_f2d>:
   baca8:	0042      	lsls	r2, r0, #1
   bacaa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bacae:	ea4f 0131 	mov.w	r1, r1, rrx
   bacb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bacb6:	bf1f      	itttt	ne
   bacb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bacbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bacc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bacc4:	4770      	bxne	lr
   bacc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bacca:	bf08      	it	eq
   baccc:	4770      	bxeq	lr
   bacce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bacd2:	bf04      	itt	eq
   bacd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bacd8:	4770      	bxeq	lr
   bacda:	b530      	push	{r4, r5, lr}
   bacdc:	f44f 7460 	mov.w	r4, #896	; 0x380
   bace0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bace4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bace8:	e71c      	b.n	bab24 <__adddf3+0x138>
   bacea:	bf00      	nop

000bacec <__aeabi_ul2d>:
   bacec:	ea50 0201 	orrs.w	r2, r0, r1
   bacf0:	bf08      	it	eq
   bacf2:	4770      	bxeq	lr
   bacf4:	b530      	push	{r4, r5, lr}
   bacf6:	f04f 0500 	mov.w	r5, #0
   bacfa:	e00a      	b.n	bad12 <__aeabi_l2d+0x16>

000bacfc <__aeabi_l2d>:
   bacfc:	ea50 0201 	orrs.w	r2, r0, r1
   bad00:	bf08      	it	eq
   bad02:	4770      	bxeq	lr
   bad04:	b530      	push	{r4, r5, lr}
   bad06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bad0a:	d502      	bpl.n	bad12 <__aeabi_l2d+0x16>
   bad0c:	4240      	negs	r0, r0
   bad0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bad12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bad16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bad1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bad1e:	f43f aed8 	beq.w	baad2 <__adddf3+0xe6>
   bad22:	f04f 0203 	mov.w	r2, #3
   bad26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bad2a:	bf18      	it	ne
   bad2c:	3203      	addne	r2, #3
   bad2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bad32:	bf18      	it	ne
   bad34:	3203      	addne	r2, #3
   bad36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bad3a:	f1c2 0320 	rsb	r3, r2, #32
   bad3e:	fa00 fc03 	lsl.w	ip, r0, r3
   bad42:	fa20 f002 	lsr.w	r0, r0, r2
   bad46:	fa01 fe03 	lsl.w	lr, r1, r3
   bad4a:	ea40 000e 	orr.w	r0, r0, lr
   bad4e:	fa21 f102 	lsr.w	r1, r1, r2
   bad52:	4414      	add	r4, r2
   bad54:	e6bd      	b.n	baad2 <__adddf3+0xe6>
   bad56:	bf00      	nop

000bad58 <__aeabi_dmul>:
   bad58:	b570      	push	{r4, r5, r6, lr}
   bad5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad66:	bf1d      	ittte	ne
   bad68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad6c:	ea94 0f0c 	teqne	r4, ip
   bad70:	ea95 0f0c 	teqne	r5, ip
   bad74:	f000 f8de 	bleq	baf34 <__aeabi_dmul+0x1dc>
   bad78:	442c      	add	r4, r5
   bad7a:	ea81 0603 	eor.w	r6, r1, r3
   bad7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bad82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bad86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bad8a:	bf18      	it	ne
   bad8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bad90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bad94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bad98:	d038      	beq.n	bae0c <__aeabi_dmul+0xb4>
   bad9a:	fba0 ce02 	umull	ip, lr, r0, r2
   bad9e:	f04f 0500 	mov.w	r5, #0
   bada2:	fbe1 e502 	umlal	lr, r5, r1, r2
   bada6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   badaa:	fbe0 e503 	umlal	lr, r5, r0, r3
   badae:	f04f 0600 	mov.w	r6, #0
   badb2:	fbe1 5603 	umlal	r5, r6, r1, r3
   badb6:	f09c 0f00 	teq	ip, #0
   badba:	bf18      	it	ne
   badbc:	f04e 0e01 	orrne.w	lr, lr, #1
   badc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   badc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   badc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   badcc:	d204      	bcs.n	badd8 <__aeabi_dmul+0x80>
   badce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   badd2:	416d      	adcs	r5, r5
   badd4:	eb46 0606 	adc.w	r6, r6, r6
   badd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   baddc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bade0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bade4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bade8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   badec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   badf0:	bf88      	it	hi
   badf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   badf6:	d81e      	bhi.n	bae36 <__aeabi_dmul+0xde>
   badf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   badfc:	bf08      	it	eq
   badfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bae02:	f150 0000 	adcs.w	r0, r0, #0
   bae06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae0a:	bd70      	pop	{r4, r5, r6, pc}
   bae0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bae10:	ea46 0101 	orr.w	r1, r6, r1
   bae14:	ea40 0002 	orr.w	r0, r0, r2
   bae18:	ea81 0103 	eor.w	r1, r1, r3
   bae1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bae20:	bfc2      	ittt	gt
   bae22:	ebd4 050c 	rsbsgt	r5, r4, ip
   bae26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bae2a:	bd70      	popgt	{r4, r5, r6, pc}
   bae2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae30:	f04f 0e00 	mov.w	lr, #0
   bae34:	3c01      	subs	r4, #1
   bae36:	f300 80ab 	bgt.w	baf90 <__aeabi_dmul+0x238>
   bae3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bae3e:	bfde      	ittt	le
   bae40:	2000      	movle	r0, #0
   bae42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bae46:	bd70      	pople	{r4, r5, r6, pc}
   bae48:	f1c4 0400 	rsb	r4, r4, #0
   bae4c:	3c20      	subs	r4, #32
   bae4e:	da35      	bge.n	baebc <__aeabi_dmul+0x164>
   bae50:	340c      	adds	r4, #12
   bae52:	dc1b      	bgt.n	bae8c <__aeabi_dmul+0x134>
   bae54:	f104 0414 	add.w	r4, r4, #20
   bae58:	f1c4 0520 	rsb	r5, r4, #32
   bae5c:	fa00 f305 	lsl.w	r3, r0, r5
   bae60:	fa20 f004 	lsr.w	r0, r0, r4
   bae64:	fa01 f205 	lsl.w	r2, r1, r5
   bae68:	ea40 0002 	orr.w	r0, r0, r2
   bae6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bae70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bae74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bae78:	fa21 f604 	lsr.w	r6, r1, r4
   bae7c:	eb42 0106 	adc.w	r1, r2, r6
   bae80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bae84:	bf08      	it	eq
   bae86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bae8a:	bd70      	pop	{r4, r5, r6, pc}
   bae8c:	f1c4 040c 	rsb	r4, r4, #12
   bae90:	f1c4 0520 	rsb	r5, r4, #32
   bae94:	fa00 f304 	lsl.w	r3, r0, r4
   bae98:	fa20 f005 	lsr.w	r0, r0, r5
   bae9c:	fa01 f204 	lsl.w	r2, r1, r4
   baea0:	ea40 0002 	orr.w	r0, r0, r2
   baea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   baeac:	f141 0100 	adc.w	r1, r1, #0
   baeb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baeb4:	bf08      	it	eq
   baeb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baeba:	bd70      	pop	{r4, r5, r6, pc}
   baebc:	f1c4 0520 	rsb	r5, r4, #32
   baec0:	fa00 f205 	lsl.w	r2, r0, r5
   baec4:	ea4e 0e02 	orr.w	lr, lr, r2
   baec8:	fa20 f304 	lsr.w	r3, r0, r4
   baecc:	fa01 f205 	lsl.w	r2, r1, r5
   baed0:	ea43 0302 	orr.w	r3, r3, r2
   baed4:	fa21 f004 	lsr.w	r0, r1, r4
   baed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baedc:	fa21 f204 	lsr.w	r2, r1, r4
   baee0:	ea20 0002 	bic.w	r0, r0, r2
   baee4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   baee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baeec:	bf08      	it	eq
   baeee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baef2:	bd70      	pop	{r4, r5, r6, pc}
   baef4:	f094 0f00 	teq	r4, #0
   baef8:	d10f      	bne.n	baf1a <__aeabi_dmul+0x1c2>
   baefa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   baefe:	0040      	lsls	r0, r0, #1
   baf00:	eb41 0101 	adc.w	r1, r1, r1
   baf04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baf08:	bf08      	it	eq
   baf0a:	3c01      	subeq	r4, #1
   baf0c:	d0f7      	beq.n	baefe <__aeabi_dmul+0x1a6>
   baf0e:	ea41 0106 	orr.w	r1, r1, r6
   baf12:	f095 0f00 	teq	r5, #0
   baf16:	bf18      	it	ne
   baf18:	4770      	bxne	lr
   baf1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   baf1e:	0052      	lsls	r2, r2, #1
   baf20:	eb43 0303 	adc.w	r3, r3, r3
   baf24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   baf28:	bf08      	it	eq
   baf2a:	3d01      	subeq	r5, #1
   baf2c:	d0f7      	beq.n	baf1e <__aeabi_dmul+0x1c6>
   baf2e:	ea43 0306 	orr.w	r3, r3, r6
   baf32:	4770      	bx	lr
   baf34:	ea94 0f0c 	teq	r4, ip
   baf38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baf3c:	bf18      	it	ne
   baf3e:	ea95 0f0c 	teqne	r5, ip
   baf42:	d00c      	beq.n	baf5e <__aeabi_dmul+0x206>
   baf44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baf48:	bf18      	it	ne
   baf4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baf4e:	d1d1      	bne.n	baef4 <__aeabi_dmul+0x19c>
   baf50:	ea81 0103 	eor.w	r1, r1, r3
   baf54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baf58:	f04f 0000 	mov.w	r0, #0
   baf5c:	bd70      	pop	{r4, r5, r6, pc}
   baf5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baf62:	bf06      	itte	eq
   baf64:	4610      	moveq	r0, r2
   baf66:	4619      	moveq	r1, r3
   baf68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baf6c:	d019      	beq.n	bafa2 <__aeabi_dmul+0x24a>
   baf6e:	ea94 0f0c 	teq	r4, ip
   baf72:	d102      	bne.n	baf7a <__aeabi_dmul+0x222>
   baf74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   baf78:	d113      	bne.n	bafa2 <__aeabi_dmul+0x24a>
   baf7a:	ea95 0f0c 	teq	r5, ip
   baf7e:	d105      	bne.n	baf8c <__aeabi_dmul+0x234>
   baf80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   baf84:	bf1c      	itt	ne
   baf86:	4610      	movne	r0, r2
   baf88:	4619      	movne	r1, r3
   baf8a:	d10a      	bne.n	bafa2 <__aeabi_dmul+0x24a>
   baf8c:	ea81 0103 	eor.w	r1, r1, r3
   baf90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baf94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   baf98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baf9c:	f04f 0000 	mov.w	r0, #0
   bafa0:	bd70      	pop	{r4, r5, r6, pc}
   bafa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bafa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bafaa:	bd70      	pop	{r4, r5, r6, pc}

000bafac <__aeabi_ddiv>:
   bafac:	b570      	push	{r4, r5, r6, lr}
   bafae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bafb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bafb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bafba:	bf1d      	ittte	ne
   bafbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bafc0:	ea94 0f0c 	teqne	r4, ip
   bafc4:	ea95 0f0c 	teqne	r5, ip
   bafc8:	f000 f8a7 	bleq	bb11a <__aeabi_ddiv+0x16e>
   bafcc:	eba4 0405 	sub.w	r4, r4, r5
   bafd0:	ea81 0e03 	eor.w	lr, r1, r3
   bafd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bafd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bafdc:	f000 8088 	beq.w	bb0f0 <__aeabi_ddiv+0x144>
   bafe0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bafe4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bafe8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bafec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   baff0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   baff4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   baff8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   baffc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb000:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb004:	429d      	cmp	r5, r3
   bb006:	bf08      	it	eq
   bb008:	4296      	cmpeq	r6, r2
   bb00a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb00e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb012:	d202      	bcs.n	bb01a <__aeabi_ddiv+0x6e>
   bb014:	085b      	lsrs	r3, r3, #1
   bb016:	ea4f 0232 	mov.w	r2, r2, rrx
   bb01a:	1ab6      	subs	r6, r6, r2
   bb01c:	eb65 0503 	sbc.w	r5, r5, r3
   bb020:	085b      	lsrs	r3, r3, #1
   bb022:	ea4f 0232 	mov.w	r2, r2, rrx
   bb026:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb02a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb02e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb032:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb036:	bf22      	ittt	cs
   bb038:	1ab6      	subcs	r6, r6, r2
   bb03a:	4675      	movcs	r5, lr
   bb03c:	ea40 000c 	orrcs.w	r0, r0, ip
   bb040:	085b      	lsrs	r3, r3, #1
   bb042:	ea4f 0232 	mov.w	r2, r2, rrx
   bb046:	ebb6 0e02 	subs.w	lr, r6, r2
   bb04a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb04e:	bf22      	ittt	cs
   bb050:	1ab6      	subcs	r6, r6, r2
   bb052:	4675      	movcs	r5, lr
   bb054:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb058:	085b      	lsrs	r3, r3, #1
   bb05a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb05e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb062:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb066:	bf22      	ittt	cs
   bb068:	1ab6      	subcs	r6, r6, r2
   bb06a:	4675      	movcs	r5, lr
   bb06c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb070:	085b      	lsrs	r3, r3, #1
   bb072:	ea4f 0232 	mov.w	r2, r2, rrx
   bb076:	ebb6 0e02 	subs.w	lr, r6, r2
   bb07a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb07e:	bf22      	ittt	cs
   bb080:	1ab6      	subcs	r6, r6, r2
   bb082:	4675      	movcs	r5, lr
   bb084:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb088:	ea55 0e06 	orrs.w	lr, r5, r6
   bb08c:	d018      	beq.n	bb0c0 <__aeabi_ddiv+0x114>
   bb08e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb092:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb096:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb09a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb09e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb0a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb0a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb0aa:	d1c0      	bne.n	bb02e <__aeabi_ddiv+0x82>
   bb0ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb0b0:	d10b      	bne.n	bb0ca <__aeabi_ddiv+0x11e>
   bb0b2:	ea41 0100 	orr.w	r1, r1, r0
   bb0b6:	f04f 0000 	mov.w	r0, #0
   bb0ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb0be:	e7b6      	b.n	bb02e <__aeabi_ddiv+0x82>
   bb0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb0c4:	bf04      	itt	eq
   bb0c6:	4301      	orreq	r1, r0
   bb0c8:	2000      	moveq	r0, #0
   bb0ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb0ce:	bf88      	it	hi
   bb0d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb0d4:	f63f aeaf 	bhi.w	bae36 <__aeabi_dmul+0xde>
   bb0d8:	ebb5 0c03 	subs.w	ip, r5, r3
   bb0dc:	bf04      	itt	eq
   bb0de:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb0e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb0e6:	f150 0000 	adcs.w	r0, r0, #0
   bb0ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb0ee:	bd70      	pop	{r4, r5, r6, pc}
   bb0f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb0f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb0f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb0fc:	bfc2      	ittt	gt
   bb0fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb102:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb106:	bd70      	popgt	{r4, r5, r6, pc}
   bb108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb10c:	f04f 0e00 	mov.w	lr, #0
   bb110:	3c01      	subs	r4, #1
   bb112:	e690      	b.n	bae36 <__aeabi_dmul+0xde>
   bb114:	ea45 0e06 	orr.w	lr, r5, r6
   bb118:	e68d      	b.n	bae36 <__aeabi_dmul+0xde>
   bb11a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb11e:	ea94 0f0c 	teq	r4, ip
   bb122:	bf08      	it	eq
   bb124:	ea95 0f0c 	teqeq	r5, ip
   bb128:	f43f af3b 	beq.w	bafa2 <__aeabi_dmul+0x24a>
   bb12c:	ea94 0f0c 	teq	r4, ip
   bb130:	d10a      	bne.n	bb148 <__aeabi_ddiv+0x19c>
   bb132:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb136:	f47f af34 	bne.w	bafa2 <__aeabi_dmul+0x24a>
   bb13a:	ea95 0f0c 	teq	r5, ip
   bb13e:	f47f af25 	bne.w	baf8c <__aeabi_dmul+0x234>
   bb142:	4610      	mov	r0, r2
   bb144:	4619      	mov	r1, r3
   bb146:	e72c      	b.n	bafa2 <__aeabi_dmul+0x24a>
   bb148:	ea95 0f0c 	teq	r5, ip
   bb14c:	d106      	bne.n	bb15c <__aeabi_ddiv+0x1b0>
   bb14e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb152:	f43f aefd 	beq.w	baf50 <__aeabi_dmul+0x1f8>
   bb156:	4610      	mov	r0, r2
   bb158:	4619      	mov	r1, r3
   bb15a:	e722      	b.n	bafa2 <__aeabi_dmul+0x24a>
   bb15c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb160:	bf18      	it	ne
   bb162:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb166:	f47f aec5 	bne.w	baef4 <__aeabi_dmul+0x19c>
   bb16a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb16e:	f47f af0d 	bne.w	baf8c <__aeabi_dmul+0x234>
   bb172:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb176:	f47f aeeb 	bne.w	baf50 <__aeabi_dmul+0x1f8>
   bb17a:	e712      	b.n	bafa2 <__aeabi_dmul+0x24a>

000bb17c <__gedf2>:
   bb17c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb180:	e006      	b.n	bb190 <__cmpdf2+0x4>
   bb182:	bf00      	nop

000bb184 <__ledf2>:
   bb184:	f04f 0c01 	mov.w	ip, #1
   bb188:	e002      	b.n	bb190 <__cmpdf2+0x4>
   bb18a:	bf00      	nop

000bb18c <__cmpdf2>:
   bb18c:	f04f 0c01 	mov.w	ip, #1
   bb190:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb19c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb1a0:	bf18      	it	ne
   bb1a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb1a6:	d01b      	beq.n	bb1e0 <__cmpdf2+0x54>
   bb1a8:	b001      	add	sp, #4
   bb1aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb1ae:	bf0c      	ite	eq
   bb1b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb1b4:	ea91 0f03 	teqne	r1, r3
   bb1b8:	bf02      	ittt	eq
   bb1ba:	ea90 0f02 	teqeq	r0, r2
   bb1be:	2000      	moveq	r0, #0
   bb1c0:	4770      	bxeq	lr
   bb1c2:	f110 0f00 	cmn.w	r0, #0
   bb1c6:	ea91 0f03 	teq	r1, r3
   bb1ca:	bf58      	it	pl
   bb1cc:	4299      	cmppl	r1, r3
   bb1ce:	bf08      	it	eq
   bb1d0:	4290      	cmpeq	r0, r2
   bb1d2:	bf2c      	ite	cs
   bb1d4:	17d8      	asrcs	r0, r3, #31
   bb1d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb1da:	f040 0001 	orr.w	r0, r0, #1
   bb1de:	4770      	bx	lr
   bb1e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb1e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb1e8:	d102      	bne.n	bb1f0 <__cmpdf2+0x64>
   bb1ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb1ee:	d107      	bne.n	bb200 <__cmpdf2+0x74>
   bb1f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb1f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb1f8:	d1d6      	bne.n	bb1a8 <__cmpdf2+0x1c>
   bb1fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb1fe:	d0d3      	beq.n	bb1a8 <__cmpdf2+0x1c>
   bb200:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb204:	4770      	bx	lr
   bb206:	bf00      	nop

000bb208 <__aeabi_cdrcmple>:
   bb208:	4684      	mov	ip, r0
   bb20a:	4610      	mov	r0, r2
   bb20c:	4662      	mov	r2, ip
   bb20e:	468c      	mov	ip, r1
   bb210:	4619      	mov	r1, r3
   bb212:	4663      	mov	r3, ip
   bb214:	e000      	b.n	bb218 <__aeabi_cdcmpeq>
   bb216:	bf00      	nop

000bb218 <__aeabi_cdcmpeq>:
   bb218:	b501      	push	{r0, lr}
   bb21a:	f7ff ffb7 	bl	bb18c <__cmpdf2>
   bb21e:	2800      	cmp	r0, #0
   bb220:	bf48      	it	mi
   bb222:	f110 0f00 	cmnmi.w	r0, #0
   bb226:	bd01      	pop	{r0, pc}

000bb228 <__aeabi_dcmpeq>:
   bb228:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb22c:	f7ff fff4 	bl	bb218 <__aeabi_cdcmpeq>
   bb230:	bf0c      	ite	eq
   bb232:	2001      	moveq	r0, #1
   bb234:	2000      	movne	r0, #0
   bb236:	f85d fb08 	ldr.w	pc, [sp], #8
   bb23a:	bf00      	nop

000bb23c <__aeabi_dcmplt>:
   bb23c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb240:	f7ff ffea 	bl	bb218 <__aeabi_cdcmpeq>
   bb244:	bf34      	ite	cc
   bb246:	2001      	movcc	r0, #1
   bb248:	2000      	movcs	r0, #0
   bb24a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb24e:	bf00      	nop

000bb250 <__aeabi_dcmple>:
   bb250:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb254:	f7ff ffe0 	bl	bb218 <__aeabi_cdcmpeq>
   bb258:	bf94      	ite	ls
   bb25a:	2001      	movls	r0, #1
   bb25c:	2000      	movhi	r0, #0
   bb25e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb262:	bf00      	nop

000bb264 <__aeabi_dcmpge>:
   bb264:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb268:	f7ff ffce 	bl	bb208 <__aeabi_cdrcmple>
   bb26c:	bf94      	ite	ls
   bb26e:	2001      	movls	r0, #1
   bb270:	2000      	movhi	r0, #0
   bb272:	f85d fb08 	ldr.w	pc, [sp], #8
   bb276:	bf00      	nop

000bb278 <__aeabi_dcmpgt>:
   bb278:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb27c:	f7ff ffc4 	bl	bb208 <__aeabi_cdrcmple>
   bb280:	bf34      	ite	cc
   bb282:	2001      	movcc	r0, #1
   bb284:	2000      	movcs	r0, #0
   bb286:	f85d fb08 	ldr.w	pc, [sp], #8
   bb28a:	bf00      	nop

000bb28c <__aeabi_dcmpun>:
   bb28c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb294:	d102      	bne.n	bb29c <__aeabi_dcmpun+0x10>
   bb296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb29a:	d10a      	bne.n	bb2b2 <__aeabi_dcmpun+0x26>
   bb29c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb2a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb2a4:	d102      	bne.n	bb2ac <__aeabi_dcmpun+0x20>
   bb2a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb2aa:	d102      	bne.n	bb2b2 <__aeabi_dcmpun+0x26>
   bb2ac:	f04f 0000 	mov.w	r0, #0
   bb2b0:	4770      	bx	lr
   bb2b2:	f04f 0001 	mov.w	r0, #1
   bb2b6:	4770      	bx	lr

000bb2b8 <__aeabi_d2iz>:
   bb2b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb2bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb2c0:	d215      	bcs.n	bb2ee <__aeabi_d2iz+0x36>
   bb2c2:	d511      	bpl.n	bb2e8 <__aeabi_d2iz+0x30>
   bb2c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb2c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb2cc:	d912      	bls.n	bb2f4 <__aeabi_d2iz+0x3c>
   bb2ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb2d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb2d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb2da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb2de:	fa23 f002 	lsr.w	r0, r3, r2
   bb2e2:	bf18      	it	ne
   bb2e4:	4240      	negne	r0, r0
   bb2e6:	4770      	bx	lr
   bb2e8:	f04f 0000 	mov.w	r0, #0
   bb2ec:	4770      	bx	lr
   bb2ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb2f2:	d105      	bne.n	bb300 <__aeabi_d2iz+0x48>
   bb2f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bb2f8:	bf08      	it	eq
   bb2fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bb2fe:	4770      	bx	lr
   bb300:	f04f 0000 	mov.w	r0, #0
   bb304:	4770      	bx	lr
   bb306:	bf00      	nop

000bb308 <__aeabi_d2uiz>:
   bb308:	004a      	lsls	r2, r1, #1
   bb30a:	d211      	bcs.n	bb330 <__aeabi_d2uiz+0x28>
   bb30c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb310:	d211      	bcs.n	bb336 <__aeabi_d2uiz+0x2e>
   bb312:	d50d      	bpl.n	bb330 <__aeabi_d2uiz+0x28>
   bb314:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb31c:	d40e      	bmi.n	bb33c <__aeabi_d2uiz+0x34>
   bb31e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb32a:	fa23 f002 	lsr.w	r0, r3, r2
   bb32e:	4770      	bx	lr
   bb330:	f04f 0000 	mov.w	r0, #0
   bb334:	4770      	bx	lr
   bb336:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb33a:	d102      	bne.n	bb342 <__aeabi_d2uiz+0x3a>
   bb33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb340:	4770      	bx	lr
   bb342:	f04f 0000 	mov.w	r0, #0
   bb346:	4770      	bx	lr

000bb348 <__aeabi_d2f>:
   bb348:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb34c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb350:	bf24      	itt	cs
   bb352:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb356:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb35a:	d90d      	bls.n	bb378 <__aeabi_d2f+0x30>
   bb35c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb360:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb364:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb368:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb36c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb370:	bf08      	it	eq
   bb372:	f020 0001 	biceq.w	r0, r0, #1
   bb376:	4770      	bx	lr
   bb378:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb37c:	d121      	bne.n	bb3c2 <__aeabi_d2f+0x7a>
   bb37e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb382:	bfbc      	itt	lt
   bb384:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb388:	4770      	bxlt	lr
   bb38a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb38e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb392:	f1c2 0218 	rsb	r2, r2, #24
   bb396:	f1c2 0c20 	rsb	ip, r2, #32
   bb39a:	fa10 f30c 	lsls.w	r3, r0, ip
   bb39e:	fa20 f002 	lsr.w	r0, r0, r2
   bb3a2:	bf18      	it	ne
   bb3a4:	f040 0001 	orrne.w	r0, r0, #1
   bb3a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb3ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb3b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb3b4:	ea40 000c 	orr.w	r0, r0, ip
   bb3b8:	fa23 f302 	lsr.w	r3, r3, r2
   bb3bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb3c0:	e7cc      	b.n	bb35c <__aeabi_d2f+0x14>
   bb3c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb3c6:	d107      	bne.n	bb3d8 <__aeabi_d2f+0x90>
   bb3c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb3cc:	bf1e      	ittt	ne
   bb3ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb3d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb3d6:	4770      	bxne	lr
   bb3d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb3dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb3e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb3e4:	4770      	bx	lr
   bb3e6:	bf00      	nop

000bb3e8 <__aeabi_d2ulz>:
   bb3e8:	b5d0      	push	{r4, r6, r7, lr}
   bb3ea:	4b0c      	ldr	r3, [pc, #48]	; (bb41c <__aeabi_d2ulz+0x34>)
   bb3ec:	2200      	movs	r2, #0
   bb3ee:	4606      	mov	r6, r0
   bb3f0:	460f      	mov	r7, r1
   bb3f2:	f7ff fcb1 	bl	bad58 <__aeabi_dmul>
   bb3f6:	f7ff ff87 	bl	bb308 <__aeabi_d2uiz>
   bb3fa:	4604      	mov	r4, r0
   bb3fc:	f7ff fc32 	bl	bac64 <__aeabi_ui2d>
   bb400:	4b07      	ldr	r3, [pc, #28]	; (bb420 <__aeabi_d2ulz+0x38>)
   bb402:	2200      	movs	r2, #0
   bb404:	f7ff fca8 	bl	bad58 <__aeabi_dmul>
   bb408:	4602      	mov	r2, r0
   bb40a:	460b      	mov	r3, r1
   bb40c:	4630      	mov	r0, r6
   bb40e:	4639      	mov	r1, r7
   bb410:	f7ff faea 	bl	ba9e8 <__aeabi_dsub>
   bb414:	f7ff ff78 	bl	bb308 <__aeabi_d2uiz>
   bb418:	4621      	mov	r1, r4
   bb41a:	bdd0      	pop	{r4, r6, r7, pc}
   bb41c:	3df00000 	.word	0x3df00000
   bb420:	41f00000 	.word	0x41f00000

000bb424 <atexit>:
   bb424:	2300      	movs	r3, #0
   bb426:	4601      	mov	r1, r0
   bb428:	461a      	mov	r2, r3
   bb42a:	4618      	mov	r0, r3
   bb42c:	f001 b826 	b.w	bc47c <__register_exitproc>

000bb430 <atof>:
   bb430:	2100      	movs	r1, #0
   bb432:	f000 bf2f 	b.w	bc294 <strtod>

000bb436 <atol>:
   bb436:	220a      	movs	r2, #10
   bb438:	2100      	movs	r1, #0
   bb43a:	f001 b815 	b.w	bc468 <strtol>
	...

000bb440 <isprint>:
   bb440:	4b02      	ldr	r3, [pc, #8]	; (bb44c <isprint+0xc>)
   bb442:	4418      	add	r0, r3
   bb444:	7840      	ldrb	r0, [r0, #1]
   bb446:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bb44a:	4770      	bx	lr
   bb44c:	000be1c3 	.word	0x000be1c3

000bb450 <memcpy>:
   bb450:	440a      	add	r2, r1
   bb452:	4291      	cmp	r1, r2
   bb454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb458:	d100      	bne.n	bb45c <memcpy+0xc>
   bb45a:	4770      	bx	lr
   bb45c:	b510      	push	{r4, lr}
   bb45e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb462:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb466:	4291      	cmp	r1, r2
   bb468:	d1f9      	bne.n	bb45e <memcpy+0xe>
   bb46a:	bd10      	pop	{r4, pc}

000bb46c <memmove>:
   bb46c:	4288      	cmp	r0, r1
   bb46e:	b510      	push	{r4, lr}
   bb470:	eb01 0402 	add.w	r4, r1, r2
   bb474:	d902      	bls.n	bb47c <memmove+0x10>
   bb476:	4284      	cmp	r4, r0
   bb478:	4623      	mov	r3, r4
   bb47a:	d807      	bhi.n	bb48c <memmove+0x20>
   bb47c:	1e43      	subs	r3, r0, #1
   bb47e:	42a1      	cmp	r1, r4
   bb480:	d008      	beq.n	bb494 <memmove+0x28>
   bb482:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb486:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb48a:	e7f8      	b.n	bb47e <memmove+0x12>
   bb48c:	4402      	add	r2, r0
   bb48e:	4601      	mov	r1, r0
   bb490:	428a      	cmp	r2, r1
   bb492:	d100      	bne.n	bb496 <memmove+0x2a>
   bb494:	bd10      	pop	{r4, pc}
   bb496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb49a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb49e:	e7f7      	b.n	bb490 <memmove+0x24>

000bb4a0 <memset>:
   bb4a0:	4402      	add	r2, r0
   bb4a2:	4603      	mov	r3, r0
   bb4a4:	4293      	cmp	r3, r2
   bb4a6:	d100      	bne.n	bb4aa <memset+0xa>
   bb4a8:	4770      	bx	lr
   bb4aa:	f803 1b01 	strb.w	r1, [r3], #1
   bb4ae:	e7f9      	b.n	bb4a4 <memset+0x4>

000bb4b0 <srand>:
   bb4b0:	b538      	push	{r3, r4, r5, lr}
   bb4b2:	4b10      	ldr	r3, [pc, #64]	; (bb4f4 <srand+0x44>)
   bb4b4:	681d      	ldr	r5, [r3, #0]
   bb4b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb4b8:	4604      	mov	r4, r0
   bb4ba:	b9b3      	cbnz	r3, bb4ea <srand+0x3a>
   bb4bc:	2018      	movs	r0, #24
   bb4be:	f7fb fd01 	bl	b6ec4 <malloc>
   bb4c2:	4602      	mov	r2, r0
   bb4c4:	63a8      	str	r0, [r5, #56]	; 0x38
   bb4c6:	b920      	cbnz	r0, bb4d2 <srand+0x22>
   bb4c8:	4b0b      	ldr	r3, [pc, #44]	; (bb4f8 <srand+0x48>)
   bb4ca:	480c      	ldr	r0, [pc, #48]	; (bb4fc <srand+0x4c>)
   bb4cc:	2142      	movs	r1, #66	; 0x42
   bb4ce:	f7fb fd39 	bl	b6f44 <__assert_func>
   bb4d2:	490b      	ldr	r1, [pc, #44]	; (bb500 <srand+0x50>)
   bb4d4:	4b0b      	ldr	r3, [pc, #44]	; (bb504 <srand+0x54>)
   bb4d6:	e9c0 1300 	strd	r1, r3, [r0]
   bb4da:	4b0b      	ldr	r3, [pc, #44]	; (bb508 <srand+0x58>)
   bb4dc:	6083      	str	r3, [r0, #8]
   bb4de:	230b      	movs	r3, #11
   bb4e0:	8183      	strh	r3, [r0, #12]
   bb4e2:	2100      	movs	r1, #0
   bb4e4:	2001      	movs	r0, #1
   bb4e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb4ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb4ec:	2200      	movs	r2, #0
   bb4ee:	611c      	str	r4, [r3, #16]
   bb4f0:	615a      	str	r2, [r3, #20]
   bb4f2:	bd38      	pop	{r3, r4, r5, pc}
   bb4f4:	2003e13c 	.word	0x2003e13c
   bb4f8:	000be0a1 	.word	0x000be0a1
   bb4fc:	000be0b8 	.word	0x000be0b8
   bb500:	abcd330e 	.word	0xabcd330e
   bb504:	e66d1234 	.word	0xe66d1234
   bb508:	0005deec 	.word	0x0005deec

000bb50c <strchr>:
   bb50c:	b2c9      	uxtb	r1, r1
   bb50e:	4603      	mov	r3, r0
   bb510:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb514:	b11a      	cbz	r2, bb51e <strchr+0x12>
   bb516:	428a      	cmp	r2, r1
   bb518:	d1f9      	bne.n	bb50e <strchr+0x2>
   bb51a:	4618      	mov	r0, r3
   bb51c:	4770      	bx	lr
   bb51e:	2900      	cmp	r1, #0
   bb520:	bf18      	it	ne
   bb522:	2300      	movne	r3, #0
   bb524:	e7f9      	b.n	bb51a <strchr+0xe>

000bb526 <strchrnul>:
   bb526:	b510      	push	{r4, lr}
   bb528:	4604      	mov	r4, r0
   bb52a:	f7ff ffef 	bl	bb50c <strchr>
   bb52e:	b918      	cbnz	r0, bb538 <strchrnul+0x12>
   bb530:	4620      	mov	r0, r4
   bb532:	f000 f832 	bl	bb59a <strlen>
   bb536:	4420      	add	r0, r4
   bb538:	bd10      	pop	{r4, pc}

000bb53a <strcmp>:
   bb53a:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb53e:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb542:	2a01      	cmp	r2, #1
   bb544:	bf28      	it	cs
   bb546:	429a      	cmpcs	r2, r3
   bb548:	d0f7      	beq.n	bb53a <strcmp>
   bb54a:	1ad0      	subs	r0, r2, r3
   bb54c:	4770      	bx	lr

000bb54e <strcpy>:
   bb54e:	4603      	mov	r3, r0
   bb550:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb554:	f803 2b01 	strb.w	r2, [r3], #1
   bb558:	2a00      	cmp	r2, #0
   bb55a:	d1f9      	bne.n	bb550 <strcpy+0x2>
   bb55c:	4770      	bx	lr
	...

000bb560 <strdup>:
   bb560:	4b02      	ldr	r3, [pc, #8]	; (bb56c <strdup+0xc>)
   bb562:	4601      	mov	r1, r0
   bb564:	6818      	ldr	r0, [r3, #0]
   bb566:	f000 b803 	b.w	bb570 <_strdup_r>
   bb56a:	bf00      	nop
   bb56c:	2003e13c 	.word	0x2003e13c

000bb570 <_strdup_r>:
   bb570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb572:	4604      	mov	r4, r0
   bb574:	4608      	mov	r0, r1
   bb576:	460d      	mov	r5, r1
   bb578:	f000 f80f 	bl	bb59a <strlen>
   bb57c:	1c42      	adds	r2, r0, #1
   bb57e:	4611      	mov	r1, r2
   bb580:	4620      	mov	r0, r4
   bb582:	9201      	str	r2, [sp, #4]
   bb584:	f7fb fcce 	bl	b6f24 <_malloc_r>
   bb588:	4604      	mov	r4, r0
   bb58a:	b118      	cbz	r0, bb594 <_strdup_r+0x24>
   bb58c:	9a01      	ldr	r2, [sp, #4]
   bb58e:	4629      	mov	r1, r5
   bb590:	f7ff ff5e 	bl	bb450 <memcpy>
   bb594:	4620      	mov	r0, r4
   bb596:	b003      	add	sp, #12
   bb598:	bd30      	pop	{r4, r5, pc}

000bb59a <strlen>:
   bb59a:	4603      	mov	r3, r0
   bb59c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb5a0:	2a00      	cmp	r2, #0
   bb5a2:	d1fb      	bne.n	bb59c <strlen+0x2>
   bb5a4:	1a18      	subs	r0, r3, r0
   bb5a6:	3801      	subs	r0, #1
   bb5a8:	4770      	bx	lr

000bb5aa <strncmp>:
   bb5aa:	b510      	push	{r4, lr}
   bb5ac:	b17a      	cbz	r2, bb5ce <strncmp+0x24>
   bb5ae:	4603      	mov	r3, r0
   bb5b0:	3901      	subs	r1, #1
   bb5b2:	1884      	adds	r4, r0, r2
   bb5b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb5b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb5bc:	4290      	cmp	r0, r2
   bb5be:	d101      	bne.n	bb5c4 <strncmp+0x1a>
   bb5c0:	42a3      	cmp	r3, r4
   bb5c2:	d101      	bne.n	bb5c8 <strncmp+0x1e>
   bb5c4:	1a80      	subs	r0, r0, r2
   bb5c6:	bd10      	pop	{r4, pc}
   bb5c8:	2800      	cmp	r0, #0
   bb5ca:	d1f3      	bne.n	bb5b4 <strncmp+0xa>
   bb5cc:	e7fa      	b.n	bb5c4 <strncmp+0x1a>
   bb5ce:	4610      	mov	r0, r2
   bb5d0:	e7f9      	b.n	bb5c6 <strncmp+0x1c>

000bb5d2 <strncpy>:
   bb5d2:	b510      	push	{r4, lr}
   bb5d4:	3901      	subs	r1, #1
   bb5d6:	4603      	mov	r3, r0
   bb5d8:	b132      	cbz	r2, bb5e8 <strncpy+0x16>
   bb5da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb5de:	f803 4b01 	strb.w	r4, [r3], #1
   bb5e2:	3a01      	subs	r2, #1
   bb5e4:	2c00      	cmp	r4, #0
   bb5e6:	d1f7      	bne.n	bb5d8 <strncpy+0x6>
   bb5e8:	441a      	add	r2, r3
   bb5ea:	2100      	movs	r1, #0
   bb5ec:	4293      	cmp	r3, r2
   bb5ee:	d100      	bne.n	bb5f2 <strncpy+0x20>
   bb5f0:	bd10      	pop	{r4, pc}
   bb5f2:	f803 1b01 	strb.w	r1, [r3], #1
   bb5f6:	e7f9      	b.n	bb5ec <strncpy+0x1a>

000bb5f8 <strrchr>:
   bb5f8:	b538      	push	{r3, r4, r5, lr}
   bb5fa:	4603      	mov	r3, r0
   bb5fc:	460c      	mov	r4, r1
   bb5fe:	b969      	cbnz	r1, bb61c <strrchr+0x24>
   bb600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb604:	f7ff bf82 	b.w	bb50c <strchr>
   bb608:	1c43      	adds	r3, r0, #1
   bb60a:	4605      	mov	r5, r0
   bb60c:	4621      	mov	r1, r4
   bb60e:	4618      	mov	r0, r3
   bb610:	f7ff ff7c 	bl	bb50c <strchr>
   bb614:	2800      	cmp	r0, #0
   bb616:	d1f7      	bne.n	bb608 <strrchr+0x10>
   bb618:	4628      	mov	r0, r5
   bb61a:	bd38      	pop	{r3, r4, r5, pc}
   bb61c:	2500      	movs	r5, #0
   bb61e:	e7f5      	b.n	bb60c <strrchr+0x14>

000bb620 <strstr>:
   bb620:	780a      	ldrb	r2, [r1, #0]
   bb622:	b570      	push	{r4, r5, r6, lr}
   bb624:	b96a      	cbnz	r2, bb642 <strstr+0x22>
   bb626:	bd70      	pop	{r4, r5, r6, pc}
   bb628:	429a      	cmp	r2, r3
   bb62a:	d109      	bne.n	bb640 <strstr+0x20>
   bb62c:	460c      	mov	r4, r1
   bb62e:	4605      	mov	r5, r0
   bb630:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb634:	2b00      	cmp	r3, #0
   bb636:	d0f6      	beq.n	bb626 <strstr+0x6>
   bb638:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb63c:	429e      	cmp	r6, r3
   bb63e:	d0f7      	beq.n	bb630 <strstr+0x10>
   bb640:	3001      	adds	r0, #1
   bb642:	7803      	ldrb	r3, [r0, #0]
   bb644:	2b00      	cmp	r3, #0
   bb646:	d1ef      	bne.n	bb628 <strstr+0x8>
   bb648:	4618      	mov	r0, r3
   bb64a:	e7ec      	b.n	bb626 <strstr+0x6>

000bb64c <sulp>:
   bb64c:	b570      	push	{r4, r5, r6, lr}
   bb64e:	4604      	mov	r4, r0
   bb650:	460d      	mov	r5, r1
   bb652:	ec45 4b10 	vmov	d0, r4, r5
   bb656:	4616      	mov	r6, r2
   bb658:	f001 fe6a 	bl	bd330 <__ulp>
   bb65c:	ec51 0b10 	vmov	r0, r1, d0
   bb660:	b17e      	cbz	r6, bb682 <sulp+0x36>
   bb662:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb666:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb66a:	2b00      	cmp	r3, #0
   bb66c:	dd09      	ble.n	bb682 <sulp+0x36>
   bb66e:	051b      	lsls	r3, r3, #20
   bb670:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb674:	2400      	movs	r4, #0
   bb676:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb67a:	4622      	mov	r2, r4
   bb67c:	462b      	mov	r3, r5
   bb67e:	f7ff fb6b 	bl	bad58 <__aeabi_dmul>
   bb682:	bd70      	pop	{r4, r5, r6, pc}
   bb684:	0000      	movs	r0, r0
	...

000bb688 <_strtod_l>:
   bb688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb68c:	ed2d 8b02 	vpush	{d8}
   bb690:	b09d      	sub	sp, #116	; 0x74
   bb692:	461f      	mov	r7, r3
   bb694:	2300      	movs	r3, #0
   bb696:	9318      	str	r3, [sp, #96]	; 0x60
   bb698:	4ba2      	ldr	r3, [pc, #648]	; (bb924 <_strtod_l+0x29c>)
   bb69a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb69c:	681b      	ldr	r3, [r3, #0]
   bb69e:	9305      	str	r3, [sp, #20]
   bb6a0:	4604      	mov	r4, r0
   bb6a2:	4618      	mov	r0, r3
   bb6a4:	4688      	mov	r8, r1
   bb6a6:	f7ff ff78 	bl	bb59a <strlen>
   bb6aa:	f04f 0a00 	mov.w	sl, #0
   bb6ae:	4605      	mov	r5, r0
   bb6b0:	f04f 0b00 	mov.w	fp, #0
   bb6b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb6ba:	781a      	ldrb	r2, [r3, #0]
   bb6bc:	2a2b      	cmp	r2, #43	; 0x2b
   bb6be:	d04e      	beq.n	bb75e <_strtod_l+0xd6>
   bb6c0:	d83b      	bhi.n	bb73a <_strtod_l+0xb2>
   bb6c2:	2a0d      	cmp	r2, #13
   bb6c4:	d834      	bhi.n	bb730 <_strtod_l+0xa8>
   bb6c6:	2a08      	cmp	r2, #8
   bb6c8:	d834      	bhi.n	bb734 <_strtod_l+0xac>
   bb6ca:	2a00      	cmp	r2, #0
   bb6cc:	d03e      	beq.n	bb74c <_strtod_l+0xc4>
   bb6ce:	2300      	movs	r3, #0
   bb6d0:	930a      	str	r3, [sp, #40]	; 0x28
   bb6d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb6d4:	7833      	ldrb	r3, [r6, #0]
   bb6d6:	2b30      	cmp	r3, #48	; 0x30
   bb6d8:	f040 80b0 	bne.w	bb83c <_strtod_l+0x1b4>
   bb6dc:	7873      	ldrb	r3, [r6, #1]
   bb6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb6e2:	2b58      	cmp	r3, #88	; 0x58
   bb6e4:	d168      	bne.n	bb7b8 <_strtod_l+0x130>
   bb6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb6e8:	9301      	str	r3, [sp, #4]
   bb6ea:	ab18      	add	r3, sp, #96	; 0x60
   bb6ec:	9702      	str	r7, [sp, #8]
   bb6ee:	9300      	str	r3, [sp, #0]
   bb6f0:	4a8d      	ldr	r2, [pc, #564]	; (bb928 <_strtod_l+0x2a0>)
   bb6f2:	ab19      	add	r3, sp, #100	; 0x64
   bb6f4:	a917      	add	r1, sp, #92	; 0x5c
   bb6f6:	4620      	mov	r0, r4
   bb6f8:	f000 ff8a 	bl	bc610 <__gethex>
   bb6fc:	f010 0707 	ands.w	r7, r0, #7
   bb700:	4605      	mov	r5, r0
   bb702:	d005      	beq.n	bb710 <_strtod_l+0x88>
   bb704:	2f06      	cmp	r7, #6
   bb706:	d12c      	bne.n	bb762 <_strtod_l+0xda>
   bb708:	3601      	adds	r6, #1
   bb70a:	2300      	movs	r3, #0
   bb70c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb70e:	930a      	str	r3, [sp, #40]	; 0x28
   bb710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb712:	2b00      	cmp	r3, #0
   bb714:	f040 8590 	bne.w	bc238 <_strtod_l+0xbb0>
   bb718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb71a:	b1eb      	cbz	r3, bb758 <_strtod_l+0xd0>
   bb71c:	4652      	mov	r2, sl
   bb71e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb722:	ec43 2b10 	vmov	d0, r2, r3
   bb726:	b01d      	add	sp, #116	; 0x74
   bb728:	ecbd 8b02 	vpop	{d8}
   bb72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb730:	2a20      	cmp	r2, #32
   bb732:	d1cc      	bne.n	bb6ce <_strtod_l+0x46>
   bb734:	3301      	adds	r3, #1
   bb736:	9317      	str	r3, [sp, #92]	; 0x5c
   bb738:	e7be      	b.n	bb6b8 <_strtod_l+0x30>
   bb73a:	2a2d      	cmp	r2, #45	; 0x2d
   bb73c:	d1c7      	bne.n	bb6ce <_strtod_l+0x46>
   bb73e:	2201      	movs	r2, #1
   bb740:	920a      	str	r2, [sp, #40]	; 0x28
   bb742:	1c5a      	adds	r2, r3, #1
   bb744:	9217      	str	r2, [sp, #92]	; 0x5c
   bb746:	785b      	ldrb	r3, [r3, #1]
   bb748:	2b00      	cmp	r3, #0
   bb74a:	d1c2      	bne.n	bb6d2 <_strtod_l+0x4a>
   bb74c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb74e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb752:	2b00      	cmp	r3, #0
   bb754:	f040 856e 	bne.w	bc234 <_strtod_l+0xbac>
   bb758:	4652      	mov	r2, sl
   bb75a:	465b      	mov	r3, fp
   bb75c:	e7e1      	b.n	bb722 <_strtod_l+0x9a>
   bb75e:	2200      	movs	r2, #0
   bb760:	e7ee      	b.n	bb740 <_strtod_l+0xb8>
   bb762:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb764:	b13a      	cbz	r2, bb776 <_strtod_l+0xee>
   bb766:	2135      	movs	r1, #53	; 0x35
   bb768:	a81a      	add	r0, sp, #104	; 0x68
   bb76a:	f001 feec 	bl	bd546 <__copybits>
   bb76e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb770:	4620      	mov	r0, r4
   bb772:	f001 faab 	bl	bcccc <_Bfree>
   bb776:	3f01      	subs	r7, #1
   bb778:	2f04      	cmp	r7, #4
   bb77a:	d806      	bhi.n	bb78a <_strtod_l+0x102>
   bb77c:	e8df f007 	tbb	[pc, r7]
   bb780:	1714030a 	.word	0x1714030a
   bb784:	0a          	.byte	0x0a
   bb785:	00          	.byte	0x00
   bb786:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb78a:	0728      	lsls	r0, r5, #28
   bb78c:	d5c0      	bpl.n	bb710 <_strtod_l+0x88>
   bb78e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb792:	e7bd      	b.n	bb710 <_strtod_l+0x88>
   bb794:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb798:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb79a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb79e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb7a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb7a6:	e7f0      	b.n	bb78a <_strtod_l+0x102>
   bb7a8:	f8df b180 	ldr.w	fp, [pc, #384]	; bb92c <_strtod_l+0x2a4>
   bb7ac:	e7ed      	b.n	bb78a <_strtod_l+0x102>
   bb7ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb7b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb7b6:	e7e8      	b.n	bb78a <_strtod_l+0x102>
   bb7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb7ba:	1c5a      	adds	r2, r3, #1
   bb7bc:	9217      	str	r2, [sp, #92]	; 0x5c
   bb7be:	785b      	ldrb	r3, [r3, #1]
   bb7c0:	2b30      	cmp	r3, #48	; 0x30
   bb7c2:	d0f9      	beq.n	bb7b8 <_strtod_l+0x130>
   bb7c4:	2b00      	cmp	r3, #0
   bb7c6:	d0a3      	beq.n	bb710 <_strtod_l+0x88>
   bb7c8:	2301      	movs	r3, #1
   bb7ca:	f04f 0900 	mov.w	r9, #0
   bb7ce:	9304      	str	r3, [sp, #16]
   bb7d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb7d2:	9308      	str	r3, [sp, #32]
   bb7d4:	f8cd 901c 	str.w	r9, [sp, #28]
   bb7d8:	464f      	mov	r7, r9
   bb7da:	220a      	movs	r2, #10
   bb7dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb7de:	7806      	ldrb	r6, [r0, #0]
   bb7e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb7e4:	b2d9      	uxtb	r1, r3
   bb7e6:	2909      	cmp	r1, #9
   bb7e8:	d92a      	bls.n	bb840 <_strtod_l+0x1b8>
   bb7ea:	9905      	ldr	r1, [sp, #20]
   bb7ec:	462a      	mov	r2, r5
   bb7ee:	f7ff fedc 	bl	bb5aa <strncmp>
   bb7f2:	b398      	cbz	r0, bb85c <_strtod_l+0x1d4>
   bb7f4:	2000      	movs	r0, #0
   bb7f6:	4632      	mov	r2, r6
   bb7f8:	463d      	mov	r5, r7
   bb7fa:	9005      	str	r0, [sp, #20]
   bb7fc:	4603      	mov	r3, r0
   bb7fe:	2a65      	cmp	r2, #101	; 0x65
   bb800:	d001      	beq.n	bb806 <_strtod_l+0x17e>
   bb802:	2a45      	cmp	r2, #69	; 0x45
   bb804:	d118      	bne.n	bb838 <_strtod_l+0x1b0>
   bb806:	b91d      	cbnz	r5, bb810 <_strtod_l+0x188>
   bb808:	9a04      	ldr	r2, [sp, #16]
   bb80a:	4302      	orrs	r2, r0
   bb80c:	d09e      	beq.n	bb74c <_strtod_l+0xc4>
   bb80e:	2500      	movs	r5, #0
   bb810:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb814:	f108 0201 	add.w	r2, r8, #1
   bb818:	9217      	str	r2, [sp, #92]	; 0x5c
   bb81a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb81e:	2a2b      	cmp	r2, #43	; 0x2b
   bb820:	d075      	beq.n	bb90e <_strtod_l+0x286>
   bb822:	2a2d      	cmp	r2, #45	; 0x2d
   bb824:	d07b      	beq.n	bb91e <_strtod_l+0x296>
   bb826:	f04f 0c00 	mov.w	ip, #0
   bb82a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb82e:	2909      	cmp	r1, #9
   bb830:	f240 8082 	bls.w	bb938 <_strtod_l+0x2b0>
   bb834:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb838:	2600      	movs	r6, #0
   bb83a:	e09d      	b.n	bb978 <_strtod_l+0x2f0>
   bb83c:	2300      	movs	r3, #0
   bb83e:	e7c4      	b.n	bb7ca <_strtod_l+0x142>
   bb840:	2f08      	cmp	r7, #8
   bb842:	bfd8      	it	le
   bb844:	9907      	ldrle	r1, [sp, #28]
   bb846:	f100 0001 	add.w	r0, r0, #1
   bb84a:	bfda      	itte	le
   bb84c:	fb02 3301 	mlale	r3, r2, r1, r3
   bb850:	9307      	strle	r3, [sp, #28]
   bb852:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb856:	3701      	adds	r7, #1
   bb858:	9017      	str	r0, [sp, #92]	; 0x5c
   bb85a:	e7bf      	b.n	bb7dc <_strtod_l+0x154>
   bb85c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb85e:	195a      	adds	r2, r3, r5
   bb860:	9217      	str	r2, [sp, #92]	; 0x5c
   bb862:	5d5a      	ldrb	r2, [r3, r5]
   bb864:	2f00      	cmp	r7, #0
   bb866:	d037      	beq.n	bb8d8 <_strtod_l+0x250>
   bb868:	9005      	str	r0, [sp, #20]
   bb86a:	463d      	mov	r5, r7
   bb86c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb870:	2b09      	cmp	r3, #9
   bb872:	d912      	bls.n	bb89a <_strtod_l+0x212>
   bb874:	2301      	movs	r3, #1
   bb876:	e7c2      	b.n	bb7fe <_strtod_l+0x176>
   bb878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb87a:	1c5a      	adds	r2, r3, #1
   bb87c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb87e:	785a      	ldrb	r2, [r3, #1]
   bb880:	3001      	adds	r0, #1
   bb882:	2a30      	cmp	r2, #48	; 0x30
   bb884:	d0f8      	beq.n	bb878 <_strtod_l+0x1f0>
   bb886:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb88a:	2b08      	cmp	r3, #8
   bb88c:	f200 84d9 	bhi.w	bc242 <_strtod_l+0xbba>
   bb890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb892:	9005      	str	r0, [sp, #20]
   bb894:	2000      	movs	r0, #0
   bb896:	9308      	str	r3, [sp, #32]
   bb898:	4605      	mov	r5, r0
   bb89a:	3a30      	subs	r2, #48	; 0x30
   bb89c:	f100 0301 	add.w	r3, r0, #1
   bb8a0:	d014      	beq.n	bb8cc <_strtod_l+0x244>
   bb8a2:	9905      	ldr	r1, [sp, #20]
   bb8a4:	4419      	add	r1, r3
   bb8a6:	9105      	str	r1, [sp, #20]
   bb8a8:	462b      	mov	r3, r5
   bb8aa:	eb00 0e05 	add.w	lr, r0, r5
   bb8ae:	210a      	movs	r1, #10
   bb8b0:	4573      	cmp	r3, lr
   bb8b2:	d113      	bne.n	bb8dc <_strtod_l+0x254>
   bb8b4:	182b      	adds	r3, r5, r0
   bb8b6:	2b08      	cmp	r3, #8
   bb8b8:	f105 0501 	add.w	r5, r5, #1
   bb8bc:	4405      	add	r5, r0
   bb8be:	dc1c      	bgt.n	bb8fa <_strtod_l+0x272>
   bb8c0:	9907      	ldr	r1, [sp, #28]
   bb8c2:	230a      	movs	r3, #10
   bb8c4:	fb03 2301 	mla	r3, r3, r1, r2
   bb8c8:	9307      	str	r3, [sp, #28]
   bb8ca:	2300      	movs	r3, #0
   bb8cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb8ce:	1c51      	adds	r1, r2, #1
   bb8d0:	9117      	str	r1, [sp, #92]	; 0x5c
   bb8d2:	7852      	ldrb	r2, [r2, #1]
   bb8d4:	4618      	mov	r0, r3
   bb8d6:	e7c9      	b.n	bb86c <_strtod_l+0x1e4>
   bb8d8:	4638      	mov	r0, r7
   bb8da:	e7d2      	b.n	bb882 <_strtod_l+0x1fa>
   bb8dc:	2b08      	cmp	r3, #8
   bb8de:	dc04      	bgt.n	bb8ea <_strtod_l+0x262>
   bb8e0:	9e07      	ldr	r6, [sp, #28]
   bb8e2:	434e      	muls	r6, r1
   bb8e4:	9607      	str	r6, [sp, #28]
   bb8e6:	3301      	adds	r3, #1
   bb8e8:	e7e2      	b.n	bb8b0 <_strtod_l+0x228>
   bb8ea:	f103 0c01 	add.w	ip, r3, #1
   bb8ee:	f1bc 0f10 	cmp.w	ip, #16
   bb8f2:	bfd8      	it	le
   bb8f4:	fb01 f909 	mulle.w	r9, r1, r9
   bb8f8:	e7f5      	b.n	bb8e6 <_strtod_l+0x25e>
   bb8fa:	2d10      	cmp	r5, #16
   bb8fc:	bfdc      	itt	le
   bb8fe:	230a      	movle	r3, #10
   bb900:	fb03 2909 	mlale	r9, r3, r9, r2
   bb904:	e7e1      	b.n	bb8ca <_strtod_l+0x242>
   bb906:	2300      	movs	r3, #0
   bb908:	9305      	str	r3, [sp, #20]
   bb90a:	2301      	movs	r3, #1
   bb90c:	e77c      	b.n	bb808 <_strtod_l+0x180>
   bb90e:	f04f 0c00 	mov.w	ip, #0
   bb912:	f108 0202 	add.w	r2, r8, #2
   bb916:	9217      	str	r2, [sp, #92]	; 0x5c
   bb918:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb91c:	e785      	b.n	bb82a <_strtod_l+0x1a2>
   bb91e:	f04f 0c01 	mov.w	ip, #1
   bb922:	e7f6      	b.n	bb912 <_strtod_l+0x28a>
   bb924:	000be338 	.word	0x000be338
   bb928:	000be118 	.word	0x000be118
   bb92c:	7ff00000 	.word	0x7ff00000
   bb930:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb932:	1c51      	adds	r1, r2, #1
   bb934:	9117      	str	r1, [sp, #92]	; 0x5c
   bb936:	7852      	ldrb	r2, [r2, #1]
   bb938:	2a30      	cmp	r2, #48	; 0x30
   bb93a:	d0f9      	beq.n	bb930 <_strtod_l+0x2a8>
   bb93c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb940:	2908      	cmp	r1, #8
   bb942:	f63f af79 	bhi.w	bb838 <_strtod_l+0x1b0>
   bb946:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb94a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb94c:	9206      	str	r2, [sp, #24]
   bb94e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb950:	1c51      	adds	r1, r2, #1
   bb952:	9117      	str	r1, [sp, #92]	; 0x5c
   bb954:	7852      	ldrb	r2, [r2, #1]
   bb956:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb95a:	2e09      	cmp	r6, #9
   bb95c:	d937      	bls.n	bb9ce <_strtod_l+0x346>
   bb95e:	9e06      	ldr	r6, [sp, #24]
   bb960:	1b89      	subs	r1, r1, r6
   bb962:	2908      	cmp	r1, #8
   bb964:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb968:	dc02      	bgt.n	bb970 <_strtod_l+0x2e8>
   bb96a:	4576      	cmp	r6, lr
   bb96c:	bfa8      	it	ge
   bb96e:	4676      	movge	r6, lr
   bb970:	f1bc 0f00 	cmp.w	ip, #0
   bb974:	d000      	beq.n	bb978 <_strtod_l+0x2f0>
   bb976:	4276      	negs	r6, r6
   bb978:	2d00      	cmp	r5, #0
   bb97a:	d14d      	bne.n	bba18 <_strtod_l+0x390>
   bb97c:	9904      	ldr	r1, [sp, #16]
   bb97e:	4301      	orrs	r1, r0
   bb980:	f47f aec6 	bne.w	bb710 <_strtod_l+0x88>
   bb984:	2b00      	cmp	r3, #0
   bb986:	f47f aee1 	bne.w	bb74c <_strtod_l+0xc4>
   bb98a:	2a69      	cmp	r2, #105	; 0x69
   bb98c:	d027      	beq.n	bb9de <_strtod_l+0x356>
   bb98e:	dc24      	bgt.n	bb9da <_strtod_l+0x352>
   bb990:	2a49      	cmp	r2, #73	; 0x49
   bb992:	d024      	beq.n	bb9de <_strtod_l+0x356>
   bb994:	2a4e      	cmp	r2, #78	; 0x4e
   bb996:	f47f aed9 	bne.w	bb74c <_strtod_l+0xc4>
   bb99a:	499f      	ldr	r1, [pc, #636]	; (bbc18 <_strtod_l+0x590>)
   bb99c:	a817      	add	r0, sp, #92	; 0x5c
   bb99e:	f001 f88f 	bl	bcac0 <__match>
   bb9a2:	2800      	cmp	r0, #0
   bb9a4:	f43f aed2 	beq.w	bb74c <_strtod_l+0xc4>
   bb9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9aa:	781b      	ldrb	r3, [r3, #0]
   bb9ac:	2b28      	cmp	r3, #40	; 0x28
   bb9ae:	d12d      	bne.n	bba0c <_strtod_l+0x384>
   bb9b0:	499a      	ldr	r1, [pc, #616]	; (bbc1c <_strtod_l+0x594>)
   bb9b2:	aa1a      	add	r2, sp, #104	; 0x68
   bb9b4:	a817      	add	r0, sp, #92	; 0x5c
   bb9b6:	f001 f897 	bl	bcae8 <__hexnan>
   bb9ba:	2805      	cmp	r0, #5
   bb9bc:	d126      	bne.n	bba0c <_strtod_l+0x384>
   bb9be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb9c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb9c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb9c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb9cc:	e6a0      	b.n	bb710 <_strtod_l+0x88>
   bb9ce:	210a      	movs	r1, #10
   bb9d0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb9d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb9d8:	e7b9      	b.n	bb94e <_strtod_l+0x2c6>
   bb9da:	2a6e      	cmp	r2, #110	; 0x6e
   bb9dc:	e7db      	b.n	bb996 <_strtod_l+0x30e>
   bb9de:	4990      	ldr	r1, [pc, #576]	; (bbc20 <_strtod_l+0x598>)
   bb9e0:	a817      	add	r0, sp, #92	; 0x5c
   bb9e2:	f001 f86d 	bl	bcac0 <__match>
   bb9e6:	2800      	cmp	r0, #0
   bb9e8:	f43f aeb0 	beq.w	bb74c <_strtod_l+0xc4>
   bb9ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9ee:	498d      	ldr	r1, [pc, #564]	; (bbc24 <_strtod_l+0x59c>)
   bb9f0:	3b01      	subs	r3, #1
   bb9f2:	a817      	add	r0, sp, #92	; 0x5c
   bb9f4:	9317      	str	r3, [sp, #92]	; 0x5c
   bb9f6:	f001 f863 	bl	bcac0 <__match>
   bb9fa:	b910      	cbnz	r0, bba02 <_strtod_l+0x37a>
   bb9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9fe:	3301      	adds	r3, #1
   bba00:	9317      	str	r3, [sp, #92]	; 0x5c
   bba02:	f8df b230 	ldr.w	fp, [pc, #560]	; bbc34 <_strtod_l+0x5ac>
   bba06:	f04f 0a00 	mov.w	sl, #0
   bba0a:	e681      	b.n	bb710 <_strtod_l+0x88>
   bba0c:	4886      	ldr	r0, [pc, #536]	; (bbc28 <_strtod_l+0x5a0>)
   bba0e:	f7fe ffdf 	bl	ba9d0 <nan>
   bba12:	ec5b ab10 	vmov	sl, fp, d0
   bba16:	e67b      	b.n	bb710 <_strtod_l+0x88>
   bba18:	9b05      	ldr	r3, [sp, #20]
   bba1a:	9807      	ldr	r0, [sp, #28]
   bba1c:	1af3      	subs	r3, r6, r3
   bba1e:	2f00      	cmp	r7, #0
   bba20:	bf08      	it	eq
   bba22:	462f      	moveq	r7, r5
   bba24:	2d10      	cmp	r5, #16
   bba26:	9306      	str	r3, [sp, #24]
   bba28:	46a8      	mov	r8, r5
   bba2a:	bfa8      	it	ge
   bba2c:	f04f 0810 	movge.w	r8, #16
   bba30:	f7ff f918 	bl	bac64 <__aeabi_ui2d>
   bba34:	2d09      	cmp	r5, #9
   bba36:	4682      	mov	sl, r0
   bba38:	468b      	mov	fp, r1
   bba3a:	dd13      	ble.n	bba64 <_strtod_l+0x3dc>
   bba3c:	4b7b      	ldr	r3, [pc, #492]	; (bbc2c <_strtod_l+0x5a4>)
   bba3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bba42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bba46:	f7ff f987 	bl	bad58 <__aeabi_dmul>
   bba4a:	4682      	mov	sl, r0
   bba4c:	4648      	mov	r0, r9
   bba4e:	468b      	mov	fp, r1
   bba50:	f7ff f908 	bl	bac64 <__aeabi_ui2d>
   bba54:	4602      	mov	r2, r0
   bba56:	460b      	mov	r3, r1
   bba58:	4650      	mov	r0, sl
   bba5a:	4659      	mov	r1, fp
   bba5c:	f7fe ffc6 	bl	ba9ec <__adddf3>
   bba60:	4682      	mov	sl, r0
   bba62:	468b      	mov	fp, r1
   bba64:	2d0f      	cmp	r5, #15
   bba66:	dc38      	bgt.n	bbada <_strtod_l+0x452>
   bba68:	9b06      	ldr	r3, [sp, #24]
   bba6a:	2b00      	cmp	r3, #0
   bba6c:	f43f ae50 	beq.w	bb710 <_strtod_l+0x88>
   bba70:	dd24      	ble.n	bbabc <_strtod_l+0x434>
   bba72:	2b16      	cmp	r3, #22
   bba74:	dc0b      	bgt.n	bba8e <_strtod_l+0x406>
   bba76:	496d      	ldr	r1, [pc, #436]	; (bbc2c <_strtod_l+0x5a4>)
   bba78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bba7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bba80:	4652      	mov	r2, sl
   bba82:	465b      	mov	r3, fp
   bba84:	f7ff f968 	bl	bad58 <__aeabi_dmul>
   bba88:	4682      	mov	sl, r0
   bba8a:	468b      	mov	fp, r1
   bba8c:	e640      	b.n	bb710 <_strtod_l+0x88>
   bba8e:	9a06      	ldr	r2, [sp, #24]
   bba90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bba94:	4293      	cmp	r3, r2
   bba96:	db20      	blt.n	bbada <_strtod_l+0x452>
   bba98:	4c64      	ldr	r4, [pc, #400]	; (bbc2c <_strtod_l+0x5a4>)
   bba9a:	f1c5 050f 	rsb	r5, r5, #15
   bba9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bbaa2:	4652      	mov	r2, sl
   bbaa4:	465b      	mov	r3, fp
   bbaa6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbaaa:	f7ff f955 	bl	bad58 <__aeabi_dmul>
   bbaae:	9b06      	ldr	r3, [sp, #24]
   bbab0:	1b5d      	subs	r5, r3, r5
   bbab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bbab6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bbaba:	e7e3      	b.n	bba84 <_strtod_l+0x3fc>
   bbabc:	9b06      	ldr	r3, [sp, #24]
   bbabe:	3316      	adds	r3, #22
   bbac0:	db0b      	blt.n	bbada <_strtod_l+0x452>
   bbac2:	9b05      	ldr	r3, [sp, #20]
   bbac4:	1b9e      	subs	r6, r3, r6
   bbac6:	4b59      	ldr	r3, [pc, #356]	; (bbc2c <_strtod_l+0x5a4>)
   bbac8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bbacc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bbad0:	4650      	mov	r0, sl
   bbad2:	4659      	mov	r1, fp
   bbad4:	f7ff fa6a 	bl	bafac <__aeabi_ddiv>
   bbad8:	e7d6      	b.n	bba88 <_strtod_l+0x400>
   bbada:	9b06      	ldr	r3, [sp, #24]
   bbadc:	eba5 0808 	sub.w	r8, r5, r8
   bbae0:	4498      	add	r8, r3
   bbae2:	f1b8 0f00 	cmp.w	r8, #0
   bbae6:	dd74      	ble.n	bbbd2 <_strtod_l+0x54a>
   bbae8:	f018 030f 	ands.w	r3, r8, #15
   bbaec:	d00a      	beq.n	bbb04 <_strtod_l+0x47c>
   bbaee:	494f      	ldr	r1, [pc, #316]	; (bbc2c <_strtod_l+0x5a4>)
   bbaf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbaf4:	4652      	mov	r2, sl
   bbaf6:	465b      	mov	r3, fp
   bbaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbafc:	f7ff f92c 	bl	bad58 <__aeabi_dmul>
   bbb00:	4682      	mov	sl, r0
   bbb02:	468b      	mov	fp, r1
   bbb04:	f038 080f 	bics.w	r8, r8, #15
   bbb08:	d04f      	beq.n	bbbaa <_strtod_l+0x522>
   bbb0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bbb0e:	dd22      	ble.n	bbb56 <_strtod_l+0x4ce>
   bbb10:	2500      	movs	r5, #0
   bbb12:	462e      	mov	r6, r5
   bbb14:	9507      	str	r5, [sp, #28]
   bbb16:	9505      	str	r5, [sp, #20]
   bbb18:	2322      	movs	r3, #34	; 0x22
   bbb1a:	f8df b118 	ldr.w	fp, [pc, #280]	; bbc34 <_strtod_l+0x5ac>
   bbb1e:	6023      	str	r3, [r4, #0]
   bbb20:	f04f 0a00 	mov.w	sl, #0
   bbb24:	9b07      	ldr	r3, [sp, #28]
   bbb26:	2b00      	cmp	r3, #0
   bbb28:	f43f adf2 	beq.w	bb710 <_strtod_l+0x88>
   bbb2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb2e:	4620      	mov	r0, r4
   bbb30:	f001 f8cc 	bl	bcccc <_Bfree>
   bbb34:	9905      	ldr	r1, [sp, #20]
   bbb36:	4620      	mov	r0, r4
   bbb38:	f001 f8c8 	bl	bcccc <_Bfree>
   bbb3c:	4631      	mov	r1, r6
   bbb3e:	4620      	mov	r0, r4
   bbb40:	f001 f8c4 	bl	bcccc <_Bfree>
   bbb44:	9907      	ldr	r1, [sp, #28]
   bbb46:	4620      	mov	r0, r4
   bbb48:	f001 f8c0 	bl	bcccc <_Bfree>
   bbb4c:	4629      	mov	r1, r5
   bbb4e:	4620      	mov	r0, r4
   bbb50:	f001 f8bc 	bl	bcccc <_Bfree>
   bbb54:	e5dc      	b.n	bb710 <_strtod_l+0x88>
   bbb56:	4b36      	ldr	r3, [pc, #216]	; (bbc30 <_strtod_l+0x5a8>)
   bbb58:	9304      	str	r3, [sp, #16]
   bbb5a:	2300      	movs	r3, #0
   bbb5c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbb60:	4650      	mov	r0, sl
   bbb62:	4659      	mov	r1, fp
   bbb64:	4699      	mov	r9, r3
   bbb66:	f1b8 0f01 	cmp.w	r8, #1
   bbb6a:	dc21      	bgt.n	bbbb0 <_strtod_l+0x528>
   bbb6c:	b10b      	cbz	r3, bbb72 <_strtod_l+0x4ea>
   bbb6e:	4682      	mov	sl, r0
   bbb70:	468b      	mov	fp, r1
   bbb72:	4b2f      	ldr	r3, [pc, #188]	; (bbc30 <_strtod_l+0x5a8>)
   bbb74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbb78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbb7c:	4652      	mov	r2, sl
   bbb7e:	465b      	mov	r3, fp
   bbb80:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbb84:	f7ff f8e8 	bl	bad58 <__aeabi_dmul>
   bbb88:	4b2a      	ldr	r3, [pc, #168]	; (bbc34 <_strtod_l+0x5ac>)
   bbb8a:	460a      	mov	r2, r1
   bbb8c:	400b      	ands	r3, r1
   bbb8e:	492a      	ldr	r1, [pc, #168]	; (bbc38 <_strtod_l+0x5b0>)
   bbb90:	428b      	cmp	r3, r1
   bbb92:	4682      	mov	sl, r0
   bbb94:	d8bc      	bhi.n	bbb10 <_strtod_l+0x488>
   bbb96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbb9a:	428b      	cmp	r3, r1
   bbb9c:	bf86      	itte	hi
   bbb9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbc3c <_strtod_l+0x5b4>
   bbba2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bbba6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbbaa:	2300      	movs	r3, #0
   bbbac:	9304      	str	r3, [sp, #16]
   bbbae:	e084      	b.n	bbcba <_strtod_l+0x632>
   bbbb0:	f018 0f01 	tst.w	r8, #1
   bbbb4:	d005      	beq.n	bbbc2 <_strtod_l+0x53a>
   bbbb6:	9b04      	ldr	r3, [sp, #16]
   bbbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbbc:	f7ff f8cc 	bl	bad58 <__aeabi_dmul>
   bbbc0:	2301      	movs	r3, #1
   bbbc2:	9a04      	ldr	r2, [sp, #16]
   bbbc4:	3208      	adds	r2, #8
   bbbc6:	f109 0901 	add.w	r9, r9, #1
   bbbca:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbbce:	9204      	str	r2, [sp, #16]
   bbbd0:	e7c9      	b.n	bbb66 <_strtod_l+0x4de>
   bbbd2:	d0ea      	beq.n	bbbaa <_strtod_l+0x522>
   bbbd4:	f1c8 0800 	rsb	r8, r8, #0
   bbbd8:	f018 020f 	ands.w	r2, r8, #15
   bbbdc:	d00a      	beq.n	bbbf4 <_strtod_l+0x56c>
   bbbde:	4b13      	ldr	r3, [pc, #76]	; (bbc2c <_strtod_l+0x5a4>)
   bbbe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbbe4:	4650      	mov	r0, sl
   bbbe6:	4659      	mov	r1, fp
   bbbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbec:	f7ff f9de 	bl	bafac <__aeabi_ddiv>
   bbbf0:	4682      	mov	sl, r0
   bbbf2:	468b      	mov	fp, r1
   bbbf4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbbf8:	d0d7      	beq.n	bbbaa <_strtod_l+0x522>
   bbbfa:	f1b8 0f1f 	cmp.w	r8, #31
   bbbfe:	dd1f      	ble.n	bbc40 <_strtod_l+0x5b8>
   bbc00:	2500      	movs	r5, #0
   bbc02:	462e      	mov	r6, r5
   bbc04:	9507      	str	r5, [sp, #28]
   bbc06:	9505      	str	r5, [sp, #20]
   bbc08:	2322      	movs	r3, #34	; 0x22
   bbc0a:	f04f 0a00 	mov.w	sl, #0
   bbc0e:	f04f 0b00 	mov.w	fp, #0
   bbc12:	6023      	str	r3, [r4, #0]
   bbc14:	e786      	b.n	bbb24 <_strtod_l+0x49c>
   bbc16:	bf00      	nop
   bbc18:	000bde2d 	.word	0x000bde2d
   bbc1c:	000be12c 	.word	0x000be12c
   bbc20:	000bde31 	.word	0x000bde31
   bbc24:	000be111 	.word	0x000be111
   bbc28:	000bda03 	.word	0x000bda03
   bbc2c:	000be3d0 	.word	0x000be3d0
   bbc30:	000be3a8 	.word	0x000be3a8
   bbc34:	7ff00000 	.word	0x7ff00000
   bbc38:	7ca00000 	.word	0x7ca00000
   bbc3c:	7fefffff 	.word	0x7fefffff
   bbc40:	f018 0310 	ands.w	r3, r8, #16
   bbc44:	bf18      	it	ne
   bbc46:	236a      	movne	r3, #106	; 0x6a
   bbc48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbff8 <_strtod_l+0x970>
   bbc4c:	9304      	str	r3, [sp, #16]
   bbc4e:	4650      	mov	r0, sl
   bbc50:	4659      	mov	r1, fp
   bbc52:	2300      	movs	r3, #0
   bbc54:	f018 0f01 	tst.w	r8, #1
   bbc58:	d004      	beq.n	bbc64 <_strtod_l+0x5dc>
   bbc5a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbc5e:	f7ff f87b 	bl	bad58 <__aeabi_dmul>
   bbc62:	2301      	movs	r3, #1
   bbc64:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbc68:	f109 0908 	add.w	r9, r9, #8
   bbc6c:	d1f2      	bne.n	bbc54 <_strtod_l+0x5cc>
   bbc6e:	b10b      	cbz	r3, bbc74 <_strtod_l+0x5ec>
   bbc70:	4682      	mov	sl, r0
   bbc72:	468b      	mov	fp, r1
   bbc74:	9b04      	ldr	r3, [sp, #16]
   bbc76:	b1c3      	cbz	r3, bbcaa <_strtod_l+0x622>
   bbc78:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbc7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbc80:	2b00      	cmp	r3, #0
   bbc82:	4659      	mov	r1, fp
   bbc84:	dd11      	ble.n	bbcaa <_strtod_l+0x622>
   bbc86:	2b1f      	cmp	r3, #31
   bbc88:	f340 8124 	ble.w	bbed4 <_strtod_l+0x84c>
   bbc8c:	2b34      	cmp	r3, #52	; 0x34
   bbc8e:	bfde      	ittt	le
   bbc90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbc94:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bbc98:	fa03 f202 	lslle.w	r2, r3, r2
   bbc9c:	f04f 0a00 	mov.w	sl, #0
   bbca0:	bfcc      	ite	gt
   bbca2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbca6:	ea02 0b01 	andle.w	fp, r2, r1
   bbcaa:	2200      	movs	r2, #0
   bbcac:	2300      	movs	r3, #0
   bbcae:	4650      	mov	r0, sl
   bbcb0:	4659      	mov	r1, fp
   bbcb2:	f7ff fab9 	bl	bb228 <__aeabi_dcmpeq>
   bbcb6:	2800      	cmp	r0, #0
   bbcb8:	d1a2      	bne.n	bbc00 <_strtod_l+0x578>
   bbcba:	9b07      	ldr	r3, [sp, #28]
   bbcbc:	9300      	str	r3, [sp, #0]
   bbcbe:	9908      	ldr	r1, [sp, #32]
   bbcc0:	462b      	mov	r3, r5
   bbcc2:	463a      	mov	r2, r7
   bbcc4:	4620      	mov	r0, r4
   bbcc6:	f001 f869 	bl	bcd9c <__s2b>
   bbcca:	9007      	str	r0, [sp, #28]
   bbccc:	2800      	cmp	r0, #0
   bbcce:	f43f af1f 	beq.w	bbb10 <_strtod_l+0x488>
   bbcd2:	9b05      	ldr	r3, [sp, #20]
   bbcd4:	1b9e      	subs	r6, r3, r6
   bbcd6:	9b06      	ldr	r3, [sp, #24]
   bbcd8:	2b00      	cmp	r3, #0
   bbcda:	bfb4      	ite	lt
   bbcdc:	4633      	movlt	r3, r6
   bbcde:	2300      	movge	r3, #0
   bbce0:	930c      	str	r3, [sp, #48]	; 0x30
   bbce2:	9b06      	ldr	r3, [sp, #24]
   bbce4:	2500      	movs	r5, #0
   bbce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbcea:	9312      	str	r3, [sp, #72]	; 0x48
   bbcec:	462e      	mov	r6, r5
   bbcee:	9b07      	ldr	r3, [sp, #28]
   bbcf0:	4620      	mov	r0, r4
   bbcf2:	6859      	ldr	r1, [r3, #4]
   bbcf4:	f000 ffaa 	bl	bcc4c <_Balloc>
   bbcf8:	9005      	str	r0, [sp, #20]
   bbcfa:	2800      	cmp	r0, #0
   bbcfc:	f43f af0c 	beq.w	bbb18 <_strtod_l+0x490>
   bbd00:	9b07      	ldr	r3, [sp, #28]
   bbd02:	691a      	ldr	r2, [r3, #16]
   bbd04:	3202      	adds	r2, #2
   bbd06:	f103 010c 	add.w	r1, r3, #12
   bbd0a:	0092      	lsls	r2, r2, #2
   bbd0c:	300c      	adds	r0, #12
   bbd0e:	f7ff fb9f 	bl	bb450 <memcpy>
   bbd12:	ec4b ab10 	vmov	d0, sl, fp
   bbd16:	aa1a      	add	r2, sp, #104	; 0x68
   bbd18:	a919      	add	r1, sp, #100	; 0x64
   bbd1a:	4620      	mov	r0, r4
   bbd1c:	f001 fb84 	bl	bd428 <__d2b>
   bbd20:	ec4b ab18 	vmov	d8, sl, fp
   bbd24:	9018      	str	r0, [sp, #96]	; 0x60
   bbd26:	2800      	cmp	r0, #0
   bbd28:	f43f aef6 	beq.w	bbb18 <_strtod_l+0x490>
   bbd2c:	2101      	movs	r1, #1
   bbd2e:	4620      	mov	r0, r4
   bbd30:	f001 f8ce 	bl	bced0 <__i2b>
   bbd34:	4606      	mov	r6, r0
   bbd36:	2800      	cmp	r0, #0
   bbd38:	f43f aeee 	beq.w	bbb18 <_strtod_l+0x490>
   bbd3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbd3e:	9904      	ldr	r1, [sp, #16]
   bbd40:	2b00      	cmp	r3, #0
   bbd42:	bfab      	itete	ge
   bbd44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbd46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbd48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbd4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbd4e:	bfac      	ite	ge
   bbd50:	eb03 0902 	addge.w	r9, r3, r2
   bbd54:	1ad7      	sublt	r7, r2, r3
   bbd56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbd58:	eba3 0801 	sub.w	r8, r3, r1
   bbd5c:	4490      	add	r8, r2
   bbd5e:	4ba1      	ldr	r3, [pc, #644]	; (bbfe4 <_strtod_l+0x95c>)
   bbd60:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbd64:	4598      	cmp	r8, r3
   bbd66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbd6a:	f280 80c7 	bge.w	bbefc <_strtod_l+0x874>
   bbd6e:	eba3 0308 	sub.w	r3, r3, r8
   bbd72:	2b1f      	cmp	r3, #31
   bbd74:	eba2 0203 	sub.w	r2, r2, r3
   bbd78:	f04f 0101 	mov.w	r1, #1
   bbd7c:	f300 80b1 	bgt.w	bbee2 <_strtod_l+0x85a>
   bbd80:	fa01 f303 	lsl.w	r3, r1, r3
   bbd84:	930d      	str	r3, [sp, #52]	; 0x34
   bbd86:	2300      	movs	r3, #0
   bbd88:	9308      	str	r3, [sp, #32]
   bbd8a:	eb09 0802 	add.w	r8, r9, r2
   bbd8e:	9b04      	ldr	r3, [sp, #16]
   bbd90:	45c1      	cmp	r9, r8
   bbd92:	4417      	add	r7, r2
   bbd94:	441f      	add	r7, r3
   bbd96:	464b      	mov	r3, r9
   bbd98:	bfa8      	it	ge
   bbd9a:	4643      	movge	r3, r8
   bbd9c:	42bb      	cmp	r3, r7
   bbd9e:	bfa8      	it	ge
   bbda0:	463b      	movge	r3, r7
   bbda2:	2b00      	cmp	r3, #0
   bbda4:	bfc2      	ittt	gt
   bbda6:	eba8 0803 	subgt.w	r8, r8, r3
   bbdaa:	1aff      	subgt	r7, r7, r3
   bbdac:	eba9 0903 	subgt.w	r9, r9, r3
   bbdb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbdb2:	2b00      	cmp	r3, #0
   bbdb4:	dd17      	ble.n	bbde6 <_strtod_l+0x75e>
   bbdb6:	4631      	mov	r1, r6
   bbdb8:	461a      	mov	r2, r3
   bbdba:	4620      	mov	r0, r4
   bbdbc:	f001 f948 	bl	bd050 <__pow5mult>
   bbdc0:	4606      	mov	r6, r0
   bbdc2:	2800      	cmp	r0, #0
   bbdc4:	f43f aea8 	beq.w	bbb18 <_strtod_l+0x490>
   bbdc8:	4601      	mov	r1, r0
   bbdca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbdcc:	4620      	mov	r0, r4
   bbdce:	f001 f895 	bl	bcefc <__multiply>
   bbdd2:	900b      	str	r0, [sp, #44]	; 0x2c
   bbdd4:	2800      	cmp	r0, #0
   bbdd6:	f43f ae9f 	beq.w	bbb18 <_strtod_l+0x490>
   bbdda:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbddc:	4620      	mov	r0, r4
   bbdde:	f000 ff75 	bl	bcccc <_Bfree>
   bbde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbde4:	9318      	str	r3, [sp, #96]	; 0x60
   bbde6:	f1b8 0f00 	cmp.w	r8, #0
   bbdea:	f300 808c 	bgt.w	bbf06 <_strtod_l+0x87e>
   bbdee:	9b06      	ldr	r3, [sp, #24]
   bbdf0:	2b00      	cmp	r3, #0
   bbdf2:	dd08      	ble.n	bbe06 <_strtod_l+0x77e>
   bbdf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbdf6:	9905      	ldr	r1, [sp, #20]
   bbdf8:	4620      	mov	r0, r4
   bbdfa:	f001 f929 	bl	bd050 <__pow5mult>
   bbdfe:	9005      	str	r0, [sp, #20]
   bbe00:	2800      	cmp	r0, #0
   bbe02:	f43f ae89 	beq.w	bbb18 <_strtod_l+0x490>
   bbe06:	2f00      	cmp	r7, #0
   bbe08:	dd08      	ble.n	bbe1c <_strtod_l+0x794>
   bbe0a:	9905      	ldr	r1, [sp, #20]
   bbe0c:	463a      	mov	r2, r7
   bbe0e:	4620      	mov	r0, r4
   bbe10:	f001 f978 	bl	bd104 <__lshift>
   bbe14:	9005      	str	r0, [sp, #20]
   bbe16:	2800      	cmp	r0, #0
   bbe18:	f43f ae7e 	beq.w	bbb18 <_strtod_l+0x490>
   bbe1c:	f1b9 0f00 	cmp.w	r9, #0
   bbe20:	dd08      	ble.n	bbe34 <_strtod_l+0x7ac>
   bbe22:	4631      	mov	r1, r6
   bbe24:	464a      	mov	r2, r9
   bbe26:	4620      	mov	r0, r4
   bbe28:	f001 f96c 	bl	bd104 <__lshift>
   bbe2c:	4606      	mov	r6, r0
   bbe2e:	2800      	cmp	r0, #0
   bbe30:	f43f ae72 	beq.w	bbb18 <_strtod_l+0x490>
   bbe34:	9a05      	ldr	r2, [sp, #20]
   bbe36:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbe38:	4620      	mov	r0, r4
   bbe3a:	f001 f9ef 	bl	bd21c <__mdiff>
   bbe3e:	4605      	mov	r5, r0
   bbe40:	2800      	cmp	r0, #0
   bbe42:	f43f ae69 	beq.w	bbb18 <_strtod_l+0x490>
   bbe46:	68c3      	ldr	r3, [r0, #12]
   bbe48:	930b      	str	r3, [sp, #44]	; 0x2c
   bbe4a:	2300      	movs	r3, #0
   bbe4c:	60c3      	str	r3, [r0, #12]
   bbe4e:	4631      	mov	r1, r6
   bbe50:	f001 f9c8 	bl	bd1e4 <__mcmp>
   bbe54:	2800      	cmp	r0, #0
   bbe56:	da60      	bge.n	bbf1a <_strtod_l+0x892>
   bbe58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe5a:	ea53 030a 	orrs.w	r3, r3, sl
   bbe5e:	f040 8082 	bne.w	bbf66 <_strtod_l+0x8de>
   bbe62:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbe66:	2b00      	cmp	r3, #0
   bbe68:	d17d      	bne.n	bbf66 <_strtod_l+0x8de>
   bbe6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbe6e:	0d1b      	lsrs	r3, r3, #20
   bbe70:	051b      	lsls	r3, r3, #20
   bbe72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbe76:	d976      	bls.n	bbf66 <_strtod_l+0x8de>
   bbe78:	696b      	ldr	r3, [r5, #20]
   bbe7a:	b913      	cbnz	r3, bbe82 <_strtod_l+0x7fa>
   bbe7c:	692b      	ldr	r3, [r5, #16]
   bbe7e:	2b01      	cmp	r3, #1
   bbe80:	dd71      	ble.n	bbf66 <_strtod_l+0x8de>
   bbe82:	4629      	mov	r1, r5
   bbe84:	2201      	movs	r2, #1
   bbe86:	4620      	mov	r0, r4
   bbe88:	f001 f93c 	bl	bd104 <__lshift>
   bbe8c:	4631      	mov	r1, r6
   bbe8e:	4605      	mov	r5, r0
   bbe90:	f001 f9a8 	bl	bd1e4 <__mcmp>
   bbe94:	2800      	cmp	r0, #0
   bbe96:	dd66      	ble.n	bbf66 <_strtod_l+0x8de>
   bbe98:	9904      	ldr	r1, [sp, #16]
   bbe9a:	4a53      	ldr	r2, [pc, #332]	; (bbfe8 <_strtod_l+0x960>)
   bbe9c:	465b      	mov	r3, fp
   bbe9e:	2900      	cmp	r1, #0
   bbea0:	f000 8081 	beq.w	bbfa6 <_strtod_l+0x91e>
   bbea4:	ea02 010b 	and.w	r1, r2, fp
   bbea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbeac:	dc7b      	bgt.n	bbfa6 <_strtod_l+0x91e>
   bbeae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbeb2:	f77f aea9 	ble.w	bbc08 <_strtod_l+0x580>
   bbeb6:	4b4d      	ldr	r3, [pc, #308]	; (bbfec <_strtod_l+0x964>)
   bbeb8:	4650      	mov	r0, sl
   bbeba:	4659      	mov	r1, fp
   bbebc:	2200      	movs	r2, #0
   bbebe:	f7fe ff4b 	bl	bad58 <__aeabi_dmul>
   bbec2:	460b      	mov	r3, r1
   bbec4:	4303      	orrs	r3, r0
   bbec6:	bf08      	it	eq
   bbec8:	2322      	moveq	r3, #34	; 0x22
   bbeca:	4682      	mov	sl, r0
   bbecc:	468b      	mov	fp, r1
   bbece:	bf08      	it	eq
   bbed0:	6023      	streq	r3, [r4, #0]
   bbed2:	e62b      	b.n	bbb2c <_strtod_l+0x4a4>
   bbed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbed8:	fa02 f303 	lsl.w	r3, r2, r3
   bbedc:	ea03 0a0a 	and.w	sl, r3, sl
   bbee0:	e6e3      	b.n	bbcaa <_strtod_l+0x622>
   bbee2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbee6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbeea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbeee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbef2:	fa01 f308 	lsl.w	r3, r1, r8
   bbef6:	9308      	str	r3, [sp, #32]
   bbef8:	910d      	str	r1, [sp, #52]	; 0x34
   bbefa:	e746      	b.n	bbd8a <_strtod_l+0x702>
   bbefc:	2300      	movs	r3, #0
   bbefe:	9308      	str	r3, [sp, #32]
   bbf00:	2301      	movs	r3, #1
   bbf02:	930d      	str	r3, [sp, #52]	; 0x34
   bbf04:	e741      	b.n	bbd8a <_strtod_l+0x702>
   bbf06:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf08:	4642      	mov	r2, r8
   bbf0a:	4620      	mov	r0, r4
   bbf0c:	f001 f8fa 	bl	bd104 <__lshift>
   bbf10:	9018      	str	r0, [sp, #96]	; 0x60
   bbf12:	2800      	cmp	r0, #0
   bbf14:	f47f af6b 	bne.w	bbdee <_strtod_l+0x766>
   bbf18:	e5fe      	b.n	bbb18 <_strtod_l+0x490>
   bbf1a:	465f      	mov	r7, fp
   bbf1c:	d16e      	bne.n	bbffc <_strtod_l+0x974>
   bbf1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbf20:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbf24:	b342      	cbz	r2, bbf78 <_strtod_l+0x8f0>
   bbf26:	4a32      	ldr	r2, [pc, #200]	; (bbff0 <_strtod_l+0x968>)
   bbf28:	4293      	cmp	r3, r2
   bbf2a:	d128      	bne.n	bbf7e <_strtod_l+0x8f6>
   bbf2c:	9b04      	ldr	r3, [sp, #16]
   bbf2e:	4651      	mov	r1, sl
   bbf30:	b1eb      	cbz	r3, bbf6e <_strtod_l+0x8e6>
   bbf32:	4b2d      	ldr	r3, [pc, #180]	; (bbfe8 <_strtod_l+0x960>)
   bbf34:	403b      	ands	r3, r7
   bbf36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbf3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf3e:	d819      	bhi.n	bbf74 <_strtod_l+0x8ec>
   bbf40:	0d1b      	lsrs	r3, r3, #20
   bbf42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbf46:	fa02 f303 	lsl.w	r3, r2, r3
   bbf4a:	4299      	cmp	r1, r3
   bbf4c:	d117      	bne.n	bbf7e <_strtod_l+0x8f6>
   bbf4e:	4b29      	ldr	r3, [pc, #164]	; (bbff4 <_strtod_l+0x96c>)
   bbf50:	429f      	cmp	r7, r3
   bbf52:	d102      	bne.n	bbf5a <_strtod_l+0x8d2>
   bbf54:	3101      	adds	r1, #1
   bbf56:	f43f addf 	beq.w	bbb18 <_strtod_l+0x490>
   bbf5a:	4b23      	ldr	r3, [pc, #140]	; (bbfe8 <_strtod_l+0x960>)
   bbf5c:	403b      	ands	r3, r7
   bbf5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbf62:	f04f 0a00 	mov.w	sl, #0
   bbf66:	9b04      	ldr	r3, [sp, #16]
   bbf68:	2b00      	cmp	r3, #0
   bbf6a:	d1a4      	bne.n	bbeb6 <_strtod_l+0x82e>
   bbf6c:	e5de      	b.n	bbb2c <_strtod_l+0x4a4>
   bbf6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbf72:	e7ea      	b.n	bbf4a <_strtod_l+0x8c2>
   bbf74:	4613      	mov	r3, r2
   bbf76:	e7e8      	b.n	bbf4a <_strtod_l+0x8c2>
   bbf78:	ea53 030a 	orrs.w	r3, r3, sl
   bbf7c:	d08c      	beq.n	bbe98 <_strtod_l+0x810>
   bbf7e:	9b08      	ldr	r3, [sp, #32]
   bbf80:	b1db      	cbz	r3, bbfba <_strtod_l+0x932>
   bbf82:	423b      	tst	r3, r7
   bbf84:	d0ef      	beq.n	bbf66 <_strtod_l+0x8de>
   bbf86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf88:	9a04      	ldr	r2, [sp, #16]
   bbf8a:	4650      	mov	r0, sl
   bbf8c:	4659      	mov	r1, fp
   bbf8e:	b1c3      	cbz	r3, bbfc2 <_strtod_l+0x93a>
   bbf90:	f7ff fb5c 	bl	bb64c <sulp>
   bbf94:	4602      	mov	r2, r0
   bbf96:	460b      	mov	r3, r1
   bbf98:	ec51 0b18 	vmov	r0, r1, d8
   bbf9c:	f7fe fd26 	bl	ba9ec <__adddf3>
   bbfa0:	4682      	mov	sl, r0
   bbfa2:	468b      	mov	fp, r1
   bbfa4:	e7df      	b.n	bbf66 <_strtod_l+0x8de>
   bbfa6:	4013      	ands	r3, r2
   bbfa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbfac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbfb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbfb4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbfb8:	e7d5      	b.n	bbf66 <_strtod_l+0x8de>
   bbfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbfbc:	ea13 0f0a 	tst.w	r3, sl
   bbfc0:	e7e0      	b.n	bbf84 <_strtod_l+0x8fc>
   bbfc2:	f7ff fb43 	bl	bb64c <sulp>
   bbfc6:	4602      	mov	r2, r0
   bbfc8:	460b      	mov	r3, r1
   bbfca:	ec51 0b18 	vmov	r0, r1, d8
   bbfce:	f7fe fd0b 	bl	ba9e8 <__aeabi_dsub>
   bbfd2:	2200      	movs	r2, #0
   bbfd4:	2300      	movs	r3, #0
   bbfd6:	4682      	mov	sl, r0
   bbfd8:	468b      	mov	fp, r1
   bbfda:	f7ff f925 	bl	bb228 <__aeabi_dcmpeq>
   bbfde:	2800      	cmp	r0, #0
   bbfe0:	d0c1      	beq.n	bbf66 <_strtod_l+0x8de>
   bbfe2:	e611      	b.n	bbc08 <_strtod_l+0x580>
   bbfe4:	fffffc02 	.word	0xfffffc02
   bbfe8:	7ff00000 	.word	0x7ff00000
   bbfec:	39500000 	.word	0x39500000
   bbff0:	000fffff 	.word	0x000fffff
   bbff4:	7fefffff 	.word	0x7fefffff
   bbff8:	000be140 	.word	0x000be140
   bbffc:	4631      	mov	r1, r6
   bbffe:	4628      	mov	r0, r5
   bc000:	f001 fa6e 	bl	bd4e0 <__ratio>
   bc004:	ec59 8b10 	vmov	r8, r9, d0
   bc008:	ee10 0a10 	vmov	r0, s0
   bc00c:	2200      	movs	r2, #0
   bc00e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc012:	4649      	mov	r1, r9
   bc014:	f7ff f91c 	bl	bb250 <__aeabi_dcmple>
   bc018:	2800      	cmp	r0, #0
   bc01a:	d07a      	beq.n	bc112 <_strtod_l+0xa8a>
   bc01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc01e:	2b00      	cmp	r3, #0
   bc020:	d04a      	beq.n	bc0b8 <_strtod_l+0xa30>
   bc022:	4b95      	ldr	r3, [pc, #596]	; (bc278 <_strtod_l+0xbf0>)
   bc024:	2200      	movs	r2, #0
   bc026:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc02a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc278 <_strtod_l+0xbf0>
   bc02e:	f04f 0800 	mov.w	r8, #0
   bc032:	4b92      	ldr	r3, [pc, #584]	; (bc27c <_strtod_l+0xbf4>)
   bc034:	403b      	ands	r3, r7
   bc036:	930d      	str	r3, [sp, #52]	; 0x34
   bc038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc03a:	4b91      	ldr	r3, [pc, #580]	; (bc280 <_strtod_l+0xbf8>)
   bc03c:	429a      	cmp	r2, r3
   bc03e:	f040 80b0 	bne.w	bc1a2 <_strtod_l+0xb1a>
   bc042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc046:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc04a:	ec4b ab10 	vmov	d0, sl, fp
   bc04e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc052:	f001 f96d 	bl	bd330 <__ulp>
   bc056:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc05a:	ec53 2b10 	vmov	r2, r3, d0
   bc05e:	f7fe fe7b 	bl	bad58 <__aeabi_dmul>
   bc062:	4652      	mov	r2, sl
   bc064:	465b      	mov	r3, fp
   bc066:	f7fe fcc1 	bl	ba9ec <__adddf3>
   bc06a:	460b      	mov	r3, r1
   bc06c:	4983      	ldr	r1, [pc, #524]	; (bc27c <_strtod_l+0xbf4>)
   bc06e:	4a85      	ldr	r2, [pc, #532]	; (bc284 <_strtod_l+0xbfc>)
   bc070:	4019      	ands	r1, r3
   bc072:	4291      	cmp	r1, r2
   bc074:	4682      	mov	sl, r0
   bc076:	d960      	bls.n	bc13a <_strtod_l+0xab2>
   bc078:	ee18 3a90 	vmov	r3, s17
   bc07c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc080:	4293      	cmp	r3, r2
   bc082:	d104      	bne.n	bc08e <_strtod_l+0xa06>
   bc084:	ee18 3a10 	vmov	r3, s16
   bc088:	3301      	adds	r3, #1
   bc08a:	f43f ad45 	beq.w	bbb18 <_strtod_l+0x490>
   bc08e:	f8df b200 	ldr.w	fp, [pc, #512]	; bc290 <_strtod_l+0xc08>
   bc092:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc096:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc098:	4620      	mov	r0, r4
   bc09a:	f000 fe17 	bl	bcccc <_Bfree>
   bc09e:	9905      	ldr	r1, [sp, #20]
   bc0a0:	4620      	mov	r0, r4
   bc0a2:	f000 fe13 	bl	bcccc <_Bfree>
   bc0a6:	4631      	mov	r1, r6
   bc0a8:	4620      	mov	r0, r4
   bc0aa:	f000 fe0f 	bl	bcccc <_Bfree>
   bc0ae:	4629      	mov	r1, r5
   bc0b0:	4620      	mov	r0, r4
   bc0b2:	f000 fe0b 	bl	bcccc <_Bfree>
   bc0b6:	e61a      	b.n	bbcee <_strtod_l+0x666>
   bc0b8:	f1ba 0f00 	cmp.w	sl, #0
   bc0bc:	d11b      	bne.n	bc0f6 <_strtod_l+0xa6e>
   bc0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc0c2:	b9f3      	cbnz	r3, bc102 <_strtod_l+0xa7a>
   bc0c4:	4b6c      	ldr	r3, [pc, #432]	; (bc278 <_strtod_l+0xbf0>)
   bc0c6:	2200      	movs	r2, #0
   bc0c8:	4640      	mov	r0, r8
   bc0ca:	4649      	mov	r1, r9
   bc0cc:	f7ff f8b6 	bl	bb23c <__aeabi_dcmplt>
   bc0d0:	b9d0      	cbnz	r0, bc108 <_strtod_l+0xa80>
   bc0d2:	4640      	mov	r0, r8
   bc0d4:	4649      	mov	r1, r9
   bc0d6:	4b6c      	ldr	r3, [pc, #432]	; (bc288 <_strtod_l+0xc00>)
   bc0d8:	2200      	movs	r2, #0
   bc0da:	f7fe fe3d 	bl	bad58 <__aeabi_dmul>
   bc0de:	4680      	mov	r8, r0
   bc0e0:	4689      	mov	r9, r1
   bc0e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc0e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc0ea:	9315      	str	r3, [sp, #84]	; 0x54
   bc0ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc0f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc0f4:	e79d      	b.n	bc032 <_strtod_l+0x9aa>
   bc0f6:	f1ba 0f01 	cmp.w	sl, #1
   bc0fa:	d102      	bne.n	bc102 <_strtod_l+0xa7a>
   bc0fc:	2f00      	cmp	r7, #0
   bc0fe:	f43f ad83 	beq.w	bbc08 <_strtod_l+0x580>
   bc102:	4b62      	ldr	r3, [pc, #392]	; (bc28c <_strtod_l+0xc04>)
   bc104:	2200      	movs	r2, #0
   bc106:	e78e      	b.n	bc026 <_strtod_l+0x99e>
   bc108:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc288 <_strtod_l+0xc00>
   bc10c:	f04f 0800 	mov.w	r8, #0
   bc110:	e7e7      	b.n	bc0e2 <_strtod_l+0xa5a>
   bc112:	4b5d      	ldr	r3, [pc, #372]	; (bc288 <_strtod_l+0xc00>)
   bc114:	4640      	mov	r0, r8
   bc116:	4649      	mov	r1, r9
   bc118:	2200      	movs	r2, #0
   bc11a:	f7fe fe1d 	bl	bad58 <__aeabi_dmul>
   bc11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc120:	4680      	mov	r8, r0
   bc122:	4689      	mov	r9, r1
   bc124:	b933      	cbnz	r3, bc134 <_strtod_l+0xaac>
   bc126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc12a:	900e      	str	r0, [sp, #56]	; 0x38
   bc12c:	930f      	str	r3, [sp, #60]	; 0x3c
   bc12e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc132:	e7dd      	b.n	bc0f0 <_strtod_l+0xa68>
   bc134:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc138:	e7f9      	b.n	bc12e <_strtod_l+0xaa6>
   bc13a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc13e:	9b04      	ldr	r3, [sp, #16]
   bc140:	2b00      	cmp	r3, #0
   bc142:	d1a8      	bne.n	bc096 <_strtod_l+0xa0e>
   bc144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc14a:	0d1b      	lsrs	r3, r3, #20
   bc14c:	051b      	lsls	r3, r3, #20
   bc14e:	429a      	cmp	r2, r3
   bc150:	d1a1      	bne.n	bc096 <_strtod_l+0xa0e>
   bc152:	4640      	mov	r0, r8
   bc154:	4649      	mov	r1, r9
   bc156:	f001 fa57 	bl	bd608 <__aeabi_d2lz>
   bc15a:	f7fe fdcf 	bl	bacfc <__aeabi_l2d>
   bc15e:	4602      	mov	r2, r0
   bc160:	460b      	mov	r3, r1
   bc162:	4640      	mov	r0, r8
   bc164:	4649      	mov	r1, r9
   bc166:	f7fe fc3f 	bl	ba9e8 <__aeabi_dsub>
   bc16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc170:	ea43 030a 	orr.w	r3, r3, sl
   bc174:	4313      	orrs	r3, r2
   bc176:	4680      	mov	r8, r0
   bc178:	4689      	mov	r9, r1
   bc17a:	d055      	beq.n	bc228 <_strtod_l+0xba0>
   bc17c:	a336      	add	r3, pc, #216	; (adr r3, bc258 <_strtod_l+0xbd0>)
   bc17e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc182:	f7ff f85b 	bl	bb23c <__aeabi_dcmplt>
   bc186:	2800      	cmp	r0, #0
   bc188:	f47f acd0 	bne.w	bbb2c <_strtod_l+0x4a4>
   bc18c:	a334      	add	r3, pc, #208	; (adr r3, bc260 <_strtod_l+0xbd8>)
   bc18e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc192:	4640      	mov	r0, r8
   bc194:	4649      	mov	r1, r9
   bc196:	f7ff f86f 	bl	bb278 <__aeabi_dcmpgt>
   bc19a:	2800      	cmp	r0, #0
   bc19c:	f43f af7b 	beq.w	bc096 <_strtod_l+0xa0e>
   bc1a0:	e4c4      	b.n	bbb2c <_strtod_l+0x4a4>
   bc1a2:	9b04      	ldr	r3, [sp, #16]
   bc1a4:	b333      	cbz	r3, bc1f4 <_strtod_l+0xb6c>
   bc1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc1a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc1ac:	d822      	bhi.n	bc1f4 <_strtod_l+0xb6c>
   bc1ae:	a32e      	add	r3, pc, #184	; (adr r3, bc268 <_strtod_l+0xbe0>)
   bc1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc1b4:	4640      	mov	r0, r8
   bc1b6:	4649      	mov	r1, r9
   bc1b8:	f7ff f84a 	bl	bb250 <__aeabi_dcmple>
   bc1bc:	b1a0      	cbz	r0, bc1e8 <_strtod_l+0xb60>
   bc1be:	4649      	mov	r1, r9
   bc1c0:	4640      	mov	r0, r8
   bc1c2:	f7ff f8a1 	bl	bb308 <__aeabi_d2uiz>
   bc1c6:	2801      	cmp	r0, #1
   bc1c8:	bf38      	it	cc
   bc1ca:	2001      	movcc	r0, #1
   bc1cc:	f7fe fd4a 	bl	bac64 <__aeabi_ui2d>
   bc1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc1d2:	4680      	mov	r8, r0
   bc1d4:	4689      	mov	r9, r1
   bc1d6:	bb23      	cbnz	r3, bc222 <_strtod_l+0xb9a>
   bc1d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc1dc:	9010      	str	r0, [sp, #64]	; 0x40
   bc1de:	9311      	str	r3, [sp, #68]	; 0x44
   bc1e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc1e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc1ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc1ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc1f0:	1a9b      	subs	r3, r3, r2
   bc1f2:	9309      	str	r3, [sp, #36]	; 0x24
   bc1f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc1f8:	eeb0 0a48 	vmov.f32	s0, s16
   bc1fc:	eef0 0a68 	vmov.f32	s1, s17
   bc200:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc204:	f001 f894 	bl	bd330 <__ulp>
   bc208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc20c:	ec53 2b10 	vmov	r2, r3, d0
   bc210:	f7fe fda2 	bl	bad58 <__aeabi_dmul>
   bc214:	ec53 2b18 	vmov	r2, r3, d8
   bc218:	f7fe fbe8 	bl	ba9ec <__adddf3>
   bc21c:	4682      	mov	sl, r0
   bc21e:	468b      	mov	fp, r1
   bc220:	e78d      	b.n	bc13e <_strtod_l+0xab6>
   bc222:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc226:	e7db      	b.n	bc1e0 <_strtod_l+0xb58>
   bc228:	a311      	add	r3, pc, #68	; (adr r3, bc270 <_strtod_l+0xbe8>)
   bc22a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc22e:	f7ff f805 	bl	bb23c <__aeabi_dcmplt>
   bc232:	e7b2      	b.n	bc19a <_strtod_l+0xb12>
   bc234:	2300      	movs	r3, #0
   bc236:	930a      	str	r3, [sp, #40]	; 0x28
   bc238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc23a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc23c:	6013      	str	r3, [r2, #0]
   bc23e:	f7ff ba6b 	b.w	bb718 <_strtod_l+0x90>
   bc242:	2a65      	cmp	r2, #101	; 0x65
   bc244:	f43f ab5f 	beq.w	bb906 <_strtod_l+0x27e>
   bc248:	2a45      	cmp	r2, #69	; 0x45
   bc24a:	f43f ab5c 	beq.w	bb906 <_strtod_l+0x27e>
   bc24e:	2301      	movs	r3, #1
   bc250:	f7ff bb94 	b.w	bb97c <_strtod_l+0x2f4>
   bc254:	f3af 8000 	nop.w
   bc258:	94a03595 	.word	0x94a03595
   bc25c:	3fdfffff 	.word	0x3fdfffff
   bc260:	35afe535 	.word	0x35afe535
   bc264:	3fe00000 	.word	0x3fe00000
   bc268:	ffc00000 	.word	0xffc00000
   bc26c:	41dfffff 	.word	0x41dfffff
   bc270:	94a03595 	.word	0x94a03595
   bc274:	3fcfffff 	.word	0x3fcfffff
   bc278:	3ff00000 	.word	0x3ff00000
   bc27c:	7ff00000 	.word	0x7ff00000
   bc280:	7fe00000 	.word	0x7fe00000
   bc284:	7c9fffff 	.word	0x7c9fffff
   bc288:	3fe00000 	.word	0x3fe00000
   bc28c:	bff00000 	.word	0xbff00000
   bc290:	7fefffff 	.word	0x7fefffff

000bc294 <strtod>:
   bc294:	460a      	mov	r2, r1
   bc296:	4601      	mov	r1, r0
   bc298:	4802      	ldr	r0, [pc, #8]	; (bc2a4 <strtod+0x10>)
   bc29a:	4b03      	ldr	r3, [pc, #12]	; (bc2a8 <strtod+0x14>)
   bc29c:	6800      	ldr	r0, [r0, #0]
   bc29e:	f7ff b9f3 	b.w	bb688 <_strtod_l>
   bc2a2:	bf00      	nop
   bc2a4:	2003e13c 	.word	0x2003e13c
   bc2a8:	2003e1a8 	.word	0x2003e1a8

000bc2ac <strtok>:
   bc2ac:	4b16      	ldr	r3, [pc, #88]	; (bc308 <strtok+0x5c>)
   bc2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc2b0:	681e      	ldr	r6, [r3, #0]
   bc2b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bc2b4:	4605      	mov	r5, r0
   bc2b6:	b9fc      	cbnz	r4, bc2f8 <strtok+0x4c>
   bc2b8:	2050      	movs	r0, #80	; 0x50
   bc2ba:	9101      	str	r1, [sp, #4]
   bc2bc:	f7fa fe02 	bl	b6ec4 <malloc>
   bc2c0:	9901      	ldr	r1, [sp, #4]
   bc2c2:	65b0      	str	r0, [r6, #88]	; 0x58
   bc2c4:	4602      	mov	r2, r0
   bc2c6:	b920      	cbnz	r0, bc2d2 <strtok+0x26>
   bc2c8:	4b10      	ldr	r3, [pc, #64]	; (bc30c <strtok+0x60>)
   bc2ca:	4811      	ldr	r0, [pc, #68]	; (bc310 <strtok+0x64>)
   bc2cc:	2157      	movs	r1, #87	; 0x57
   bc2ce:	f7fa fe39 	bl	b6f44 <__assert_func>
   bc2d2:	e9c0 4400 	strd	r4, r4, [r0]
   bc2d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bc2da:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bc2de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bc2e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bc2e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bc2ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bc2ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bc2f2:	6184      	str	r4, [r0, #24]
   bc2f4:	7704      	strb	r4, [r0, #28]
   bc2f6:	6244      	str	r4, [r0, #36]	; 0x24
   bc2f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bc2fa:	2301      	movs	r3, #1
   bc2fc:	4628      	mov	r0, r5
   bc2fe:	b002      	add	sp, #8
   bc300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc304:	f000 b806 	b.w	bc314 <__strtok_r>
   bc308:	2003e13c 	.word	0x2003e13c
   bc30c:	000be0a1 	.word	0x000be0a1
   bc310:	000be168 	.word	0x000be168

000bc314 <__strtok_r>:
   bc314:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc316:	b908      	cbnz	r0, bc31c <__strtok_r+0x8>
   bc318:	6810      	ldr	r0, [r2, #0]
   bc31a:	b188      	cbz	r0, bc340 <__strtok_r+0x2c>
   bc31c:	4604      	mov	r4, r0
   bc31e:	4620      	mov	r0, r4
   bc320:	f814 5b01 	ldrb.w	r5, [r4], #1
   bc324:	460f      	mov	r7, r1
   bc326:	f817 6b01 	ldrb.w	r6, [r7], #1
   bc32a:	b91e      	cbnz	r6, bc334 <__strtok_r+0x20>
   bc32c:	b965      	cbnz	r5, bc348 <__strtok_r+0x34>
   bc32e:	6015      	str	r5, [r2, #0]
   bc330:	4628      	mov	r0, r5
   bc332:	e005      	b.n	bc340 <__strtok_r+0x2c>
   bc334:	42b5      	cmp	r5, r6
   bc336:	d1f6      	bne.n	bc326 <__strtok_r+0x12>
   bc338:	2b00      	cmp	r3, #0
   bc33a:	d1f0      	bne.n	bc31e <__strtok_r+0xa>
   bc33c:	6014      	str	r4, [r2, #0]
   bc33e:	7003      	strb	r3, [r0, #0]
   bc340:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc342:	461c      	mov	r4, r3
   bc344:	e00c      	b.n	bc360 <__strtok_r+0x4c>
   bc346:	b915      	cbnz	r5, bc34e <__strtok_r+0x3a>
   bc348:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc34c:	460e      	mov	r6, r1
   bc34e:	f816 5b01 	ldrb.w	r5, [r6], #1
   bc352:	42ab      	cmp	r3, r5
   bc354:	d1f7      	bne.n	bc346 <__strtok_r+0x32>
   bc356:	2b00      	cmp	r3, #0
   bc358:	d0f3      	beq.n	bc342 <__strtok_r+0x2e>
   bc35a:	2300      	movs	r3, #0
   bc35c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bc360:	6014      	str	r4, [r2, #0]
   bc362:	e7ed      	b.n	bc340 <__strtok_r+0x2c>

000bc364 <_strtol_l.constprop.0>:
   bc364:	2b01      	cmp	r3, #1
   bc366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc36a:	d001      	beq.n	bc370 <_strtol_l.constprop.0+0xc>
   bc36c:	2b24      	cmp	r3, #36	; 0x24
   bc36e:	d906      	bls.n	bc37e <_strtol_l.constprop.0+0x1a>
   bc370:	f7fa fde0 	bl	b6f34 <__errno>
   bc374:	2316      	movs	r3, #22
   bc376:	6003      	str	r3, [r0, #0]
   bc378:	2000      	movs	r0, #0
   bc37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc37e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc464 <_strtol_l.constprop.0+0x100>
   bc382:	460d      	mov	r5, r1
   bc384:	462e      	mov	r6, r5
   bc386:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc38a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc38e:	f017 0708 	ands.w	r7, r7, #8
   bc392:	d1f7      	bne.n	bc384 <_strtol_l.constprop.0+0x20>
   bc394:	2c2d      	cmp	r4, #45	; 0x2d
   bc396:	d132      	bne.n	bc3fe <_strtol_l.constprop.0+0x9a>
   bc398:	782c      	ldrb	r4, [r5, #0]
   bc39a:	2701      	movs	r7, #1
   bc39c:	1cb5      	adds	r5, r6, #2
   bc39e:	2b00      	cmp	r3, #0
   bc3a0:	d05b      	beq.n	bc45a <_strtol_l.constprop.0+0xf6>
   bc3a2:	2b10      	cmp	r3, #16
   bc3a4:	d109      	bne.n	bc3ba <_strtol_l.constprop.0+0x56>
   bc3a6:	2c30      	cmp	r4, #48	; 0x30
   bc3a8:	d107      	bne.n	bc3ba <_strtol_l.constprop.0+0x56>
   bc3aa:	782c      	ldrb	r4, [r5, #0]
   bc3ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc3b0:	2c58      	cmp	r4, #88	; 0x58
   bc3b2:	d14d      	bne.n	bc450 <_strtol_l.constprop.0+0xec>
   bc3b4:	786c      	ldrb	r4, [r5, #1]
   bc3b6:	2310      	movs	r3, #16
   bc3b8:	3502      	adds	r5, #2
   bc3ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc3be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc3c2:	f04f 0c00 	mov.w	ip, #0
   bc3c6:	fbb8 f9f3 	udiv	r9, r8, r3
   bc3ca:	4666      	mov	r6, ip
   bc3cc:	fb03 8a19 	mls	sl, r3, r9, r8
   bc3d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc3d4:	f1be 0f09 	cmp.w	lr, #9
   bc3d8:	d816      	bhi.n	bc408 <_strtol_l.constprop.0+0xa4>
   bc3da:	4674      	mov	r4, lr
   bc3dc:	42a3      	cmp	r3, r4
   bc3de:	dd24      	ble.n	bc42a <_strtol_l.constprop.0+0xc6>
   bc3e0:	f1bc 0f00 	cmp.w	ip, #0
   bc3e4:	db1e      	blt.n	bc424 <_strtol_l.constprop.0+0xc0>
   bc3e6:	45b1      	cmp	r9, r6
   bc3e8:	d31c      	bcc.n	bc424 <_strtol_l.constprop.0+0xc0>
   bc3ea:	d101      	bne.n	bc3f0 <_strtol_l.constprop.0+0x8c>
   bc3ec:	45a2      	cmp	sl, r4
   bc3ee:	db19      	blt.n	bc424 <_strtol_l.constprop.0+0xc0>
   bc3f0:	fb06 4603 	mla	r6, r6, r3, r4
   bc3f4:	f04f 0c01 	mov.w	ip, #1
   bc3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc3fc:	e7e8      	b.n	bc3d0 <_strtol_l.constprop.0+0x6c>
   bc3fe:	2c2b      	cmp	r4, #43	; 0x2b
   bc400:	bf04      	itt	eq
   bc402:	782c      	ldrbeq	r4, [r5, #0]
   bc404:	1cb5      	addeq	r5, r6, #2
   bc406:	e7ca      	b.n	bc39e <_strtol_l.constprop.0+0x3a>
   bc408:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc40c:	f1be 0f19 	cmp.w	lr, #25
   bc410:	d801      	bhi.n	bc416 <_strtol_l.constprop.0+0xb2>
   bc412:	3c37      	subs	r4, #55	; 0x37
   bc414:	e7e2      	b.n	bc3dc <_strtol_l.constprop.0+0x78>
   bc416:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc41a:	f1be 0f19 	cmp.w	lr, #25
   bc41e:	d804      	bhi.n	bc42a <_strtol_l.constprop.0+0xc6>
   bc420:	3c57      	subs	r4, #87	; 0x57
   bc422:	e7db      	b.n	bc3dc <_strtol_l.constprop.0+0x78>
   bc424:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc428:	e7e6      	b.n	bc3f8 <_strtol_l.constprop.0+0x94>
   bc42a:	f1bc 0f00 	cmp.w	ip, #0
   bc42e:	da05      	bge.n	bc43c <_strtol_l.constprop.0+0xd8>
   bc430:	2322      	movs	r3, #34	; 0x22
   bc432:	6003      	str	r3, [r0, #0]
   bc434:	4646      	mov	r6, r8
   bc436:	b942      	cbnz	r2, bc44a <_strtol_l.constprop.0+0xe6>
   bc438:	4630      	mov	r0, r6
   bc43a:	e79e      	b.n	bc37a <_strtol_l.constprop.0+0x16>
   bc43c:	b107      	cbz	r7, bc440 <_strtol_l.constprop.0+0xdc>
   bc43e:	4276      	negs	r6, r6
   bc440:	2a00      	cmp	r2, #0
   bc442:	d0f9      	beq.n	bc438 <_strtol_l.constprop.0+0xd4>
   bc444:	f1bc 0f00 	cmp.w	ip, #0
   bc448:	d000      	beq.n	bc44c <_strtol_l.constprop.0+0xe8>
   bc44a:	1e69      	subs	r1, r5, #1
   bc44c:	6011      	str	r1, [r2, #0]
   bc44e:	e7f3      	b.n	bc438 <_strtol_l.constprop.0+0xd4>
   bc450:	2430      	movs	r4, #48	; 0x30
   bc452:	2b00      	cmp	r3, #0
   bc454:	d1b1      	bne.n	bc3ba <_strtol_l.constprop.0+0x56>
   bc456:	2308      	movs	r3, #8
   bc458:	e7af      	b.n	bc3ba <_strtol_l.constprop.0+0x56>
   bc45a:	2c30      	cmp	r4, #48	; 0x30
   bc45c:	d0a5      	beq.n	bc3aa <_strtol_l.constprop.0+0x46>
   bc45e:	230a      	movs	r3, #10
   bc460:	e7ab      	b.n	bc3ba <_strtol_l.constprop.0+0x56>
   bc462:	bf00      	nop
   bc464:	000be1c4 	.word	0x000be1c4

000bc468 <strtol>:
   bc468:	4613      	mov	r3, r2
   bc46a:	460a      	mov	r2, r1
   bc46c:	4601      	mov	r1, r0
   bc46e:	4802      	ldr	r0, [pc, #8]	; (bc478 <strtol+0x10>)
   bc470:	6800      	ldr	r0, [r0, #0]
   bc472:	f7ff bf77 	b.w	bc364 <_strtol_l.constprop.0>
   bc476:	bf00      	nop
   bc478:	2003e13c 	.word	0x2003e13c

000bc47c <__register_exitproc>:
   bc47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc480:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc53c <__register_exitproc+0xc0>
   bc484:	4606      	mov	r6, r0
   bc486:	f8d8 0000 	ldr.w	r0, [r8]
   bc48a:	461f      	mov	r7, r3
   bc48c:	460d      	mov	r5, r1
   bc48e:	4691      	mov	r9, r2
   bc490:	f000 fbc6 	bl	bcc20 <__retarget_lock_acquire_recursive>
   bc494:	4b25      	ldr	r3, [pc, #148]	; (bc52c <__register_exitproc+0xb0>)
   bc496:	681c      	ldr	r4, [r3, #0]
   bc498:	b934      	cbnz	r4, bc4a8 <__register_exitproc+0x2c>
   bc49a:	4c25      	ldr	r4, [pc, #148]	; (bc530 <__register_exitproc+0xb4>)
   bc49c:	601c      	str	r4, [r3, #0]
   bc49e:	4b25      	ldr	r3, [pc, #148]	; (bc534 <__register_exitproc+0xb8>)
   bc4a0:	b113      	cbz	r3, bc4a8 <__register_exitproc+0x2c>
   bc4a2:	681b      	ldr	r3, [r3, #0]
   bc4a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc4a8:	6863      	ldr	r3, [r4, #4]
   bc4aa:	2b1f      	cmp	r3, #31
   bc4ac:	dd07      	ble.n	bc4be <__register_exitproc+0x42>
   bc4ae:	f8d8 0000 	ldr.w	r0, [r8]
   bc4b2:	f000 fbb7 	bl	bcc24 <__retarget_lock_release_recursive>
   bc4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc4be:	b34e      	cbz	r6, bc514 <__register_exitproc+0x98>
   bc4c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc4c4:	b988      	cbnz	r0, bc4ea <__register_exitproc+0x6e>
   bc4c6:	4b1c      	ldr	r3, [pc, #112]	; (bc538 <__register_exitproc+0xbc>)
   bc4c8:	b923      	cbnz	r3, bc4d4 <__register_exitproc+0x58>
   bc4ca:	f8d8 0000 	ldr.w	r0, [r8]
   bc4ce:	f000 fba8 	bl	bcc22 <__retarget_lock_release>
   bc4d2:	e7f0      	b.n	bc4b6 <__register_exitproc+0x3a>
   bc4d4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc4d8:	f7fa fcf4 	bl	b6ec4 <malloc>
   bc4dc:	2800      	cmp	r0, #0
   bc4de:	d0f4      	beq.n	bc4ca <__register_exitproc+0x4e>
   bc4e0:	2300      	movs	r3, #0
   bc4e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc4e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc4ea:	6863      	ldr	r3, [r4, #4]
   bc4ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc4f0:	2201      	movs	r2, #1
   bc4f2:	409a      	lsls	r2, r3
   bc4f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc4f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc4fc:	4313      	orrs	r3, r2
   bc4fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc502:	2e02      	cmp	r6, #2
   bc504:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc508:	bf02      	ittt	eq
   bc50a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc50e:	4313      	orreq	r3, r2
   bc510:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc514:	6863      	ldr	r3, [r4, #4]
   bc516:	f8d8 0000 	ldr.w	r0, [r8]
   bc51a:	1c5a      	adds	r2, r3, #1
   bc51c:	3302      	adds	r3, #2
   bc51e:	6062      	str	r2, [r4, #4]
   bc520:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc524:	f000 fb7e 	bl	bcc24 <__retarget_lock_release_recursive>
   bc528:	2000      	movs	r0, #0
   bc52a:	e7c6      	b.n	bc4ba <__register_exitproc+0x3e>
   bc52c:	2003e7ec 	.word	0x2003e7ec
   bc530:	2003e760 	.word	0x2003e760
   bc534:	00000000 	.word	0x00000000
   bc538:	000b6ec5 	.word	0x000b6ec5
   bc53c:	2003e1a0 	.word	0x2003e1a0

000bc540 <rshift>:
   bc540:	6903      	ldr	r3, [r0, #16]
   bc542:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc54a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc54e:	f100 0414 	add.w	r4, r0, #20
   bc552:	dd45      	ble.n	bc5e0 <rshift+0xa0>
   bc554:	f011 011f 	ands.w	r1, r1, #31
   bc558:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc55c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc560:	d10c      	bne.n	bc57c <rshift+0x3c>
   bc562:	f100 0710 	add.w	r7, r0, #16
   bc566:	4629      	mov	r1, r5
   bc568:	42b1      	cmp	r1, r6
   bc56a:	d334      	bcc.n	bc5d6 <rshift+0x96>
   bc56c:	1a9b      	subs	r3, r3, r2
   bc56e:	009b      	lsls	r3, r3, #2
   bc570:	1eea      	subs	r2, r5, #3
   bc572:	4296      	cmp	r6, r2
   bc574:	bf38      	it	cc
   bc576:	2300      	movcc	r3, #0
   bc578:	4423      	add	r3, r4
   bc57a:	e015      	b.n	bc5a8 <rshift+0x68>
   bc57c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc580:	f1c1 0820 	rsb	r8, r1, #32
   bc584:	40cf      	lsrs	r7, r1
   bc586:	f105 0e04 	add.w	lr, r5, #4
   bc58a:	46a1      	mov	r9, r4
   bc58c:	4576      	cmp	r6, lr
   bc58e:	46f4      	mov	ip, lr
   bc590:	d815      	bhi.n	bc5be <rshift+0x7e>
   bc592:	1a9a      	subs	r2, r3, r2
   bc594:	0092      	lsls	r2, r2, #2
   bc596:	3a04      	subs	r2, #4
   bc598:	3501      	adds	r5, #1
   bc59a:	42ae      	cmp	r6, r5
   bc59c:	bf38      	it	cc
   bc59e:	2200      	movcc	r2, #0
   bc5a0:	18a3      	adds	r3, r4, r2
   bc5a2:	50a7      	str	r7, [r4, r2]
   bc5a4:	b107      	cbz	r7, bc5a8 <rshift+0x68>
   bc5a6:	3304      	adds	r3, #4
   bc5a8:	1b1a      	subs	r2, r3, r4
   bc5aa:	42a3      	cmp	r3, r4
   bc5ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc5b0:	bf08      	it	eq
   bc5b2:	2300      	moveq	r3, #0
   bc5b4:	6102      	str	r2, [r0, #16]
   bc5b6:	bf08      	it	eq
   bc5b8:	6143      	streq	r3, [r0, #20]
   bc5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc5be:	f8dc c000 	ldr.w	ip, [ip]
   bc5c2:	fa0c fc08 	lsl.w	ip, ip, r8
   bc5c6:	ea4c 0707 	orr.w	r7, ip, r7
   bc5ca:	f849 7b04 	str.w	r7, [r9], #4
   bc5ce:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc5d2:	40cf      	lsrs	r7, r1
   bc5d4:	e7da      	b.n	bc58c <rshift+0x4c>
   bc5d6:	f851 cb04 	ldr.w	ip, [r1], #4
   bc5da:	f847 cf04 	str.w	ip, [r7, #4]!
   bc5de:	e7c3      	b.n	bc568 <rshift+0x28>
   bc5e0:	4623      	mov	r3, r4
   bc5e2:	e7e1      	b.n	bc5a8 <rshift+0x68>

000bc5e4 <__hexdig_fun>:
   bc5e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc5e8:	2b09      	cmp	r3, #9
   bc5ea:	d802      	bhi.n	bc5f2 <__hexdig_fun+0xe>
   bc5ec:	3820      	subs	r0, #32
   bc5ee:	b2c0      	uxtb	r0, r0
   bc5f0:	4770      	bx	lr
   bc5f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc5f6:	2b05      	cmp	r3, #5
   bc5f8:	d801      	bhi.n	bc5fe <__hexdig_fun+0x1a>
   bc5fa:	3847      	subs	r0, #71	; 0x47
   bc5fc:	e7f7      	b.n	bc5ee <__hexdig_fun+0xa>
   bc5fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc602:	2b05      	cmp	r3, #5
   bc604:	d801      	bhi.n	bc60a <__hexdig_fun+0x26>
   bc606:	3827      	subs	r0, #39	; 0x27
   bc608:	e7f1      	b.n	bc5ee <__hexdig_fun+0xa>
   bc60a:	2000      	movs	r0, #0
   bc60c:	4770      	bx	lr
	...

000bc610 <__gethex>:
   bc610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc614:	ed2d 8b02 	vpush	{d8}
   bc618:	b089      	sub	sp, #36	; 0x24
   bc61a:	ee08 0a10 	vmov	s16, r0
   bc61e:	9304      	str	r3, [sp, #16]
   bc620:	4bb4      	ldr	r3, [pc, #720]	; (bc8f4 <__gethex+0x2e4>)
   bc622:	681b      	ldr	r3, [r3, #0]
   bc624:	9301      	str	r3, [sp, #4]
   bc626:	4618      	mov	r0, r3
   bc628:	468b      	mov	fp, r1
   bc62a:	4690      	mov	r8, r2
   bc62c:	f7fe ffb5 	bl	bb59a <strlen>
   bc630:	9b01      	ldr	r3, [sp, #4]
   bc632:	f8db 2000 	ldr.w	r2, [fp]
   bc636:	4403      	add	r3, r0
   bc638:	4682      	mov	sl, r0
   bc63a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc63e:	9305      	str	r3, [sp, #20]
   bc640:	1c93      	adds	r3, r2, #2
   bc642:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc646:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc64a:	32fe      	adds	r2, #254	; 0xfe
   bc64c:	18d1      	adds	r1, r2, r3
   bc64e:	461f      	mov	r7, r3
   bc650:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc654:	9100      	str	r1, [sp, #0]
   bc656:	2830      	cmp	r0, #48	; 0x30
   bc658:	d0f8      	beq.n	bc64c <__gethex+0x3c>
   bc65a:	f7ff ffc3 	bl	bc5e4 <__hexdig_fun>
   bc65e:	4604      	mov	r4, r0
   bc660:	2800      	cmp	r0, #0
   bc662:	d13a      	bne.n	bc6da <__gethex+0xca>
   bc664:	9901      	ldr	r1, [sp, #4]
   bc666:	4652      	mov	r2, sl
   bc668:	4638      	mov	r0, r7
   bc66a:	f7fe ff9e 	bl	bb5aa <strncmp>
   bc66e:	4605      	mov	r5, r0
   bc670:	2800      	cmp	r0, #0
   bc672:	d168      	bne.n	bc746 <__gethex+0x136>
   bc674:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc678:	eb07 060a 	add.w	r6, r7, sl
   bc67c:	f7ff ffb2 	bl	bc5e4 <__hexdig_fun>
   bc680:	2800      	cmp	r0, #0
   bc682:	d062      	beq.n	bc74a <__gethex+0x13a>
   bc684:	4633      	mov	r3, r6
   bc686:	7818      	ldrb	r0, [r3, #0]
   bc688:	2830      	cmp	r0, #48	; 0x30
   bc68a:	461f      	mov	r7, r3
   bc68c:	f103 0301 	add.w	r3, r3, #1
   bc690:	d0f9      	beq.n	bc686 <__gethex+0x76>
   bc692:	f7ff ffa7 	bl	bc5e4 <__hexdig_fun>
   bc696:	2301      	movs	r3, #1
   bc698:	fab0 f480 	clz	r4, r0
   bc69c:	0964      	lsrs	r4, r4, #5
   bc69e:	4635      	mov	r5, r6
   bc6a0:	9300      	str	r3, [sp, #0]
   bc6a2:	463a      	mov	r2, r7
   bc6a4:	4616      	mov	r6, r2
   bc6a6:	3201      	adds	r2, #1
   bc6a8:	7830      	ldrb	r0, [r6, #0]
   bc6aa:	f7ff ff9b 	bl	bc5e4 <__hexdig_fun>
   bc6ae:	2800      	cmp	r0, #0
   bc6b0:	d1f8      	bne.n	bc6a4 <__gethex+0x94>
   bc6b2:	9901      	ldr	r1, [sp, #4]
   bc6b4:	4652      	mov	r2, sl
   bc6b6:	4630      	mov	r0, r6
   bc6b8:	f7fe ff77 	bl	bb5aa <strncmp>
   bc6bc:	b980      	cbnz	r0, bc6e0 <__gethex+0xd0>
   bc6be:	b94d      	cbnz	r5, bc6d4 <__gethex+0xc4>
   bc6c0:	eb06 050a 	add.w	r5, r6, sl
   bc6c4:	462a      	mov	r2, r5
   bc6c6:	4616      	mov	r6, r2
   bc6c8:	3201      	adds	r2, #1
   bc6ca:	7830      	ldrb	r0, [r6, #0]
   bc6cc:	f7ff ff8a 	bl	bc5e4 <__hexdig_fun>
   bc6d0:	2800      	cmp	r0, #0
   bc6d2:	d1f8      	bne.n	bc6c6 <__gethex+0xb6>
   bc6d4:	1bad      	subs	r5, r5, r6
   bc6d6:	00ad      	lsls	r5, r5, #2
   bc6d8:	e004      	b.n	bc6e4 <__gethex+0xd4>
   bc6da:	2400      	movs	r4, #0
   bc6dc:	4625      	mov	r5, r4
   bc6de:	e7e0      	b.n	bc6a2 <__gethex+0x92>
   bc6e0:	2d00      	cmp	r5, #0
   bc6e2:	d1f7      	bne.n	bc6d4 <__gethex+0xc4>
   bc6e4:	7833      	ldrb	r3, [r6, #0]
   bc6e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc6ea:	2b50      	cmp	r3, #80	; 0x50
   bc6ec:	d13b      	bne.n	bc766 <__gethex+0x156>
   bc6ee:	7873      	ldrb	r3, [r6, #1]
   bc6f0:	2b2b      	cmp	r3, #43	; 0x2b
   bc6f2:	d02c      	beq.n	bc74e <__gethex+0x13e>
   bc6f4:	2b2d      	cmp	r3, #45	; 0x2d
   bc6f6:	d02e      	beq.n	bc756 <__gethex+0x146>
   bc6f8:	1c71      	adds	r1, r6, #1
   bc6fa:	f04f 0900 	mov.w	r9, #0
   bc6fe:	7808      	ldrb	r0, [r1, #0]
   bc700:	f7ff ff70 	bl	bc5e4 <__hexdig_fun>
   bc704:	1e43      	subs	r3, r0, #1
   bc706:	b2db      	uxtb	r3, r3
   bc708:	2b18      	cmp	r3, #24
   bc70a:	d82c      	bhi.n	bc766 <__gethex+0x156>
   bc70c:	f1a0 0210 	sub.w	r2, r0, #16
   bc710:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc714:	f7ff ff66 	bl	bc5e4 <__hexdig_fun>
   bc718:	1e43      	subs	r3, r0, #1
   bc71a:	b2db      	uxtb	r3, r3
   bc71c:	2b18      	cmp	r3, #24
   bc71e:	d91d      	bls.n	bc75c <__gethex+0x14c>
   bc720:	f1b9 0f00 	cmp.w	r9, #0
   bc724:	d000      	beq.n	bc728 <__gethex+0x118>
   bc726:	4252      	negs	r2, r2
   bc728:	4415      	add	r5, r2
   bc72a:	f8cb 1000 	str.w	r1, [fp]
   bc72e:	b1e4      	cbz	r4, bc76a <__gethex+0x15a>
   bc730:	9b00      	ldr	r3, [sp, #0]
   bc732:	2b00      	cmp	r3, #0
   bc734:	bf14      	ite	ne
   bc736:	2700      	movne	r7, #0
   bc738:	2706      	moveq	r7, #6
   bc73a:	4638      	mov	r0, r7
   bc73c:	b009      	add	sp, #36	; 0x24
   bc73e:	ecbd 8b02 	vpop	{d8}
   bc742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc746:	463e      	mov	r6, r7
   bc748:	4625      	mov	r5, r4
   bc74a:	2401      	movs	r4, #1
   bc74c:	e7ca      	b.n	bc6e4 <__gethex+0xd4>
   bc74e:	f04f 0900 	mov.w	r9, #0
   bc752:	1cb1      	adds	r1, r6, #2
   bc754:	e7d3      	b.n	bc6fe <__gethex+0xee>
   bc756:	f04f 0901 	mov.w	r9, #1
   bc75a:	e7fa      	b.n	bc752 <__gethex+0x142>
   bc75c:	230a      	movs	r3, #10
   bc75e:	fb03 0202 	mla	r2, r3, r2, r0
   bc762:	3a10      	subs	r2, #16
   bc764:	e7d4      	b.n	bc710 <__gethex+0x100>
   bc766:	4631      	mov	r1, r6
   bc768:	e7df      	b.n	bc72a <__gethex+0x11a>
   bc76a:	1bf3      	subs	r3, r6, r7
   bc76c:	3b01      	subs	r3, #1
   bc76e:	4621      	mov	r1, r4
   bc770:	2b07      	cmp	r3, #7
   bc772:	dc0b      	bgt.n	bc78c <__gethex+0x17c>
   bc774:	ee18 0a10 	vmov	r0, s16
   bc778:	f000 fa68 	bl	bcc4c <_Balloc>
   bc77c:	4604      	mov	r4, r0
   bc77e:	b940      	cbnz	r0, bc792 <__gethex+0x182>
   bc780:	4b5d      	ldr	r3, [pc, #372]	; (bc8f8 <__gethex+0x2e8>)
   bc782:	4602      	mov	r2, r0
   bc784:	21de      	movs	r1, #222	; 0xde
   bc786:	485d      	ldr	r0, [pc, #372]	; (bc8fc <__gethex+0x2ec>)
   bc788:	f7fa fbdc 	bl	b6f44 <__assert_func>
   bc78c:	3101      	adds	r1, #1
   bc78e:	105b      	asrs	r3, r3, #1
   bc790:	e7ee      	b.n	bc770 <__gethex+0x160>
   bc792:	f100 0914 	add.w	r9, r0, #20
   bc796:	f04f 0b00 	mov.w	fp, #0
   bc79a:	f1ca 0301 	rsb	r3, sl, #1
   bc79e:	f8cd 9008 	str.w	r9, [sp, #8]
   bc7a2:	f8cd b000 	str.w	fp, [sp]
   bc7a6:	9306      	str	r3, [sp, #24]
   bc7a8:	42b7      	cmp	r7, r6
   bc7aa:	d340      	bcc.n	bc82e <__gethex+0x21e>
   bc7ac:	9802      	ldr	r0, [sp, #8]
   bc7ae:	9b00      	ldr	r3, [sp, #0]
   bc7b0:	f840 3b04 	str.w	r3, [r0], #4
   bc7b4:	eba0 0009 	sub.w	r0, r0, r9
   bc7b8:	1080      	asrs	r0, r0, #2
   bc7ba:	0146      	lsls	r6, r0, #5
   bc7bc:	6120      	str	r0, [r4, #16]
   bc7be:	4618      	mov	r0, r3
   bc7c0:	f000 fb36 	bl	bce30 <__hi0bits>
   bc7c4:	1a30      	subs	r0, r6, r0
   bc7c6:	f8d8 6000 	ldr.w	r6, [r8]
   bc7ca:	42b0      	cmp	r0, r6
   bc7cc:	dd63      	ble.n	bc896 <__gethex+0x286>
   bc7ce:	1b87      	subs	r7, r0, r6
   bc7d0:	4639      	mov	r1, r7
   bc7d2:	4620      	mov	r0, r4
   bc7d4:	f000 feda 	bl	bd58c <__any_on>
   bc7d8:	4682      	mov	sl, r0
   bc7da:	b1a8      	cbz	r0, bc808 <__gethex+0x1f8>
   bc7dc:	1e7b      	subs	r3, r7, #1
   bc7de:	1159      	asrs	r1, r3, #5
   bc7e0:	f003 021f 	and.w	r2, r3, #31
   bc7e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc7e8:	f04f 0a01 	mov.w	sl, #1
   bc7ec:	fa0a f202 	lsl.w	r2, sl, r2
   bc7f0:	420a      	tst	r2, r1
   bc7f2:	d009      	beq.n	bc808 <__gethex+0x1f8>
   bc7f4:	4553      	cmp	r3, sl
   bc7f6:	dd05      	ble.n	bc804 <__gethex+0x1f4>
   bc7f8:	1eb9      	subs	r1, r7, #2
   bc7fa:	4620      	mov	r0, r4
   bc7fc:	f000 fec6 	bl	bd58c <__any_on>
   bc800:	2800      	cmp	r0, #0
   bc802:	d145      	bne.n	bc890 <__gethex+0x280>
   bc804:	f04f 0a02 	mov.w	sl, #2
   bc808:	4639      	mov	r1, r7
   bc80a:	4620      	mov	r0, r4
   bc80c:	f7ff fe98 	bl	bc540 <rshift>
   bc810:	443d      	add	r5, r7
   bc812:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc816:	42ab      	cmp	r3, r5
   bc818:	da4c      	bge.n	bc8b4 <__gethex+0x2a4>
   bc81a:	ee18 0a10 	vmov	r0, s16
   bc81e:	4621      	mov	r1, r4
   bc820:	f000 fa54 	bl	bcccc <_Bfree>
   bc824:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc826:	2300      	movs	r3, #0
   bc828:	6013      	str	r3, [r2, #0]
   bc82a:	27a3      	movs	r7, #163	; 0xa3
   bc82c:	e785      	b.n	bc73a <__gethex+0x12a>
   bc82e:	1e73      	subs	r3, r6, #1
   bc830:	9a05      	ldr	r2, [sp, #20]
   bc832:	9303      	str	r3, [sp, #12]
   bc834:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc838:	4293      	cmp	r3, r2
   bc83a:	d019      	beq.n	bc870 <__gethex+0x260>
   bc83c:	f1bb 0f20 	cmp.w	fp, #32
   bc840:	d107      	bne.n	bc852 <__gethex+0x242>
   bc842:	9b02      	ldr	r3, [sp, #8]
   bc844:	9a00      	ldr	r2, [sp, #0]
   bc846:	f843 2b04 	str.w	r2, [r3], #4
   bc84a:	9302      	str	r3, [sp, #8]
   bc84c:	2300      	movs	r3, #0
   bc84e:	9300      	str	r3, [sp, #0]
   bc850:	469b      	mov	fp, r3
   bc852:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc856:	f7ff fec5 	bl	bc5e4 <__hexdig_fun>
   bc85a:	9b00      	ldr	r3, [sp, #0]
   bc85c:	f000 000f 	and.w	r0, r0, #15
   bc860:	fa00 f00b 	lsl.w	r0, r0, fp
   bc864:	4303      	orrs	r3, r0
   bc866:	9300      	str	r3, [sp, #0]
   bc868:	f10b 0b04 	add.w	fp, fp, #4
   bc86c:	9b03      	ldr	r3, [sp, #12]
   bc86e:	e00d      	b.n	bc88c <__gethex+0x27c>
   bc870:	9b03      	ldr	r3, [sp, #12]
   bc872:	9a06      	ldr	r2, [sp, #24]
   bc874:	4413      	add	r3, r2
   bc876:	42bb      	cmp	r3, r7
   bc878:	d3e0      	bcc.n	bc83c <__gethex+0x22c>
   bc87a:	4618      	mov	r0, r3
   bc87c:	9901      	ldr	r1, [sp, #4]
   bc87e:	9307      	str	r3, [sp, #28]
   bc880:	4652      	mov	r2, sl
   bc882:	f7fe fe92 	bl	bb5aa <strncmp>
   bc886:	9b07      	ldr	r3, [sp, #28]
   bc888:	2800      	cmp	r0, #0
   bc88a:	d1d7      	bne.n	bc83c <__gethex+0x22c>
   bc88c:	461e      	mov	r6, r3
   bc88e:	e78b      	b.n	bc7a8 <__gethex+0x198>
   bc890:	f04f 0a03 	mov.w	sl, #3
   bc894:	e7b8      	b.n	bc808 <__gethex+0x1f8>
   bc896:	da0a      	bge.n	bc8ae <__gethex+0x29e>
   bc898:	1a37      	subs	r7, r6, r0
   bc89a:	4621      	mov	r1, r4
   bc89c:	ee18 0a10 	vmov	r0, s16
   bc8a0:	463a      	mov	r2, r7
   bc8a2:	f000 fc2f 	bl	bd104 <__lshift>
   bc8a6:	1bed      	subs	r5, r5, r7
   bc8a8:	4604      	mov	r4, r0
   bc8aa:	f100 0914 	add.w	r9, r0, #20
   bc8ae:	f04f 0a00 	mov.w	sl, #0
   bc8b2:	e7ae      	b.n	bc812 <__gethex+0x202>
   bc8b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc8b8:	42a8      	cmp	r0, r5
   bc8ba:	dd72      	ble.n	bc9a2 <__gethex+0x392>
   bc8bc:	1b45      	subs	r5, r0, r5
   bc8be:	42ae      	cmp	r6, r5
   bc8c0:	dc36      	bgt.n	bc930 <__gethex+0x320>
   bc8c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc8c6:	2b02      	cmp	r3, #2
   bc8c8:	d02a      	beq.n	bc920 <__gethex+0x310>
   bc8ca:	2b03      	cmp	r3, #3
   bc8cc:	d02c      	beq.n	bc928 <__gethex+0x318>
   bc8ce:	2b01      	cmp	r3, #1
   bc8d0:	d11c      	bne.n	bc90c <__gethex+0x2fc>
   bc8d2:	42ae      	cmp	r6, r5
   bc8d4:	d11a      	bne.n	bc90c <__gethex+0x2fc>
   bc8d6:	2e01      	cmp	r6, #1
   bc8d8:	d112      	bne.n	bc900 <__gethex+0x2f0>
   bc8da:	9a04      	ldr	r2, [sp, #16]
   bc8dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc8e0:	6013      	str	r3, [r2, #0]
   bc8e2:	2301      	movs	r3, #1
   bc8e4:	6123      	str	r3, [r4, #16]
   bc8e6:	f8c9 3000 	str.w	r3, [r9]
   bc8ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc8ec:	2762      	movs	r7, #98	; 0x62
   bc8ee:	601c      	str	r4, [r3, #0]
   bc8f0:	e723      	b.n	bc73a <__gethex+0x12a>
   bc8f2:	bf00      	nop
   bc8f4:	000be338 	.word	0x000be338
   bc8f8:	000be2c4 	.word	0x000be2c4
   bc8fc:	000be2d5 	.word	0x000be2d5
   bc900:	1e71      	subs	r1, r6, #1
   bc902:	4620      	mov	r0, r4
   bc904:	f000 fe42 	bl	bd58c <__any_on>
   bc908:	2800      	cmp	r0, #0
   bc90a:	d1e6      	bne.n	bc8da <__gethex+0x2ca>
   bc90c:	ee18 0a10 	vmov	r0, s16
   bc910:	4621      	mov	r1, r4
   bc912:	f000 f9db 	bl	bcccc <_Bfree>
   bc916:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc918:	2300      	movs	r3, #0
   bc91a:	6013      	str	r3, [r2, #0]
   bc91c:	2750      	movs	r7, #80	; 0x50
   bc91e:	e70c      	b.n	bc73a <__gethex+0x12a>
   bc920:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc922:	2b00      	cmp	r3, #0
   bc924:	d1f2      	bne.n	bc90c <__gethex+0x2fc>
   bc926:	e7d8      	b.n	bc8da <__gethex+0x2ca>
   bc928:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc92a:	2b00      	cmp	r3, #0
   bc92c:	d1d5      	bne.n	bc8da <__gethex+0x2ca>
   bc92e:	e7ed      	b.n	bc90c <__gethex+0x2fc>
   bc930:	1e6f      	subs	r7, r5, #1
   bc932:	f1ba 0f00 	cmp.w	sl, #0
   bc936:	d131      	bne.n	bc99c <__gethex+0x38c>
   bc938:	b127      	cbz	r7, bc944 <__gethex+0x334>
   bc93a:	4639      	mov	r1, r7
   bc93c:	4620      	mov	r0, r4
   bc93e:	f000 fe25 	bl	bd58c <__any_on>
   bc942:	4682      	mov	sl, r0
   bc944:	117b      	asrs	r3, r7, #5
   bc946:	2101      	movs	r1, #1
   bc948:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc94c:	f007 071f 	and.w	r7, r7, #31
   bc950:	fa01 f707 	lsl.w	r7, r1, r7
   bc954:	421f      	tst	r7, r3
   bc956:	4629      	mov	r1, r5
   bc958:	4620      	mov	r0, r4
   bc95a:	bf18      	it	ne
   bc95c:	f04a 0a02 	orrne.w	sl, sl, #2
   bc960:	1b76      	subs	r6, r6, r5
   bc962:	f7ff fded 	bl	bc540 <rshift>
   bc966:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc96a:	2702      	movs	r7, #2
   bc96c:	f1ba 0f00 	cmp.w	sl, #0
   bc970:	d048      	beq.n	bca04 <__gethex+0x3f4>
   bc972:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc976:	2b02      	cmp	r3, #2
   bc978:	d015      	beq.n	bc9a6 <__gethex+0x396>
   bc97a:	2b03      	cmp	r3, #3
   bc97c:	d017      	beq.n	bc9ae <__gethex+0x39e>
   bc97e:	2b01      	cmp	r3, #1
   bc980:	d109      	bne.n	bc996 <__gethex+0x386>
   bc982:	f01a 0f02 	tst.w	sl, #2
   bc986:	d006      	beq.n	bc996 <__gethex+0x386>
   bc988:	f8d9 0000 	ldr.w	r0, [r9]
   bc98c:	ea4a 0a00 	orr.w	sl, sl, r0
   bc990:	f01a 0f01 	tst.w	sl, #1
   bc994:	d10e      	bne.n	bc9b4 <__gethex+0x3a4>
   bc996:	f047 0710 	orr.w	r7, r7, #16
   bc99a:	e033      	b.n	bca04 <__gethex+0x3f4>
   bc99c:	f04f 0a01 	mov.w	sl, #1
   bc9a0:	e7d0      	b.n	bc944 <__gethex+0x334>
   bc9a2:	2701      	movs	r7, #1
   bc9a4:	e7e2      	b.n	bc96c <__gethex+0x35c>
   bc9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc9a8:	f1c3 0301 	rsb	r3, r3, #1
   bc9ac:	9315      	str	r3, [sp, #84]	; 0x54
   bc9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc9b0:	2b00      	cmp	r3, #0
   bc9b2:	d0f0      	beq.n	bc996 <__gethex+0x386>
   bc9b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc9b8:	f104 0314 	add.w	r3, r4, #20
   bc9bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc9c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc9c4:	f04f 0c00 	mov.w	ip, #0
   bc9c8:	4618      	mov	r0, r3
   bc9ca:	f853 2b04 	ldr.w	r2, [r3], #4
   bc9ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc9d2:	d01c      	beq.n	bca0e <__gethex+0x3fe>
   bc9d4:	3201      	adds	r2, #1
   bc9d6:	6002      	str	r2, [r0, #0]
   bc9d8:	2f02      	cmp	r7, #2
   bc9da:	f104 0314 	add.w	r3, r4, #20
   bc9de:	d13f      	bne.n	bca60 <__gethex+0x450>
   bc9e0:	f8d8 2000 	ldr.w	r2, [r8]
   bc9e4:	3a01      	subs	r2, #1
   bc9e6:	42b2      	cmp	r2, r6
   bc9e8:	d10a      	bne.n	bca00 <__gethex+0x3f0>
   bc9ea:	1171      	asrs	r1, r6, #5
   bc9ec:	2201      	movs	r2, #1
   bc9ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc9f2:	f006 061f 	and.w	r6, r6, #31
   bc9f6:	fa02 f606 	lsl.w	r6, r2, r6
   bc9fa:	421e      	tst	r6, r3
   bc9fc:	bf18      	it	ne
   bc9fe:	4617      	movne	r7, r2
   bca00:	f047 0720 	orr.w	r7, r7, #32
   bca04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bca06:	601c      	str	r4, [r3, #0]
   bca08:	9b04      	ldr	r3, [sp, #16]
   bca0a:	601d      	str	r5, [r3, #0]
   bca0c:	e695      	b.n	bc73a <__gethex+0x12a>
   bca0e:	4299      	cmp	r1, r3
   bca10:	f843 cc04 	str.w	ip, [r3, #-4]
   bca14:	d8d8      	bhi.n	bc9c8 <__gethex+0x3b8>
   bca16:	68a3      	ldr	r3, [r4, #8]
   bca18:	459b      	cmp	fp, r3
   bca1a:	db19      	blt.n	bca50 <__gethex+0x440>
   bca1c:	6861      	ldr	r1, [r4, #4]
   bca1e:	ee18 0a10 	vmov	r0, s16
   bca22:	3101      	adds	r1, #1
   bca24:	f000 f912 	bl	bcc4c <_Balloc>
   bca28:	4681      	mov	r9, r0
   bca2a:	b918      	cbnz	r0, bca34 <__gethex+0x424>
   bca2c:	4b1a      	ldr	r3, [pc, #104]	; (bca98 <__gethex+0x488>)
   bca2e:	4602      	mov	r2, r0
   bca30:	2184      	movs	r1, #132	; 0x84
   bca32:	e6a8      	b.n	bc786 <__gethex+0x176>
   bca34:	6922      	ldr	r2, [r4, #16]
   bca36:	3202      	adds	r2, #2
   bca38:	f104 010c 	add.w	r1, r4, #12
   bca3c:	0092      	lsls	r2, r2, #2
   bca3e:	300c      	adds	r0, #12
   bca40:	f7fe fd06 	bl	bb450 <memcpy>
   bca44:	4621      	mov	r1, r4
   bca46:	ee18 0a10 	vmov	r0, s16
   bca4a:	f000 f93f 	bl	bcccc <_Bfree>
   bca4e:	464c      	mov	r4, r9
   bca50:	6923      	ldr	r3, [r4, #16]
   bca52:	1c5a      	adds	r2, r3, #1
   bca54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bca58:	6122      	str	r2, [r4, #16]
   bca5a:	2201      	movs	r2, #1
   bca5c:	615a      	str	r2, [r3, #20]
   bca5e:	e7bb      	b.n	bc9d8 <__gethex+0x3c8>
   bca60:	6922      	ldr	r2, [r4, #16]
   bca62:	455a      	cmp	r2, fp
   bca64:	dd0b      	ble.n	bca7e <__gethex+0x46e>
   bca66:	2101      	movs	r1, #1
   bca68:	4620      	mov	r0, r4
   bca6a:	f7ff fd69 	bl	bc540 <rshift>
   bca6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bca72:	3501      	adds	r5, #1
   bca74:	42ab      	cmp	r3, r5
   bca76:	f6ff aed0 	blt.w	bc81a <__gethex+0x20a>
   bca7a:	2701      	movs	r7, #1
   bca7c:	e7c0      	b.n	bca00 <__gethex+0x3f0>
   bca7e:	f016 061f 	ands.w	r6, r6, #31
   bca82:	d0fa      	beq.n	bca7a <__gethex+0x46a>
   bca84:	4453      	add	r3, sl
   bca86:	f1c6 0620 	rsb	r6, r6, #32
   bca8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bca8e:	f000 f9cf 	bl	bce30 <__hi0bits>
   bca92:	42b0      	cmp	r0, r6
   bca94:	dbe7      	blt.n	bca66 <__gethex+0x456>
   bca96:	e7f0      	b.n	bca7a <__gethex+0x46a>
   bca98:	000be2c4 	.word	0x000be2c4

000bca9c <L_shift>:
   bca9c:	f1c2 0208 	rsb	r2, r2, #8
   bcaa0:	0092      	lsls	r2, r2, #2
   bcaa2:	b570      	push	{r4, r5, r6, lr}
   bcaa4:	f1c2 0620 	rsb	r6, r2, #32
   bcaa8:	6843      	ldr	r3, [r0, #4]
   bcaaa:	6804      	ldr	r4, [r0, #0]
   bcaac:	fa03 f506 	lsl.w	r5, r3, r6
   bcab0:	432c      	orrs	r4, r5
   bcab2:	40d3      	lsrs	r3, r2
   bcab4:	6004      	str	r4, [r0, #0]
   bcab6:	f840 3f04 	str.w	r3, [r0, #4]!
   bcaba:	4288      	cmp	r0, r1
   bcabc:	d3f4      	bcc.n	bcaa8 <L_shift+0xc>
   bcabe:	bd70      	pop	{r4, r5, r6, pc}

000bcac0 <__match>:
   bcac0:	b530      	push	{r4, r5, lr}
   bcac2:	6803      	ldr	r3, [r0, #0]
   bcac4:	3301      	adds	r3, #1
   bcac6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcaca:	b914      	cbnz	r4, bcad2 <__match+0x12>
   bcacc:	6003      	str	r3, [r0, #0]
   bcace:	2001      	movs	r0, #1
   bcad0:	bd30      	pop	{r4, r5, pc}
   bcad2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcad6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bcada:	2d19      	cmp	r5, #25
   bcadc:	bf98      	it	ls
   bcade:	3220      	addls	r2, #32
   bcae0:	42a2      	cmp	r2, r4
   bcae2:	d0f0      	beq.n	bcac6 <__match+0x6>
   bcae4:	2000      	movs	r0, #0
   bcae6:	e7f3      	b.n	bcad0 <__match+0x10>

000bcae8 <__hexnan>:
   bcae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcaec:	680b      	ldr	r3, [r1, #0]
   bcaee:	115e      	asrs	r6, r3, #5
   bcaf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bcaf4:	f013 031f 	ands.w	r3, r3, #31
   bcaf8:	b087      	sub	sp, #28
   bcafa:	bf18      	it	ne
   bcafc:	3604      	addne	r6, #4
   bcafe:	2500      	movs	r5, #0
   bcb00:	1f37      	subs	r7, r6, #4
   bcb02:	4690      	mov	r8, r2
   bcb04:	6802      	ldr	r2, [r0, #0]
   bcb06:	9301      	str	r3, [sp, #4]
   bcb08:	4682      	mov	sl, r0
   bcb0a:	f846 5c04 	str.w	r5, [r6, #-4]
   bcb0e:	46b9      	mov	r9, r7
   bcb10:	463c      	mov	r4, r7
   bcb12:	9502      	str	r5, [sp, #8]
   bcb14:	46ab      	mov	fp, r5
   bcb16:	7851      	ldrb	r1, [r2, #1]
   bcb18:	1c53      	adds	r3, r2, #1
   bcb1a:	9303      	str	r3, [sp, #12]
   bcb1c:	b341      	cbz	r1, bcb70 <__hexnan+0x88>
   bcb1e:	4608      	mov	r0, r1
   bcb20:	9205      	str	r2, [sp, #20]
   bcb22:	9104      	str	r1, [sp, #16]
   bcb24:	f7ff fd5e 	bl	bc5e4 <__hexdig_fun>
   bcb28:	2800      	cmp	r0, #0
   bcb2a:	d14f      	bne.n	bcbcc <__hexnan+0xe4>
   bcb2c:	9904      	ldr	r1, [sp, #16]
   bcb2e:	9a05      	ldr	r2, [sp, #20]
   bcb30:	2920      	cmp	r1, #32
   bcb32:	d818      	bhi.n	bcb66 <__hexnan+0x7e>
   bcb34:	9b02      	ldr	r3, [sp, #8]
   bcb36:	459b      	cmp	fp, r3
   bcb38:	dd13      	ble.n	bcb62 <__hexnan+0x7a>
   bcb3a:	454c      	cmp	r4, r9
   bcb3c:	d206      	bcs.n	bcb4c <__hexnan+0x64>
   bcb3e:	2d07      	cmp	r5, #7
   bcb40:	dc04      	bgt.n	bcb4c <__hexnan+0x64>
   bcb42:	462a      	mov	r2, r5
   bcb44:	4649      	mov	r1, r9
   bcb46:	4620      	mov	r0, r4
   bcb48:	f7ff ffa8 	bl	bca9c <L_shift>
   bcb4c:	4544      	cmp	r4, r8
   bcb4e:	d950      	bls.n	bcbf2 <__hexnan+0x10a>
   bcb50:	2300      	movs	r3, #0
   bcb52:	f1a4 0904 	sub.w	r9, r4, #4
   bcb56:	f844 3c04 	str.w	r3, [r4, #-4]
   bcb5a:	f8cd b008 	str.w	fp, [sp, #8]
   bcb5e:	464c      	mov	r4, r9
   bcb60:	461d      	mov	r5, r3
   bcb62:	9a03      	ldr	r2, [sp, #12]
   bcb64:	e7d7      	b.n	bcb16 <__hexnan+0x2e>
   bcb66:	2929      	cmp	r1, #41	; 0x29
   bcb68:	d156      	bne.n	bcc18 <__hexnan+0x130>
   bcb6a:	3202      	adds	r2, #2
   bcb6c:	f8ca 2000 	str.w	r2, [sl]
   bcb70:	f1bb 0f00 	cmp.w	fp, #0
   bcb74:	d050      	beq.n	bcc18 <__hexnan+0x130>
   bcb76:	454c      	cmp	r4, r9
   bcb78:	d206      	bcs.n	bcb88 <__hexnan+0xa0>
   bcb7a:	2d07      	cmp	r5, #7
   bcb7c:	dc04      	bgt.n	bcb88 <__hexnan+0xa0>
   bcb7e:	462a      	mov	r2, r5
   bcb80:	4649      	mov	r1, r9
   bcb82:	4620      	mov	r0, r4
   bcb84:	f7ff ff8a 	bl	bca9c <L_shift>
   bcb88:	4544      	cmp	r4, r8
   bcb8a:	d934      	bls.n	bcbf6 <__hexnan+0x10e>
   bcb8c:	f1a8 0204 	sub.w	r2, r8, #4
   bcb90:	4623      	mov	r3, r4
   bcb92:	f853 1b04 	ldr.w	r1, [r3], #4
   bcb96:	f842 1f04 	str.w	r1, [r2, #4]!
   bcb9a:	429f      	cmp	r7, r3
   bcb9c:	d2f9      	bcs.n	bcb92 <__hexnan+0xaa>
   bcb9e:	1b3b      	subs	r3, r7, r4
   bcba0:	f023 0303 	bic.w	r3, r3, #3
   bcba4:	3304      	adds	r3, #4
   bcba6:	3401      	adds	r4, #1
   bcba8:	3e03      	subs	r6, #3
   bcbaa:	42b4      	cmp	r4, r6
   bcbac:	bf88      	it	hi
   bcbae:	2304      	movhi	r3, #4
   bcbb0:	4443      	add	r3, r8
   bcbb2:	2200      	movs	r2, #0
   bcbb4:	f843 2b04 	str.w	r2, [r3], #4
   bcbb8:	429f      	cmp	r7, r3
   bcbba:	d2fb      	bcs.n	bcbb4 <__hexnan+0xcc>
   bcbbc:	683b      	ldr	r3, [r7, #0]
   bcbbe:	b91b      	cbnz	r3, bcbc8 <__hexnan+0xe0>
   bcbc0:	4547      	cmp	r7, r8
   bcbc2:	d127      	bne.n	bcc14 <__hexnan+0x12c>
   bcbc4:	2301      	movs	r3, #1
   bcbc6:	603b      	str	r3, [r7, #0]
   bcbc8:	2005      	movs	r0, #5
   bcbca:	e026      	b.n	bcc1a <__hexnan+0x132>
   bcbcc:	3501      	adds	r5, #1
   bcbce:	2d08      	cmp	r5, #8
   bcbd0:	f10b 0b01 	add.w	fp, fp, #1
   bcbd4:	dd06      	ble.n	bcbe4 <__hexnan+0xfc>
   bcbd6:	4544      	cmp	r4, r8
   bcbd8:	d9c3      	bls.n	bcb62 <__hexnan+0x7a>
   bcbda:	2300      	movs	r3, #0
   bcbdc:	f844 3c04 	str.w	r3, [r4, #-4]
   bcbe0:	2501      	movs	r5, #1
   bcbe2:	3c04      	subs	r4, #4
   bcbe4:	6822      	ldr	r2, [r4, #0]
   bcbe6:	f000 000f 	and.w	r0, r0, #15
   bcbea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bcbee:	6022      	str	r2, [r4, #0]
   bcbf0:	e7b7      	b.n	bcb62 <__hexnan+0x7a>
   bcbf2:	2508      	movs	r5, #8
   bcbf4:	e7b5      	b.n	bcb62 <__hexnan+0x7a>
   bcbf6:	9b01      	ldr	r3, [sp, #4]
   bcbf8:	2b00      	cmp	r3, #0
   bcbfa:	d0df      	beq.n	bcbbc <__hexnan+0xd4>
   bcbfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcc00:	f1c3 0320 	rsb	r3, r3, #32
   bcc04:	fa22 f303 	lsr.w	r3, r2, r3
   bcc08:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bcc0c:	401a      	ands	r2, r3
   bcc0e:	f846 2c04 	str.w	r2, [r6, #-4]
   bcc12:	e7d3      	b.n	bcbbc <__hexnan+0xd4>
   bcc14:	3f04      	subs	r7, #4
   bcc16:	e7d1      	b.n	bcbbc <__hexnan+0xd4>
   bcc18:	2004      	movs	r0, #4
   bcc1a:	b007      	add	sp, #28
   bcc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcc20 <__retarget_lock_acquire_recursive>:
   bcc20:	4770      	bx	lr

000bcc22 <__retarget_lock_release>:
   bcc22:	4770      	bx	lr

000bcc24 <__retarget_lock_release_recursive>:
   bcc24:	4770      	bx	lr

000bcc26 <__ascii_mbtowc>:
   bcc26:	b082      	sub	sp, #8
   bcc28:	b901      	cbnz	r1, bcc2c <__ascii_mbtowc+0x6>
   bcc2a:	a901      	add	r1, sp, #4
   bcc2c:	b142      	cbz	r2, bcc40 <__ascii_mbtowc+0x1a>
   bcc2e:	b14b      	cbz	r3, bcc44 <__ascii_mbtowc+0x1e>
   bcc30:	7813      	ldrb	r3, [r2, #0]
   bcc32:	600b      	str	r3, [r1, #0]
   bcc34:	7812      	ldrb	r2, [r2, #0]
   bcc36:	1e10      	subs	r0, r2, #0
   bcc38:	bf18      	it	ne
   bcc3a:	2001      	movne	r0, #1
   bcc3c:	b002      	add	sp, #8
   bcc3e:	4770      	bx	lr
   bcc40:	4610      	mov	r0, r2
   bcc42:	e7fb      	b.n	bcc3c <__ascii_mbtowc+0x16>
   bcc44:	f06f 0001 	mvn.w	r0, #1
   bcc48:	e7f8      	b.n	bcc3c <__ascii_mbtowc+0x16>
	...

000bcc4c <_Balloc>:
   bcc4c:	b570      	push	{r4, r5, r6, lr}
   bcc4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcc50:	4604      	mov	r4, r0
   bcc52:	460d      	mov	r5, r1
   bcc54:	b976      	cbnz	r6, bcc74 <_Balloc+0x28>
   bcc56:	2010      	movs	r0, #16
   bcc58:	f7fa f934 	bl	b6ec4 <malloc>
   bcc5c:	4602      	mov	r2, r0
   bcc5e:	6260      	str	r0, [r4, #36]	; 0x24
   bcc60:	b920      	cbnz	r0, bcc6c <_Balloc+0x20>
   bcc62:	4b18      	ldr	r3, [pc, #96]	; (bccc4 <_Balloc+0x78>)
   bcc64:	4818      	ldr	r0, [pc, #96]	; (bccc8 <_Balloc+0x7c>)
   bcc66:	2166      	movs	r1, #102	; 0x66
   bcc68:	f7fa f96c 	bl	b6f44 <__assert_func>
   bcc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcc70:	6006      	str	r6, [r0, #0]
   bcc72:	60c6      	str	r6, [r0, #12]
   bcc74:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcc76:	68f3      	ldr	r3, [r6, #12]
   bcc78:	b183      	cbz	r3, bcc9c <_Balloc+0x50>
   bcc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcc7c:	68db      	ldr	r3, [r3, #12]
   bcc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcc82:	b9b8      	cbnz	r0, bccb4 <_Balloc+0x68>
   bcc84:	2101      	movs	r1, #1
   bcc86:	fa01 f605 	lsl.w	r6, r1, r5
   bcc8a:	1d72      	adds	r2, r6, #5
   bcc8c:	0092      	lsls	r2, r2, #2
   bcc8e:	4620      	mov	r0, r4
   bcc90:	f000 fc9d 	bl	bd5ce <_calloc_r>
   bcc94:	b160      	cbz	r0, bccb0 <_Balloc+0x64>
   bcc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcc9a:	e00e      	b.n	bccba <_Balloc+0x6e>
   bcc9c:	2221      	movs	r2, #33	; 0x21
   bcc9e:	2104      	movs	r1, #4
   bcca0:	4620      	mov	r0, r4
   bcca2:	f000 fc94 	bl	bd5ce <_calloc_r>
   bcca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcca8:	60f0      	str	r0, [r6, #12]
   bccaa:	68db      	ldr	r3, [r3, #12]
   bccac:	2b00      	cmp	r3, #0
   bccae:	d1e4      	bne.n	bcc7a <_Balloc+0x2e>
   bccb0:	2000      	movs	r0, #0
   bccb2:	bd70      	pop	{r4, r5, r6, pc}
   bccb4:	6802      	ldr	r2, [r0, #0]
   bccb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bccba:	2300      	movs	r3, #0
   bccbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bccc0:	e7f7      	b.n	bccb2 <_Balloc+0x66>
   bccc2:	bf00      	nop
   bccc4:	000be0a1 	.word	0x000be0a1
   bccc8:	000be34a 	.word	0x000be34a

000bcccc <_Bfree>:
   bcccc:	b570      	push	{r4, r5, r6, lr}
   bccce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bccd0:	4605      	mov	r5, r0
   bccd2:	460c      	mov	r4, r1
   bccd4:	b976      	cbnz	r6, bccf4 <_Bfree+0x28>
   bccd6:	2010      	movs	r0, #16
   bccd8:	f7fa f8f4 	bl	b6ec4 <malloc>
   bccdc:	4602      	mov	r2, r0
   bccde:	6268      	str	r0, [r5, #36]	; 0x24
   bcce0:	b920      	cbnz	r0, bccec <_Bfree+0x20>
   bcce2:	4b09      	ldr	r3, [pc, #36]	; (bcd08 <_Bfree+0x3c>)
   bcce4:	4809      	ldr	r0, [pc, #36]	; (bcd0c <_Bfree+0x40>)
   bcce6:	218a      	movs	r1, #138	; 0x8a
   bcce8:	f7fa f92c 	bl	b6f44 <__assert_func>
   bccec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bccf0:	6006      	str	r6, [r0, #0]
   bccf2:	60c6      	str	r6, [r0, #12]
   bccf4:	b13c      	cbz	r4, bcd06 <_Bfree+0x3a>
   bccf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bccf8:	6862      	ldr	r2, [r4, #4]
   bccfa:	68db      	ldr	r3, [r3, #12]
   bccfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bcd00:	6021      	str	r1, [r4, #0]
   bcd02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bcd06:	bd70      	pop	{r4, r5, r6, pc}
   bcd08:	000be0a1 	.word	0x000be0a1
   bcd0c:	000be34a 	.word	0x000be34a

000bcd10 <__multadd>:
   bcd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcd14:	690d      	ldr	r5, [r1, #16]
   bcd16:	4607      	mov	r7, r0
   bcd18:	460c      	mov	r4, r1
   bcd1a:	461e      	mov	r6, r3
   bcd1c:	f101 0c14 	add.w	ip, r1, #20
   bcd20:	2000      	movs	r0, #0
   bcd22:	f8dc 3000 	ldr.w	r3, [ip]
   bcd26:	b299      	uxth	r1, r3
   bcd28:	fb02 6101 	mla	r1, r2, r1, r6
   bcd2c:	0c1e      	lsrs	r6, r3, #16
   bcd2e:	0c0b      	lsrs	r3, r1, #16
   bcd30:	fb02 3306 	mla	r3, r2, r6, r3
   bcd34:	b289      	uxth	r1, r1
   bcd36:	3001      	adds	r0, #1
   bcd38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bcd3c:	4285      	cmp	r5, r0
   bcd3e:	f84c 1b04 	str.w	r1, [ip], #4
   bcd42:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bcd46:	dcec      	bgt.n	bcd22 <__multadd+0x12>
   bcd48:	b30e      	cbz	r6, bcd8e <__multadd+0x7e>
   bcd4a:	68a3      	ldr	r3, [r4, #8]
   bcd4c:	42ab      	cmp	r3, r5
   bcd4e:	dc19      	bgt.n	bcd84 <__multadd+0x74>
   bcd50:	6861      	ldr	r1, [r4, #4]
   bcd52:	4638      	mov	r0, r7
   bcd54:	3101      	adds	r1, #1
   bcd56:	f7ff ff79 	bl	bcc4c <_Balloc>
   bcd5a:	4680      	mov	r8, r0
   bcd5c:	b928      	cbnz	r0, bcd6a <__multadd+0x5a>
   bcd5e:	4602      	mov	r2, r0
   bcd60:	4b0c      	ldr	r3, [pc, #48]	; (bcd94 <__multadd+0x84>)
   bcd62:	480d      	ldr	r0, [pc, #52]	; (bcd98 <__multadd+0x88>)
   bcd64:	21b5      	movs	r1, #181	; 0xb5
   bcd66:	f7fa f8ed 	bl	b6f44 <__assert_func>
   bcd6a:	6922      	ldr	r2, [r4, #16]
   bcd6c:	3202      	adds	r2, #2
   bcd6e:	f104 010c 	add.w	r1, r4, #12
   bcd72:	0092      	lsls	r2, r2, #2
   bcd74:	300c      	adds	r0, #12
   bcd76:	f7fe fb6b 	bl	bb450 <memcpy>
   bcd7a:	4621      	mov	r1, r4
   bcd7c:	4638      	mov	r0, r7
   bcd7e:	f7ff ffa5 	bl	bcccc <_Bfree>
   bcd82:	4644      	mov	r4, r8
   bcd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcd88:	3501      	adds	r5, #1
   bcd8a:	615e      	str	r6, [r3, #20]
   bcd8c:	6125      	str	r5, [r4, #16]
   bcd8e:	4620      	mov	r0, r4
   bcd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcd94:	000be2c4 	.word	0x000be2c4
   bcd98:	000be34a 	.word	0x000be34a

000bcd9c <__s2b>:
   bcd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcda0:	460c      	mov	r4, r1
   bcda2:	4615      	mov	r5, r2
   bcda4:	461f      	mov	r7, r3
   bcda6:	2209      	movs	r2, #9
   bcda8:	3308      	adds	r3, #8
   bcdaa:	4606      	mov	r6, r0
   bcdac:	fb93 f3f2 	sdiv	r3, r3, r2
   bcdb0:	2100      	movs	r1, #0
   bcdb2:	2201      	movs	r2, #1
   bcdb4:	429a      	cmp	r2, r3
   bcdb6:	db09      	blt.n	bcdcc <__s2b+0x30>
   bcdb8:	4630      	mov	r0, r6
   bcdba:	f7ff ff47 	bl	bcc4c <_Balloc>
   bcdbe:	b940      	cbnz	r0, bcdd2 <__s2b+0x36>
   bcdc0:	4602      	mov	r2, r0
   bcdc2:	4b19      	ldr	r3, [pc, #100]	; (bce28 <__s2b+0x8c>)
   bcdc4:	4819      	ldr	r0, [pc, #100]	; (bce2c <__s2b+0x90>)
   bcdc6:	21ce      	movs	r1, #206	; 0xce
   bcdc8:	f7fa f8bc 	bl	b6f44 <__assert_func>
   bcdcc:	0052      	lsls	r2, r2, #1
   bcdce:	3101      	adds	r1, #1
   bcdd0:	e7f0      	b.n	bcdb4 <__s2b+0x18>
   bcdd2:	9b08      	ldr	r3, [sp, #32]
   bcdd4:	6143      	str	r3, [r0, #20]
   bcdd6:	2d09      	cmp	r5, #9
   bcdd8:	f04f 0301 	mov.w	r3, #1
   bcddc:	6103      	str	r3, [r0, #16]
   bcdde:	dd16      	ble.n	bce0e <__s2b+0x72>
   bcde0:	f104 0909 	add.w	r9, r4, #9
   bcde4:	46c8      	mov	r8, r9
   bcde6:	442c      	add	r4, r5
   bcde8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcdec:	4601      	mov	r1, r0
   bcdee:	3b30      	subs	r3, #48	; 0x30
   bcdf0:	220a      	movs	r2, #10
   bcdf2:	4630      	mov	r0, r6
   bcdf4:	f7ff ff8c 	bl	bcd10 <__multadd>
   bcdf8:	45a0      	cmp	r8, r4
   bcdfa:	d1f5      	bne.n	bcde8 <__s2b+0x4c>
   bcdfc:	f1a5 0408 	sub.w	r4, r5, #8
   bce00:	444c      	add	r4, r9
   bce02:	1b2d      	subs	r5, r5, r4
   bce04:	1963      	adds	r3, r4, r5
   bce06:	42bb      	cmp	r3, r7
   bce08:	db04      	blt.n	bce14 <__s2b+0x78>
   bce0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bce0e:	340a      	adds	r4, #10
   bce10:	2509      	movs	r5, #9
   bce12:	e7f6      	b.n	bce02 <__s2b+0x66>
   bce14:	f814 3b01 	ldrb.w	r3, [r4], #1
   bce18:	4601      	mov	r1, r0
   bce1a:	3b30      	subs	r3, #48	; 0x30
   bce1c:	220a      	movs	r2, #10
   bce1e:	4630      	mov	r0, r6
   bce20:	f7ff ff76 	bl	bcd10 <__multadd>
   bce24:	e7ee      	b.n	bce04 <__s2b+0x68>
   bce26:	bf00      	nop
   bce28:	000be2c4 	.word	0x000be2c4
   bce2c:	000be34a 	.word	0x000be34a

000bce30 <__hi0bits>:
   bce30:	0c03      	lsrs	r3, r0, #16
   bce32:	041b      	lsls	r3, r3, #16
   bce34:	b9d3      	cbnz	r3, bce6c <__hi0bits+0x3c>
   bce36:	0400      	lsls	r0, r0, #16
   bce38:	2310      	movs	r3, #16
   bce3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bce3e:	bf04      	itt	eq
   bce40:	0200      	lsleq	r0, r0, #8
   bce42:	3308      	addeq	r3, #8
   bce44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bce48:	bf04      	itt	eq
   bce4a:	0100      	lsleq	r0, r0, #4
   bce4c:	3304      	addeq	r3, #4
   bce4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bce52:	bf04      	itt	eq
   bce54:	0080      	lsleq	r0, r0, #2
   bce56:	3302      	addeq	r3, #2
   bce58:	2800      	cmp	r0, #0
   bce5a:	db05      	blt.n	bce68 <__hi0bits+0x38>
   bce5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bce60:	f103 0301 	add.w	r3, r3, #1
   bce64:	bf08      	it	eq
   bce66:	2320      	moveq	r3, #32
   bce68:	4618      	mov	r0, r3
   bce6a:	4770      	bx	lr
   bce6c:	2300      	movs	r3, #0
   bce6e:	e7e4      	b.n	bce3a <__hi0bits+0xa>

000bce70 <__lo0bits>:
   bce70:	6803      	ldr	r3, [r0, #0]
   bce72:	f013 0207 	ands.w	r2, r3, #7
   bce76:	4601      	mov	r1, r0
   bce78:	d00b      	beq.n	bce92 <__lo0bits+0x22>
   bce7a:	07da      	lsls	r2, r3, #31
   bce7c:	d423      	bmi.n	bcec6 <__lo0bits+0x56>
   bce7e:	0798      	lsls	r0, r3, #30
   bce80:	bf49      	itett	mi
   bce82:	085b      	lsrmi	r3, r3, #1
   bce84:	089b      	lsrpl	r3, r3, #2
   bce86:	2001      	movmi	r0, #1
   bce88:	600b      	strmi	r3, [r1, #0]
   bce8a:	bf5c      	itt	pl
   bce8c:	600b      	strpl	r3, [r1, #0]
   bce8e:	2002      	movpl	r0, #2
   bce90:	4770      	bx	lr
   bce92:	b298      	uxth	r0, r3
   bce94:	b9a8      	cbnz	r0, bcec2 <__lo0bits+0x52>
   bce96:	0c1b      	lsrs	r3, r3, #16
   bce98:	2010      	movs	r0, #16
   bce9a:	b2da      	uxtb	r2, r3
   bce9c:	b90a      	cbnz	r2, bcea2 <__lo0bits+0x32>
   bce9e:	3008      	adds	r0, #8
   bcea0:	0a1b      	lsrs	r3, r3, #8
   bcea2:	071a      	lsls	r2, r3, #28
   bcea4:	bf04      	itt	eq
   bcea6:	091b      	lsreq	r3, r3, #4
   bcea8:	3004      	addeq	r0, #4
   bceaa:	079a      	lsls	r2, r3, #30
   bceac:	bf04      	itt	eq
   bceae:	089b      	lsreq	r3, r3, #2
   bceb0:	3002      	addeq	r0, #2
   bceb2:	07da      	lsls	r2, r3, #31
   bceb4:	d403      	bmi.n	bcebe <__lo0bits+0x4e>
   bceb6:	085b      	lsrs	r3, r3, #1
   bceb8:	f100 0001 	add.w	r0, r0, #1
   bcebc:	d005      	beq.n	bceca <__lo0bits+0x5a>
   bcebe:	600b      	str	r3, [r1, #0]
   bcec0:	4770      	bx	lr
   bcec2:	4610      	mov	r0, r2
   bcec4:	e7e9      	b.n	bce9a <__lo0bits+0x2a>
   bcec6:	2000      	movs	r0, #0
   bcec8:	4770      	bx	lr
   bceca:	2020      	movs	r0, #32
   bcecc:	4770      	bx	lr
	...

000bced0 <__i2b>:
   bced0:	b510      	push	{r4, lr}
   bced2:	460c      	mov	r4, r1
   bced4:	2101      	movs	r1, #1
   bced6:	f7ff feb9 	bl	bcc4c <_Balloc>
   bceda:	4602      	mov	r2, r0
   bcedc:	b928      	cbnz	r0, bceea <__i2b+0x1a>
   bcede:	4b05      	ldr	r3, [pc, #20]	; (bcef4 <__i2b+0x24>)
   bcee0:	4805      	ldr	r0, [pc, #20]	; (bcef8 <__i2b+0x28>)
   bcee2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcee6:	f7fa f82d 	bl	b6f44 <__assert_func>
   bceea:	2301      	movs	r3, #1
   bceec:	6144      	str	r4, [r0, #20]
   bceee:	6103      	str	r3, [r0, #16]
   bcef0:	bd10      	pop	{r4, pc}
   bcef2:	bf00      	nop
   bcef4:	000be2c4 	.word	0x000be2c4
   bcef8:	000be34a 	.word	0x000be34a

000bcefc <__multiply>:
   bcefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf00:	4691      	mov	r9, r2
   bcf02:	690a      	ldr	r2, [r1, #16]
   bcf04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcf08:	429a      	cmp	r2, r3
   bcf0a:	bfb8      	it	lt
   bcf0c:	460b      	movlt	r3, r1
   bcf0e:	460c      	mov	r4, r1
   bcf10:	bfbc      	itt	lt
   bcf12:	464c      	movlt	r4, r9
   bcf14:	4699      	movlt	r9, r3
   bcf16:	6927      	ldr	r7, [r4, #16]
   bcf18:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcf1c:	68a3      	ldr	r3, [r4, #8]
   bcf1e:	6861      	ldr	r1, [r4, #4]
   bcf20:	eb07 060a 	add.w	r6, r7, sl
   bcf24:	42b3      	cmp	r3, r6
   bcf26:	b085      	sub	sp, #20
   bcf28:	bfb8      	it	lt
   bcf2a:	3101      	addlt	r1, #1
   bcf2c:	f7ff fe8e 	bl	bcc4c <_Balloc>
   bcf30:	b930      	cbnz	r0, bcf40 <__multiply+0x44>
   bcf32:	4602      	mov	r2, r0
   bcf34:	4b44      	ldr	r3, [pc, #272]	; (bd048 <__multiply+0x14c>)
   bcf36:	4845      	ldr	r0, [pc, #276]	; (bd04c <__multiply+0x150>)
   bcf38:	f240 115d 	movw	r1, #349	; 0x15d
   bcf3c:	f7fa f802 	bl	b6f44 <__assert_func>
   bcf40:	f100 0514 	add.w	r5, r0, #20
   bcf44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcf48:	462b      	mov	r3, r5
   bcf4a:	2200      	movs	r2, #0
   bcf4c:	4543      	cmp	r3, r8
   bcf4e:	d321      	bcc.n	bcf94 <__multiply+0x98>
   bcf50:	f104 0314 	add.w	r3, r4, #20
   bcf54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcf58:	f109 0314 	add.w	r3, r9, #20
   bcf5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcf60:	9202      	str	r2, [sp, #8]
   bcf62:	1b3a      	subs	r2, r7, r4
   bcf64:	3a15      	subs	r2, #21
   bcf66:	f022 0203 	bic.w	r2, r2, #3
   bcf6a:	3204      	adds	r2, #4
   bcf6c:	f104 0115 	add.w	r1, r4, #21
   bcf70:	428f      	cmp	r7, r1
   bcf72:	bf38      	it	cc
   bcf74:	2204      	movcc	r2, #4
   bcf76:	9201      	str	r2, [sp, #4]
   bcf78:	9a02      	ldr	r2, [sp, #8]
   bcf7a:	9303      	str	r3, [sp, #12]
   bcf7c:	429a      	cmp	r2, r3
   bcf7e:	d80c      	bhi.n	bcf9a <__multiply+0x9e>
   bcf80:	2e00      	cmp	r6, #0
   bcf82:	dd03      	ble.n	bcf8c <__multiply+0x90>
   bcf84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcf88:	2b00      	cmp	r3, #0
   bcf8a:	d05a      	beq.n	bd042 <__multiply+0x146>
   bcf8c:	6106      	str	r6, [r0, #16]
   bcf8e:	b005      	add	sp, #20
   bcf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcf94:	f843 2b04 	str.w	r2, [r3], #4
   bcf98:	e7d8      	b.n	bcf4c <__multiply+0x50>
   bcf9a:	f8b3 a000 	ldrh.w	sl, [r3]
   bcf9e:	f1ba 0f00 	cmp.w	sl, #0
   bcfa2:	d024      	beq.n	bcfee <__multiply+0xf2>
   bcfa4:	f104 0e14 	add.w	lr, r4, #20
   bcfa8:	46a9      	mov	r9, r5
   bcfaa:	f04f 0c00 	mov.w	ip, #0
   bcfae:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcfb2:	f8d9 1000 	ldr.w	r1, [r9]
   bcfb6:	fa1f fb82 	uxth.w	fp, r2
   bcfba:	b289      	uxth	r1, r1
   bcfbc:	fb0a 110b 	mla	r1, sl, fp, r1
   bcfc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcfc4:	f8d9 2000 	ldr.w	r2, [r9]
   bcfc8:	4461      	add	r1, ip
   bcfca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcfce:	fb0a c20b 	mla	r2, sl, fp, ip
   bcfd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcfd6:	b289      	uxth	r1, r1
   bcfd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcfdc:	4577      	cmp	r7, lr
   bcfde:	f849 1b04 	str.w	r1, [r9], #4
   bcfe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcfe6:	d8e2      	bhi.n	bcfae <__multiply+0xb2>
   bcfe8:	9a01      	ldr	r2, [sp, #4]
   bcfea:	f845 c002 	str.w	ip, [r5, r2]
   bcfee:	9a03      	ldr	r2, [sp, #12]
   bcff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcff4:	3304      	adds	r3, #4
   bcff6:	f1b9 0f00 	cmp.w	r9, #0
   bcffa:	d020      	beq.n	bd03e <__multiply+0x142>
   bcffc:	6829      	ldr	r1, [r5, #0]
   bcffe:	f104 0c14 	add.w	ip, r4, #20
   bd002:	46ae      	mov	lr, r5
   bd004:	f04f 0a00 	mov.w	sl, #0
   bd008:	f8bc b000 	ldrh.w	fp, [ip]
   bd00c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd010:	fb09 220b 	mla	r2, r9, fp, r2
   bd014:	4492      	add	sl, r2
   bd016:	b289      	uxth	r1, r1
   bd018:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd01c:	f84e 1b04 	str.w	r1, [lr], #4
   bd020:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd024:	f8be 1000 	ldrh.w	r1, [lr]
   bd028:	0c12      	lsrs	r2, r2, #16
   bd02a:	fb09 1102 	mla	r1, r9, r2, r1
   bd02e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd032:	4567      	cmp	r7, ip
   bd034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd038:	d8e6      	bhi.n	bd008 <__multiply+0x10c>
   bd03a:	9a01      	ldr	r2, [sp, #4]
   bd03c:	50a9      	str	r1, [r5, r2]
   bd03e:	3504      	adds	r5, #4
   bd040:	e79a      	b.n	bcf78 <__multiply+0x7c>
   bd042:	3e01      	subs	r6, #1
   bd044:	e79c      	b.n	bcf80 <__multiply+0x84>
   bd046:	bf00      	nop
   bd048:	000be2c4 	.word	0x000be2c4
   bd04c:	000be34a 	.word	0x000be34a

000bd050 <__pow5mult>:
   bd050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd054:	4615      	mov	r5, r2
   bd056:	f012 0203 	ands.w	r2, r2, #3
   bd05a:	4606      	mov	r6, r0
   bd05c:	460f      	mov	r7, r1
   bd05e:	d007      	beq.n	bd070 <__pow5mult+0x20>
   bd060:	4c25      	ldr	r4, [pc, #148]	; (bd0f8 <__pow5mult+0xa8>)
   bd062:	3a01      	subs	r2, #1
   bd064:	2300      	movs	r3, #0
   bd066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd06a:	f7ff fe51 	bl	bcd10 <__multadd>
   bd06e:	4607      	mov	r7, r0
   bd070:	10ad      	asrs	r5, r5, #2
   bd072:	d03d      	beq.n	bd0f0 <__pow5mult+0xa0>
   bd074:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd076:	b97c      	cbnz	r4, bd098 <__pow5mult+0x48>
   bd078:	2010      	movs	r0, #16
   bd07a:	f7f9 ff23 	bl	b6ec4 <malloc>
   bd07e:	4602      	mov	r2, r0
   bd080:	6270      	str	r0, [r6, #36]	; 0x24
   bd082:	b928      	cbnz	r0, bd090 <__pow5mult+0x40>
   bd084:	4b1d      	ldr	r3, [pc, #116]	; (bd0fc <__pow5mult+0xac>)
   bd086:	481e      	ldr	r0, [pc, #120]	; (bd100 <__pow5mult+0xb0>)
   bd088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd08c:	f7f9 ff5a 	bl	b6f44 <__assert_func>
   bd090:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd094:	6004      	str	r4, [r0, #0]
   bd096:	60c4      	str	r4, [r0, #12]
   bd098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd0a0:	b94c      	cbnz	r4, bd0b6 <__pow5mult+0x66>
   bd0a2:	f240 2171 	movw	r1, #625	; 0x271
   bd0a6:	4630      	mov	r0, r6
   bd0a8:	f7ff ff12 	bl	bced0 <__i2b>
   bd0ac:	2300      	movs	r3, #0
   bd0ae:	f8c8 0008 	str.w	r0, [r8, #8]
   bd0b2:	4604      	mov	r4, r0
   bd0b4:	6003      	str	r3, [r0, #0]
   bd0b6:	f04f 0900 	mov.w	r9, #0
   bd0ba:	07eb      	lsls	r3, r5, #31
   bd0bc:	d50a      	bpl.n	bd0d4 <__pow5mult+0x84>
   bd0be:	4639      	mov	r1, r7
   bd0c0:	4622      	mov	r2, r4
   bd0c2:	4630      	mov	r0, r6
   bd0c4:	f7ff ff1a 	bl	bcefc <__multiply>
   bd0c8:	4639      	mov	r1, r7
   bd0ca:	4680      	mov	r8, r0
   bd0cc:	4630      	mov	r0, r6
   bd0ce:	f7ff fdfd 	bl	bcccc <_Bfree>
   bd0d2:	4647      	mov	r7, r8
   bd0d4:	106d      	asrs	r5, r5, #1
   bd0d6:	d00b      	beq.n	bd0f0 <__pow5mult+0xa0>
   bd0d8:	6820      	ldr	r0, [r4, #0]
   bd0da:	b938      	cbnz	r0, bd0ec <__pow5mult+0x9c>
   bd0dc:	4622      	mov	r2, r4
   bd0de:	4621      	mov	r1, r4
   bd0e0:	4630      	mov	r0, r6
   bd0e2:	f7ff ff0b 	bl	bcefc <__multiply>
   bd0e6:	6020      	str	r0, [r4, #0]
   bd0e8:	f8c0 9000 	str.w	r9, [r0]
   bd0ec:	4604      	mov	r4, r0
   bd0ee:	e7e4      	b.n	bd0ba <__pow5mult+0x6a>
   bd0f0:	4638      	mov	r0, r7
   bd0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd0f6:	bf00      	nop
   bd0f8:	000be498 	.word	0x000be498
   bd0fc:	000be0a1 	.word	0x000be0a1
   bd100:	000be34a 	.word	0x000be34a

000bd104 <__lshift>:
   bd104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd108:	460c      	mov	r4, r1
   bd10a:	6849      	ldr	r1, [r1, #4]
   bd10c:	6923      	ldr	r3, [r4, #16]
   bd10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd112:	68a3      	ldr	r3, [r4, #8]
   bd114:	4607      	mov	r7, r0
   bd116:	4691      	mov	r9, r2
   bd118:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd11c:	f108 0601 	add.w	r6, r8, #1
   bd120:	42b3      	cmp	r3, r6
   bd122:	db0b      	blt.n	bd13c <__lshift+0x38>
   bd124:	4638      	mov	r0, r7
   bd126:	f7ff fd91 	bl	bcc4c <_Balloc>
   bd12a:	4605      	mov	r5, r0
   bd12c:	b948      	cbnz	r0, bd142 <__lshift+0x3e>
   bd12e:	4602      	mov	r2, r0
   bd130:	4b2a      	ldr	r3, [pc, #168]	; (bd1dc <__lshift+0xd8>)
   bd132:	482b      	ldr	r0, [pc, #172]	; (bd1e0 <__lshift+0xdc>)
   bd134:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd138:	f7f9 ff04 	bl	b6f44 <__assert_func>
   bd13c:	3101      	adds	r1, #1
   bd13e:	005b      	lsls	r3, r3, #1
   bd140:	e7ee      	b.n	bd120 <__lshift+0x1c>
   bd142:	2300      	movs	r3, #0
   bd144:	f100 0114 	add.w	r1, r0, #20
   bd148:	f100 0210 	add.w	r2, r0, #16
   bd14c:	4618      	mov	r0, r3
   bd14e:	4553      	cmp	r3, sl
   bd150:	db37      	blt.n	bd1c2 <__lshift+0xbe>
   bd152:	6920      	ldr	r0, [r4, #16]
   bd154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd158:	f104 0314 	add.w	r3, r4, #20
   bd15c:	f019 091f 	ands.w	r9, r9, #31
   bd160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd164:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd168:	d02f      	beq.n	bd1ca <__lshift+0xc6>
   bd16a:	f1c9 0e20 	rsb	lr, r9, #32
   bd16e:	468a      	mov	sl, r1
   bd170:	f04f 0c00 	mov.w	ip, #0
   bd174:	681a      	ldr	r2, [r3, #0]
   bd176:	fa02 f209 	lsl.w	r2, r2, r9
   bd17a:	ea42 020c 	orr.w	r2, r2, ip
   bd17e:	f84a 2b04 	str.w	r2, [sl], #4
   bd182:	f853 2b04 	ldr.w	r2, [r3], #4
   bd186:	4298      	cmp	r0, r3
   bd188:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd18c:	d8f2      	bhi.n	bd174 <__lshift+0x70>
   bd18e:	1b03      	subs	r3, r0, r4
   bd190:	3b15      	subs	r3, #21
   bd192:	f023 0303 	bic.w	r3, r3, #3
   bd196:	3304      	adds	r3, #4
   bd198:	f104 0215 	add.w	r2, r4, #21
   bd19c:	4290      	cmp	r0, r2
   bd19e:	bf38      	it	cc
   bd1a0:	2304      	movcc	r3, #4
   bd1a2:	f841 c003 	str.w	ip, [r1, r3]
   bd1a6:	f1bc 0f00 	cmp.w	ip, #0
   bd1aa:	d001      	beq.n	bd1b0 <__lshift+0xac>
   bd1ac:	f108 0602 	add.w	r6, r8, #2
   bd1b0:	3e01      	subs	r6, #1
   bd1b2:	4638      	mov	r0, r7
   bd1b4:	612e      	str	r6, [r5, #16]
   bd1b6:	4621      	mov	r1, r4
   bd1b8:	f7ff fd88 	bl	bcccc <_Bfree>
   bd1bc:	4628      	mov	r0, r5
   bd1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd1c2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd1c6:	3301      	adds	r3, #1
   bd1c8:	e7c1      	b.n	bd14e <__lshift+0x4a>
   bd1ca:	3904      	subs	r1, #4
   bd1cc:	f853 2b04 	ldr.w	r2, [r3], #4
   bd1d0:	f841 2f04 	str.w	r2, [r1, #4]!
   bd1d4:	4298      	cmp	r0, r3
   bd1d6:	d8f9      	bhi.n	bd1cc <__lshift+0xc8>
   bd1d8:	e7ea      	b.n	bd1b0 <__lshift+0xac>
   bd1da:	bf00      	nop
   bd1dc:	000be2c4 	.word	0x000be2c4
   bd1e0:	000be34a 	.word	0x000be34a

000bd1e4 <__mcmp>:
   bd1e4:	b530      	push	{r4, r5, lr}
   bd1e6:	6902      	ldr	r2, [r0, #16]
   bd1e8:	690c      	ldr	r4, [r1, #16]
   bd1ea:	1b12      	subs	r2, r2, r4
   bd1ec:	d10e      	bne.n	bd20c <__mcmp+0x28>
   bd1ee:	f100 0314 	add.w	r3, r0, #20
   bd1f2:	3114      	adds	r1, #20
   bd1f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd1f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd1fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd204:	42a5      	cmp	r5, r4
   bd206:	d003      	beq.n	bd210 <__mcmp+0x2c>
   bd208:	d305      	bcc.n	bd216 <__mcmp+0x32>
   bd20a:	2201      	movs	r2, #1
   bd20c:	4610      	mov	r0, r2
   bd20e:	bd30      	pop	{r4, r5, pc}
   bd210:	4283      	cmp	r3, r0
   bd212:	d3f3      	bcc.n	bd1fc <__mcmp+0x18>
   bd214:	e7fa      	b.n	bd20c <__mcmp+0x28>
   bd216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd21a:	e7f7      	b.n	bd20c <__mcmp+0x28>

000bd21c <__mdiff>:
   bd21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd220:	460c      	mov	r4, r1
   bd222:	4606      	mov	r6, r0
   bd224:	4611      	mov	r1, r2
   bd226:	4620      	mov	r0, r4
   bd228:	4690      	mov	r8, r2
   bd22a:	f7ff ffdb 	bl	bd1e4 <__mcmp>
   bd22e:	1e05      	subs	r5, r0, #0
   bd230:	d110      	bne.n	bd254 <__mdiff+0x38>
   bd232:	4629      	mov	r1, r5
   bd234:	4630      	mov	r0, r6
   bd236:	f7ff fd09 	bl	bcc4c <_Balloc>
   bd23a:	b930      	cbnz	r0, bd24a <__mdiff+0x2e>
   bd23c:	4b3a      	ldr	r3, [pc, #232]	; (bd328 <__mdiff+0x10c>)
   bd23e:	4602      	mov	r2, r0
   bd240:	f240 2132 	movw	r1, #562	; 0x232
   bd244:	4839      	ldr	r0, [pc, #228]	; (bd32c <__mdiff+0x110>)
   bd246:	f7f9 fe7d 	bl	b6f44 <__assert_func>
   bd24a:	2301      	movs	r3, #1
   bd24c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd254:	bfa4      	itt	ge
   bd256:	4643      	movge	r3, r8
   bd258:	46a0      	movge	r8, r4
   bd25a:	4630      	mov	r0, r6
   bd25c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd260:	bfa6      	itte	ge
   bd262:	461c      	movge	r4, r3
   bd264:	2500      	movge	r5, #0
   bd266:	2501      	movlt	r5, #1
   bd268:	f7ff fcf0 	bl	bcc4c <_Balloc>
   bd26c:	b920      	cbnz	r0, bd278 <__mdiff+0x5c>
   bd26e:	4b2e      	ldr	r3, [pc, #184]	; (bd328 <__mdiff+0x10c>)
   bd270:	4602      	mov	r2, r0
   bd272:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd276:	e7e5      	b.n	bd244 <__mdiff+0x28>
   bd278:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd27c:	6926      	ldr	r6, [r4, #16]
   bd27e:	60c5      	str	r5, [r0, #12]
   bd280:	f104 0914 	add.w	r9, r4, #20
   bd284:	f108 0514 	add.w	r5, r8, #20
   bd288:	f100 0e14 	add.w	lr, r0, #20
   bd28c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd294:	f108 0210 	add.w	r2, r8, #16
   bd298:	46f2      	mov	sl, lr
   bd29a:	2100      	movs	r1, #0
   bd29c:	f859 3b04 	ldr.w	r3, [r9], #4
   bd2a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd2a4:	fa1f f883 	uxth.w	r8, r3
   bd2a8:	fa11 f18b 	uxtah	r1, r1, fp
   bd2ac:	0c1b      	lsrs	r3, r3, #16
   bd2ae:	eba1 0808 	sub.w	r8, r1, r8
   bd2b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd2b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd2ba:	fa1f f888 	uxth.w	r8, r8
   bd2be:	1419      	asrs	r1, r3, #16
   bd2c0:	454e      	cmp	r6, r9
   bd2c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd2c6:	f84a 3b04 	str.w	r3, [sl], #4
   bd2ca:	d8e7      	bhi.n	bd29c <__mdiff+0x80>
   bd2cc:	1b33      	subs	r3, r6, r4
   bd2ce:	3b15      	subs	r3, #21
   bd2d0:	f023 0303 	bic.w	r3, r3, #3
   bd2d4:	3304      	adds	r3, #4
   bd2d6:	3415      	adds	r4, #21
   bd2d8:	42a6      	cmp	r6, r4
   bd2da:	bf38      	it	cc
   bd2dc:	2304      	movcc	r3, #4
   bd2de:	441d      	add	r5, r3
   bd2e0:	4473      	add	r3, lr
   bd2e2:	469e      	mov	lr, r3
   bd2e4:	462e      	mov	r6, r5
   bd2e6:	4566      	cmp	r6, ip
   bd2e8:	d30e      	bcc.n	bd308 <__mdiff+0xec>
   bd2ea:	f10c 0203 	add.w	r2, ip, #3
   bd2ee:	1b52      	subs	r2, r2, r5
   bd2f0:	f022 0203 	bic.w	r2, r2, #3
   bd2f4:	3d03      	subs	r5, #3
   bd2f6:	45ac      	cmp	ip, r5
   bd2f8:	bf38      	it	cc
   bd2fa:	2200      	movcc	r2, #0
   bd2fc:	441a      	add	r2, r3
   bd2fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd302:	b17b      	cbz	r3, bd324 <__mdiff+0x108>
   bd304:	6107      	str	r7, [r0, #16]
   bd306:	e7a3      	b.n	bd250 <__mdiff+0x34>
   bd308:	f856 8b04 	ldr.w	r8, [r6], #4
   bd30c:	fa11 f288 	uxtah	r2, r1, r8
   bd310:	1414      	asrs	r4, r2, #16
   bd312:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd316:	b292      	uxth	r2, r2
   bd318:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd31c:	f84e 2b04 	str.w	r2, [lr], #4
   bd320:	1421      	asrs	r1, r4, #16
   bd322:	e7e0      	b.n	bd2e6 <__mdiff+0xca>
   bd324:	3f01      	subs	r7, #1
   bd326:	e7ea      	b.n	bd2fe <__mdiff+0xe2>
   bd328:	000be2c4 	.word	0x000be2c4
   bd32c:	000be34a 	.word	0x000be34a

000bd330 <__ulp>:
   bd330:	b082      	sub	sp, #8
   bd332:	ed8d 0b00 	vstr	d0, [sp]
   bd336:	9b01      	ldr	r3, [sp, #4]
   bd338:	4912      	ldr	r1, [pc, #72]	; (bd384 <__ulp+0x54>)
   bd33a:	4019      	ands	r1, r3
   bd33c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd340:	2900      	cmp	r1, #0
   bd342:	dd05      	ble.n	bd350 <__ulp+0x20>
   bd344:	2200      	movs	r2, #0
   bd346:	460b      	mov	r3, r1
   bd348:	ec43 2b10 	vmov	d0, r2, r3
   bd34c:	b002      	add	sp, #8
   bd34e:	4770      	bx	lr
   bd350:	4249      	negs	r1, r1
   bd352:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd356:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd35a:	f04f 0200 	mov.w	r2, #0
   bd35e:	f04f 0300 	mov.w	r3, #0
   bd362:	da04      	bge.n	bd36e <__ulp+0x3e>
   bd364:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd368:	fa41 f300 	asr.w	r3, r1, r0
   bd36c:	e7ec      	b.n	bd348 <__ulp+0x18>
   bd36e:	f1a0 0114 	sub.w	r1, r0, #20
   bd372:	291e      	cmp	r1, #30
   bd374:	bfda      	itte	le
   bd376:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd37a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd37e:	2101      	movgt	r1, #1
   bd380:	460a      	mov	r2, r1
   bd382:	e7e1      	b.n	bd348 <__ulp+0x18>
   bd384:	7ff00000 	.word	0x7ff00000

000bd388 <__b2d>:
   bd388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd38a:	6905      	ldr	r5, [r0, #16]
   bd38c:	f100 0714 	add.w	r7, r0, #20
   bd390:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd394:	1f2e      	subs	r6, r5, #4
   bd396:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd39a:	4620      	mov	r0, r4
   bd39c:	f7ff fd48 	bl	bce30 <__hi0bits>
   bd3a0:	f1c0 0320 	rsb	r3, r0, #32
   bd3a4:	280a      	cmp	r0, #10
   bd3a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd424 <__b2d+0x9c>
   bd3aa:	600b      	str	r3, [r1, #0]
   bd3ac:	dc14      	bgt.n	bd3d8 <__b2d+0x50>
   bd3ae:	f1c0 0e0b 	rsb	lr, r0, #11
   bd3b2:	fa24 f10e 	lsr.w	r1, r4, lr
   bd3b6:	42b7      	cmp	r7, r6
   bd3b8:	ea41 030c 	orr.w	r3, r1, ip
   bd3bc:	bf34      	ite	cc
   bd3be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd3c2:	2100      	movcs	r1, #0
   bd3c4:	3015      	adds	r0, #21
   bd3c6:	fa04 f000 	lsl.w	r0, r4, r0
   bd3ca:	fa21 f10e 	lsr.w	r1, r1, lr
   bd3ce:	ea40 0201 	orr.w	r2, r0, r1
   bd3d2:	ec43 2b10 	vmov	d0, r2, r3
   bd3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd3d8:	42b7      	cmp	r7, r6
   bd3da:	bf3a      	itte	cc
   bd3dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd3e0:	f1a5 0608 	subcc.w	r6, r5, #8
   bd3e4:	2100      	movcs	r1, #0
   bd3e6:	380b      	subs	r0, #11
   bd3e8:	d017      	beq.n	bd41a <__b2d+0x92>
   bd3ea:	f1c0 0c20 	rsb	ip, r0, #32
   bd3ee:	fa04 f500 	lsl.w	r5, r4, r0
   bd3f2:	42be      	cmp	r6, r7
   bd3f4:	fa21 f40c 	lsr.w	r4, r1, ip
   bd3f8:	ea45 0504 	orr.w	r5, r5, r4
   bd3fc:	bf8c      	ite	hi
   bd3fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd402:	2400      	movls	r4, #0
   bd404:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd408:	fa01 f000 	lsl.w	r0, r1, r0
   bd40c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd410:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd414:	ea40 0204 	orr.w	r2, r0, r4
   bd418:	e7db      	b.n	bd3d2 <__b2d+0x4a>
   bd41a:	ea44 030c 	orr.w	r3, r4, ip
   bd41e:	460a      	mov	r2, r1
   bd420:	e7d7      	b.n	bd3d2 <__b2d+0x4a>
   bd422:	bf00      	nop
   bd424:	3ff00000 	.word	0x3ff00000

000bd428 <__d2b>:
   bd428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd42c:	4689      	mov	r9, r1
   bd42e:	2101      	movs	r1, #1
   bd430:	ec57 6b10 	vmov	r6, r7, d0
   bd434:	4690      	mov	r8, r2
   bd436:	f7ff fc09 	bl	bcc4c <_Balloc>
   bd43a:	4604      	mov	r4, r0
   bd43c:	b930      	cbnz	r0, bd44c <__d2b+0x24>
   bd43e:	4602      	mov	r2, r0
   bd440:	4b25      	ldr	r3, [pc, #148]	; (bd4d8 <__d2b+0xb0>)
   bd442:	4826      	ldr	r0, [pc, #152]	; (bd4dc <__d2b+0xb4>)
   bd444:	f240 310a 	movw	r1, #778	; 0x30a
   bd448:	f7f9 fd7c 	bl	b6f44 <__assert_func>
   bd44c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd450:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd454:	bb35      	cbnz	r5, bd4a4 <__d2b+0x7c>
   bd456:	2e00      	cmp	r6, #0
   bd458:	9301      	str	r3, [sp, #4]
   bd45a:	d028      	beq.n	bd4ae <__d2b+0x86>
   bd45c:	4668      	mov	r0, sp
   bd45e:	9600      	str	r6, [sp, #0]
   bd460:	f7ff fd06 	bl	bce70 <__lo0bits>
   bd464:	9900      	ldr	r1, [sp, #0]
   bd466:	b300      	cbz	r0, bd4aa <__d2b+0x82>
   bd468:	9a01      	ldr	r2, [sp, #4]
   bd46a:	f1c0 0320 	rsb	r3, r0, #32
   bd46e:	fa02 f303 	lsl.w	r3, r2, r3
   bd472:	430b      	orrs	r3, r1
   bd474:	40c2      	lsrs	r2, r0
   bd476:	6163      	str	r3, [r4, #20]
   bd478:	9201      	str	r2, [sp, #4]
   bd47a:	9b01      	ldr	r3, [sp, #4]
   bd47c:	61a3      	str	r3, [r4, #24]
   bd47e:	2b00      	cmp	r3, #0
   bd480:	bf14      	ite	ne
   bd482:	2202      	movne	r2, #2
   bd484:	2201      	moveq	r2, #1
   bd486:	6122      	str	r2, [r4, #16]
   bd488:	b1d5      	cbz	r5, bd4c0 <__d2b+0x98>
   bd48a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd48e:	4405      	add	r5, r0
   bd490:	f8c9 5000 	str.w	r5, [r9]
   bd494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd498:	f8c8 0000 	str.w	r0, [r8]
   bd49c:	4620      	mov	r0, r4
   bd49e:	b003      	add	sp, #12
   bd4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd4a8:	e7d5      	b.n	bd456 <__d2b+0x2e>
   bd4aa:	6161      	str	r1, [r4, #20]
   bd4ac:	e7e5      	b.n	bd47a <__d2b+0x52>
   bd4ae:	a801      	add	r0, sp, #4
   bd4b0:	f7ff fcde 	bl	bce70 <__lo0bits>
   bd4b4:	9b01      	ldr	r3, [sp, #4]
   bd4b6:	6163      	str	r3, [r4, #20]
   bd4b8:	2201      	movs	r2, #1
   bd4ba:	6122      	str	r2, [r4, #16]
   bd4bc:	3020      	adds	r0, #32
   bd4be:	e7e3      	b.n	bd488 <__d2b+0x60>
   bd4c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd4c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd4c8:	f8c9 0000 	str.w	r0, [r9]
   bd4cc:	6918      	ldr	r0, [r3, #16]
   bd4ce:	f7ff fcaf 	bl	bce30 <__hi0bits>
   bd4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd4d6:	e7df      	b.n	bd498 <__d2b+0x70>
   bd4d8:	000be2c4 	.word	0x000be2c4
   bd4dc:	000be34a 	.word	0x000be34a

000bd4e0 <__ratio>:
   bd4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd4e4:	4688      	mov	r8, r1
   bd4e6:	4669      	mov	r1, sp
   bd4e8:	4681      	mov	r9, r0
   bd4ea:	f7ff ff4d 	bl	bd388 <__b2d>
   bd4ee:	a901      	add	r1, sp, #4
   bd4f0:	4640      	mov	r0, r8
   bd4f2:	ec55 4b10 	vmov	r4, r5, d0
   bd4f6:	f7ff ff47 	bl	bd388 <__b2d>
   bd4fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd4fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd502:	eba3 0c02 	sub.w	ip, r3, r2
   bd506:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd50a:	1a9b      	subs	r3, r3, r2
   bd50c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd510:	ec51 0b10 	vmov	r0, r1, d0
   bd514:	2b00      	cmp	r3, #0
   bd516:	bfd6      	itet	le
   bd518:	460a      	movle	r2, r1
   bd51a:	462a      	movgt	r2, r5
   bd51c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd520:	468b      	mov	fp, r1
   bd522:	462f      	mov	r7, r5
   bd524:	bfd4      	ite	le
   bd526:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd52a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd52e:	4620      	mov	r0, r4
   bd530:	ee10 2a10 	vmov	r2, s0
   bd534:	465b      	mov	r3, fp
   bd536:	4639      	mov	r1, r7
   bd538:	f7fd fd38 	bl	bafac <__aeabi_ddiv>
   bd53c:	ec41 0b10 	vmov	d0, r0, r1
   bd540:	b003      	add	sp, #12
   bd542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd546 <__copybits>:
   bd546:	3901      	subs	r1, #1
   bd548:	b570      	push	{r4, r5, r6, lr}
   bd54a:	1149      	asrs	r1, r1, #5
   bd54c:	6914      	ldr	r4, [r2, #16]
   bd54e:	3101      	adds	r1, #1
   bd550:	f102 0314 	add.w	r3, r2, #20
   bd554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd55c:	1f05      	subs	r5, r0, #4
   bd55e:	42a3      	cmp	r3, r4
   bd560:	d30c      	bcc.n	bd57c <__copybits+0x36>
   bd562:	1aa3      	subs	r3, r4, r2
   bd564:	3b11      	subs	r3, #17
   bd566:	f023 0303 	bic.w	r3, r3, #3
   bd56a:	3211      	adds	r2, #17
   bd56c:	42a2      	cmp	r2, r4
   bd56e:	bf88      	it	hi
   bd570:	2300      	movhi	r3, #0
   bd572:	4418      	add	r0, r3
   bd574:	2300      	movs	r3, #0
   bd576:	4288      	cmp	r0, r1
   bd578:	d305      	bcc.n	bd586 <__copybits+0x40>
   bd57a:	bd70      	pop	{r4, r5, r6, pc}
   bd57c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd580:	f845 6f04 	str.w	r6, [r5, #4]!
   bd584:	e7eb      	b.n	bd55e <__copybits+0x18>
   bd586:	f840 3b04 	str.w	r3, [r0], #4
   bd58a:	e7f4      	b.n	bd576 <__copybits+0x30>

000bd58c <__any_on>:
   bd58c:	f100 0214 	add.w	r2, r0, #20
   bd590:	6900      	ldr	r0, [r0, #16]
   bd592:	114b      	asrs	r3, r1, #5
   bd594:	4298      	cmp	r0, r3
   bd596:	b510      	push	{r4, lr}
   bd598:	db11      	blt.n	bd5be <__any_on+0x32>
   bd59a:	dd0a      	ble.n	bd5b2 <__any_on+0x26>
   bd59c:	f011 011f 	ands.w	r1, r1, #31
   bd5a0:	d007      	beq.n	bd5b2 <__any_on+0x26>
   bd5a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd5a6:	fa24 f001 	lsr.w	r0, r4, r1
   bd5aa:	fa00 f101 	lsl.w	r1, r0, r1
   bd5ae:	428c      	cmp	r4, r1
   bd5b0:	d10b      	bne.n	bd5ca <__any_on+0x3e>
   bd5b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd5b6:	4293      	cmp	r3, r2
   bd5b8:	d803      	bhi.n	bd5c2 <__any_on+0x36>
   bd5ba:	2000      	movs	r0, #0
   bd5bc:	bd10      	pop	{r4, pc}
   bd5be:	4603      	mov	r3, r0
   bd5c0:	e7f7      	b.n	bd5b2 <__any_on+0x26>
   bd5c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd5c6:	2900      	cmp	r1, #0
   bd5c8:	d0f5      	beq.n	bd5b6 <__any_on+0x2a>
   bd5ca:	2001      	movs	r0, #1
   bd5cc:	e7f6      	b.n	bd5bc <__any_on+0x30>

000bd5ce <_calloc_r>:
   bd5ce:	b513      	push	{r0, r1, r4, lr}
   bd5d0:	434a      	muls	r2, r1
   bd5d2:	4611      	mov	r1, r2
   bd5d4:	9201      	str	r2, [sp, #4]
   bd5d6:	f7f9 fca5 	bl	b6f24 <_malloc_r>
   bd5da:	4604      	mov	r4, r0
   bd5dc:	b118      	cbz	r0, bd5e6 <_calloc_r+0x18>
   bd5de:	9a01      	ldr	r2, [sp, #4]
   bd5e0:	2100      	movs	r1, #0
   bd5e2:	f7fd ff5d 	bl	bb4a0 <memset>
   bd5e6:	4620      	mov	r0, r4
   bd5e8:	b002      	add	sp, #8
   bd5ea:	bd10      	pop	{r4, pc}

000bd5ec <__ascii_wctomb>:
   bd5ec:	b149      	cbz	r1, bd602 <__ascii_wctomb+0x16>
   bd5ee:	2aff      	cmp	r2, #255	; 0xff
   bd5f0:	bf85      	ittet	hi
   bd5f2:	238a      	movhi	r3, #138	; 0x8a
   bd5f4:	6003      	strhi	r3, [r0, #0]
   bd5f6:	700a      	strbls	r2, [r1, #0]
   bd5f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd5fc:	bf98      	it	ls
   bd5fe:	2001      	movls	r0, #1
   bd600:	4770      	bx	lr
   bd602:	4608      	mov	r0, r1
   bd604:	4770      	bx	lr
	...

000bd608 <__aeabi_d2lz>:
   bd608:	b538      	push	{r3, r4, r5, lr}
   bd60a:	2200      	movs	r2, #0
   bd60c:	2300      	movs	r3, #0
   bd60e:	4604      	mov	r4, r0
   bd610:	460d      	mov	r5, r1
   bd612:	f7fd fe13 	bl	bb23c <__aeabi_dcmplt>
   bd616:	b928      	cbnz	r0, bd624 <__aeabi_d2lz+0x1c>
   bd618:	4620      	mov	r0, r4
   bd61a:	4629      	mov	r1, r5
   bd61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd620:	f7fd bee2 	b.w	bb3e8 <__aeabi_d2ulz>
   bd624:	4620      	mov	r0, r4
   bd626:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd62a:	f7fd fedd 	bl	bb3e8 <__aeabi_d2ulz>
   bd62e:	4240      	negs	r0, r0
   bd630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd634:	bd38      	pop	{r3, r4, r5, pc}
   bd636:	bf00      	nop

000bd638 <dynalib_user>:
   bd638:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd648:	0000 0000 6625 252c 2c66 6625 7b00 7422     ....%f,%f,%f.{"t
   bd658:	6d65 5f70 2266 223a 6425 2c22 6822 6d75     emp_f":"%d","hum
   bd668:	6469 7469 2279 223a 6425 2c22 7022 7265     idity":"%d","per
   bd678:	6563 746e 635f 6168 6772 2265 223a 6425     cent_charge":"%d
   bd688:	2c22 7322 6769 616e 5f6c 7473 6572 676e     ","signal_streng
   bd698:	6874 3a22 2522 2264 222c 6973 6e67 6c61     th":"%d","signal
   bd6a8:	715f 6175 696c 7974 3a22 2522 2264 222c     _quality":"%d","
   bd6b8:	6f70 6973 6974 6e6f 3a22 7b20 7622 6c61     position": {"val
   bd6c8:	6575 3a22 2c31 2220 6f63 746e 7865 2274     ue":1, "context"
   bd6d8:	7b3a 6c22 7461 3a22 2220 6625 2c22 2220     :{"lat": "%f", "
   bd6e8:	6e6c 2267 203a 2522 2266 7d7d 007d 6f6e     lng": "%f"}}}.no
   bd6f8:	6c20 636f 7461 6f69 006e 6c25 2075 696d      location.%lu mi
   bd708:	6c6c 7369 6365 6e6f 7364 7420 206f 6567     lliseconds to ge
   bd718:	2074 5047 2053 6966 0078 7067 0073 6574     t GPS fix.gps.te
   bd728:	706d 665f 6800 6d75 6469 7469 0079 6973     mp_f.humidity.si
   bd738:	6e67 6c61 735f 7274 6e65 7467 0068 6973     gnal_strength.si
   bd748:	6e67 6c61 715f 6175 696c 7974 7000 7265     gnal_quality.per
   bd758:	6563 746e 635f 6168 6772 0065 6f6c 676e     cent_charge.long
   bd768:	7469 6475 0065 616c 6974 7574 6564 0000     itude.latitude..

000bd778 <_ZTVN5spark10LogHandlerE>:
	...
   bd788:	40a5 000b 40c9 000b                         .@...@..

000bd790 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bd798:	40dd 000b 4111 000b 8b0d 000b 40cb 000b     .@...A.......@..
   bd7a8:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bd7b8:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bd7c8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bd7d8:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bd7e8:	7525 003e                                   %u>.

000bd7ec <_ZTVN8particle11SPISettingsE>:
	...
   bd7f4:	4771 000b 4745 000b 4747 000b 5047 4d52     qG..EG..GG..GPRM
   bd804:	0043 4e47 4d52 0043 5047 4747 0041 4e47     C.GNRMC.GPGGA.GN
   bd814:	4747 0041 6255 6469 746f 5073 7261 6974     GGA.UbidotsParti
   bd824:	6c63 2f65 2e33 0032 7254 6979 676e 7420     cle/3.2.Trying t
   bd834:	206f 6f63 6e6e 6365 2074 6f74 0020 2c20     o connect to . ,
   bd844:	6120 7474 6d65 7470 6e20 6d75 6562 3a72      attempt number:
   bd854:	0020 7441 6574 706d 2074 6966 696e 6873      .Attempt finish
   bd864:	6465 5300 7265 6576 2772 2073 6572 7073     ed.Server's resp
   bd874:	6e6f 6573 003a 2d0a 2d2d 2d2d 2d2d 2d2d     onse:..---------
   bd884:	002d 6974 656d 756f 2c74 6320 756f 646c     -.timeout, could
   bd894:	6e20 746f 7220 6165 2064 6e61 2079 6572      not read any re
   bd8a4:	7073 6e6f 6573 6620 6f72 206d 6874 2065     sponse from the 
   bd8b4:	6f68 7473 5000 534f 2054 612f 6970 762f     host.POST /api/v
   bd8c4:	2e31 2f36 6564 6976 6563 2f73 2000 5448     1.6/devices/. HT
   bd8d4:	5054 312f 312e 0a0d 4800 736f 3a74 0020     TP/1.1...Host: .
   bd8e4:	7355 7265 412d 6567 746e 203a 5800 412d     User-Agent: .X-A
   bd8f4:	7475 2d68 6f54 656b 3a6e 0020 6f43 6e6e     uth-Token: .Conn
   bd904:	6365 6974 6e6f 203a 6c63 736f 0d65 000a     ection: close...
   bd914:	6f43 746e 6e65 2d74 7954 6570 203a 7061     Content-Type: ap
   bd924:	6c70 6369 7461 6f69 2f6e 736a 6e6f 0a0d     plication/json..
   bd934:	4300 6e6f 6574 746e 4c2d 6e65 7467 3a68     .Content-Length:
   bd944:	0020 614d 696b 676e 7220 7165 6575 7473      .Making request
   bd954:	7420 206f 6255 6469 746f 3a73 000a 6177      to Ubidots:..wa
   bd964:	7469 6e69 2067 6f66 2072 6573 7672 7265     iting for server
   bd974:	6120 736e 6577 2072 2e2e 002e 550a 6962      answer .....Ubi
   bd984:	6f64 7374 2027 6553 7672 7265 7220 7365     dots' Server res
   bd994:	6f70 736e 3a65 000a 6f43 6c75 2064 6f6e     ponse:..Could no
   bd9a4:	2074 6573 646e 6420 7461 2061 6f74 7520     t send data to u
   bd9b4:	6962 6f64 7374 7520 6973 676e 4820 5454     bidots using HTT
   bd9c4:	0050 4547 2054 612f 6970 762f 2e31 2f36     P.GET /api/v1.6/
   bd9d4:	6564 6976 6563 2f73 2f00 766c 4300 6e6f     devices/./lv.Con
   bd9e4:	6574 746e 542d 7079 3a65 6120 7070 696c     tent-Type: appli
   bd9f4:	6163 6974 6e6f 6a2f 6f73 0d6e 0d0a 000a     cation/json.....
   bda04:	6f43 6e6e 6365 6974 6e6f 4620 6961 656c     Connection Faile
   bda14:	2064 6275 6469 746f 2073 202d 7254 2079     d ubidots - Try 
   bda24:	6741 6961 006e 0000                         Again...

000bda2c <_ZTV7UbiHTTP>:
	...
   bda34:	5ae5 000b 5d15 000b 5899 000b 589d 000b     .Z...]...X...X..

000bda44 <_ZTV11UbiParticle>:
	...
   bda4c:	5f1d 000b 5efd 000b 5f09 000b 5f0d 000b     ._...^..._..._..
   bda5c:	7441 6574 706d 6974 676e 7420 206f 6572     Attempting to re
   bda6c:	6f63 6e6e 6365 0074 4c7c 7c56 7c00 6e65     connect.|LV|.|en
   bda7c:	0064 6150 6c79 616f 2064 6f66 2072 6572     d.Payload for re
   bda8c:	7571 7365 3a74 0a00 2d2d 2d2d 5000 534f     quest:..----.POS
   bda9c:	0054 4b4f 4300 756f 646c 6e20 746f 6320     T.OK.Could not c
   bdaac:	6e6f 656e 7463 7420 206f 6874 2065 6f68     onnect to the ho
   bdabc:	7473 4c00 0056 5245 4f52 2052 6f63 6c75     st.LV.ERROR coul
   bdacc:	2064 6f6e 2074 6f63 6e6e 6365 2074 6f74     d not connect to
   bdadc:	7420 6568 7320 7265 6576 0072 756e 6c6c      the server.null
   bdaec:	4500 5252 524f 2c00 0000 0000               .ERROR.,....

000bdaf8 <_ZTV6UbiTCP>:
	...
   bdb00:	63d9 000b 647d 000b 610d 000b 6641 000b     .c..}d...a..Af..
   bdb10:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   bdb20:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   bdb30:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   bdb40:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   bdb50:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   bdb60:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   bdb70:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   bdb80:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   bdb90:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   bdba0:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   bdbb0:	7720 7469 2068 4455 0050 0000                with UDP...

000bdbbc <_ZTV6UbiUDP>:
	...
   bdbc4:	678d 000b 672d 000b 6739 000b 673d 000b     .g..-g..9g..=g..
   bdbd4:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   bdbe4:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000bdbf0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bdbf8 <_ZTVN5spark13CellularClassE>:
	...
   bdc00:	7083 000b 7079 000b 706f 000b 7025 000b     .p..yp..op..%p..
   bdc10:	7063 000b 7057 000b 8e65 000b 8e6d 000b     cp..Wp..e...m...
   bdc20:	704b 000b 7043 000b 7039 000b 702f 000b     Kp..Cp..9p../p..
   bdc30:	8e9d 000b                                   ....

000bdc34 <_ZTV14CellularSignal>:
	...
   bdc3c:	7111 000b 7175 000b 7113 000b 7185 000b     .q..uq...q...q..
   bdc4c:	71b9 000b 71e5 000b 7219 000b 7139 000b     .q...q...r..9q..
   bdc5c:	7117 000b 7133 000b fffc ffff 0000 0000     .q..3q..........
   bdc6c:	716d 000b                                   mq..

000bdc70 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdc78:	725d 000b 7263 000b 72a1 000b 7271 000b     ]r..cr...r..qr..
   bdc88:	725f 000b                                   _r..

000bdc8c <_ZTVN5spark13EthernetClassE>:
	...
   bdc94:	77eb 000b 77e1 000b 77d7 000b 77cd 000b     .w...w...w...w..
   bdca4:	77c1 000b 77b5 000b 8e65 000b 8e6d 000b     .w...w..e...m...
   bdcb4:	77a9 000b 77a1 000b 7797 000b 778d 000b     .w...w...w...w..
   bdcc4:	8e9d 000b                                   ....

000bdcc8 <_ZTV7TwoWire>:
	...
   bdcd0:	790d 000b 7957 000b 792f 000b 790f 000b     .y..Wy../y...y..
   bdce0:	7937 000b 793f 000b 7947 000b 794f 000b     7y..?y..Gy..Oy..

000bdcf0 <_ZTV9IPAddress>:
	...
   bdcf8:	7a67 000b 7a57 000b 7a59 000b 7525 7500     gz..Wz..Yz..%u.u
   bdd08:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   bdd18:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   bdd28:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   bdd38:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   bdd48:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   bdd58:	0069 6564 6174 6c69 2073 203d 6c00 006e     i.details = .ln.
   bdd68:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..

000bdd78 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bdd80:	7f59 000b 7f7f 000b 7f3d 000b 7bbb 000b     Y.......=....{..

000bdd90 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bdd98:	83b5 000b 83cd 000b 8b0d 000b 40cb 000b     .............@..

000bdda8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bddb0:	83e1 000b 83f5 000b 8cb1 000b 7f45 000b     ............E...

000bddc0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bddc8:	7f57 000b 7f8d 000b 8a71 000b 7f47 000b     W.......q...G...

000bddd8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bdde0:	7f55 000b 7f9b 000b 831d 000b 7fbd 000b     U...............

000bddf0 <_ZTVN5spark12NetworkClassE>:
	...
   bddf8:	8e25 000b 8e2f 000b 8e39 000b 8e43 000b     %.../...9...C...
   bde08:	8e4d 000b 8e59 000b 8e65 000b 8e6d 000b     M...Y...e...m...
   bde18:	8e75 000b 8e81 000b 8e89 000b 8e93 000b     u...............
   bde28:	8e9d 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bde38 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bde38:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   bde48:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000bde58 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bde60:	9595 000b 95b9 000b 9aaf 000b 95c7 000b     ................
   bde70:	9599 000b                                   ....

000bde74 <_ZTV9TCPClient>:
	...
   bde7c:	55d1 000b 5605 000b 9511 000b 952b 000b     .U...V......+...
   bde8c:	9939 000b 9555 000b 97af 000b 9589 000b     9...U...........
   bde9c:	9841 000b 9681 000b 97dd 000b 99ed 000b     A...............
   bdeac:	977d 000b 958b 000b 953d 000b 95cd 000b     }.......=.......
   bdebc:	9661 000b 5925 252d 2d6d 6425 2554 3a48     a...%Y-%m-%dT%H:
   bdecc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bdedc <_ZTV3UDP>:
	...
   bdee4:	a069 000b a08d 000b 9b29 000b 9c51 000b     i.......)...Q...
   bdef4:	9ae1 000b 9b41 000b 9b5f 000b 9b79 000b     ....A..._...y...
   bdf04:	9b9d 000b 9c35 000b 9f0f 000b 9cd5 000b     ....5...........
   bdf14:	9e2d 000b 9ac9 000b 9ff9 000b 9db5 000b     -...............
   bdf24:	9ae9 000b a027 000b 9c7b 000b 9ad7 000b     ....'...{.......
   bdf34:	9d0d 000b 9add 000b 9b7b 000b fff0 ffff     ........{.......
   bdf44:	0000 0000 9b95 000b                         ........

000bdf4c <_ZTV11USARTSerial>:
	...
   bdf54:	a0a1 000b a10d 000b a0e5 000b 8f89 000b     ................
   bdf64:	a0b5 000b a0d1 000b a0c3 000b a0df 000b     ................
   bdf74:	a0a3 000b a0a7 000b                         ........

000bdf7c <_ZTV9USBSerial>:
	...
   bdf84:	a15f 000b a1c7 000b a19d 000b 8f89 000b     _...............
   bdf94:	a18f 000b a161 000b a171 000b a1c1 000b     ....a...q.......
   bdfa4:	a181 000b a159 000b                         ....Y...

000bdfac <_ZSt7nothrow>:
	...

000bdfad <_ZTSSt19_Sp_make_shared_tag>:
   bdfad:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdfbd:	6572 5f64 6174 0067 0000                     red_tag....

000bdfc8 <_ZTISt19_Sp_make_shared_tag>:
   bdfc8:	e008 000b dfad 000b                         ........

000bdfd0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdfd0:	e068 000b dfdc 000b e08c 000b               h...........

000bdfdc <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdfdc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdfec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdffc:	0045 0000                                   E...

000be000 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be000:	0000 0000 dfd0 000b a7f5 000b a809 000b     ................
   be010:	a99d 000b a99d 000b a873 000b a7b5 000b     ........s.......
   be020:	a85b 000b a81d 000b a7e7 000b               [...........

000be02c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be02c:	e068 000b e038 000b dfd0 000b               h...8.......

000be038 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be038:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be048:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be058:	666e 456f 0000 0000                         nfoE....

000be060 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be060:	0000 0000 e02c 000b a89d 000b a8b1 000b     ....,...........
   be070:	a99d 000b a99d 000b a873 000b a7b5 000b     ........s.......
   be080:	a971 000b a8fd 000b a8c5 000b               q...........

000be08c <_ZTISt9type_info>:
   be08c:	e008 000b e094 000b                         ........

000be094 <_ZTSSt9type_info>:
   be094:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be0a4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be0b4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be0c4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be0d4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be0e4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be0f4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be104:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   be114:	7974 0000                                   ty..

000be118 <fpi.1>:
   be118:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be128:	0000 0000                                   ....

000be12c <fpinan.0>:
   be12c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   be13c:	0000 0000                                   ....

000be140 <tinytens>:
   be140:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be150:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be160:	6f43 64ac 0628 1168 742f 706d 6a2f 6e65     Co.d(.h./tmp/jen
   be170:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be180:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be190:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   be1a0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be1b0:	6362 732f 7274 6e69 2f67 7473 7472 6b6f     bc/string/strtok
   be1c0:	632e                                         .c.

000be1c3 <_ctype_>:
   be1c3:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be1d3:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be1e3:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be1f3:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be203:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be213:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be223:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be233:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be243:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be2c3:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be2d3:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   be2e3:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be2f3:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be303:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be313:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be323:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   be333:	632e 0000                                    .c...

000be338 <_C_numeric_locale>:
   be338:	d97e 000b da03 000b e1a4 2003 4f50 4953     ~.......... POSI
   be348:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   be358:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be368:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be378:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be388:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be398:	696c 2f62 706d 6572 2e63 0063 0000 0000     lib/mprec.c.....

000be3a8 <__mprec_bigtens>:
   be3a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be3b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be3c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be3d0 <__mprec_tens>:
   be3d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be3e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be3f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be400:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be410:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be420:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be430:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be440:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be450:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be460:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be470:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be480:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be490:	9db4 79d9 7843 44ea                         ...yCx.D

000be498 <p05.0>:
   be498:	0005 0000 0019 0000 007d 0000               ........}...

000be4a4 <link_const_variable_data_end>:
   be4a4:	000b4651 	.word	0x000b4651
   be4a8:	000b5875 	.word	0x000b5875
   be4ac:	000b5ef1 	.word	0x000b5ef1
   be4b0:	000b60dd 	.word	0x000b60dd
   be4b4:	000b6721 	.word	0x000b6721
   be4b8:	000b676d 	.word	0x000b676d
   be4bc:	000b7015 	.word	0x000b7015
   be4c0:	000b70e1 	.word	0x000b70e1
   be4c4:	000b77f5 	.word	0x000b77f5
   be4c8:	000b8afd 	.word	0x000b8afd
   be4cc:	000b8f75 	.word	0x000b8f75
   be4d0:	000b9261 	.word	0x000b9261
   be4d4:	000b94ed 	.word	0x000b94ed
   be4d8:	000b9ab5 	.word	0x000b9ab5

000be4dc <link_constructors_end>:
   be4dc:	00000000 	.word	0x00000000
