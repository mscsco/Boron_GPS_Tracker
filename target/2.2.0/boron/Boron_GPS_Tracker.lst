
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/2.2.0/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ca0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7cc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e400  000d7cc4  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000037c  2003e474  2003e474  0002e474  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7d38  000d7d38  00027d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7d60  000d7d60  00027d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001125f1  00000000  00000000  00027d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012434  00000000  00000000  0013a355  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002750f  00000000  00000000  0014c789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002338  00000000  00000000  00173c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006940  00000000  00000000  00175fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033c87  00000000  00000000  0017c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f5b0  00000000  00000000  001b0597  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001064b2  00000000  00000000  001dfb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000653c  00000000  00000000  002e5ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 faa5 	bl	d7580 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fac7 	bl	d75d0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e400 	.word	0x2003e400
   d404c:	000d7cc4 	.word	0x000d7cc4
   d4050:	2003e474 	.word	0x2003e474
   d4054:	2003e474 	.word	0x2003e474
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fd99 	bl	d6b98 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7c98 	.word	0x000d7c98
   d4080:	000d7cbc 	.word	0x000d7cbc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b848 	b.w	d4118 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8dd 	bl	d4248 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bd39 	b.w	d6b08 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bded 	b.w	d4c74 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bdf3 	b.w	d4c84 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fd40 	bl	d4b2c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d49cd 	.word	0x000d49cd

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f001 fa44 	bl	d5564 <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f001 fc42 	bl	d5966 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e2:	f002 fcc9 	bl	d6a78 <_Z16_fetch_usbserialv>
   d40e6:	f002 fcbb 	bl	d6a60 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f001 fb25 	bl	d5740 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d7920 	.word	0x000d7920
   d4100:	000d7908 	.word	0x000d7908

000d4104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark16SerialLogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f002 fd74 	bl	d6bfc <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <setup>:

SerialLogHandler logHandler;

TinyGPSPlus gps;

void setup() {
   d4118:	b508      	push	{r3, lr}
  //setup serial port
  Serial.begin(9600);
   d411a:	f002 fcad 	bl	d6a78 <_Z16_fetch_usbserialv>
   d411e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4122:	f002 fc99 	bl	d6a58 <_ZN9USBSerial5beginEl>
  //setup GPS port
  Serial1.begin(9600);
   d4126:	f002 fc1f 	bl	d6968 <_Z22__fetch_global_Serial1v>

}
   d412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.begin(9600);
   d412e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4132:	f002 bc13 	b.w	d695c <_ZN11USARTSerial5beginEm>
	...

000d4138 <_Z9outputGPSv>:
        }
    }  

}

void outputGPS() {
   d4138:	b538      	push	{r3, r4, r5, lr}
    Serial.print("HAS FIX="); Serial.println(gps.sentencesWithFix());
   d413a:	f002 fc9d 	bl	d6a78 <_Z16_fetch_usbserialv>
   d413e:	4926      	ldr	r1, [pc, #152]	; (d41d8 <_Z9outputGPSv+0xa0>)
   d4140:	4c26      	ldr	r4, [pc, #152]	; (d41dc <_Z9outputGPSv+0xa4>)
   d4142:	f002 f95d 	bl	d6400 <_ZN5Print5printEPKc>
   d4146:	f002 fc97 	bl	d6a78 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d414a:	220a      	movs	r2, #10
   d414c:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
   d4150:	4605      	mov	r5, r0
   d4152:	f002 f972 	bl	d643a <_ZN5Print11printNumberEmh>
        n += println();
   d4156:	4628      	mov	r0, r5
   d4158:	f002 f959 	bl	d640e <_ZN5Print7printlnEv>
    Serial.print("LAT="); Serial.println(gps.location.lat());
   d415c:	f002 fc8c 	bl	d6a78 <_Z16_fetch_usbserialv>
   d4160:	491f      	ldr	r1, [pc, #124]	; (d41e0 <_Z9outputGPSv+0xa8>)
   d4162:	f002 f94d 	bl	d6400 <_ZN5Print5printEPKc>
   d4166:	f002 fc87 	bl	d6a78 <_Z16_fetch_usbserialv>
   d416a:	4605      	mov	r5, r0
   d416c:	4620      	mov	r0, r4
   d416e:	f000 f9e3 	bl	d4538 <_ZN15TinyGPSLocation3latEv>
   d4172:	2102      	movs	r1, #2
   d4174:	4628      	mov	r0, r5
   d4176:	f002 fa47 	bl	d6608 <_ZN5Print7printlnEdi>
    Serial.print("LONG="); Serial.println(gps.location.lng(), 6);
   d417a:	f002 fc7d 	bl	d6a78 <_Z16_fetch_usbserialv>
   d417e:	4919      	ldr	r1, [pc, #100]	; (d41e4 <_Z9outputGPSv+0xac>)
   d4180:	f002 f93e 	bl	d6400 <_ZN5Print5printEPKc>
   d4184:	f002 fc78 	bl	d6a78 <_Z16_fetch_usbserialv>
   d4188:	4605      	mov	r5, r0
   d418a:	4620      	mov	r0, r4
   d418c:	f000 f9f8 	bl	d4580 <_ZN15TinyGPSLocation3lngEv>
   d4190:	2106      	movs	r1, #6
   d4192:	4628      	mov	r0, r5
   d4194:	f002 fa38 	bl	d6608 <_ZN5Print7printlnEdi>
    Serial.print("ALT="); Serial.println(gps.altitude.meters(), 6);
   d4198:	f002 fc6e 	bl	d6a78 <_Z16_fetch_usbserialv>
   d419c:	4912      	ldr	r1, [pc, #72]	; (d41e8 <_Z9outputGPSv+0xb0>)
   d419e:	f002 f92f 	bl	d6400 <_ZN5Print5printEPKc>
   d41a2:	f002 fc69 	bl	d6a78 <_Z16_fetch_usbserialv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   d41a6:	2300      	movs	r3, #0
   d41a8:	4605      	mov	r5, r0
   d41aa:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   d41ae:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d41b2:	f002 fe79 	bl	d6ea8 <__aeabi_i2d>
   d41b6:	4b0d      	ldr	r3, [pc, #52]	; (d41ec <_Z9outputGPSv+0xb4>)
   d41b8:	2200      	movs	r2, #0
   d41ba:	f003 f809 	bl	d71d0 <__aeabi_ddiv>
   d41be:	ec41 0b10 	vmov	d0, r0, r1
   d41c2:	4628      	mov	r0, r5
   d41c4:	2106      	movs	r1, #6
   d41c6:	f002 fa1f 	bl	d6608 <_ZN5Print7printlnEdi>
    delay(4*1000);

}
   d41ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(4*1000);
   d41ce:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d41d2:	f000 bd77 	b.w	d4cc4 <delay>
   d41d6:	bf00      	nop
   d41d8:	000d78e4 	.word	0x000d78e4
   d41dc:	2003e474 	.word	0x2003e474
   d41e0:	000d78ed 	.word	0x000d78ed
   d41e4:	000d78f2 	.word	0x000d78f2
   d41e8:	000d78f8 	.word	0x000d78f8
   d41ec:	40590000 	.word	0x40590000

000d41f0 <_Z6getGPSv>:
void getGPS() {
   d41f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if(gps.encode(Serial1.read()))
   d41f2:	4c14      	ldr	r4, [pc, #80]	; (d4244 <_Z6getGPSv+0x54>)
    while(Serial1.available())
   d41f4:	f002 fbb8 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d41f8:	6803      	ldr	r3, [r0, #0]
   d41fa:	691b      	ldr	r3, [r3, #16]
   d41fc:	4798      	blx	r3
   d41fe:	b1f8      	cbz	r0, d4240 <_Z6getGPSv+0x50>
        if(gps.encode(Serial1.read()))
   d4200:	f002 fbb2 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d4204:	6803      	ldr	r3, [r0, #0]
   d4206:	695b      	ldr	r3, [r3, #20]
   d4208:	4798      	blx	r3
   d420a:	b2c1      	uxtb	r1, r0
   d420c:	4620      	mov	r0, r4
   d420e:	f000 fb61 	bl	d48d4 <_ZN11TinyGPSPlus6encodeEc>
   d4212:	2800      	cmp	r0, #0
   d4214:	d0ee      	beq.n	d41f4 <_Z6getGPSv+0x4>
            String msg = Serial1.readStringUntil('\r');
   d4216:	f002 fba7 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d421a:	220d      	movs	r2, #13
   d421c:	4601      	mov	r1, r0
   d421e:	4668      	mov	r0, sp
   d4220:	f002 fa4a 	bl	d66b8 <_ZN6Stream15readStringUntilEc>
            Serial.println(msg);
   d4224:	f002 fc28 	bl	d6a78 <_Z16_fetch_usbserialv>
   d4228:	9900      	ldr	r1, [sp, #0]
   d422a:	f002 f8fc 	bl	d6426 <_ZN5Print7printlnEPKc>
            if (gps.sentencesWithFix() > 0) {
   d422e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4232:	b10b      	cbz	r3, d4238 <_Z6getGPSv+0x48>
                outputGPS();
   d4234:	f7ff ff80 	bl	d4138 <_Z9outputGPSv>
            String msg = Serial1.readStringUntil('\r');
   d4238:	4668      	mov	r0, sp
   d423a:	f002 fa55 	bl	d66e8 <_ZN6StringD1Ev>
   d423e:	e7d9      	b.n	d41f4 <_Z6getGPSv+0x4>
}
   d4240:	b004      	add	sp, #16
   d4242:	bd10      	pop	{r4, pc}
   d4244:	2003e474 	.word	0x2003e474

000d4248 <loop>:
    getGPS();
   d4248:	f7ff bfd2 	b.w	d41f0 <_Z6getGPSv>

000d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d424c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d424e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4252:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4254:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4256:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d425a:	42ae      	cmp	r6, r5
   d425c:	d004      	beq.n	d4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d425e:	4628      	mov	r0, r5
   d4260:	f002 fa42 	bl	d66e8 <_ZN6StringD1Ev>
   d4264:	3514      	adds	r5, #20
   d4266:	e7f8      	b.n	d425a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4268:	6820      	ldr	r0, [r4, #0]
   d426a:	f000 fd0b 	bl	d4c84 <free>
    AllocatorT::free(data_);
}
   d426e:	4620      	mov	r0, r4
   d4270:	bd70      	pop	{r4, r5, r6, pc}

000d4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4272:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4276:	4604      	mov	r4, r0
   d4278:	460d      	mov	r5, r1
   d427a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d427c:	d916      	bls.n	d42ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d427e:	4290      	cmp	r0, r2
   d4280:	d215      	bcs.n	d42ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4282:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4286:	1a75      	subs	r5, r6, r1
   d4288:	f1a1 0714 	sub.w	r7, r1, #20
   d428c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d428e:	42b7      	cmp	r7, r6
   d4290:	d01c      	beq.n	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4292:	b12c      	cbz	r4, d42a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4294:	4631      	mov	r1, r6
   d4296:	4620      	mov	r0, r4
   d4298:	f002 faa2 	bl	d67e0 <_ZN6StringC1EOS_>
   d429c:	7c33      	ldrb	r3, [r6, #16]
   d429e:	7423      	strb	r3, [r4, #16]
   d42a0:	4630      	mov	r0, r6
   d42a2:	f002 fa21 	bl	d66e8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d42a6:	3e14      	subs	r6, #20
   d42a8:	3c14      	subs	r4, #20
   d42aa:	e7f0      	b.n	d428e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d42ac:	d00e      	beq.n	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d42ae:	42b5      	cmp	r5, r6
   d42b0:	d00c      	beq.n	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d42b2:	b12c      	cbz	r4, d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d42b4:	4629      	mov	r1, r5
   d42b6:	4620      	mov	r0, r4
   d42b8:	f002 fa92 	bl	d67e0 <_ZN6StringC1EOS_>
   d42bc:	7c2b      	ldrb	r3, [r5, #16]
   d42be:	7423      	strb	r3, [r4, #16]
   d42c0:	4628      	mov	r0, r5
   d42c2:	f002 fa11 	bl	d66e8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d42c6:	3514      	adds	r5, #20
   d42c8:	3414      	adds	r4, #20
   d42ca:	e7f0      	b.n	d42ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d42cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d42d2:	2300      	movs	r3, #0
   d42d4:	e9c0 3300 	strd	r3, r3, [r0]
   d42d8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42da:	684f      	ldr	r7, [r1, #4]
   d42dc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42de:	4604      	mov	r4, r0
   d42e0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42e2:	dd23      	ble.n	d432c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d42e4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d42e8:	fb08 f007 	mul.w	r0, r8, r7
   d42ec:	f000 fcc2 	bl	d4c74 <malloc>
            if (!d) {
   d42f0:	4605      	mov	r5, r0
   d42f2:	b1d8      	cbz	r0, d432c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d42f4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d42f8:	fb08 1202 	mla	r2, r8, r2, r1
   d42fc:	f7ff ffb9 	bl	d4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4300:	6820      	ldr	r0, [r4, #0]
   d4302:	f000 fcbf 	bl	d4c84 <free>
        data_ = d;
   d4306:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4308:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d430a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d430e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4312:	45b8      	cmp	r8, r7
   d4314:	d008      	beq.n	d4328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4316:	4639      	mov	r1, r7
   d4318:	4628      	mov	r0, r5
   d431a:	f002 fa7b 	bl	d6814 <_ZN6StringC1ERKS_>
   d431e:	7c3b      	ldrb	r3, [r7, #16]
   d4320:	742b      	strb	r3, [r5, #16]
   d4322:	3714      	adds	r7, #20
   d4324:	3514      	adds	r5, #20
   d4326:	e7f4      	b.n	d4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4328:	6873      	ldr	r3, [r6, #4]
   d432a:	6063      	str	r3, [r4, #4]
}
   d432c:	4620      	mov	r0, r4
   d432e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4334 <_GLOBAL__sub_I_logHandler>:
}
   d4334:	b570      	push	{r4, r5, r6, lr}
   d4336:	b08c      	sub	sp, #48	; 0x30
        capacity_(0) {
   d4338:	2300      	movs	r3, #0
   d433a:	e9cd 3300 	strd	r3, r3, [sp]
   d433e:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4340:	f002 fb9a 	bl	d6a78 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4344:	4c1b      	ldr	r4, [pc, #108]	; (d43b4 <_GLOBAL__sub_I_logHandler+0x80>)
   d4346:	4605      	mov	r5, r0
   d4348:	4669      	mov	r1, sp
   d434a:	a803      	add	r0, sp, #12
   d434c:	f7ff ffbf 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4350:	4626      	mov	r6, r4
        stream_(&stream) {
   d4352:	a903      	add	r1, sp, #12
   d4354:	a806      	add	r0, sp, #24
   d4356:	f7ff ffba 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d435a:	4b17      	ldr	r3, [pc, #92]	; (d43b8 <_GLOBAL__sub_I_logHandler+0x84>)
   d435c:	f846 3b04 	str.w	r3, [r6], #4
   d4360:	a906      	add	r1, sp, #24
   d4362:	a809      	add	r0, sp, #36	; 0x24
   d4364:	f7ff ffb3 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4368:	aa09      	add	r2, sp, #36	; 0x24
   d436a:	211e      	movs	r1, #30
   d436c:	4630      	mov	r0, r6
   d436e:	f001 fc54 	bl	d5c1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4372:	a809      	add	r0, sp, #36	; 0x24
   d4374:	f7ff ff6a 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4378:	a806      	add	r0, sp, #24
   d437a:	f7ff ff67 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d437e:	4b0f      	ldr	r3, [pc, #60]	; (d43bc <_GLOBAL__sub_I_logHandler+0x88>)
   d4380:	6023      	str	r3, [r4, #0]
   d4382:	a803      	add	r0, sp, #12
   d4384:	6225      	str	r5, [r4, #32]
   d4386:	f7ff ff61 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d438a:	4b0d      	ldr	r3, [pc, #52]	; (d43c0 <_GLOBAL__sub_I_logHandler+0x8c>)
   d438c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d438e:	f002 fb73 	bl	d6a78 <_Z16_fetch_usbserialv>
   d4392:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4396:	f002 fb5f 	bl	d6a58 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d439a:	f001 f8e3 	bl	d5564 <_ZN5spark10LogManager8instanceEv>
   d439e:	4621      	mov	r1, r4
   d43a0:	f001 fbcd 	bl	d5b3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d43a4:	4668      	mov	r0, sp
   d43a6:	f7ff ff51 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   d43aa:	4806      	ldr	r0, [pc, #24]	; (d43c4 <_GLOBAL__sub_I_logHandler+0x90>)
   d43ac:	f000 f80c 	bl	d43c8 <_ZN11TinyGPSPlusC1Ev>
}
   d43b0:	b00c      	add	sp, #48	; 0x30
   d43b2:	bd70      	pop	{r4, r5, r6, pc}
   d43b4:	2003e54c 	.word	0x2003e54c
   d43b8:	000d7908 	.word	0x000d7908
   d43bc:	000d7a74 	.word	0x000d7a74
   d43c0:	000d7920 	.word	0x000d7920
   d43c4:	2003e474 	.word	0x2003e474

000d43c8 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   d43c8:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d43ca:	2102      	movs	r1, #2
   d43cc:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d43d0:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d43d2:	8082      	strh	r2, [r0, #4]
   d43d4:	6082      	str	r2, [r0, #8]
   d43d6:	7302      	strb	r2, [r0, #12]
   d43d8:	8202      	strh	r2, [r0, #16]
   d43da:	6142      	str	r2, [r0, #20]
   d43dc:	7602      	strb	r2, [r0, #24]
   d43de:	8382      	strh	r2, [r0, #28]
   d43e0:	6202      	str	r2, [r0, #32]
   d43e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d43e6:	8502      	strh	r2, [r0, #40]	; 0x28
   d43e8:	62c2      	str	r2, [r0, #44]	; 0x2c
   d43ea:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   d43ee:	8702      	strh	r2, [r0, #56]	; 0x38
   d43f0:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   d43f2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d43f6:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d43f8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d43fc:	6602      	str	r2, [r0, #96]	; 0x60
   d43fe:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d4402:	6702      	str	r2, [r0, #112]	; 0x70
   d4404:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d4408:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   d440c:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d4410:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4414:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d4418:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d441c:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4420:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d4424:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d4428:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d442c:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d4430:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d4434:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d4438:	4770      	bx	lr

000d443a <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d443a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d443e:	2b05      	cmp	r3, #5
   d4440:	d802      	bhi.n	d4448 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4442:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d4446:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d4448:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d444c:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d444e:	bf94      	ite	ls
   d4450:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4454:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d4458:	4770      	bx	lr

000d445a <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d445a:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d445c:	7805      	ldrb	r5, [r0, #0]
{
   d445e:	4604      	mov	r4, r0
  if (negative) ++term;
   d4460:	2d2d      	cmp	r5, #45	; 0x2d
   d4462:	bf08      	it	eq
   d4464:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d4466:	4620      	mov	r0, r4
   d4468:	f003 f886 	bl	d7578 <atol>
   d446c:	2364      	movs	r3, #100	; 0x64
   d446e:	4358      	muls	r0, r3
   d4470:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4472:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4476:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d447a:	2909      	cmp	r1, #9
   d447c:	d9f8      	bls.n	d4470 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d447e:	2b2e      	cmp	r3, #46	; 0x2e
   d4480:	d10b      	bne.n	d449a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d4482:	7853      	ldrb	r3, [r2, #1]
   d4484:	3b30      	subs	r3, #48	; 0x30
   d4486:	2b09      	cmp	r3, #9
   d4488:	d807      	bhi.n	d449a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d448a:	210a      	movs	r1, #10
   d448c:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d4490:	7893      	ldrb	r3, [r2, #2]
   d4492:	3b30      	subs	r3, #48	; 0x30
   d4494:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d4496:	bf98      	it	ls
   d4498:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d449a:	2d2d      	cmp	r5, #45	; 0x2d
   d449c:	bf08      	it	eq
   d449e:	4240      	negeq	r0, r0
}
   d44a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d44a4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d44a4:	b538      	push	{r3, r4, r5, lr}
   d44a6:	460d      	mov	r5, r1
   d44a8:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d44aa:	f003 f865 	bl	d7578 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d44ae:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d44b0:	4b13      	ldr	r3, [pc, #76]	; (d4500 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d44b2:	fbb0 f1f2 	udiv	r1, r0, r2
   d44b6:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d44ba:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d44bc:	8029      	strh	r1, [r5, #0]
   d44be:	4620      	mov	r0, r4

  while (isdigit(*term))
   d44c0:	7802      	ldrb	r2, [r0, #0]
   d44c2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d44c6:	2c09      	cmp	r4, #9
   d44c8:	4601      	mov	r1, r0
   d44ca:	f100 0001 	add.w	r0, r0, #1
   d44ce:	d9f7      	bls.n	d44c0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d44d0:	2a2e      	cmp	r2, #46	; 0x2e
   d44d2:	d10b      	bne.n	d44ec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d44d4:	480a      	ldr	r0, [pc, #40]	; (d4500 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d44d6:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d44d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d44dc:	3a30      	subs	r2, #48	; 0x30
   d44de:	2a09      	cmp	r2, #9
   d44e0:	d804      	bhi.n	d44ec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d44e2:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d44e6:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d44ea:	e7f5      	b.n	d44d8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d44ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d44f0:	3301      	adds	r3, #1
   d44f2:	2203      	movs	r2, #3
   d44f4:	fbb3 f3f2 	udiv	r3, r3, r2
   d44f8:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d44fa:	2300      	movs	r3, #0
   d44fc:	722b      	strb	r3, [r5, #8]
}
   d44fe:	bd38      	pop	{r3, r4, r5, pc}
   d4500:	00989680 	.word	0x00989680

000d4504 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4504:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d4506:	4603      	mov	r3, r0
{
   d4508:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d450a:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d450e:	6042      	str	r2, [r0, #4]
   d4510:	685a      	ldr	r2, [r3, #4]
   d4512:	6082      	str	r2, [r0, #8]
   d4514:	7a1b      	ldrb	r3, [r3, #8]
   d4516:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d4518:	4603      	mov	r3, r0
   d451a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d451e:	6102      	str	r2, [r0, #16]
   d4520:	685a      	ldr	r2, [r3, #4]
   d4522:	6142      	str	r2, [r0, #20]
   d4524:	7a1b      	ldrb	r3, [r3, #8]
   d4526:	7603      	strb	r3, [r0, #24]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4528:	f000 fa58 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d452c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4530:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4532:	8023      	strh	r3, [r4, #0]
}
   d4534:	bd10      	pop	{r4, pc}
	...

000d4538 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4538:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d453a:	2300      	movs	r3, #0
{
   d453c:	4604      	mov	r4, r0
   updated = false;
   d453e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4540:	6880      	ldr	r0, [r0, #8]
   d4542:	f002 fca1 	bl	d6e88 <__aeabi_ui2d>
   d4546:	a30c      	add	r3, pc, #48	; (adr r3, d4578 <_ZN15TinyGPSLocation3latEv+0x40>)
   d4548:	e9d3 2300 	ldrd	r2, r3, [r3]
   d454c:	f002 fe40 	bl	d71d0 <__aeabi_ddiv>
   d4550:	4606      	mov	r6, r0
   d4552:	88a0      	ldrh	r0, [r4, #4]
   d4554:	460f      	mov	r7, r1
   d4556:	f002 fca7 	bl	d6ea8 <__aeabi_i2d>
   d455a:	460b      	mov	r3, r1
   d455c:	4602      	mov	r2, r0
   d455e:	4639      	mov	r1, r7
   d4560:	4630      	mov	r0, r6
   d4562:	f002 fb55 	bl	d6c10 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d4566:	7b23      	ldrb	r3, [r4, #12]
   d4568:	b113      	cbz	r3, d4570 <_ZN15TinyGPSLocation3latEv+0x38>
   d456a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d456e:	4619      	mov	r1, r3
}
   d4570:	ec41 0b10 	vmov	d0, r0, r1
   d4574:	bdd0      	pop	{r4, r6, r7, pc}
   d4576:	bf00      	nop
   d4578:	00000000 	.word	0x00000000
   d457c:	41cdcd65 	.word	0x41cdcd65

000d4580 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d4580:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4582:	2300      	movs	r3, #0
{
   d4584:	4604      	mov	r4, r0
   updated = false;
   d4586:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d4588:	6940      	ldr	r0, [r0, #20]
   d458a:	f002 fc7d 	bl	d6e88 <__aeabi_ui2d>
   d458e:	a30c      	add	r3, pc, #48	; (adr r3, d45c0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d4590:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4594:	f002 fe1c 	bl	d71d0 <__aeabi_ddiv>
   d4598:	4606      	mov	r6, r0
   d459a:	8a20      	ldrh	r0, [r4, #16]
   d459c:	460f      	mov	r7, r1
   d459e:	f002 fc83 	bl	d6ea8 <__aeabi_i2d>
   d45a2:	460b      	mov	r3, r1
   d45a4:	4602      	mov	r2, r0
   d45a6:	4639      	mov	r1, r7
   d45a8:	4630      	mov	r0, r6
   d45aa:	f002 fb31 	bl	d6c10 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d45ae:	7e23      	ldrb	r3, [r4, #24]
   d45b0:	b113      	cbz	r3, d45b8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d45b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d45b6:	4619      	mov	r1, r3
}
   d45b8:	ec41 0b10 	vmov	d0, r0, r1
   d45bc:	bdd0      	pop	{r4, r6, r7, pc}
   d45be:	bf00      	nop
   d45c0:	00000000 	.word	0x00000000
   d45c4:	41cdcd65 	.word	0x41cdcd65

000d45c8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d45c8:	b510      	push	{r4, lr}
   date = newDate;
   d45ca:	6883      	ldr	r3, [r0, #8]
   d45cc:	6043      	str	r3, [r0, #4]
{
   d45ce:	4604      	mov	r4, r0
   d45d0:	f000 fa04 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d45d4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d45d8:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d45da:	8023      	strh	r3, [r4, #0]
}
   d45dc:	bd10      	pop	{r4, pc}

000d45de <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d45de:	b510      	push	{r4, lr}
   time = newTime;
   d45e0:	6883      	ldr	r3, [r0, #8]
   d45e2:	6043      	str	r3, [r0, #4]
{
   d45e4:	4604      	mov	r4, r0
   d45e6:	f000 f9f9 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d45ea:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d45ee:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d45f0:	8023      	strh	r3, [r4, #0]
}
   d45f2:	bd10      	pop	{r4, pc}

000d45f4 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d45f4:	b510      	push	{r4, lr}
   d45f6:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d45f8:	4608      	mov	r0, r1
   d45fa:	f7ff ff2e 	bl	d445a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d45fe:	60a0      	str	r0, [r4, #8]
}
   d4600:	bd10      	pop	{r4, pc}

000d4602 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d4602:	b510      	push	{r4, lr}
   d4604:	4604      	mov	r4, r0
   newDate = atol(term);
   d4606:	4608      	mov	r0, r1
   d4608:	f002 ffb6 	bl	d7578 <atol>
   d460c:	60a0      	str	r0, [r4, #8]
}
   d460e:	bd10      	pop	{r4, pc}

000d4610 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4610:	b510      	push	{r4, lr}
   val = newval;
   d4612:	68c3      	ldr	r3, [r0, #12]
   d4614:	6083      	str	r3, [r0, #8]
{
   d4616:	4604      	mov	r4, r0
   d4618:	f000 f9e0 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d461c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4620:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4622:	8023      	strh	r3, [r4, #0]
}
   d4624:	bd10      	pop	{r4, pc}

000d4626 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d4626:	b510      	push	{r4, lr}
   d4628:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d462a:	4608      	mov	r0, r1
   d462c:	f7ff ff15 	bl	d445a <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4630:	60e0      	str	r0, [r4, #12]
}
   d4632:	bd10      	pop	{r4, pc}

000d4634 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d4634:	b510      	push	{r4, lr}
   val = newval;
   d4636:	68c3      	ldr	r3, [r0, #12]
   d4638:	6083      	str	r3, [r0, #8]
{
   d463a:	4604      	mov	r4, r0
   d463c:	f000 f9ce 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4640:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4644:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4646:	8023      	strh	r3, [r4, #0]
}
   d4648:	bd10      	pop	{r4, pc}

000d464a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d464a:	b510      	push	{r4, lr}
   d464c:	4604      	mov	r4, r0
   newval = atol(term);
   d464e:	4608      	mov	r0, r1
   d4650:	f002 ff92 	bl	d7578 <atol>
   d4654:	60e0      	str	r0, [r4, #12]
}
   d4656:	bd10      	pop	{r4, pc}

000d4658 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4658:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d465a:	4601      	mov	r1, r0
{
   d465c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d465e:	3010      	adds	r0, #16
   d4660:	f003 f803 	bl	d766a <strcpy>
   d4664:	f000 f9ba 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4668:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d466c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d466e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4670:	bd10      	pop	{r4, pc}

000d4672 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4672:	2210      	movs	r2, #16
   d4674:	f003 b81b 	b.w	d76ae <strncpy>

000d4678 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d467a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d467e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d4680:	2d00      	cmp	r5, #0
   d4682:	d064      	beq.n	d474e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4684:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d4688:	f7ff fed7 	bl	d443a <_ZN11TinyGPSPlus7fromHexEc>
   d468c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4690:	4602      	mov	r2, r0
   d4692:	4620      	mov	r0, r4
   d4694:	f7ff fed1 	bl	d443a <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d4698:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d469c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d46a0:	b2c0      	uxtb	r0, r0
   d46a2:	4283      	cmp	r3, r0
   d46a4:	d14b      	bne.n	d473e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d46a6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d46aa:	3301      	adds	r3, #1
   d46ac:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d46b0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d46b4:	b123      	cbz	r3, d46c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d46b6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d46ba:	3301      	adds	r3, #1
   d46bc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d46c0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d46c4:	b333      	cbz	r3, d4714 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	d115      	bne.n	d46f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d46ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d46ce:	f7ff ff7b 	bl	d45c8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d46d2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d46d6:	f7ff ff82 	bl	d45de <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d46da:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d46de:	b153      	cbz	r3, d46f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d46e0:	4620      	mov	r0, r4
   d46e2:	f7ff ff0f 	bl	d4504 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d46e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d46ea:	f7ff ff91 	bl	d4610 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d46ee:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d46f2:	f7ff ff8d 	bl	d4610 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d46f6:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d46fa:	b336      	cbz	r6, d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d46fc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4700:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4702:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4704:	f002 ffa7 	bl	d7656 <strcmp>
   d4708:	b9f8      	cbnz	r0, d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d470a:	4630      	mov	r0, r6
   d470c:	f7ff ffa4 	bl	d4658 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4710:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4712:	e7f2      	b.n	d46fa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d4714:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4718:	f7ff ff61 	bl	d45de <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d471c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4720:	b133      	cbz	r3, d4730 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d4722:	4620      	mov	r0, r4
   d4724:	f7ff feee 	bl	d4504 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4728:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d472c:	f7ff ff70 	bl	d4610 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4730:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4734:	f7ff ff7e 	bl	d4634 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4738:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d473c:	e7d9      	b.n	d46f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d473e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d4742:	3301      	adds	r3, #1
   d4744:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4748:	2500      	movs	r5, #0
}
   d474a:	4628      	mov	r0, r5
   d474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d474e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d4752:	bb6a      	cbnz	r2, d47b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   d4754:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   d4758:	495a      	ldr	r1, [pc, #360]	; (d48c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   d475a:	4630      	mov	r0, r6
   d475c:	f002 ff7b 	bl	d7656 <strcmp>
   d4760:	b120      	cbz	r0, d476c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   d4762:	4959      	ldr	r1, [pc, #356]	; (d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   d4764:	4630      	mov	r0, r6
   d4766:	f002 ff76 	bl	d7656 <strcmp>
   d476a:	b998      	cbnz	r0, d4794 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d476c:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d476e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4772:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d4776:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d477a:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   d477e:	2f00      	cmp	r7, #0
   d4780:	d0e3      	beq.n	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d4784:	4631      	mov	r1, r6
   d4786:	f002 ff66 	bl	d7656 <strcmp>
   d478a:	2800      	cmp	r0, #0
   d478c:	f280 8094 	bge.w	d48b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   d4790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d4792:	e7f0      	b.n	d4776 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   d4794:	494d      	ldr	r1, [pc, #308]	; (d48cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   d4796:	4630      	mov	r0, r6
   d4798:	f002 ff5d 	bl	d7656 <strcmp>
   d479c:	b120      	cbz	r0, d47a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   d479e:	494c      	ldr	r1, [pc, #304]	; (d48d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   d47a0:	4630      	mov	r0, r6
   d47a2:	f002 ff58 	bl	d7656 <strcmp>
   d47a6:	b908      	cbnz	r0, d47ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d47a8:	2300      	movs	r3, #0
   d47aa:	e7e0      	b.n	d476e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   d47ac:	2302      	movs	r3, #2
   d47ae:	e7de      	b.n	d476e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d47b0:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d47b4:	2902      	cmp	r1, #2
   d47b6:	d023      	beq.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d47b8:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d47bc:	b303      	cbz	r3, d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   d47be:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d47c2:	3a01      	subs	r2, #1
   d47c4:	2a28      	cmp	r2, #40	; 0x28
   d47c6:	d81b      	bhi.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d47c8:	e8df f002 	tbb	[pc, r2]
   d47cc:	49423b15 	.word	0x49423b15
   d47d0:	6e68634c 	.word	0x6e68634c
   d47d4:	1a1a1a72 	.word	0x1a1a1a72
   d47d8:	1a1a1a1a 	.word	0x1a1a1a1a
   d47dc:	1a1a1a1a 	.word	0x1a1a1a1a
   d47e0:	1a1a1a1a 	.word	0x1a1a1a1a
   d47e4:	1a1a1a1a 	.word	0x1a1a1a1a
   d47e8:	1a1a1a1a 	.word	0x1a1a1a1a
   d47ec:	423b3415 	.word	0x423b3415
   d47f0:	59534c49 	.word	0x59534c49
   d47f4:	5d          	.byte	0x5d
   d47f5:	00          	.byte	0x00
      time.setTime(term);
   d47f6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47fa:	3048      	adds	r0, #72	; 0x48
   d47fc:	f7ff fefa 	bl	d45f4 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4800:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d4804:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4808:	2e00      	cmp	r6, #0
   d480a:	d09e      	beq.n	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d480c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4810:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4812:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4814:	f002 ff1f 	bl	d7656 <strcmp>
   d4818:	2800      	cmp	r0, #0
   d481a:	d196      	bne.n	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d481c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d481e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4822:	429a      	cmp	r2, r3
   d4824:	dc91      	bgt.n	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d4826:	d103      	bne.n	d4830 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   d4828:	4639      	mov	r1, r7
   d482a:	4630      	mov	r0, r6
   d482c:	f7ff ff21 	bl	d4672 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4830:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4832:	e7e9      	b.n	d4808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   d4834:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4838:	4243      	negs	r3, r0
   d483a:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d483c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4840:	e7de      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4842:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4846:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d484a:	f7ff fe2b 	bl	d44a4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d484e:	e7d7      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   d4850:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4854:	424b      	negs	r3, r1
   d4856:	414b      	adcs	r3, r1
   d4858:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d485c:	e7d0      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d485e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d4862:	e7f0      	b.n	d4846 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   d4864:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4868:	4253      	negs	r3, r2
   d486a:	4153      	adcs	r3, r2
   d486c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4870:	e7c6      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   d4872:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4876:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4878:	f7ff fed5 	bl	d4626 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d487c:	e7c0      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   d487e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4882:	3068      	adds	r0, #104	; 0x68
   d4884:	e7f8      	b.n	d4878 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   d4886:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d488a:	3038      	adds	r0, #56	; 0x38
   d488c:	f7ff feb9 	bl	d4602 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4890:	e7b6      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   d4892:	2b30      	cmp	r3, #48	; 0x30
   d4894:	bf94      	ite	ls
   d4896:	2300      	movls	r3, #0
   d4898:	2301      	movhi	r3, #1
   d489a:	e7cf      	b.n	d483c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   d489c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d48a0:	3088      	adds	r0, #136	; 0x88
   d48a2:	f7ff fed2 	bl	d464a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d48a6:	e7ab      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   d48a8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d48ac:	3098      	adds	r0, #152	; 0x98
   d48ae:	e7e3      	b.n	d4878 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   d48b0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d48b4:	3078      	adds	r0, #120	; 0x78
   d48b6:	e7df      	b.n	d4878 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d48b8:	f43f af47 	beq.w	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d48bc:	2300      	movs	r3, #0
   d48be:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d48c2:	e742      	b.n	d474a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d48c4:	000d7930 	.word	0x000d7930
   d48c8:	000d7936 	.word	0x000d7936
   d48cc:	000d793c 	.word	0x000d793c
   d48d0:	000d7942 	.word	0x000d7942

000d48d4 <_ZN11TinyGPSPlus6encodeEc>:
{
   d48d4:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d48d6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d48da:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d48dc:	f103 0301 	add.w	r3, r3, #1
{
   d48e0:	4604      	mov	r4, r0
   d48e2:	460d      	mov	r5, r1
  ++encodedCharCount;
   d48e4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d48e8:	d03a      	beq.n	d4960 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d48ea:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d48ee:	d814      	bhi.n	d491a <_ZN11TinyGPSPlus6encodeEc+0x46>
   d48f0:	290a      	cmp	r1, #10
   d48f2:	d01c      	beq.n	d492e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d48f4:	290d      	cmp	r1, #13
   d48f6:	d01a      	beq.n	d492e <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d48f8:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d48fa:	bf9f      	itttt	ls
   d48fc:	1c5a      	addls	r2, r3, #1
   d48fe:	191b      	addls	r3, r3, r4
   d4900:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d4904:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4908:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d490c:	bb98      	cbnz	r0, d4976 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d490e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d4912:	404d      	eors	r5, r1
   d4914:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4918:	e021      	b.n	d495e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d491a:	292a      	cmp	r1, #42	; 0x2a
   d491c:	d007      	beq.n	d492e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d491e:	292c      	cmp	r1, #44	; 0x2c
   d4920:	d1ea      	bne.n	d48f8 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d4922:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4926:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d492a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d492e:	2b0e      	cmp	r3, #14
   d4930:	f04f 0000 	mov.w	r0, #0
   d4934:	d805      	bhi.n	d4942 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d4936:	4423      	add	r3, r4
   d4938:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d493c:	4620      	mov	r0, r4
   d493e:	f7ff fe9b 	bl	d4678 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d4942:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4946:	3301      	adds	r3, #1
   d4948:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d494c:	2300      	movs	r3, #0
   d494e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d4952:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4956:	425d      	negs	r5, r3
   d4958:	415d      	adcs	r5, r3
   d495a:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d495e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4960:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d4962:	2302      	movs	r3, #2
    parity = 0;
   d4964:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4968:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d496c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4970:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d4974:	e7f3      	b.n	d495e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d4976:	2000      	movs	r0, #0
   d4978:	e7f1      	b.n	d495e <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000d497c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <os_mutex_recursive_create+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030248 	.word	0x00030248

000d498c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <os_mutex_recursive_destroy+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030248 	.word	0x00030248

000d499c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <os_mutex_recursive_lock+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030248 	.word	0x00030248

000d49ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <os_mutex_recursive_unlock+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030248 	.word	0x00030248

000d49bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_RNG_GetRandomNumber+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	685b      	ldr	r3, [r3, #4]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030218 	.word	0x00030218

000d49cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_Delay_Microseconds+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	68db      	ldr	r3, [r3, #12]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030218 	.word	0x00030218

000d49dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	695b      	ldr	r3, [r3, #20]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030218 	.word	0x00030218

000d49ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <inet_inet_ntop+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	695b      	ldr	r3, [r3, #20]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030264 	.word	0x00030264

000d49fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <netdb_freeaddrinfo+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	689b      	ldr	r3, [r3, #8]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030268 	.word	0x00030268

000d4a0c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <netdb_getaddrinfo+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	68db      	ldr	r3, [r3, #12]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030268 	.word	0x00030268

000d4a1c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <hal_usart_init+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	681b      	ldr	r3, [r3, #0]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003023c 	.word	0x0003023c

000d4a2c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <hal_usart_end+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	689b      	ldr	r3, [r3, #8]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003023c 	.word	0x0003023c

000d4a3c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <hal_usart_write+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	68db      	ldr	r3, [r3, #12]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003023c 	.word	0x0003023c

000d4a4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <hal_usart_available+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	691b      	ldr	r3, [r3, #16]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003023c 	.word	0x0003023c

000d4a5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <hal_usart_read+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	695b      	ldr	r3, [r3, #20]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003023c 	.word	0x0003023c

000d4a6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <hal_usart_peek+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	699b      	ldr	r3, [r3, #24]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003023c 	.word	0x0003023c

000d4a7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <hal_usart_flush+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	69db      	ldr	r3, [r3, #28]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003023c 	.word	0x0003023c

000d4a8c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <hal_usart_available_data_for_write+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003023c 	.word	0x0003023c

000d4a9c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <hal_usart_begin_config+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003023c 	.word	0x0003023c

000d4aac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <HAL_USB_USART_Init+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	681b      	ldr	r3, [r3, #0]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003024c 	.word	0x0003024c

000d4abc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <HAL_USB_USART_Begin+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	685b      	ldr	r3, [r3, #4]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003024c 	.word	0x0003024c

000d4acc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_USB_USART_End+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	689b      	ldr	r3, [r3, #8]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003024c 	.word	0x0003024c

000d4adc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_USB_USART_Available_Data+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	691b      	ldr	r3, [r3, #16]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003024c 	.word	0x0003024c

000d4aec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	695b      	ldr	r3, [r3, #20]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003024c 	.word	0x0003024c

000d4afc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_USB_USART_Receive_Data+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	699b      	ldr	r3, [r3, #24]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003024c 	.word	0x0003024c

000d4b0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_USB_USART_Send_Data+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	69db      	ldr	r3, [r3, #28]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	0003024c 	.word	0x0003024c

000d4b1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_USB_USART_Flush_Data+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	6a1b      	ldr	r3, [r3, #32]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	0003024c 	.word	0x0003024c

000d4b2c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <panic_+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030260 	.word	0x00030260

000d4b3c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <log_level_name+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030260 	.word	0x00030260

000d4b4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <log_set_callbacks+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030260 	.word	0x00030260

000d4b5c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <set_system_mode+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	685b      	ldr	r3, [r3, #4]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030220 	.word	0x00030220

000d4b6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <system_delay_ms+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	695b      	ldr	r3, [r3, #20]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030220 	.word	0x00030220

000d4b7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b03      	ldr	r3, [pc, #12]	; (d4b8c <system_ctrl_set_app_request_handler+0x10>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b86:	9301      	str	r3, [sp, #4]
   d4b88:	bd08      	pop	{r3, pc}
   d4b8a:	0000      	.short	0x0000
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b03      	ldr	r3, [pc, #12]	; (d4ba0 <system_ctrl_set_result+0x10>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b9a:	9301      	str	r3, [sp, #4]
   d4b9c:	bd08      	pop	{r3, pc}
   d4b9e:	0000      	.short	0x0000
   d4ba0:	00030220 	.word	0x00030220

000d4ba4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030244 	.word	0x00030244

000d4bb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <network_connect+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	685b      	ldr	r3, [r3, #4]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030240 	.word	0x00030240

000d4bc4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <network_connecting+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	689b      	ldr	r3, [r3, #8]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030240 	.word	0x00030240

000d4bd4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <network_disconnect+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	68db      	ldr	r3, [r3, #12]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030240 	.word	0x00030240

000d4be4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <network_ready+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	691b      	ldr	r3, [r3, #16]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030240 	.word	0x00030240

000d4bf4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <network_on+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	695b      	ldr	r3, [r3, #20]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030240 	.word	0x00030240

000d4c04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <network_off+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	699b      	ldr	r3, [r3, #24]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030240 	.word	0x00030240

000d4c14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <network_listen+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	69db      	ldr	r3, [r3, #28]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030240 	.word	0x00030240

000d4c24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <network_listening+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6a1b      	ldr	r3, [r3, #32]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030240 	.word	0x00030240

000d4c34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <network_set_listen_timeout+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030240 	.word	0x00030240

000d4c44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <network_get_listen_timeout+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030240 	.word	0x00030240

000d4c54 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <network_is_on+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030240 	.word	0x00030240

000d4c64 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <network_is_off+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030240 	.word	0x00030240

000d4c74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <malloc+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	681b      	ldr	r3, [r3, #0]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003021c 	.word	0x0003021c

000d4c84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <free+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	685b      	ldr	r3, [r3, #4]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003021c 	.word	0x0003021c

000d4c94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <realloc+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	689b      	ldr	r3, [r3, #8]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003021c 	.word	0x0003021c

000d4ca4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <vsnprintf+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003021c 	.word	0x0003021c

000d4cb4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <newlib_impure_ptr_callback+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003021c 	.word	0x0003021c

000d4cc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cc4:	2100      	movs	r1, #0
   d4cc6:	f7ff bf51 	b.w	d4b6c <system_delay_ms>

000d4cca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cca:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4ccc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cce:	4604      	mov	r4, r0
          _M_dispose();
   d4cd0:	689b      	ldr	r3, [r3, #8]
   d4cd2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4cd4:	68a3      	ldr	r3, [r4, #8]
   d4cd6:	3b01      	subs	r3, #1
   d4cd8:	60a3      	str	r3, [r4, #8]
   d4cda:	b92b      	cbnz	r3, d4ce8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4cdc:	6823      	ldr	r3, [r4, #0]
   d4cde:	4620      	mov	r0, r4
   d4ce0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4ce6:	4718      	bx	r3
    }
   d4ce8:	bd10      	pop	{r4, pc}

000d4cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4cea:	680b      	ldr	r3, [r1, #0]
   d4cec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4cee:	b113      	cbz	r3, d4cf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4cf0:	685a      	ldr	r2, [r3, #4]
   d4cf2:	3201      	adds	r2, #1
   d4cf4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4cf6:	4770      	bx	lr

000d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4cf8:	b510      	push	{r4, lr}
   d4cfa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4cfc:	6800      	ldr	r0, [r0, #0]
   d4cfe:	b128      	cbz	r0, d4d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4d00:	6843      	ldr	r3, [r0, #4]
   d4d02:	3b01      	subs	r3, #1
   d4d04:	6043      	str	r3, [r0, #4]
   d4d06:	b90b      	cbnz	r3, d4d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d08:	f7ff ffdf 	bl	d4cca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	bd10      	pop	{r4, pc}

000d4d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d10:	4802      	ldr	r0, [pc, #8]	; (d4d1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4d12:	2300      	movs	r3, #0
   d4d14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d16:	f7ff be31 	b.w	d497c <os_mutex_recursive_create>
   d4d1a:	bf00      	nop
   d4d1c:	2003e570 	.word	0x2003e570

000d4d20 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d20:	2200      	movs	r2, #0
   d4d22:	6840      	ldr	r0, [r0, #4]
   d4d24:	4611      	mov	r1, r2
   d4d26:	f7ff bf5d 	b.w	d4be4 <network_ready>

000d4d2a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	6840      	ldr	r0, [r0, #4]
   d4d2e:	4611      	mov	r1, r2
   d4d30:	f7ff bf78 	b.w	d4c24 <network_listening>

000d4d34 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d34:	2200      	movs	r2, #0
   d4d36:	6840      	ldr	r0, [r0, #4]
   d4d38:	4611      	mov	r1, r2
   d4d3a:	f7ff bf83 	b.w	d4c44 <network_get_listen_timeout>

000d4d3e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d3e:	6840      	ldr	r0, [r0, #4]
   d4d40:	2200      	movs	r2, #0
   d4d42:	f7ff bf77 	b.w	d4c34 <network_set_listen_timeout>

000d4d46 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d46:	6840      	ldr	r0, [r0, #4]
   d4d48:	2200      	movs	r2, #0
   d4d4a:	f081 0101 	eor.w	r1, r1, #1
   d4d4e:	f7ff bf61 	b.w	d4c14 <network_listen>

000d4d52 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d52:	2300      	movs	r3, #0
   d4d54:	6840      	ldr	r0, [r0, #4]
   d4d56:	461a      	mov	r2, r3
   d4d58:	4619      	mov	r1, r3
   d4d5a:	f7ff bf53 	b.w	d4c04 <network_off>

000d4d5e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d5e:	2300      	movs	r3, #0
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	461a      	mov	r2, r3
   d4d64:	4619      	mov	r1, r3
   d4d66:	f7ff bf45 	b.w	d4bf4 <network_on>

000d4d6a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	6840      	ldr	r0, [r0, #4]
   d4d6e:	4611      	mov	r1, r2
   d4d70:	f7ff bf28 	b.w	d4bc4 <network_connecting>

000d4d74 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d74:	6840      	ldr	r0, [r0, #4]
   d4d76:	2200      	movs	r2, #0
   d4d78:	2102      	movs	r1, #2
   d4d7a:	f7ff bf2b 	b.w	d4bd4 <network_disconnect>

000d4d7e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d7e:	2300      	movs	r3, #0
   d4d80:	6840      	ldr	r0, [r0, #4]
   d4d82:	461a      	mov	r2, r3
   d4d84:	f7ff bf16 	b.w	d4bb4 <network_connect>

000d4d88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d88:	4b08      	ldr	r3, [pc, #32]	; (d4dac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d8a:	b510      	push	{r4, lr}
   d4d8c:	2428      	movs	r4, #40	; 0x28
   d4d8e:	4622      	mov	r2, r4
   d4d90:	4618      	mov	r0, r3
   d4d92:	2100      	movs	r1, #0
   d4d94:	f002 fc1c 	bl	d75d0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d98:	4b05      	ldr	r3, [pc, #20]	; (d4db0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4d9a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4da0:	6042      	str	r2, [r0, #4]
   d4da2:	2204      	movs	r2, #4
   d4da4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4da6:	4a03      	ldr	r2, [pc, #12]	; (d4db4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4da8:	601a      	str	r2, [r3, #0]
   d4daa:	bd10      	pop	{r4, pc}
   d4dac:	2003e57c 	.word	0x2003e57c
   d4db0:	2003e574 	.word	0x2003e574
   d4db4:	000d7950 	.word	0x000d7950

000d4db8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4db8:	2200      	movs	r2, #0
   d4dba:	6840      	ldr	r0, [r0, #4]
   d4dbc:	4611      	mov	r1, r2
   d4dbe:	f7ff bf31 	b.w	d4c24 <network_listening>

000d4dc2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4dc2:	2200      	movs	r2, #0
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	4611      	mov	r1, r2
   d4dc8:	f7ff bf3c 	b.w	d4c44 <network_get_listen_timeout>

000d4dcc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f7ff bf30 	b.w	d4c34 <network_set_listen_timeout>

000d4dd4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dd4:	6840      	ldr	r0, [r0, #4]
   d4dd6:	2200      	movs	r2, #0
   d4dd8:	f081 0101 	eor.w	r1, r1, #1
   d4ddc:	f7ff bf1a 	b.w	d4c14 <network_listen>

000d4de0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4de0:	2300      	movs	r3, #0
   d4de2:	6840      	ldr	r0, [r0, #4]
   d4de4:	461a      	mov	r2, r3
   d4de6:	4619      	mov	r1, r3
   d4de8:	f7ff bf0c 	b.w	d4c04 <network_off>

000d4dec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4dec:	2300      	movs	r3, #0
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	461a      	mov	r2, r3
   d4df2:	4619      	mov	r1, r3
   d4df4:	f7ff befe 	b.w	d4bf4 <network_on>

000d4df8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4df8:	2200      	movs	r2, #0
   d4dfa:	6840      	ldr	r0, [r0, #4]
   d4dfc:	4611      	mov	r1, r2
   d4dfe:	f7ff bef1 	b.w	d4be4 <network_ready>

000d4e02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4e02:	2200      	movs	r2, #0
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	4611      	mov	r1, r2
   d4e08:	f7ff bedc 	b.w	d4bc4 <network_connecting>

000d4e0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e0c:	6840      	ldr	r0, [r0, #4]
   d4e0e:	2200      	movs	r2, #0
   d4e10:	2102      	movs	r1, #2
   d4e12:	f7ff bedf 	b.w	d4bd4 <network_disconnect>

000d4e16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4e16:	2300      	movs	r3, #0
   d4e18:	6840      	ldr	r0, [r0, #4]
   d4e1a:	461a      	mov	r2, r3
   d4e1c:	f7ff beca 	b.w	d4bb4 <network_connect>

000d4e20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4e20:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e22:	2203      	movs	r2, #3
   d4e24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e26:	4a02      	ldr	r2, [pc, #8]	; (d4e30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e2a:	4770      	bx	lr
   d4e2c:	2003e5a4 	.word	0x2003e5a4
   d4e30:	000d798c 	.word	0x000d798c

000d4e34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e34:	4770      	bx	lr

000d4e36 <_ZN9IPAddressD0Ev>:
   d4e36:	b510      	push	{r4, lr}
   d4e38:	2118      	movs	r1, #24
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	f001 fede 	bl	d6bfc <_ZdlPvj>
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd10      	pop	{r4, pc}

000d4e44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e46:	7d03      	ldrb	r3, [r0, #20]
   d4e48:	2b06      	cmp	r3, #6
{
   d4e4a:	b08d      	sub	sp, #52	; 0x34
   d4e4c:	460e      	mov	r6, r1
   d4e4e:	f100 0704 	add.w	r7, r0, #4
   d4e52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e56:	d012      	beq.n	d4e7e <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e60:	220a      	movs	r2, #10
   d4e62:	4630      	mov	r0, r6
   d4e64:	f001 fae9 	bl	d643a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e6c:	d019      	beq.n	d4ea2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e6e:	2c00      	cmp	r4, #0
   d4e70:	d0f4      	beq.n	d4e5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e72:	212e      	movs	r1, #46	; 0x2e
   d4e74:	4630      	mov	r0, r6
   d4e76:	f001 fac7 	bl	d6408 <_ZN5Print5printEc>
   d4e7a:	4404      	add	r4, r0
   d4e7c:	e7ee      	b.n	d4e5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e7e:	232f      	movs	r3, #47	; 0x2f
   d4e80:	466a      	mov	r2, sp
   d4e82:	4639      	mov	r1, r7
   d4e84:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e8a:	f7ff fdaf 	bl	d49ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e8e:	4668      	mov	r0, sp
   d4e90:	f002 fbf3 	bl	d767a <strlen>
   d4e94:	6833      	ldr	r3, [r6, #0]
   d4e96:	4602      	mov	r2, r0
   d4e98:	68db      	ldr	r3, [r3, #12]
   d4e9a:	4669      	mov	r1, sp
   d4e9c:	4630      	mov	r0, r6
   d4e9e:	4798      	blx	r3
   d4ea0:	4604      	mov	r4, r0
    }
    return n;
}
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	b00d      	add	sp, #52	; 0x34
   d4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ea8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4ea8:	b510      	push	{r4, lr}
   d4eaa:	4b05      	ldr	r3, [pc, #20]	; (d4ec0 <_ZN9IPAddressC1Ev+0x18>)
   d4eac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4eae:	2211      	movs	r2, #17
   d4eb0:	f840 3b04 	str.w	r3, [r0], #4
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	f002 fb8b 	bl	d75d0 <memset>
}
   d4eba:	4620      	mov	r0, r4
   d4ebc:	bd10      	pop	{r4, pc}
   d4ebe:	bf00      	nop
   d4ec0:	000d79c8 	.word	0x000d79c8

000d4ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ec4:	4603      	mov	r3, r0
   d4ec6:	4a07      	ldr	r2, [pc, #28]	; (d4ee4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ec8:	b510      	push	{r4, lr}
   d4eca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4ece:	f101 0210 	add.w	r2, r1, #16
   d4ed2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ed6:	f843 4b04 	str.w	r4, [r3], #4
   d4eda:	4291      	cmp	r1, r2
   d4edc:	d1f9      	bne.n	d4ed2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ede:	780a      	ldrb	r2, [r1, #0]
   d4ee0:	701a      	strb	r2, [r3, #0]
}
   d4ee2:	bd10      	pop	{r4, pc}
   d4ee4:	000d79c8 	.word	0x000d79c8

000d4ee8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ee8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4eea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4eee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ef2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ef6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4efa:	2304      	movs	r3, #4
   d4efc:	6041      	str	r1, [r0, #4]
   d4efe:	7503      	strb	r3, [r0, #20]
}
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZN9IPAddressaSEPKh>:
{
   d4f02:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f04:	78cb      	ldrb	r3, [r1, #3]
   d4f06:	9300      	str	r3, [sp, #0]
   d4f08:	788b      	ldrb	r3, [r1, #2]
   d4f0a:	784a      	ldrb	r2, [r1, #1]
   d4f0c:	7809      	ldrb	r1, [r1, #0]
   d4f0e:	f7ff ffeb 	bl	d4ee8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f12:	b002      	add	sp, #8
   d4f14:	bd10      	pop	{r4, pc}

000d4f16 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d4f16:	f100 0310 	add.w	r3, r0, #16
   d4f1a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d4f1c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d4f20:	2901      	cmp	r1, #1
   d4f22:	4618      	mov	r0, r3
   d4f24:	d108      	bne.n	d4f38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d4f26:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d4f2a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d4f2e:	3a01      	subs	r2, #1
   d4f30:	f103 0310 	add.w	r3, r3, #16
   d4f34:	d1f2      	bne.n	d4f1c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d4f36:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d4f38:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d4f3a:	bf04      	itt	eq
   d4f3c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d4f40:	1852      	addeq	r2, r2, r1
   d4f42:	e7f4      	b.n	d4f2e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d4f44 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f44:	b40e      	push	{r1, r2, r3}
   d4f46:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f48:	b088      	sub	sp, #32
   d4f4a:	af00      	add	r7, sp, #0
   d4f4c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f50:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f52:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f56:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f58:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f5a:	462b      	mov	r3, r5
   d4f5c:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d4f5e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f60:	f7ff fea0 	bl	d4ca4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d4f64:	280f      	cmp	r0, #15
   d4f66:	687a      	ldr	r2, [r7, #4]
   d4f68:	d91a      	bls.n	d4fa0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d4f6a:	f100 0308 	add.w	r3, r0, #8
   d4f6e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d4f72:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d4f74:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f78:	1c41      	adds	r1, r0, #1
   d4f7a:	462b      	mov	r3, r5
   d4f7c:	4668      	mov	r0, sp
        va_start(args, fmt);
   d4f7e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f80:	f7ff fe90 	bl	d4ca4 <vsnprintf>
        if (n > 0) {
   d4f84:	1e02      	subs	r2, r0, #0
   d4f86:	dd04      	ble.n	d4f92 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d4f88:	6823      	ldr	r3, [r4, #0]
   d4f8a:	4669      	mov	r1, sp
   d4f8c:	689b      	ldr	r3, [r3, #8]
   d4f8e:	4620      	mov	r0, r4
   d4f90:	4798      	blx	r3
   d4f92:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d4f94:	3720      	adds	r7, #32
   d4f96:	46bd      	mov	sp, r7
   d4f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d4f9c:	b003      	add	sp, #12
   d4f9e:	4770      	bx	lr
    } else if (n > 0) {
   d4fa0:	2800      	cmp	r0, #0
   d4fa2:	d0f7      	beq.n	d4f94 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d4fa4:	6823      	ldr	r3, [r4, #0]
   d4fa6:	4602      	mov	r2, r0
   d4fa8:	689b      	ldr	r3, [r3, #8]
   d4faa:	f107 0110 	add.w	r1, r7, #16
   d4fae:	4620      	mov	r0, r4
   d4fb0:	4798      	blx	r3
}
   d4fb2:	e7ef      	b.n	d4f94 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d4fb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fb4:	b510      	push	{r4, lr}
          _M_dispose();
   d4fb6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fb8:	4604      	mov	r4, r0
          _M_dispose();
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fbe:	68a3      	ldr	r3, [r4, #8]
   d4fc0:	3b01      	subs	r3, #1
   d4fc2:	60a3      	str	r3, [r4, #8]
   d4fc4:	b92b      	cbnz	r3, d4fd2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4fc6:	6823      	ldr	r3, [r4, #0]
   d4fc8:	4620      	mov	r0, r4
   d4fca:	68db      	ldr	r3, [r3, #12]
    }
   d4fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4fd0:	4718      	bx	r3
    }
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d4fd4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4fd6:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d4fd8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4fdc:	689b      	ldr	r3, [r3, #8]
   d4fde:	2201      	movs	r2, #1
   d4fe0:	f10d 0107 	add.w	r1, sp, #7
   d4fe4:	4798      	blx	r3
}
   d4fe6:	b003      	add	sp, #12
   d4fe8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d4fec:	b538      	push	{r3, r4, r5, lr}
   d4fee:	680b      	ldr	r3, [r1, #0]
   d4ff0:	6003      	str	r3, [r0, #0]
   d4ff2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d4ff4:	6843      	ldr	r3, [r0, #4]
   d4ff6:	429d      	cmp	r5, r3
    class __shared_ptr
   d4ff8:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d4ffa:	d00c      	beq.n	d5016 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d4ffc:	b115      	cbz	r5, d5004 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d4ffe:	686b      	ldr	r3, [r5, #4]
   d5000:	3301      	adds	r3, #1
   d5002:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5004:	6860      	ldr	r0, [r4, #4]
   d5006:	b128      	cbz	r0, d5014 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5008:	6843      	ldr	r3, [r0, #4]
   d500a:	3b01      	subs	r3, #1
   d500c:	6043      	str	r3, [r0, #4]
   d500e:	b90b      	cbnz	r3, d5014 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5010:	f7ff ffd0 	bl	d4fb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5014:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5016:	4620      	mov	r0, r4
   d5018:	bd38      	pop	{r3, r4, r5, pc}

000d501a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d501a:	460b      	mov	r3, r1
   d501c:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d501e:	2200      	movs	r2, #0
   d5020:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5022:	e9c0 2200 	strd	r2, r2, [r0]
   d5026:	4604      	mov	r4, r0
        t_ = t;
   d5028:	6083      	str	r3, [r0, #8]
    if (t) {
   d502a:	b90b      	cbnz	r3, d5030 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d502c:	4620      	mov	r0, r4
   d502e:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5030:	f7ff ffdc 	bl	d4fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5034:	e7fa      	b.n	d502c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5036 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d5036:	6883      	ldr	r3, [r0, #8]
   d5038:	b1eb      	cbz	r3, d5076 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d503a:	781a      	ldrb	r2, [r3, #0]
   d503c:	2a03      	cmp	r2, #3
   d503e:	d81a      	bhi.n	d5076 <_ZNK5spark9JSONValue4typeEv+0x40>
   d5040:	e8df f002 	tbb	[pc, r2]
   d5044:	1b021704 	.word	0x1b021704
   d5048:	2005      	movs	r0, #5
   d504a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d504c:	6802      	ldr	r2, [r0, #0]
   d504e:	685b      	ldr	r3, [r3, #4]
   d5050:	6852      	ldr	r2, [r2, #4]
   d5052:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5054:	282d      	cmp	r0, #45	; 0x2d
   d5056:	d012      	beq.n	d507e <_ZNK5spark9JSONValue4typeEv+0x48>
   d5058:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d505c:	2b09      	cmp	r3, #9
   d505e:	d90e      	bls.n	d507e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5060:	2874      	cmp	r0, #116	; 0x74
   d5062:	d00e      	beq.n	d5082 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5064:	2866      	cmp	r0, #102	; 0x66
   d5066:	d00c      	beq.n	d5082 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5068:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d506c:	4258      	negs	r0, r3
   d506e:	4158      	adcs	r0, r3
   d5070:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d5072:	2006      	movs	r0, #6
   d5074:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d5076:	2000      	movs	r0, #0
   d5078:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d507a:	2004      	movs	r0, #4
   d507c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d507e:	2003      	movs	r0, #3
   d5080:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d5082:	2002      	movs	r0, #2
}
   d5084:	4770      	bx	lr

000d5086 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d5086:	b510      	push	{r4, lr}
   d5088:	4604      	mov	r4, r0
    switch (type()) {
   d508a:	f7ff ffd4 	bl	d5036 <_ZNK5spark9JSONValue4typeEv>
   d508e:	2802      	cmp	r0, #2
   d5090:	d00e      	beq.n	d50b0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d5092:	1ec3      	subs	r3, r0, #3
   d5094:	b2db      	uxtb	r3, r3
   d5096:	2b01      	cmp	r3, #1
   d5098:	d814      	bhi.n	d50c4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d509a:	6822      	ldr	r2, [r4, #0]
   d509c:	68a3      	ldr	r3, [r4, #8]
   d509e:	6850      	ldr	r0, [r2, #4]
   d50a0:	685b      	ldr	r3, [r3, #4]
}
   d50a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d50a6:	220a      	movs	r2, #10
   d50a8:	2100      	movs	r1, #0
   d50aa:	4418      	add	r0, r3
   d50ac:	f002 bba0 	b.w	d77f0 <strtol>
        const char* const s = d_->json + t_->start;
   d50b0:	6822      	ldr	r2, [r4, #0]
   d50b2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d50b4:	6852      	ldr	r2, [r2, #4]
   d50b6:	685b      	ldr	r3, [r3, #4]
   d50b8:	5cd0      	ldrb	r0, [r2, r3]
   d50ba:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d50be:	4258      	negs	r0, r3
   d50c0:	4158      	adcs	r0, r3
}
   d50c2:	bd10      	pop	{r4, pc}
    switch (type()) {
   d50c4:	2000      	movs	r0, #0
   d50c6:	e7fc      	b.n	d50c2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d50c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d50c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d50ca:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d50cc:	e9c0 3300 	strd	r3, r3, [r0]
   d50d0:	4604      	mov	r4, r0
        n_(0) {
   d50d2:	480e      	ldr	r0, [pc, #56]	; (d510c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d50d4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d50d8:	b1a9      	cbz	r1, d5106 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d50da:	780b      	ldrb	r3, [r1, #0]
   d50dc:	2b03      	cmp	r3, #3
   d50de:	d006      	beq.n	d50ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d50e0:	b98b      	cbnz	r3, d5106 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d50e2:	6813      	ldr	r3, [r2, #0]
   d50e4:	6858      	ldr	r0, [r3, #4]
   d50e6:	684b      	ldr	r3, [r1, #4]
   d50e8:	5cc3      	ldrb	r3, [r0, r3]
   d50ea:	2b6e      	cmp	r3, #110	; 0x6e
   d50ec:	d007      	beq.n	d50fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d50ee:	6813      	ldr	r3, [r2, #0]
   d50f0:	684d      	ldr	r5, [r1, #4]
   d50f2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d50f4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d50f6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d50f8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d50fa:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d50fc:	60e3      	str	r3, [r4, #12]
   d50fe:	4611      	mov	r1, r2
   d5100:	4620      	mov	r0, r4
   d5102:	f7ff ff73 	bl	d4fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d5106:	4620      	mov	r0, r4
   d5108:	bd38      	pop	{r3, r4, r5, pc}
   d510a:	bf00      	nop
   d510c:	000d7a3a 	.word	0x000d7a3a

000d5110 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5110:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5112:	2500      	movs	r5, #0
   d5114:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5116:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d511a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d511e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5122:	4604      	mov	r4, r0
   d5124:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d5126:	b14b      	cbz	r3, d513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5128:	781a      	ldrb	r2, [r3, #0]
   d512a:	2a01      	cmp	r2, #1
   d512c:	d106      	bne.n	d513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d512e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5132:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5134:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5136:	6143      	str	r3, [r0, #20]
   d5138:	f7ff ff58 	bl	d4fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d513c:	4620      	mov	r0, r4
   d513e:	bd38      	pop	{r3, r4, r5, pc}

000d5140 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d5140:	b510      	push	{r4, lr}
    if (!n_) {
   d5142:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5144:	4604      	mov	r4, r0
    if (!n_) {
   d5146:	b163      	cbz	r3, d5162 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d5148:	6880      	ldr	r0, [r0, #8]
   d514a:	60e0      	str	r0, [r4, #12]
    --n_;
   d514c:	3b01      	subs	r3, #1
    ++t_;
   d514e:	3010      	adds	r0, #16
   d5150:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5152:	6120      	str	r0, [r4, #16]
    --n_;
   d5154:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5156:	b113      	cbz	r3, d515e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5158:	f7ff fedd 	bl	d4f16 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d515c:	60a0      	str	r0, [r4, #8]
    return true;
   d515e:	2001      	movs	r0, #1
   d5160:	e000      	b.n	d5164 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5162:	4618      	mov	r0, r3
}
   d5164:	bd10      	pop	{r4, pc}

000d5166 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5166:	b510      	push	{r4, lr}
    write('}');
   d5168:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d516a:	4604      	mov	r4, r0
    write('}');
   d516c:	f7ff ff32 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5170:	2301      	movs	r3, #1
   d5172:	7123      	strb	r3, [r4, #4]
}
   d5174:	4620      	mov	r0, r4
   d5176:	bd10      	pop	{r4, pc}

000d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d5178:	b508      	push	{r3, lr}
    switch (state_) {
   d517a:	7903      	ldrb	r3, [r0, #4]
   d517c:	2b01      	cmp	r3, #1
   d517e:	d002      	beq.n	d5186 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5180:	2b02      	cmp	r3, #2
   d5182:	d004      	beq.n	d518e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d5184:	bd08      	pop	{r3, pc}
        write(',');
   d5186:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d5188:	f7ff ff24 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
}
   d518c:	e7fa      	b.n	d5184 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d518e:	213a      	movs	r1, #58	; 0x3a
   d5190:	e7fa      	b.n	d5188 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d5192 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d5192:	b510      	push	{r4, lr}
   d5194:	4604      	mov	r4, r0
    writeSeparator();
   d5196:	f7ff ffef 	bl	d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d519a:	4620      	mov	r0, r4
   d519c:	217b      	movs	r1, #123	; 0x7b
   d519e:	f7ff ff19 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d51a2:	2300      	movs	r3, #0
   d51a4:	7123      	strb	r3, [r4, #4]
}
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}
	...

000d51ac <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d51ac:	b513      	push	{r0, r1, r4, lr}
   d51ae:	4604      	mov	r4, r0
   d51b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d51b2:	f7ff ffe1 	bl	d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d51b6:	6823      	ldr	r3, [r4, #0]
   d51b8:	9a01      	ldr	r2, [sp, #4]
   d51ba:	68db      	ldr	r3, [r3, #12]
   d51bc:	4903      	ldr	r1, [pc, #12]	; (d51cc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d51be:	4620      	mov	r0, r4
   d51c0:	4798      	blx	r3
    state_ = NEXT;
   d51c2:	2301      	movs	r3, #1
}
   d51c4:	4620      	mov	r0, r4
    state_ = NEXT;
   d51c6:	7123      	strb	r3, [r4, #4]
}
   d51c8:	b002      	add	sp, #8
   d51ca:	bd10      	pop	{r4, pc}
   d51cc:	000d79d4 	.word	0x000d79d4

000d51d0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d51d0:	b513      	push	{r0, r1, r4, lr}
   d51d2:	4604      	mov	r4, r0
   d51d4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d51d6:	f7ff ffcf 	bl	d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d51da:	6823      	ldr	r3, [r4, #0]
   d51dc:	9a01      	ldr	r2, [sp, #4]
   d51de:	68db      	ldr	r3, [r3, #12]
   d51e0:	4903      	ldr	r1, [pc, #12]	; (d51f0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d51e2:	4620      	mov	r0, r4
   d51e4:	4798      	blx	r3
    state_ = NEXT;
   d51e6:	2301      	movs	r3, #1
}
   d51e8:	4620      	mov	r0, r4
    state_ = NEXT;
   d51ea:	7123      	strb	r3, [r4, #4]
}
   d51ec:	b002      	add	sp, #8
   d51ee:	bd10      	pop	{r4, pc}
   d51f0:	000d79d7 	.word	0x000d79d7

000d51f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d51f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51f8:	460d      	mov	r5, r1
   d51fa:	4617      	mov	r7, r2
    write('"');
   d51fc:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d51fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d52a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5202:	4604      	mov	r4, r0
    const char* const end = str + size;
   d5204:	442f      	add	r7, r5
    write('"');
   d5206:	f7ff fee5 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d520a:	4629      	mov	r1, r5
    while (s != end) {
   d520c:	42bd      	cmp	r5, r7
   d520e:	462a      	mov	r2, r5
   d5210:	d038      	beq.n	d5284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d5212:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d5216:	2e22      	cmp	r6, #34	; 0x22
   d5218:	d003      	beq.n	d5222 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d521a:	2e5c      	cmp	r6, #92	; 0x5c
   d521c:	d001      	beq.n	d5222 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d521e:	2e1f      	cmp	r6, #31
   d5220:	d8f4      	bhi.n	d520c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d5222:	6823      	ldr	r3, [r4, #0]
   d5224:	1a52      	subs	r2, r2, r1
   d5226:	689b      	ldr	r3, [r3, #8]
   d5228:	4620      	mov	r0, r4
   d522a:	4798      	blx	r3
            write('\\');
   d522c:	215c      	movs	r1, #92	; 0x5c
   d522e:	4620      	mov	r0, r4
   d5230:	f7ff fed0 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5234:	2e0d      	cmp	r6, #13
   d5236:	d80a      	bhi.n	d524e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d5238:	2e07      	cmp	r6, #7
   d523a:	d91c      	bls.n	d5276 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d523c:	f1a6 0308 	sub.w	r3, r6, #8
   d5240:	2b05      	cmp	r3, #5
   d5242:	d818      	bhi.n	d5276 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d5244:	e8df f003 	tbb	[pc, r3]
   d5248:	17110f0d 	.word	0x17110f0d
   d524c:	1513      	.short	0x1513
   d524e:	2e22      	cmp	r6, #34	; 0x22
   d5250:	d001      	beq.n	d5256 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d5252:	2e5c      	cmp	r6, #92	; 0x5c
   d5254:	d10f      	bne.n	d5276 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d5256:	4631      	mov	r1, r6
                write('b');
   d5258:	4620      	mov	r0, r4
   d525a:	f7ff febb 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d525e:	4629      	mov	r1, r5
    while (s != end) {
   d5260:	e7d4      	b.n	d520c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d5262:	2162      	movs	r1, #98	; 0x62
   d5264:	e7f8      	b.n	d5258 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d5266:	2174      	movs	r1, #116	; 0x74
   d5268:	e7f6      	b.n	d5258 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d526a:	216e      	movs	r1, #110	; 0x6e
   d526c:	e7f4      	b.n	d5258 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d526e:	2166      	movs	r1, #102	; 0x66
   d5270:	e7f2      	b.n	d5258 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d5272:	2172      	movs	r1, #114	; 0x72
   d5274:	e7f0      	b.n	d5258 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d5276:	6823      	ldr	r3, [r4, #0]
   d5278:	4632      	mov	r2, r6
   d527a:	68db      	ldr	r3, [r3, #12]
   d527c:	4641      	mov	r1, r8
   d527e:	4620      	mov	r0, r4
   d5280:	4798      	blx	r3
                break;
   d5282:	e7ec      	b.n	d525e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d5284:	428d      	cmp	r5, r1
   d5286:	d004      	beq.n	d5292 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d5288:	6823      	ldr	r3, [r4, #0]
   d528a:	1a6a      	subs	r2, r5, r1
   d528c:	689b      	ldr	r3, [r3, #8]
   d528e:	4620      	mov	r0, r4
   d5290:	4798      	blx	r3
    }
    write('"');
   d5292:	2122      	movs	r1, #34	; 0x22
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff fe9d 	bl	d4fd4 <_ZN5spark10JSONWriter5writeEc>
}
   d529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d529e:	bf00      	nop
   d52a0:	000d79da 	.word	0x000d79da

000d52a4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d52a4:	b513      	push	{r0, r1, r4, lr}
   d52a6:	4604      	mov	r4, r0
   d52a8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d52ac:	f7ff ff64 	bl	d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d52b0:	4620      	mov	r0, r4
   d52b2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d52b6:	f7ff ff9d 	bl	d51f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d52ba:	2302      	movs	r3, #2
}
   d52bc:	4620      	mov	r0, r4
    state_ = VALUE;
   d52be:	7123      	strb	r3, [r4, #4]
}
   d52c0:	b002      	add	sp, #8
   d52c2:	bd10      	pop	{r4, pc}

000d52c4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d52c4:	b513      	push	{r0, r1, r4, lr}
   d52c6:	4604      	mov	r4, r0
   d52c8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d52cc:	f7ff ff54 	bl	d5178 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d52d0:	4620      	mov	r0, r4
   d52d2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d52d6:	f7ff ff8d 	bl	d51f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d52da:	2301      	movs	r3, #1
}
   d52dc:	4620      	mov	r0, r4
    state_ = NEXT;
   d52de:	7123      	strb	r3, [r4, #4]
}
   d52e0:	b002      	add	sp, #8
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d52e4:	6880      	ldr	r0, [r0, #8]
   d52e6:	6803      	ldr	r3, [r0, #0]
   d52e8:	68db      	ldr	r3, [r3, #12]
   d52ea:	4718      	bx	r3

000d52ec <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d52ec:	4770      	bx	lr

000d52ee <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d52ee:	4608      	mov	r0, r1
   d52f0:	b111      	cbz	r1, d52f8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d52f2:	680b      	ldr	r3, [r1, #0]
   d52f4:	685b      	ldr	r3, [r3, #4]
   d52f6:	4718      	bx	r3
}
   d52f8:	4770      	bx	lr

000d52fa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d52fa:	4770      	bx	lr

000d52fc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d52fc:	4770      	bx	lr

000d52fe <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d52fe:	4770      	bx	lr

000d5300 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d5300:	4770      	bx	lr

000d5302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5302:	b538      	push	{r3, r4, r5, lr}
   d5304:	4604      	mov	r4, r0
   d5306:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5308:	6800      	ldr	r0, [r0, #0]
   d530a:	212e      	movs	r1, #46	; 0x2e
   d530c:	f002 f999 	bl	d7642 <strchrnul>
    size = s - category;
   d5310:	6823      	ldr	r3, [r4, #0]
   d5312:	1ac3      	subs	r3, r0, r3
   d5314:	602b      	str	r3, [r5, #0]
    if (size) {
   d5316:	b123      	cbz	r3, d5322 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5318:	7803      	ldrb	r3, [r0, #0]
   d531a:	b103      	cbz	r3, d531e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d531c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d531e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5320:	6020      	str	r0, [r4, #0]
}
   d5322:	4618      	mov	r0, r3
   d5324:	bd38      	pop	{r3, r4, r5, pc}

000d5326 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5326:	b510      	push	{r4, lr}
   d5328:	210c      	movs	r1, #12
   d532a:	4604      	mov	r4, r0
   d532c:	f001 fc66 	bl	d6bfc <_ZdlPvj>
   d5330:	4620      	mov	r0, r4
   d5332:	bd10      	pop	{r4, pc}

000d5334 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5334:	b510      	push	{r4, lr}
   d5336:	2104      	movs	r1, #4
   d5338:	4604      	mov	r4, r0
   d533a:	f001 fc5f 	bl	d6bfc <_ZdlPvj>
   d533e:	4620      	mov	r0, r4
   d5340:	bd10      	pop	{r4, pc}

000d5342 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5342:	b510      	push	{r4, lr}
   d5344:	2104      	movs	r1, #4
   d5346:	4604      	mov	r4, r0
   d5348:	f001 fc58 	bl	d6bfc <_ZdlPvj>
   d534c:	4620      	mov	r0, r4
   d534e:	bd10      	pop	{r4, pc}

000d5350 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d5350:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5352:	f002 f980 	bl	d7656 <strcmp>
}
   d5356:	fab0 f080 	clz	r0, r0
   d535a:	0940      	lsrs	r0, r0, #5
   d535c:	bd08      	pop	{r3, pc}

000d535e <__tcf_1>:
   d535e:	4770      	bx	lr

000d5360 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5360:	b510      	push	{r4, lr}
   d5362:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5364:	f001 fb88 	bl	d6a78 <_Z16_fetch_usbserialv>
   d5368:	4284      	cmp	r4, r0
   d536a:	d010      	beq.n	d538e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d536c:	f001 fafc 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d5370:	4284      	cmp	r4, r0
   d5372:	d105      	bne.n	d5380 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d5374:	f001 faf8 	bl	d6968 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d537c:	f001 baf1 	b.w	d6962 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5380:	b12c      	cbz	r4, d538e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d5382:	6823      	ldr	r3, [r4, #0]
   d5384:	4620      	mov	r0, r4
   d5386:	685b      	ldr	r3, [r3, #4]
}
   d5388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d538c:	4718      	bx	r3
   d538e:	bd10      	pop	{r4, pc}

000d5390 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5390:	b513      	push	{r0, r1, r4, lr}
   d5392:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d5394:	4608      	mov	r0, r1
   d5396:	9101      	str	r1, [sp, #4]
   d5398:	f002 f96f 	bl	d767a <strlen>
   d539c:	9901      	ldr	r1, [sp, #4]
   d539e:	4602      	mov	r2, r0
   d53a0:	4620      	mov	r0, r4
}
   d53a2:	b002      	add	sp, #8
   d53a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d53a8:	f7ff bf8c 	b.w	d52c4 <_ZN5spark10JSONWriter5valueEPKcj>

000d53ac <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d53ac:	b513      	push	{r0, r1, r4, lr}
   d53ae:	4604      	mov	r4, r0
    write(str, strlen(str));
   d53b0:	4608      	mov	r0, r1
   d53b2:	9101      	str	r1, [sp, #4]
   d53b4:	f002 f961 	bl	d767a <strlen>
   d53b8:	6823      	ldr	r3, [r4, #0]
   d53ba:	9901      	ldr	r1, [sp, #4]
   d53bc:	68db      	ldr	r3, [r3, #12]
   d53be:	4602      	mov	r2, r0
   d53c0:	4620      	mov	r0, r4
}
   d53c2:	b002      	add	sp, #8
   d53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d53c8:	4718      	bx	r3

000d53ca <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d53ca:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d53cc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d53ce:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d53d2:	68db      	ldr	r3, [r3, #12]
   d53d4:	2201      	movs	r2, #1
   d53d6:	f10d 0107 	add.w	r1, sp, #7
   d53da:	4798      	blx	r3
}
   d53dc:	b003      	add	sp, #12
   d53de:	f85d fb04 	ldr.w	pc, [sp], #4

000d53e2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d53e2:	b40e      	push	{r1, r2, r3}
   d53e4:	b503      	push	{r0, r1, lr}
   d53e6:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d53e8:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d53ea:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d53ee:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d53f0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d53f2:	f001 f914 	bl	d661e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d53f6:	b002      	add	sp, #8
   d53f8:	f85d eb04 	ldr.w	lr, [sp], #4
   d53fc:	b003      	add	sp, #12
   d53fe:	4770      	bx	lr

000d5400 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d5404:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5408:	f04f 0814 	mov.w	r8, #20
   d540c:	fb08 f505 	mul.w	r5, r8, r5
   d5410:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5412:	10ab      	asrs	r3, r5, #2
   d5414:	4d18      	ldr	r5, [pc, #96]	; (d5478 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5416:	4617      	mov	r7, r2
   d5418:	435d      	muls	r5, r3
   d541a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d541c:	2d00      	cmp	r5, #0
   d541e:	dd23      	ble.n	d5468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5420:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d5422:	fb08 f006 	mul.w	r0, r8, r6
   d5426:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d542a:	463a      	mov	r2, r7
   d542c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5430:	5820      	ldr	r0, [r4, r0]
   d5432:	9101      	str	r1, [sp, #4]
   d5434:	455f      	cmp	r7, fp
   d5436:	bf28      	it	cs
   d5438:	465a      	movcs	r2, fp
   d543a:	f002 f926 	bl	d768a <strncmp>
                if (cmp == 0) {
   d543e:	9901      	ldr	r1, [sp, #4]
   d5440:	2301      	movs	r3, #1
   d5442:	b978      	cbnz	r0, d5464 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d5444:	455f      	cmp	r7, fp
   d5446:	d103      	bne.n	d5450 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5448:	9a00      	ldr	r2, [sp, #0]
   d544a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d544c:	4635      	mov	r5, r6
   d544e:	e7e5      	b.n	d541c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5450:	bf8c      	ite	hi
   d5452:	2001      	movhi	r0, #1
   d5454:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5456:	2800      	cmp	r0, #0
   d5458:	d0f8      	beq.n	d544c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d545a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d545c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5460:	3e01      	subs	r6, #1
   d5462:	e7f3      	b.n	d544c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d5464:	0fc0      	lsrs	r0, r0, #31
   d5466:	e7f6      	b.n	d5456 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5468:	eba4 0409 	sub.w	r4, r4, r9
}
   d546c:	4802      	ldr	r0, [pc, #8]	; (d5478 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d546e:	10a4      	asrs	r4, r4, #2
   d5470:	4360      	muls	r0, r4
   d5472:	b003      	add	sp, #12
   d5474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5478:	cccccccd 	.word	0xcccccccd

000d547c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d547c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d547e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5480:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5482:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d5484:	b30b      	cbz	r3, d54ca <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d5486:	b301      	cbz	r1, d54ca <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d5488:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d548a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d548e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5490:	a903      	add	r1, sp, #12
   d5492:	a801      	add	r0, sp, #4
   d5494:	f7ff ff35 	bl	d5302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5498:	4601      	mov	r1, r0
   d549a:	b1b0      	cbz	r0, d54ca <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d549c:	f10d 030b 	add.w	r3, sp, #11
   d54a0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d54a2:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ffaa 	bl	d5400 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d54ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54b0:	b15b      	cbz	r3, d54ca <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d54b2:	6824      	ldr	r4, [r4, #0]
   d54b4:	2314      	movs	r3, #20
   d54b6:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d54ba:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d54be:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d54c2:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d54c4:	bfa8      	it	ge
   d54c6:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d54c8:	e7e2      	b.n	d5490 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d54ca:	4630      	mov	r0, r6
   d54cc:	b004      	add	sp, #16
   d54ce:	bd70      	pop	{r4, r5, r6, pc}

000d54d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d54d0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d54d2:	4c09      	ldr	r4, [pc, #36]	; (d54f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d54d4:	7823      	ldrb	r3, [r4, #0]
   d54d6:	f3bf 8f5b 	dmb	ish
   d54da:	07db      	lsls	r3, r3, #31
   d54dc:	d409      	bmi.n	d54f2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d54de:	4620      	mov	r0, r4
   d54e0:	f7fe fde8 	bl	d40b4 <__cxa_guard_acquire>
   d54e4:	b128      	cbz	r0, d54f2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d54e6:	4620      	mov	r0, r4
   d54e8:	f7fe fde9 	bl	d40be <__cxa_guard_release>
   d54ec:	4803      	ldr	r0, [pc, #12]	; (d54fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d54ee:	f002 f83d 	bl	d756c <atexit>
}
   d54f2:	4803      	ldr	r0, [pc, #12]	; (d5500 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d54f4:	bd10      	pop	{r4, pc}
   d54f6:	bf00      	nop
   d54f8:	2003e5b0 	.word	0x2003e5b0
   d54fc:	000d52fb 	.word	0x000d52fb
   d5500:	2003e400 	.word	0x2003e400

000d5504 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5504:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5506:	4c09      	ldr	r4, [pc, #36]	; (d552c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5508:	7823      	ldrb	r3, [r4, #0]
   d550a:	f3bf 8f5b 	dmb	ish
   d550e:	07db      	lsls	r3, r3, #31
   d5510:	d409      	bmi.n	d5526 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5512:	4620      	mov	r0, r4
   d5514:	f7fe fdce 	bl	d40b4 <__cxa_guard_acquire>
   d5518:	b128      	cbz	r0, d5526 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d551a:	4620      	mov	r0, r4
   d551c:	f7fe fdcf 	bl	d40be <__cxa_guard_release>
   d5520:	4803      	ldr	r0, [pc, #12]	; (d5530 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5522:	f002 f823 	bl	d756c <atexit>
    return &factory;
}
   d5526:	4803      	ldr	r0, [pc, #12]	; (d5534 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5528:	bd10      	pop	{r4, pc}
   d552a:	bf00      	nop
   d552c:	2003e5b4 	.word	0x2003e5b4
   d5530:	000d535f 	.word	0x000d535f
   d5534:	2003e404 	.word	0x2003e404

000d5538 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5538:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d553a:	2500      	movs	r5, #0
   d553c:	4604      	mov	r4, r0
   d553e:	e9c0 5500 	strd	r5, r5, [r0]
   d5542:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5546:	6085      	str	r5, [r0, #8]
   d5548:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d554a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d554e:	f7ff fa15 	bl	d497c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5552:	f7ff ffbd 	bl	d54d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5556:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5558:	f7ff ffd4 	bl	d5504 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d555c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d555e:	6220      	str	r0, [r4, #32]
}
   d5560:	4620      	mov	r0, r4
   d5562:	bd38      	pop	{r3, r4, r5, pc}

000d5564 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5564:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5566:	4c0a      	ldr	r4, [pc, #40]	; (d5590 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5568:	7823      	ldrb	r3, [r4, #0]
   d556a:	f3bf 8f5b 	dmb	ish
   d556e:	07db      	lsls	r3, r3, #31
   d5570:	d40c      	bmi.n	d558c <_ZN5spark10LogManager8instanceEv+0x28>
   d5572:	4620      	mov	r0, r4
   d5574:	f7fe fd9e 	bl	d40b4 <__cxa_guard_acquire>
   d5578:	b140      	cbz	r0, d558c <_ZN5spark10LogManager8instanceEv+0x28>
   d557a:	4806      	ldr	r0, [pc, #24]	; (d5594 <_ZN5spark10LogManager8instanceEv+0x30>)
   d557c:	f7ff ffdc 	bl	d5538 <_ZN5spark10LogManagerC1Ev>
   d5580:	4620      	mov	r0, r4
   d5582:	f7fe fd9c 	bl	d40be <__cxa_guard_release>
   d5586:	4804      	ldr	r0, [pc, #16]	; (d5598 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5588:	f001 fff0 	bl	d756c <atexit>
    return &mgr;
}
   d558c:	4801      	ldr	r0, [pc, #4]	; (d5594 <_ZN5spark10LogManager8instanceEv+0x30>)
   d558e:	bd10      	pop	{r4, pc}
   d5590:	2003e5ac 	.word	0x2003e5ac
   d5594:	2003e5bc 	.word	0x2003e5bc
   d5598:	000d5a45 	.word	0x000d5a45

000d559c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d559c:	4a02      	ldr	r2, [pc, #8]	; (d55a8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d559e:	4903      	ldr	r1, [pc, #12]	; (d55ac <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d55a0:	4803      	ldr	r0, [pc, #12]	; (d55b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d55a2:	2300      	movs	r3, #0
   d55a4:	f7ff bad2 	b.w	d4b4c <log_set_callbacks>
   d55a8:	000d58cd 	.word	0x000d58cd
   d55ac:	000d5859 	.word	0x000d5859
   d55b0:	000d57d9 	.word	0x000d57d9

000d55b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d55b4:	2300      	movs	r3, #0
   d55b6:	461a      	mov	r2, r3
   d55b8:	4619      	mov	r1, r3
   d55ba:	4618      	mov	r0, r3
   d55bc:	f7ff bac6 	b.w	d4b4c <log_set_callbacks>

000d55c0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d55c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d55c2:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55c4:	f851 3b04 	ldr.w	r3, [r1], #4
   d55c8:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d55ca:	4604      	mov	r4, r0
   d55cc:	a801      	add	r0, sp, #4
   d55ce:	f7ff fb8c 	bl	d4cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d55d2:	466a      	mov	r2, sp
   d55d4:	4629      	mov	r1, r5
   d55d6:	4620      	mov	r0, r4
   d55d8:	f7ff fd1f 	bl	d501a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55dc:	a801      	add	r0, sp, #4
   d55de:	f7ff fb8b 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d55e2:	4620      	mov	r0, r4
   d55e4:	b003      	add	sp, #12
   d55e6:	bd30      	pop	{r4, r5, pc}

000d55e8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d55e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d55ea:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55ec:	f851 3b04 	ldr.w	r3, [r1], #4
   d55f0:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d55f2:	4604      	mov	r4, r0
   d55f4:	a801      	add	r0, sp, #4
   d55f6:	f7ff fb78 	bl	d4cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d55fa:	466a      	mov	r2, sp
   d55fc:	4629      	mov	r1, r5
   d55fe:	4620      	mov	r0, r4
   d5600:	f7ff fd86 	bl	d5110 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5604:	a801      	add	r0, sp, #4
   d5606:	f7ff fb77 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d560a:	4620      	mov	r0, r4
   d560c:	b003      	add	sp, #12
   d560e:	bd30      	pop	{r4, r5, pc}

000d5610 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5610:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5612:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5614:	f851 3b04 	ldr.w	r3, [r1], #4
   d5618:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d561a:	4604      	mov	r4, r0
   d561c:	a801      	add	r0, sp, #4
   d561e:	f7ff fb64 	bl	d4cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5622:	466a      	mov	r2, sp
   d5624:	4629      	mov	r1, r5
   d5626:	4620      	mov	r0, r4
   d5628:	f7ff fd4e 	bl	d50c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d562c:	a801      	add	r0, sp, #4
   d562e:	f7ff fb63 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5632:	4620      	mov	r0, r4
   d5634:	b003      	add	sp, #12
   d5636:	bd30      	pop	{r4, r5, pc}

000d5638 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5638:	b570      	push	{r4, r5, r6, lr}
   d563a:	b08a      	sub	sp, #40	; 0x28
   d563c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d563e:	4601      	mov	r1, r0
   d5640:	a804      	add	r0, sp, #16
   d5642:	f7ff ffd1 	bl	d55e8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d5646:	4e14      	ldr	r6, [pc, #80]	; (d5698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5648:	a804      	add	r0, sp, #16
   d564a:	f7ff fd79 	bl	d5140 <_ZN5spark18JSONObjectIterator4nextEv>
   d564e:	b1e8      	cbz	r0, d568c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5650:	a904      	add	r1, sp, #16
   d5652:	4668      	mov	r0, sp
   d5654:	f7ff ffdc 	bl	d5610 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5658:	9802      	ldr	r0, [sp, #8]
   d565a:	4631      	mov	r1, r6
   d565c:	f7ff fe78 	bl	d5350 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5660:	4604      	mov	r4, r0
   d5662:	b110      	cbz	r0, d566a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5664:	1e2c      	subs	r4, r5, #0
   d5666:	bf18      	it	ne
   d5668:	2401      	movne	r4, #1
   d566a:	a801      	add	r0, sp, #4
   d566c:	f7ff fb44 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5670:	2c00      	cmp	r4, #0
   d5672:	d0e9      	beq.n	d5648 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5674:	a904      	add	r1, sp, #16
   d5676:	4668      	mov	r0, sp
   d5678:	f7ff ffa2 	bl	d55c0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d567c:	4668      	mov	r0, sp
   d567e:	f7ff fd02 	bl	d5086 <_ZNK5spark9JSONValue5toIntEv>
   d5682:	6028      	str	r0, [r5, #0]
   d5684:	a801      	add	r0, sp, #4
   d5686:	f7ff fb37 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d568a:	e7dd      	b.n	d5648 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d568c:	a805      	add	r0, sp, #20
   d568e:	f7ff fb33 	bl	d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5692:	b00a      	add	sp, #40	; 0x28
   d5694:	bd70      	pop	{r4, r5, r6, pc}
   d5696:	bf00      	nop
   d5698:	000d79e0 	.word	0x000d79e0

000d569c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d569c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d569e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d56a0:	4620      	mov	r0, r4
   d56a2:	4912      	ldr	r1, [pc, #72]	; (d56ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d56a4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d56a6:	f001 ffd6 	bl	d7656 <strcmp>
   d56aa:	b948      	cbnz	r0, d56c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d56ac:	f001 f9e4 	bl	d6a78 <_Z16_fetch_usbserialv>
   d56b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d56b4:	f001 f9d0 	bl	d6a58 <_ZN9USBSerial5beginEl>
        return &Serial;
   d56b8:	f001 f9de 	bl	d6a78 <_Z16_fetch_usbserialv>
}
   d56bc:	b003      	add	sp, #12
   d56be:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d56c0:	490b      	ldr	r1, [pc, #44]	; (d56f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d56c2:	4620      	mov	r0, r4
   d56c4:	f001 ffc7 	bl	d7656 <strcmp>
   d56c8:	b970      	cbnz	r0, d56e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d56ca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d56ce:	a901      	add	r1, sp, #4
   d56d0:	4628      	mov	r0, r5
        int baud = 9600;
   d56d2:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d56d4:	f7ff ffb0 	bl	d5638 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d56d8:	f001 f946 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d56dc:	9901      	ldr	r1, [sp, #4]
   d56de:	f001 f93d 	bl	d695c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d56e2:	f001 f941 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d56e6:	e7e9      	b.n	d56bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d56e8:	2000      	movs	r0, #0
   d56ea:	e7e7      	b.n	d56bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d56ec:	000d79e5 	.word	0x000d79e5
   d56f0:	000d79ec 	.word	0x000d79ec

000d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d56f6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d56fa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d56fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5702:	42ae      	cmp	r6, r5
   d5704:	d005      	beq.n	d5712 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5706:	f105 0008 	add.w	r0, r5, #8
   d570a:	f7ff fff3 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d570e:	3514      	adds	r5, #20
   d5710:	e7f7      	b.n	d5702 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5712:	6820      	ldr	r0, [r4, #0]
   d5714:	f7ff fab6 	bl	d4c84 <free>
}
   d5718:	4620      	mov	r0, r4
   d571a:	bd70      	pop	{r4, r5, r6, pc}

000d571c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d571c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d571e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5722:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5724:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5728:	42ae      	cmp	r6, r5
   d572a:	d004      	beq.n	d5736 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d572c:	4628      	mov	r0, r5
   d572e:	f000 ffdb 	bl	d66e8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d5732:	3510      	adds	r5, #16
   d5734:	e7f8      	b.n	d5728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5736:	6820      	ldr	r0, [r4, #0]
   d5738:	f7ff faa4 	bl	d4c84 <free>
}
   d573c:	4620      	mov	r0, r4
   d573e:	bd70      	pop	{r4, r5, r6, pc}

000d5740 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5740:	b510      	push	{r4, lr}
   d5742:	4604      	mov	r4, r0
   d5744:	300c      	adds	r0, #12
   d5746:	f7ff ffd5 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d574a:	4620      	mov	r0, r4
   d574c:	f7ff ffe6 	bl	d571c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5750:	4620      	mov	r0, r4
   d5752:	bd10      	pop	{r4, pc}

000d5754 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d5754:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d5756:	4b04      	ldr	r3, [pc, #16]	; (d5768 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5758:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d575a:	f840 3b04 	str.w	r3, [r0], #4
   d575e:	f7ff ffef 	bl	d5740 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d5762:	4620      	mov	r0, r4
   d5764:	bd10      	pop	{r4, pc}
   d5766:	bf00      	nop
   d5768:	000d7908 	.word	0x000d7908

000d576c <_ZN5spark16StreamLogHandlerD0Ev>:
   d576c:	b510      	push	{r4, lr}
   d576e:	4604      	mov	r4, r0
   d5770:	f7ff fff0 	bl	d5754 <_ZN5spark16StreamLogHandlerD1Ev>
   d5774:	4620      	mov	r0, r4
   d5776:	2124      	movs	r1, #36	; 0x24
   d5778:	f001 fa40 	bl	d6bfc <_ZdlPvj>
   d577c:	4620      	mov	r0, r4
   d577e:	bd10      	pop	{r4, pc}

000d5780 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5780:	b510      	push	{r4, lr}
   d5782:	4b03      	ldr	r3, [pc, #12]	; (d5790 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5784:	6003      	str	r3, [r0, #0]
   d5786:	4604      	mov	r4, r0
   d5788:	f7ff ffe4 	bl	d5754 <_ZN5spark16StreamLogHandlerD1Ev>
   d578c:	4620      	mov	r0, r4
   d578e:	bd10      	pop	{r4, pc}
   d5790:	000d7a8c 	.word	0x000d7a8c

000d5794 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5794:	b510      	push	{r4, lr}
   d5796:	4604      	mov	r4, r0
   d5798:	f7ff fff2 	bl	d5780 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d579c:	4620      	mov	r0, r4
   d579e:	2124      	movs	r1, #36	; 0x24
   d57a0:	f001 fa2c 	bl	d6bfc <_ZdlPvj>
   d57a4:	4620      	mov	r0, r4
   d57a6:	bd10      	pop	{r4, pc}

000d57a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d57a8:	2200      	movs	r2, #0
   d57aa:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d57ae:	b510      	push	{r4, lr}
        capacity_(0) {
   d57b0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d57b2:	680c      	ldr	r4, [r1, #0]
   d57b4:	6004      	str	r4, [r0, #0]
   d57b6:	684c      	ldr	r4, [r1, #4]
   d57b8:	6044      	str	r4, [r0, #4]
   d57ba:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57bc:	600a      	str	r2, [r1, #0]
   d57be:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57c0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57c2:	608a      	str	r2, [r1, #8]
}
   d57c4:	bd10      	pop	{r4, pc}

000d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d57c6:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d57c8:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d57ca:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d57cc:	6818      	ldr	r0, [r3, #0]
   d57ce:	f7ff f8ed 	bl	d49ac <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d57d2:	4620      	mov	r0, r4
   d57d4:	bd10      	pop	{r4, pc}
	...

000d57d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d57d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57dc:	b087      	sub	sp, #28
   d57de:	4680      	mov	r8, r0
   d57e0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d57e2:	4b1c      	ldr	r3, [pc, #112]	; (d5854 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d57e4:	685b      	ldr	r3, [r3, #4]
   d57e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d57ea:	4689      	mov	r9, r1
   d57ec:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d57ee:	b96b      	cbnz	r3, d580c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d57f0:	f7ff feb8 	bl	d5564 <_ZN5spark10LogManager8instanceEv>
   d57f4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d57f6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d57fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d57fc:	9305      	str	r3, [sp, #20]
   d57fe:	f7ff f8cd 	bl	d499c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d5802:	7b23      	ldrb	r3, [r4, #12]
   d5804:	b12b      	cbz	r3, d5812 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5806:	a805      	add	r0, sp, #20
   d5808:	f7ff ffdd 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d580c:	b007      	add	sp, #28
   d580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5812:	2301      	movs	r3, #1
   d5814:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5816:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d581a:	fa5f f989 	uxtb.w	r9, r9
   d581e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5822:	45aa      	cmp	sl, r5
   d5824:	d012      	beq.n	d584c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5826:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d582a:	4631      	mov	r1, r6
   d582c:	1d38      	adds	r0, r7, #4
   d582e:	f7ff fe25 	bl	d547c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5832:	4581      	cmp	r9, r0
   d5834:	d3f5      	bcc.n	d5822 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5836:	683b      	ldr	r3, [r7, #0]
   d5838:	9a03      	ldr	r2, [sp, #12]
   d583a:	9200      	str	r2, [sp, #0]
   d583c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5840:	464a      	mov	r2, r9
   d5842:	4633      	mov	r3, r6
   d5844:	4641      	mov	r1, r8
   d5846:	4638      	mov	r0, r7
   d5848:	47d8      	blx	fp
   d584a:	e7ea      	b.n	d5822 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d584c:	2300      	movs	r3, #0
   d584e:	7323      	strb	r3, [r4, #12]
   d5850:	e7d9      	b.n	d5806 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d5852:	bf00      	nop
   d5854:	e000ed00 	.word	0xe000ed00

000d5858 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d585c:	469b      	mov	fp, r3
   d585e:	4b1a      	ldr	r3, [pc, #104]	; (d58c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5860:	685b      	ldr	r3, [r3, #4]
   d5862:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5866:	4680      	mov	r8, r0
   d5868:	4689      	mov	r9, r1
   d586a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d586c:	b96b      	cbnz	r3, d588a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d586e:	f7ff fe79 	bl	d5564 <_ZN5spark10LogManager8instanceEv>
   d5872:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5874:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5878:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d587a:	9301      	str	r3, [sp, #4]
   d587c:	f7ff f88e 	bl	d499c <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5880:	7b23      	ldrb	r3, [r4, #12]
   d5882:	b12b      	cbz	r3, d5890 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d5884:	a801      	add	r0, sp, #4
   d5886:	f7ff ff9e 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d588a:	b003      	add	sp, #12
   d588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5890:	2301      	movs	r3, #1
   d5892:	7323      	strb	r3, [r4, #12]
   d5894:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5898:	b2f6      	uxtb	r6, r6
   d589a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d589e:	4555      	cmp	r5, sl
   d58a0:	d00e      	beq.n	d58c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d58a2:	f855 7b04 	ldr.w	r7, [r5], #4
   d58a6:	4659      	mov	r1, fp
   d58a8:	1d38      	adds	r0, r7, #4
   d58aa:	f7ff fde7 	bl	d547c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d58ae:	4286      	cmp	r6, r0
   d58b0:	d3f5      	bcc.n	d589e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d58b2:	683b      	ldr	r3, [r7, #0]
   d58b4:	464a      	mov	r2, r9
   d58b6:	68db      	ldr	r3, [r3, #12]
   d58b8:	4641      	mov	r1, r8
   d58ba:	4638      	mov	r0, r7
   d58bc:	4798      	blx	r3
   d58be:	e7ee      	b.n	d589e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d58c0:	2300      	movs	r3, #0
   d58c2:	7323      	strb	r3, [r4, #12]
   d58c4:	e7de      	b.n	d5884 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d58c6:	bf00      	nop
   d58c8:	e000ed00 	.word	0xe000ed00

000d58cc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d58cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d58d0:	4b16      	ldr	r3, [pc, #88]	; (d592c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d58d2:	685b      	ldr	r3, [r3, #4]
   d58d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d58d8:	4605      	mov	r5, r0
   d58da:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d58dc:	bb1b      	cbnz	r3, d5926 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d58de:	f7ff fe41 	bl	d5564 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d58e2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d58e6:	4604      	mov	r4, r0
   d58e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d58ea:	9301      	str	r3, [sp, #4]
   d58ec:	f7ff f856 	bl	d499c <os_mutex_recursive_lock>
   d58f0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d58f4:	2446      	movs	r4, #70	; 0x46
   d58f6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d58fa:	45b0      	cmp	r8, r6
   d58fc:	d109      	bne.n	d5912 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d58fe:	a801      	add	r0, sp, #4
   d5900:	f7ff ff61 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5904:	42a5      	cmp	r5, r4
   d5906:	bfb4      	ite	lt
   d5908:	2000      	movlt	r0, #0
   d590a:	2001      	movge	r0, #1
}
   d590c:	b002      	add	sp, #8
   d590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d5912:	f856 0b04 	ldr.w	r0, [r6], #4
   d5916:	4639      	mov	r1, r7
   d5918:	3004      	adds	r0, #4
   d591a:	f7ff fdaf 	bl	d547c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d591e:	4284      	cmp	r4, r0
   d5920:	bfa8      	it	ge
   d5922:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5924:	e7e9      	b.n	d58fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5926:	2000      	movs	r0, #0
   d5928:	e7f0      	b.n	d590c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d592a:	bf00      	nop
   d592c:	e000ed00 	.word	0xe000ed00

000d5930 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5930:	b570      	push	{r4, r5, r6, lr}
   d5932:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5934:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5938:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d593a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d593e:	4282      	cmp	r2, r0
   d5940:	d007      	beq.n	d5952 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d5942:	4601      	mov	r1, r0
            if (*p == value) {
   d5944:	681d      	ldr	r5, [r3, #0]
   d5946:	f851 6b04 	ldr.w	r6, [r1], #4
   d594a:	42ae      	cmp	r6, r5
   d594c:	d003      	beq.n	d5956 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d594e:	4608      	mov	r0, r1
   d5950:	e7f5      	b.n	d593e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d5952:	2000      	movs	r0, #0
}
   d5954:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5956:	1a52      	subs	r2, r2, r1
   d5958:	f001 fe20 	bl	d759c <memmove>
    --size_;
   d595c:	6863      	ldr	r3, [r4, #4]
   d595e:	3b01      	subs	r3, #1
   d5960:	6063      	str	r3, [r4, #4]
    return true;
   d5962:	2001      	movs	r0, #1
   d5964:	e7f6      	b.n	d5954 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d5966 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5966:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5968:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d596c:	4604      	mov	r4, r0
   d596e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5970:	9101      	str	r1, [sp, #4]
   d5972:	9303      	str	r3, [sp, #12]
   d5974:	f7ff f812 	bl	d499c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5978:	a901      	add	r1, sp, #4
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff ffd8 	bl	d5930 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5980:	b118      	cbz	r0, d598a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d5982:	6863      	ldr	r3, [r4, #4]
   d5984:	b90b      	cbnz	r3, d598a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d5986:	f7ff fe15 	bl	d55b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d598a:	a803      	add	r0, sp, #12
   d598c:	f7ff ff1b 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5990:	b004      	add	sp, #16
   d5992:	bd10      	pop	{r4, pc}

000d5994 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d5994:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d5996:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d599a:	2318      	movs	r3, #24
   d599c:	4604      	mov	r4, r0
   d599e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d59a2:	42ae      	cmp	r6, r5
   d59a4:	d015      	beq.n	d59d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d59a6:	f105 0110 	add.w	r1, r5, #16
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff ffc0 	bl	d5930 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d59b0:	6863      	ldr	r3, [r4, #4]
   d59b2:	b90b      	cbnz	r3, d59b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d59b4:	f7ff fdfe 	bl	d55b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d59b8:	69e0      	ldr	r0, [r4, #28]
   d59ba:	6929      	ldr	r1, [r5, #16]
   d59bc:	6803      	ldr	r3, [r0, #0]
   d59be:	68db      	ldr	r3, [r3, #12]
   d59c0:	4798      	blx	r3
        if (h.stream) {
   d59c2:	6969      	ldr	r1, [r5, #20]
   d59c4:	b119      	cbz	r1, d59ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d59c6:	6a20      	ldr	r0, [r4, #32]
   d59c8:	6803      	ldr	r3, [r0, #0]
   d59ca:	68db      	ldr	r3, [r3, #12]
   d59cc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d59ce:	3518      	adds	r5, #24
   d59d0:	e7e7      	b.n	d59a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d59d2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d59d6:	2618      	movs	r6, #24
   d59d8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d59dc:	42ae      	cmp	r6, r5
   d59de:	d004      	beq.n	d59ea <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d59e0:	4628      	mov	r0, r5
   d59e2:	f000 fe81 	bl	d66e8 <_ZN6StringD1Ev>
   d59e6:	3518      	adds	r5, #24
   d59e8:	e7f8      	b.n	d59dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d59ea:	2300      	movs	r3, #0
   d59ec:	6163      	str	r3, [r4, #20]
}
   d59ee:	bd70      	pop	{r4, r5, r6, pc}

000d59f0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d59f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59f2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d59f4:	f7ff fdde 	bl	d55b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d59f8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d59fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d59fe:	9301      	str	r3, [sp, #4]
   d5a00:	f7fe ffcc 	bl	d499c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5a04:	4620      	mov	r0, r4
   d5a06:	f7ff ffc5 	bl	d5994 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5a0a:	a801      	add	r0, sp, #4
   d5a0c:	f7ff fedb 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5a10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5a12:	b108      	cbz	r0, d5a18 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5a14:	f7fe ffba 	bl	d498c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5a18:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5a1c:	2618      	movs	r6, #24
   d5a1e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5a22:	42ae      	cmp	r6, r5
   d5a24:	d004      	beq.n	d5a30 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5a26:	4628      	mov	r0, r5
   d5a28:	f000 fe5e 	bl	d66e8 <_ZN6StringD1Ev>
   d5a2c:	3518      	adds	r5, #24
   d5a2e:	e7f8      	b.n	d5a22 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5a30:	6920      	ldr	r0, [r4, #16]
   d5a32:	f7ff f927 	bl	d4c84 <free>
   d5a36:	6820      	ldr	r0, [r4, #0]
   d5a38:	f7ff f924 	bl	d4c84 <free>
}
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	b002      	add	sp, #8
   d5a40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a44 <__tcf_2>:
    static LogManager mgr;
   d5a44:	4801      	ldr	r0, [pc, #4]	; (d5a4c <__tcf_2+0x8>)
   d5a46:	f7ff bfd3 	b.w	d59f0 <_ZN5spark10LogManagerD1Ev>
   d5a4a:	bf00      	nop
   d5a4c:	2003e5bc 	.word	0x2003e5bc

000d5a50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d5a50:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a54:	4606      	mov	r6, r0
   d5a56:	460c      	mov	r4, r1
   d5a58:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5a5a:	d927      	bls.n	d5aac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d5a5c:	4290      	cmp	r0, r2
   d5a5e:	d226      	bcs.n	d5aae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d5a60:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d5a64:	1a6c      	subs	r4, r5, r1
   d5a66:	f1a1 0714 	sub.w	r7, r1, #20
   d5a6a:	4404      	add	r4, r0
        capacity_(0) {
   d5a6c:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5a6e:	42af      	cmp	r7, r5
   d5a70:	d03d      	beq.n	d5aee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d5a72:	b1a4      	cbz	r4, d5a9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d5a74:	682b      	ldr	r3, [r5, #0]
   d5a76:	6023      	str	r3, [r4, #0]
   d5a78:	88ab      	ldrh	r3, [r5, #4]
   d5a7a:	80a3      	strh	r3, [r4, #4]
   d5a7c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d5a80:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d5a82:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5a86:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a88:	68ab      	ldr	r3, [r5, #8]
   d5a8a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a8c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a8e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a90:	68ea      	ldr	r2, [r5, #12]
   d5a92:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a94:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a96:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a98:	692a      	ldr	r2, [r5, #16]
   d5a9a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a9c:	612b      	str	r3, [r5, #16]
   d5a9e:	f105 0008 	add.w	r0, r5, #8
   d5aa2:	f7ff fe27 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5aa6:	3d14      	subs	r5, #20
   d5aa8:	3c14      	subs	r4, #20
   d5aaa:	e7e0      	b.n	d5a6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5aac:	d01f      	beq.n	d5aee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5aae:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d5ab0:	42ac      	cmp	r4, r5
   d5ab2:	d01c      	beq.n	d5aee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d5ab4:	b1a6      	cbz	r6, d5ae0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5ab6:	6823      	ldr	r3, [r4, #0]
   d5ab8:	6033      	str	r3, [r6, #0]
   d5aba:	88a3      	ldrh	r3, [r4, #4]
   d5abc:	80b3      	strh	r3, [r6, #4]
   d5abe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5ac2:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5ac4:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5ac8:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5aca:	68a3      	ldr	r3, [r4, #8]
   d5acc:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ace:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ad0:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5ad2:	68e2      	ldr	r2, [r4, #12]
   d5ad4:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad6:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ad8:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5ada:	6922      	ldr	r2, [r4, #16]
   d5adc:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ade:	6123      	str	r3, [r4, #16]
   d5ae0:	f104 0008 	add.w	r0, r4, #8
   d5ae4:	f7ff fe06 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5ae8:	3414      	adds	r4, #20
   d5aea:	3614      	adds	r6, #20
   d5aec:	e7e0      	b.n	d5ab0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5af0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5af2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5af6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5af8:	4604      	mov	r4, r0
   d5afa:	460e      	mov	r6, r1
   d5afc:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5afe:	db0d      	blt.n	d5b1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d5b00:	3501      	adds	r5, #1
        if (n > 0) {
   d5b02:	2d00      	cmp	r5, #0
   d5b04:	6800      	ldr	r0, [r0, #0]
   d5b06:	dd04      	ble.n	d5b12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5b08:	00a9      	lsls	r1, r5, #2
   d5b0a:	f7ff f8c3 	bl	d4c94 <realloc>
            if (!d) {
   d5b0e:	b918      	cbnz	r0, d5b18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d5b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5b12:	f7ff f8b7 	bl	d4c84 <free>
        T* d = nullptr;
   d5b16:	2000      	movs	r0, #0
        data_ = d;
   d5b18:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5b1a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d5b1c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5b1e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5b20:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5b24:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5b26:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5b2a:	1d08      	adds	r0, r1, #4
   d5b2c:	f001 fd36 	bl	d759c <memmove>
    new(p) T(std::move(value));
   d5b30:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5b34:	6863      	ldr	r3, [r4, #4]
   d5b36:	3301      	adds	r3, #1
   d5b38:	6063      	str	r3, [r4, #4]
    return true;
   d5b3a:	2001      	movs	r0, #1
   d5b3c:	e7e8      	b.n	d5b10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5b3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d5b40:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5b44:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5b46:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	460d      	mov	r5, r1
   d5b4c:	f7fe ff26 	bl	d499c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d5b50:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5b54:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5b58:	4283      	cmp	r3, r0
   d5b5a:	461a      	mov	r2, r3
   d5b5c:	d00b      	beq.n	d5b76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d5b5e:	6812      	ldr	r2, [r2, #0]
   d5b60:	42aa      	cmp	r2, r5
   d5b62:	f103 0304 	add.w	r3, r3, #4
   d5b66:	d1f7      	bne.n	d5b58 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5b68:	a801      	add	r0, sp, #4
   d5b6a:	f7ff fe2c 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5b6e:	2500      	movs	r5, #0
}
   d5b70:	4628      	mov	r0, r5
   d5b72:	b003      	add	sp, #12
   d5b74:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d5b76:	462a      	mov	r2, r5
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f7ff ffb9 	bl	d5af0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5b7e:	4605      	mov	r5, r0
   d5b80:	2800      	cmp	r0, #0
   d5b82:	d0f1      	beq.n	d5b68 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d5b84:	6863      	ldr	r3, [r4, #4]
   d5b86:	2b01      	cmp	r3, #1
   d5b88:	d101      	bne.n	d5b8e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5b8a:	f7ff fd07 	bl	d559c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5b8e:	a801      	add	r0, sp, #4
   d5b90:	f7ff fe19 	bl	d57c6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5b94:	e7ec      	b.n	d5b70 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5b96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5b96:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b9a:	4604      	mov	r4, r0
   d5b9c:	460d      	mov	r5, r1
   d5b9e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5ba0:	d914      	bls.n	d5bcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5ba2:	4290      	cmp	r0, r2
   d5ba4:	d213      	bcs.n	d5bce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5ba6:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5baa:	1a75      	subs	r5, r6, r1
   d5bac:	f1a1 0710 	sub.w	r7, r1, #16
   d5bb0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5bb2:	42b7      	cmp	r7, r6
   d5bb4:	d018      	beq.n	d5be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5bb6:	b11c      	cbz	r4, d5bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5bb8:	4631      	mov	r1, r6
   d5bba:	4620      	mov	r0, r4
   d5bbc:	f000 fe10 	bl	d67e0 <_ZN6StringC1EOS_>
                end->~T();
   d5bc0:	4630      	mov	r0, r6
   d5bc2:	f000 fd91 	bl	d66e8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5bc6:	3e10      	subs	r6, #16
   d5bc8:	3c10      	subs	r4, #16
   d5bca:	e7f2      	b.n	d5bb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5bcc:	d00c      	beq.n	d5be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5bce:	42b5      	cmp	r5, r6
   d5bd0:	d00a      	beq.n	d5be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5bd2:	b11c      	cbz	r4, d5bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5bd4:	4629      	mov	r1, r5
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	f000 fe02 	bl	d67e0 <_ZN6StringC1EOS_>
                p->~T();
   d5bdc:	4628      	mov	r0, r5
   d5bde:	f000 fd83 	bl	d66e8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5be2:	3510      	adds	r5, #16
   d5be4:	3410      	adds	r4, #16
   d5be6:	e7f2      	b.n	d5bce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5bea:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5bec:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5bee:	4605      	mov	r5, r0
        if (n > 0) {
   d5bf0:	dd11      	ble.n	d5c16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5bf2:	0130      	lsls	r0, r6, #4
   d5bf4:	f7ff f83e 	bl	d4c74 <malloc>
            if (!d) {
   d5bf8:	4604      	mov	r4, r0
   d5bfa:	b158      	cbz	r0, d5c14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5bfc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5c00:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5c04:	f7ff ffc7 	bl	d5b96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5c08:	6828      	ldr	r0, [r5, #0]
   d5c0a:	f7ff f83b 	bl	d4c84 <free>
        data_ = d;
   d5c0e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5c10:	60ae      	str	r6, [r5, #8]
        return true;
   d5c12:	2001      	movs	r0, #1
    }
   d5c14:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5c16:	2400      	movs	r4, #0
   d5c18:	e7f6      	b.n	d5c08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5c1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c1e:	4691      	mov	r9, r2
   d5c20:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5c22:	2300      	movs	r3, #0
   d5c24:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5c26:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5c2a:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5c2c:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5c2e:	4299      	cmp	r1, r3
        capacity_(0) {
   d5c30:	e9c0 3300 	strd	r3, r3, [r0]
   d5c34:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5c38:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5c3c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5c40:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5c42:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5c44:	dc23      	bgt.n	d5c8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5c46:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5c4a:	2314      	movs	r3, #20
   d5c4c:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d5c50:	42af      	cmp	r7, r5
   d5c52:	d03b      	beq.n	d5ccc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5c54:	4629      	mov	r1, r5
   d5c56:	a80d      	add	r0, sp, #52	; 0x34
   d5c58:	f000 fdc2 	bl	d67e0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5c5c:	a90d      	add	r1, sp, #52	; 0x34
   d5c5e:	a811      	add	r0, sp, #68	; 0x44
   d5c60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5c62:	f000 fdbd 	bl	d67e0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c66:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5c6a:	4299      	cmp	r1, r3
   d5c6c:	da1b      	bge.n	d5ca6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5c72:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5c76:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5c7a:	4631      	mov	r1, r6
   d5c7c:	f106 0010 	add.w	r0, r6, #16
   d5c80:	f7ff ff89 	bl	d5b96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5c84:	b9ee      	cbnz	r6, d5cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5c88:	3301      	adds	r3, #1
   d5c8a:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5c8c:	e011      	b.n	d5cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5c8e:	a80a      	add	r0, sp, #40	; 0x28
   d5c90:	f7ff ffab 	bl	d5bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5c94:	2800      	cmp	r0, #0
   d5c96:	d1d6      	bne.n	d5c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5c98:	a80a      	add	r0, sp, #40	; 0x28
   d5c9a:	f7ff fd3f 	bl	d571c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	b017      	add	sp, #92	; 0x5c
   d5ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ca6:	3101      	adds	r1, #1
   d5ca8:	a80a      	add	r0, sp, #40	; 0x28
   d5caa:	f7ff ff9e 	bl	d5bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5cae:	2800      	cmp	r0, #0
   d5cb0:	d1dd      	bne.n	d5c6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5cb2:	a811      	add	r0, sp, #68	; 0x44
   d5cb4:	f000 fd18 	bl	d66e8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5cb8:	a80d      	add	r0, sp, #52	; 0x34
   d5cba:	f000 fd15 	bl	d66e8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5cbe:	3514      	adds	r5, #20
   d5cc0:	e7c6      	b.n	d5c50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5cc2:	a911      	add	r1, sp, #68	; 0x44
   d5cc4:	4630      	mov	r0, r6
   d5cc6:	f000 fd8b 	bl	d67e0 <_ZN6StringC1EOS_>
   d5cca:	e7dc      	b.n	d5c86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5ccc:	2600      	movs	r6, #0
   d5cce:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5cd2:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5cd4:	4637      	mov	r7, r6
   d5cd6:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5cda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5cde:	429e      	cmp	r6, r3
   d5ce0:	f280 8097 	bge.w	d5e12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5ce4:	0133      	lsls	r3, r6, #4
   d5ce6:	58d3      	ldr	r3, [r2, r3]
   d5ce8:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5cea:	b90b      	cbnz	r3, d5cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5cec:	3601      	adds	r6, #1
   d5cee:	e7f4      	b.n	d5cda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5cf0:	fb0a f306 	mul.w	r3, sl, r6
   d5cf4:	9709      	str	r7, [sp, #36]	; 0x24
   d5cf6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5cf8:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5cfa:	a909      	add	r1, sp, #36	; 0x24
   d5cfc:	a808      	add	r0, sp, #32
   d5cfe:	f7ff fb00 	bl	d5302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5d02:	4683      	mov	fp, r0
   d5d04:	2800      	cmp	r0, #0
   d5d06:	d0f1      	beq.n	d5cec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d08:	4601      	mov	r1, r0
   d5d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5d0c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d10:	f10d 031f 	add.w	r3, sp, #31
   d5d14:	4628      	mov	r0, r5
   d5d16:	f7ff fb73 	bl	d5400 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5d1a:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d1e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5d20:	f1b8 0f00 	cmp.w	r8, #0
   d5d24:	d166      	bne.n	d5df4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5d26:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5d2a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5d2e:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d36:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5d3a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5d3e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d42:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5d46:	4293      	cmp	r3, r2
   d5d48:	db1a      	blt.n	d5d80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5d4a:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5d4e:	f1bb 0f00 	cmp.w	fp, #0
   d5d52:	dd4a      	ble.n	d5dea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5d54:	fb0a f00b 	mul.w	r0, sl, fp
   d5d58:	f7fe ff8c 	bl	d4c74 <malloc>
            if (!d) {
   d5d5c:	9004      	str	r0, [sp, #16]
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	d045      	beq.n	d5dee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5d62:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5d66:	fb0a 1202 	mla	r2, sl, r2, r1
   d5d6a:	f7ff fe71 	bl	d5a50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5d6e:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5d70:	6828      	ldr	r0, [r5, #0]
   d5d72:	9304      	str	r3, [sp, #16]
   d5d74:	f7fe ff86 	bl	d4c84 <free>
        data_ = d;
   d5d78:	9b04      	ldr	r3, [sp, #16]
   d5d7a:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5d7c:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5d80:	9b01      	ldr	r3, [sp, #4]
   d5d82:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5d86:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5d88:	fb0a f303 	mul.w	r3, sl, r3
   d5d8c:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5d90:	f101 0014 	add.w	r0, r1, #20
   d5d94:	fb0a b202 	mla	r2, sl, r2, fp
   d5d98:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5d9a:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5d9c:	f7ff fe58 	bl	d5a50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5da0:	9904      	ldr	r1, [sp, #16]
   d5da2:	b1a9      	cbz	r1, d5dd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5da4:	9b05      	ldr	r3, [sp, #20]
   d5da6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5da8:	f84b 2003 	str.w	r2, [fp, r3]
   d5dac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5db0:	808b      	strh	r3, [r1, #4]
   d5db2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5db6:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5db8:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5dbc:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5dbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5dc0:	608b      	str	r3, [r1, #8]
   d5dc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5dc4:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5dc6:	60cb      	str	r3, [r1, #12]
   d5dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5dca:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5dcc:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dce:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5dd0:	686b      	ldr	r3, [r5, #4]
   d5dd2:	3301      	adds	r3, #1
   d5dd4:	606b      	str	r3, [r5, #4]
   d5dd6:	a813      	add	r0, sp, #76	; 0x4c
   d5dd8:	f7ff fc8c 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ddc:	f1b8 0f00 	cmp.w	r8, #0
   d5de0:	d008      	beq.n	d5df4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5de2:	a80d      	add	r0, sp, #52	; 0x34
   d5de4:	f7ff fc86 	bl	d56f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5de8:	e756      	b.n	d5c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5dea:	4643      	mov	r3, r8
   d5dec:	e7c0      	b.n	d5d70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5dee:	f04f 0801 	mov.w	r8, #1
   d5df2:	e7f0      	b.n	d5dd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5df4:	9b01      	ldr	r3, [sp, #4]
   d5df6:	682d      	ldr	r5, [r5, #0]
   d5df8:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5dfc:	9b08      	ldr	r3, [sp, #32]
   d5dfe:	781b      	ldrb	r3, [r3, #0]
   d5e00:	b92b      	cbnz	r3, d5e0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5e02:	f8d9 3000 	ldr.w	r3, [r9]
   d5e06:	9a02      	ldr	r2, [sp, #8]
   d5e08:	4413      	add	r3, r2
   d5e0a:	7c1b      	ldrb	r3, [r3, #16]
   d5e0c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5e0e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5e10:	e773      	b.n	d5cfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e12:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e14:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e16:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5e18:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e1a:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e1c:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5e20:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e22:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5e24:	60a2      	str	r2, [r4, #8]
   d5e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5e28:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e2a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5e2c:	60e2      	str	r2, [r4, #12]
   d5e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5e30:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e32:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5e34:	6122      	str	r2, [r4, #16]
   d5e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5e38:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5e3a:	9b03      	ldr	r3, [sp, #12]
   d5e3c:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5e3e:	6162      	str	r2, [r4, #20]
   d5e40:	7623      	strb	r3, [r4, #24]
   d5e42:	e7ce      	b.n	d5de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d5e44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5e46:	4605      	mov	r5, r0
   d5e48:	4b09      	ldr	r3, [pc, #36]	; (d5e70 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5e4a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5e4e:	4604      	mov	r4, r0
   d5e50:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5e52:	a801      	add	r0, sp, #4
   d5e54:	4611      	mov	r1, r2
   d5e56:	f7fe fa3a 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5e5a:	aa01      	add	r2, sp, #4
   d5e5c:	4631      	mov	r1, r6
   d5e5e:	4628      	mov	r0, r5
   d5e60:	f7ff fedb 	bl	d5c1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5e64:	a801      	add	r0, sp, #4
   d5e66:	f7fe f9f1 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5e6a:	4620      	mov	r0, r4
   d5e6c:	b004      	add	sp, #16
   d5e6e:	bd70      	pop	{r4, r5, r6, pc}
   d5e70:	000d7908 	.word	0x000d7908

000d5e74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e76:	460f      	mov	r7, r1
   d5e78:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e7a:	4926      	ldr	r1, [pc, #152]	; (d5f14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5e7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e7e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5e80:	4616      	mov	r6, r2
   d5e82:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e84:	f001 fbe7 	bl	d7656 <strcmp>
   d5e88:	bb00      	cbnz	r0, d5ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5e8a:	b1e4      	cbz	r4, d5ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5e8c:	4629      	mov	r1, r5
   d5e8e:	4668      	mov	r0, sp
   d5e90:	f7ff fc8a 	bl	d57a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5e94:	4920      	ldr	r1, [pc, #128]	; (d5f18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5e96:	2024      	movs	r0, #36	; 0x24
   d5e98:	f000 feb2 	bl	d6c00 <_ZnwjRKSt9nothrow_t>
   d5e9c:	4605      	mov	r5, r0
   d5e9e:	b170      	cbz	r0, d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5ea0:	4669      	mov	r1, sp
   d5ea2:	a803      	add	r0, sp, #12
   d5ea4:	f7fe fa13 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ea8:	aa03      	add	r2, sp, #12
   d5eaa:	4631      	mov	r1, r6
   d5eac:	4628      	mov	r0, r5
   d5eae:	f7ff ffc9 	bl	d5e44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5eb2:	a803      	add	r0, sp, #12
   d5eb4:	f7fe f9ca 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5eb8:	4b18      	ldr	r3, [pc, #96]	; (d5f1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5eba:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5ebc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5ebe:	4668      	mov	r0, sp
   d5ec0:	f7fe f9c4 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5ec4:	462c      	mov	r4, r5
}
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	b007      	add	sp, #28
   d5eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5ecc:	4914      	ldr	r1, [pc, #80]	; (d5f20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5ece:	4638      	mov	r0, r7
   d5ed0:	f001 fbc1 	bl	d7656 <strcmp>
   d5ed4:	b9e0      	cbnz	r0, d5f10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5ed6:	2c00      	cmp	r4, #0
   d5ed8:	d0f5      	beq.n	d5ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5eda:	4629      	mov	r1, r5
   d5edc:	4668      	mov	r0, sp
   d5ede:	f7ff fc63 	bl	d57a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5ee2:	490d      	ldr	r1, [pc, #52]	; (d5f18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5ee4:	2024      	movs	r0, #36	; 0x24
   d5ee6:	f000 fe8b 	bl	d6c00 <_ZnwjRKSt9nothrow_t>
   d5eea:	4605      	mov	r5, r0
   d5eec:	2800      	cmp	r0, #0
   d5eee:	d0e6      	beq.n	d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5ef0:	4669      	mov	r1, sp
   d5ef2:	a803      	add	r0, sp, #12
   d5ef4:	f7fe f9eb 	bl	d42ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ef8:	aa03      	add	r2, sp, #12
   d5efa:	4631      	mov	r1, r6
   d5efc:	4628      	mov	r0, r5
   d5efe:	f7ff ffa1 	bl	d5e44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5f02:	a803      	add	r0, sp, #12
   d5f04:	f7fe f9a2 	bl	d424c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5f08:	4b06      	ldr	r3, [pc, #24]	; (d5f24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5f0a:	602b      	str	r3, [r5, #0]
   d5f0c:	622c      	str	r4, [r5, #32]
}
   d5f0e:	e7d6      	b.n	d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5f10:	2400      	movs	r4, #0
   d5f12:	e7d8      	b.n	d5ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5f14:	000d79f4 	.word	0x000d79f4
   d5f18:	000d7b94 	.word	0x000d7b94
   d5f1c:	000d7a8c 	.word	0x000d7a8c
   d5f20:	000d79f8 	.word	0x000d79f8
   d5f24:	000d7a74 	.word	0x000d7a74

000d5f28 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5f28:	4b01      	ldr	r3, [pc, #4]	; (d5f30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f2a:	4a02      	ldr	r2, [pc, #8]	; (d5f34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f2c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5f2e:	4770      	bx	lr
   d5f30:	2003e5b8 	.word	0x2003e5b8
   d5f34:	000d7a09 	.word	0x000d7a09

000d5f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f3c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5f3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f42:	4604      	mov	r4, r0
   d5f44:	460e      	mov	r6, r1
   d5f46:	4617      	mov	r7, r2
   d5f48:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5f4a:	f000 fd95 	bl	d6a78 <_Z16_fetch_usbserialv>
   d5f4e:	4581      	cmp	r9, r0
   d5f50:	d04c      	beq.n	d5fec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5f52:	792b      	ldrb	r3, [r5, #4]
   d5f54:	0719      	lsls	r1, r3, #28
   d5f56:	d504      	bpl.n	d5f62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5f58:	696a      	ldr	r2, [r5, #20]
   d5f5a:	4954      	ldr	r1, [pc, #336]	; (d60ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	f7ff fa40 	bl	d53e2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5f62:	f1b8 0f00 	cmp.w	r8, #0
   d5f66:	d00d      	beq.n	d5f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5f68:	215b      	movs	r1, #91	; 0x5b
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7ff fa2d 	bl	d53ca <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5f70:	4641      	mov	r1, r8
   d5f72:	4620      	mov	r0, r4
   d5f74:	f7ff fa1a 	bl	d53ac <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5f78:	6823      	ldr	r3, [r4, #0]
   d5f7a:	494d      	ldr	r1, [pc, #308]	; (d60b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5f7c:	68db      	ldr	r3, [r3, #12]
   d5f7e:	2202      	movs	r2, #2
   d5f80:	4620      	mov	r0, r4
   d5f82:	4798      	blx	r3
    if (attr.has_file) {
   d5f84:	792b      	ldrb	r3, [r5, #4]
   d5f86:	07da      	lsls	r2, r3, #31
   d5f88:	d523      	bpl.n	d5fd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5f8a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5f8e:	212f      	movs	r1, #47	; 0x2f
   d5f90:	4640      	mov	r0, r8
   d5f92:	f001 fb9f 	bl	d76d4 <strrchr>
    if (s1) {
   d5f96:	b108      	cbz	r0, d5f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5f98:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5f9c:	4641      	mov	r1, r8
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f7ff fa04 	bl	d53ac <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5fa4:	792b      	ldrb	r3, [r5, #4]
   d5fa6:	079b      	lsls	r3, r3, #30
   d5fa8:	d508      	bpl.n	d5fbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5faa:	213a      	movs	r1, #58	; 0x3a
   d5fac:	4620      	mov	r0, r4
   d5fae:	f7ff fa0c 	bl	d53ca <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5fb2:	68ea      	ldr	r2, [r5, #12]
   d5fb4:	493f      	ldr	r1, [pc, #252]	; (d60b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	f7ff fa13 	bl	d53e2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5fbc:	792a      	ldrb	r2, [r5, #4]
   d5fbe:	6823      	ldr	r3, [r4, #0]
   d5fc0:	f012 0f04 	tst.w	r2, #4
   d5fc4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5fc6:	bf14      	ite	ne
   d5fc8:	493b      	ldrne	r1, [pc, #236]	; (d60b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5fca:	493c      	ldreq	r1, [pc, #240]	; (d60bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5fcc:	2202      	movs	r2, #2
            write(": ", 2);
   d5fce:	4620      	mov	r0, r4
   d5fd0:	4798      	blx	r3
    if (attr.has_function) {
   d5fd2:	792b      	ldrb	r3, [r5, #4]
   d5fd4:	0758      	lsls	r0, r3, #29
   d5fd6:	d51d      	bpl.n	d6014 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5fd8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5fda:	460b      	mov	r3, r1
   d5fdc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5fde:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5fe2:	b160      	cbz	r0, d5ffe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5fe4:	2820      	cmp	r0, #32
   d5fe6:	d108      	bne.n	d5ffa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5fe8:	4619      	mov	r1, r3
   d5fea:	e7f7      	b.n	d5fdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5fec:	4834      	ldr	r0, [pc, #208]	; (d60c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5fee:	f000 f966 	bl	d62be <_ZN5spark12NetworkClass9listeningEv>
   d5ff2:	2800      	cmp	r0, #0
   d5ff4:	d0ad      	beq.n	d5f52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5ffa:	2828      	cmp	r0, #40	; 0x28
   d5ffc:	d1ee      	bne.n	d5fdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5ffe:	6823      	ldr	r3, [r4, #0]
   d6000:	1a52      	subs	r2, r2, r1
   d6002:	68db      	ldr	r3, [r3, #12]
   d6004:	4620      	mov	r0, r4
   d6006:	4798      	blx	r3
        write("(): ", 4);
   d6008:	6823      	ldr	r3, [r4, #0]
   d600a:	492e      	ldr	r1, [pc, #184]	; (d60c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d600c:	68db      	ldr	r3, [r3, #12]
   d600e:	2204      	movs	r2, #4
   d6010:	4620      	mov	r0, r4
   d6012:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d6014:	2100      	movs	r1, #0
   d6016:	4638      	mov	r0, r7
   d6018:	f7fe fd90 	bl	d4b3c <log_level_name>
   d601c:	4601      	mov	r1, r0
    write(s);
   d601e:	4620      	mov	r0, r4
   d6020:	f7ff f9c4 	bl	d53ac <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6024:	6823      	ldr	r3, [r4, #0]
   d6026:	4925      	ldr	r1, [pc, #148]	; (d60bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6028:	68db      	ldr	r3, [r3, #12]
   d602a:	2202      	movs	r2, #2
   d602c:	4620      	mov	r0, r4
   d602e:	4798      	blx	r3
    if (msg) {
   d6030:	b11e      	cbz	r6, d603a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d6032:	4631      	mov	r1, r6
   d6034:	4620      	mov	r0, r4
   d6036:	f7ff f9b9 	bl	d53ac <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d603a:	792b      	ldrb	r3, [r5, #4]
   d603c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6040:	d02c      	beq.n	d609c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d6042:	6823      	ldr	r3, [r4, #0]
   d6044:	4920      	ldr	r1, [pc, #128]	; (d60c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6046:	68db      	ldr	r3, [r3, #12]
   d6048:	2202      	movs	r2, #2
   d604a:	4620      	mov	r0, r4
   d604c:	4798      	blx	r3
        if (attr.has_code) {
   d604e:	792b      	ldrb	r3, [r5, #4]
   d6050:	06d9      	lsls	r1, r3, #27
   d6052:	d50a      	bpl.n	d606a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d6054:	6823      	ldr	r3, [r4, #0]
   d6056:	491d      	ldr	r1, [pc, #116]	; (d60cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6058:	68db      	ldr	r3, [r3, #12]
   d605a:	2207      	movs	r2, #7
   d605c:	4620      	mov	r0, r4
   d605e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d6060:	69aa      	ldr	r2, [r5, #24]
   d6062:	491b      	ldr	r1, [pc, #108]	; (d60d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6064:	4620      	mov	r0, r4
   d6066:	f7ff f9bc 	bl	d53e2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d606a:	792b      	ldrb	r3, [r5, #4]
   d606c:	069a      	lsls	r2, r3, #26
   d606e:	d511      	bpl.n	d6094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d6070:	06db      	lsls	r3, r3, #27
   d6072:	d505      	bpl.n	d6080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d6074:	6823      	ldr	r3, [r4, #0]
   d6076:	4910      	ldr	r1, [pc, #64]	; (d60b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d6078:	68db      	ldr	r3, [r3, #12]
   d607a:	2202      	movs	r2, #2
   d607c:	4620      	mov	r0, r4
   d607e:	4798      	blx	r3
            write("details = ", 10);
   d6080:	6823      	ldr	r3, [r4, #0]
   d6082:	4914      	ldr	r1, [pc, #80]	; (d60d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6084:	68db      	ldr	r3, [r3, #12]
   d6086:	4620      	mov	r0, r4
   d6088:	220a      	movs	r2, #10
   d608a:	4798      	blx	r3
            write(attr.details);
   d608c:	69e9      	ldr	r1, [r5, #28]
   d608e:	4620      	mov	r0, r4
   d6090:	f7ff f98c 	bl	d53ac <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d6094:	215d      	movs	r1, #93	; 0x5d
   d6096:	4620      	mov	r0, r4
   d6098:	f7ff f997 	bl	d53ca <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d609c:	6823      	ldr	r3, [r4, #0]
   d609e:	490e      	ldr	r1, [pc, #56]	; (d60d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d60a0:	68db      	ldr	r3, [r3, #12]
   d60a2:	4620      	mov	r0, r4
   d60a4:	2202      	movs	r2, #2
}
   d60a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d60aa:	4718      	bx	r3
   d60ac:	000d7a0d 	.word	0x000d7a0d
   d60b0:	000d7a14 	.word	0x000d7a14
   d60b4:	000d79d4 	.word	0x000d79d4
   d60b8:	000d7a17 	.word	0x000d7a17
   d60bc:	000d7a1c 	.word	0x000d7a1c
   d60c0:	2003e5e4 	.word	0x2003e5e4
   d60c4:	000d7a1a 	.word	0x000d7a1a
   d60c8:	000d7a1f 	.word	0x000d7a1f
   d60cc:	000d7a22 	.word	0x000d7a22
   d60d0:	000d7a2a 	.word	0x000d7a2a
   d60d4:	000d7a2d 	.word	0x000d7a2d
   d60d8:	000d7a38 	.word	0x000d7a38

000d60dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d60e0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d60e2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d60e8:	4605      	mov	r5, r0
   d60ea:	460f      	mov	r7, r1
   d60ec:	4690      	mov	r8, r2
   d60ee:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d60f0:	f000 fcc2 	bl	d6a78 <_Z16_fetch_usbserialv>
   d60f4:	4581      	cmp	r9, r0
   d60f6:	d105      	bne.n	d6104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d60f8:	4849      	ldr	r0, [pc, #292]	; (d6220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d60fa:	f000 f8e0 	bl	d62be <_ZN5spark12NetworkClass9listeningEv>
   d60fe:	2800      	cmp	r0, #0
   d6100:	f040 808a 	bne.w	d6218 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d6104:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d6106:	4a47      	ldr	r2, [pc, #284]	; (d6224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6108:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d610a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d610e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d6110:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d6112:	f88d 9008 	strb.w	r9, [sp, #8]
   d6116:	f7ff f83c 	bl	d5192 <_ZN5spark10JSONWriter11beginObjectEv>
   d611a:	4649      	mov	r1, r9
   d611c:	4640      	mov	r0, r8
   d611e:	f7fe fd0d 	bl	d4b3c <log_level_name>
    json.name("l", 1).value(s);
   d6122:	4941      	ldr	r1, [pc, #260]	; (d6228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6124:	4680      	mov	r8, r0
   d6126:	2201      	movs	r2, #1
   d6128:	a801      	add	r0, sp, #4
   d612a:	f7ff f8bb 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d612e:	4641      	mov	r1, r8
   d6130:	f7ff f92e 	bl	d5390 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d6134:	b13f      	cbz	r7, d6146 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6136:	493d      	ldr	r1, [pc, #244]	; (d622c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6138:	2201      	movs	r2, #1
   d613a:	a801      	add	r0, sp, #4
   d613c:	f7ff f8b2 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6140:	4639      	mov	r1, r7
   d6142:	f7ff f925 	bl	d5390 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d6146:	b13e      	cbz	r6, d6158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6148:	4939      	ldr	r1, [pc, #228]	; (d6230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d614a:	2201      	movs	r2, #1
   d614c:	a801      	add	r0, sp, #4
   d614e:	f7ff f8a9 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6152:	4631      	mov	r1, r6
   d6154:	f7ff f91c 	bl	d5390 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d6158:	7923      	ldrb	r3, [r4, #4]
   d615a:	07df      	lsls	r7, r3, #31
   d615c:	d50e      	bpl.n	d617c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d615e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d6160:	212f      	movs	r1, #47	; 0x2f
   d6162:	4630      	mov	r0, r6
   d6164:	f001 fab6 	bl	d76d4 <strrchr>
    if (s1) {
   d6168:	b100      	cbz	r0, d616c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d616a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d616c:	4931      	ldr	r1, [pc, #196]	; (d6234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d616e:	2201      	movs	r2, #1
   d6170:	a801      	add	r0, sp, #4
   d6172:	f7ff f897 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6176:	4631      	mov	r1, r6
   d6178:	f7ff f90a 	bl	d5390 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d617c:	7923      	ldrb	r3, [r4, #4]
   d617e:	079e      	lsls	r6, r3, #30
   d6180:	d507      	bpl.n	d6192 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6182:	492d      	ldr	r1, [pc, #180]	; (d6238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d6184:	2202      	movs	r2, #2
   d6186:	a801      	add	r0, sp, #4
   d6188:	f7ff f88c 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d618c:	68e1      	ldr	r1, [r4, #12]
   d618e:	f7ff f80d 	bl	d51ac <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d6192:	7923      	ldrb	r3, [r4, #4]
   d6194:	0758      	lsls	r0, r3, #29
   d6196:	d514      	bpl.n	d61c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6198:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d619a:	4633      	mov	r3, r6
   d619c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d619e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61a2:	b12a      	cbz	r2, d61b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d61a4:	2a20      	cmp	r2, #32
   d61a6:	d101      	bne.n	d61ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d61a8:	461e      	mov	r6, r3
   d61aa:	e7f7      	b.n	d619c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d61ac:	2a28      	cmp	r2, #40	; 0x28
   d61ae:	d1f5      	bne.n	d619c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d61b0:	4922      	ldr	r1, [pc, #136]	; (d623c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d61b2:	2202      	movs	r2, #2
   d61b4:	a801      	add	r0, sp, #4
   d61b6:	f7ff f875 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d61ba:	1bba      	subs	r2, r7, r6
   d61bc:	4631      	mov	r1, r6
   d61be:	f7ff f881 	bl	d52c4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d61c2:	7923      	ldrb	r3, [r4, #4]
   d61c4:	0719      	lsls	r1, r3, #28
   d61c6:	d507      	bpl.n	d61d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d61c8:	491d      	ldr	r1, [pc, #116]	; (d6240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d61ca:	2201      	movs	r2, #1
   d61cc:	a801      	add	r0, sp, #4
   d61ce:	f7ff f869 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d61d2:	6961      	ldr	r1, [r4, #20]
   d61d4:	f7fe fffc 	bl	d51d0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d61d8:	7923      	ldrb	r3, [r4, #4]
   d61da:	06da      	lsls	r2, r3, #27
   d61dc:	d508      	bpl.n	d61f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d61de:	2204      	movs	r2, #4
   d61e0:	4918      	ldr	r1, [pc, #96]	; (d6244 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d61e2:	eb0d 0002 	add.w	r0, sp, r2
   d61e6:	f7ff f85d 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d61ea:	69a1      	ldr	r1, [r4, #24]
   d61ec:	f7fe ffde 	bl	d51ac <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d61f0:	7923      	ldrb	r3, [r4, #4]
   d61f2:	069b      	lsls	r3, r3, #26
   d61f4:	d507      	bpl.n	d6206 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d61f6:	4914      	ldr	r1, [pc, #80]	; (d6248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d61f8:	2206      	movs	r2, #6
   d61fa:	a801      	add	r0, sp, #4
   d61fc:	f7ff f852 	bl	d52a4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6200:	69e1      	ldr	r1, [r4, #28]
   d6202:	f7ff f8c5 	bl	d5390 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d6206:	a801      	add	r0, sp, #4
   d6208:	f7fe ffad 	bl	d5166 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d620c:	6a28      	ldr	r0, [r5, #32]
   d620e:	490f      	ldr	r1, [pc, #60]	; (d624c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6210:	6803      	ldr	r3, [r0, #0]
   d6212:	2202      	movs	r2, #2
   d6214:	68db      	ldr	r3, [r3, #12]
   d6216:	4798      	blx	r3
}
   d6218:	b005      	add	sp, #20
   d621a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d621e:	bf00      	nop
   d6220:	2003e5e4 	.word	0x2003e5e4
   d6224:	000d7a5c 	.word	0x000d7a5c
   d6228:	000d79ea 	.word	0x000d79ea
   d622c:	000d7a3b 	.word	0x000d7a3b
   d6230:	000d7a3d 	.word	0x000d7a3d
   d6234:	000d7b0e 	.word	0x000d7b0e
   d6238:	000d7a3f 	.word	0x000d7a3f
   d623c:	000d7a42 	.word	0x000d7a42
   d6240:	000d7a45 	.word	0x000d7a45
   d6244:	000d7a47 	.word	0x000d7a47
   d6248:	000d7a4c 	.word	0x000d7a4c
   d624c:	000d7a38 	.word	0x000d7a38

000d6250 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6250:	2300      	movs	r3, #0
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	461a      	mov	r2, r3
   d6256:	f7fe bcad 	b.w	d4bb4 <network_connect>

000d625a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d625a:	6840      	ldr	r0, [r0, #4]
   d625c:	2200      	movs	r2, #0
   d625e:	2102      	movs	r1, #2
   d6260:	f7fe bcb8 	b.w	d4bd4 <network_disconnect>

000d6264 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6264:	2200      	movs	r2, #0
   d6266:	6840      	ldr	r0, [r0, #4]
   d6268:	4611      	mov	r1, r2
   d626a:	f7fe bcab 	b.w	d4bc4 <network_connecting>

000d626e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d626e:	2200      	movs	r2, #0
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	4611      	mov	r1, r2
   d6274:	f7fe bcb6 	b.w	d4be4 <network_ready>

000d6278 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6278:	2300      	movs	r3, #0
   d627a:	6840      	ldr	r0, [r0, #4]
   d627c:	461a      	mov	r2, r3
   d627e:	4619      	mov	r1, r3
   d6280:	f7fe bcb8 	b.w	d4bf4 <network_on>

000d6284 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6284:	2300      	movs	r3, #0
   d6286:	6840      	ldr	r0, [r0, #4]
   d6288:	461a      	mov	r2, r3
   d628a:	4619      	mov	r1, r3
   d628c:	f7fe bcba 	b.w	d4c04 <network_off>

000d6290 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6290:	6840      	ldr	r0, [r0, #4]
   d6292:	2100      	movs	r1, #0
   d6294:	f7fe bcde 	b.w	d4c54 <network_is_on>

000d6298 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6298:	6840      	ldr	r0, [r0, #4]
   d629a:	2100      	movs	r1, #0
   d629c:	f7fe bce2 	b.w	d4c64 <network_is_off>

000d62a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d62a0:	6840      	ldr	r0, [r0, #4]
   d62a2:	2200      	movs	r2, #0
   d62a4:	f081 0101 	eor.w	r1, r1, #1
   d62a8:	f7fe bcb4 	b.w	d4c14 <network_listen>

000d62ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d62ac:	6840      	ldr	r0, [r0, #4]
   d62ae:	2200      	movs	r2, #0
   d62b0:	f7fe bcc0 	b.w	d4c34 <network_set_listen_timeout>

000d62b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d62b4:	2200      	movs	r2, #0
   d62b6:	6840      	ldr	r0, [r0, #4]
   d62b8:	4611      	mov	r1, r2
   d62ba:	f7fe bcc3 	b.w	d4c44 <network_get_listen_timeout>

000d62be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d62be:	2200      	movs	r2, #0
   d62c0:	6840      	ldr	r0, [r0, #4]
   d62c2:	4611      	mov	r1, r2
   d62c4:	f7fe bcae 	b.w	d4c24 <network_listening>

000d62c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d62c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62cc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d62ce:	b095      	sub	sp, #84	; 0x54
   d62d0:	4616      	mov	r6, r2
   d62d2:	460d      	mov	r5, r1
   d62d4:	4607      	mov	r7, r0
    IPAddress addr;
   d62d6:	f7fe fde7 	bl	d4ea8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d62da:	4621      	mov	r1, r4
   d62dc:	2218      	movs	r2, #24
   d62de:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d62e0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d62e2:	f001 f975 	bl	d75d0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d62e6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d62e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d62ec:	4621      	mov	r1, r4
   d62ee:	466b      	mov	r3, sp
   d62f0:	aa0c      	add	r2, sp, #48	; 0x30
   d62f2:	4630      	mov	r0, r6
   d62f4:	f7fe fb8a 	bl	d4a0c <netdb_getaddrinfo>
    if (!r) {
   d62f8:	4604      	mov	r4, r0
   d62fa:	2800      	cmp	r0, #0
   d62fc:	d146      	bne.n	d638c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62fe:	4602      	mov	r2, r0
   d6300:	2101      	movs	r1, #1
   d6302:	6868      	ldr	r0, [r5, #4]
   d6304:	f7fe fc6e 	bl	d4be4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6308:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d630a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d630c:	4622      	mov	r2, r4
   d630e:	6868      	ldr	r0, [r5, #4]
   d6310:	f7fe fc68 	bl	d4be4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6314:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6316:	4681      	mov	r9, r0
        bool ok = false;
   d6318:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d631a:	2e00      	cmp	r6, #0
   d631c:	d036      	beq.n	d638c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d631e:	2900      	cmp	r1, #0
   d6320:	d134      	bne.n	d638c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6322:	6873      	ldr	r3, [r6, #4]
   d6324:	2b02      	cmp	r3, #2
   d6326:	d003      	beq.n	d6330 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6328:	2b0a      	cmp	r3, #10
   d632a:	d00b      	beq.n	d6344 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d632c:	69f6      	ldr	r6, [r6, #28]
   d632e:	e7f4      	b.n	d631a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6330:	f1b8 0f00 	cmp.w	r8, #0
   d6334:	d004      	beq.n	d6340 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6336:	6971      	ldr	r1, [r6, #20]
   d6338:	4638      	mov	r0, r7
   d633a:	3104      	adds	r1, #4
   d633c:	f7fe fde1 	bl	d4f02 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6340:	4641      	mov	r1, r8
   d6342:	e7f3      	b.n	d632c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6344:	f1b9 0f00 	cmp.w	r9, #0
   d6348:	d101      	bne.n	d634e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d634a:	4649      	mov	r1, r9
   d634c:	e7ee      	b.n	d632c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d634e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6350:	2210      	movs	r2, #16
   d6352:	a801      	add	r0, sp, #4
   d6354:	f001 f93c 	bl	d75d0 <memset>
                    a.v = 6;
   d6358:	2306      	movs	r3, #6
   d635a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d635e:	ad01      	add	r5, sp, #4
   d6360:	f104 0308 	add.w	r3, r4, #8
   d6364:	3418      	adds	r4, #24
   d6366:	6818      	ldr	r0, [r3, #0]
   d6368:	6859      	ldr	r1, [r3, #4]
   d636a:	462a      	mov	r2, r5
   d636c:	c203      	stmia	r2!, {r0, r1}
   d636e:	3308      	adds	r3, #8
   d6370:	42a3      	cmp	r3, r4
   d6372:	4615      	mov	r5, r2
   d6374:	d1f7      	bne.n	d6366 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6376:	a901      	add	r1, sp, #4
   d6378:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d637a:	ad07      	add	r5, sp, #28
   d637c:	f7fe fda2 	bl	d4ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6382:	1d3c      	adds	r4, r7, #4
   d6384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6386:	682b      	ldr	r3, [r5, #0]
   d6388:	7023      	strb	r3, [r4, #0]
   d638a:	e7de      	b.n	d634a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d638c:	9800      	ldr	r0, [sp, #0]
   d638e:	f7fe fb35 	bl	d49fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6392:	4638      	mov	r0, r7
   d6394:	b015      	add	sp, #84	; 0x54
   d6396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d639c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d639c:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d639e:	4a03      	ldr	r2, [pc, #12]	; (d63ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d63a0:	601a      	str	r2, [r3, #0]
   d63a2:	2200      	movs	r2, #0
   d63a4:	605a      	str	r2, [r3, #4]

} // spark
   d63a6:	4770      	bx	lr
   d63a8:	2003e5e4 	.word	0x2003e5e4
   d63ac:	000d7ad4 	.word	0x000d7ad4

000d63b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d63b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63b2:	4606      	mov	r6, r0
   d63b4:	460d      	mov	r5, r1
  size_t n = 0;
   d63b6:	188f      	adds	r7, r1, r2
   d63b8:	2400      	movs	r4, #0
  while (size--) {
   d63ba:	42bd      	cmp	r5, r7
   d63bc:	d00c      	beq.n	d63d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d63be:	6833      	ldr	r3, [r6, #0]
   d63c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63c4:	689b      	ldr	r3, [r3, #8]
   d63c6:	4630      	mov	r0, r6
   d63c8:	4798      	blx	r3
     if (chunk>=0)
   d63ca:	1e03      	subs	r3, r0, #0
   d63cc:	db01      	blt.n	d63d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d63ce:	441c      	add	r4, r3
  while (size--) {
   d63d0:	e7f3      	b.n	d63ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d63d2:	2c00      	cmp	r4, #0
   d63d4:	bf08      	it	eq
   d63d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d63d8:	4620      	mov	r0, r4
   d63da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63dc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d63dc:	b513      	push	{r0, r1, r4, lr}
   d63de:	4604      	mov	r4, r0
    }
   d63e0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d63e2:	b159      	cbz	r1, d63fc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d63e4:	9101      	str	r1, [sp, #4]
   d63e6:	f001 f948 	bl	d767a <strlen>
   d63ea:	6823      	ldr	r3, [r4, #0]
   d63ec:	9901      	ldr	r1, [sp, #4]
   d63ee:	68db      	ldr	r3, [r3, #12]
   d63f0:	4602      	mov	r2, r0
   d63f2:	4620      	mov	r0, r4
    }
   d63f4:	b002      	add	sp, #8
   d63f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d63fa:	4718      	bx	r3
    }
   d63fc:	b002      	add	sp, #8
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6400:	b508      	push	{r3, lr}
  return write(str);
   d6402:	f7ff ffeb 	bl	d63dc <_ZN5Print5writeEPKc>
}
   d6406:	bd08      	pop	{r3, pc}

000d6408 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6408:	6803      	ldr	r3, [r0, #0]
   d640a:	689b      	ldr	r3, [r3, #8]
   d640c:	4718      	bx	r3

000d640e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d640e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6410:	210d      	movs	r1, #13
{
   d6412:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6414:	f7ff fff8 	bl	d6408 <_ZN5Print5printEc>
  n += print('\n');
   d6418:	210a      	movs	r1, #10
  size_t n = print('\r');
   d641a:	4604      	mov	r4, r0
  n += print('\n');
   d641c:	4628      	mov	r0, r5
   d641e:	f7ff fff3 	bl	d6408 <_ZN5Print5printEc>
  return n;
}
   d6422:	4420      	add	r0, r4
   d6424:	bd38      	pop	{r3, r4, r5, pc}

000d6426 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6426:	b538      	push	{r3, r4, r5, lr}
   d6428:	4605      	mov	r5, r0
  return write(str);
   d642a:	f7ff ffd7 	bl	d63dc <_ZN5Print5writeEPKc>
   d642e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6430:	4628      	mov	r0, r5
   d6432:	f7ff ffec 	bl	d640e <_ZN5Print7printlnEv>
  return n;
}
   d6436:	4420      	add	r0, r4
   d6438:	bd38      	pop	{r3, r4, r5, pc}

000d643a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d643a:	b530      	push	{r4, r5, lr}
   d643c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d643e:	2300      	movs	r3, #0
   d6440:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6444:	2a01      	cmp	r2, #1
   d6446:	bf98      	it	ls
   d6448:	220a      	movls	r2, #10
   d644a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d644c:	460d      	mov	r5, r1
   d644e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6452:	fb01 5312 	mls	r3, r1, r2, r5
   d6456:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d645a:	2b09      	cmp	r3, #9
   d645c:	bf94      	ite	ls
   d645e:	3330      	addls	r3, #48	; 0x30
   d6460:	3337      	addhi	r3, #55	; 0x37
   d6462:	b2db      	uxtb	r3, r3
  } while(n);
   d6464:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6466:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d646a:	d9ef      	bls.n	d644c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d646c:	4621      	mov	r1, r4
   d646e:	f7ff ffb5 	bl	d63dc <_ZN5Print5writeEPKc>
}
   d6472:	b00b      	add	sp, #44	; 0x2c
   d6474:	bd30      	pop	{r4, r5, pc}
	...

000d6478 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d647c:	ec55 4b10 	vmov	r4, r5, d0
   d6480:	4606      	mov	r6, r0
   d6482:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6484:	ee10 2a10 	vmov	r2, s0
   d6488:	ee10 0a10 	vmov	r0, s0
   d648c:	462b      	mov	r3, r5
   d648e:	4629      	mov	r1, r5
   d6490:	f001 f80e 	bl	d74b0 <__aeabi_dcmpun>
   d6494:	b140      	cbz	r0, d64a8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6496:	4953      	ldr	r1, [pc, #332]	; (d65e4 <_ZN5Print10printFloatEdh+0x16c>)
   d6498:	4630      	mov	r0, r6
   d649a:	f7ff ff9f 	bl	d63dc <_ZN5Print5writeEPKc>
   d649e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d64a0:	4650      	mov	r0, sl
   d64a2:	b003      	add	sp, #12
   d64a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d64a8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d64ac:	4b4e      	ldr	r3, [pc, #312]	; (d65e8 <_ZN5Print10printFloatEdh+0x170>)
   d64ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64b2:	4620      	mov	r0, r4
   d64b4:	4649      	mov	r1, r9
   d64b6:	f000 fffb 	bl	d74b0 <__aeabi_dcmpun>
   d64ba:	b948      	cbnz	r0, d64d0 <_ZN5Print10printFloatEdh+0x58>
   d64bc:	4b4a      	ldr	r3, [pc, #296]	; (d65e8 <_ZN5Print10printFloatEdh+0x170>)
   d64be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64c2:	4620      	mov	r0, r4
   d64c4:	4649      	mov	r1, r9
   d64c6:	f000 ffd5 	bl	d7474 <__aeabi_dcmple>
   d64ca:	b908      	cbnz	r0, d64d0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d64cc:	4947      	ldr	r1, [pc, #284]	; (d65ec <_ZN5Print10printFloatEdh+0x174>)
   d64ce:	e7e3      	b.n	d6498 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d64d0:	4b47      	ldr	r3, [pc, #284]	; (d65f0 <_ZN5Print10printFloatEdh+0x178>)
   d64d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64d6:	4620      	mov	r0, r4
   d64d8:	4629      	mov	r1, r5
   d64da:	f000 ffdf 	bl	d749c <__aeabi_dcmpgt>
   d64de:	b108      	cbz	r0, d64e4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d64e0:	4944      	ldr	r1, [pc, #272]	; (d65f4 <_ZN5Print10printFloatEdh+0x17c>)
   d64e2:	e7d9      	b.n	d6498 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d64e4:	4b44      	ldr	r3, [pc, #272]	; (d65f8 <_ZN5Print10printFloatEdh+0x180>)
   d64e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64ea:	4620      	mov	r0, r4
   d64ec:	4629      	mov	r1, r5
   d64ee:	f000 ffb7 	bl	d7460 <__aeabi_dcmplt>
   d64f2:	2800      	cmp	r0, #0
   d64f4:	d1f4      	bne.n	d64e0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d64f6:	2200      	movs	r2, #0
   d64f8:	2300      	movs	r3, #0
   d64fa:	4620      	mov	r0, r4
   d64fc:	4629      	mov	r1, r5
   d64fe:	f000 ffaf 	bl	d7460 <__aeabi_dcmplt>
   d6502:	b1d0      	cbz	r0, d653a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d6504:	212d      	movs	r1, #45	; 0x2d
   d6506:	4630      	mov	r0, r6
   d6508:	f7ff ff7e 	bl	d6408 <_ZN5Print5printEc>
     number = -number;
   d650c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d6510:	4682      	mov	sl, r0
     number = -number;
   d6512:	461d      	mov	r5, r3
  double rounding = 0.5;
   d6514:	4939      	ldr	r1, [pc, #228]	; (d65fc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d6516:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d6604 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d651a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d651e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d6520:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d6524:	fa5f f38b 	uxtb.w	r3, fp
   d6528:	429f      	cmp	r7, r3
   d652a:	d908      	bls.n	d653e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d652c:	4642      	mov	r2, r8
   d652e:	464b      	mov	r3, r9
   d6530:	f000 fe4e 	bl	d71d0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d6534:	f10b 0b01 	add.w	fp, fp, #1
   d6538:	e7f4      	b.n	d6524 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d653a:	4682      	mov	sl, r0
   d653c:	e7ea      	b.n	d6514 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d653e:	4622      	mov	r2, r4
   d6540:	462b      	mov	r3, r5
   d6542:	f000 fb65 	bl	d6c10 <__adddf3>
   d6546:	460d      	mov	r5, r1
   d6548:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d654a:	f000 ffef 	bl	d752c <__aeabi_d2uiz>
   d654e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d6550:	f000 fc9a 	bl	d6e88 <__aeabi_ui2d>
   d6554:	4602      	mov	r2, r0
   d6556:	460b      	mov	r3, r1
   d6558:	4620      	mov	r0, r4
   d655a:	4629      	mov	r1, r5
   d655c:	f000 fb56 	bl	d6c0c <__aeabi_dsub>
        return printNumber(val, base) + t;
   d6560:	220a      	movs	r2, #10
   d6562:	4604      	mov	r4, r0
   d6564:	460d      	mov	r5, r1
   d6566:	4630      	mov	r0, r6
   d6568:	4641      	mov	r1, r8
   d656a:	f7ff ff66 	bl	d643a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d656e:	4482      	add	sl, r0
  if (digits > 0) {
   d6570:	b127      	cbz	r7, d657c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d6572:	4923      	ldr	r1, [pc, #140]	; (d6600 <_ZN5Print10printFloatEdh+0x188>)
   d6574:	4630      	mov	r0, r6
   d6576:	f7ff ff31 	bl	d63dc <_ZN5Print5writeEPKc>
    n += print(".");
   d657a:	4482      	add	sl, r0
    remainder *= 10.0;
   d657c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d6604 <_ZN5Print10printFloatEdh+0x18c>
   d6580:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d6584:	3f01      	subs	r7, #1
   d6586:	b2ff      	uxtb	r7, r7
   d6588:	2fff      	cmp	r7, #255	; 0xff
   d658a:	d089      	beq.n	d64a0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d658c:	4642      	mov	r2, r8
   d658e:	464b      	mov	r3, r9
   d6590:	4620      	mov	r0, r4
   d6592:	4629      	mov	r1, r5
   d6594:	f000 fcf2 	bl	d6f7c <__aeabi_dmul>
   d6598:	4604      	mov	r4, r0
   d659a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d659c:	f000 ff9e 	bl	d74dc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d65a0:	f1b0 0b00 	subs.w	fp, r0, #0
   d65a4:	da1a      	bge.n	d65dc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d65a6:	212d      	movs	r1, #45	; 0x2d
   d65a8:	4630      	mov	r0, r6
   d65aa:	f7ff ff2d 	bl	d6408 <_ZN5Print5printEc>
            val = -n;
   d65ae:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d65b2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d65b4:	220a      	movs	r2, #10
   d65b6:	4630      	mov	r0, r6
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	f7ff ff3e 	bl	d643a <_ZN5Print11printNumberEmh>
   d65be:	9b01      	ldr	r3, [sp, #4]
   d65c0:	4418      	add	r0, r3
    n += print(toPrint);
   d65c2:	4482      	add	sl, r0
    remainder -= toPrint;
   d65c4:	4658      	mov	r0, fp
   d65c6:	f000 fc6f 	bl	d6ea8 <__aeabi_i2d>
   d65ca:	4602      	mov	r2, r0
   d65cc:	460b      	mov	r3, r1
   d65ce:	4620      	mov	r0, r4
   d65d0:	4629      	mov	r1, r5
   d65d2:	f000 fb1b 	bl	d6c0c <__aeabi_dsub>
   d65d6:	4604      	mov	r4, r0
   d65d8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d65da:	e7d3      	b.n	d6584 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d65dc:	4659      	mov	r1, fp
        size_t t = 0;
   d65de:	2300      	movs	r3, #0
   d65e0:	e7e8      	b.n	d65b4 <_ZN5Print10printFloatEdh+0x13c>
   d65e2:	bf00      	nop
   d65e4:	000d7b08 	.word	0x000d7b08
   d65e8:	7fefffff 	.word	0x7fefffff
   d65ec:	000d7b0c 	.word	0x000d7b0c
   d65f0:	41efffff 	.word	0x41efffff
   d65f4:	000d7b10 	.word	0x000d7b10
   d65f8:	c1efffff 	.word	0xc1efffff
   d65fc:	3fe00000 	.word	0x3fe00000
   d6600:	000d7b14 	.word	0x000d7b14
   d6604:	40240000 	.word	0x40240000

000d6608 <_ZN5Print7printlnEdi>:
{
   d6608:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d660a:	b2c9      	uxtb	r1, r1
{
   d660c:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d660e:	f7ff ff33 	bl	d6478 <_ZN5Print10printFloatEdh>
   d6612:	4604      	mov	r4, r0
  n += println();
   d6614:	4628      	mov	r0, r5
   d6616:	f7ff fefa 	bl	d640e <_ZN5Print7printlnEv>
}
   d661a:	4420      	add	r0, r4
   d661c:	bd38      	pop	{r3, r4, r5, pc}

000d661e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6622:	b086      	sub	sp, #24
   d6624:	af00      	add	r7, sp, #0
   d6626:	4605      	mov	r5, r0
   d6628:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d662a:	1d38      	adds	r0, r7, #4
   d662c:	2114      	movs	r1, #20
{
   d662e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6630:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6632:	f7fe fb37 	bl	d4ca4 <vsnprintf>

    if (n<bufsize)
   d6636:	2813      	cmp	r0, #19
   d6638:	d80e      	bhi.n	d6658 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d663a:	1d39      	adds	r1, r7, #4
   d663c:	4628      	mov	r0, r5
   d663e:	f7ff fecd 	bl	d63dc <_ZN5Print5writeEPKc>
   d6642:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6644:	b11e      	cbz	r6, d664e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6646:	4628      	mov	r0, r5
   d6648:	f7ff fee1 	bl	d640e <_ZN5Print7printlnEv>
   d664c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d664e:	4620      	mov	r0, r4
   d6650:	3718      	adds	r7, #24
   d6652:	46bd      	mov	sp, r7
   d6654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6658:	f100 0308 	add.w	r3, r0, #8
   d665c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6660:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6662:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6666:	4622      	mov	r2, r4
   d6668:	1c41      	adds	r1, r0, #1
   d666a:	683b      	ldr	r3, [r7, #0]
   d666c:	4668      	mov	r0, sp
   d666e:	f7fe fb19 	bl	d4ca4 <vsnprintf>
  return write(str);
   d6672:	4669      	mov	r1, sp
   d6674:	4628      	mov	r0, r5
   d6676:	f7ff feb1 	bl	d63dc <_ZN5Print5writeEPKc>
   d667a:	4604      	mov	r4, r0
   d667c:	46c5      	mov	sp, r8
   d667e:	e7e1      	b.n	d6644 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6680 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d6680:	4b01      	ldr	r3, [pc, #4]	; (d6688 <_GLOBAL__sub_I_RGB+0x8>)
   d6682:	2200      	movs	r2, #0
   d6684:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d6686:	4770      	bx	lr
   d6688:	2003e5ec 	.word	0x2003e5ec

000d668c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d668c:	b510      	push	{r4, lr}
   d668e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6690:	f7fe f9a4 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6694:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6696:	6823      	ldr	r3, [r4, #0]
   d6698:	4620      	mov	r0, r4
   d669a:	695b      	ldr	r3, [r3, #20]
   d669c:	4798      	blx	r3
    if (c >= 0) return c;
   d669e:	2800      	cmp	r0, #0
   d66a0:	da08      	bge.n	d66b4 <_ZN6Stream9timedReadEv+0x28>
   d66a2:	f7fe f99b 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d66a6:	68e3      	ldr	r3, [r4, #12]
   d66a8:	1ac0      	subs	r0, r0, r3
   d66aa:	68a3      	ldr	r3, [r4, #8]
   d66ac:	4298      	cmp	r0, r3
   d66ae:	d3f2      	bcc.n	d6696 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d66b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66b4:	bd10      	pop	{r4, pc}
	...

000d66b8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d66b8:	b570      	push	{r4, r5, r6, lr}
   d66ba:	460d      	mov	r5, r1
  String ret;
   d66bc:	4909      	ldr	r1, [pc, #36]	; (d66e4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d66be:	4604      	mov	r4, r0
   d66c0:	4616      	mov	r6, r2
  String ret;
   d66c2:	f000 f85c 	bl	d677e <_ZN6StringC1EPKc>
  int c = timedRead();
   d66c6:	4628      	mov	r0, r5
   d66c8:	f7ff ffe0 	bl	d668c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d66cc:	2800      	cmp	r0, #0
   d66ce:	db06      	blt.n	d66de <_ZN6Stream15readStringUntilEc+0x26>
   d66d0:	4286      	cmp	r6, r0
   d66d2:	d004      	beq.n	d66de <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d66d4:	b2c1      	uxtb	r1, r0
   d66d6:	4620      	mov	r0, r4
   d66d8:	f000 f8be 	bl	d6858 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d66dc:	e7f3      	b.n	d66c6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d66de:	4620      	mov	r0, r4
   d66e0:	bd70      	pop	{r4, r5, r6, pc}
   d66e2:	bf00      	nop
   d66e4:	000d7a3a 	.word	0x000d7a3a

000d66e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d66e8:	b510      	push	{r4, lr}
   d66ea:	4604      	mov	r4, r0
{
	free(buffer);
   d66ec:	6800      	ldr	r0, [r0, #0]
   d66ee:	f7fe fac9 	bl	d4c84 <free>
}
   d66f2:	4620      	mov	r0, r4
   d66f4:	bd10      	pop	{r4, pc}

000d66f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d66f6:	b510      	push	{r4, lr}
   d66f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d66fa:	6800      	ldr	r0, [r0, #0]
   d66fc:	b108      	cbz	r0, d6702 <_ZN6String10invalidateEv+0xc>
   d66fe:	f7fe fac1 	bl	d4c84 <free>
	buffer = NULL;
   d6702:	2300      	movs	r3, #0
	capacity = len = 0;
   d6704:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6708:	6023      	str	r3, [r4, #0]
}
   d670a:	bd10      	pop	{r4, pc}

000d670c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d670c:	b538      	push	{r3, r4, r5, lr}
   d670e:	4604      	mov	r4, r0
   d6710:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6712:	6800      	ldr	r0, [r0, #0]
   d6714:	3101      	adds	r1, #1
   d6716:	f7fe fabd 	bl	d4c94 <realloc>
	if (newbuffer) {
   d671a:	b110      	cbz	r0, d6722 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d671c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6720:	2001      	movs	r0, #1
	}
	return 0;
}
   d6722:	bd38      	pop	{r3, r4, r5, pc}

000d6724 <_ZN6String7reserveEj>:
{
   d6724:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6726:	6803      	ldr	r3, [r0, #0]
{
   d6728:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d672a:	b123      	cbz	r3, d6736 <_ZN6String7reserveEj+0x12>
   d672c:	6843      	ldr	r3, [r0, #4]
   d672e:	428b      	cmp	r3, r1
   d6730:	d301      	bcc.n	d6736 <_ZN6String7reserveEj+0x12>
   d6732:	2001      	movs	r0, #1
}
   d6734:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6736:	4620      	mov	r0, r4
   d6738:	f7ff ffe8 	bl	d670c <_ZN6String12changeBufferEj>
   d673c:	2800      	cmp	r0, #0
   d673e:	d0f9      	beq.n	d6734 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6740:	68a3      	ldr	r3, [r4, #8]
   d6742:	2b00      	cmp	r3, #0
   d6744:	d1f5      	bne.n	d6732 <_ZN6String7reserveEj+0xe>
   d6746:	6822      	ldr	r2, [r4, #0]
   d6748:	7013      	strb	r3, [r2, #0]
   d674a:	e7f2      	b.n	d6732 <_ZN6String7reserveEj+0xe>

000d674c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d674c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d674e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6750:	4611      	mov	r1, r2
   d6752:	9201      	str	r2, [sp, #4]
{
   d6754:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6756:	f7ff ffe5 	bl	d6724 <_ZN6String7reserveEj>
   d675a:	9a01      	ldr	r2, [sp, #4]
   d675c:	b928      	cbnz	r0, d676a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d675e:	4620      	mov	r0, r4
   d6760:	f7ff ffc9 	bl	d66f6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6764:	4620      	mov	r0, r4
   d6766:	b003      	add	sp, #12
   d6768:	bd30      	pop	{r4, r5, pc}
	len = length;
   d676a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d676c:	4629      	mov	r1, r5
   d676e:	6820      	ldr	r0, [r4, #0]
   d6770:	f000 ff06 	bl	d7580 <memcpy>
	buffer[len] = 0;
   d6774:	6822      	ldr	r2, [r4, #0]
   d6776:	68a3      	ldr	r3, [r4, #8]
   d6778:	2100      	movs	r1, #0
   d677a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d677c:	e7f2      	b.n	d6764 <_ZN6String4copyEPKcj+0x18>

000d677e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d677e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6780:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6782:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6786:	4604      	mov	r4, r0
	len = 0;
   d6788:	6083      	str	r3, [r0, #8]
	flags = 0;
   d678a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d678c:	b141      	cbz	r1, d67a0 <_ZN6StringC1EPKc+0x22>
   d678e:	4608      	mov	r0, r1
   d6790:	9101      	str	r1, [sp, #4]
   d6792:	f000 ff72 	bl	d767a <strlen>
   d6796:	9901      	ldr	r1, [sp, #4]
   d6798:	4602      	mov	r2, r0
   d679a:	4620      	mov	r0, r4
   d679c:	f7ff ffd6 	bl	d674c <_ZN6String4copyEPKcj>
}
   d67a0:	4620      	mov	r0, r4
   d67a2:	b002      	add	sp, #8
   d67a4:	bd10      	pop	{r4, pc}

000d67a6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d67a6:	b538      	push	{r3, r4, r5, lr}
   d67a8:	4605      	mov	r5, r0
	if (buffer) {
   d67aa:	6800      	ldr	r0, [r0, #0]
{
   d67ac:	460c      	mov	r4, r1
	if (buffer) {
   d67ae:	b168      	cbz	r0, d67cc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d67b0:	686a      	ldr	r2, [r5, #4]
   d67b2:	688b      	ldr	r3, [r1, #8]
   d67b4:	429a      	cmp	r2, r3
   d67b6:	d307      	bcc.n	d67c8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d67b8:	6809      	ldr	r1, [r1, #0]
   d67ba:	f000 ff56 	bl	d766a <strcpy>
			len = rhs.len;
   d67be:	68a3      	ldr	r3, [r4, #8]
   d67c0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d67c2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d67c4:	60a3      	str	r3, [r4, #8]
}
   d67c6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d67c8:	f7fe fa5c 	bl	d4c84 <free>
	buffer = rhs.buffer;
   d67cc:	6823      	ldr	r3, [r4, #0]
   d67ce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d67d0:	6863      	ldr	r3, [r4, #4]
   d67d2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d67d4:	68a3      	ldr	r3, [r4, #8]
   d67d6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d67d8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d67da:	e9c4 3300 	strd	r3, r3, [r4]
   d67de:	e7f1      	b.n	d67c4 <_ZN6String4moveERS_+0x1e>

000d67e0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d67e0:	b510      	push	{r4, lr}
	buffer = NULL;
   d67e2:	2300      	movs	r3, #0
	capacity = 0;
   d67e4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d67e8:	4604      	mov	r4, r0
	len = 0;
   d67ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d67ec:	7303      	strb	r3, [r0, #12]
	move(rval);
   d67ee:	f7ff ffda 	bl	d67a6 <_ZN6String4moveERS_>
}
   d67f2:	4620      	mov	r0, r4
   d67f4:	bd10      	pop	{r4, pc}

000d67f6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d67f6:	4288      	cmp	r0, r1
{
   d67f8:	b510      	push	{r4, lr}
   d67fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d67fc:	d005      	beq.n	d680a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d67fe:	680b      	ldr	r3, [r1, #0]
   d6800:	b12b      	cbz	r3, d680e <_ZN6StringaSERKS_+0x18>
   d6802:	688a      	ldr	r2, [r1, #8]
   d6804:	4619      	mov	r1, r3
   d6806:	f7ff ffa1 	bl	d674c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d680a:	4620      	mov	r0, r4
   d680c:	bd10      	pop	{r4, pc}
	else invalidate();
   d680e:	f7ff ff72 	bl	d66f6 <_ZN6String10invalidateEv>
   d6812:	e7fa      	b.n	d680a <_ZN6StringaSERKS_+0x14>

000d6814 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6814:	b510      	push	{r4, lr}
	buffer = NULL;
   d6816:	2300      	movs	r3, #0
String::String(const String &value)
   d6818:	4604      	mov	r4, r0
	capacity = 0;
   d681a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d681e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6820:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6822:	f7ff ffe8 	bl	d67f6 <_ZN6StringaSERKS_>
}
   d6826:	4620      	mov	r0, r4
   d6828:	bd10      	pop	{r4, pc}

000d682a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d682a:	b570      	push	{r4, r5, r6, lr}
   d682c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d682e:	460e      	mov	r6, r1
   d6830:	b909      	cbnz	r1, d6836 <_ZN6String6concatEPKcj+0xc>
   d6832:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6834:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6836:	b16a      	cbz	r2, d6854 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6838:	6884      	ldr	r4, [r0, #8]
   d683a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d683c:	4621      	mov	r1, r4
   d683e:	f7ff ff71 	bl	d6724 <_ZN6String7reserveEj>
   d6842:	2800      	cmp	r0, #0
   d6844:	d0f5      	beq.n	d6832 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6846:	6828      	ldr	r0, [r5, #0]
   d6848:	68ab      	ldr	r3, [r5, #8]
   d684a:	4631      	mov	r1, r6
   d684c:	4418      	add	r0, r3
   d684e:	f000 ff0c 	bl	d766a <strcpy>
	len = newlen;
   d6852:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6854:	2001      	movs	r0, #1
   d6856:	e7ed      	b.n	d6834 <_ZN6String6concatEPKcj+0xa>

000d6858 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6858:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d685a:	2300      	movs	r3, #0
	buf[0] = c;
   d685c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6860:	2201      	movs	r2, #1
   d6862:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6864:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6868:	f7ff ffdf 	bl	d682a <_ZN6String6concatEPKcj>
}
   d686c:	b003      	add	sp, #12
   d686e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6874 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6874:	4b05      	ldr	r3, [pc, #20]	; (d688c <_GLOBAL__sub_I_System+0x18>)
   d6876:	2202      	movs	r2, #2
   d6878:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d687a:	4b05      	ldr	r3, [pc, #20]	; (d6890 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d687c:	4a05      	ldr	r2, [pc, #20]	; (d6894 <_GLOBAL__sub_I_System+0x20>)
   d687e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6880:	2000      	movs	r0, #0
   d6882:	6018      	str	r0, [r3, #0]
   d6884:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d6886:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6888:	f7fe b968 	b.w	d4b5c <set_system_mode>
   d688c:	2003e608 	.word	0x2003e608
   d6890:	2003e5fc 	.word	0x2003e5fc
   d6894:	ffff0000 	.word	0xffff0000

000d6898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6898:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d689a:	681a      	ldr	r2, [r3, #0]
   d689c:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d689e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d68a0:	4770      	bx	lr
   d68a2:	bf00      	nop
   d68a4:	2003e408 	.word	0x2003e408
   d68a8:	2003e60c 	.word	0x2003e60c

000d68ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d68ac:	4770      	bx	lr

000d68ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d68ae:	7441      	strb	r1, [r0, #17]
}
   d68b0:	4770      	bx	lr

000d68b2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d68b2:	4770      	bx	lr

000d68b4 <_ZN11USARTSerial17availableForWriteEv>:
{
   d68b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d68b6:	7c00      	ldrb	r0, [r0, #16]
   d68b8:	f7fe f8e8 	bl	d4a8c <hal_usart_available_data_for_write>
}
   d68bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68c0:	bd08      	pop	{r3, pc}

000d68c2 <_ZN11USARTSerial9availableEv>:
{
   d68c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d68c4:	7c00      	ldrb	r0, [r0, #16]
   d68c6:	f7fe f8c1 	bl	d4a4c <hal_usart_available>
}
   d68ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68ce:	bd08      	pop	{r3, pc}

000d68d0 <_ZN11USARTSerial4peekEv>:
{
   d68d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d68d2:	7c00      	ldrb	r0, [r0, #16]
   d68d4:	f7fe f8ca 	bl	d4a6c <hal_usart_peek>
}
   d68d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68dc:	bd08      	pop	{r3, pc}

000d68de <_ZN11USARTSerial4readEv>:
{
   d68de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d68e0:	7c00      	ldrb	r0, [r0, #16]
   d68e2:	f7fe f8bb 	bl	d4a5c <hal_usart_read>
}
   d68e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68ea:	bd08      	pop	{r3, pc}

000d68ec <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d68ec:	7c00      	ldrb	r0, [r0, #16]
   d68ee:	f7fe b8c5 	b.w	d4a7c <hal_usart_flush>

000d68f2 <_ZN11USARTSerial5writeEh>:
{
   d68f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68f4:	7c45      	ldrb	r5, [r0, #17]
{
   d68f6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68f8:	b12d      	cbz	r5, d6906 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d68fa:	7c20      	ldrb	r0, [r4, #16]
}
   d68fc:	b003      	add	sp, #12
   d68fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6902:	f7fe b89b 	b.w	d4a3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6906:	7c00      	ldrb	r0, [r0, #16]
   d6908:	9101      	str	r1, [sp, #4]
   d690a:	f7fe f8bf 	bl	d4a8c <hal_usart_available_data_for_write>
   d690e:	2800      	cmp	r0, #0
   d6910:	9901      	ldr	r1, [sp, #4]
   d6912:	dcf2      	bgt.n	d68fa <_ZN11USARTSerial5writeEh+0x8>
}
   d6914:	4628      	mov	r0, r5
   d6916:	b003      	add	sp, #12
   d6918:	bd30      	pop	{r4, r5, pc}

000d691a <_ZN11USARTSerialD0Ev>:
   d691a:	b510      	push	{r4, lr}
   d691c:	2114      	movs	r1, #20
   d691e:	4604      	mov	r4, r0
   d6920:	f000 f96c 	bl	d6bfc <_ZdlPvj>
   d6924:	4620      	mov	r0, r4
   d6926:	bd10      	pop	{r4, pc}

000d6928 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6928:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d692a:	f04f 0c00 	mov.w	ip, #0
   d692e:	4604      	mov	r4, r0
   d6930:	4608      	mov	r0, r1
   d6932:	4611      	mov	r1, r2
   d6934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6938:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d693c:	4a04      	ldr	r2, [pc, #16]	; (d6950 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d693e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6940:	2201      	movs	r2, #1
  _serial = serial;
   d6942:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6944:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6946:	461a      	mov	r2, r3
   d6948:	f7fe f868 	bl	d4a1c <hal_usart_init>
}
   d694c:	4620      	mov	r0, r4
   d694e:	bd10      	pop	{r4, pc}
   d6950:	000d7b3c 	.word	0x000d7b3c

000d6954 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6954:	7c00      	ldrb	r0, [r0, #16]
   d6956:	2300      	movs	r3, #0
   d6958:	f7fe b8a0 	b.w	d4a9c <hal_usart_begin_config>

000d695c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d695c:	2200      	movs	r2, #0
   d695e:	f7ff bff9 	b.w	d6954 <_ZN11USARTSerial5beginEmm>

000d6962 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6962:	7c00      	ldrb	r0, [r0, #16]
   d6964:	f7fe b862 	b.w	d4a2c <hal_usart_end>

000d6968 <_Z22__fetch_global_Serial1v>:
{
   d6968:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d696a:	4c0d      	ldr	r4, [pc, #52]	; (d69a0 <_Z22__fetch_global_Serial1v+0x38>)
   d696c:	7821      	ldrb	r1, [r4, #0]
   d696e:	f3bf 8f5b 	dmb	ish
   d6972:	f011 0101 	ands.w	r1, r1, #1
   d6976:	d110      	bne.n	d699a <_Z22__fetch_global_Serial1v+0x32>
   d6978:	4620      	mov	r0, r4
   d697a:	9101      	str	r1, [sp, #4]
   d697c:	f7fd fb9a 	bl	d40b4 <__cxa_guard_acquire>
   d6980:	9901      	ldr	r1, [sp, #4]
   d6982:	b150      	cbz	r0, d699a <_Z22__fetch_global_Serial1v+0x32>
   d6984:	4b07      	ldr	r3, [pc, #28]	; (d69a4 <_Z22__fetch_global_Serial1v+0x3c>)
   d6986:	4a08      	ldr	r2, [pc, #32]	; (d69a8 <_Z22__fetch_global_Serial1v+0x40>)
   d6988:	4808      	ldr	r0, [pc, #32]	; (d69ac <_Z22__fetch_global_Serial1v+0x44>)
   d698a:	f7ff ffcd 	bl	d6928 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d698e:	4620      	mov	r0, r4
   d6990:	f7fd fb95 	bl	d40be <__cxa_guard_release>
   d6994:	4806      	ldr	r0, [pc, #24]	; (d69b0 <_Z22__fetch_global_Serial1v+0x48>)
   d6996:	f000 fde9 	bl	d756c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d699a:	4804      	ldr	r0, [pc, #16]	; (d69ac <_Z22__fetch_global_Serial1v+0x44>)
   d699c:	b002      	add	sp, #8
   d699e:	bd10      	pop	{r4, pc}
   d69a0:	2003e610 	.word	0x2003e610
   d69a4:	2003e698 	.word	0x2003e698
   d69a8:	2003e614 	.word	0x2003e614
   d69ac:	2003e71c 	.word	0x2003e71c
   d69b0:	000d68b3 	.word	0x000d68b3

000d69b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69b4:	7441      	strb	r1, [r0, #17]
}
   d69b6:	4770      	bx	lr

000d69b8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69b8:	4770      	bx	lr

000d69ba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69ba:	4770      	bx	lr

000d69bc <_ZN9USBSerial4readEv>:
{
   d69bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d69be:	2100      	movs	r1, #0
   d69c0:	7c00      	ldrb	r0, [r0, #16]
   d69c2:	f7fe f89b 	bl	d4afc <HAL_USB_USART_Receive_Data>
}
   d69c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69ca:	bd08      	pop	{r3, pc}

000d69cc <_ZN9USBSerial4peekEv>:
{
   d69cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d69ce:	2101      	movs	r1, #1
   d69d0:	7c00      	ldrb	r0, [r0, #16]
   d69d2:	f7fe f893 	bl	d4afc <HAL_USB_USART_Receive_Data>
}
   d69d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69da:	bd08      	pop	{r3, pc}

000d69dc <_ZN9USBSerial17availableForWriteEv>:
{
   d69dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69de:	7c00      	ldrb	r0, [r0, #16]
   d69e0:	f7fe f884 	bl	d4aec <HAL_USB_USART_Available_Data_For_Write>
}
   d69e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69e8:	bd08      	pop	{r3, pc}

000d69ea <_ZN9USBSerial9availableEv>:
{
   d69ea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69ec:	7c00      	ldrb	r0, [r0, #16]
   d69ee:	f7fe f875 	bl	d4adc <HAL_USB_USART_Available_Data>
}
   d69f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69f6:	bd08      	pop	{r3, pc}

000d69f8 <_ZN9USBSerial5writeEh>:
{
   d69f8:	b513      	push	{r0, r1, r4, lr}
   d69fa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69fc:	7c00      	ldrb	r0, [r0, #16]
{
   d69fe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a00:	f7fe f874 	bl	d4aec <HAL_USB_USART_Available_Data_For_Write>
   d6a04:	2800      	cmp	r0, #0
   d6a06:	9901      	ldr	r1, [sp, #4]
   d6a08:	dc01      	bgt.n	d6a0e <_ZN9USBSerial5writeEh+0x16>
   d6a0a:	7c60      	ldrb	r0, [r4, #17]
   d6a0c:	b120      	cbz	r0, d6a18 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a0e:	7c20      	ldrb	r0, [r4, #16]
   d6a10:	f7fe f87c 	bl	d4b0c <HAL_USB_USART_Send_Data>
   d6a14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6a18:	b002      	add	sp, #8
   d6a1a:	bd10      	pop	{r4, pc}

000d6a1c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6a1c:	7c00      	ldrb	r0, [r0, #16]
   d6a1e:	f7fe b87d 	b.w	d4b1c <HAL_USB_USART_Flush_Data>

000d6a22 <_ZN9USBSerialD0Ev>:
   d6a22:	b510      	push	{r4, lr}
   d6a24:	2114      	movs	r1, #20
   d6a26:	4604      	mov	r4, r0
   d6a28:	f000 f8e8 	bl	d6bfc <_ZdlPvj>
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	bd10      	pop	{r4, pc}

000d6a30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a30:	b510      	push	{r4, lr}
   d6a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a36:	4604      	mov	r4, r0
   d6a38:	4608      	mov	r0, r1
   d6a3a:	2100      	movs	r1, #0
   d6a3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a40:	4b04      	ldr	r3, [pc, #16]	; (d6a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6a44:	2301      	movs	r3, #1
  _serial = serial;
   d6a46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6a4a:	4611      	mov	r1, r2
   d6a4c:	f7fe f82e 	bl	d4aac <HAL_USB_USART_Init>
}
   d6a50:	4620      	mov	r0, r4
   d6a52:	bd10      	pop	{r4, pc}
   d6a54:	000d7b6c 	.word	0x000d7b6c

000d6a58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a58:	7c00      	ldrb	r0, [r0, #16]
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	f7fe b82e 	b.w	d4abc <HAL_USB_USART_Begin>

000d6a60 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d6a60:	7c00      	ldrb	r0, [r0, #16]
   d6a62:	f7fe b833 	b.w	d4acc <HAL_USB_USART_End>

000d6a66 <_Z19acquireSerialBufferv>:
{
   d6a66:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a68:	2214      	movs	r2, #20
{
   d6a6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a6c:	2100      	movs	r1, #0
   d6a6e:	f000 fdaf 	bl	d75d0 <memset>
}
   d6a72:	4620      	mov	r0, r4
   d6a74:	bd10      	pop	{r4, pc}
	...

000d6a78 <_Z16_fetch_usbserialv>:
{
   d6a78:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a7a:	4c0f      	ldr	r4, [pc, #60]	; (d6ab8 <_Z16_fetch_usbserialv+0x40>)
{
   d6a7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a7e:	a803      	add	r0, sp, #12
   d6a80:	f7ff fff1 	bl	d6a66 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a84:	7821      	ldrb	r1, [r4, #0]
   d6a86:	f3bf 8f5b 	dmb	ish
   d6a8a:	f011 0101 	ands.w	r1, r1, #1
   d6a8e:	d10f      	bne.n	d6ab0 <_Z16_fetch_usbserialv+0x38>
   d6a90:	4620      	mov	r0, r4
   d6a92:	9101      	str	r1, [sp, #4]
   d6a94:	f7fd fb0e 	bl	d40b4 <__cxa_guard_acquire>
   d6a98:	9901      	ldr	r1, [sp, #4]
   d6a9a:	b148      	cbz	r0, d6ab0 <_Z16_fetch_usbserialv+0x38>
   d6a9c:	aa03      	add	r2, sp, #12
   d6a9e:	4807      	ldr	r0, [pc, #28]	; (d6abc <_Z16_fetch_usbserialv+0x44>)
   d6aa0:	f7ff ffc6 	bl	d6a30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	f7fd fb0a 	bl	d40be <__cxa_guard_release>
   d6aaa:	4805      	ldr	r0, [pc, #20]	; (d6ac0 <_Z16_fetch_usbserialv+0x48>)
   d6aac:	f000 fd5e 	bl	d756c <atexit>
	return _usbserial;
}
   d6ab0:	4802      	ldr	r0, [pc, #8]	; (d6abc <_Z16_fetch_usbserialv+0x44>)
   d6ab2:	b008      	add	sp, #32
   d6ab4:	bd10      	pop	{r4, pc}
   d6ab6:	bf00      	nop
   d6ab8:	2003e730 	.word	0x2003e730
   d6abc:	2003e734 	.word	0x2003e734
   d6ac0:	000d69b9 	.word	0x000d69b9

000d6ac4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6ac4:	4b01      	ldr	r3, [pc, #4]	; (d6acc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6ac6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6ac8:	4770      	bx	lr
   d6aca:	bf00      	nop
   d6acc:	2003e40c 	.word	0x2003e40c

000d6ad0 <serialEventRun>:
{
   d6ad0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6ad2:	4b0b      	ldr	r3, [pc, #44]	; (d6b00 <serialEventRun+0x30>)
   d6ad4:	b143      	cbz	r3, d6ae8 <serialEventRun+0x18>
   d6ad6:	f7ff ffcf 	bl	d6a78 <_Z16_fetch_usbserialv>
   d6ada:	6803      	ldr	r3, [r0, #0]
   d6adc:	691b      	ldr	r3, [r3, #16]
   d6ade:	4798      	blx	r3
   d6ae0:	2800      	cmp	r0, #0
   d6ae2:	dd01      	ble.n	d6ae8 <serialEventRun+0x18>
        serialEvent();
   d6ae4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6ae8:	4b06      	ldr	r3, [pc, #24]	; (d6b04 <serialEventRun+0x34>)
   d6aea:	b143      	cbz	r3, d6afe <serialEventRun+0x2e>
   d6aec:	f7ff ff3c 	bl	d6968 <_Z22__fetch_global_Serial1v>
   d6af0:	6803      	ldr	r3, [r0, #0]
   d6af2:	691b      	ldr	r3, [r3, #16]
   d6af4:	4798      	blx	r3
   d6af6:	2800      	cmp	r0, #0
   d6af8:	dd01      	ble.n	d6afe <serialEventRun+0x2e>
        serialEvent1();
   d6afa:	f3af 8000 	nop.w
}
   d6afe:	bd08      	pop	{r3, pc}
	...

000d6b08 <_post_loop>:
{
   d6b08:	b508      	push	{r3, lr}
	serialEventRun();
   d6b0a:	f7ff ffe1 	bl	d6ad0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6b0e:	f7fd ff65 	bl	d49dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6b12:	4b01      	ldr	r3, [pc, #4]	; (d6b18 <_post_loop+0x10>)
   d6b14:	6018      	str	r0, [r3, #0]
}
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	2003e750 	.word	0x2003e750

000d6b1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6b1c:	4805      	ldr	r0, [pc, #20]	; (d6b34 <_Z33system_initialize_user_backup_ramv+0x18>)
   d6b1e:	4a06      	ldr	r2, [pc, #24]	; (d6b38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6b20:	4906      	ldr	r1, [pc, #24]	; (d6b3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d6b22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6b24:	1a12      	subs	r2, r2, r0
   d6b26:	f000 fd2b 	bl	d7580 <memcpy>
    __backup_sram_signature = signature;
   d6b2a:	4b05      	ldr	r3, [pc, #20]	; (d6b40 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6b2c:	4a05      	ldr	r2, [pc, #20]	; (d6b44 <_Z33system_initialize_user_backup_ramv+0x28>)
   d6b2e:	601a      	str	r2, [r3, #0]
}
   d6b30:	bd08      	pop	{r3, pc}
   d6b32:	bf00      	nop
   d6b34:	2003f400 	.word	0x2003f400
   d6b38:	2003f404 	.word	0x2003f404
   d6b3c:	000d7cc0 	.word	0x000d7cc0
   d6b40:	2003f400 	.word	0x2003f400
   d6b44:	9a271c1e 	.word	0x9a271c1e

000d6b48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6b48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	9300      	str	r3, [sp, #0]
   d6b4e:	461a      	mov	r2, r3
   d6b50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b54:	f7fe f81c 	bl	d4b90 <system_ctrl_set_result>
}
   d6b58:	b003      	add	sp, #12
   d6b5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6b60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6b62:	8843      	ldrh	r3, [r0, #2]
   d6b64:	2b0a      	cmp	r3, #10
   d6b66:	d008      	beq.n	d6b7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b68:	2b50      	cmp	r3, #80	; 0x50
   d6b6a:	d10b      	bne.n	d6b84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6b6c:	4b09      	ldr	r3, [pc, #36]	; (d6b94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b6e:	681b      	ldr	r3, [r3, #0]
   d6b70:	b14b      	cbz	r3, d6b86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6b72:	b003      	add	sp, #12
   d6b74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6b78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6b7a:	f7ff ffe5 	bl	d6b48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6b7e:	b003      	add	sp, #12
   d6b80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b84:	2300      	movs	r3, #0
   d6b86:	9300      	str	r3, [sp, #0]
   d6b88:	461a      	mov	r2, r3
   d6b8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b8e:	f7fd ffff 	bl	d4b90 <system_ctrl_set_result>
}
   d6b92:	e7f4      	b.n	d6b7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6b94:	2003e74c 	.word	0x2003e74c

000d6b98 <module_user_init_hook>:
{
   d6b98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6b9a:	4812      	ldr	r0, [pc, #72]	; (d6be4 <module_user_init_hook+0x4c>)
   d6b9c:	2100      	movs	r1, #0
   d6b9e:	f7fe f889 	bl	d4cb4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6ba2:	4b11      	ldr	r3, [pc, #68]	; (d6be8 <module_user_init_hook+0x50>)
   d6ba4:	681a      	ldr	r2, [r3, #0]
   d6ba6:	4b11      	ldr	r3, [pc, #68]	; (d6bec <module_user_init_hook+0x54>)
   d6ba8:	429a      	cmp	r2, r3
   d6baa:	4b11      	ldr	r3, [pc, #68]	; (d6bf0 <module_user_init_hook+0x58>)
   d6bac:	bf0c      	ite	eq
   d6bae:	2201      	moveq	r2, #1
   d6bb0:	2200      	movne	r2, #0
   d6bb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6bb4:	d001      	beq.n	d6bba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6bb6:	f7ff ffb1 	bl	d6b1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6bba:	f7fd feff 	bl	d49bc <HAL_RNG_GetRandomNumber>
   d6bbe:	4604      	mov	r4, r0
    srand(seed);
   d6bc0:	f000 fd0e 	bl	d75e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6bc4:	4b0b      	ldr	r3, [pc, #44]	; (d6bf4 <module_user_init_hook+0x5c>)
   d6bc6:	b113      	cbz	r3, d6bce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6bc8:	4620      	mov	r0, r4
   d6bca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6bce:	2100      	movs	r1, #0
   d6bd0:	4808      	ldr	r0, [pc, #32]	; (d6bf4 <module_user_init_hook+0x5c>)
   d6bd2:	f7fd ffe7 	bl	d4ba4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bda:	4807      	ldr	r0, [pc, #28]	; (d6bf8 <module_user_init_hook+0x60>)
   d6bdc:	2100      	movs	r1, #0
   d6bde:	f7fd bfcd 	b.w	d4b7c <system_ctrl_set_app_request_handler>
   d6be2:	bf00      	nop
   d6be4:	000d6ac5 	.word	0x000d6ac5
   d6be8:	2003f400 	.word	0x2003f400
   d6bec:	9a271c1e 	.word	0x9a271c1e
   d6bf0:	2003e748 	.word	0x2003e748
   d6bf4:	00000000 	.word	0x00000000
   d6bf8:	000d6b61 	.word	0x000d6b61

000d6bfc <_ZdlPvj>:
   d6bfc:	f7fd ba4d 	b.w	d409a <_ZdlPv>

000d6c00 <_ZnwjRKSt9nothrow_t>:
   d6c00:	f7fd ba49 	b.w	d4096 <_Znwj>

000d6c04 <__aeabi_drsub>:
   d6c04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6c08:	e002      	b.n	d6c10 <__adddf3>
   d6c0a:	bf00      	nop

000d6c0c <__aeabi_dsub>:
   d6c0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c10 <__adddf3>:
   d6c10:	b530      	push	{r4, r5, lr}
   d6c12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c1a:	ea94 0f05 	teq	r4, r5
   d6c1e:	bf08      	it	eq
   d6c20:	ea90 0f02 	teqeq	r0, r2
   d6c24:	bf1f      	itttt	ne
   d6c26:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c36:	f000 80e2 	beq.w	d6dfe <__adddf3+0x1ee>
   d6c3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c42:	bfb8      	it	lt
   d6c44:	426d      	neglt	r5, r5
   d6c46:	dd0c      	ble.n	d6c62 <__adddf3+0x52>
   d6c48:	442c      	add	r4, r5
   d6c4a:	ea80 0202 	eor.w	r2, r0, r2
   d6c4e:	ea81 0303 	eor.w	r3, r1, r3
   d6c52:	ea82 0000 	eor.w	r0, r2, r0
   d6c56:	ea83 0101 	eor.w	r1, r3, r1
   d6c5a:	ea80 0202 	eor.w	r2, r0, r2
   d6c5e:	ea81 0303 	eor.w	r3, r1, r3
   d6c62:	2d36      	cmp	r5, #54	; 0x36
   d6c64:	bf88      	it	hi
   d6c66:	bd30      	pophi	{r4, r5, pc}
   d6c68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c78:	d002      	beq.n	d6c80 <__adddf3+0x70>
   d6c7a:	4240      	negs	r0, r0
   d6c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c8c:	d002      	beq.n	d6c94 <__adddf3+0x84>
   d6c8e:	4252      	negs	r2, r2
   d6c90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c94:	ea94 0f05 	teq	r4, r5
   d6c98:	f000 80a7 	beq.w	d6dea <__adddf3+0x1da>
   d6c9c:	f1a4 0401 	sub.w	r4, r4, #1
   d6ca0:	f1d5 0e20 	rsbs	lr, r5, #32
   d6ca4:	db0d      	blt.n	d6cc2 <__adddf3+0xb2>
   d6ca6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6caa:	fa22 f205 	lsr.w	r2, r2, r5
   d6cae:	1880      	adds	r0, r0, r2
   d6cb0:	f141 0100 	adc.w	r1, r1, #0
   d6cb4:	fa03 f20e 	lsl.w	r2, r3, lr
   d6cb8:	1880      	adds	r0, r0, r2
   d6cba:	fa43 f305 	asr.w	r3, r3, r5
   d6cbe:	4159      	adcs	r1, r3
   d6cc0:	e00e      	b.n	d6ce0 <__adddf3+0xd0>
   d6cc2:	f1a5 0520 	sub.w	r5, r5, #32
   d6cc6:	f10e 0e20 	add.w	lr, lr, #32
   d6cca:	2a01      	cmp	r2, #1
   d6ccc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6cd0:	bf28      	it	cs
   d6cd2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6cd6:	fa43 f305 	asr.w	r3, r3, r5
   d6cda:	18c0      	adds	r0, r0, r3
   d6cdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6ce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ce4:	d507      	bpl.n	d6cf6 <__adddf3+0xe6>
   d6ce6:	f04f 0e00 	mov.w	lr, #0
   d6cea:	f1dc 0c00 	rsbs	ip, ip, #0
   d6cee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cf2:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cfa:	d31b      	bcc.n	d6d34 <__adddf3+0x124>
   d6cfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6d00:	d30c      	bcc.n	d6d1c <__adddf3+0x10c>
   d6d02:	0849      	lsrs	r1, r1, #1
   d6d04:	ea5f 0030 	movs.w	r0, r0, rrx
   d6d08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6d0c:	f104 0401 	add.w	r4, r4, #1
   d6d10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d18:	f080 809a 	bcs.w	d6e50 <__adddf3+0x240>
   d6d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d20:	bf08      	it	eq
   d6d22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d26:	f150 0000 	adcs.w	r0, r0, #0
   d6d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d2e:	ea41 0105 	orr.w	r1, r1, r5
   d6d32:	bd30      	pop	{r4, r5, pc}
   d6d34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d38:	4140      	adcs	r0, r0
   d6d3a:	eb41 0101 	adc.w	r1, r1, r1
   d6d3e:	3c01      	subs	r4, #1
   d6d40:	bf28      	it	cs
   d6d42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6d46:	d2e9      	bcs.n	d6d1c <__adddf3+0x10c>
   d6d48:	f091 0f00 	teq	r1, #0
   d6d4c:	bf04      	itt	eq
   d6d4e:	4601      	moveq	r1, r0
   d6d50:	2000      	moveq	r0, #0
   d6d52:	fab1 f381 	clz	r3, r1
   d6d56:	bf08      	it	eq
   d6d58:	3320      	addeq	r3, #32
   d6d5a:	f1a3 030b 	sub.w	r3, r3, #11
   d6d5e:	f1b3 0220 	subs.w	r2, r3, #32
   d6d62:	da0c      	bge.n	d6d7e <__adddf3+0x16e>
   d6d64:	320c      	adds	r2, #12
   d6d66:	dd08      	ble.n	d6d7a <__adddf3+0x16a>
   d6d68:	f102 0c14 	add.w	ip, r2, #20
   d6d6c:	f1c2 020c 	rsb	r2, r2, #12
   d6d70:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d74:	fa21 f102 	lsr.w	r1, r1, r2
   d6d78:	e00c      	b.n	d6d94 <__adddf3+0x184>
   d6d7a:	f102 0214 	add.w	r2, r2, #20
   d6d7e:	bfd8      	it	le
   d6d80:	f1c2 0c20 	rsble	ip, r2, #32
   d6d84:	fa01 f102 	lsl.w	r1, r1, r2
   d6d88:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d8c:	bfdc      	itt	le
   d6d8e:	ea41 010c 	orrle.w	r1, r1, ip
   d6d92:	4090      	lslle	r0, r2
   d6d94:	1ae4      	subs	r4, r4, r3
   d6d96:	bfa2      	ittt	ge
   d6d98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d9c:	4329      	orrge	r1, r5
   d6d9e:	bd30      	popge	{r4, r5, pc}
   d6da0:	ea6f 0404 	mvn.w	r4, r4
   d6da4:	3c1f      	subs	r4, #31
   d6da6:	da1c      	bge.n	d6de2 <__adddf3+0x1d2>
   d6da8:	340c      	adds	r4, #12
   d6daa:	dc0e      	bgt.n	d6dca <__adddf3+0x1ba>
   d6dac:	f104 0414 	add.w	r4, r4, #20
   d6db0:	f1c4 0220 	rsb	r2, r4, #32
   d6db4:	fa20 f004 	lsr.w	r0, r0, r4
   d6db8:	fa01 f302 	lsl.w	r3, r1, r2
   d6dbc:	ea40 0003 	orr.w	r0, r0, r3
   d6dc0:	fa21 f304 	lsr.w	r3, r1, r4
   d6dc4:	ea45 0103 	orr.w	r1, r5, r3
   d6dc8:	bd30      	pop	{r4, r5, pc}
   d6dca:	f1c4 040c 	rsb	r4, r4, #12
   d6dce:	f1c4 0220 	rsb	r2, r4, #32
   d6dd2:	fa20 f002 	lsr.w	r0, r0, r2
   d6dd6:	fa01 f304 	lsl.w	r3, r1, r4
   d6dda:	ea40 0003 	orr.w	r0, r0, r3
   d6dde:	4629      	mov	r1, r5
   d6de0:	bd30      	pop	{r4, r5, pc}
   d6de2:	fa21 f004 	lsr.w	r0, r1, r4
   d6de6:	4629      	mov	r1, r5
   d6de8:	bd30      	pop	{r4, r5, pc}
   d6dea:	f094 0f00 	teq	r4, #0
   d6dee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6df2:	bf06      	itte	eq
   d6df4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6df8:	3401      	addeq	r4, #1
   d6dfa:	3d01      	subne	r5, #1
   d6dfc:	e74e      	b.n	d6c9c <__adddf3+0x8c>
   d6dfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e02:	bf18      	it	ne
   d6e04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e08:	d029      	beq.n	d6e5e <__adddf3+0x24e>
   d6e0a:	ea94 0f05 	teq	r4, r5
   d6e0e:	bf08      	it	eq
   d6e10:	ea90 0f02 	teqeq	r0, r2
   d6e14:	d005      	beq.n	d6e22 <__adddf3+0x212>
   d6e16:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e1a:	bf04      	itt	eq
   d6e1c:	4619      	moveq	r1, r3
   d6e1e:	4610      	moveq	r0, r2
   d6e20:	bd30      	pop	{r4, r5, pc}
   d6e22:	ea91 0f03 	teq	r1, r3
   d6e26:	bf1e      	ittt	ne
   d6e28:	2100      	movne	r1, #0
   d6e2a:	2000      	movne	r0, #0
   d6e2c:	bd30      	popne	{r4, r5, pc}
   d6e2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e32:	d105      	bne.n	d6e40 <__adddf3+0x230>
   d6e34:	0040      	lsls	r0, r0, #1
   d6e36:	4149      	adcs	r1, r1
   d6e38:	bf28      	it	cs
   d6e3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e3e:	bd30      	pop	{r4, r5, pc}
   d6e40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e44:	bf3c      	itt	cc
   d6e46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e4a:	bd30      	popcc	{r4, r5, pc}
   d6e4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e58:	f04f 0000 	mov.w	r0, #0
   d6e5c:	bd30      	pop	{r4, r5, pc}
   d6e5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e62:	bf1a      	itte	ne
   d6e64:	4619      	movne	r1, r3
   d6e66:	4610      	movne	r0, r2
   d6e68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e6c:	bf1c      	itt	ne
   d6e6e:	460b      	movne	r3, r1
   d6e70:	4602      	movne	r2, r0
   d6e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e76:	bf06      	itte	eq
   d6e78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e7c:	ea91 0f03 	teqeq	r1, r3
   d6e80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e84:	bd30      	pop	{r4, r5, pc}
   d6e86:	bf00      	nop

000d6e88 <__aeabi_ui2d>:
   d6e88:	f090 0f00 	teq	r0, #0
   d6e8c:	bf04      	itt	eq
   d6e8e:	2100      	moveq	r1, #0
   d6e90:	4770      	bxeq	lr
   d6e92:	b530      	push	{r4, r5, lr}
   d6e94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e9c:	f04f 0500 	mov.w	r5, #0
   d6ea0:	f04f 0100 	mov.w	r1, #0
   d6ea4:	e750      	b.n	d6d48 <__adddf3+0x138>
   d6ea6:	bf00      	nop

000d6ea8 <__aeabi_i2d>:
   d6ea8:	f090 0f00 	teq	r0, #0
   d6eac:	bf04      	itt	eq
   d6eae:	2100      	moveq	r1, #0
   d6eb0:	4770      	bxeq	lr
   d6eb2:	b530      	push	{r4, r5, lr}
   d6eb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6eb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ebc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6ec0:	bf48      	it	mi
   d6ec2:	4240      	negmi	r0, r0
   d6ec4:	f04f 0100 	mov.w	r1, #0
   d6ec8:	e73e      	b.n	d6d48 <__adddf3+0x138>
   d6eca:	bf00      	nop

000d6ecc <__aeabi_f2d>:
   d6ecc:	0042      	lsls	r2, r0, #1
   d6ece:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6ed2:	ea4f 0131 	mov.w	r1, r1, rrx
   d6ed6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6eda:	bf1f      	itttt	ne
   d6edc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ee0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ee4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ee8:	4770      	bxne	lr
   d6eea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6eee:	bf08      	it	eq
   d6ef0:	4770      	bxeq	lr
   d6ef2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6ef6:	bf04      	itt	eq
   d6ef8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6efc:	4770      	bxeq	lr
   d6efe:	b530      	push	{r4, r5, lr}
   d6f00:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f0c:	e71c      	b.n	d6d48 <__adddf3+0x138>
   d6f0e:	bf00      	nop

000d6f10 <__aeabi_ul2d>:
   d6f10:	ea50 0201 	orrs.w	r2, r0, r1
   d6f14:	bf08      	it	eq
   d6f16:	4770      	bxeq	lr
   d6f18:	b530      	push	{r4, r5, lr}
   d6f1a:	f04f 0500 	mov.w	r5, #0
   d6f1e:	e00a      	b.n	d6f36 <__aeabi_l2d+0x16>

000d6f20 <__aeabi_l2d>:
   d6f20:	ea50 0201 	orrs.w	r2, r0, r1
   d6f24:	bf08      	it	eq
   d6f26:	4770      	bxeq	lr
   d6f28:	b530      	push	{r4, r5, lr}
   d6f2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f2e:	d502      	bpl.n	d6f36 <__aeabi_l2d+0x16>
   d6f30:	4240      	negs	r0, r0
   d6f32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f36:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f42:	f43f aed8 	beq.w	d6cf6 <__adddf3+0xe6>
   d6f46:	f04f 0203 	mov.w	r2, #3
   d6f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f4e:	bf18      	it	ne
   d6f50:	3203      	addne	r2, #3
   d6f52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f56:	bf18      	it	ne
   d6f58:	3203      	addne	r2, #3
   d6f5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f5e:	f1c2 0320 	rsb	r3, r2, #32
   d6f62:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f66:	fa20 f002 	lsr.w	r0, r0, r2
   d6f6a:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f6e:	ea40 000e 	orr.w	r0, r0, lr
   d6f72:	fa21 f102 	lsr.w	r1, r1, r2
   d6f76:	4414      	add	r4, r2
   d6f78:	e6bd      	b.n	d6cf6 <__adddf3+0xe6>
   d6f7a:	bf00      	nop

000d6f7c <__aeabi_dmul>:
   d6f7c:	b570      	push	{r4, r5, r6, lr}
   d6f7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f8a:	bf1d      	ittte	ne
   d6f8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f90:	ea94 0f0c 	teqne	r4, ip
   d6f94:	ea95 0f0c 	teqne	r5, ip
   d6f98:	f000 f8de 	bleq	d7158 <__aeabi_dmul+0x1dc>
   d6f9c:	442c      	add	r4, r5
   d6f9e:	ea81 0603 	eor.w	r6, r1, r3
   d6fa2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6fa6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6faa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6fae:	bf18      	it	ne
   d6fb0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6fb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6fbc:	d038      	beq.n	d7030 <__aeabi_dmul+0xb4>
   d6fbe:	fba0 ce02 	umull	ip, lr, r0, r2
   d6fc2:	f04f 0500 	mov.w	r5, #0
   d6fc6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6fca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6fce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6fd2:	f04f 0600 	mov.w	r6, #0
   d6fd6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6fda:	f09c 0f00 	teq	ip, #0
   d6fde:	bf18      	it	ne
   d6fe0:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fe4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fe8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6ff0:	d204      	bcs.n	d6ffc <__aeabi_dmul+0x80>
   d6ff2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6ff6:	416d      	adcs	r5, r5
   d6ff8:	eb46 0606 	adc.w	r6, r6, r6
   d6ffc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7000:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7004:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7008:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d700c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7010:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7014:	bf88      	it	hi
   d7016:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d701a:	d81e      	bhi.n	d705a <__aeabi_dmul+0xde>
   d701c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7020:	bf08      	it	eq
   d7022:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7026:	f150 0000 	adcs.w	r0, r0, #0
   d702a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d702e:	bd70      	pop	{r4, r5, r6, pc}
   d7030:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7034:	ea46 0101 	orr.w	r1, r6, r1
   d7038:	ea40 0002 	orr.w	r0, r0, r2
   d703c:	ea81 0103 	eor.w	r1, r1, r3
   d7040:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7044:	bfc2      	ittt	gt
   d7046:	ebd4 050c 	rsbsgt	r5, r4, ip
   d704a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d704e:	bd70      	popgt	{r4, r5, r6, pc}
   d7050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7054:	f04f 0e00 	mov.w	lr, #0
   d7058:	3c01      	subs	r4, #1
   d705a:	f300 80ab 	bgt.w	d71b4 <__aeabi_dmul+0x238>
   d705e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7062:	bfde      	ittt	le
   d7064:	2000      	movle	r0, #0
   d7066:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d706a:	bd70      	pople	{r4, r5, r6, pc}
   d706c:	f1c4 0400 	rsb	r4, r4, #0
   d7070:	3c20      	subs	r4, #32
   d7072:	da35      	bge.n	d70e0 <__aeabi_dmul+0x164>
   d7074:	340c      	adds	r4, #12
   d7076:	dc1b      	bgt.n	d70b0 <__aeabi_dmul+0x134>
   d7078:	f104 0414 	add.w	r4, r4, #20
   d707c:	f1c4 0520 	rsb	r5, r4, #32
   d7080:	fa00 f305 	lsl.w	r3, r0, r5
   d7084:	fa20 f004 	lsr.w	r0, r0, r4
   d7088:	fa01 f205 	lsl.w	r2, r1, r5
   d708c:	ea40 0002 	orr.w	r0, r0, r2
   d7090:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7098:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d709c:	fa21 f604 	lsr.w	r6, r1, r4
   d70a0:	eb42 0106 	adc.w	r1, r2, r6
   d70a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70a8:	bf08      	it	eq
   d70aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70ae:	bd70      	pop	{r4, r5, r6, pc}
   d70b0:	f1c4 040c 	rsb	r4, r4, #12
   d70b4:	f1c4 0520 	rsb	r5, r4, #32
   d70b8:	fa00 f304 	lsl.w	r3, r0, r4
   d70bc:	fa20 f005 	lsr.w	r0, r0, r5
   d70c0:	fa01 f204 	lsl.w	r2, r1, r4
   d70c4:	ea40 0002 	orr.w	r0, r0, r2
   d70c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70d0:	f141 0100 	adc.w	r1, r1, #0
   d70d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70d8:	bf08      	it	eq
   d70da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70de:	bd70      	pop	{r4, r5, r6, pc}
   d70e0:	f1c4 0520 	rsb	r5, r4, #32
   d70e4:	fa00 f205 	lsl.w	r2, r0, r5
   d70e8:	ea4e 0e02 	orr.w	lr, lr, r2
   d70ec:	fa20 f304 	lsr.w	r3, r0, r4
   d70f0:	fa01 f205 	lsl.w	r2, r1, r5
   d70f4:	ea43 0302 	orr.w	r3, r3, r2
   d70f8:	fa21 f004 	lsr.w	r0, r1, r4
   d70fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7100:	fa21 f204 	lsr.w	r2, r1, r4
   d7104:	ea20 0002 	bic.w	r0, r0, r2
   d7108:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d710c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7110:	bf08      	it	eq
   d7112:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7116:	bd70      	pop	{r4, r5, r6, pc}
   d7118:	f094 0f00 	teq	r4, #0
   d711c:	d10f      	bne.n	d713e <__aeabi_dmul+0x1c2>
   d711e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7122:	0040      	lsls	r0, r0, #1
   d7124:	eb41 0101 	adc.w	r1, r1, r1
   d7128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d712c:	bf08      	it	eq
   d712e:	3c01      	subeq	r4, #1
   d7130:	d0f7      	beq.n	d7122 <__aeabi_dmul+0x1a6>
   d7132:	ea41 0106 	orr.w	r1, r1, r6
   d7136:	f095 0f00 	teq	r5, #0
   d713a:	bf18      	it	ne
   d713c:	4770      	bxne	lr
   d713e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7142:	0052      	lsls	r2, r2, #1
   d7144:	eb43 0303 	adc.w	r3, r3, r3
   d7148:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d714c:	bf08      	it	eq
   d714e:	3d01      	subeq	r5, #1
   d7150:	d0f7      	beq.n	d7142 <__aeabi_dmul+0x1c6>
   d7152:	ea43 0306 	orr.w	r3, r3, r6
   d7156:	4770      	bx	lr
   d7158:	ea94 0f0c 	teq	r4, ip
   d715c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7160:	bf18      	it	ne
   d7162:	ea95 0f0c 	teqne	r5, ip
   d7166:	d00c      	beq.n	d7182 <__aeabi_dmul+0x206>
   d7168:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d716c:	bf18      	it	ne
   d716e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7172:	d1d1      	bne.n	d7118 <__aeabi_dmul+0x19c>
   d7174:	ea81 0103 	eor.w	r1, r1, r3
   d7178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d717c:	f04f 0000 	mov.w	r0, #0
   d7180:	bd70      	pop	{r4, r5, r6, pc}
   d7182:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7186:	bf06      	itte	eq
   d7188:	4610      	moveq	r0, r2
   d718a:	4619      	moveq	r1, r3
   d718c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7190:	d019      	beq.n	d71c6 <__aeabi_dmul+0x24a>
   d7192:	ea94 0f0c 	teq	r4, ip
   d7196:	d102      	bne.n	d719e <__aeabi_dmul+0x222>
   d7198:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d719c:	d113      	bne.n	d71c6 <__aeabi_dmul+0x24a>
   d719e:	ea95 0f0c 	teq	r5, ip
   d71a2:	d105      	bne.n	d71b0 <__aeabi_dmul+0x234>
   d71a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d71a8:	bf1c      	itt	ne
   d71aa:	4610      	movne	r0, r2
   d71ac:	4619      	movne	r1, r3
   d71ae:	d10a      	bne.n	d71c6 <__aeabi_dmul+0x24a>
   d71b0:	ea81 0103 	eor.w	r1, r1, r3
   d71b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d71c0:	f04f 0000 	mov.w	r0, #0
   d71c4:	bd70      	pop	{r4, r5, r6, pc}
   d71c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71ce:	bd70      	pop	{r4, r5, r6, pc}

000d71d0 <__aeabi_ddiv>:
   d71d0:	b570      	push	{r4, r5, r6, lr}
   d71d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71de:	bf1d      	ittte	ne
   d71e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71e4:	ea94 0f0c 	teqne	r4, ip
   d71e8:	ea95 0f0c 	teqne	r5, ip
   d71ec:	f000 f8a7 	bleq	d733e <__aeabi_ddiv+0x16e>
   d71f0:	eba4 0405 	sub.w	r4, r4, r5
   d71f4:	ea81 0e03 	eor.w	lr, r1, r3
   d71f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7200:	f000 8088 	beq.w	d7314 <__aeabi_ddiv+0x144>
   d7204:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7208:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d720c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7210:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7214:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7218:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d721c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7220:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7224:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7228:	429d      	cmp	r5, r3
   d722a:	bf08      	it	eq
   d722c:	4296      	cmpeq	r6, r2
   d722e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7232:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7236:	d202      	bcs.n	d723e <__aeabi_ddiv+0x6e>
   d7238:	085b      	lsrs	r3, r3, #1
   d723a:	ea4f 0232 	mov.w	r2, r2, rrx
   d723e:	1ab6      	subs	r6, r6, r2
   d7240:	eb65 0503 	sbc.w	r5, r5, r3
   d7244:	085b      	lsrs	r3, r3, #1
   d7246:	ea4f 0232 	mov.w	r2, r2, rrx
   d724a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d724e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7252:	ebb6 0e02 	subs.w	lr, r6, r2
   d7256:	eb75 0e03 	sbcs.w	lr, r5, r3
   d725a:	bf22      	ittt	cs
   d725c:	1ab6      	subcs	r6, r6, r2
   d725e:	4675      	movcs	r5, lr
   d7260:	ea40 000c 	orrcs.w	r0, r0, ip
   d7264:	085b      	lsrs	r3, r3, #1
   d7266:	ea4f 0232 	mov.w	r2, r2, rrx
   d726a:	ebb6 0e02 	subs.w	lr, r6, r2
   d726e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7272:	bf22      	ittt	cs
   d7274:	1ab6      	subcs	r6, r6, r2
   d7276:	4675      	movcs	r5, lr
   d7278:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d727c:	085b      	lsrs	r3, r3, #1
   d727e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7282:	ebb6 0e02 	subs.w	lr, r6, r2
   d7286:	eb75 0e03 	sbcs.w	lr, r5, r3
   d728a:	bf22      	ittt	cs
   d728c:	1ab6      	subcs	r6, r6, r2
   d728e:	4675      	movcs	r5, lr
   d7290:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7294:	085b      	lsrs	r3, r3, #1
   d7296:	ea4f 0232 	mov.w	r2, r2, rrx
   d729a:	ebb6 0e02 	subs.w	lr, r6, r2
   d729e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72a2:	bf22      	ittt	cs
   d72a4:	1ab6      	subcs	r6, r6, r2
   d72a6:	4675      	movcs	r5, lr
   d72a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d72ac:	ea55 0e06 	orrs.w	lr, r5, r6
   d72b0:	d018      	beq.n	d72e4 <__aeabi_ddiv+0x114>
   d72b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d72b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d72ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d72be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d72c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72ce:	d1c0      	bne.n	d7252 <__aeabi_ddiv+0x82>
   d72d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72d4:	d10b      	bne.n	d72ee <__aeabi_ddiv+0x11e>
   d72d6:	ea41 0100 	orr.w	r1, r1, r0
   d72da:	f04f 0000 	mov.w	r0, #0
   d72de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72e2:	e7b6      	b.n	d7252 <__aeabi_ddiv+0x82>
   d72e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72e8:	bf04      	itt	eq
   d72ea:	4301      	orreq	r1, r0
   d72ec:	2000      	moveq	r0, #0
   d72ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72f2:	bf88      	it	hi
   d72f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72f8:	f63f aeaf 	bhi.w	d705a <__aeabi_dmul+0xde>
   d72fc:	ebb5 0c03 	subs.w	ip, r5, r3
   d7300:	bf04      	itt	eq
   d7302:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d730a:	f150 0000 	adcs.w	r0, r0, #0
   d730e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7312:	bd70      	pop	{r4, r5, r6, pc}
   d7314:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7318:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d731c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7320:	bfc2      	ittt	gt
   d7322:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7326:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d732a:	bd70      	popgt	{r4, r5, r6, pc}
   d732c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7330:	f04f 0e00 	mov.w	lr, #0
   d7334:	3c01      	subs	r4, #1
   d7336:	e690      	b.n	d705a <__aeabi_dmul+0xde>
   d7338:	ea45 0e06 	orr.w	lr, r5, r6
   d733c:	e68d      	b.n	d705a <__aeabi_dmul+0xde>
   d733e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7342:	ea94 0f0c 	teq	r4, ip
   d7346:	bf08      	it	eq
   d7348:	ea95 0f0c 	teqeq	r5, ip
   d734c:	f43f af3b 	beq.w	d71c6 <__aeabi_dmul+0x24a>
   d7350:	ea94 0f0c 	teq	r4, ip
   d7354:	d10a      	bne.n	d736c <__aeabi_ddiv+0x19c>
   d7356:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d735a:	f47f af34 	bne.w	d71c6 <__aeabi_dmul+0x24a>
   d735e:	ea95 0f0c 	teq	r5, ip
   d7362:	f47f af25 	bne.w	d71b0 <__aeabi_dmul+0x234>
   d7366:	4610      	mov	r0, r2
   d7368:	4619      	mov	r1, r3
   d736a:	e72c      	b.n	d71c6 <__aeabi_dmul+0x24a>
   d736c:	ea95 0f0c 	teq	r5, ip
   d7370:	d106      	bne.n	d7380 <__aeabi_ddiv+0x1b0>
   d7372:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7376:	f43f aefd 	beq.w	d7174 <__aeabi_dmul+0x1f8>
   d737a:	4610      	mov	r0, r2
   d737c:	4619      	mov	r1, r3
   d737e:	e722      	b.n	d71c6 <__aeabi_dmul+0x24a>
   d7380:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7384:	bf18      	it	ne
   d7386:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d738a:	f47f aec5 	bne.w	d7118 <__aeabi_dmul+0x19c>
   d738e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7392:	f47f af0d 	bne.w	d71b0 <__aeabi_dmul+0x234>
   d7396:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d739a:	f47f aeeb 	bne.w	d7174 <__aeabi_dmul+0x1f8>
   d739e:	e712      	b.n	d71c6 <__aeabi_dmul+0x24a>

000d73a0 <__gedf2>:
   d73a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d73a4:	e006      	b.n	d73b4 <__cmpdf2+0x4>
   d73a6:	bf00      	nop

000d73a8 <__ledf2>:
   d73a8:	f04f 0c01 	mov.w	ip, #1
   d73ac:	e002      	b.n	d73b4 <__cmpdf2+0x4>
   d73ae:	bf00      	nop

000d73b0 <__cmpdf2>:
   d73b0:	f04f 0c01 	mov.w	ip, #1
   d73b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d73b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73c4:	bf18      	it	ne
   d73c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73ca:	d01b      	beq.n	d7404 <__cmpdf2+0x54>
   d73cc:	b001      	add	sp, #4
   d73ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d73d2:	bf0c      	ite	eq
   d73d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d73d8:	ea91 0f03 	teqne	r1, r3
   d73dc:	bf02      	ittt	eq
   d73de:	ea90 0f02 	teqeq	r0, r2
   d73e2:	2000      	moveq	r0, #0
   d73e4:	4770      	bxeq	lr
   d73e6:	f110 0f00 	cmn.w	r0, #0
   d73ea:	ea91 0f03 	teq	r1, r3
   d73ee:	bf58      	it	pl
   d73f0:	4299      	cmppl	r1, r3
   d73f2:	bf08      	it	eq
   d73f4:	4290      	cmpeq	r0, r2
   d73f6:	bf2c      	ite	cs
   d73f8:	17d8      	asrcs	r0, r3, #31
   d73fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73fe:	f040 0001 	orr.w	r0, r0, #1
   d7402:	4770      	bx	lr
   d7404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d740c:	d102      	bne.n	d7414 <__cmpdf2+0x64>
   d740e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7412:	d107      	bne.n	d7424 <__cmpdf2+0x74>
   d7414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d741c:	d1d6      	bne.n	d73cc <__cmpdf2+0x1c>
   d741e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7422:	d0d3      	beq.n	d73cc <__cmpdf2+0x1c>
   d7424:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7428:	4770      	bx	lr
   d742a:	bf00      	nop

000d742c <__aeabi_cdrcmple>:
   d742c:	4684      	mov	ip, r0
   d742e:	4610      	mov	r0, r2
   d7430:	4662      	mov	r2, ip
   d7432:	468c      	mov	ip, r1
   d7434:	4619      	mov	r1, r3
   d7436:	4663      	mov	r3, ip
   d7438:	e000      	b.n	d743c <__aeabi_cdcmpeq>
   d743a:	bf00      	nop

000d743c <__aeabi_cdcmpeq>:
   d743c:	b501      	push	{r0, lr}
   d743e:	f7ff ffb7 	bl	d73b0 <__cmpdf2>
   d7442:	2800      	cmp	r0, #0
   d7444:	bf48      	it	mi
   d7446:	f110 0f00 	cmnmi.w	r0, #0
   d744a:	bd01      	pop	{r0, pc}

000d744c <__aeabi_dcmpeq>:
   d744c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7450:	f7ff fff4 	bl	d743c <__aeabi_cdcmpeq>
   d7454:	bf0c      	ite	eq
   d7456:	2001      	moveq	r0, #1
   d7458:	2000      	movne	r0, #0
   d745a:	f85d fb08 	ldr.w	pc, [sp], #8
   d745e:	bf00      	nop

000d7460 <__aeabi_dcmplt>:
   d7460:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7464:	f7ff ffea 	bl	d743c <__aeabi_cdcmpeq>
   d7468:	bf34      	ite	cc
   d746a:	2001      	movcc	r0, #1
   d746c:	2000      	movcs	r0, #0
   d746e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7472:	bf00      	nop

000d7474 <__aeabi_dcmple>:
   d7474:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7478:	f7ff ffe0 	bl	d743c <__aeabi_cdcmpeq>
   d747c:	bf94      	ite	ls
   d747e:	2001      	movls	r0, #1
   d7480:	2000      	movhi	r0, #0
   d7482:	f85d fb08 	ldr.w	pc, [sp], #8
   d7486:	bf00      	nop

000d7488 <__aeabi_dcmpge>:
   d7488:	f84d ed08 	str.w	lr, [sp, #-8]!
   d748c:	f7ff ffce 	bl	d742c <__aeabi_cdrcmple>
   d7490:	bf94      	ite	ls
   d7492:	2001      	movls	r0, #1
   d7494:	2000      	movhi	r0, #0
   d7496:	f85d fb08 	ldr.w	pc, [sp], #8
   d749a:	bf00      	nop

000d749c <__aeabi_dcmpgt>:
   d749c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74a0:	f7ff ffc4 	bl	d742c <__aeabi_cdrcmple>
   d74a4:	bf34      	ite	cc
   d74a6:	2001      	movcc	r0, #1
   d74a8:	2000      	movcs	r0, #0
   d74aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d74ae:	bf00      	nop

000d74b0 <__aeabi_dcmpun>:
   d74b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74b8:	d102      	bne.n	d74c0 <__aeabi_dcmpun+0x10>
   d74ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d74be:	d10a      	bne.n	d74d6 <__aeabi_dcmpun+0x26>
   d74c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d74c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74c8:	d102      	bne.n	d74d0 <__aeabi_dcmpun+0x20>
   d74ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d74ce:	d102      	bne.n	d74d6 <__aeabi_dcmpun+0x26>
   d74d0:	f04f 0000 	mov.w	r0, #0
   d74d4:	4770      	bx	lr
   d74d6:	f04f 0001 	mov.w	r0, #1
   d74da:	4770      	bx	lr

000d74dc <__aeabi_d2iz>:
   d74dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74e4:	d215      	bcs.n	d7512 <__aeabi_d2iz+0x36>
   d74e6:	d511      	bpl.n	d750c <__aeabi_d2iz+0x30>
   d74e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74f0:	d912      	bls.n	d7518 <__aeabi_d2iz+0x3c>
   d74f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7502:	fa23 f002 	lsr.w	r0, r3, r2
   d7506:	bf18      	it	ne
   d7508:	4240      	negne	r0, r0
   d750a:	4770      	bx	lr
   d750c:	f04f 0000 	mov.w	r0, #0
   d7510:	4770      	bx	lr
   d7512:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7516:	d105      	bne.n	d7524 <__aeabi_d2iz+0x48>
   d7518:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d751c:	bf08      	it	eq
   d751e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7522:	4770      	bx	lr
   d7524:	f04f 0000 	mov.w	r0, #0
   d7528:	4770      	bx	lr
   d752a:	bf00      	nop

000d752c <__aeabi_d2uiz>:
   d752c:	004a      	lsls	r2, r1, #1
   d752e:	d211      	bcs.n	d7554 <__aeabi_d2uiz+0x28>
   d7530:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7534:	d211      	bcs.n	d755a <__aeabi_d2uiz+0x2e>
   d7536:	d50d      	bpl.n	d7554 <__aeabi_d2uiz+0x28>
   d7538:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d753c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7540:	d40e      	bmi.n	d7560 <__aeabi_d2uiz+0x34>
   d7542:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d754a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d754e:	fa23 f002 	lsr.w	r0, r3, r2
   d7552:	4770      	bx	lr
   d7554:	f04f 0000 	mov.w	r0, #0
   d7558:	4770      	bx	lr
   d755a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d755e:	d102      	bne.n	d7566 <__aeabi_d2uiz+0x3a>
   d7560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7564:	4770      	bx	lr
   d7566:	f04f 0000 	mov.w	r0, #0
   d756a:	4770      	bx	lr

000d756c <atexit>:
   d756c:	2300      	movs	r3, #0
   d756e:	4601      	mov	r1, r0
   d7570:	461a      	mov	r2, r3
   d7572:	4618      	mov	r0, r3
   d7574:	f000 b946 	b.w	d7804 <__register_exitproc>

000d7578 <atol>:
   d7578:	220a      	movs	r2, #10
   d757a:	2100      	movs	r1, #0
   d757c:	f000 b938 	b.w	d77f0 <strtol>

000d7580 <memcpy>:
   d7580:	440a      	add	r2, r1
   d7582:	4291      	cmp	r1, r2
   d7584:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7588:	d100      	bne.n	d758c <memcpy+0xc>
   d758a:	4770      	bx	lr
   d758c:	b510      	push	{r4, lr}
   d758e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7592:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7596:	4291      	cmp	r1, r2
   d7598:	d1f9      	bne.n	d758e <memcpy+0xe>
   d759a:	bd10      	pop	{r4, pc}

000d759c <memmove>:
   d759c:	4288      	cmp	r0, r1
   d759e:	b510      	push	{r4, lr}
   d75a0:	eb01 0402 	add.w	r4, r1, r2
   d75a4:	d902      	bls.n	d75ac <memmove+0x10>
   d75a6:	4284      	cmp	r4, r0
   d75a8:	4623      	mov	r3, r4
   d75aa:	d807      	bhi.n	d75bc <memmove+0x20>
   d75ac:	1e43      	subs	r3, r0, #1
   d75ae:	42a1      	cmp	r1, r4
   d75b0:	d008      	beq.n	d75c4 <memmove+0x28>
   d75b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d75b6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d75ba:	e7f8      	b.n	d75ae <memmove+0x12>
   d75bc:	4402      	add	r2, r0
   d75be:	4601      	mov	r1, r0
   d75c0:	428a      	cmp	r2, r1
   d75c2:	d100      	bne.n	d75c6 <memmove+0x2a>
   d75c4:	bd10      	pop	{r4, pc}
   d75c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d75ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d75ce:	e7f7      	b.n	d75c0 <memmove+0x24>

000d75d0 <memset>:
   d75d0:	4402      	add	r2, r0
   d75d2:	4603      	mov	r3, r0
   d75d4:	4293      	cmp	r3, r2
   d75d6:	d100      	bne.n	d75da <memset+0xa>
   d75d8:	4770      	bx	lr
   d75da:	f803 1b01 	strb.w	r1, [r3], #1
   d75de:	e7f9      	b.n	d75d4 <memset+0x4>

000d75e0 <srand>:
   d75e0:	b538      	push	{r3, r4, r5, lr}
   d75e2:	4b0d      	ldr	r3, [pc, #52]	; (d7618 <srand+0x38>)
   d75e4:	681d      	ldr	r5, [r3, #0]
   d75e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d75e8:	4604      	mov	r4, r0
   d75ea:	b97b      	cbnz	r3, d760c <srand+0x2c>
   d75ec:	2018      	movs	r0, #24
   d75ee:	f7fd fb41 	bl	d4c74 <malloc>
   d75f2:	4a0a      	ldr	r2, [pc, #40]	; (d761c <srand+0x3c>)
   d75f4:	4b0a      	ldr	r3, [pc, #40]	; (d7620 <srand+0x40>)
   d75f6:	63a8      	str	r0, [r5, #56]	; 0x38
   d75f8:	e9c0 2300 	strd	r2, r3, [r0]
   d75fc:	4b09      	ldr	r3, [pc, #36]	; (d7624 <srand+0x44>)
   d75fe:	6083      	str	r3, [r0, #8]
   d7600:	230b      	movs	r3, #11
   d7602:	8183      	strh	r3, [r0, #12]
   d7604:	2201      	movs	r2, #1
   d7606:	2300      	movs	r3, #0
   d7608:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d760c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d760e:	2200      	movs	r2, #0
   d7610:	611c      	str	r4, [r3, #16]
   d7612:	615a      	str	r2, [r3, #20]
   d7614:	bd38      	pop	{r3, r4, r5, pc}
   d7616:	bf00      	nop
   d7618:	2003e40c 	.word	0x2003e40c
   d761c:	abcd330e 	.word	0xabcd330e
   d7620:	e66d1234 	.word	0xe66d1234
   d7624:	0005deec 	.word	0x0005deec

000d7628 <strchr>:
   d7628:	b2c9      	uxtb	r1, r1
   d762a:	4603      	mov	r3, r0
   d762c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7630:	b11a      	cbz	r2, d763a <strchr+0x12>
   d7632:	428a      	cmp	r2, r1
   d7634:	d1f9      	bne.n	d762a <strchr+0x2>
   d7636:	4618      	mov	r0, r3
   d7638:	4770      	bx	lr
   d763a:	2900      	cmp	r1, #0
   d763c:	bf18      	it	ne
   d763e:	2300      	movne	r3, #0
   d7640:	e7f9      	b.n	d7636 <strchr+0xe>

000d7642 <strchrnul>:
   d7642:	b510      	push	{r4, lr}
   d7644:	4604      	mov	r4, r0
   d7646:	f7ff ffef 	bl	d7628 <strchr>
   d764a:	b918      	cbnz	r0, d7654 <strchrnul+0x12>
   d764c:	4620      	mov	r0, r4
   d764e:	f000 f814 	bl	d767a <strlen>
   d7652:	4420      	add	r0, r4
   d7654:	bd10      	pop	{r4, pc}

000d7656 <strcmp>:
   d7656:	f810 2b01 	ldrb.w	r2, [r0], #1
   d765a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d765e:	2a01      	cmp	r2, #1
   d7660:	bf28      	it	cs
   d7662:	429a      	cmpcs	r2, r3
   d7664:	d0f7      	beq.n	d7656 <strcmp>
   d7666:	1ad0      	subs	r0, r2, r3
   d7668:	4770      	bx	lr

000d766a <strcpy>:
   d766a:	4603      	mov	r3, r0
   d766c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7670:	f803 2b01 	strb.w	r2, [r3], #1
   d7674:	2a00      	cmp	r2, #0
   d7676:	d1f9      	bne.n	d766c <strcpy+0x2>
   d7678:	4770      	bx	lr

000d767a <strlen>:
   d767a:	4603      	mov	r3, r0
   d767c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7680:	2a00      	cmp	r2, #0
   d7682:	d1fb      	bne.n	d767c <strlen+0x2>
   d7684:	1a18      	subs	r0, r3, r0
   d7686:	3801      	subs	r0, #1
   d7688:	4770      	bx	lr

000d768a <strncmp>:
   d768a:	b510      	push	{r4, lr}
   d768c:	b16a      	cbz	r2, d76aa <strncmp+0x20>
   d768e:	3901      	subs	r1, #1
   d7690:	1884      	adds	r4, r0, r2
   d7692:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7696:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d769a:	4293      	cmp	r3, r2
   d769c:	d103      	bne.n	d76a6 <strncmp+0x1c>
   d769e:	42a0      	cmp	r0, r4
   d76a0:	d001      	beq.n	d76a6 <strncmp+0x1c>
   d76a2:	2b00      	cmp	r3, #0
   d76a4:	d1f5      	bne.n	d7692 <strncmp+0x8>
   d76a6:	1a98      	subs	r0, r3, r2
   d76a8:	bd10      	pop	{r4, pc}
   d76aa:	4610      	mov	r0, r2
   d76ac:	e7fc      	b.n	d76a8 <strncmp+0x1e>

000d76ae <strncpy>:
   d76ae:	b510      	push	{r4, lr}
   d76b0:	3901      	subs	r1, #1
   d76b2:	4603      	mov	r3, r0
   d76b4:	b132      	cbz	r2, d76c4 <strncpy+0x16>
   d76b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d76ba:	f803 4b01 	strb.w	r4, [r3], #1
   d76be:	3a01      	subs	r2, #1
   d76c0:	2c00      	cmp	r4, #0
   d76c2:	d1f7      	bne.n	d76b4 <strncpy+0x6>
   d76c4:	441a      	add	r2, r3
   d76c6:	2100      	movs	r1, #0
   d76c8:	4293      	cmp	r3, r2
   d76ca:	d100      	bne.n	d76ce <strncpy+0x20>
   d76cc:	bd10      	pop	{r4, pc}
   d76ce:	f803 1b01 	strb.w	r1, [r3], #1
   d76d2:	e7f9      	b.n	d76c8 <strncpy+0x1a>

000d76d4 <strrchr>:
   d76d4:	b538      	push	{r3, r4, r5, lr}
   d76d6:	4603      	mov	r3, r0
   d76d8:	460c      	mov	r4, r1
   d76da:	b969      	cbnz	r1, d76f8 <strrchr+0x24>
   d76dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d76e0:	f7ff bfa2 	b.w	d7628 <strchr>
   d76e4:	1c43      	adds	r3, r0, #1
   d76e6:	4605      	mov	r5, r0
   d76e8:	4621      	mov	r1, r4
   d76ea:	4618      	mov	r0, r3
   d76ec:	f7ff ff9c 	bl	d7628 <strchr>
   d76f0:	2800      	cmp	r0, #0
   d76f2:	d1f7      	bne.n	d76e4 <strrchr+0x10>
   d76f4:	4628      	mov	r0, r5
   d76f6:	bd38      	pop	{r3, r4, r5, pc}
   d76f8:	2500      	movs	r5, #0
   d76fa:	e7f5      	b.n	d76e8 <strrchr+0x14>

000d76fc <_strtol_l.isra.0>:
   d76fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7700:	4e3a      	ldr	r6, [pc, #232]	; (d77ec <_strtol_l.isra.0+0xf0>)
   d7702:	4686      	mov	lr, r0
   d7704:	468c      	mov	ip, r1
   d7706:	4660      	mov	r0, ip
   d7708:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d770c:	5da5      	ldrb	r5, [r4, r6]
   d770e:	f015 0508 	ands.w	r5, r5, #8
   d7712:	d1f8      	bne.n	d7706 <_strtol_l.isra.0+0xa>
   d7714:	2c2d      	cmp	r4, #45	; 0x2d
   d7716:	d133      	bne.n	d7780 <_strtol_l.isra.0+0x84>
   d7718:	f89c 4000 	ldrb.w	r4, [ip]
   d771c:	f04f 0801 	mov.w	r8, #1
   d7720:	f100 0c02 	add.w	ip, r0, #2
   d7724:	2b00      	cmp	r3, #0
   d7726:	d05c      	beq.n	d77e2 <_strtol_l.isra.0+0xe6>
   d7728:	2b10      	cmp	r3, #16
   d772a:	d10c      	bne.n	d7746 <_strtol_l.isra.0+0x4a>
   d772c:	2c30      	cmp	r4, #48	; 0x30
   d772e:	d10a      	bne.n	d7746 <_strtol_l.isra.0+0x4a>
   d7730:	f89c 0000 	ldrb.w	r0, [ip]
   d7734:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7738:	2858      	cmp	r0, #88	; 0x58
   d773a:	d14d      	bne.n	d77d8 <_strtol_l.isra.0+0xdc>
   d773c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7740:	2310      	movs	r3, #16
   d7742:	f10c 0c02 	add.w	ip, ip, #2
   d7746:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d774a:	3f01      	subs	r7, #1
   d774c:	2600      	movs	r6, #0
   d774e:	fbb7 f9f3 	udiv	r9, r7, r3
   d7752:	4630      	mov	r0, r6
   d7754:	fb03 7a19 	mls	sl, r3, r9, r7
   d7758:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d775c:	2d09      	cmp	r5, #9
   d775e:	d818      	bhi.n	d7792 <_strtol_l.isra.0+0x96>
   d7760:	462c      	mov	r4, r5
   d7762:	42a3      	cmp	r3, r4
   d7764:	dd24      	ble.n	d77b0 <_strtol_l.isra.0+0xb4>
   d7766:	1c75      	adds	r5, r6, #1
   d7768:	d007      	beq.n	d777a <_strtol_l.isra.0+0x7e>
   d776a:	4581      	cmp	r9, r0
   d776c:	d31d      	bcc.n	d77aa <_strtol_l.isra.0+0xae>
   d776e:	d101      	bne.n	d7774 <_strtol_l.isra.0+0x78>
   d7770:	45a2      	cmp	sl, r4
   d7772:	db1a      	blt.n	d77aa <_strtol_l.isra.0+0xae>
   d7774:	fb00 4003 	mla	r0, r0, r3, r4
   d7778:	2601      	movs	r6, #1
   d777a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d777e:	e7eb      	b.n	d7758 <_strtol_l.isra.0+0x5c>
   d7780:	2c2b      	cmp	r4, #43	; 0x2b
   d7782:	bf08      	it	eq
   d7784:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7788:	46a8      	mov	r8, r5
   d778a:	bf08      	it	eq
   d778c:	f100 0c02 	addeq.w	ip, r0, #2
   d7790:	e7c8      	b.n	d7724 <_strtol_l.isra.0+0x28>
   d7792:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7796:	2d19      	cmp	r5, #25
   d7798:	d801      	bhi.n	d779e <_strtol_l.isra.0+0xa2>
   d779a:	3c37      	subs	r4, #55	; 0x37
   d779c:	e7e1      	b.n	d7762 <_strtol_l.isra.0+0x66>
   d779e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d77a2:	2d19      	cmp	r5, #25
   d77a4:	d804      	bhi.n	d77b0 <_strtol_l.isra.0+0xb4>
   d77a6:	3c57      	subs	r4, #87	; 0x57
   d77a8:	e7db      	b.n	d7762 <_strtol_l.isra.0+0x66>
   d77aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d77ae:	e7e4      	b.n	d777a <_strtol_l.isra.0+0x7e>
   d77b0:	1c73      	adds	r3, r6, #1
   d77b2:	d106      	bne.n	d77c2 <_strtol_l.isra.0+0xc6>
   d77b4:	2322      	movs	r3, #34	; 0x22
   d77b6:	f8ce 3000 	str.w	r3, [lr]
   d77ba:	4638      	mov	r0, r7
   d77bc:	b942      	cbnz	r2, d77d0 <_strtol_l.isra.0+0xd4>
   d77be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77c2:	f1b8 0f00 	cmp.w	r8, #0
   d77c6:	d000      	beq.n	d77ca <_strtol_l.isra.0+0xce>
   d77c8:	4240      	negs	r0, r0
   d77ca:	2a00      	cmp	r2, #0
   d77cc:	d0f7      	beq.n	d77be <_strtol_l.isra.0+0xc2>
   d77ce:	b10e      	cbz	r6, d77d4 <_strtol_l.isra.0+0xd8>
   d77d0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d77d4:	6011      	str	r1, [r2, #0]
   d77d6:	e7f2      	b.n	d77be <_strtol_l.isra.0+0xc2>
   d77d8:	2430      	movs	r4, #48	; 0x30
   d77da:	2b00      	cmp	r3, #0
   d77dc:	d1b3      	bne.n	d7746 <_strtol_l.isra.0+0x4a>
   d77de:	2308      	movs	r3, #8
   d77e0:	e7b1      	b.n	d7746 <_strtol_l.isra.0+0x4a>
   d77e2:	2c30      	cmp	r4, #48	; 0x30
   d77e4:	d0a4      	beq.n	d7730 <_strtol_l.isra.0+0x34>
   d77e6:	230a      	movs	r3, #10
   d77e8:	e7ad      	b.n	d7746 <_strtol_l.isra.0+0x4a>
   d77ea:	bf00      	nop
   d77ec:	000d7b96 	.word	0x000d7b96

000d77f0 <strtol>:
   d77f0:	4613      	mov	r3, r2
   d77f2:	460a      	mov	r2, r1
   d77f4:	4601      	mov	r1, r0
   d77f6:	4802      	ldr	r0, [pc, #8]	; (d7800 <strtol+0x10>)
   d77f8:	6800      	ldr	r0, [r0, #0]
   d77fa:	f7ff bf7f 	b.w	d76fc <_strtol_l.isra.0>
   d77fe:	bf00      	nop
   d7800:	2003e40c 	.word	0x2003e40c

000d7804 <__register_exitproc>:
   d7804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7808:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d78c4 <__register_exitproc+0xc0>
   d780c:	4606      	mov	r6, r0
   d780e:	f8d8 0000 	ldr.w	r0, [r8]
   d7812:	461f      	mov	r7, r3
   d7814:	460d      	mov	r5, r1
   d7816:	4691      	mov	r9, r2
   d7818:	f000 f856 	bl	d78c8 <__retarget_lock_acquire_recursive>
   d781c:	4b25      	ldr	r3, [pc, #148]	; (d78b4 <__register_exitproc+0xb0>)
   d781e:	681c      	ldr	r4, [r3, #0]
   d7820:	b934      	cbnz	r4, d7830 <__register_exitproc+0x2c>
   d7822:	4c25      	ldr	r4, [pc, #148]	; (d78b8 <__register_exitproc+0xb4>)
   d7824:	601c      	str	r4, [r3, #0]
   d7826:	4b25      	ldr	r3, [pc, #148]	; (d78bc <__register_exitproc+0xb8>)
   d7828:	b113      	cbz	r3, d7830 <__register_exitproc+0x2c>
   d782a:	681b      	ldr	r3, [r3, #0]
   d782c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7830:	6863      	ldr	r3, [r4, #4]
   d7832:	2b1f      	cmp	r3, #31
   d7834:	dd07      	ble.n	d7846 <__register_exitproc+0x42>
   d7836:	f8d8 0000 	ldr.w	r0, [r8]
   d783a:	f000 f847 	bl	d78cc <__retarget_lock_release_recursive>
   d783e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7846:	b34e      	cbz	r6, d789c <__register_exitproc+0x98>
   d7848:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d784c:	b988      	cbnz	r0, d7872 <__register_exitproc+0x6e>
   d784e:	4b1c      	ldr	r3, [pc, #112]	; (d78c0 <__register_exitproc+0xbc>)
   d7850:	b923      	cbnz	r3, d785c <__register_exitproc+0x58>
   d7852:	f8d8 0000 	ldr.w	r0, [r8]
   d7856:	f000 f838 	bl	d78ca <__retarget_lock_release>
   d785a:	e7f0      	b.n	d783e <__register_exitproc+0x3a>
   d785c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7860:	f7fd fa08 	bl	d4c74 <malloc>
   d7864:	2800      	cmp	r0, #0
   d7866:	d0f4      	beq.n	d7852 <__register_exitproc+0x4e>
   d7868:	2300      	movs	r3, #0
   d786a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d786e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7872:	6863      	ldr	r3, [r4, #4]
   d7874:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7878:	2201      	movs	r2, #1
   d787a:	409a      	lsls	r2, r3
   d787c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7880:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7884:	4313      	orrs	r3, r2
   d7886:	2e02      	cmp	r6, #2
   d7888:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d788c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7890:	bf02      	ittt	eq
   d7892:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7896:	431a      	orreq	r2, r3
   d7898:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d789c:	6863      	ldr	r3, [r4, #4]
   d789e:	f8d8 0000 	ldr.w	r0, [r8]
   d78a2:	1c5a      	adds	r2, r3, #1
   d78a4:	3302      	adds	r3, #2
   d78a6:	6062      	str	r2, [r4, #4]
   d78a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d78ac:	f000 f80e 	bl	d78cc <__retarget_lock_release_recursive>
   d78b0:	2000      	movs	r0, #0
   d78b2:	e7c6      	b.n	d7842 <__register_exitproc+0x3e>
   d78b4:	2003e7e0 	.word	0x2003e7e0
   d78b8:	2003e754 	.word	0x2003e754
   d78bc:	00000000 	.word	0x00000000
   d78c0:	000d4c75 	.word	0x000d4c75
   d78c4:	2003e470 	.word	0x2003e470

000d78c8 <__retarget_lock_acquire_recursive>:
   d78c8:	4770      	bx	lr

000d78ca <__retarget_lock_release>:
   d78ca:	4770      	bx	lr

000d78cc <__retarget_lock_release_recursive>:
   d78cc:	4770      	bx	lr

000d78ce <link_code_end>:
	...

000d78d0 <dynalib_user>:
   d78d0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d78e0:	0000 0000 4148 2053 4946 3d58 4c00 5441     ....HAS FIX=.LAT
   d78f0:	003d 4f4c 474e 003d 4c41 3d54 0000 0000     =.LONG=.ALT=....

000d7900 <_ZTVN5spark10LogHandlerE>:
	...
   d7910:	40a1 000d 40c5 000d                         .@...@..

000d7918 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7920:	40d1 000d 4105 000d 5f39 000d 40c7 000d     .@...A..9_...@..
   d7930:	5047 4d52 0043 4e47 4d52 0043 5047 4747     GPRMC.GNRMC.GPGG
   d7940:	0041 4e47 4747 0041                         A.GNGGA.

000d7948 <_ZTVN5spark13CellularClassE>:
	...
   d7950:	4d7f 000d 4d75 000d 4d6b 000d 4d21 000d     .M..uM..kM..!M..
   d7960:	4d5f 000d 4d53 000d 6291 000d 6299 000d     _M..SM...b...b..
   d7970:	4d47 000d 4d3f 000d 4d35 000d 4d2b 000d     GM..?M..5M..+M..
   d7980:	62c9 000d                                   .b..

000d7984 <_ZTVN5spark13EthernetClassE>:
	...
   d798c:	4e17 000d 4e0d 000d 4e03 000d 4df9 000d     .N...N...N...M..
   d799c:	4ded 000d 4de1 000d 6291 000d 6299 000d     .M...M...b...b..
   d79ac:	4dd5 000d 4dcd 000d 4dc3 000d 4db9 000d     .M...M...M...M..
   d79bc:	62c9 000d                                   .b..

000d79c0 <_ZTV9IPAddress>:
	...
   d79c8:	4e45 000d 4e35 000d 4e37 000d 6425 2500     EN..5N..7N..%d.%
   d79d8:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   d79e8:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   d79f8:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d7a08:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   d7a18:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d7a28:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d7a38:	0a0d 6d00 6300 6c00 006e 6e66 7400 6300     ...m.c.ln.fn.t.c
   d7a48:	646f 0065 6564 6174 6c69 0000               ode.detail..

000d7a54 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7a5c:	5301 000d 5327 000d 52e5 000d 4f45 000d     .S..'S...R..EO..

000d7a6c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7a74:	5755 000d 576d 000d 5f39 000d 40c7 000d     UW..mW..9_...@..

000d7a84 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7a8c:	5781 000d 5795 000d 60dd 000d 52ed 000d     .W...W...`...R..

000d7a9c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7aa4:	52ff 000d 5335 000d 5e75 000d 52ef 000d     .R..5S..u^...R..

000d7ab4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7abc:	52fd 000d 5343 000d 569d 000d 5361 000d     .R..CS...V..aS..

000d7acc <_ZTVN5spark12NetworkClassE>:
	...
   d7ad4:	6251 000d 625b 000d 6265 000d 626f 000d     Qb..[b..eb..ob..
   d7ae4:	6279 000d 6285 000d 6291 000d 6299 000d     yb...b...b...b..
   d7af4:	62a1 000d 62ad 000d 62b5 000d 62bf 000d     .b...b...b...b..
   d7b04:	62c9 000d 616e 006e 6e69 0066 766f 0066     .b..nan.inf.ovf.
   d7b14:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d7b24:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7b34 <_ZTV11USARTSerial>:
	...
   d7b3c:	68ad 000d 691b 000d 68f3 000d 63b1 000d     .h...i...h...c..
   d7b4c:	68c3 000d 68df 000d 68d1 000d 68ed 000d     .h...h...h...h..
   d7b5c:	68af 000d 68b5 000d                         .h...h..

000d7b64 <_ZTV9USBSerial>:
	...
   d7b6c:	69bb 000d 6a23 000d 69f9 000d 63b1 000d     .i..#j...i...c..
   d7b7c:	69eb 000d 69bd 000d 69cd 000d 6a1d 000d     .i...i...i...j..
   d7b8c:	69dd 000d 69b5 000d                         .i...i..

000d7b94 <_ZSt7nothrow>:
	...

000d7b95 <_ctype_>:
   d7b95:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7ba5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7bb5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7bc5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7bd5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7be5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7bf5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7c05:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7c15:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7c96 <link_const_variable_data_end>:
	...

000d7c98 <link_constructors_location>:
   d7c98:	000d4335 	.word	0x000d4335
   d7c9c:	000d4d11 	.word	0x000d4d11
   d7ca0:	000d4d89 	.word	0x000d4d89
   d7ca4:	000d4e21 	.word	0x000d4e21
   d7ca8:	000d5f29 	.word	0x000d5f29
   d7cac:	000d639d 	.word	0x000d639d
   d7cb0:	000d6681 	.word	0x000d6681
   d7cb4:	000d6875 	.word	0x000d6875
   d7cb8:	000d6899 	.word	0x000d6899

000d7cbc <link_constructors_end>:
   d7cbc:	00000000 	.word	0x00000000
