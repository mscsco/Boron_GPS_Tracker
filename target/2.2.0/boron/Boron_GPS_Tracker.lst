
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/2.2.0/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ded20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000208  2003dff8  000ded24  0001dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f0  2003e200  2003e200  0002e200  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000def2c  000def2c  0001ef2c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000def58  000def58  0001ef58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00277a36  00000000  00000000  0001ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002674f  00000000  00000000  00296992  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00041ba3  00000000  00000000  002bd0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039e0  00000000  00000000  002fec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000ac60  00000000  00000000  00302664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004a65b  00000000  00000000  0030d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005fd98  00000000  00000000  0035791f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012c6b6  00000000  00000000  003b76b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ae64  00000000  00000000  004e3d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 ff16 	bl	dbe62 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 ff38 	bl	dbeb2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dff8 	.word	0x2003dff8
   d404c:	000ded24 	.word	0x000ded24
   d4050:	2003e200 	.word	0x2003e200
   d4054:	2003e200 	.word	0x2003e200
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fecd 	bl	dae00 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dece4 	.word	0x000dece4
   d4080:	000ded1c 	.word	0x000ded1c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b860 	b.w	d4148 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 faad 	bl	d45e8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 be6d 	b.w	dad70 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bc81 	b.w	d799c <malloc>

000d409a <_Znaj>:
   d409a:	f003 bc7f 	b.w	d799c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bc85 	b.w	d79ac <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fb88 	bl	d77c0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d73f1 	.word	0x000d73f1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 fb3e 	bl	d575c <_ZN10JsonWriterD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000de010 	.word	0x000de010

000d40e8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f6:	f006 ffc3 	bl	db080 <_ZdlPvj>
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
	...

000d4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
   d4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4108:	f004 fdc0 	bl	d8c8c <_ZN5spark10LogManager8instanceEv>
   d410c:	4621      	mov	r1, r4
   d410e:	f004 ffbe 	bl	d908e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4112:	f006 fde5 	bl	dace0 <_Z16_fetch_usbserialv>
   d4116:	f006 fdd7 	bl	dacc8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411a:	4620      	mov	r0, r4
   d411c:	4b04      	ldr	r3, [pc, #16]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411e:	f840 3b04 	str.w	r3, [r0], #4
   d4122:	f004 fea1 	bl	d8e68 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	000ddff8 	.word	0x000ddff8
   d4130:	000ddfe0 	.word	0x000ddfe0

000d4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
    }
   d4138:	f7ff ffe2 	bl	d4100 <_ZN5spark16SerialLogHandlerD1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2124      	movs	r1, #36	; 0x24
   d4140:	f006 ff9e 	bl	db080 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <setup>:

// product/version
PRODUCT_ID(16112)
PRODUCT_VERSION(4)

void setup() {
   d4148:	b510      	push	{r4, lr}
    //setup serial port
    Serial.begin(9600);
   d414a:	f006 fdc9 	bl	dace0 <_Z16_fetch_usbserialv>
   d414e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4152:	f006 fdb5 	bl	dacc0 <_ZN9USBSerial5beginEl>
  
    //setup GPS port
    Serial1.begin(9600);
   d4156:	f006 fd3b 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415e:	f006 fd31 	bl	dabc4 <_ZN11USARTSerial5beginEm>

    //setup BME sensor
    bme.begin();
   d4162:	481a      	ldr	r0, [pc, #104]	; (d41cc <setup+0x84>)
   d4164:	f001 facf 	bl	d5706 <_ZN15Adafruit_BME2805beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4168:	4919      	ldr	r1, [pc, #100]	; (d41d0 <setup+0x88>)
   d416a:	481a      	ldr	r0, [pc, #104]	; (d41d4 <setup+0x8c>)
   d416c:	2300      	movs	r3, #0
   d416e:	2202      	movs	r2, #2
   d4170:	f003 fb84 	bl	d787c <spark_variable>
   d4174:	4918      	ldr	r1, [pc, #96]	; (d41d8 <setup+0x90>)
   d4176:	4819      	ldr	r0, [pc, #100]	; (d41dc <setup+0x94>)
   d4178:	2300      	movs	r3, #0
   d417a:	2202      	movs	r2, #2
   d417c:	f003 fb7e 	bl	d787c <spark_variable>
   d4180:	4917      	ldr	r1, [pc, #92]	; (d41e0 <setup+0x98>)
   d4182:	4818      	ldr	r0, [pc, #96]	; (d41e4 <setup+0x9c>)
   d4184:	2300      	movs	r3, #0
   d4186:	2202      	movs	r2, #2
   d4188:	f003 fb78 	bl	d787c <spark_variable>
   d418c:	4916      	ldr	r1, [pc, #88]	; (d41e8 <setup+0xa0>)
   d418e:	4817      	ldr	r0, [pc, #92]	; (d41ec <setup+0xa4>)
   d4190:	2300      	movs	r3, #0
   d4192:	2202      	movs	r2, #2
   d4194:	f003 fb72 	bl	d787c <spark_variable>
   d4198:	4915      	ldr	r1, [pc, #84]	; (d41f0 <setup+0xa8>)
   d419a:	4816      	ldr	r0, [pc, #88]	; (d41f4 <setup+0xac>)
   d419c:	2300      	movs	r3, #0
   d419e:	2202      	movs	r2, #2
   d41a0:	f003 fb6c 	bl	d787c <spark_variable>
   d41a4:	4914      	ldr	r1, [pc, #80]	; (d41f8 <setup+0xb0>)
   d41a6:	4815      	ldr	r0, [pc, #84]	; (d41fc <setup+0xb4>)
   d41a8:	2300      	movs	r3, #0
   d41aa:	2209      	movs	r2, #9
   d41ac:	f003 fb66 	bl	d787c <spark_variable>
   d41b0:	4913      	ldr	r1, [pc, #76]	; (d4200 <setup+0xb8>)
   d41b2:	4814      	ldr	r0, [pc, #80]	; (d4204 <setup+0xbc>)
   d41b4:	2300      	movs	r3, #0
   d41b6:	2209      	movs	r2, #9
   d41b8:	f003 fb60 	bl	d787c <spark_variable>
    Particle.variable("percent_charge", percent_charge);    
    Particle.variable("longitude", &longitude, DOUBLE);
    Particle.variable("latitude", &latitude, DOUBLE);
    Particle.variable("altitude", &altitude, DOUBLE);

}
   d41bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41c0:	4911      	ldr	r1, [pc, #68]	; (d4208 <setup+0xc0>)
   d41c2:	4812      	ldr	r0, [pc, #72]	; (d420c <setup+0xc4>)
   d41c4:	2300      	movs	r3, #0
   d41c6:	2209      	movs	r2, #9
   d41c8:	f003 bb58 	b.w	d787c <spark_variable>
   d41cc:	2003e210 	.word	0x2003e210
   d41d0:	2003e388 	.word	0x2003e388
   d41d4:	000ddf08 	.word	0x000ddf08
   d41d8:	2003e334 	.word	0x2003e334
   d41dc:	000ddf0f 	.word	0x000ddf0f
   d41e0:	2003e380 	.word	0x2003e380
   d41e4:	000ddf18 	.word	0x000ddf18
   d41e8:	2003e37c 	.word	0x2003e37c
   d41ec:	000ddf28 	.word	0x000ddf28
   d41f0:	2003e378 	.word	0x2003e378
   d41f4:	000ddf37 	.word	0x000ddf37
   d41f8:	2003e370 	.word	0x2003e370
   d41fc:	000ddf46 	.word	0x000ddf46
   d4200:	2003e340 	.word	0x2003e340
   d4204:	000ddf50 	.word	0x000ddf50
   d4208:	2003e208 	.word	0x2003e208
   d420c:	000ddf59 	.word	0x000ddf59

000d4210 <_Z6getGPSv>:
        }
    }
    
}

void getGPS() {
   d4210:	e92d 43df 	stmdb	sp!, {r0, r1, r2, r3, r4, r6, r7, r8, r9, lr}
struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4214:	a72a      	add	r7, pc, #168	; (adr r7, d42c0 <_Z6getGPSv+0xb0>)
   d4216:	e9d7 6700 	ldrd	r6, r7, [r7]
    while(Serial1.available())
    {
        if(gps.encode(Serial1.read()))
   d421a:	4c25      	ldr	r4, [pc, #148]	; (d42b0 <_Z6getGPSv+0xa0>)
   d421c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d42c8 <_Z6getGPSv+0xb8>
   d4220:	f04f 0800 	mov.w	r8, #0
    while(Serial1.available())
   d4224:	f006 fcd4 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d4228:	6803      	ldr	r3, [r0, #0]
   d422a:	691b      	ldr	r3, [r3, #16]
   d422c:	4798      	blx	r3
   d422e:	2800      	cmp	r0, #0
   d4230:	d03b      	beq.n	d42aa <_Z6getGPSv+0x9a>
        if(gps.encode(Serial1.read()))
   d4232:	f006 fccd 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d4236:	6803      	ldr	r3, [r0, #0]
   d4238:	695b      	ldr	r3, [r3, #20]
   d423a:	4798      	blx	r3
   d423c:	b2c1      	uxtb	r1, r0
   d423e:	481c      	ldr	r0, [pc, #112]	; (d42b0 <_Z6getGPSv+0xa0>)
   d4240:	f000 fe60 	bl	d4f04 <_ZN11TinyGPSPlus6encodeEc>
   d4244:	2800      	cmp	r0, #0
   d4246:	d0ed      	beq.n	d4224 <_Z6getGPSv+0x14>
        {
            String msg = Serial1.readStringUntil('\r');
   d4248:	f006 fcc2 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d424c:	220d      	movs	r2, #13
   d424e:	4601      	mov	r1, r0
   d4250:	4668      	mov	r0, sp
   d4252:	f005 fd9f 	bl	d9d94 <_ZN6Stream15readStringUntilEc>
            Serial.println(msg);
   d4256:	f006 fd43 	bl	dace0 <_Z16_fetch_usbserialv>
   d425a:	9900      	ldr	r1, [sp, #0]
   d425c:	f005 fc77 	bl	d9b4e <_ZN5Print7printlnEPKc>

            if (gps.sentencesWithFix() > 0) {
   d4260:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4264:	b1eb      	cbz	r3, d42a2 <_Z6getGPSv+0x92>
                latitude = gps.location.lat();
   d4266:	4620      	mov	r0, r4
   d4268:	f000 fc7e 	bl	d4b68 <_ZN15TinyGPSLocation3latEv>
   d426c:	4b11      	ldr	r3, [pc, #68]	; (d42b4 <_Z6getGPSv+0xa4>)
                longitude = gps.location.lng();
   d426e:	4620      	mov	r0, r4
                latitude = gps.location.lat();
   d4270:	ed83 0b00 	vstr	d0, [r3]
                longitude = gps.location.lng();
   d4274:	f000 fc9c 	bl	d4bb0 <_ZN15TinyGPSLocation3lngEv>
   d4278:	4b0f      	ldr	r3, [pc, #60]	; (d42b8 <_Z6getGPSv+0xa8>)
   d427a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d427e:	ed83 0b00 	vstr	d0, [r3]
   int32_t value()         { updated = false; return val; }
   d4282:	2300      	movs	r3, #0
   d4284:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4288:	f007 fa24 	bl	db6d4 <__aeabi_i2d>
   d428c:	4632      	mov	r2, r6
   d428e:	463b      	mov	r3, r7
   d4290:	f007 fa8a 	bl	db7a8 <__aeabi_dmul>
   d4294:	464b      	mov	r3, r9
   d4296:	4642      	mov	r2, r8
   d4298:	f007 fbb0 	bl	db9fc <__aeabi_ddiv>
                altitude = gps.altitude.feet();
   d429c:	4b07      	ldr	r3, [pc, #28]	; (d42bc <_Z6getGPSv+0xac>)
   d429e:	e9c3 0100 	strd	r0, r1, [r3]
            String msg = Serial1.readStringUntil('\r');
   d42a2:	4668      	mov	r0, sp
   d42a4:	f005 fd8e 	bl	d9dc4 <_ZN6StringD1Ev>
   d42a8:	e7bc      	b.n	d4224 <_Z6getGPSv+0x14>
            }

        }
    }  

}
   d42aa:	b004      	add	sp, #16
   d42ac:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d42b0:	2003e25c 	.word	0x2003e25c
   d42b4:	2003e340 	.word	0x2003e340
   d42b8:	2003e370 	.word	0x2003e370
   d42bc:	2003e208 	.word	0x2003e208
   d42c0:	fd4f4b98 	.word	0xfd4f4b98
   d42c4:	400a3f28 	.word	0x400a3f28
   d42c8:	40590000 	.word	0x40590000

000d42cc <_Z11getLocationv>:
  //add Ubidots variables
  getLocation();

}

void getLocation() {
   d42cc:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Reserves 10 bytes of memory to store context keys values, add as much as needed */
    char *str_lat = (char *)malloc(sizeof(char) * 10);
   d42ce:	200a      	movs	r0, #10
void getLocation() {
   d42d0:	b093      	sub	sp, #76	; 0x4c
    char *str_lat = (char *)malloc(sizeof(char) * 10);
   d42d2:	f003 fb63 	bl	d799c <malloc>
   d42d6:	4606      	mov	r6, r0
    char *str_lng = (char *)malloc(sizeof(char) * 10);
   d42d8:	200a      	movs	r0, #10
   d42da:	f003 fb5f 	bl	d799c <malloc>

    /* Saves the coordinates as char*/
    sprintf(str_lat, "%f", latitude);
   d42de:	4b42      	ldr	r3, [pc, #264]	; (d43e8 <_Z11getLocationv+0x11c>)
   d42e0:	4942      	ldr	r1, [pc, #264]	; (d43ec <_Z11getLocationv+0x120>)
   d42e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    char *str_lng = (char *)malloc(sizeof(char) * 10);
   d42e6:	4605      	mov	r5, r0
    sprintf(str_lat, "%f", latitude);
   d42e8:	4630      	mov	r0, r6
   d42ea:	f003 fb6f 	bl	d79cc <sprintf>
    sprintf(str_lng, "%f", longitude);
   d42ee:	4b40      	ldr	r3, [pc, #256]	; (d43f0 <_Z11getLocationv+0x124>)
   d42f0:	493e      	ldr	r1, [pc, #248]	; (d43ec <_Z11getLocationv+0x120>)
   d42f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f6:	4628      	mov	r0, r5
   d42f8:	f003 fb68 	bl	d79cc <sprintf>

    /* Reserves memory to store context array */
    char *context = (char *)malloc(sizeof(char) * 50);
   d42fc:	2032      	movs	r0, #50	; 0x32
   d42fe:	f003 fb4d 	bl	d799c <malloc>

    /* Adds context key-value pairs */
    char latLabel[] = "lat";
   d4302:	4b3c      	ldr	r3, [pc, #240]	; (d43f4 <_Z11getLocationv+0x128>)
   d4304:	9301      	str	r3, [sp, #4]
    char lngLabel[] = "lng";
   d4306:	f5a3 234f 	sub.w	r3, r3, #847872	; 0xcf000
   d430a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
    char *context = (char *)malloc(sizeof(char) * 50);
   d430e:	4604      	mov	r4, r0
    ubidots.addContext(latLabel, str_lat);
   d4310:	4632      	mov	r2, r6
   d4312:	4839      	ldr	r0, [pc, #228]	; (d43f8 <_Z11getLocationv+0x12c>)
    char lngLabel[] = "lng";
   d4314:	9302      	str	r3, [sp, #8]
    ubidots.addContext(latLabel, str_lat);
   d4316:	a901      	add	r1, sp, #4
   d4318:	f002 ffb0 	bl	d727c <_ZN7Ubidots10addContextEPcS0_>
    ubidots.addContext(lngLabel, str_lng);
   d431c:	462a      	mov	r2, r5
   d431e:	4836      	ldr	r0, [pc, #216]	; (d43f8 <_Z11getLocationv+0x12c>)
   d4320:	a902      	add	r1, sp, #8
   d4322:	f002 ffab 	bl	d727c <_ZN7Ubidots10addContextEPcS0_>

    /* Builds the context with the coordinates to send to Ubidots */
    ubidots.getContext(context);
   d4326:	4834      	ldr	r0, [pc, #208]	; (d43f8 <_Z11getLocationv+0x12c>)
   d4328:	4621      	mov	r1, r4
   d432a:	f003 f82d 	bl	d7388 <_ZN7Ubidots10getContextEPc>

    /* Sends the position */
    char positionLabel[] = "position";
   d432e:	4a33      	ldr	r2, [pc, #204]	; (d43fc <_Z11getLocationv+0x130>)
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   d4330:	ed9f 0a33 	vldr	s0, [pc, #204]	; d4400 <_Z11getLocationv+0x134>
    char positionLabel[] = "position";
   d4334:	6810      	ldr	r0, [r2, #0]
   d4336:	6851      	ldr	r1, [r2, #4]
   d4338:	7a12      	ldrb	r2, [r2, #8]
   d433a:	ab05      	add	r3, sp, #20
   d433c:	c303      	stmia	r3!, {r0, r1}
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   d433e:	482e      	ldr	r0, [pc, #184]	; (d43f8 <_Z11getLocationv+0x12c>)
    char positionLabel[] = "position";
   d4340:	701a      	strb	r2, [r3, #0]
    ubidots.add(positionLabel, 0, context); // Change for your variable name
   d4342:	a905      	add	r1, sp, #20
   d4344:	4622      	mov	r2, r4
   d4346:	f002 ff8d 	bl	d7264 <_ZN7Ubidots3addEPcfS0_>

    //other vars
    char tempLabel[] = "Temperature in Fahrenheit";
   d434a:	4b2e      	ldr	r3, [pc, #184]	; (d4404 <_Z11getLocationv+0x138>)
   d434c:	aa0b      	add	r2, sp, #44	; 0x2c
   d434e:	f103 0e18 	add.w	lr, r3, #24
   d4352:	4694      	mov	ip, r2
   d4354:	6818      	ldr	r0, [r3, #0]
   d4356:	6859      	ldr	r1, [r3, #4]
   d4358:	4617      	mov	r7, r2
   d435a:	c703      	stmia	r7!, {r0, r1}
   d435c:	3308      	adds	r3, #8
   d435e:	4573      	cmp	r3, lr
   d4360:	463a      	mov	r2, r7
   d4362:	d1f7      	bne.n	d4354 <_Z11getLocationv+0x88>
    char humidityLabel[] = "Humidity";
   d4364:	4a28      	ldr	r2, [pc, #160]	; (d4408 <_Z11getLocationv+0x13c>)
    char tempLabel[] = "Temperature in Fahrenheit";
   d4366:	881b      	ldrh	r3, [r3, #0]
    char humidityLabel[] = "Humidity";
   d4368:	6810      	ldr	r0, [r2, #0]
   d436a:	6851      	ldr	r1, [r2, #4]
    char tempLabel[] = "Temperature in Fahrenheit";
   d436c:	803b      	strh	r3, [r7, #0]
    char humidityLabel[] = "Humidity";
   d436e:	ab08      	add	r3, sp, #32
   d4370:	c303      	stmia	r3!, {r0, r1}
   d4372:	7a12      	ldrb	r2, [r2, #8]
   d4374:	701a      	strb	r2, [r3, #0]
    char batteryLabel[] = "Battery";
   d4376:	4a25      	ldr	r2, [pc, #148]	; (d440c <_Z11getLocationv+0x140>)
   d4378:	6810      	ldr	r0, [r2, #0]
   d437a:	6851      	ldr	r1, [r2, #4]
   d437c:	ab03      	add	r3, sp, #12
   d437e:	c303      	stmia	r3!, {r0, r1}

    ubidots.add(tempLabel, temp_f);
   d4380:	4b23      	ldr	r3, [pc, #140]	; (d4410 <_Z11getLocationv+0x144>)
   d4382:	481d      	ldr	r0, [pc, #116]	; (d43f8 <_Z11getLocationv+0x12c>)
   d4384:	ed93 0a00 	vldr	s0, [r3]
   d4388:	4661      	mov	r1, ip
   d438a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d438e:	f002 ff60 	bl	d7252 <_ZN7Ubidots3addEPcf>
    ubidots.add(humidityLabel, humidity);
   d4392:	4b20      	ldr	r3, [pc, #128]	; (d4414 <_Z11getLocationv+0x148>)
   d4394:	4818      	ldr	r0, [pc, #96]	; (d43f8 <_Z11getLocationv+0x12c>)
   d4396:	ed93 0a00 	vldr	s0, [r3]
   d439a:	a908      	add	r1, sp, #32
   d439c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d43a0:	f002 ff57 	bl	d7252 <_ZN7Ubidots3addEPcf>
    ubidots.add(batteryLabel, percent_charge);
   d43a4:	4b1c      	ldr	r3, [pc, #112]	; (d4418 <_Z11getLocationv+0x14c>)
   d43a6:	4814      	ldr	r0, [pc, #80]	; (d43f8 <_Z11getLocationv+0x12c>)
   d43a8:	ed93 0a00 	vldr	s0, [r3]
   d43ac:	a903      	add	r1, sp, #12
   d43ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d43b2:	f002 ff4e 	bl	d7252 <_ZN7Ubidots3addEPcf>

    bool bufferSent = false;
    bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); // Will use particle webhooks to send data
   d43b6:	4b19      	ldr	r3, [pc, #100]	; (d441c <_Z11getLocationv+0x150>)
   d43b8:	480f      	ldr	r0, [pc, #60]	; (d43f8 <_Z11getLocationv+0x12c>)
   d43ba:	781a      	ldrb	r2, [r3, #0]
   d43bc:	4b18      	ldr	r3, [pc, #96]	; (d4420 <_Z11getLocationv+0x154>)
   d43be:	6819      	ldr	r1, [r3, #0]
   d43c0:	f002 ff58 	bl	d7274 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

    if (bufferSent)
   d43c4:	b120      	cbz	r0, d43d0 <_Z11getLocationv+0x104>
    {
        // Do something if values were sent properly
        Serial.println("Values sent by the device");
   d43c6:	f006 fc8b 	bl	dace0 <_Z16_fetch_usbserialv>
   d43ca:	4916      	ldr	r1, [pc, #88]	; (d4424 <_Z11getLocationv+0x158>)
   d43cc:	f005 fbbf 	bl	d9b4e <_ZN5Print7printlnEPKc>
    }

    /* frees memory */
    free(str_lat);
   d43d0:	4630      	mov	r0, r6
   d43d2:	f003 faeb 	bl	d79ac <free>
    free(str_lng);
   d43d6:	4628      	mov	r0, r5
   d43d8:	f003 fae8 	bl	d79ac <free>
    free(context);
   d43dc:	4620      	mov	r0, r4
   d43de:	f003 fae5 	bl	d79ac <free>
}
   d43e2:	b013      	add	sp, #76	; 0x4c
   d43e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43e6:	bf00      	nop
   d43e8:	2003e340 	.word	0x2003e340
   d43ec:	000ddf62 	.word	0x000ddf62
   d43f0:	2003e370 	.word	0x2003e370
   d43f4:	0074616c 	.word	0x0074616c
   d43f8:	2003e38c 	.word	0x2003e38c
   d43fc:	000ddf7f 	.word	0x000ddf7f
   d4400:	00000000 	.word	0x00000000
   d4404:	000ddf88 	.word	0x000ddf88
   d4408:	000ddfa2 	.word	0x000ddfa2
   d440c:	000ddfab 	.word	0x000ddfab
   d4410:	2003e388 	.word	0x2003e388
   d4414:	2003e334 	.word	0x2003e334
   d4418:	2003e378 	.word	0x2003e378
   d441c:	2003e200 	.word	0x2003e200
   d4420:	2003dff8 	.word	0x2003dff8
   d4424:	000ddf65 	.word	0x000ddf65

000d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4428:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d442a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d442e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4430:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4432:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4436:	42ae      	cmp	r6, r5
   d4438:	d004      	beq.n	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d443a:	4628      	mov	r0, r5
   d443c:	f005 fcc2 	bl	d9dc4 <_ZN6StringD1Ev>
   d4440:	3514      	adds	r5, #20
   d4442:	e7f8      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4444:	6820      	ldr	r0, [r4, #0]
   d4446:	f003 fab1 	bl	d79ac <free>
    AllocatorT::free(data_);
}
   d444a:	4620      	mov	r0, r4
   d444c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d4450:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4452:	4604      	mov	r4, r0
   d4454:	4615      	mov	r5, r2
   d4456:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   d4458:	f001 fa8c 	bl	d5974 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d445c:	9901      	ldr	r1, [sp, #4]
   d445e:	2201      	movs	r2, #1
   d4460:	4620      	mov	r0, r4
   d4462:	f001 f9f5 	bl	d5850 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d4466:	4620      	mov	r0, r4
   d4468:	213a      	movs	r1, #58	; 0x3a
   d446a:	f001 f9a5 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   d446e:	4904      	ldr	r1, [pc, #16]	; (d4480 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   d4470:	462a      	mov	r2, r5
   d4472:	4620      	mov	r0, r4
	}
   d4474:	b003      	add	sp, #12
   d4476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   d447a:	f001 b9dc 	b.w	d5836 <_ZN10JsonWriter13insertsprintfEPKcz>
   d447e:	bf00      	nop
   d4480:	000de824 	.word	0x000de824

000d4484 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d4484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4486:	4604      	mov	r4, r0
   d4488:	ed8d 0b00 	vstr	d0, [sp]
   d448c:	9103      	str	r1, [sp, #12]
		insertCheckSeparator();
   d448e:	f001 fa71 	bl	d5974 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d4492:	9903      	ldr	r1, [sp, #12]
   d4494:	2201      	movs	r2, #1
   d4496:	4620      	mov	r0, r4
   d4498:	f001 f9da 	bl	d5850 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d449c:	4620      	mov	r0, r4
   d449e:	213a      	movs	r1, #58	; 0x3a
   d44a0:	f001 f98a 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d44a4:	ed9d 0b00 	vldr	d0, [sp]
   d44a8:	4620      	mov	r0, r4
	}
   d44aa:	b004      	add	sp, #16
   d44ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   d44b0:	f001 ba84 	b.w	d59bc <_ZN10JsonWriter11insertValueEd>

000d44b4 <_Z18createEventPayloadiiiiiiiddd>:
{
   d44b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d44b6:	ed2d 8b04 	vpush	{d8-d9}
   d44ba:	eeb0 9a41 	vmov.f32	s18, s2
   d44be:	eef0 9a61 	vmov.f32	s19, s3
   d44c2:	eeb0 8a42 	vmov.f32	s16, s4
   d44c6:	eef0 8a62 	vmov.f32	s17, s5
   d44ca:	b0d3      	sub	sp, #332	; 0x14c
   d44cc:	4607      	mov	r7, r0
   d44ce:	460e      	mov	r6, r1
   d44d0:	4615      	mov	r5, r2
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d44d2:	a912      	add	r1, sp, #72	; 0x48
   d44d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   d44d8:	a806      	add	r0, sp, #24
   d44da:	ed8d 0b02 	vstr	d0, [sp, #8]
   d44de:	461c      	mov	r4, r3
   d44e0:	f001 f958 	bl	d5794 <_ZN10JsonWriterC1EPcj>
   d44e4:	4b33      	ldr	r3, [pc, #204]	; (d45b4 <_Z18createEventPayloadiiiiiiiddd+0x100>)
   d44e6:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   d44e8:	227d      	movs	r2, #125	; 0x7d
   d44ea:	217b      	movs	r1, #123	; 0x7b
   d44ec:	a806      	add	r0, sp, #24
   d44ee:	f001 fa4c 	bl	d598a <_ZN10JsonWriter18startObjectOrArrayEcc>
    jw.insertKeyValue("temp_c", temp_c);
   d44f2:	4931      	ldr	r1, [pc, #196]	; (d45b8 <_Z18createEventPayloadiiiiiiiddd+0x104>)
   d44f4:	463a      	mov	r2, r7
   d44f6:	a806      	add	r0, sp, #24
   d44f8:	f7ff ffaa 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("temp_f", temp_f);
   d44fc:	492f      	ldr	r1, [pc, #188]	; (d45bc <_Z18createEventPayloadiiiiiiiddd+0x108>)
   d44fe:	4632      	mov	r2, r6
   d4500:	a806      	add	r0, sp, #24
   d4502:	f7ff ffa5 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d4506:	492e      	ldr	r1, [pc, #184]	; (d45c0 <_Z18createEventPayloadiiiiiiiddd+0x10c>)
   d4508:	462a      	mov	r2, r5
   d450a:	a806      	add	r0, sp, #24
   d450c:	f7ff ffa0 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("voltage", voltage);
   d4510:	4622      	mov	r2, r4
   d4512:	492c      	ldr	r1, [pc, #176]	; (d45c4 <_Z18createEventPayloadiiiiiiiddd+0x110>)
   d4514:	a806      	add	r0, sp, #24
   d4516:	f7ff ff9b 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("percent_charge", percent_charge);
   d451a:	9a5c      	ldr	r2, [sp, #368]	; 0x170
   d451c:	492a      	ldr	r1, [pc, #168]	; (d45c8 <_Z18createEventPayloadiiiiiiiddd+0x114>)
   d451e:	a806      	add	r0, sp, #24
   d4520:	f7ff ff96 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_strength", signal_strength );
   d4524:	9a5d      	ldr	r2, [sp, #372]	; 0x174
   d4526:	4929      	ldr	r1, [pc, #164]	; (d45cc <_Z18createEventPayloadiiiiiiiddd+0x118>)
   d4528:	a806      	add	r0, sp, #24
   d452a:	f7ff ff91 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_quality", signal_quality);
   d452e:	9a5e      	ldr	r2, [sp, #376]	; 0x178
   d4530:	4927      	ldr	r1, [pc, #156]	; (d45d0 <_Z18createEventPayloadiiiiiiiddd+0x11c>)
   d4532:	a806      	add	r0, sp, #24
   d4534:	f7ff ff8c 	bl	d4450 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("longitude", longitude);
   d4538:	ed9d 0b02 	vldr	d0, [sp, #8]
   d453c:	4925      	ldr	r1, [pc, #148]	; (d45d4 <_Z18createEventPayloadiiiiiiiddd+0x120>)
   d453e:	a806      	add	r0, sp, #24
   d4540:	f7ff ffa0 	bl	d4484 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("latitude", latitude);
   d4544:	eeb0 0a49 	vmov.f32	s0, s18
   d4548:	eef0 0a69 	vmov.f32	s1, s19
   d454c:	4922      	ldr	r1, [pc, #136]	; (d45d8 <_Z18createEventPayloadiiiiiiiddd+0x124>)
   d454e:	a806      	add	r0, sp, #24
   d4550:	f7ff ff98 	bl	d4484 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("altitude", altitude);
   d4554:	eeb0 0a48 	vmov.f32	s0, s16
   d4558:	eef0 0a68 	vmov.f32	s1, s17
   d455c:	491f      	ldr	r1, [pc, #124]	; (d45dc <_Z18createEventPayloadiiiiiiiddd+0x128>)
   d455e:	a806      	add	r0, sp, #24
   d4560:	f7ff ff90 	bl	d4484 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4564:	a806      	add	r0, sp, #24
   d4566:	f001 f935 	bl	d57d4 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d456a:	4b1d      	ldr	r3, [pc, #116]	; (d45e0 <_Z18createEventPayloadiiiiiiiddd+0x12c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d456c:	9a07      	ldr	r2, [sp, #28]
   d456e:	781b      	ldrb	r3, [r3, #0]
   d4570:	f88d 3000 	strb.w	r3, [sp]
   d4574:	491b      	ldr	r1, [pc, #108]	; (d45e4 <_Z18createEventPayloadiiiiiiiddd+0x130>)
   d4576:	233c      	movs	r3, #60	; 0x3c
   d4578:	a804      	add	r0, sp, #16
   d457a:	f003 fced 	bl	d7f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d457e:	9c05      	ldr	r4, [sp, #20]
   d4580:	b17c      	cbz	r4, d45a2 <_Z18createEventPayloadiiiiiiiddd+0xee>
      if (--_M_use_count == 0)
   d4582:	6863      	ldr	r3, [r4, #4]
   d4584:	3b01      	subs	r3, #1
   d4586:	6063      	str	r3, [r4, #4]
   d4588:	b95b      	cbnz	r3, d45a2 <_Z18createEventPayloadiiiiiiiddd+0xee>
          _M_dispose();
   d458a:	6823      	ldr	r3, [r4, #0]
   d458c:	4620      	mov	r0, r4
   d458e:	689b      	ldr	r3, [r3, #8]
   d4590:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4592:	68a3      	ldr	r3, [r4, #8]
   d4594:	3b01      	subs	r3, #1
   d4596:	60a3      	str	r3, [r4, #8]
   d4598:	b91b      	cbnz	r3, d45a2 <_Z18createEventPayloadiiiiiiiddd+0xee>
            _M_destroy();
   d459a:	6823      	ldr	r3, [r4, #0]
   d459c:	4620      	mov	r0, r4
   d459e:	68db      	ldr	r3, [r3, #12]
   d45a0:	4798      	blx	r3
  getLocation();
   d45a2:	f7ff fe93 	bl	d42cc <_Z11getLocationv>
  JsonWriterStatic<256> jw;
   d45a6:	a806      	add	r0, sp, #24
   d45a8:	f7ff fd94 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>
}
   d45ac:	b053      	add	sp, #332	; 0x14c
   d45ae:	ecbd 8b04 	vpop	{d8-d9}
   d45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45b4:	000de010 	.word	0x000de010
   d45b8:	000ddfb3 	.word	0x000ddfb3
   d45bc:	000ddf08 	.word	0x000ddf08
   d45c0:	000ddf0f 	.word	0x000ddf0f
   d45c4:	000ddfba 	.word	0x000ddfba
   d45c8:	000ddf37 	.word	0x000ddf37
   d45cc:	000ddf18 	.word	0x000ddf18
   d45d0:	000ddf28 	.word	0x000ddf28
   d45d4:	000ddf46 	.word	0x000ddf46
   d45d8:	000ddf50 	.word	0x000ddf50
   d45dc:	000ddf59 	.word	0x000ddf59
   d45e0:	2003e201 	.word	0x2003e201
   d45e4:	000ddfc2 	.word	0x000ddfc2

000d45e8 <loop>:
void loop() {
   d45e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d45ec:	ed2d 8b04 	vpush	{d8-d9}
   d45f0:	b092      	sub	sp, #72	; 0x48

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45f2:	f002 ff05 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
    if((currentMillis - lastCheck > delay_millis) | first_loop) //after first loop, wait delay_millis to check again
   d45f6:	4b7e      	ldr	r3, [pc, #504]	; (d47f0 <loop+0x208>)
   d45f8:	497e      	ldr	r1, [pc, #504]	; (d47f4 <loop+0x20c>)
   d45fa:	681a      	ldr	r2, [r3, #0]
   d45fc:	6809      	ldr	r1, [r1, #0]
   d45fe:	4e7e      	ldr	r6, [pc, #504]	; (d47f8 <loop+0x210>)
   d4600:	1a82      	subs	r2, r0, r2
   d4602:	428a      	cmp	r2, r1
   d4604:	d803      	bhi.n	d460e <loop+0x26>
   d4606:	7832      	ldrb	r2, [r6, #0]
   d4608:	2a00      	cmp	r2, #0
   d460a:	f000 80e2 	beq.w	d47d2 <loop+0x1ea>
        lastCheck = currentMillis;
   d460e:	6018      	str	r0, [r3, #0]
        temp_c = (int8_t)bme.readTemperature();
   d4610:	487a      	ldr	r0, [pc, #488]	; (d47fc <loop+0x214>)
   d4612:	4c7b      	ldr	r4, [pc, #492]	; (d4800 <loop+0x218>)
   d4614:	f000 fddc 	bl	d51d0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4618:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d461c:	edcd 7a05 	vstr	s15, [sp, #20]
   d4620:	f99d 0014 	ldrsb.w	r0, [sp, #20]
   d4624:	6020      	str	r0, [r4, #0]
        temp_f = (temp_c * 1.8) + 32;
   d4626:	f007 f855 	bl	db6d4 <__aeabi_i2d>
   d462a:	a36f      	add	r3, pc, #444	; (adr r3, d47e8 <loop+0x200>)
   d462c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4630:	f007 f8ba 	bl	db7a8 <__aeabi_dmul>
   d4634:	2200      	movs	r2, #0
   d4636:	4b73      	ldr	r3, [pc, #460]	; (d4804 <loop+0x21c>)
   d4638:	f006 ff00 	bl	db43c <__adddf3>
   d463c:	f007 fb4e 	bl	dbcdc <__aeabi_d2iz>
   d4640:	4b71      	ldr	r3, [pc, #452]	; (d4808 <loop+0x220>)
   d4642:	6018      	str	r0, [r3, #0]
        humidity = (uint8_t)bme.readHumidity();
   d4644:	486d      	ldr	r0, [pc, #436]	; (d47fc <loop+0x214>)
   d4646:	f000 fe59 	bl	d52fc <_ZN15Adafruit_BME28012readHumidityEv>
   d464a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d464e:	4a6f      	ldr	r2, [pc, #444]	; (d480c <loop+0x224>)
   d4650:	edcd 7a05 	vstr	s15, [sp, #20]
   d4654:	f89d 3014 	ldrb.w	r3, [sp, #20]
        voltage = (uint8_t)fuel.getVCell();
   d4658:	486d      	ldr	r0, [pc, #436]	; (d4810 <loop+0x228>)
        humidity = (uint8_t)bme.readHumidity();
   d465a:	6013      	str	r3, [r2, #0]
        voltage = (uint8_t)fuel.getVCell();
   d465c:	f003 fe98 	bl	d8390 <_ZN9FuelGauge8getVCellEv>
   d4660:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4664:	4a6b      	ldr	r2, [pc, #428]	; (d4814 <loop+0x22c>)
   d4666:	edcd 7a05 	vstr	s15, [sp, #20]
   d466a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d466e:	6013      	str	r3, [r2, #0]
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d4670:	a907      	add	r1, sp, #28
    const diag_source* src = nullptr;
   d4672:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4674:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d4676:	9207      	str	r2, [sp, #28]
    const int ret = diag_get_source(id, &src, nullptr);
   d4678:	f003 f8c2 	bl	d7800 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d467c:	2800      	cmp	r0, #0
   d467e:	f040 80ad 	bne.w	d47dc <loop+0x1f4>
        return ret;
    }
    return get(src, val);
   d4682:	9d07      	ldr	r5, [sp, #28]
    SPARK_ASSERT(src && src->callback);
   d4684:	b10d      	cbz	r5, d468a <loop+0xa2>
   d4686:	692b      	ldr	r3, [r5, #16]
   d4688:	b923      	cbnz	r3, d4694 <loop+0xac>
   d468a:	4a63      	ldr	r2, [pc, #396]	; (d4818 <loop+0x230>)
   d468c:	2100      	movs	r1, #0
   d468e:	200a      	movs	r0, #10
   d4690:	f003 f896 	bl	d77c0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4694:	2300      	movs	r3, #0
   d4696:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   d469a:	230c      	movs	r3, #12
   d469c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d46a0:	ab06      	add	r3, sp, #24
   d46a2:	9309      	str	r3, [sp, #36]	; 0x24
   d46a4:	2304      	movs	r3, #4
   d46a6:	930a      	str	r3, [sp, #40]	; 0x28
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d46a8:	692b      	ldr	r3, [r5, #16]
   d46aa:	aa08      	add	r2, sp, #32
   d46ac:	2101      	movs	r1, #1
   d46ae:	4628      	mov	r0, r5
   d46b0:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d46b2:	2800      	cmp	r0, #0
   d46b4:	f040 8092 	bne.w	d47dc <loop+0x1f4>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d46b8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d46bc:	ee07 3a90 	vmov	s15, r3
   d46c0:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        percent_charge = (uint8_t)System.batteryCharge();
   d46c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d46c8:	4f54      	ldr	r7, [pc, #336]	; (d481c <loop+0x234>)
   d46ca:	edcd 7a05 	vstr	s15, [sp, #20]
        CellularSignal sig = Cellular.RSSI();
   d46ce:	4954      	ldr	r1, [pc, #336]	; (d4820 <loop+0x238>)
        percent_charge = (uint8_t)System.batteryCharge();
   d46d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d46d4:	603b      	str	r3, [r7, #0]
        CellularSignal sig = Cellular.RSSI();
   d46d6:	a808      	add	r0, sp, #32
   d46d8:	f003 fa02 	bl	d7ae0 <_ZN5spark13CellularClass4RSSIEv>
        signal_strength  = (uint8_t)sig.getStrength();
   d46dc:	a808      	add	r0, sp, #32
   d46de:	f003 fa6d 	bl	d7bbc <_ZNK14CellularSignal11getStrengthEv>
   d46e2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d46e6:	f8df 815c 	ldr.w	r8, [pc, #348]	; d4844 <loop+0x25c>
   d46ea:	edcd 7a05 	vstr	s15, [sp, #20]
   d46ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d46f2:	f8c8 3000 	str.w	r3, [r8]
        signal_quality = (uint8_t)sig.getQuality();
   d46f6:	a808      	add	r0, sp, #32
   d46f8:	f003 fa90 	bl	d7c1c <_ZNK14CellularSignal10getQualityEv>
   d46fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4700:	4a48      	ldr	r2, [pc, #288]	; (d4824 <loop+0x23c>)
   d4702:	edcd 7a05 	vstr	s15, [sp, #20]
   d4706:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d470a:	6013      	str	r3, [r2, #0]
        getGPS();
   d470c:	f7ff fd80 	bl	d4210 <_Z6getGPSv>
        first_loop = false;
   d4710:	2300      	movs	r3, #0
        delay(5000);
   d4712:	f241 3088 	movw	r0, #5000	; 0x1388
        first_loop = false;
   d4716:	7033      	strb	r3, [r6, #0]
        delay(5000);
   d4718:	f003 f988 	bl	d7a2c <delay>
        if((last_temp_c != temp_c) | (last_humidity != humidity) | (last_latitude != latitude) | (last_longitude != longitude))
   d471c:	4b42      	ldr	r3, [pc, #264]	; (d4828 <loop+0x240>)
   d471e:	4e3b      	ldr	r6, [pc, #236]	; (d480c <loop+0x224>)
   d4720:	f8d4 9000 	ldr.w	r9, [r4]
   d4724:	f8d6 a000 	ldr.w	sl, [r6]
   d4728:	ed93 9b00 	vldr	d9, [r3]
   d472c:	4b3f      	ldr	r3, [pc, #252]	; (d482c <loop+0x244>)
   d472e:	ed93 8b00 	vldr	d8, [r3]
   d4732:	4b3f      	ldr	r3, [pc, #252]	; (d4830 <loop+0x248>)
   d4734:	681d      	ldr	r5, [r3, #0]
   d4736:	4b3f      	ldr	r3, [pc, #252]	; (d4834 <loop+0x24c>)
   d4738:	6818      	ldr	r0, [r3, #0]
   d473a:	4b3f      	ldr	r3, [pc, #252]	; (d4838 <loop+0x250>)
   d473c:	4550      	cmp	r0, sl
   d473e:	bf08      	it	eq
   d4740:	454d      	cmpeq	r5, r9
   d4742:	6818      	ldr	r0, [r3, #0]
   d4744:	bf14      	ite	ne
   d4746:	2501      	movne	r5, #1
   d4748:	2500      	moveq	r5, #0
   d474a:	f006 ffc3 	bl	db6d4 <__aeabi_i2d>
   d474e:	ec53 2b19 	vmov	r2, r3, d9
   d4752:	f007 fa91 	bl	dbc78 <__aeabi_dcmpeq>
   d4756:	2800      	cmp	r0, #0
   d4758:	bf14      	ite	ne
   d475a:	4628      	movne	r0, r5
   d475c:	2001      	moveq	r0, #1
   d475e:	b948      	cbnz	r0, d4774 <loop+0x18c>
   d4760:	4b36      	ldr	r3, [pc, #216]	; (d483c <loop+0x254>)
   d4762:	6818      	ldr	r0, [r3, #0]
   d4764:	f006 ffb6 	bl	db6d4 <__aeabi_i2d>
   d4768:	ec53 2b18 	vmov	r2, r3, d8
   d476c:	f007 fa84 	bl	dbc78 <__aeabi_dcmpeq>
   d4770:	2800      	cmp	r0, #0
   d4772:	d12e      	bne.n	d47d2 <loop+0x1ea>
            createEventPayload(temp_c, temp_f, humidity, voltage, percent_charge, signal_strength , signal_quality, longitude, latitude, altitude);
   d4774:	eeb0 1a49 	vmov.f32	s2, s18
   d4778:	eef0 1a69 	vmov.f32	s3, s19
   d477c:	eeb0 0a48 	vmov.f32	s0, s16
   d4780:	eef0 0a68 	vmov.f32	s1, s17
   d4784:	4b27      	ldr	r3, [pc, #156]	; (d4824 <loop+0x23c>)
   d4786:	4920      	ldr	r1, [pc, #128]	; (d4808 <loop+0x220>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	9302      	str	r3, [sp, #8]
   d478c:	f8d8 3000 	ldr.w	r3, [r8]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	683b      	ldr	r3, [r7, #0]
   d4794:	9300      	str	r3, [sp, #0]
   d4796:	4b2a      	ldr	r3, [pc, #168]	; (d4840 <loop+0x258>)
   d4798:	6809      	ldr	r1, [r1, #0]
   d479a:	ed93 2b00 	vldr	d2, [r3]
   d479e:	4b1d      	ldr	r3, [pc, #116]	; (d4814 <loop+0x22c>)
   d47a0:	4652      	mov	r2, sl
   d47a2:	681b      	ldr	r3, [r3, #0]
   d47a4:	4648      	mov	r0, r9
   d47a6:	f7ff fe85 	bl	d44b4 <_Z18createEventPayloadiiiiiiiddd>
            last_temp_c = temp_c;
   d47aa:	4b21      	ldr	r3, [pc, #132]	; (d4830 <loop+0x248>)
   d47ac:	6822      	ldr	r2, [r4, #0]
   d47ae:	601a      	str	r2, [r3, #0]
            last_humidity = humidity;
   d47b0:	4b20      	ldr	r3, [pc, #128]	; (d4834 <loop+0x24c>)
   d47b2:	6832      	ldr	r2, [r6, #0]
   d47b4:	601a      	str	r2, [r3, #0]
            last_latitude = latitude;
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <loop+0x240>)
   d47b8:	e9d3 0100 	ldrd	r0, r1, [r3]
   d47bc:	f007 fa8e 	bl	dbcdc <__aeabi_d2iz>
   d47c0:	4b1d      	ldr	r3, [pc, #116]	; (d4838 <loop+0x250>)
   d47c2:	6018      	str	r0, [r3, #0]
            last_longitude = longitude;
   d47c4:	4b19      	ldr	r3, [pc, #100]	; (d482c <loop+0x244>)
   d47c6:	e9d3 0100 	ldrd	r0, r1, [r3]
   d47ca:	f007 fa87 	bl	dbcdc <__aeabi_d2iz>
   d47ce:	4b1b      	ldr	r3, [pc, #108]	; (d483c <loop+0x254>)
   d47d0:	6018      	str	r0, [r3, #0]
}
   d47d2:	b012      	add	sp, #72	; 0x48
   d47d4:	ecbd 8b04 	vpop	{d8-d9}
   d47d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return -1.0f;
   d47dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d47e0:	e770      	b.n	d46c4 <loop+0xdc>
   d47e2:	bf00      	nop
   d47e4:	f3af 8000 	nop.w
   d47e8:	cccccccd 	.word	0xcccccccd
   d47ec:	3ffccccc 	.word	0x3ffccccc
   d47f0:	2003e338 	.word	0x2003e338
   d47f4:	2003dffc 	.word	0x2003dffc
   d47f8:	2003e000 	.word	0x2003e000
   d47fc:	2003e210 	.word	0x2003e210
   d4800:	2003e384 	.word	0x2003e384
   d4804:	40400000 	.word	0x40400000
   d4808:	2003e388 	.word	0x2003e388
   d480c:	2003e334 	.word	0x2003e334
   d4810:	2003e254 	.word	0x2003e254
   d4814:	2003e398 	.word	0x2003e398
   d4818:	000d73f1 	.word	0x000d73f1
   d481c:	2003e378 	.word	0x2003e378
   d4820:	2003e544 	.word	0x2003e544
   d4824:	2003e37c 	.word	0x2003e37c
   d4828:	2003e340 	.word	0x2003e340
   d482c:	2003e370 	.word	0x2003e370
   d4830:	2003e010 	.word	0x2003e010
   d4834:	2003e004 	.word	0x2003e004
   d4838:	2003e008 	.word	0x2003e008
   d483c:	2003e00c 	.word	0x2003e00c
   d4840:	2003e208 	.word	0x2003e208
   d4844:	2003e380 	.word	0x2003e380

000d4848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4848:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d484a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d484c:	4604      	mov	r4, r0
   d484e:	460d      	mov	r5, r1
   d4850:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4852:	d916      	bls.n	d4882 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4854:	4290      	cmp	r0, r2
   d4856:	d215      	bcs.n	d4884 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4858:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d485c:	1a75      	subs	r5, r6, r1
   d485e:	f1a1 0714 	sub.w	r7, r1, #20
   d4862:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4864:	42b7      	cmp	r7, r6
   d4866:	d01c      	beq.n	d48a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4868:	b12c      	cbz	r4, d4876 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d486a:	4631      	mov	r1, r6
   d486c:	4620      	mov	r0, r4
   d486e:	f005 fb25 	bl	d9ebc <_ZN6StringC1EOS_>
   d4872:	7c33      	ldrb	r3, [r6, #16]
   d4874:	7423      	strb	r3, [r4, #16]
   d4876:	4630      	mov	r0, r6
   d4878:	f005 faa4 	bl	d9dc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d487c:	3e14      	subs	r6, #20
   d487e:	3c14      	subs	r4, #20
   d4880:	e7f0      	b.n	d4864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4882:	d00e      	beq.n	d48a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4884:	42b5      	cmp	r5, r6
   d4886:	d00c      	beq.n	d48a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4888:	b12c      	cbz	r4, d4896 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d488a:	4629      	mov	r1, r5
   d488c:	4620      	mov	r0, r4
   d488e:	f005 fb15 	bl	d9ebc <_ZN6StringC1EOS_>
   d4892:	7c2b      	ldrb	r3, [r5, #16]
   d4894:	7423      	strb	r3, [r4, #16]
   d4896:	4628      	mov	r0, r5
   d4898:	f005 fa94 	bl	d9dc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d489c:	3514      	adds	r5, #20
   d489e:	3414      	adds	r4, #20
   d48a0:	e7f0      	b.n	d4884 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d48a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d48a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d48a8:	2300      	movs	r3, #0
   d48aa:	e9c0 3300 	strd	r3, r3, [r0]
   d48ae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d48b0:	684f      	ldr	r7, [r1, #4]
   d48b2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d48b4:	4604      	mov	r4, r0
   d48b6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d48b8:	dd23      	ble.n	d4902 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d48ba:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d48be:	fb08 f007 	mul.w	r0, r8, r7
   d48c2:	f003 f86b 	bl	d799c <malloc>
            if (!d) {
   d48c6:	4605      	mov	r5, r0
   d48c8:	b1d8      	cbz	r0, d4902 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d48ca:	e9d4 1200 	ldrd	r1, r2, [r4]
   d48ce:	fb08 1202 	mla	r2, r8, r2, r1
   d48d2:	f7ff ffb9 	bl	d4848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d48d6:	6820      	ldr	r0, [r4, #0]
   d48d8:	f003 f868 	bl	d79ac <free>
        data_ = d;
   d48dc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d48de:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d48e0:	e9d6 7300 	ldrd	r7, r3, [r6]
   d48e4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d48e8:	45b8      	cmp	r8, r7
   d48ea:	d008      	beq.n	d48fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d48ec:	4639      	mov	r1, r7
   d48ee:	4628      	mov	r0, r5
   d48f0:	f005 fafe 	bl	d9ef0 <_ZN6StringC1ERKS_>
   d48f4:	7c3b      	ldrb	r3, [r7, #16]
   d48f6:	742b      	strb	r3, [r5, #16]
   d48f8:	3714      	adds	r7, #20
   d48fa:	3514      	adds	r5, #20
   d48fc:	e7f4      	b.n	d48e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d48fe:	6873      	ldr	r3, [r6, #4]
   d4900:	6063      	str	r3, [r4, #4]
}
   d4902:	4620      	mov	r0, r4
   d4904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4908 <_GLOBAL__sub_I_logHandler>:
}
   d4908:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d490a:	4b2f      	ldr	r3, [pc, #188]	; (d49c8 <_GLOBAL__sub_I_logHandler+0xc0>)
        filter_(level, filters) {
   d490c:	4d2f      	ldr	r5, [pc, #188]	; (d49cc <_GLOBAL__sub_I_logHandler+0xc4>)
   d490e:	2400      	movs	r4, #0
   d4910:	701c      	strb	r4, [r3, #0]
   d4912:	4b2f      	ldr	r3, [pc, #188]	; (d49d0 <_GLOBAL__sub_I_logHandler+0xc8>)
   d4914:	b08d      	sub	sp, #52	; 0x34
   d4916:	2201      	movs	r2, #1
   d4918:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   d491a:	e9cd 4400 	strd	r4, r4, [sp]
   d491e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4920:	f006 f9de 	bl	dace0 <_Z16_fetch_usbserialv>
   d4924:	4669      	mov	r1, sp
   d4926:	4606      	mov	r6, r0
   d4928:	a803      	add	r0, sp, #12
   d492a:	f7ff ffbb 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d492e:	462f      	mov	r7, r5
        stream_(&stream) {
   d4930:	a903      	add	r1, sp, #12
   d4932:	a806      	add	r0, sp, #24
   d4934:	f7ff ffb6 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4938:	4b26      	ldr	r3, [pc, #152]	; (d49d4 <_GLOBAL__sub_I_logHandler+0xcc>)
   d493a:	f847 3b04 	str.w	r3, [r7], #4
   d493e:	a906      	add	r1, sp, #24
   d4940:	a809      	add	r0, sp, #36	; 0x24
   d4942:	f7ff ffaf 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4946:	aa09      	add	r2, sp, #36	; 0x24
   d4948:	211e      	movs	r1, #30
   d494a:	4638      	mov	r0, r7
   d494c:	f004 fcf9 	bl	d9342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4950:	a809      	add	r0, sp, #36	; 0x24
   d4952:	f7ff fd69 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4956:	a806      	add	r0, sp, #24
   d4958:	f7ff fd66 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d495c:	4b1e      	ldr	r3, [pc, #120]	; (d49d8 <_GLOBAL__sub_I_logHandler+0xd0>)
   d495e:	602b      	str	r3, [r5, #0]
   d4960:	a803      	add	r0, sp, #12
   d4962:	622e      	str	r6, [r5, #32]
   d4964:	f7ff fd60 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4968:	4b1c      	ldr	r3, [pc, #112]	; (d49dc <_GLOBAL__sub_I_logHandler+0xd4>)
   d496a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d496c:	f006 f9b8 	bl	dace0 <_Z16_fetch_usbserialv>
   d4970:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4974:	f006 f9a4 	bl	dacc0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4978:	f004 f988 	bl	d8c8c <_ZN5spark10LogManager8instanceEv>
   d497c:	4629      	mov	r1, r5
   d497e:	f004 fc72 	bl	d9266 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4982:	4668      	mov	r0, sp
   d4984:	f7ff fd50 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   d4988:	4815      	ldr	r0, [pc, #84]	; (d49e0 <_GLOBAL__sub_I_logHandler+0xd8>)
   d498a:	f000 f833 	bl	d49f4 <_ZN11TinyGPSPlusC1Ev>
Adafruit_BME280 bme;
   d498e:	4815      	ldr	r0, [pc, #84]	; (d49e4 <_GLOBAL__sub_I_logHandler+0xdc>)
   d4990:	f000 fb4c 	bl	d502c <_ZN15Adafruit_BME280C1Ev>
FuelGauge fuel;
   d4994:	4621      	mov	r1, r4
   d4996:	4814      	ldr	r0, [pc, #80]	; (d49e8 <_GLOBAL__sub_I_logHandler+0xe0>)
   d4998:	f003 fcac 	bl	d82f4 <_ZN9FuelGaugeC1Eb>
Ubidots ubidots(webhook, UBI_PARTICLE);
   d499c:	4913      	ldr	r1, [pc, #76]	; (d49ec <_GLOBAL__sub_I_logHandler+0xe4>)
   d499e:	4814      	ldr	r0, [pc, #80]	; (d49f0 <_GLOBAL__sub_I_logHandler+0xe8>)
   d49a0:	2203      	movs	r2, #3
   d49a2:	f002 fc45 	bl	d7230 <_ZN7UbidotsC1EPc11IotProtocol>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d49a6:	f006 fa5d 	bl	dae64 <spark_protocol_instance>
   d49aa:	4623      	mov	r3, r4
   d49ac:	4622      	mov	r2, r4
   d49ae:	f643 61f0 	movw	r1, #16112	; 0x3ef0
   d49b2:	f006 fa5f 	bl	dae74 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d49b6:	f006 fa55 	bl	dae64 <spark_protocol_instance>
   d49ba:	4623      	mov	r3, r4
   d49bc:	4622      	mov	r2, r4
   d49be:	2104      	movs	r1, #4
   d49c0:	f006 fa60 	bl	dae84 <spark_protocol_set_product_firmware_version>
}
   d49c4:	b00d      	add	sp, #52	; 0x34
   d49c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49c8:	2003e200 	.word	0x2003e200
   d49cc:	2003e348 	.word	0x2003e348
   d49d0:	2003e201 	.word	0x2003e201
   d49d4:	000ddfe0 	.word	0x000ddfe0
   d49d8:	000de774 	.word	0x000de774
   d49dc:	000ddff8 	.word	0x000ddff8
   d49e0:	2003e25c 	.word	0x2003e25c
   d49e4:	2003e210 	.word	0x2003e210
   d49e8:	2003e254 	.word	0x2003e254
   d49ec:	2003e014 	.word	0x2003e014
   d49f0:	2003e38c 	.word	0x2003e38c

000d49f4 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   d49f4:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d49f6:	2102      	movs	r1, #2
   d49f8:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d49fc:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d49fe:	8082      	strh	r2, [r0, #4]
   d4a00:	6082      	str	r2, [r0, #8]
   d4a02:	7302      	strb	r2, [r0, #12]
   d4a04:	8202      	strh	r2, [r0, #16]
   d4a06:	6142      	str	r2, [r0, #20]
   d4a08:	7602      	strb	r2, [r0, #24]
   d4a0a:	8382      	strh	r2, [r0, #28]
   d4a0c:	6202      	str	r2, [r0, #32]
   d4a0e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d4a12:	8502      	strh	r2, [r0, #40]	; 0x28
   d4a14:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4a16:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   d4a1a:	8702      	strh	r2, [r0, #56]	; 0x38
   d4a1c:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   d4a1e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d4a22:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4a24:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d4a28:	6602      	str	r2, [r0, #96]	; 0x60
   d4a2a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d4a2e:	6702      	str	r2, [r0, #112]	; 0x70
   d4a30:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d4a34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   d4a38:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d4a3c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4a40:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d4a44:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d4a48:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4a4c:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d4a50:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d4a54:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d4a58:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d4a5c:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d4a60:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d4a64:	4770      	bx	lr

000d4a66 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d4a66:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4a6a:	2b05      	cmp	r3, #5
   d4a6c:	d802      	bhi.n	d4a74 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4a6e:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d4a72:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d4a74:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d4a78:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d4a7a:	bf94      	ite	ls
   d4a7c:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4a80:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d4a84:	4770      	bx	lr

000d4a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d4a86:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d4a88:	7805      	ldrb	r5, [r0, #0]
{
   d4a8a:	4604      	mov	r4, r0
  if (negative) ++term;
   d4a8c:	2d2d      	cmp	r5, #45	; 0x2d
   d4a8e:	bf08      	it	eq
   d4a90:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d4a92:	4620      	mov	r0, r4
   d4a94:	f007 f9e1 	bl	dbe5a <atol>
   d4a98:	2364      	movs	r3, #100	; 0x64
   d4a9a:	4358      	muls	r0, r3
   d4a9c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4a9e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4aa2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d4aa6:	2909      	cmp	r1, #9
   d4aa8:	d9f8      	bls.n	d4a9c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d4aaa:	2b2e      	cmp	r3, #46	; 0x2e
   d4aac:	d10b      	bne.n	d4ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d4aae:	7853      	ldrb	r3, [r2, #1]
   d4ab0:	3b30      	subs	r3, #48	; 0x30
   d4ab2:	2b09      	cmp	r3, #9
   d4ab4:	d807      	bhi.n	d4ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d4ab6:	210a      	movs	r1, #10
   d4ab8:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d4abc:	7893      	ldrb	r3, [r2, #2]
   d4abe:	3b30      	subs	r3, #48	; 0x30
   d4ac0:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d4ac2:	bf98      	it	ls
   d4ac4:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d4ac6:	2d2d      	cmp	r5, #45	; 0x2d
   d4ac8:	bf08      	it	eq
   d4aca:	4240      	negeq	r0, r0
}
   d4acc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d4ad0:	b538      	push	{r3, r4, r5, lr}
   d4ad2:	460d      	mov	r5, r1
   d4ad4:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d4ad6:	f007 f9c0 	bl	dbe5a <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d4ada:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4adc:	4b13      	ldr	r3, [pc, #76]	; (d4b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d4ade:	fbb0 f1f2 	udiv	r1, r0, r2
   d4ae2:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4ae6:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d4ae8:	8029      	strh	r1, [r5, #0]
   d4aea:	4620      	mov	r0, r4

  while (isdigit(*term))
   d4aec:	7802      	ldrb	r2, [r0, #0]
   d4aee:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d4af2:	2c09      	cmp	r4, #9
   d4af4:	4601      	mov	r1, r0
   d4af6:	f100 0001 	add.w	r0, r0, #1
   d4afa:	d9f7      	bls.n	d4aec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d4afc:	2a2e      	cmp	r2, #46	; 0x2e
   d4afe:	d10b      	bne.n	d4b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d4b00:	480a      	ldr	r0, [pc, #40]	; (d4b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d4b02:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d4b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d4b08:	3a30      	subs	r2, #48	; 0x30
   d4b0a:	2a09      	cmp	r2, #9
   d4b0c:	d804      	bhi.n	d4b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d4b0e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d4b12:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d4b16:	e7f5      	b.n	d4b04 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4b1c:	3301      	adds	r3, #1
   d4b1e:	2203      	movs	r2, #3
   d4b20:	fbb3 f3f2 	udiv	r3, r3, r2
   d4b24:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d4b26:	2300      	movs	r3, #0
   d4b28:	722b      	strb	r3, [r5, #8]
}
   d4b2a:	bd38      	pop	{r3, r4, r5, pc}
   d4b2c:	00989680 	.word	0x00989680

000d4b30 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4b30:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d4b32:	4603      	mov	r3, r0
{
   d4b34:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d4b36:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d4b3a:	6042      	str	r2, [r0, #4]
   d4b3c:	685a      	ldr	r2, [r3, #4]
   d4b3e:	6082      	str	r2, [r0, #8]
   d4b40:	7a1b      	ldrb	r3, [r3, #8]
   d4b42:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d4b44:	4603      	mov	r3, r0
   d4b46:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d4b4a:	6102      	str	r2, [r0, #16]
   d4b4c:	685a      	ldr	r2, [r3, #4]
   d4b4e:	6142      	str	r2, [r0, #20]
   d4b50:	7a1b      	ldrb	r3, [r3, #8]
   d4b52:	7603      	strb	r3, [r0, #24]
   d4b54:	f002 fc54 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4b58:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4b5c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4b5e:	8023      	strh	r3, [r4, #0]
}
   d4b60:	bd10      	pop	{r4, pc}
   d4b62:	0000      	movs	r0, r0
   d4b64:	0000      	movs	r0, r0
	...

000d4b68 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4b68:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4b6a:	2300      	movs	r3, #0
{
   d4b6c:	4604      	mov	r4, r0
   updated = false;
   d4b6e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4b70:	6880      	ldr	r0, [r0, #8]
   d4b72:	f006 fd9f 	bl	db6b4 <__aeabi_ui2d>
   d4b76:	a30c      	add	r3, pc, #48	; (adr r3, d4ba8 <_ZN15TinyGPSLocation3latEv+0x40>)
   d4b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7c:	f006 ff3e 	bl	db9fc <__aeabi_ddiv>
   d4b80:	4606      	mov	r6, r0
   d4b82:	88a0      	ldrh	r0, [r4, #4]
   d4b84:	460f      	mov	r7, r1
   d4b86:	f006 fda5 	bl	db6d4 <__aeabi_i2d>
   d4b8a:	460b      	mov	r3, r1
   d4b8c:	4602      	mov	r2, r0
   d4b8e:	4639      	mov	r1, r7
   d4b90:	4630      	mov	r0, r6
   d4b92:	f006 fc53 	bl	db43c <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d4b96:	7b23      	ldrb	r3, [r4, #12]
   d4b98:	b113      	cbz	r3, d4ba0 <_ZN15TinyGPSLocation3latEv+0x38>
   d4b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4b9e:	4619      	mov	r1, r3
}
   d4ba0:	ec41 0b10 	vmov	d0, r0, r1
   d4ba4:	bdd0      	pop	{r4, r6, r7, pc}
   d4ba6:	bf00      	nop
   d4ba8:	00000000 	.word	0x00000000
   d4bac:	41cdcd65 	.word	0x41cdcd65

000d4bb0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d4bb0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4bb2:	2300      	movs	r3, #0
{
   d4bb4:	4604      	mov	r4, r0
   updated = false;
   d4bb6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d4bb8:	6940      	ldr	r0, [r0, #20]
   d4bba:	f006 fd7b 	bl	db6b4 <__aeabi_ui2d>
   d4bbe:	a30c      	add	r3, pc, #48	; (adr r3, d4bf0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d4bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bc4:	f006 ff1a 	bl	db9fc <__aeabi_ddiv>
   d4bc8:	4606      	mov	r6, r0
   d4bca:	8a20      	ldrh	r0, [r4, #16]
   d4bcc:	460f      	mov	r7, r1
   d4bce:	f006 fd81 	bl	db6d4 <__aeabi_i2d>
   d4bd2:	460b      	mov	r3, r1
   d4bd4:	4602      	mov	r2, r0
   d4bd6:	4639      	mov	r1, r7
   d4bd8:	4630      	mov	r0, r6
   d4bda:	f006 fc2f 	bl	db43c <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d4bde:	7e23      	ldrb	r3, [r4, #24]
   d4be0:	b113      	cbz	r3, d4be8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d4be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4be6:	4619      	mov	r1, r3
}
   d4be8:	ec41 0b10 	vmov	d0, r0, r1
   d4bec:	bdd0      	pop	{r4, r6, r7, pc}
   d4bee:	bf00      	nop
   d4bf0:	00000000 	.word	0x00000000
   d4bf4:	41cdcd65 	.word	0x41cdcd65

000d4bf8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d4bf8:	b510      	push	{r4, lr}
   date = newDate;
   d4bfa:	6883      	ldr	r3, [r0, #8]
   d4bfc:	6043      	str	r3, [r0, #4]
{
   d4bfe:	4604      	mov	r4, r0
   d4c00:	f002 fbfe 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4c04:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4c08:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4c0a:	8023      	strh	r3, [r4, #0]
}
   d4c0c:	bd10      	pop	{r4, pc}

000d4c0e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d4c0e:	b510      	push	{r4, lr}
   time = newTime;
   d4c10:	6883      	ldr	r3, [r0, #8]
   d4c12:	6043      	str	r3, [r0, #4]
{
   d4c14:	4604      	mov	r4, r0
   d4c16:	f002 fbf3 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4c1a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4c1e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4c20:	8023      	strh	r3, [r4, #0]
}
   d4c22:	bd10      	pop	{r4, pc}

000d4c24 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d4c24:	b510      	push	{r4, lr}
   d4c26:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4c28:	4608      	mov	r0, r1
   d4c2a:	f7ff ff2c 	bl	d4a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4c2e:	60a0      	str	r0, [r4, #8]
}
   d4c30:	bd10      	pop	{r4, pc}

000d4c32 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d4c32:	b510      	push	{r4, lr}
   d4c34:	4604      	mov	r4, r0
   newDate = atol(term);
   d4c36:	4608      	mov	r0, r1
   d4c38:	f007 f90f 	bl	dbe5a <atol>
   d4c3c:	60a0      	str	r0, [r4, #8]
}
   d4c3e:	bd10      	pop	{r4, pc}

000d4c40 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4c40:	b510      	push	{r4, lr}
   val = newval;
   d4c42:	68c3      	ldr	r3, [r0, #12]
   d4c44:	6083      	str	r3, [r0, #8]
{
   d4c46:	4604      	mov	r4, r0
   d4c48:	f002 fbda 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4c4c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4c50:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4c52:	8023      	strh	r3, [r4, #0]
}
   d4c54:	bd10      	pop	{r4, pc}

000d4c56 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d4c56:	b510      	push	{r4, lr}
   d4c58:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d4c5a:	4608      	mov	r0, r1
   d4c5c:	f7ff ff13 	bl	d4a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4c60:	60e0      	str	r0, [r4, #12]
}
   d4c62:	bd10      	pop	{r4, pc}

000d4c64 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d4c64:	b510      	push	{r4, lr}
   val = newval;
   d4c66:	68c3      	ldr	r3, [r0, #12]
   d4c68:	6083      	str	r3, [r0, #8]
{
   d4c6a:	4604      	mov	r4, r0
   d4c6c:	f002 fbc8 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4c70:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4c74:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4c76:	8023      	strh	r3, [r4, #0]
}
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d4c7a:	b510      	push	{r4, lr}
   d4c7c:	4604      	mov	r4, r0
   newval = atol(term);
   d4c7e:	4608      	mov	r0, r1
   d4c80:	f007 f8eb 	bl	dbe5a <atol>
   d4c84:	60e0      	str	r0, [r4, #12]
}
   d4c86:	bd10      	pop	{r4, pc}

000d4c88 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4c88:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d4c8a:	4601      	mov	r1, r0
{
   d4c8c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d4c8e:	3010      	adds	r0, #16
   d4c90:	f007 f95d 	bl	dbf4e <strcpy>
   d4c94:	f002 fbb4 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4c98:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4c9c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d4c9e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4ca0:	bd10      	pop	{r4, pc}

000d4ca2 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4ca2:	2210      	movs	r2, #16
   d4ca4:	f007 b993 	b.w	dbfce <strncpy>

000d4ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d4caa:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d4cae:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d4cb0:	2d00      	cmp	r5, #0
   d4cb2:	d064      	beq.n	d4d7e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4cb4:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d4cb8:	f7ff fed5 	bl	d4a66 <_ZN11TinyGPSPlus7fromHexEc>
   d4cbc:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4cc0:	4602      	mov	r2, r0
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f7ff fecf 	bl	d4a66 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d4cc8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4ccc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d4cd0:	b2c0      	uxtb	r0, r0
   d4cd2:	4283      	cmp	r3, r0
   d4cd4:	d14b      	bne.n	d4d6e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d4cd6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d4cda:	3301      	adds	r3, #1
   d4cdc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d4ce0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4ce4:	b123      	cbz	r3, d4cf0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d4ce6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4cea:	3301      	adds	r3, #1
   d4cec:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d4cf0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d4cf4:	b333      	cbz	r3, d4d44 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d4cf6:	2b01      	cmp	r3, #1
   d4cf8:	d115      	bne.n	d4d26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d4cfa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4cfe:	f7ff ff7b 	bl	d4bf8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d4d02:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4d06:	f7ff ff82 	bl	d4c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4d0a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4d0e:	b153      	cbz	r3, d4d26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d4d10:	4620      	mov	r0, r4
   d4d12:	f7ff ff0d 	bl	d4b30 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d4d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4d1a:	f7ff ff91 	bl	d4c40 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d4d1e:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d4d22:	f7ff ff8d 	bl	d4c40 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4d26:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4d2a:	b336      	cbz	r6, d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4d2c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4d30:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4d32:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4d34:	f007 f901 	bl	dbf3a <strcmp>
   d4d38:	b9f8      	cbnz	r0, d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d4d3a:	4630      	mov	r0, r6
   d4d3c:	f7ff ffa4 	bl	d4c88 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4d40:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4d42:	e7f2      	b.n	d4d2a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d4d44:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4d48:	f7ff ff61 	bl	d4c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4d4c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4d50:	b133      	cbz	r3, d4d60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d4d52:	4620      	mov	r0, r4
   d4d54:	f7ff feec 	bl	d4b30 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4d58:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4d5c:	f7ff ff70 	bl	d4c40 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4d60:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4d64:	f7ff ff7e 	bl	d4c64 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4d68:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4d6c:	e7d9      	b.n	d4d22 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d4d6e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d4d72:	3301      	adds	r3, #1
   d4d74:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4d78:	2500      	movs	r5, #0
}
   d4d7a:	4628      	mov	r0, r5
   d4d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d4d7e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d4d82:	bb6a      	cbnz	r2, d4de0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   d4d84:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   d4d88:	495a      	ldr	r1, [pc, #360]	; (d4ef4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   d4d8a:	4630      	mov	r0, r6
   d4d8c:	f007 f8d5 	bl	dbf3a <strcmp>
   d4d90:	b120      	cbz	r0, d4d9c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   d4d92:	4959      	ldr	r1, [pc, #356]	; (d4ef8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   d4d94:	4630      	mov	r0, r6
   d4d96:	f007 f8d0 	bl	dbf3a <strcmp>
   d4d9a:	b998      	cbnz	r0, d4dc4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d4d9c:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d4d9e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4da2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d4da6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4daa:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   d4dae:	2f00      	cmp	r7, #0
   d4db0:	d0e3      	beq.n	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d4db4:	4631      	mov	r1, r6
   d4db6:	f007 f8c0 	bl	dbf3a <strcmp>
   d4dba:	2800      	cmp	r0, #0
   d4dbc:	f280 8094 	bge.w	d4ee8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   d4dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d4dc2:	e7f0      	b.n	d4da6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   d4dc4:	494d      	ldr	r1, [pc, #308]	; (d4efc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   d4dc6:	4630      	mov	r0, r6
   d4dc8:	f007 f8b7 	bl	dbf3a <strcmp>
   d4dcc:	b120      	cbz	r0, d4dd8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   d4dce:	494c      	ldr	r1, [pc, #304]	; (d4f00 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   d4dd0:	4630      	mov	r0, r6
   d4dd2:	f007 f8b2 	bl	dbf3a <strcmp>
   d4dd6:	b908      	cbnz	r0, d4ddc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d4dd8:	2300      	movs	r3, #0
   d4dda:	e7e0      	b.n	d4d9e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   d4ddc:	2302      	movs	r3, #2
   d4dde:	e7de      	b.n	d4d9e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d4de0:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d4de4:	2902      	cmp	r1, #2
   d4de6:	d023      	beq.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4de8:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d4dec:	b303      	cbz	r3, d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   d4dee:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d4df2:	3a01      	subs	r2, #1
   d4df4:	2a28      	cmp	r2, #40	; 0x28
   d4df6:	d81b      	bhi.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4df8:	e8df f002 	tbb	[pc, r2]
   d4dfc:	49423b15 	.word	0x49423b15
   d4e00:	6e68634c 	.word	0x6e68634c
   d4e04:	1a1a1a72 	.word	0x1a1a1a72
   d4e08:	1a1a1a1a 	.word	0x1a1a1a1a
   d4e0c:	1a1a1a1a 	.word	0x1a1a1a1a
   d4e10:	1a1a1a1a 	.word	0x1a1a1a1a
   d4e14:	1a1a1a1a 	.word	0x1a1a1a1a
   d4e18:	1a1a1a1a 	.word	0x1a1a1a1a
   d4e1c:	423b3415 	.word	0x423b3415
   d4e20:	59534c49 	.word	0x59534c49
   d4e24:	5d          	.byte	0x5d
   d4e25:	00          	.byte	0x00
      time.setTime(term);
   d4e26:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4e2a:	3048      	adds	r0, #72	; 0x48
   d4e2c:	f7ff fefa 	bl	d4c24 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4e30:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d4e34:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4e38:	2e00      	cmp	r6, #0
   d4e3a:	d09e      	beq.n	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4e3c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4e40:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4e42:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4e44:	f007 f879 	bl	dbf3a <strcmp>
   d4e48:	2800      	cmp	r0, #0
   d4e4a:	d196      	bne.n	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4e4c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d4e4e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4e52:	429a      	cmp	r2, r3
   d4e54:	dc91      	bgt.n	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d4e56:	d103      	bne.n	d4e60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   d4e58:	4639      	mov	r1, r7
   d4e5a:	4630      	mov	r0, r6
   d4e5c:	f7ff ff21 	bl	d4ca2 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4e60:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4e62:	e7e9      	b.n	d4e38 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   d4e64:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4e68:	4243      	negs	r3, r0
   d4e6a:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d4e6c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4e70:	e7de      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4e72:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4e76:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d4e7a:	f7ff fe29 	bl	d4ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d4e7e:	e7d7      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   d4e80:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4e84:	424b      	negs	r3, r1
   d4e86:	414b      	adcs	r3, r1
   d4e88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d4e8c:	e7d0      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4e8e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d4e92:	e7f0      	b.n	d4e76 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   d4e94:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4e98:	4253      	negs	r3, r2
   d4e9a:	4153      	adcs	r3, r2
   d4e9c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4ea0:	e7c6      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   d4ea2:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4ea6:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4ea8:	f7ff fed5 	bl	d4c56 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d4eac:	e7c0      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   d4eae:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4eb2:	3068      	adds	r0, #104	; 0x68
   d4eb4:	e7f8      	b.n	d4ea8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   d4eb6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4eba:	3038      	adds	r0, #56	; 0x38
   d4ebc:	f7ff feb9 	bl	d4c32 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4ec0:	e7b6      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   d4ec2:	2b30      	cmp	r3, #48	; 0x30
   d4ec4:	bf94      	ite	ls
   d4ec6:	2300      	movls	r3, #0
   d4ec8:	2301      	movhi	r3, #1
   d4eca:	e7cf      	b.n	d4e6c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   d4ecc:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4ed0:	3088      	adds	r0, #136	; 0x88
   d4ed2:	f7ff fed2 	bl	d4c7a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d4ed6:	e7ab      	b.n	d4e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   d4ed8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4edc:	3098      	adds	r0, #152	; 0x98
   d4ede:	e7e3      	b.n	d4ea8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   d4ee0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4ee4:	3078      	adds	r0, #120	; 0x78
   d4ee6:	e7df      	b.n	d4ea8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d4ee8:	f43f af47 	beq.w	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d4eec:	2300      	movs	r3, #0
   d4eee:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4ef2:	e742      	b.n	d4d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4ef4:	000de020 	.word	0x000de020
   d4ef8:	000de026 	.word	0x000de026
   d4efc:	000de02c 	.word	0x000de02c
   d4f00:	000de032 	.word	0x000de032

000d4f04 <_ZN11TinyGPSPlus6encodeEc>:
{
   d4f04:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d4f06:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4f0a:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d4f0c:	f103 0301 	add.w	r3, r3, #1
{
   d4f10:	4604      	mov	r4, r0
   d4f12:	460d      	mov	r5, r1
  ++encodedCharCount;
   d4f14:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4f18:	d03a      	beq.n	d4f90 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d4f1a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d4f1e:	d814      	bhi.n	d4f4a <_ZN11TinyGPSPlus6encodeEc+0x46>
   d4f20:	290a      	cmp	r1, #10
   d4f22:	d01c      	beq.n	d4f5e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4f24:	290d      	cmp	r1, #13
   d4f26:	d01a      	beq.n	d4f5e <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d4f28:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d4f2a:	bf9f      	itttt	ls
   d4f2c:	1c5a      	addls	r2, r3, #1
   d4f2e:	191b      	addls	r3, r3, r4
   d4f30:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d4f34:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4f38:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d4f3c:	bb98      	cbnz	r0, d4fa6 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d4f3e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d4f42:	404d      	eors	r5, r1
   d4f44:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4f48:	e021      	b.n	d4f8e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d4f4a:	292a      	cmp	r1, #42	; 0x2a
   d4f4c:	d007      	beq.n	d4f5e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4f4e:	292c      	cmp	r1, #44	; 0x2c
   d4f50:	d1ea      	bne.n	d4f28 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d4f52:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4f56:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4f5a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d4f5e:	2b0e      	cmp	r3, #14
   d4f60:	f04f 0000 	mov.w	r0, #0
   d4f64:	d805      	bhi.n	d4f72 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d4f66:	4423      	add	r3, r4
   d4f68:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	f7ff fe9b 	bl	d4ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d4f72:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4f76:	3301      	adds	r3, #1
   d4f78:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d4f7c:	2300      	movs	r3, #0
   d4f7e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d4f82:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4f86:	425d      	negs	r5, r3
   d4f88:	415d      	adcs	r5, r3
   d4f8a:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d4f8e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4f90:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d4f92:	2302      	movs	r3, #2
    parity = 0;
   d4f94:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4f98:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d4f9c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4fa0:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d4fa4:	e7f3      	b.n	d4f8e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d4fa6:	2000      	movs	r0, #0
   d4fa8:	e7f1      	b.n	d4f8e <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d4faa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4faa:	4770      	bx	lr

000d4fac <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4fac:	b510      	push	{r4, lr}
  }
   d4fae:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4fb0:	4604      	mov	r4, r0
  }
   d4fb2:	f006 f865 	bl	db080 <_ZdlPvj>
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	bd10      	pop	{r4, pc}

000d4fba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4fba:	b40e      	push	{r1, r2, r3}
   d4fbc:	b503      	push	{r0, r1, lr}
   d4fbe:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4fc0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4fc2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4fc6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4fc8:	f004 fde9 	bl	d9b9e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4fcc:	b002      	add	sp, #8
   d4fce:	f85d eb04 	ldr.w	lr, [sp], #4
   d4fd2:	b003      	add	sp, #12
   d4fd4:	4770      	bx	lr
	...

000d4fd8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4fd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4fda:	4604      	mov	r4, r0
   d4fdc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4fde:	7922      	ldrb	r2, [r4, #4]
   d4fe0:	68a3      	ldr	r3, [r4, #8]
   d4fe2:	b132      	cbz	r2, d4ff2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4fe4:	b9a3      	cbnz	r3, d5010 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4fe6:	490b      	ldr	r1, [pc, #44]	; (d5014 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4fe8:	b002      	add	sp, #8
   d4fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4fee:	f004 bd9b 	b.w	d9b28 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4ff2:	4a09      	ldr	r2, [pc, #36]	; (d5018 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4ff4:	7b26      	ldrb	r6, [r4, #12]
   d4ff6:	4d09      	ldr	r5, [pc, #36]	; (d501c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4ff8:	4909      	ldr	r1, [pc, #36]	; (d5020 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4ffa:	7b64      	ldrb	r4, [r4, #13]
   d4ffc:	2e01      	cmp	r6, #1
   d4ffe:	bf18      	it	ne
   d5000:	4629      	movne	r1, r5
   d5002:	e9cd 1400 	strd	r1, r4, [sp]
   d5006:	4907      	ldr	r1, [pc, #28]	; (d5024 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5008:	f7ff ffd7 	bl	d4fba <_ZN5Print6printfEPKcz>
  }
   d500c:	b002      	add	sp, #8
   d500e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5010:	4a05      	ldr	r2, [pc, #20]	; (d5028 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5012:	e7ef      	b.n	d4ff4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5014:	000de049 	.word	0x000de049
   d5018:	000de2af 	.word	0x000de2af
   d501c:	000de045 	.word	0x000de045
   d5020:	000de041 	.word	0x000de041
   d5024:	000de05f 	.word	0x000de05f
   d5028:	000de038 	.word	0x000de038

000d502c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5030:	6103      	str	r3, [r0, #16]
{ }
   d5032:	4770      	bx	lr

000d5034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5034:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5036:	4c0b      	ldr	r4, [pc, #44]	; (d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5038:	7821      	ldrb	r1, [r4, #0]
   d503a:	f3bf 8f5b 	dmb	ish
   d503e:	f011 0101 	ands.w	r1, r1, #1
   d5042:	d10b      	bne.n	d505c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5044:	4620      	mov	r0, r4
   d5046:	9101      	str	r1, [sp, #4]
   d5048:	f7ff f836 	bl	d40b8 <__cxa_guard_acquire>
   d504c:	9901      	ldr	r1, [sp, #4]
   d504e:	b128      	cbz	r0, d505c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5050:	4805      	ldr	r0, [pc, #20]	; (d5068 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5052:	f004 fde1 	bl	d9c18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5056:	4620      	mov	r0, r4
   d5058:	f7ff f833 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d505c:	4802      	ldr	r0, [pc, #8]	; (d5068 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d505e:	b002      	add	sp, #8
   d5060:	bd10      	pop	{r4, pc}
   d5062:	bf00      	nop
   d5064:	2003e39c 	.word	0x2003e39c
   d5068:	2003e3a0 	.word	0x2003e3a0

000d506c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d5070:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5074:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5076:	4605      	mov	r5, r0
   d5078:	460f      	mov	r7, r1
    if (_sck == -1)
   d507a:	d106      	bne.n	d508a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d507c:	f7ff ffda 	bl	d5034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5080:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d5082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5086:	f004 be69 	b.w	d9d5c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d508a:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d508c:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d508e:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5092:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5096:	2100      	movs	r1, #0
   d5098:	b280      	uxth	r0, r0
   d509a:	f005 ff4a 	bl	daf32 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d509e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d50a2:	fa08 f106 	lsl.w	r1, r8, r6
   d50a6:	4039      	ands	r1, r7
   d50a8:	b280      	uxth	r0, r0
   d50aa:	f005 ff42 	bl	daf32 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d50ae:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d50b2:	2101      	movs	r1, #1
   d50b4:	b280      	uxth	r0, r0
   d50b6:	f005 ff3c 	bl	daf32 <digitalWrite>
        if (digitalRead(_miso))
   d50ba:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d50be:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d50c0:	b280      	uxth	r0, r0
        reply <<= 1;
   d50c2:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d50c4:	f005 ff4e 	bl	daf64 <digitalRead>
   d50c8:	b108      	cbz	r0, d50ce <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d50ca:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d50ce:	3e01      	subs	r6, #1
   d50d0:	d2df      	bcs.n	d5092 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d50d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d50d8:	b508      	push	{r3, lr}
        instance().endTransaction();
   d50da:	f7ff ffab 	bl	d5034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d50de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d50e2:	f004 bdb4 	b.w	d9c4e <_ZN8SPIClass14endTransactionEv>

000d50e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d50e6:	b507      	push	{r0, r1, r2, lr}
   d50e8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d50ea:	f7ff ffa3 	bl	d5034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d50ee:	9901      	ldr	r1, [sp, #4]
    }
   d50f0:	b003      	add	sp, #12
   d50f2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d50f6:	f004 bdc3 	b.w	d9c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d50fc <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d50fc:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d50fe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5102:	3301      	adds	r3, #1
{
   d5104:	b085      	sub	sp, #20
   d5106:	4604      	mov	r4, r0
   d5108:	460d      	mov	r5, r1
    if (_cs == -1) {
   d510a:	d123      	bne.n	d5154 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d510c:	7901      	ldrb	r1, [r0, #4]
   d510e:	6800      	ldr	r0, [r0, #0]
   d5110:	f003 f9ca 	bl	d84a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5114:	6820      	ldr	r0, [r4, #0]
   d5116:	6803      	ldr	r3, [r0, #0]
   d5118:	4629      	mov	r1, r5
   d511a:	689b      	ldr	r3, [r3, #8]
   d511c:	4798      	blx	r3
        _wire -> endTransmission();
   d511e:	6820      	ldr	r0, [r4, #0]
   d5120:	f003 f9e2 	bl	d84e8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5124:	7921      	ldrb	r1, [r4, #4]
   d5126:	6820      	ldr	r0, [r4, #0]
   d5128:	2203      	movs	r2, #3
   d512a:	f003 f9ba 	bl	d84a2 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d512e:	6820      	ldr	r0, [r4, #0]
   d5130:	6803      	ldr	r3, [r0, #0]
   d5132:	695b      	ldr	r3, [r3, #20]
   d5134:	4798      	blx	r3
        value <<= 8;
   d5136:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5138:	6820      	ldr	r0, [r4, #0]
   d513a:	6803      	ldr	r3, [r0, #0]
   d513c:	695b      	ldr	r3, [r3, #20]
   d513e:	4798      	blx	r3
   d5140:	4328      	orrs	r0, r5
        value <<= 8;
   d5142:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5144:	6820      	ldr	r0, [r4, #0]
   d5146:	6803      	ldr	r3, [r0, #0]
   d5148:	695b      	ldr	r3, [r3, #20]
   d514a:	4798      	blx	r3
   d514c:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d514e:	4628      	mov	r0, r5
   d5150:	b005      	add	sp, #20
   d5152:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5154:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5158:	3301      	adds	r3, #1
   d515a:	d10c      	bne.n	d5176 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d515c:	4b1a      	ldr	r3, [pc, #104]	; (d51c8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d515e:	9300      	str	r3, [sp, #0]
   d5160:	2300      	movs	r3, #0
   d5162:	f88d 3004 	strb.w	r3, [sp, #4]
   d5166:	4b19      	ldr	r3, [pc, #100]	; (d51cc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5168:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d516a:	4668      	mov	r0, sp
   d516c:	2301      	movs	r3, #1
   d516e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5172:	f7ff ffb8 	bl	d50e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5176:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d517a:	2100      	movs	r1, #0
   d517c:	b280      	uxth	r0, r0
   d517e:	f005 fed8 	bl	daf32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5182:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff ff70 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d518c:	2100      	movs	r1, #0
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff ff6c 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5194:	2100      	movs	r1, #0
        value <<= 8;
   d5196:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5198:	4620      	mov	r0, r4
   d519a:	f7ff ff67 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
   d519e:	4328      	orrs	r0, r5
        value <<= 8;
   d51a0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d51a2:	2100      	movs	r1, #0
   d51a4:	4620      	mov	r0, r4
   d51a6:	f7ff ff61 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
   d51aa:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d51ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51b0:	2101      	movs	r1, #1
   d51b2:	b280      	uxth	r0, r0
   d51b4:	f005 febd 	bl	daf32 <digitalWrite>
        if (_sck == -1)
   d51b8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d51bc:	3301      	adds	r3, #1
   d51be:	d1c6      	bne.n	d514e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d51c0:	f7ff ff8a 	bl	d50d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d51c4:	e7c3      	b.n	d514e <_ZN15Adafruit_BME2806read24Eh+0x52>
   d51c6:	bf00      	nop
   d51c8:	000de084 	.word	0x000de084
   d51cc:	0007a120 	.word	0x0007a120

000d51d0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d51d0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d51d2:	21fa      	movs	r1, #250	; 0xfa
{
   d51d4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d51d6:	f7ff ff91 	bl	d50fc <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d51da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d51de:	d01e      	beq.n	d521e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d51e0:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d51e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5224 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d51e6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d51e8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d51ec:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d51f0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d51f4:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d51f6:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d51f8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d51fc:	1312      	asrs	r2, r2, #12
   d51fe:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5200:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5202:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5206:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d520c:	3380      	adds	r3, #128	; 0x80
   d520e:	121b      	asrs	r3, r3, #8
   d5210:	ee07 3a90 	vmov	s15, r3
   d5214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5218:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d521c:	bd10      	pop	{r4, pc}
        return NAN;
   d521e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5228 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5222:	e7fb      	b.n	d521c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5224:	42c80000 	.word	0x42c80000
   d5228:	7fc00000 	.word	0x7fc00000

000d522c <_ZN15Adafruit_BME2806read16Eh>:
{
   d522c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d522e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5232:	3301      	adds	r3, #1
{
   d5234:	b085      	sub	sp, #20
   d5236:	4604      	mov	r4, r0
   d5238:	460d      	mov	r5, r1
    if (_cs == -1) {
   d523a:	d11f      	bne.n	d527c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d523c:	7901      	ldrb	r1, [r0, #4]
   d523e:	6800      	ldr	r0, [r0, #0]
   d5240:	f003 f932 	bl	d84a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5244:	6820      	ldr	r0, [r4, #0]
   d5246:	6803      	ldr	r3, [r0, #0]
   d5248:	4629      	mov	r1, r5
   d524a:	689b      	ldr	r3, [r3, #8]
   d524c:	4798      	blx	r3
        _wire -> endTransmission();
   d524e:	6820      	ldr	r0, [r4, #0]
   d5250:	f003 f94a 	bl	d84e8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5254:	7921      	ldrb	r1, [r4, #4]
   d5256:	6820      	ldr	r0, [r4, #0]
   d5258:	2202      	movs	r2, #2
   d525a:	f003 f922 	bl	d84a2 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d525e:	6820      	ldr	r0, [r4, #0]
   d5260:	6803      	ldr	r3, [r0, #0]
   d5262:	695b      	ldr	r3, [r3, #20]
   d5264:	4798      	blx	r3
   d5266:	4605      	mov	r5, r0
   d5268:	6820      	ldr	r0, [r4, #0]
   d526a:	6803      	ldr	r3, [r0, #0]
   d526c:	695b      	ldr	r3, [r3, #20]
   d526e:	4798      	blx	r3
   d5270:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5274:	b285      	uxth	r5, r0
}
   d5276:	4628      	mov	r0, r5
   d5278:	b005      	add	sp, #20
   d527a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d527c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5280:	3301      	adds	r3, #1
   d5282:	d10c      	bne.n	d529e <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5284:	4b18      	ldr	r3, [pc, #96]	; (d52e8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5286:	9300      	str	r3, [sp, #0]
   d5288:	2300      	movs	r3, #0
   d528a:	f88d 3004 	strb.w	r3, [sp, #4]
   d528e:	4b17      	ldr	r3, [pc, #92]	; (d52ec <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5290:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5292:	4668      	mov	r0, sp
   d5294:	2301      	movs	r3, #1
   d5296:	f8ad 300c 	strh.w	r3, [sp, #12]
   d529a:	f7ff ff24 	bl	d50e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d529e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52a2:	2100      	movs	r1, #0
   d52a4:	b280      	uxth	r0, r0
   d52a6:	f005 fe44 	bl	daf32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d52aa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff fedc 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d52b4:	2100      	movs	r1, #0
   d52b6:	4620      	mov	r0, r4
   d52b8:	f7ff fed8 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
   d52bc:	2100      	movs	r1, #0
   d52be:	4605      	mov	r5, r0
   d52c0:	4620      	mov	r0, r4
   d52c2:	f7ff fed3 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
   d52c6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d52ca:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d52cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52d0:	2101      	movs	r1, #1
   d52d2:	b280      	uxth	r0, r0
   d52d4:	f005 fe2d 	bl	daf32 <digitalWrite>
        if (_sck == -1)
   d52d8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d52dc:	3301      	adds	r3, #1
   d52de:	d1ca      	bne.n	d5276 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d52e0:	f7ff fefa 	bl	d50d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d52e4:	e7c7      	b.n	d5276 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d52e6:	bf00      	nop
   d52e8:	000de084 	.word	0x000de084
   d52ec:	0007a120 	.word	0x0007a120

000d52f0 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d52f0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d52f2:	f7ff ff9b 	bl	d522c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d52f6:	ba40      	rev16	r0, r0
}
   d52f8:	b280      	uxth	r0, r0
   d52fa:	bd08      	pop	{r3, pc}

000d52fc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d52fc:	b538      	push	{r3, r4, r5, lr}
   d52fe:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5300:	f7ff ff66 	bl	d51d0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5304:	21fd      	movs	r1, #253	; 0xfd
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff ff90 	bl	d522c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d530c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5310:	d038      	beq.n	d5384 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5312:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5316:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5318:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d531c:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d531e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5322:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5326:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d532a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d532e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5330:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5334:	4353      	muls	r3, r2
   d5336:	12db      	asrs	r3, r3, #11
   d5338:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d533c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5340:	4353      	muls	r3, r2
   d5342:	129b      	asrs	r3, r3, #10
   d5344:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5346:	129b      	asrs	r3, r3, #10
   d5348:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d534c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5350:	4353      	muls	r3, r2
   d5352:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5356:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5358:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d535a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d535c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5360:	4352      	muls	r2, r2
   d5362:	11d2      	asrs	r2, r2, #7
   d5364:	434a      	muls	r2, r1
   d5366:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d536a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d536e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5372:	bfa8      	it	ge
   d5374:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5378:	131b      	asrs	r3, r3, #12
   d537a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d537e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5382:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5384:	ed9f 0a01 	vldr	s0, [pc, #4]	; d538c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5388:	e7fb      	b.n	d5382 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d538a:	bf00      	nop
   d538c:	7fc00000 	.word	0x7fc00000

000d5390 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5390:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5392:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5396:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5398:	b085      	sub	sp, #20
   d539a:	4604      	mov	r4, r0
   d539c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d539e:	d118      	bne.n	d53d2 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d53a0:	7901      	ldrb	r1, [r0, #4]
   d53a2:	6800      	ldr	r0, [r0, #0]
   d53a4:	f003 f880 	bl	d84a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d53a8:	6820      	ldr	r0, [r4, #0]
   d53aa:	6803      	ldr	r3, [r0, #0]
   d53ac:	4629      	mov	r1, r5
   d53ae:	689b      	ldr	r3, [r3, #8]
   d53b0:	4798      	blx	r3
        _wire -> endTransmission();
   d53b2:	6820      	ldr	r0, [r4, #0]
   d53b4:	f003 f898 	bl	d84e8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d53b8:	7921      	ldrb	r1, [r4, #4]
   d53ba:	6820      	ldr	r0, [r4, #0]
   d53bc:	2201      	movs	r2, #1
   d53be:	f003 f870 	bl	d84a2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d53c2:	6820      	ldr	r0, [r4, #0]
   d53c4:	6803      	ldr	r3, [r0, #0]
   d53c6:	695b      	ldr	r3, [r3, #20]
   d53c8:	4798      	blx	r3
   d53ca:	b2c5      	uxtb	r5, r0
}
   d53cc:	4628      	mov	r0, r5
   d53ce:	b005      	add	sp, #20
   d53d0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d53d2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d53d6:	3301      	adds	r3, #1
   d53d8:	d10c      	bne.n	d53f4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d53da:	4b15      	ldr	r3, [pc, #84]	; (d5430 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d53dc:	9300      	str	r3, [sp, #0]
   d53de:	2300      	movs	r3, #0
   d53e0:	f88d 3004 	strb.w	r3, [sp, #4]
   d53e4:	4b13      	ldr	r3, [pc, #76]	; (d5434 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d53e6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d53e8:	4668      	mov	r0, sp
   d53ea:	2301      	movs	r3, #1
   d53ec:	f8ad 300c 	strh.w	r3, [sp, #12]
   d53f0:	f7ff fe79 	bl	d50e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d53f4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d53f8:	2100      	movs	r1, #0
   d53fa:	b280      	uxth	r0, r0
   d53fc:	f005 fd99 	bl	daf32 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5400:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5404:	4620      	mov	r0, r4
   d5406:	f7ff fe31 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d540a:	2100      	movs	r1, #0
   d540c:	4620      	mov	r0, r4
   d540e:	f7ff fe2d 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
   d5412:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5414:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5418:	2101      	movs	r1, #1
   d541a:	b280      	uxth	r0, r0
   d541c:	f005 fd89 	bl	daf32 <digitalWrite>
        if (_sck == -1)
   d5420:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5424:	3301      	adds	r3, #1
   d5426:	d1d1      	bne.n	d53cc <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5428:	f7ff fe56 	bl	d50d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d542c:	e7ce      	b.n	d53cc <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d542e:	bf00      	nop
   d5430:	000de084 	.word	0x000de084
   d5434:	0007a120 	.word	0x0007a120

000d5438 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5438:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d543a:	21f3      	movs	r1, #243	; 0xf3
   d543c:	f7ff ffa8 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
}
   d5440:	f000 0001 	and.w	r0, r0, #1
   d5444:	bd08      	pop	{r3, pc}

000d5446 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5446:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5448:	2188      	movs	r1, #136	; 0x88
{
   d544a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d544c:	f7ff ff50 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5450:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5452:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5454:	4620      	mov	r0, r4
   d5456:	f7ff ff4b 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d545a:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d545c:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d545e:	4620      	mov	r0, r4
   d5460:	f7ff ff46 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5464:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5466:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5468:	4620      	mov	r0, r4
   d546a:	f7ff ff41 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d546e:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5470:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5472:	4620      	mov	r0, r4
   d5474:	f7ff ff3c 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5478:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d547a:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d547c:	4620      	mov	r0, r4
   d547e:	f7ff ff37 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5482:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5484:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5486:	4620      	mov	r0, r4
   d5488:	f7ff ff32 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d548c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d548e:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5490:	4620      	mov	r0, r4
   d5492:	f7ff ff2d 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5496:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5498:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d549a:	4620      	mov	r0, r4
   d549c:	f7ff ff28 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d54a0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d54a2:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d54a4:	4620      	mov	r0, r4
   d54a6:	f7ff ff23 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d54aa:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d54ac:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d54ae:	4620      	mov	r0, r4
   d54b0:	f7ff ff1e 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
   d54b4:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d54b6:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d54b8:	4620      	mov	r0, r4
   d54ba:	f7ff ff19 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d54be:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d54c0:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d54c2:	4620      	mov	r0, r4
   d54c4:	f7ff ff64 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d54c8:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d54ca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d54ce:	4620      	mov	r0, r4
   d54d0:	f7ff ff0e 	bl	d52f0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d54d4:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d54d6:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d54d8:	4620      	mov	r0, r4
   d54da:	f7ff ff59 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d54de:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d54e0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d54e4:	4620      	mov	r0, r4
   d54e6:	f7ff ff53 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
   d54ea:	21e5      	movs	r1, #229	; 0xe5
   d54ec:	4605      	mov	r5, r0
   d54ee:	4620      	mov	r0, r4
   d54f0:	f7ff ff4e 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
   d54f4:	f000 030f 	and.w	r3, r0, #15
   d54f8:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d54fc:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d54fe:	21e6      	movs	r1, #230	; 0xe6
   d5500:	4620      	mov	r0, r4
   d5502:	f7ff ff45 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
   d5506:	21e5      	movs	r1, #229	; 0xe5
   d5508:	4605      	mov	r5, r0
   d550a:	4620      	mov	r0, r4
   d550c:	f7ff ff40 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
   d5510:	1103      	asrs	r3, r0, #4
   d5512:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5516:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5518:	21e7      	movs	r1, #231	; 0xe7
   d551a:	4620      	mov	r0, r4
   d551c:	f7ff ff38 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
   d5520:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5524:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5528 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d552a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d552e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5530:	4604      	mov	r4, r0
   d5532:	460e      	mov	r6, r1
   d5534:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5536:	d112      	bne.n	d555e <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5538:	7901      	ldrb	r1, [r0, #4]
   d553a:	6800      	ldr	r0, [r0, #0]
   d553c:	f002 ffb4 	bl	d84a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5540:	6820      	ldr	r0, [r4, #0]
   d5542:	6803      	ldr	r3, [r0, #0]
   d5544:	4631      	mov	r1, r6
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d554a:	6820      	ldr	r0, [r4, #0]
   d554c:	6803      	ldr	r3, [r0, #0]
   d554e:	4629      	mov	r1, r5
   d5550:	689b      	ldr	r3, [r3, #8]
   d5552:	4798      	blx	r3
        _wire -> endTransmission();
   d5554:	6820      	ldr	r0, [r4, #0]
   d5556:	f002 ffc7 	bl	d84e8 <_ZN7TwoWire15endTransmissionEv>
}
   d555a:	b004      	add	sp, #16
   d555c:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d555e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5562:	3301      	adds	r3, #1
   d5564:	d10c      	bne.n	d5580 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5566:	4b14      	ldr	r3, [pc, #80]	; (d55b8 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5568:	9300      	str	r3, [sp, #0]
   d556a:	2300      	movs	r3, #0
   d556c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5570:	4b12      	ldr	r3, [pc, #72]	; (d55bc <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5572:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5574:	4668      	mov	r0, sp
   d5576:	2301      	movs	r3, #1
   d5578:	f8ad 300c 	strh.w	r3, [sp, #12]
   d557c:	f7ff fdb3 	bl	d50e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5580:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5584:	2100      	movs	r1, #0
   d5586:	b280      	uxth	r0, r0
   d5588:	f005 fcd3 	bl	daf32 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d558c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5590:	4620      	mov	r0, r4
   d5592:	f7ff fd6b 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5596:	4629      	mov	r1, r5
   d5598:	4620      	mov	r0, r4
   d559a:	f7ff fd67 	bl	d506c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d559e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55a2:	2101      	movs	r1, #1
   d55a4:	b280      	uxth	r0, r0
   d55a6:	f005 fcc4 	bl	daf32 <digitalWrite>
    if (_sck == -1)
   d55aa:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d55ae:	3301      	adds	r3, #1
   d55b0:	d1d3      	bne.n	d555a <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d55b2:	f7ff fd91 	bl	d50d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d55b6:	e7d0      	b.n	d555a <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d55b8:	000de084 	.word	0x000de084
   d55bc:	0007a120 	.word	0x0007a120

000d55c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d55c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d55c2:	00db      	lsls	r3, r3, #3
   d55c4:	f002 0207 	and.w	r2, r2, #7
   d55c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d55cc:	4313      	orrs	r3, r2
   d55ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d55d2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d55d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d55da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d55de:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d55e2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d55e6:	f366 1347 	bfi	r3, r6, #5, #3
   d55ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d55ee:	00ed      	lsls	r5, r5, #3
   d55f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d55f4:	f007 0707 	and.w	r7, r7, #7
   d55f8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d55fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5600:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5602:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5604:	431d      	orrs	r5, r3
   d5606:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d560a:	f006 0207 	and.w	r2, r6, #7
   d560e:	21f2      	movs	r1, #242	; 0xf2
   d5610:	f7ff ff8a 	bl	d5528 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5614:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5618:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d561c:	f002 0107 	and.w	r1, r2, #7
   d5620:	009b      	lsls	r3, r3, #2
   d5622:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5626:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d562a:	4620      	mov	r0, r4
   d562c:	21f5      	movs	r1, #245	; 0xf5
   d562e:	f7ff ff7b 	bl	d5528 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5632:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5636:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d563a:	f002 0107 	and.w	r1, r2, #7
   d563e:	009b      	lsls	r3, r3, #2
   d5640:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5644:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5648:	4620      	mov	r0, r4
   d564a:	21f4      	movs	r1, #244	; 0xf4
}
   d564c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5650:	f7ff bf6a 	b.w	d5528 <_ZN15Adafruit_BME2806write8Ehh>

000d5654 <_ZN15Adafruit_BME2804initEv>:
{
   d5654:	b530      	push	{r4, r5, lr}
   d5656:	4604      	mov	r4, r0
    if (_cs == -1) {
   d5658:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d565c:	1c42      	adds	r2, r0, #1
{
   d565e:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5660:	d119      	bne.n	d5696 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5662:	6820      	ldr	r0, [r4, #0]
   d5664:	f002 feee 	bl	d8444 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5668:	21d0      	movs	r1, #208	; 0xd0
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff fe90 	bl	d5390 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5670:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5672:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5674:	d145      	bne.n	d5702 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5676:	4620      	mov	r0, r4
   d5678:	22b6      	movs	r2, #182	; 0xb6
   d567a:	21e0      	movs	r1, #224	; 0xe0
   d567c:	f7ff ff54 	bl	d5528 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5680:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5684:	f002 f9d2 	bl	d7a2c <delay>
    while (isReadingCalibration())
   d5688:	4620      	mov	r0, r4
   d568a:	f7ff fed5 	bl	d5438 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d568e:	4605      	mov	r5, r0
   d5690:	b328      	cbz	r0, d56de <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5692:	2064      	movs	r0, #100	; 0x64
   d5694:	e7f6      	b.n	d5684 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5696:	2101      	movs	r1, #1
   d5698:	b280      	uxth	r0, r0
   d569a:	f005 fc4a 	bl	daf32 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d569e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d56a2:	2101      	movs	r1, #1
   d56a4:	b280      	uxth	r0, r0
   d56a6:	f005 fc33 	bl	daf10 <pinMode>
        if (_sck == -1) {
   d56aa:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d56ae:	1c43      	adds	r3, r0, #1
   d56b0:	d104      	bne.n	d56bc <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d56b2:	f7ff fcbf 	bl	d5034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d56b6:	f004 fab9 	bl	d9c2c <_ZN8SPIClass5beginEv>
    }
   d56ba:	e7d5      	b.n	d5668 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d56bc:	2101      	movs	r1, #1
   d56be:	b280      	uxth	r0, r0
   d56c0:	f005 fc26 	bl	daf10 <pinMode>
            pinMode(_mosi, OUTPUT);
   d56c4:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d56c8:	2101      	movs	r1, #1
   d56ca:	b280      	uxth	r0, r0
   d56cc:	f005 fc20 	bl	daf10 <pinMode>
            pinMode(_miso, INPUT);
   d56d0:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d56d4:	2100      	movs	r1, #0
   d56d6:	b280      	uxth	r0, r0
   d56d8:	f005 fc1a 	bl	daf10 <pinMode>
   d56dc:	e7c4      	b.n	d5668 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d56de:	4620      	mov	r0, r4
   d56e0:	f7ff feb1 	bl	d5446 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d56e4:	2305      	movs	r3, #5
   d56e6:	9300      	str	r3, [sp, #0]
   d56e8:	461a      	mov	r2, r3
   d56ea:	2103      	movs	r1, #3
   d56ec:	4620      	mov	r0, r4
   d56ee:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d56f2:	f7ff ff65 	bl	d55c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d56f6:	2064      	movs	r0, #100	; 0x64
   d56f8:	f002 f998 	bl	d7a2c <delay>
   d56fc:	2001      	movs	r0, #1
}
   d56fe:	b005      	add	sp, #20
   d5700:	bd30      	pop	{r4, r5, pc}
        return false;
   d5702:	2000      	movs	r0, #0
   d5704:	e7fb      	b.n	d56fe <_ZN15Adafruit_BME2804initEv+0xaa>

000d5706 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d5706:	2377      	movs	r3, #119	; 0x77
{
   d5708:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d570a:	7103      	strb	r3, [r0, #4]
{
   d570c:	4604      	mov	r4, r0
	_wire = &Wire;
   d570e:	f005 fc6f 	bl	daff0 <_Z19__fetch_global_Wirev>
   d5712:	6020      	str	r0, [r4, #0]
	status = init();
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff ff9d 	bl	d5654 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d571a:	b930      	cbnz	r0, d572a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d571c:	2376      	movs	r3, #118	; 0x76
   d571e:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5720:	4620      	mov	r0, r4
}
   d5722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d5726:	f7ff bf95 	b.w	d5654 <_ZN15Adafruit_BME2804initEv>
}
   d572a:	bd10      	pop	{r4, pc}

000d572c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d572c:	b510      	push	{r4, lr}
   d572e:	4b05      	ldr	r3, [pc, #20]	; (d5744 <_ZN10JsonBufferD1Ev+0x18>)
   d5730:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5732:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d5734:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5736:	b91b      	cbnz	r3, d5740 <_ZN10JsonBufferD1Ev+0x14>
   d5738:	6840      	ldr	r0, [r0, #4]
   d573a:	b108      	cbz	r0, d5740 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d573c:	f002 f936 	bl	d79ac <free>
	}
}
   d5740:	4620      	mov	r0, r4
   d5742:	bd10      	pop	{r4, pc}
   d5744:	000de0ac 	.word	0x000de0ac

000d5748 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d5748:	b510      	push	{r4, lr}
   d574a:	4604      	mov	r4, r0
}
   d574c:	f7ff ffee 	bl	d572c <_ZN10JsonBufferD1Ev>
   d5750:	4620      	mov	r0, r4
   d5752:	2114      	movs	r1, #20
   d5754:	f005 fc94 	bl	db080 <_ZdlPvj>
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}

000d575c <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d575c:	b510      	push	{r4, lr}
   d575e:	4b03      	ldr	r3, [pc, #12]	; (d576c <_ZN10JsonWriterD1Ev+0x10>)
   d5760:	6003      	str	r3, [r0, #0]
   d5762:	4604      	mov	r4, r0
   d5764:	f7ff ffe2 	bl	d572c <_ZN10JsonBufferD1Ev>

}
   d5768:	4620      	mov	r0, r4
   d576a:	bd10      	pop	{r4, pc}
   d576c:	000de0bc 	.word	0x000de0bc

000d5770 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   d5770:	b510      	push	{r4, lr}
   d5772:	4604      	mov	r4, r0
}
   d5774:	f7ff fff2 	bl	d575c <_ZN10JsonWriterD1Ev>
   d5778:	4620      	mov	r0, r4
   d577a:	2130      	movs	r1, #48	; 0x30
   d577c:	f005 fc80 	bl	db080 <_ZdlPvj>
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}

000d5784 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5784:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5786:	2201      	movs	r2, #1
	offset = 0;
   d5788:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   d578a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d578c:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   d578e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   d5792:	4770      	bx	lr

000d5794 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5794:	2300      	movs	r3, #0
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5796:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5798:	60c3      	str	r3, [r0, #12]
   d579a:	2301      	movs	r3, #1
   d579c:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d579e:	4b05      	ldr	r3, [pc, #20]	; (d57b4 <_ZN10JsonWriterC1EPcj+0x20>)
   d57a0:	6003      	str	r3, [r0, #0]
   d57a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d57a6:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d57aa:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d57ac:	f7ff ffea 	bl	d5784 <_ZN10JsonWriter4initEv>
}
   d57b0:	bd10      	pop	{r4, pc}
   d57b2:	bf00      	nop
   d57b4:	000de0bc 	.word	0x000de0bc

000d57b8 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d57b8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   d57bc:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d57be:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d57c0:	bf3f      	itttt	cc
   d57c2:	6842      	ldrcc	r2, [r0, #4]
   d57c4:	1c5c      	addcc	r4, r3, #1
   d57c6:	60c4      	strcc	r4, [r0, #12]
   d57c8:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d57ca:	bf24      	itt	cs
   d57cc:	2301      	movcs	r3, #1
   d57ce:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   d57d2:	bd10      	pop	{r4, pc}

000d57d4 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   d57d4:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d57d6:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   d57d8:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d57da:	b143      	cbz	r3, d57ee <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d57dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d57e0:	7e59      	ldrb	r1, [r3, #25]
   d57e2:	b109      	cbz	r1, d57e8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d57e4:	f7ff ffe8 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   d57e8:	6963      	ldr	r3, [r4, #20]
   d57ea:	3b01      	subs	r3, #1
   d57ec:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   d57ee:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   d57f2:	6863      	ldr	r3, [r4, #4]
   d57f4:	4288      	cmp	r0, r1
   d57f6:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   d57fa:	bf2a      	itet	cs
   d57fc:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   d57fe:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   d5800:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   d5804:	bd10      	pop	{r4, pc}

000d5806 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5806:	b570      	push	{r4, r5, r6, lr}
   d5808:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d580a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d580e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   d5810:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5812:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5814:	4430      	add	r0, r6
   d5816:	460a      	mov	r2, r1
   d5818:	4629      	mov	r1, r5
   d581a:	f002 f8df 	bl	d79dc <vsnprintf>
	if (count <= spaceAvailable) {
   d581e:	4285      	cmp	r5, r0
		offset += count;
   d5820:	bf2d      	iteet	cs
   d5822:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5824:	68a3      	ldrcc	r3, [r4, #8]
   d5826:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   d5828:	18c0      	addcs	r0, r0, r3
		truncated = true;
   d582a:	bf36      	itet	cc
   d582c:	2301      	movcc	r3, #1
		offset += count;
   d582e:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   d5830:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   d5834:	bd70      	pop	{r4, r5, r6, pc}

000d5836 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5836:	b40e      	push	{r1, r2, r3}
   d5838:	b503      	push	{r0, r1, lr}
   d583a:	aa03      	add	r2, sp, #12
   d583c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   d5840:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5842:	f7ff ffe0 	bl	d5806 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   d5846:	b002      	add	sp, #8
   d5848:	f85d eb04 	ldr.w	lr, [sp], #4
   d584c:	b003      	add	sp, #12
   d584e:	4770      	bx	lr

000d5850 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   d5850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5854:	4604      	mov	r4, r0
   d5856:	460e      	mov	r6, r1
	if (quoted) {
   d5858:	4617      	mov	r7, r2
   d585a:	b112      	cbz	r2, d5862 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d585c:	2122      	movs	r1, #34	; 0x22
   d585e:	f7ff ffab 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   d5862:	f8df 810c 	ldr.w	r8, [pc, #268]	; d5970 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   d5866:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5868:	5d71      	ldrb	r1, [r6, r5]
   d586a:	eb06 0905 	add.w	r9, r6, r5
   d586e:	2900      	cmp	r1, #0
   d5870:	d074      	beq.n	d595c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   d5872:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d5876:	429a      	cmp	r2, r3
   d5878:	d270      	bcs.n	d595c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   d587a:	060b      	lsls	r3, r1, #24
   d587c:	d534      	bpl.n	d58e8 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d587e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5882:	2be0      	cmp	r3, #224	; 0xe0
   d5884:	f105 0901 	add.w	r9, r5, #1
   d5888:	d11d      	bne.n	d58c6 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   d588a:	f816 2009 	ldrb.w	r2, [r6, r9]
   d588e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   d5892:	2b80      	cmp	r3, #128	; 0x80
   d5894:	d139      	bne.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5896:	f105 0902 	add.w	r9, r5, #2
   d589a:	f816 3009 	ldrb.w	r3, [r6, r9]
   d589e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   d58a2:	2880      	cmp	r0, #128	; 0x80
   d58a4:	d131      	bne.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   d58a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d58aa:	0192      	lsls	r2, r2, #6
   d58ac:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   d58b0:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   d58b4:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   d58b6:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   d58b8:	4641      	mov	r1, r8
   d58ba:	4620      	mov	r0, r4
   d58bc:	f7ff ffbb 	bl	d5836 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d58c0:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d58c2:	3501      	adds	r5, #1
   d58c4:	e7d0      	b.n	d5868 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d58c6:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d58ca:	2bc0      	cmp	r3, #192	; 0xc0
   d58cc:	d11d      	bne.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d58ce:	f816 3009 	ldrb.w	r3, [r6, r9]
   d58d2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d58d6:	2a80      	cmp	r2, #128	; 0x80
   d58d8:	d117      	bne.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   d58da:	0189      	lsls	r1, r1, #6
   d58dc:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d58e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   d58e4:	431a      	orrs	r2, r3
   d58e6:	e7e7      	b.n	d58b8 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   d58e8:	290d      	cmp	r1, #13
   d58ea:	d80a      	bhi.n	d5902 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   d58ec:	2907      	cmp	r1, #7
   d58ee:	d90c      	bls.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d58f0:	f1a1 0308 	sub.w	r3, r1, #8
   d58f4:	2b05      	cmp	r3, #5
   d58f6:	d808      	bhi.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d58f8:	e8df f003 	tbb	[pc, r3]
   d58fc:	0717230b 	.word	0x0717230b
   d5900:	1d11      	.short	0x1d11
   d5902:	2922      	cmp	r1, #34	; 0x22
   d5904:	d023      	beq.n	d594e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   d5906:	295c      	cmp	r1, #92	; 0x5c
   d5908:	d021      	beq.n	d594e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   d590a:	4620      	mov	r0, r4
   d590c:	f7ff ff54 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				break;
   d5910:	e7d7      	b.n	d58c2 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   d5912:	215c      	movs	r1, #92	; 0x5c
   d5914:	4620      	mov	r0, r4
   d5916:	f7ff ff4f 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d591a:	2162      	movs	r1, #98	; 0x62
   d591c:	e7f5      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d591e:	215c      	movs	r1, #92	; 0x5c
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff ff49 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5926:	2166      	movs	r1, #102	; 0x66
   d5928:	e7ef      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d592a:	215c      	movs	r1, #92	; 0x5c
   d592c:	4620      	mov	r0, r4
   d592e:	f7ff ff43 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5932:	216e      	movs	r1, #110	; 0x6e
   d5934:	e7e9      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d5936:	215c      	movs	r1, #92	; 0x5c
   d5938:	4620      	mov	r0, r4
   d593a:	f7ff ff3d 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d593e:	2172      	movs	r1, #114	; 0x72
   d5940:	e7e3      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d5942:	215c      	movs	r1, #92	; 0x5c
   d5944:	4620      	mov	r0, r4
   d5946:	f7ff ff37 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d594a:	2174      	movs	r1, #116	; 0x74
   d594c:	e7dd      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d594e:	215c      	movs	r1, #92	; 0x5c
   d5950:	4620      	mov	r0, r4
   d5952:	f7ff ff31 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5956:	f899 1000 	ldrb.w	r1, [r9]
   d595a:	e7d6      	b.n	d590a <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
   d595c:	b12f      	cbz	r7, d596a <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   d595e:	4620      	mov	r0, r4
   d5960:	2122      	movs	r1, #34	; 0x22
}
   d5962:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   d5966:	f7ff bf27 	b.w	d57b8 <_ZN10JsonWriter10insertCharEc>
}
   d596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d596e:	bf00      	nop
   d5970:	000de090 	.word	0x000de090

000d5974 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   d5974:	6942      	ldr	r2, [r0, #20]
   d5976:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   d597a:	7e1a      	ldrb	r2, [r3, #24]
   d597c:	b112      	cbz	r2, d5984 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d597e:	2200      	movs	r2, #0
   d5980:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   d5982:	4770      	bx	lr
		insertChar(',');
   d5984:	212c      	movs	r1, #44	; 0x2c
   d5986:	f7ff bf17 	b.w	d57b8 <_ZN10JsonWriter10insertCharEc>

000d598a <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d598a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d598c:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d598e:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5990:	3301      	adds	r3, #1
   d5992:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5994:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5996:	d80f      	bhi.n	d59b8 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   d5998:	f7ff ffec 	bl	d5974 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   d599c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   d599e:	9901      	ldr	r1, [sp, #4]
	contextIndex++;
   d59a0:	1c5a      	adds	r2, r3, #1
   d59a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	context[contextIndex].isFirst = true;
   d59a6:	2501      	movs	r5, #1
	contextIndex++;
   d59a8:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   d59aa:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
   d59ac:	76de      	strb	r6, [r3, #27]
	insertChar(startChar);
   d59ae:	f7ff ff03 	bl	d57b8 <_ZN10JsonWriter10insertCharEc>
   d59b2:	4628      	mov	r0, r5
}
   d59b4:	b002      	add	sp, #8
   d59b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   d59b8:	2000      	movs	r0, #0
   d59ba:	e7fb      	b.n	d59b4 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000d59bc <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d59bc:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d59be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   d59c0:	2900      	cmp	r1, #0
void JsonWriter::insertValue(double value) {
   d59c2:	ec53 2b10 	vmov	r2, r3, d0
	if (floatPlaces >= 0) {
   d59c6:	db08      	blt.n	d59da <_ZN10JsonWriter11insertValueEd+0x1e>
		insertsprintf("%.*lf", floatPlaces, value);
   d59c8:	460a      	mov	r2, r1
   d59ca:	ed8d 0b00 	vstr	d0, [sp]
   d59ce:	4906      	ldr	r1, [pc, #24]	; (d59e8 <_ZN10JsonWriter11insertValueEd+0x2c>)
   d59d0:	f7ff ff31 	bl	d5836 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d59d4:	b003      	add	sp, #12
   d59d6:	f85d fb04 	ldr.w	pc, [sp], #4
		insertsprintf("%lf", value);
   d59da:	4904      	ldr	r1, [pc, #16]	; (d59ec <_ZN10JsonWriter11insertValueEd+0x30>)
}
   d59dc:	b003      	add	sp, #12
   d59de:	f85d eb04 	ldr.w	lr, [sp], #4
		insertsprintf("%lf", value);
   d59e2:	f7ff bf28 	b.w	d5836 <_ZN10JsonWriter13insertsprintfEPKcz>
   d59e6:	bf00      	nop
   d59e8:	000de097 	.word	0x000de097
   d59ec:	000de09d 	.word	0x000de09d

000d59f0 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d59f0:	6803      	ldr	r3, [r0, #0]
   d59f2:	4718      	bx	r3

000d59f4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d59f4:	2a01      	cmp	r2, #1
   d59f6:	d003      	beq.n	d5a00 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d59f8:	2a02      	cmp	r2, #2
   d59fa:	d003      	beq.n	d5a04 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d59fc:	2000      	movs	r0, #0
   d59fe:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a00:	6001      	str	r1, [r0, #0]
	      break;
   d5a02:	e7fb      	b.n	d59fc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5a04:	680b      	ldr	r3, [r1, #0]
   d5a06:	6003      	str	r3, [r0, #0]
	}
   d5a08:	e7f8      	b.n	d59fc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5a0c <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5a0c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5a0e:	201c      	movs	r0, #28
   d5a10:	f7fe fb41 	bl	d4096 <_Znwj>
   d5a14:	4604      	mov	r4, r0
   d5a16:	b148      	cbz	r0, d5a2c <_Z10builderTcpv+0x20>
   d5a18:	4b06      	ldr	r3, [pc, #24]	; (d5a34 <_Z10builderTcpv+0x28>)
   d5a1a:	4907      	ldr	r1, [pc, #28]	; (d5a38 <_Z10builderTcpv+0x2c>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	9300      	str	r3, [sp, #0]
   d5a20:	6809      	ldr	r1, [r1, #0]
   d5a22:	4b06      	ldr	r3, [pc, #24]	; (d5a3c <_Z10builderTcpv+0x30>)
   d5a24:	f242 3234 	movw	r2, #9012	; 0x2334
   d5a28:	f001 f804 	bl	d6a34 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	b002      	add	sp, #8
   d5a30:	bd10      	pop	{r4, pc}
   d5a32:	bf00      	nop
   d5a34:	2003e430 	.word	0x2003e430
   d5a38:	2003e42c 	.word	0x2003e42c
   d5a3c:	000de0c4 	.word	0x000de0c4

000d5a40 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5a40:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5a42:	2020      	movs	r0, #32
   d5a44:	f7fe fb27 	bl	d4096 <_Znwj>
   d5a48:	4604      	mov	r4, r0
   d5a4a:	b140      	cbz	r0, d5a5e <_Z11builderHttpv+0x1e>
   d5a4c:	4b05      	ldr	r3, [pc, #20]	; (d5a64 <_Z11builderHttpv+0x24>)
   d5a4e:	4906      	ldr	r1, [pc, #24]	; (d5a68 <_Z11builderHttpv+0x28>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	9300      	str	r3, [sp, #0]
   d5a54:	6809      	ldr	r1, [r1, #0]
   d5a56:	4b05      	ldr	r3, [pc, #20]	; (d5a6c <_Z11builderHttpv+0x2c>)
   d5a58:	2250      	movs	r2, #80	; 0x50
   d5a5a:	f000 fa1f 	bl	d5e9c <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5a5e:	4620      	mov	r0, r4
   d5a60:	b002      	add	sp, #8
   d5a62:	bd10      	pop	{r4, pc}
   d5a64:	2003e430 	.word	0x2003e430
   d5a68:	2003e42c 	.word	0x2003e42c
   d5a6c:	000de0c4 	.word	0x000de0c4

000d5a70 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5a70:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5a72:	201c      	movs	r0, #28
   d5a74:	f7fe fb0f 	bl	d4096 <_Znwj>
   d5a78:	4604      	mov	r4, r0
   d5a7a:	b148      	cbz	r0, d5a90 <_Z10builderUdpv+0x20>
   d5a7c:	4b06      	ldr	r3, [pc, #24]	; (d5a98 <_Z10builderUdpv+0x28>)
   d5a7e:	4907      	ldr	r1, [pc, #28]	; (d5a9c <_Z10builderUdpv+0x2c>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	9300      	str	r3, [sp, #0]
   d5a84:	6809      	ldr	r1, [r1, #0]
   d5a86:	4b06      	ldr	r3, [pc, #24]	; (d5aa0 <_Z10builderUdpv+0x30>)
   d5a88:	f242 3234 	movw	r2, #9012	; 0x2334
   d5a8c:	f001 fb30 	bl	d70f0 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5a90:	4620      	mov	r0, r4
   d5a92:	b002      	add	sp, #8
   d5a94:	bd10      	pop	{r4, pc}
   d5a96:	bf00      	nop
   d5a98:	2003e430 	.word	0x2003e430
   d5a9c:	2003e42c 	.word	0x2003e42c
   d5aa0:	000de0c4 	.word	0x000de0c4

000d5aa4 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5aa4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d5aa6:	2014      	movs	r0, #20
   d5aa8:	f7fe faf5 	bl	d4096 <_Znwj>
   d5aac:	4604      	mov	r4, r0
   d5aae:	b140      	cbz	r0, d5ac2 <_Z15builderParticlev+0x1e>
   d5ab0:	4b05      	ldr	r3, [pc, #20]	; (d5ac8 <_Z15builderParticlev+0x24>)
   d5ab2:	4906      	ldr	r1, [pc, #24]	; (d5acc <_Z15builderParticlev+0x28>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	9300      	str	r3, [sp, #0]
   d5ab8:	2300      	movs	r3, #0
   d5aba:	6809      	ldr	r1, [r1, #0]
   d5abc:	461a      	mov	r2, r3
   d5abe:	f000 fd0d 	bl	d64dc <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	b002      	add	sp, #8
   d5ac6:	bd10      	pop	{r4, pc}
   d5ac8:	2003e430 	.word	0x2003e430
   d5acc:	2003e42c 	.word	0x2003e42c

000d5ad0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5ad0:	b510      	push	{r4, lr}
      if (_M_manager)
   d5ad2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5ad4:	4604      	mov	r4, r0
      if (_M_manager)
   d5ad6:	b113      	cbz	r3, d5ade <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ad8:	2203      	movs	r2, #3
   d5ada:	4601      	mov	r1, r0
   d5adc:	4798      	blx	r3
    }
   d5ade:	4620      	mov	r0, r4
   d5ae0:	bd10      	pop	{r4, pc}
	...

000d5ae4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5ae4:	b510      	push	{r4, lr}
   d5ae6:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ae8:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5aea:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5aec:	4604      	mov	r4, r0
   d5aee:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5af2:	466a      	mov	r2, sp
   d5af4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5af8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5afc:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b00:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b04:	68a2      	ldr	r2, [r4, #8]
   d5b06:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b08:	4a06      	ldr	r2, [pc, #24]	; (d5b24 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d5b0a:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5b0c:	68e2      	ldr	r2, [r4, #12]
   d5b0e:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b10:	4a05      	ldr	r2, [pc, #20]	; (d5b28 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d5b12:	60e2      	str	r2, [r4, #12]
   d5b14:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d5b18:	4618      	mov	r0, r3
   d5b1a:	f7ff ffd9 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5b1e:	4620      	mov	r0, r4
   d5b20:	b006      	add	sp, #24
   d5b22:	bd10      	pop	{r4, pc}
   d5b24:	000d59f5 	.word	0x000d59f5
   d5b28:	000d59f1 	.word	0x000d59f1

000d5b2c <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5b2c:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d5b2e:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5b32:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5b34:	460b      	mov	r3, r1
      while (__x != 0)
   d5b36:	b13a      	cbz	r2, d5b48 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5b38:	7c15      	ldrb	r5, [r2, #16]
   d5b3a:	7804      	ldrb	r4, [r0, #0]
   d5b3c:	42a5      	cmp	r5, r4
   d5b3e:	bf2a      	itet	cs
   d5b40:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5b42:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5b44:	6892      	ldrcs	r2, [r2, #8]
   d5b46:	e7f6      	b.n	d5b36 <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5b48:	4299      	cmp	r1, r3
   d5b4a:	d004      	beq.n	d5b56 <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d5b4c:	7800      	ldrb	r0, [r0, #0]
   d5b4e:	7c1a      	ldrb	r2, [r3, #16]
   d5b50:	4290      	cmp	r0, r2
   d5b52:	bf38      	it	cc
   d5b54:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b56:	69da      	ldr	r2, [r3, #28]
   d5b58:	b90a      	cbnz	r2, d5b5e <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d5b5a:	f005 fb49 	bl	db1f0 <_ZSt25__throw_bad_function_callv>
}
   d5b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b62:	6a1a      	ldr	r2, [r3, #32]
   d5b64:	f103 0014 	add.w	r0, r3, #20
   d5b68:	4710      	bx	r2

000d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5b6a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5b6c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5b6e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5b70:	b17c      	cbz	r4, d5b92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5b72:	6863      	ldr	r3, [r4, #4]
   d5b74:	3b01      	subs	r3, #1
   d5b76:	6063      	str	r3, [r4, #4]
   d5b78:	b95b      	cbnz	r3, d5b92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5b7a:	6823      	ldr	r3, [r4, #0]
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	689b      	ldr	r3, [r3, #8]
   d5b80:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b82:	68a3      	ldr	r3, [r4, #8]
   d5b84:	3b01      	subs	r3, #1
   d5b86:	60a3      	str	r3, [r4, #8]
   d5b88:	b91b      	cbnz	r3, d5b92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5b8a:	6823      	ldr	r3, [r4, #0]
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	68db      	ldr	r3, [r3, #12]
   d5b90:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5b92:	4628      	mov	r0, r5
   d5b94:	bd38      	pop	{r3, r4, r5, pc}

000d5b96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d5b96:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5b98:	b570      	push	{r4, r5, r6, lr}
   d5b9a:	4616      	mov	r6, r2
   d5b9c:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d5b9e:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d5ba0:	2201      	movs	r2, #1
      while (__x != 0)
   d5ba2:	b15b      	cbz	r3, d5bbc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d5ba4:	7830      	ldrb	r0, [r6, #0]
   d5ba6:	7c1a      	ldrb	r2, [r3, #16]
   d5ba8:	4290      	cmp	r0, r2
   d5baa:	bf34      	ite	cc
   d5bac:	6898      	ldrcc	r0, [r3, #8]
   d5bae:	68d8      	ldrcs	r0, [r3, #12]
   d5bb0:	461d      	mov	r5, r3
   d5bb2:	bf34      	ite	cc
   d5bb4:	2201      	movcc	r2, #1
   d5bb6:	2200      	movcs	r2, #0
   d5bb8:	4603      	mov	r3, r0
   d5bba:	e7f2      	b.n	d5ba2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d5bbc:	b192      	cbz	r2, d5be4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d5bbe:	68ca      	ldr	r2, [r1, #12]
   d5bc0:	42aa      	cmp	r2, r5
   d5bc2:	d103      	bne.n	d5bcc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5bc4:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d5bc8:	4620      	mov	r0, r4
   d5bca:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d5bcc:	4628      	mov	r0, r5
   d5bce:	f005 fab1 	bl	db134 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d5bd2:	7833      	ldrb	r3, [r6, #0]
   d5bd4:	7c02      	ldrb	r2, [r0, #16]
   d5bd6:	429a      	cmp	r2, r3
   d5bd8:	f04f 0300 	mov.w	r3, #0
   d5bdc:	d3f2      	bcc.n	d5bc4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d5bde:	e9c4 0300 	strd	r0, r3, [r4]
   d5be2:	e7f1      	b.n	d5bc8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d5be4:	4628      	mov	r0, r5
   d5be6:	e7f4      	b.n	d5bd2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d5be8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d5be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d5bec:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d5bf0:	6885      	ldr	r5, [r0, #8]
   d5bf2:	b085      	sub	sp, #20
   d5bf4:	4606      	mov	r6, r0
   d5bf6:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d5bf8:	4644      	mov	r4, r8
      while (__x != 0)
   d5bfa:	b155      	cbz	r5, d5c12 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5bfc:	f899 3000 	ldrb.w	r3, [r9]
   d5c00:	7c2a      	ldrb	r2, [r5, #16]
   d5c02:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d5c04:	bf36      	itet	cc
   d5c06:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d5c08:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d5c0a:	4625      	movcc	r5, r4
   d5c0c:	462c      	mov	r4, r5
   d5c0e:	461d      	mov	r5, r3
   d5c10:	e7f3      	b.n	d5bfa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5c12:	45a0      	cmp	r8, r4
   d5c14:	d004      	beq.n	d5c20 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d5c16:	f899 2000 	ldrb.w	r2, [r9]
   d5c1a:	7c23      	ldrb	r3, [r4, #16]
   d5c1c:	429a      	cmp	r2, r3
   d5c1e:	d22e      	bcs.n	d5c7e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5c20:	2024      	movs	r0, #36	; 0x24
   d5c22:	f7fe fa38 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d5c26:	f899 9000 	ldrb.w	r9, [r9]
   d5c2a:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d5c2e:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d5c30:	45a0      	cmp	r8, r4
   d5c32:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d5c34:	f100 0210 	add.w	r2, r0, #16
   d5c38:	61c3      	str	r3, [r0, #28]
   d5c3a:	d125      	bne.n	d5c88 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5c3c:	6973      	ldr	r3, [r6, #20]
   d5c3e:	b11b      	cbz	r3, d5c48 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d5c40:	6931      	ldr	r1, [r6, #16]
   d5c42:	7c0b      	ldrb	r3, [r1, #16]
   d5c44:	454b      	cmp	r3, r9
   d5c46:	d309      	bcc.n	d5c5c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d5c48:	4631      	mov	r1, r6
   d5c4a:	a802      	add	r0, sp, #8
   d5c4c:	f7ff ffa3 	bl	d5b96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5c50:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d5c54:	2900      	cmp	r1, #0
   d5c56:	d051      	beq.n	d5cfc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5c58:	2c00      	cmp	r4, #0
   d5c5a:	d14d      	bne.n	d5cf8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5c5c:	4588      	cmp	r8, r1
   d5c5e:	d04b      	beq.n	d5cf8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5c60:	7c38      	ldrb	r0, [r7, #16]
   d5c62:	7c0b      	ldrb	r3, [r1, #16]
   d5c64:	4298      	cmp	r0, r3
   d5c66:	bf2c      	ite	cs
   d5c68:	2000      	movcs	r0, #0
   d5c6a:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5c6c:	4643      	mov	r3, r8
   d5c6e:	460a      	mov	r2, r1
   d5c70:	4639      	mov	r1, r7
   d5c72:	f005 fa61 	bl	db138 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d5c76:	6973      	ldr	r3, [r6, #20]
   d5c78:	3301      	adds	r3, #1
   d5c7a:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5c7c:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5c7e:	f104 0014 	add.w	r0, r4, #20
   d5c82:	b005      	add	sp, #20
   d5c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5c88:	7c23      	ldrb	r3, [r4, #16]
   d5c8a:	9201      	str	r2, [sp, #4]
   d5c8c:	454b      	cmp	r3, r9
   d5c8e:	d918      	bls.n	d5cc2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5c90:	68f3      	ldr	r3, [r6, #12]
   d5c92:	429c      	cmp	r4, r3
   d5c94:	d009      	beq.n	d5caa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d5c96:	4620      	mov	r0, r4
   d5c98:	f005 fa4c 	bl	db134 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5c9c:	7c03      	ldrb	r3, [r0, #16]
   d5c9e:	9a01      	ldr	r2, [sp, #4]
   d5ca0:	454b      	cmp	r3, r9
   d5ca2:	d205      	bcs.n	d5cb0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d5ca4:	68c3      	ldr	r3, [r0, #12]
   d5ca6:	b953      	cbnz	r3, d5cbe <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d5ca8:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d5caa:	4621      	mov	r1, r4
   d5cac:	461c      	mov	r4, r3
   d5cae:	e7d1      	b.n	d5c54 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5cb0:	4631      	mov	r1, r6
   d5cb2:	a802      	add	r0, sp, #8
   d5cb4:	f7ff ff6f 	bl	d5b96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5cb8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d5cbc:	e7f5      	b.n	d5caa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d5cbe:	4623      	mov	r3, r4
   d5cc0:	e7f3      	b.n	d5caa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d5cc2:	d21b      	bcs.n	d5cfc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d5cc4:	6931      	ldr	r1, [r6, #16]
   d5cc6:	428c      	cmp	r4, r1
   d5cc8:	d00b      	beq.n	d5ce2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d5cca:	4620      	mov	r0, r4
   d5ccc:	f005 fa1f 	bl	db10e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5cd0:	7c03      	ldrb	r3, [r0, #16]
   d5cd2:	9a01      	ldr	r2, [sp, #4]
   d5cd4:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d5cd6:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5cd8:	d905      	bls.n	d5ce6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d5cda:	68e3      	ldr	r3, [r4, #12]
   d5cdc:	b953      	cbnz	r3, d5cf4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d5cde:	4621      	mov	r1, r4
   d5ce0:	461d      	mov	r5, r3
   d5ce2:	462c      	mov	r4, r5
   d5ce4:	e7b6      	b.n	d5c54 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5ce6:	4631      	mov	r1, r6
   d5ce8:	a802      	add	r0, sp, #8
   d5cea:	f7ff ff54 	bl	d5b96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5cee:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d5cf2:	e7f6      	b.n	d5ce2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d5cf4:	4601      	mov	r1, r0
   d5cf6:	e7f4      	b.n	d5ce2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5cf8:	2001      	movs	r0, #1
   d5cfa:	e7b7      	b.n	d5c6c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d5cfc:	f107 0014 	add.w	r0, r7, #20
   d5d00:	f7ff fee6 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5d04:	4638      	mov	r0, r7
   d5d06:	f7fe f9ca 	bl	d409e <_ZdlPv>
   d5d0a:	4627      	mov	r7, r4
   d5d0c:	e7b6      	b.n	d5c7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d5d10 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d5d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5d14:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d5d16:	2600      	movs	r6, #0
   d5d18:	4617      	mov	r7, r2
	  : _Node_allocator()
   d5d1a:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d5d1e:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d5d22:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d5d26:	4604      	mov	r4, r0
   d5d28:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d5d2a:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d5d2c:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d5d2e:	f10d 0107 	add.w	r1, sp, #7
   d5d32:	2301      	movs	r3, #1
   d5d34:	4628      	mov	r0, r5
   d5d36:	f88d 3007 	strb.w	r3, [sp, #7]
   d5d3a:	f7ff ff55 	bl	d5be8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d3e:	4916      	ldr	r1, [pc, #88]	; (d5d98 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d5d40:	f7ff fed0 	bl	d5ae4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d5d44:	f10d 0107 	add.w	r1, sp, #7
   d5d48:	4628      	mov	r0, r5
   d5d4a:	f88d 6007 	strb.w	r6, [sp, #7]
   d5d4e:	f7ff ff4b 	bl	d5be8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d52:	4912      	ldr	r1, [pc, #72]	; (d5d9c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d5d54:	f7ff fec6 	bl	d5ae4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d5d58:	2302      	movs	r3, #2
   d5d5a:	f10d 0107 	add.w	r1, sp, #7
   d5d5e:	4628      	mov	r0, r5
   d5d60:	f88d 3007 	strb.w	r3, [sp, #7]
   d5d64:	f7ff ff40 	bl	d5be8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d68:	490d      	ldr	r1, [pc, #52]	; (d5da0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d5d6a:	f7ff febb 	bl	d5ae4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5d6e:	2303      	movs	r3, #3
   d5d70:	f10d 0107 	add.w	r1, sp, #7
   d5d74:	4628      	mov	r0, r5
   d5d76:	f88d 3007 	strb.w	r3, [sp, #7]
   d5d7a:	f7ff ff35 	bl	d5be8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d7e:	4909      	ldr	r1, [pc, #36]	; (d5da4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5d80:	f7ff feb0 	bl	d5ae4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d5d84:	4b08      	ldr	r3, [pc, #32]	; (d5da8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d5d86:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d5d8a:	4b08      	ldr	r3, [pc, #32]	; (d5dac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d5d8c:	4620      	mov	r0, r4
  _token = token;
   d5d8e:	601f      	str	r7, [r3, #0]
}
   d5d90:	b002      	add	sp, #8
   d5d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d96:	bf00      	nop
   d5d98:	000d5a0d 	.word	0x000d5a0d
   d5d9c:	000d5a41 	.word	0x000d5a41
   d5da0:	000d5a71 	.word	0x000d5a71
   d5da4:	000d5aa5 	.word	0x000d5aa5
   d5da8:	2003e42c 	.word	0x2003e42c
   d5dac:	2003e430 	.word	0x2003e430

000d5db0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d5db0:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d5db2:	4805      	ldr	r0, [pc, #20]	; (d5dc8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   d5db4:	f004 fbb2 	bl	da51c <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d5db8:	4804      	ldr	r0, [pc, #16]	; (d5dcc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   d5dba:	f004 fbaf 	bl	da51c <_ZN9TCPClientC1Ev>
   d5dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d5dc2:	4803      	ldr	r0, [pc, #12]	; (d5dd0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   d5dc4:	f004 be04 	b.w	da9d0 <_ZN3UDPC1Ev>
   d5dc8:	2003e410 	.word	0x2003e410
   d5dcc:	2003e3a8 	.word	0x2003e3a8
   d5dd0:	2003e3c4 	.word	0x2003e3c4

000d5dd4 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d5dd4:	7501      	strb	r1, [r0, #20]
   d5dd6:	4770      	bx	lr

000d5dd8 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d5dd8:	2200      	movs	r2, #0
	  : _Node_allocator()
   d5dda:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5ddc:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5de0:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5de4:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5de6:	4770      	bx	lr

000d5de8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d5de8:	b570      	push	{r4, r5, r6, lr}
   d5dea:	4606      	mov	r6, r0
   d5dec:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d5df0:	2014      	movs	r0, #20
   d5df2:	f001 fdd3 	bl	d799c <malloc>
   d5df6:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d5df8:	2014      	movs	r0, #20
   d5dfa:	f001 fdcf 	bl	d799c <malloc>
   d5dfe:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5e00:	4630      	mov	r0, r6
   d5e02:	f006 f8ca 	bl	dbf9a <strlen>
    for (int i = 0; i < len - 2; i++) {
   d5e06:	4632      	mov	r2, r6
   d5e08:	2300      	movs	r3, #0
   d5e0a:	3802      	subs	r0, #2
   d5e0c:	4298      	cmp	r0, r3
   d5e0e:	dd14      	ble.n	d5e3a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d5e10:	f812 1b01 	ldrb.w	r1, [r2], #1
   d5e14:	290d      	cmp	r1, #13
   d5e16:	d13a      	bne.n	d5e8e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e18:	7811      	ldrb	r1, [r2, #0]
   d5e1a:	290a      	cmp	r1, #10
   d5e1c:	d137      	bne.n	d5e8e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e1e:	7851      	ldrb	r1, [r2, #1]
   d5e20:	290d      	cmp	r1, #13
   d5e22:	d134      	bne.n	d5e8e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e24:	7891      	ldrb	r1, [r2, #2]
   d5e26:	290a      	cmp	r1, #10
   d5e28:	d131      	bne.n	d5e8e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d5e2a:	3304      	adds	r3, #4
   d5e2c:	18f1      	adds	r1, r6, r3
   d5e2e:	2214      	movs	r2, #20
   d5e30:	4628      	mov	r0, r5
   d5e32:	f006 f8cc 	bl	dbfce <strncpy>
        parsed[20] = '\0';
   d5e36:	2300      	movs	r3, #0
   d5e38:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d5e3a:	210a      	movs	r1, #10
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f006 f865 	bl	dbf0c <strchr>
    if (pch == NULL) {
   d5e42:	4606      	mov	r6, r0
   d5e44:	b328      	cbz	r0, d5e92 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d5e46:	210a      	movs	r1, #10
   d5e48:	3001      	adds	r0, #1
   d5e4a:	f006 f85f 	bl	dbf0c <strchr>
    if (pch2 == NULL) {
   d5e4e:	b300      	cbz	r0, d5e92 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d5e50:	4631      	mov	r1, r6
   d5e52:	4620      	mov	r0, r4
   d5e54:	f006 f87b 	bl	dbf4e <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d5e58:	4620      	mov	r0, r4
   d5e5a:	f006 f89e 	bl	dbf9a <strlen>
   d5e5e:	4420      	add	r0, r4
   d5e60:	2300      	movs	r3, #0
   d5e62:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d5e66:	4620      	mov	r0, r4
   d5e68:	f005 fff4 	bl	dbe54 <atof>
   d5e6c:	ec51 0b10 	vmov	r0, r1, d0
   d5e70:	f005 ff7c 	bl	dbd6c <__aeabi_d2f>
   d5e74:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d5e78:	4620      	mov	r0, r4
   d5e7a:	f001 fd97 	bl	d79ac <free>
    free(parsed);
   d5e7e:	4628      	mov	r0, r5
   d5e80:	f001 fd94 	bl	d79ac <free>
}
   d5e84:	eeb0 0a48 	vmov.f32	s0, s16
   d5e88:	ecbd 8b02 	vpop	{d8}
   d5e8c:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d5e8e:	3301      	adds	r3, #1
   d5e90:	e7bc      	b.n	d5e0c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d5e92:	ed9f 8a01 	vldr	s16, [pc, #4]	; d5e98 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d5e96:	e7f5      	b.n	d5e84 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d5e98:	cda2425f 	.word	0xcda2425f

000d5e9c <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5e9c:	b530      	push	{r4, r5, lr}
   d5e9e:	4d07      	ldr	r5, [pc, #28]	; (d5ebc <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d5ea0:	6005      	str	r5, [r0, #0]
   d5ea2:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d5ea4:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5ea8:	7505      	strb	r5, [r0, #20]
  _token = token;
   d5eaa:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5eac:	f241 3588 	movw	r5, #5000	; 0x1388
   d5eb0:	6185      	str	r5, [r0, #24]
   d5eb2:	2505      	movs	r5, #5
  _port = port;
   d5eb4:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5eb8:	7705      	strb	r5, [r0, #28]
}
   d5eba:	bd30      	pop	{r4, r5, pc}
   d5ebc:	000de2e0 	.word	0x000de2e0

000d5ec0 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d5ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5ec4:	f8df 808c 	ldr.w	r8, [pc, #140]	; d5f54 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d5ec8:	f8df a08c 	ldr.w	sl, [pc, #140]	; d5f58 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d5ecc:	f8df b08c 	ldr.w	fp, [pc, #140]	; d5f5c <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	460d      	mov	r5, r1
   d5ed4:	4617      	mov	r7, r2
   d5ed6:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5ed8:	4640      	mov	r0, r8
   d5eda:	fa5f f986 	uxtb.w	r9, r6
   d5ede:	f004 f86c 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d5ee2:	bb88      	cbnz	r0, d5f48 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d5ee4:	7f23      	ldrb	r3, [r4, #28]
   d5ee6:	454b      	cmp	r3, r9
   d5ee8:	d92e      	bls.n	d5f48 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d5eea:	7d23      	ldrb	r3, [r4, #20]
   d5eec:	b1cb      	cbz	r3, d5f22 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d5eee:	f004 fef7 	bl	dace0 <_Z16_fetch_usbserialv>
   d5ef2:	4651      	mov	r1, sl
   d5ef4:	f003 fe18 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(host);
   d5ef8:	f004 fef2 	bl	dace0 <_Z16_fetch_usbserialv>
   d5efc:	4629      	mov	r1, r5
   d5efe:	f003 fe13 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d5f02:	f004 feed 	bl	dace0 <_Z16_fetch_usbserialv>
   d5f06:	4659      	mov	r1, fp
   d5f08:	f003 fe0e 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5f0c:	f004 fee8 	bl	dace0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5f10:	220a      	movs	r2, #10
   d5f12:	4649      	mov	r1, r9
   d5f14:	9001      	str	r0, [sp, #4]
   d5f16:	f003 fe24 	bl	d9b62 <_ZN5Print11printNumberEmh>
        n += println();
   d5f1a:	9b01      	ldr	r3, [sp, #4]
   d5f1c:	4618      	mov	r0, r3
   d5f1e:	f003 fe0a 	bl	d9b36 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d5f22:	2300      	movs	r3, #0
   d5f24:	b2ba      	uxth	r2, r7
   d5f26:	4629      	mov	r1, r5
   d5f28:	4640      	mov	r0, r8
   d5f2a:	f004 f94b 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5f2e:	7d23      	ldrb	r3, [r4, #20]
   d5f30:	b123      	cbz	r3, d5f3c <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d5f32:	f004 fed5 	bl	dace0 <_Z16_fetch_usbserialv>
   d5f36:	4906      	ldr	r1, [pc, #24]	; (d5f50 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5f38:	f003 fe09 	bl	d9b4e <_ZN5Print7printlnEPKc>
    delay(1000);
   d5f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5f40:	f001 fd74 	bl	d7a2c <delay>
   d5f44:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5f46:	e7c7      	b.n	d5ed8 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d5f48:	b003      	add	sp, #12
   d5f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f4e:	bf00      	nop
   d5f50:	000de102 	.word	0x000de102
   d5f54:	2003e434 	.word	0x2003e434
   d5f58:	000de0d8 	.word	0x000de0d8
   d5f5c:	000de0ee 	.word	0x000de0ee

000d5f60 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d5f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f64:	1e4b      	subs	r3, r1, #1
   d5f66:	460c      	mov	r4, r1
   d5f68:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d5f6c:	4605      	mov	r5, r0
    response[i] = '\0';
   d5f6e:	2100      	movs	r1, #0
   d5f70:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d5f74:	4293      	cmp	r3, r2
   d5f76:	d1fb      	bne.n	d5f70 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d5f78:	7d2b      	ldrb	r3, [r5, #20]
   d5f7a:	b14b      	cbz	r3, d5f90 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d5f7c:	f004 feb0 	bl	dace0 <_Z16_fetch_usbserialv>
   d5f80:	4914      	ldr	r1, [pc, #80]	; (d5fd4 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d5f82:	f003 fde4 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d5f86:	f004 feab 	bl	dace0 <_Z16_fetch_usbserialv>
   d5f8a:	4913      	ldr	r1, [pc, #76]	; (d5fd8 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d5f8c:	f003 fddf 	bl	d9b4e <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d5f90:	4f12      	ldr	r7, [pc, #72]	; (d5fdc <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d5f92:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5f94:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d5f98:	4638      	mov	r0, r7
   d5f9a:	f004 fa15 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d5f9e:	b170      	cbz	r0, d5fbe <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d5fa0:	4638      	mov	r0, r7
   d5fa2:	f004 f8ca 	bl	da13a <_ZN9TCPClient4readEv>
   d5fa6:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d5fa8:	7d2b      	ldrb	r3, [r5, #20]
   d5faa:	b12b      	cbz	r3, d5fb8 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d5fac:	f004 fe98 	bl	dace0 <_Z16_fetch_usbserialv>
   d5fb0:	6803      	ldr	r3, [r0, #0]
   d5fb2:	5da1      	ldrb	r1, [r4, r6]
   d5fb4:	689b      	ldr	r3, [r3, #8]
   d5fb6:	4798      	blx	r3
    j++;
   d5fb8:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5fba:	4546      	cmp	r6, r8
   d5fbc:	d1ec      	bne.n	d5f98 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d5fbe:	7d2b      	ldrb	r3, [r5, #20]
   d5fc0:	b133      	cbz	r3, d5fd0 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d5fc2:	f004 fe8d 	bl	dace0 <_Z16_fetch_usbserialv>
}
   d5fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d5fca:	4905      	ldr	r1, [pc, #20]	; (d5fe0 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d5fcc:	f003 bdbf 	b.w	d9b4e <_ZN5Print7printlnEPKc>
}
   d5fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fd4:	000de127 	.word	0x000de127
   d5fd8:	000de113 	.word	0x000de113
   d5fdc:	2003e434 	.word	0x2003e434
   d5fe0:	000de126 	.word	0x000de126

000d5fe4 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d5fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d5fe6:	4f0e      	ldr	r7, [pc, #56]	; (d6020 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d5fe8:	4604      	mov	r4, r0
  int timeout = 0;
   d5fea:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d5fec:	4638      	mov	r0, r7
   d5fee:	f004 f9eb 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d5ff2:	4605      	mov	r5, r0
   d5ff4:	b990      	cbnz	r0, d601c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d5ff6:	69a3      	ldr	r3, [r4, #24]
   d5ff8:	42b3      	cmp	r3, r6
   d5ffa:	dd0f      	ble.n	d601c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d5ffc:	2001      	movs	r0, #1
   d5ffe:	f001 fd15 	bl	d7a2c <delay>
    if (timeout > _timeout - 1) {
   d6002:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6004:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6006:	42b3      	cmp	r3, r6
   d6008:	dcf0      	bgt.n	d5fec <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d600a:	7d20      	ldrb	r0, [r4, #20]
   d600c:	b128      	cbz	r0, d601a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d600e:	f004 fe67 	bl	dace0 <_Z16_fetch_usbserialv>
   d6012:	4904      	ldr	r1, [pc, #16]	; (d6024 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d6014:	f003 fd9b 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6018:	4628      	mov	r0, r5
}
   d601a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d601c:	2001      	movs	r0, #1
   d601e:	e7fc      	b.n	d601a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d6020:	2003e434 	.word	0x2003e434
   d6024:	000de132 	.word	0x000de132

000d6028 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d602a:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d602c:	6902      	ldr	r2, [r0, #16]
   d602e:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6030:	4604      	mov	r4, r0
   d6032:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d6034:	f7ff ff44 	bl	d5ec0 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d6038:	4878      	ldr	r0, [pc, #480]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d603a:	f003 ffbe 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d603e:	4606      	mov	r6, r0
   d6040:	2800      	cmp	r0, #0
   d6042:	f000 80e1 	beq.w	d6208 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d6046:	4976      	ldr	r1, [pc, #472]	; (d6220 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6048:	4874      	ldr	r0, [pc, #464]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d604a:	f003 fd6d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d604e:	4639      	mov	r1, r7
   d6050:	4872      	ldr	r0, [pc, #456]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6052:	f003 fd69 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d6056:	4973      	ldr	r1, [pc, #460]	; (d6224 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6058:	4870      	ldr	r0, [pc, #448]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d605a:	f003 fd65 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d605e:	4972      	ldr	r1, [pc, #456]	; (d6228 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6060:	486e      	ldr	r0, [pc, #440]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6062:	f003 fd61 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d6066:	6861      	ldr	r1, [r4, #4]
   d6068:	486c      	ldr	r0, [pc, #432]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d606a:	f003 fd5d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d606e:	496f      	ldr	r1, [pc, #444]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6070:	486a      	ldr	r0, [pc, #424]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6072:	f003 fd59 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d6076:	496e      	ldr	r1, [pc, #440]	; (d6230 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6078:	4868      	ldr	r0, [pc, #416]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d607a:	f003 fd55 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d607e:	68a1      	ldr	r1, [r4, #8]
   d6080:	4866      	ldr	r0, [pc, #408]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6082:	f003 fd51 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6086:	4969      	ldr	r1, [pc, #420]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6088:	4864      	ldr	r0, [pc, #400]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d608a:	f003 fd4d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d608e:	4969      	ldr	r1, [pc, #420]	; (d6234 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6090:	4862      	ldr	r0, [pc, #392]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6092:	f003 fd49 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d6096:	68e1      	ldr	r1, [r4, #12]
   d6098:	4860      	ldr	r0, [pc, #384]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d609a:	f003 fd45 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d609e:	4963      	ldr	r1, [pc, #396]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d60a0:	485e      	ldr	r0, [pc, #376]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60a2:	f003 fd41 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d60a6:	4964      	ldr	r1, [pc, #400]	; (d6238 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d60a8:	485c      	ldr	r0, [pc, #368]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60aa:	f003 fd3d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d60ae:	4963      	ldr	r1, [pc, #396]	; (d623c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d60b0:	485a      	ldr	r0, [pc, #360]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60b2:	f003 fd39 	bl	d9b28 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d60b6:	4628      	mov	r0, r5
   d60b8:	f005 ff6f 	bl	dbf9a <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d60bc:	4960      	ldr	r1, [pc, #384]	; (d6240 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d60be:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d60c0:	4856      	ldr	r0, [pc, #344]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60c2:	f003 fd31 	bl	d9b28 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d60c6:	220a      	movs	r2, #10
   d60c8:	4631      	mov	r1, r6
   d60ca:	4854      	ldr	r0, [pc, #336]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60cc:	f003 fd49 	bl	d9b62 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d60d0:	495c      	ldr	r1, [pc, #368]	; (d6244 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d60d2:	4852      	ldr	r0, [pc, #328]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60d4:	f003 fd28 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d60d8:	4629      	mov	r1, r5
   d60da:	4850      	ldr	r0, [pc, #320]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60dc:	f003 fd24 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d60e0:	4952      	ldr	r1, [pc, #328]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d60e2:	484e      	ldr	r0, [pc, #312]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60e4:	f003 fd20 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d60e8:	484c      	ldr	r0, [pc, #304]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60ea:	f003 ff65 	bl	d9fb8 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d60ee:	7d23      	ldrb	r3, [r4, #20]
   d60f0:	2b00      	cmp	r3, #0
   d60f2:	d069      	beq.n	d61c8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d60f4:	f004 fdf4 	bl	dace0 <_Z16_fetch_usbserialv>
   d60f8:	4953      	ldr	r1, [pc, #332]	; (d6248 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d60fa:	f003 fd28 	bl	d9b4e <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d60fe:	f004 fdef 	bl	dace0 <_Z16_fetch_usbserialv>
   d6102:	4947      	ldr	r1, [pc, #284]	; (d6220 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6104:	f003 fd10 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6108:	f004 fdea 	bl	dace0 <_Z16_fetch_usbserialv>
   d610c:	4639      	mov	r1, r7
   d610e:	f003 fd0b 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6112:	f004 fde5 	bl	dace0 <_Z16_fetch_usbserialv>
   d6116:	4943      	ldr	r1, [pc, #268]	; (d6224 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6118:	f003 fd06 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d611c:	f004 fde0 	bl	dace0 <_Z16_fetch_usbserialv>
   d6120:	4941      	ldr	r1, [pc, #260]	; (d6228 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6122:	f003 fd01 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6126:	f004 fddb 	bl	dace0 <_Z16_fetch_usbserialv>
   d612a:	6861      	ldr	r1, [r4, #4]
   d612c:	f003 fcfc 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6130:	f004 fdd6 	bl	dace0 <_Z16_fetch_usbserialv>
   d6134:	493d      	ldr	r1, [pc, #244]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6136:	f003 fcf7 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d613a:	f004 fdd1 	bl	dace0 <_Z16_fetch_usbserialv>
   d613e:	493c      	ldr	r1, [pc, #240]	; (d6230 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6140:	f003 fcf2 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6144:	f004 fdcc 	bl	dace0 <_Z16_fetch_usbserialv>
   d6148:	68a1      	ldr	r1, [r4, #8]
   d614a:	f003 fced 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d614e:	f004 fdc7 	bl	dace0 <_Z16_fetch_usbserialv>
   d6152:	4936      	ldr	r1, [pc, #216]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6154:	f003 fce8 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6158:	f004 fdc2 	bl	dace0 <_Z16_fetch_usbserialv>
   d615c:	4935      	ldr	r1, [pc, #212]	; (d6234 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d615e:	f003 fce3 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6162:	f004 fdbd 	bl	dace0 <_Z16_fetch_usbserialv>
   d6166:	68e1      	ldr	r1, [r4, #12]
   d6168:	f003 fcde 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d616c:	f004 fdb8 	bl	dace0 <_Z16_fetch_usbserialv>
   d6170:	492e      	ldr	r1, [pc, #184]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6172:	f003 fcd9 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d6176:	f004 fdb3 	bl	dace0 <_Z16_fetch_usbserialv>
   d617a:	492f      	ldr	r1, [pc, #188]	; (d6238 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d617c:	f003 fcd4 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d6180:	f004 fdae 	bl	dace0 <_Z16_fetch_usbserialv>
   d6184:	492d      	ldr	r1, [pc, #180]	; (d623c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d6186:	f003 fccf 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d618a:	f004 fda9 	bl	dace0 <_Z16_fetch_usbserialv>
   d618e:	492c      	ldr	r1, [pc, #176]	; (d6240 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d6190:	f003 fcca 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d6194:	f004 fda4 	bl	dace0 <_Z16_fetch_usbserialv>
   d6198:	220a      	movs	r2, #10
   d619a:	4631      	mov	r1, r6
   d619c:	f003 fce1 	bl	d9b62 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d61a0:	f004 fd9e 	bl	dace0 <_Z16_fetch_usbserialv>
   d61a4:	4927      	ldr	r1, [pc, #156]	; (d6244 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d61a6:	f003 fcbf 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d61aa:	f004 fd99 	bl	dace0 <_Z16_fetch_usbserialv>
   d61ae:	4629      	mov	r1, r5
   d61b0:	f003 fcba 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d61b4:	f004 fd94 	bl	dace0 <_Z16_fetch_usbserialv>
   d61b8:	491c      	ldr	r1, [pc, #112]	; (d622c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d61ba:	f003 fcb5 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d61be:	f004 fd8f 	bl	dace0 <_Z16_fetch_usbserialv>
   d61c2:	4922      	ldr	r1, [pc, #136]	; (d624c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d61c4:	f003 fcc3 	bl	d9b4e <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d61c8:	4620      	mov	r0, r4
   d61ca:	f7ff ff0b 	bl	d5fe4 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d61ce:	7d23      	ldrb	r3, [r4, #20]
   d61d0:	b92b      	cbnz	r3, d61de <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d61d2:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d61d4:	4811      	ldr	r0, [pc, #68]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d61d6:	f004 f951 	bl	da47c <_ZN9TCPClient4stopEv>
}
   d61da:	4620      	mov	r0, r4
   d61dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d61de:	f004 fd7f 	bl	dace0 <_Z16_fetch_usbserialv>
   d61e2:	491b      	ldr	r1, [pc, #108]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d61e4:	4d0d      	ldr	r5, [pc, #52]	; (d621c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d61e6:	f003 fcb2 	bl	d9b4e <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d61ea:	4628      	mov	r0, r5
   d61ec:	f004 f8ec 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d61f0:	2800      	cmp	r0, #0
   d61f2:	d0ee      	beq.n	d61d2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d61f4:	4628      	mov	r0, r5
   d61f6:	f003 ffa0 	bl	da13a <_ZN9TCPClient4readEv>
   d61fa:	4604      	mov	r4, r0
        Serial.print(c);
   d61fc:	f004 fd70 	bl	dace0 <_Z16_fetch_usbserialv>
   d6200:	b2e1      	uxtb	r1, r4
   d6202:	f003 fc95 	bl	d9b30 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d6206:	e7f0      	b.n	d61ea <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d6208:	7d24      	ldrb	r4, [r4, #20]
   d620a:	2c00      	cmp	r4, #0
   d620c:	d0e2      	beq.n	d61d4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d620e:	f004 fd67 	bl	dace0 <_Z16_fetch_usbserialv>
   d6212:	4910      	ldr	r1, [pc, #64]	; (d6254 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d6214:	f003 fc9b 	bl	d9b4e <_ZN5Print7printlnEPKc>
  bool result = false;
   d6218:	4634      	mov	r4, r6
   d621a:	e7db      	b.n	d61d4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d621c:	2003e434 	.word	0x2003e434
   d6220:	000de165 	.word	0x000de165
   d6224:	000de17d 	.word	0x000de17d
   d6228:	000de189 	.word	0x000de189
   d622c:	000de2ad 	.word	0x000de2ad
   d6230:	000de190 	.word	0x000de190
   d6234:	000de19d 	.word	0x000de19d
   d6238:	000de1ac 	.word	0x000de1ac
   d623c:	000de1c0 	.word	0x000de1c0
   d6240:	000de1e1 	.word	0x000de1e1
   d6244:	000de2ab 	.word	0x000de2ab
   d6248:	000de1f2 	.word	0x000de1f2
   d624c:	000de20e 	.word	0x000de20e
   d6250:	000de22c 	.word	0x000de22c
   d6254:	000de248 	.word	0x000de248

000d6258 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6258:	b570      	push	{r4, r5, r6, lr}
   d625a:	ed2d 8b02 	vpush	{d8}
   d625e:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6260:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6262:	460e      	mov	r6, r1
   d6264:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6266:	6841      	ldr	r1, [r0, #4]
   d6268:	4866      	ldr	r0, [pc, #408]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d626a:	2250      	movs	r2, #80	; 0x50
   d626c:	f003 ffaa 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d6270:	4620      	mov	r0, r4
   d6272:	6861      	ldr	r1, [r4, #4]
   d6274:	2250      	movs	r2, #80	; 0x50
   d6276:	f7ff fe23 	bl	d5ec0 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d627a:	4862      	ldr	r0, [pc, #392]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d627c:	f003 fe9d 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d6280:	2800      	cmp	r0, #0
   d6282:	f000 80b6 	beq.w	d63f2 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d6286:	4960      	ldr	r1, [pc, #384]	; (d6408 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6288:	485e      	ldr	r0, [pc, #376]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d628a:	f003 fc4d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d628e:	4631      	mov	r1, r6
   d6290:	485c      	ldr	r0, [pc, #368]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6292:	f003 fc49 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d6296:	495d      	ldr	r1, [pc, #372]	; (d640c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d6298:	485a      	ldr	r0, [pc, #360]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d629a:	f003 fc45 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d629e:	4629      	mov	r1, r5
   d62a0:	4858      	ldr	r0, [pc, #352]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62a2:	f003 fc41 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d62a6:	495a      	ldr	r1, [pc, #360]	; (d6410 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d62a8:	4856      	ldr	r0, [pc, #344]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62aa:	f003 fc3d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d62ae:	4959      	ldr	r1, [pc, #356]	; (d6414 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d62b0:	4854      	ldr	r0, [pc, #336]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62b2:	f003 fc39 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d62b6:	4958      	ldr	r1, [pc, #352]	; (d6418 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d62b8:	4852      	ldr	r0, [pc, #328]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62ba:	f003 fc35 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d62be:	6861      	ldr	r1, [r4, #4]
   d62c0:	4850      	ldr	r0, [pc, #320]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62c2:	f003 fc31 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d62c6:	4955      	ldr	r1, [pc, #340]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d62c8:	484e      	ldr	r0, [pc, #312]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62ca:	f003 fc2d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d62ce:	4954      	ldr	r1, [pc, #336]	; (d6420 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d62d0:	484c      	ldr	r0, [pc, #304]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62d2:	f003 fc29 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d62d6:	68a1      	ldr	r1, [r4, #8]
   d62d8:	484a      	ldr	r0, [pc, #296]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62da:	f003 fc25 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d62de:	494f      	ldr	r1, [pc, #316]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d62e0:	4848      	ldr	r0, [pc, #288]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62e2:	f003 fc21 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d62e6:	494f      	ldr	r1, [pc, #316]	; (d6424 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d62e8:	4846      	ldr	r0, [pc, #280]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62ea:	f003 fc1d 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d62ee:	68e1      	ldr	r1, [r4, #12]
   d62f0:	4844      	ldr	r0, [pc, #272]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62f2:	f003 fc19 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d62f6:	4949      	ldr	r1, [pc, #292]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d62f8:	4842      	ldr	r0, [pc, #264]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62fa:	f003 fc15 	bl	d9b28 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d62fe:	494a      	ldr	r1, [pc, #296]	; (d6428 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d6300:	4840      	ldr	r0, [pc, #256]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6302:	f003 fc11 	bl	d9b28 <_ZN5Print5printEPKc>
    if (_debug) {
   d6306:	7d23      	ldrb	r3, [r4, #20]
   d6308:	2b00      	cmp	r3, #0
   d630a:	d04f      	beq.n	d63ac <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d630c:	f004 fce8 	bl	dace0 <_Z16_fetch_usbserialv>
   d6310:	493d      	ldr	r1, [pc, #244]	; (d6408 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6312:	f003 fc09 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6316:	f004 fce3 	bl	dace0 <_Z16_fetch_usbserialv>
   d631a:	4631      	mov	r1, r6
   d631c:	f003 fc04 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("/");
   d6320:	f004 fcde 	bl	dace0 <_Z16_fetch_usbserialv>
   d6324:	4939      	ldr	r1, [pc, #228]	; (d640c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d6326:	f003 fbff 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d632a:	f004 fcd9 	bl	dace0 <_Z16_fetch_usbserialv>
   d632e:	4629      	mov	r1, r5
   d6330:	f003 fbfa 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d6334:	f004 fcd4 	bl	dace0 <_Z16_fetch_usbserialv>
   d6338:	4935      	ldr	r1, [pc, #212]	; (d6410 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d633a:	f003 fbf5 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d633e:	f004 fccf 	bl	dace0 <_Z16_fetch_usbserialv>
   d6342:	4934      	ldr	r1, [pc, #208]	; (d6414 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d6344:	f003 fbf0 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6348:	f004 fcca 	bl	dace0 <_Z16_fetch_usbserialv>
   d634c:	4932      	ldr	r1, [pc, #200]	; (d6418 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d634e:	f003 fbeb 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6352:	f004 fcc5 	bl	dace0 <_Z16_fetch_usbserialv>
   d6356:	6861      	ldr	r1, [r4, #4]
   d6358:	f003 fbe6 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d635c:	f004 fcc0 	bl	dace0 <_Z16_fetch_usbserialv>
   d6360:	492e      	ldr	r1, [pc, #184]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6362:	f003 fbe1 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6366:	f004 fcbb 	bl	dace0 <_Z16_fetch_usbserialv>
   d636a:	492d      	ldr	r1, [pc, #180]	; (d6420 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d636c:	f003 fbdc 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6370:	f004 fcb6 	bl	dace0 <_Z16_fetch_usbserialv>
   d6374:	68a1      	ldr	r1, [r4, #8]
   d6376:	f003 fbd7 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d637a:	f004 fcb1 	bl	dace0 <_Z16_fetch_usbserialv>
   d637e:	4927      	ldr	r1, [pc, #156]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6380:	f003 fbd2 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6384:	f004 fcac 	bl	dace0 <_Z16_fetch_usbserialv>
   d6388:	4926      	ldr	r1, [pc, #152]	; (d6424 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d638a:	f003 fbcd 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d638e:	f004 fca7 	bl	dace0 <_Z16_fetch_usbserialv>
   d6392:	68e1      	ldr	r1, [r4, #12]
   d6394:	f003 fbc8 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6398:	f004 fca2 	bl	dace0 <_Z16_fetch_usbserialv>
   d639c:	491f      	ldr	r1, [pc, #124]	; (d641c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d639e:	f003 fbc3 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d63a2:	f004 fc9d 	bl	dace0 <_Z16_fetch_usbserialv>
   d63a6:	4920      	ldr	r1, [pc, #128]	; (d6428 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d63a8:	f003 fbbe 	bl	d9b28 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d63ac:	4620      	mov	r0, r4
   d63ae:	f7ff fe19 	bl	d5fe4 <_ZN7UbiHTTP16waitServerAnswerEv>
   d63b2:	b948      	cbnz	r0, d63c8 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d63b4:	4813      	ldr	r0, [pc, #76]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d63b6:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d642c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d63ba:	f004 f85f 	bl	da47c <_ZN9TCPClient4stopEv>
}
   d63be:	eeb0 0a48 	vmov.f32	s0, s16
   d63c2:	ecbd 8b02 	vpop	{d8}
   d63c6:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d63c8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d63cc:	f001 fae6 	bl	d799c <malloc>
    readServerAnswer(response);
   d63d0:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d63d2:	4605      	mov	r5, r0
    readServerAnswer(response);
   d63d4:	4620      	mov	r0, r4
   d63d6:	f7ff fdc3 	bl	d5f60 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d63da:	4628      	mov	r0, r5
   d63dc:	f7ff fd04 	bl	d5de8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d63e0:	4808      	ldr	r0, [pc, #32]	; (d6404 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d63e2:	eeb0 8a40 	vmov.f32	s16, s0
   d63e6:	f004 f849 	bl	da47c <_ZN9TCPClient4stopEv>
    free(response);
   d63ea:	4628      	mov	r0, r5
   d63ec:	f001 fade 	bl	d79ac <free>
    return value;
   d63f0:	e7e5      	b.n	d63be <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d63f2:	7d23      	ldrb	r3, [r4, #20]
   d63f4:	2b00      	cmp	r3, #0
   d63f6:	d0dd      	beq.n	d63b4 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d63f8:	f004 fc72 	bl	dace0 <_Z16_fetch_usbserialv>
   d63fc:	490c      	ldr	r1, [pc, #48]	; (d6430 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d63fe:	f003 fba6 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6402:	e7d7      	b.n	d63b4 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d6404:	2003e434 	.word	0x2003e434
   d6408:	000de272 	.word	0x000de272
   d640c:	000de287 	.word	0x000de287
   d6410:	000de289 	.word	0x000de289
   d6414:	000de17d 	.word	0x000de17d
   d6418:	000de189 	.word	0x000de189
   d641c:	000de2ad 	.word	0x000de2ad
   d6420:	000de190 	.word	0x000de190
   d6424:	000de19d 	.word	0x000de19d
   d6428:	000de28d 	.word	0x000de28d
   d642c:	cda2425f 	.word	0xcda2425f
   d6430:	000de2b0 	.word	0x000de2b0

000d6434 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   d6434:	4801      	ldr	r0, [pc, #4]	; (d643c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   d6436:	f004 b871 	b.w	da51c <_ZN9TCPClientC1Ev>
   d643a:	bf00      	nop
   d643c:	2003e434 	.word	0x2003e434

000d6440 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d6440:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6448 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d6444:	4770      	bx	lr
   d6446:	bf00      	nop
   d6448:	cda2425f 	.word	0xcda2425f

000d644c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d644c:	7401      	strb	r1, [r0, #16]
   d644e:	4770      	bx	lr

000d6450 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d6450:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6452:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6454:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6458:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d645c:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d645e:	4770      	bx	lr

000d6460 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6460:	b530      	push	{r4, r5, lr}
   d6462:	b085      	sub	sp, #20
   d6464:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6466:	9b08      	ldr	r3, [sp, #32]
   d6468:	781b      	ldrb	r3, [r3, #0]
   d646a:	f88d 3000 	strb.w	r3, [sp]
   d646e:	a802      	add	r0, sp, #8
   d6470:	233c      	movs	r3, #60	; 0x3c
   d6472:	f001 fd71 	bl	d7f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6476:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6478:	9c02      	ldr	r4, [sp, #8]
   d647a:	f001 f9db 	bl	d7834 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d647e:	b120      	cbz	r0, d648a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6480:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6482:	b913      	cbnz	r3, d648a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d6484:	f001 fa02 	bl	d788c <spark_process>
    }
   d6488:	e7fa      	b.n	d6480 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d648a:	7863      	ldrb	r3, [r4, #1]
   d648c:	f3bf 8f5b 	dmb	ish
   d6490:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d6492:	b9ab      	cbnz	r3, d64c0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d6494:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d6496:	9c03      	ldr	r4, [sp, #12]
   d6498:	b17c      	cbz	r4, d64ba <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d649a:	6863      	ldr	r3, [r4, #4]
   d649c:	3b01      	subs	r3, #1
   d649e:	6063      	str	r3, [r4, #4]
   d64a0:	b95b      	cbnz	r3, d64ba <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d64a2:	6823      	ldr	r3, [r4, #0]
   d64a4:	4620      	mov	r0, r4
   d64a6:	689b      	ldr	r3, [r3, #8]
   d64a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d64aa:	68a3      	ldr	r3, [r4, #8]
   d64ac:	3b01      	subs	r3, #1
   d64ae:	60a3      	str	r3, [r4, #8]
   d64b0:	b91b      	cbnz	r3, d64ba <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d64b2:	6823      	ldr	r3, [r4, #0]
   d64b4:	4620      	mov	r0, r4
   d64b6:	68db      	ldr	r3, [r3, #12]
   d64b8:	4798      	blx	r3
}
   d64ba:	4628      	mov	r0, r5
   d64bc:	b005      	add	sp, #20
   d64be:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d64c0:	2000      	movs	r0, #0
   d64c2:	f001 f9b7 	bl	d7834 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d64c6:	b120      	cbz	r0, d64d2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d64c8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d64ca:	b913      	cbnz	r3, d64d2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d64cc:	f001 f9de 	bl	d788c <spark_process>
    }
   d64d0:	e7fa      	b.n	d64c8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d64d2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d64d4:	2b01      	cmp	r3, #1
   d64d6:	d1dd      	bne.n	d6494 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d64d8:	7b25      	ldrb	r5, [r4, #12]
   d64da:	e7dc      	b.n	d6496 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d64dc <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d64dc:	b510      	push	{r4, lr}
   d64de:	4c04      	ldr	r4, [pc, #16]	; (d64f0 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d64e0:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d64e2:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d64e6:	2400      	movs	r4, #0
  _token = token;
   d64e8:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d64ea:	7404      	strb	r4, [r0, #16]
  _token = token;
   d64ec:	60c3      	str	r3, [r0, #12]
}
   d64ee:	bd10      	pop	{r4, pc}
   d64f0:	000de2f8 	.word	0x000de2f8

000d64f4 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d64f4:	b538      	push	{r3, r4, r5, lr}
   d64f6:	4604      	mov	r4, r0
  _dirty = true;
   d64f8:	2001      	movs	r0, #1
   d64fa:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d64fc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6500:	68e5      	ldr	r5, [r4, #12]
   d6502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6506:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d650a:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d650e:	68e0      	ldr	r0, [r4, #12]
   d6510:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6514:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d6518:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d651c:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6520:	68e0      	ldr	r0, [r4, #12]
   d6522:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6526:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d652a:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d652c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d6530:	68e1      	ldr	r1, [r4, #12]
   d6532:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d6536:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d653a:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d653c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6540:	68e2      	ldr	r2, [r4, #12]
   d6542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d654a:	9a04      	ldr	r2, [sp, #16]
   d654c:	611a      	str	r2, [r3, #16]
  _current_value++;
   d654e:	7c23      	ldrb	r3, [r4, #16]
   d6550:	3301      	adds	r3, #1
   d6552:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d6554:	2b0a      	cmp	r3, #10
  _current_value++;
   d6556:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d6558:	dd08      	ble.n	d656c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d655a:	7ca3      	ldrb	r3, [r4, #18]
   d655c:	b123      	cbz	r3, d6568 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d655e:	f004 fbbf 	bl	dace0 <_Z16_fetch_usbserialv>
   d6562:	4903      	ldr	r1, [pc, #12]	; (d6570 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d6564:	f003 faf3 	bl	d9b4e <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d6568:	230a      	movs	r3, #10
   d656a:	7423      	strb	r3, [r4, #16]
  }
}
   d656c:	bd38      	pop	{r3, r4, r5, pc}
   d656e:	bf00      	nop
   d6570:	000de308 	.word	0x000de308

000d6574 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d6574:	b510      	push	{r4, lr}
   d6576:	ee10 0a10 	vmov	r0, s0
   d657a:	b086      	sub	sp, #24
   d657c:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d657e:	f005 f8bb 	bl	db6f8 <__aeabi_f2d>
   d6582:	4602      	mov	r2, r0
   d6584:	460b      	mov	r3, r1
   d6586:	a801      	add	r0, sp, #4
   d6588:	490a      	ldr	r1, [pc, #40]	; (d65b4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d658a:	f001 fa1f 	bl	d79cc <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d658e:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d6590:	2214      	movs	r2, #20
  uint8_t k = 0;
   d6592:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d6594:	f810 1b01 	ldrb.w	r1, [r0], #1
   d6598:	2920      	cmp	r1, #32
   d659a:	d006      	beq.n	d65aa <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d659c:	54e1      	strb	r1, [r4, r3]
      k++;
   d659e:	3301      	adds	r3, #1
   d65a0:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d65a2:	b911      	cbnz	r1, d65aa <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d65a4:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d65a6:	b006      	add	sp, #24
   d65a8:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d65aa:	3a01      	subs	r2, #1
   d65ac:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d65b0:	d1f0      	bne.n	d6594 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d65b2:	e7f8      	b.n	d65a6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d65b4:	000de347 	.word	0x000de347

000d65b8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d65b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65bc:	460c      	mov	r4, r1
   d65be:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d65c0:	494c      	ldr	r1, [pc, #304]	; (d66f4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d65c2:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6718 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d65c6:	f8df 9154 	ldr.w	r9, [pc, #340]	; d671c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d65ca:	f8df a154 	ldr.w	sl, [pc, #340]	; d6720 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d65ce:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d65d0:	4620      	mov	r0, r4
   d65d2:	f005 fcbc 	bl	dbf4e <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d65d6:	2600      	movs	r6, #0
   d65d8:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d65dc:	429e      	cmp	r6, r3
   d65de:	da6a      	bge.n	d66b6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d65e0:	68eb      	ldr	r3, [r5, #12]
   d65e2:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d65e6:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d65ea:	ed93 0a02 	vldr	s0, [r3, #8]
   d65ee:	a903      	add	r1, sp, #12
   d65f0:	4628      	mov	r0, r5
   d65f2:	f7ff ffbf 	bl	d6574 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d65f6:	68eb      	ldr	r3, [r5, #12]
   d65f8:	a903      	add	r1, sp, #12
   d65fa:	9100      	str	r1, [sp, #0]
   d65fc:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d6600:	4622      	mov	r2, r4
   d6602:	4641      	mov	r1, r8
   d6604:	4620      	mov	r0, r4
   d6606:	f001 f9e1 	bl	d79cc <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d660a:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d660c:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6610:	443b      	add	r3, r7
   d6612:	68db      	ldr	r3, [r3, #12]
   d6614:	b343      	cbz	r3, d6668 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6616:	4622      	mov	r2, r4
   d6618:	4649      	mov	r1, r9
   d661a:	4620      	mov	r0, r4
   d661c:	f001 f9d6 	bl	d79cc <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6620:	68eb      	ldr	r3, [r5, #12]
   d6622:	443b      	add	r3, r7
   d6624:	691b      	ldr	r3, [r3, #16]
   d6626:	2b00      	cmp	r3, #0
   d6628:	d038      	beq.n	d669c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d662a:	200a      	movs	r0, #10
   d662c:	fb93 f1f0 	sdiv	r1, r3, r0
   d6630:	fb91 fcf0 	sdiv	ip, r1, r0
   d6634:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d6638:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d663c:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d663e:	2264      	movs	r2, #100	; 0x64
   d6640:	fb93 f2f2 	sdiv	r2, r3, r2
   d6644:	fb92 fef0 	sdiv	lr, r2, r0
   d6648:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d664c:	9100      	str	r1, [sp, #0]
   d664e:	fa5f f38c 	uxtb.w	r3, ip
   d6652:	4929      	ldr	r1, [pc, #164]	; (d66f8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d6654:	b2d2      	uxtb	r2, r2
   d6656:	a802      	add	r0, sp, #8
   d6658:	f001 f9b8 	bl	d79cc <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d665c:	4927      	ldr	r1, [pc, #156]	; (d66fc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d665e:	ab02      	add	r3, sp, #8
   d6660:	4622      	mov	r2, r4
   d6662:	4620      	mov	r0, r4
   d6664:	f001 f9b2 	bl	d79cc <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d6668:	68eb      	ldr	r3, [r5, #12]
   d666a:	441f      	add	r7, r3
   d666c:	687b      	ldr	r3, [r7, #4]
   d666e:	b123      	cbz	r3, d667a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d6670:	4923      	ldr	r1, [pc, #140]	; (d6700 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d6672:	4622      	mov	r2, r4
   d6674:	4620      	mov	r0, r4
   d6676:	f001 f9a9 	bl	d79cc <sprintf>
    sprintf(payload, "%s}", payload);
   d667a:	4622      	mov	r2, r4
   d667c:	4921      	ldr	r1, [pc, #132]	; (d6704 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d667e:	4620      	mov	r0, r4
   d6680:	f001 f9a4 	bl	d79cc <sprintf>
    i++;
   d6684:	3601      	adds	r6, #1
    if (i < _current_value) {
   d6686:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d668a:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d668c:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d668e:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6690:	da0a      	bge.n	d66a8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d6692:	491d      	ldr	r1, [pc, #116]	; (d6708 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d6694:	4620      	mov	r0, r4
   d6696:	f001 f999 	bl	d79cc <sprintf>
   d669a:	e79d      	b.n	d65d8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d669c:	4622      	mov	r2, r4
   d669e:	4651      	mov	r1, sl
   d66a0:	4620      	mov	r0, r4
   d66a2:	f001 f993 	bl	d79cc <sprintf>
   d66a6:	e7df      	b.n	d6668 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d66a8:	4916      	ldr	r1, [pc, #88]	; (d6704 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d66aa:	4620      	mov	r0, r4
   d66ac:	f001 f98e 	bl	d79cc <sprintf>
      _current_value = 0;
   d66b0:	2300      	movs	r3, #0
   d66b2:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d66b4:	e790      	b.n	d65d8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d66b6:	7cab      	ldrb	r3, [r5, #18]
   d66b8:	b1c3      	cbz	r3, d66ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d66ba:	f004 fb11 	bl	dace0 <_Z16_fetch_usbserialv>
   d66be:	4913      	ldr	r1, [pc, #76]	; (d670c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d66c0:	f003 fa45 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d66c4:	f004 fb0c 	bl	dace0 <_Z16_fetch_usbserialv>
   d66c8:	4911      	ldr	r1, [pc, #68]	; (d6710 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d66ca:	f003 fa40 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d66ce:	f004 fb07 	bl	dace0 <_Z16_fetch_usbserialv>
   d66d2:	4621      	mov	r1, r4
   d66d4:	f003 fa3b 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d66d8:	f004 fb02 	bl	dace0 <_Z16_fetch_usbserialv>
   d66dc:	490b      	ldr	r1, [pc, #44]	; (d670c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d66de:	f003 fa36 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d66e2:	f004 fafd 	bl	dace0 <_Z16_fetch_usbserialv>
   d66e6:	490b      	ldr	r1, [pc, #44]	; (d6714 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d66e8:	f003 fa31 	bl	d9b4e <_ZN5Print7printlnEPKc>
}
   d66ec:	b009      	add	sp, #36	; 0x24
   d66ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66f2:	bf00      	nop
   d66f4:	000de34c 	.word	0x000de34c
   d66f8:	000de374 	.word	0x000de374
   d66fc:	000de37b 	.word	0x000de37b
   d6700:	000de386 	.word	0x000de386
   d6704:	000de395 	.word	0x000de395
   d6708:	000de399 	.word	0x000de399
   d670c:	000de127 	.word	0x000de127
   d6710:	000de39d 	.word	0x000de39d
   d6714:	000de2af 	.word	0x000de2af
   d6718:	000de34e 	.word	0x000de34e
   d671c:	000de361 	.word	0x000de361
   d6720:	000de380 	.word	0x000de380

000d6724 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6728:	460c      	mov	r4, r1
   d672a:	4605      	mov	r5, r0
   d672c:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d672e:	4952      	ldr	r1, [pc, #328]	; (d6878 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6730:	f8df 8174 	ldr.w	r8, [pc, #372]	; d68a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6734:	f8df 9174 	ldr.w	r9, [pc, #372]	; d68ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d6738:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d673a:	4616      	mov	r6, r2
   d673c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d673e:	f005 fc06 	bl	dbf4e <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d6742:	68ab      	ldr	r3, [r5, #8]
   d6744:	4a4d      	ldr	r2, [pc, #308]	; (d687c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d6746:	494e      	ldr	r1, [pc, #312]	; (d6880 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d6748:	4620      	mov	r0, r4
   d674a:	f001 f93f 	bl	d79cc <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d674e:	4633      	mov	r3, r6
   d6750:	494c      	ldr	r1, [pc, #304]	; (d6884 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d6752:	9700      	str	r7, [sp, #0]
   d6754:	4622      	mov	r2, r4
   d6756:	4620      	mov	r0, r4
   d6758:	f001 f938 	bl	d79cc <sprintf>
  sprintf(payload, "%s=>", payload);
   d675c:	494a      	ldr	r1, [pc, #296]	; (d6888 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d675e:	4f49      	ldr	r7, [pc, #292]	; (d6884 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d6760:	4622      	mov	r2, r4
   d6762:	4620      	mov	r0, r4
   d6764:	f001 f932 	bl	d79cc <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d6768:	2600      	movs	r6, #0
   d676a:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d676e:	429e      	cmp	r6, r3
   d6770:	da64      	bge.n	d683c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6772:	68eb      	ldr	r3, [r5, #12]
   d6774:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d6778:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d677c:	ed93 0a02 	vldr	s0, [r3, #8]
   d6780:	a903      	add	r1, sp, #12
   d6782:	4628      	mov	r0, r5
   d6784:	f7ff fef6 	bl	d6574 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d6788:	68eb      	ldr	r3, [r5, #12]
   d678a:	a903      	add	r1, sp, #12
   d678c:	9100      	str	r1, [sp, #0]
   d678e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d6792:	4622      	mov	r2, r4
   d6794:	4639      	mov	r1, r7
   d6796:	4620      	mov	r0, r4
   d6798:	f001 f918 	bl	d79cc <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d679c:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d679e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d67a2:	4453      	add	r3, sl
   d67a4:	685b      	ldr	r3, [r3, #4]
   d67a6:	b123      	cbz	r3, d67b2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d67a8:	4622      	mov	r2, r4
   d67aa:	4641      	mov	r1, r8
   d67ac:	4620      	mov	r0, r4
   d67ae:	f001 f90d 	bl	d79cc <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d67b2:	68eb      	ldr	r3, [r5, #12]
   d67b4:	4453      	add	r3, sl
   d67b6:	68db      	ldr	r3, [r3, #12]
   d67b8:	b33b      	cbz	r3, d680a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d67ba:	4622      	mov	r2, r4
   d67bc:	4649      	mov	r1, r9
   d67be:	4620      	mov	r0, r4
   d67c0:	f001 f904 	bl	d79cc <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d67c4:	68eb      	ldr	r3, [r5, #12]
   d67c6:	4453      	add	r3, sl
   d67c8:	691b      	ldr	r3, [r3, #16]
   d67ca:	b353      	cbz	r3, d6822 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d67cc:	200a      	movs	r0, #10
   d67ce:	fb93 f1f0 	sdiv	r1, r3, r0
   d67d2:	fb91 fcf0 	sdiv	ip, r1, r0
   d67d6:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d67da:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d67de:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d67e0:	2264      	movs	r2, #100	; 0x64
   d67e2:	fb93 f2f2 	sdiv	r2, r3, r2
   d67e6:	fb92 fef0 	sdiv	lr, r2, r0
   d67ea:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d67ee:	9100      	str	r1, [sp, #0]
   d67f0:	fa5f f38c 	uxtb.w	r3, ip
   d67f4:	4925      	ldr	r1, [pc, #148]	; (d688c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d67f6:	b2d2      	uxtb	r2, r2
   d67f8:	a802      	add	r0, sp, #8
   d67fa:	f001 f8e7 	bl	d79cc <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d67fe:	4924      	ldr	r1, [pc, #144]	; (d6890 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6800:	ab02      	add	r3, sp, #8
   d6802:	4622      	mov	r2, r4
   d6804:	4620      	mov	r0, r4
   d6806:	f001 f8e1 	bl	d79cc <sprintf>
    if (i < _current_value) {
   d680a:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d680e:	3601      	adds	r6, #1
   d6810:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6812:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6814:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6816:	da0a      	bge.n	d682e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d6818:	491e      	ldr	r1, [pc, #120]	; (d6894 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d681a:	4620      	mov	r0, r4
   d681c:	f001 f8d6 	bl	d79cc <sprintf>
   d6820:	e7a3      	b.n	d676a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6822:	491d      	ldr	r1, [pc, #116]	; (d6898 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6824:	4622      	mov	r2, r4
   d6826:	4620      	mov	r0, r4
   d6828:	f001 f8d0 	bl	d79cc <sprintf>
   d682c:	e7ed      	b.n	d680a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d682e:	491b      	ldr	r1, [pc, #108]	; (d689c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6830:	4620      	mov	r0, r4
   d6832:	f001 f8cb 	bl	d79cc <sprintf>
      _current_value = 0;
   d6836:	2300      	movs	r3, #0
   d6838:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d683a:	e796      	b.n	d676a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d683c:	7cab      	ldrb	r3, [r5, #18]
   d683e:	b1c3      	cbz	r3, d6872 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6840:	f004 fa4e 	bl	dace0 <_Z16_fetch_usbserialv>
   d6844:	4916      	ldr	r1, [pc, #88]	; (d68a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6846:	f003 f982 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d684a:	f004 fa49 	bl	dace0 <_Z16_fetch_usbserialv>
   d684e:	4915      	ldr	r1, [pc, #84]	; (d68a4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d6850:	f003 f97d 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6854:	f004 fa44 	bl	dace0 <_Z16_fetch_usbserialv>
   d6858:	4621      	mov	r1, r4
   d685a:	f003 f978 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d685e:	f004 fa3f 	bl	dace0 <_Z16_fetch_usbserialv>
   d6862:	490f      	ldr	r1, [pc, #60]	; (d68a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6864:	f003 f973 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6868:	f004 fa3a 	bl	dace0 <_Z16_fetch_usbserialv>
   d686c:	4902      	ldr	r1, [pc, #8]	; (d6878 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d686e:	f003 f96e 	bl	d9b4e <_ZN5Print7printlnEPKc>
}
   d6872:	b009      	add	sp, #36	; 0x24
   d6874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6878:	000de2af 	.word	0x000de2af
   d687c:	000de0c4 	.word	0x000de0c4
   d6880:	000de3a6 	.word	0x000de3a6
   d6884:	000de3b2 	.word	0x000de3b2
   d6888:	000de3ba 	.word	0x000de3ba
   d688c:	000de374 	.word	0x000de374
   d6890:	000de37b 	.word	0x000de37b
   d6894:	000de399 	.word	0x000de399
   d6898:	000de380 	.word	0x000de380
   d689c:	000de3cc 	.word	0x000de3cc
   d68a0:	000de127 	.word	0x000de127
   d68a4:	000de39d 	.word	0x000de39d
   d68a8:	000de3bf 	.word	0x000de3bf
   d68ac:	000de3c5 	.word	0x000de3c5

000d68b0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d68b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d68b4:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68b6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d68ba:	461e      	mov	r6, r3
   d68bc:	460f      	mov	r7, r1
   d68be:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68c0:	f001 f86c 	bl	d799c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d68c4:	7ce3      	ldrb	r3, [r4, #19]
   d68c6:	3b01      	subs	r3, #1
   d68c8:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68ca:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d68cc:	d826      	bhi.n	d691c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d68ce:	4601      	mov	r1, r0
   d68d0:	4643      	mov	r3, r8
   d68d2:	463a      	mov	r2, r7
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7ff ff25 	bl	d6724 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d68da:	7ca3      	ldrb	r3, [r4, #18]
   d68dc:	b123      	cbz	r3, d68e8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d68de:	f004 f9ff 	bl	dace0 <_Z16_fetch_usbserialv>
   d68e2:	4911      	ldr	r1, [pc, #68]	; (d6928 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d68e4:	f003 f933 	bl	d9b4e <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d68e8:	6860      	ldr	r0, [r4, #4]
   d68ea:	6803      	ldr	r3, [r0, #0]
   d68ec:	9600      	str	r6, [sp, #0]
   d68ee:	f8d3 9000 	ldr.w	r9, [r3]
   d68f2:	4639      	mov	r1, r7
   d68f4:	462b      	mov	r3, r5
   d68f6:	4642      	mov	r2, r8
   d68f8:	47c8      	blx	r9
   d68fa:	4607      	mov	r7, r0
  free(payload);
   d68fc:	4628      	mov	r0, r5
   d68fe:	f001 f855 	bl	d79ac <free>
  delete flags;
   d6902:	b11e      	cbz	r6, d690c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6904:	2101      	movs	r1, #1
   d6906:	4630      	mov	r0, r6
   d6908:	f004 fbba 	bl	db080 <_ZdlPvj>
  if (result) {
   d690c:	2300      	movs	r3, #0
   d690e:	b107      	cbz	r7, d6912 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6910:	7463      	strb	r3, [r4, #17]
}
   d6912:	4638      	mov	r0, r7
  _current_value = 0;
   d6914:	7423      	strb	r3, [r4, #16]
}
   d6916:	b003      	add	sp, #12
   d6918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d691c:	4601      	mov	r1, r0
   d691e:	4620      	mov	r0, r4
   d6920:	f7ff fe4a 	bl	d65b8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6924:	e7d9      	b.n	d68da <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d6926:	bf00      	nop
   d6928:	000de3d3 	.word	0x000de3d3

000d692c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d692c:	b570      	push	{r4, r5, r6, lr}
   d692e:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6930:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6932:	460d      	mov	r5, r1
   d6934:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d6936:	f7fd fbae 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d693a:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d693c:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d693e:	462a      	mov	r2, r5
   d6940:	4629      	mov	r1, r5
   d6942:	4620      	mov	r0, r4
}
   d6944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d6948:	f7ff bfb2 	b.w	d68b0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d694c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d694c:	b570      	push	{r4, r5, r6, lr}
   d694e:	4605      	mov	r5, r0
   d6950:	460c      	mov	r4, r1
      while (__x != 0)
   d6952:	b184      	cbz	r4, d6976 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6954:	68e1      	ldr	r1, [r4, #12]
   d6956:	4628      	mov	r0, r5
   d6958:	f7ff fff8 	bl	d694c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d695c:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d695e:	68a6      	ldr	r6, [r4, #8]
   d6960:	b123      	cbz	r3, d696c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d6962:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6966:	2203      	movs	r2, #3
   d6968:	4608      	mov	r0, r1
   d696a:	4798      	blx	r3
   d696c:	4620      	mov	r0, r4
   d696e:	f7fd fb96 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6972:	4634      	mov	r4, r6
      }
   d6974:	e7ed      	b.n	d6952 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d6976:	bd70      	pop	{r4, r5, r6, pc}

000d6978 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6978:	b5f0      	push	{r4, r5, r6, r7, lr}
   d697a:	b08d      	sub	sp, #52	; 0x34
   d697c:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
   d697e:	a801      	add	r0, sp, #4
   d6980:	460d      	mov	r5, r1
   d6982:	4617      	mov	r7, r2
   d6984:	461e      	mov	r6, r3
   d6986:	f000 ff91 	bl	d78ac <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d698a:	9803      	ldr	r0, [sp, #12]
   d698c:	3001      	adds	r0, #1
   d698e:	f7fd fb84 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d6992:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d6994:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d6996:	f005 fada 	bl	dbf4e <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d699a:	462a      	mov	r2, r5
   d699c:	4633      	mov	r3, r6
   d699e:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d69a0:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d69a2:	a805      	add	r0, sp, #20
   d69a4:	f7ff f9b4 	bl	d5d10 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d69a8:	20c8      	movs	r0, #200	; 0xc8
   d69aa:	f000 fff7 	bl	d799c <malloc>
   d69ae:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d69b0:	a805      	add	r0, sp, #20
   d69b2:	f7ff f8bb 	bl	d5b2c <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d69b6:	2300      	movs	r3, #0
  _token = token;
   d69b8:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d69bc:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d69be:	7423      	strb	r3, [r4, #16]
   d69c0:	a806      	add	r0, sp, #24
   d69c2:	f7ff ffc3 	bl	d694c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d69c6:	a801      	add	r0, sp, #4
   d69c8:	f003 f9fc 	bl	d9dc4 <_ZN6StringD1Ev>
}
   d69cc:	b00d      	add	sp, #52	; 0x34
   d69ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69d0 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d69d0:	b538      	push	{r3, r4, r5, lr}
   d69d2:	2500      	movs	r5, #0
   d69d4:	4604      	mov	r4, r0
   d69d6:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d69d8:	f7ff ffce 	bl	d6978 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d69dc:	4620      	mov	r0, r4
   d69de:	bd38      	pop	{r3, r4, r5, pc}

000d69e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d69e0:	b570      	push	{r4, r5, r6, lr}
   d69e2:	4605      	mov	r5, r0
   d69e4:	460c      	mov	r4, r1
      while (__x != 0)
   d69e6:	b14c      	cbz	r4, d69fc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d69e8:	68e1      	ldr	r1, [r4, #12]
   d69ea:	4628      	mov	r0, r5
   d69ec:	f7ff fff8 	bl	d69e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d69f0:	68a6      	ldr	r6, [r4, #8]
   d69f2:	4620      	mov	r0, r4
   d69f4:	f7fd fb53 	bl	d409e <_ZdlPv>
	  __x = __y;
   d69f8:	4634      	mov	r4, r6
      while (__x != 0)
   d69fa:	e7f4      	b.n	d69e6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d69fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a00 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6a00:	b508      	push	{r3, lr}
        val_(val) {
   d6a02:	4b07      	ldr	r3, [pc, #28]	; (d6a20 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   d6a04:	4807      	ldr	r0, [pc, #28]	; (d6a24 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   d6a06:	2200      	movs	r2, #0
   d6a08:	701a      	strb	r2, [r3, #0]
   d6a0a:	f003 fd87 	bl	da51c <_ZN9TCPClientC1Ev>
   d6a0e:	4806      	ldr	r0, [pc, #24]	; (d6a28 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   d6a10:	f003 fd84 	bl	da51c <_ZN9TCPClientC1Ev>
   d6a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6a18:	4804      	ldr	r0, [pc, #16]	; (d6a2c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   d6a1a:	f003 bfd9 	b.w	da9d0 <_ZN3UDPC1Ev>
   d6a1e:	bf00      	nop
   d6a20:	2003e4d4 	.word	0x2003e4d4
   d6a24:	2003e4b8 	.word	0x2003e4b8
   d6a28:	2003e450 	.word	0x2003e450
   d6a2c:	2003e46c 	.word	0x2003e46c

000d6a30 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6a30:	7501      	strb	r1, [r0, #20]
   d6a32:	4770      	bx	lr

000d6a34 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a34:	b530      	push	{r4, r5, lr}
   d6a36:	4d06      	ldr	r5, [pc, #24]	; (d6a50 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d6a38:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d6a3a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a3e:	2500      	movs	r5, #0
  _token = token;
   d6a40:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a42:	7505      	strb	r5, [r0, #20]
   d6a44:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6a48:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a4c:	6185      	str	r5, [r0, #24]
}
   d6a4e:	bd30      	pop	{r4, r5, pc}
   d6a50:	000de480 	.word	0x000de480

000d6a54 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a58:	460d      	mov	r5, r1
   d6a5a:	4617      	mov	r7, r2
   d6a5c:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d6a5e:	f004 f93f 	bl	dace0 <_Z16_fetch_usbserialv>
   d6a62:	491e      	ldr	r1, [pc, #120]	; (d6adc <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6a64:	4e1e      	ldr	r6, [pc, #120]	; (d6ae0 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d6a66:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6ae4 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d6a6a:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6ae8 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d6a6e:	f003 f86e 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6a72:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6a74:	4630      	mov	r0, r6
   d6a76:	f003 fd18 	bl	da4aa <_ZN9TCPClient6statusEv>
   d6a7a:	bb60      	cbnz	r0, d6ad6 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d6a7c:	2c05      	cmp	r4, #5
   d6a7e:	d02a      	beq.n	d6ad6 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d6a80:	f898 3014 	ldrb.w	r3, [r8, #20]
   d6a84:	b1c3      	cbz	r3, d6ab8 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d6a86:	f004 f92b 	bl	dace0 <_Z16_fetch_usbserialv>
   d6a8a:	4651      	mov	r1, sl
   d6a8c:	f003 f84c 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6a90:	f004 f926 	bl	dace0 <_Z16_fetch_usbserialv>
   d6a94:	4629      	mov	r1, r5
   d6a96:	f003 f847 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6a9a:	f004 f921 	bl	dace0 <_Z16_fetch_usbserialv>
   d6a9e:	4659      	mov	r1, fp
   d6aa0:	f003 f842 	bl	d9b28 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6aa4:	f004 f91c 	bl	dace0 <_Z16_fetch_usbserialv>
   d6aa8:	220a      	movs	r2, #10
   d6aaa:	4681      	mov	r9, r0
   d6aac:	4621      	mov	r1, r4
   d6aae:	f003 f858 	bl	d9b62 <_ZN5Print11printNumberEmh>
        n += println();
   d6ab2:	4648      	mov	r0, r9
   d6ab4:	f003 f83f 	bl	d9b36 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6ab8:	4630      	mov	r0, r6
   d6aba:	f003 fcdf 	bl	da47c <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d6abe:	2300      	movs	r3, #0
   d6ac0:	b2ba      	uxth	r2, r7
   d6ac2:	4629      	mov	r1, r5
   d6ac4:	4630      	mov	r0, r6
   d6ac6:	f003 fb7d 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d6aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6ace:	f000 ffad 	bl	d7a2c <delay>
   d6ad2:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6ad4:	e7ce      	b.n	d6a74 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ada:	bf00      	nop
   d6adc:	000de3e3 	.word	0x000de3e3
   d6ae0:	2003e4d8 	.word	0x2003e4d8
   d6ae4:	000de0d8 	.word	0x000de0d8
   d6ae8:	000de0ee 	.word	0x000de0ee

000d6aec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6aec:	b570      	push	{r4, r5, r6, lr}
   d6aee:	4604      	mov	r4, r0
   d6af0:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d6af2:	6881      	ldr	r1, [r0, #8]
   d6af4:	482e      	ldr	r0, [pc, #184]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6af6:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d6af8:	f003 f816 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d6afc:	492d      	ldr	r1, [pc, #180]	; (d6bb4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6afe:	482c      	ldr	r0, [pc, #176]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b00:	f003 f812 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d6b04:	68e1      	ldr	r1, [r4, #12]
   d6b06:	482a      	ldr	r0, [pc, #168]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b08:	f003 f80e 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d6b0c:	492a      	ldr	r1, [pc, #168]	; (d6bb8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6b0e:	4828      	ldr	r0, [pc, #160]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b10:	f003 f80a 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d6b14:	4631      	mov	r1, r6
   d6b16:	4826      	ldr	r0, [pc, #152]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b18:	f003 f806 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d6b1c:	4927      	ldr	r1, [pc, #156]	; (d6bbc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6b1e:	4824      	ldr	r0, [pc, #144]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b20:	f003 f802 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d6b24:	4629      	mov	r1, r5
   d6b26:	4822      	ldr	r0, [pc, #136]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b28:	f002 fffe 	bl	d9b28 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d6b2c:	4924      	ldr	r1, [pc, #144]	; (d6bc0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6b2e:	4820      	ldr	r0, [pc, #128]	; (d6bb0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b30:	f002 fffa 	bl	d9b28 <_ZN5Print5printEPKc>
  if (_debug) {
   d6b34:	7d23      	ldrb	r3, [r4, #20]
   d6b36:	2b00      	cmp	r3, #0
   d6b38:	d038      	beq.n	d6bac <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d6b3a:	f004 f8d1 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b3e:	4921      	ldr	r1, [pc, #132]	; (d6bc4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d6b40:	f003 f805 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d6b44:	f004 f8cc 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b48:	491f      	ldr	r1, [pc, #124]	; (d6bc8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d6b4a:	f003 f800 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d6b4e:	f004 f8c7 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b52:	68a1      	ldr	r1, [r4, #8]
   d6b54:	f002 ffe8 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6b58:	f004 f8c2 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b5c:	4915      	ldr	r1, [pc, #84]	; (d6bb4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6b5e:	f002 ffe3 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d6b62:	f004 f8bd 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b66:	68e1      	ldr	r1, [r4, #12]
   d6b68:	f002 ffde 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print("|");
   d6b6c:	f004 f8b8 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b70:	4911      	ldr	r1, [pc, #68]	; (d6bb8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6b72:	f002 ffd9 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d6b76:	f004 f8b3 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b7a:	4631      	mov	r1, r6
   d6b7c:	f002 ffd4 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print(":");
   d6b80:	f004 f8ae 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b84:	490d      	ldr	r1, [pc, #52]	; (d6bbc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6b86:	f002 ffcf 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d6b8a:	f004 f8a9 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b8e:	4629      	mov	r1, r5
   d6b90:	f002 ffca 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d6b94:	f004 f8a4 	bl	dace0 <_Z16_fetch_usbserialv>
   d6b98:	4909      	ldr	r1, [pc, #36]	; (d6bc0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6b9a:	f002 ffc5 	bl	d9b28 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d6b9e:	f004 f89f 	bl	dace0 <_Z16_fetch_usbserialv>
}
   d6ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d6ba6:	4909      	ldr	r1, [pc, #36]	; (d6bcc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d6ba8:	f002 bfd1 	b.w	d9b4e <_ZN5Print7printlnEPKc>
}
   d6bac:	bd70      	pop	{r4, r5, r6, pc}
   d6bae:	bf00      	nop
   d6bb0:	2003e4d8 	.word	0x2003e4d8
   d6bb4:	000de3fb 	.word	0x000de3fb
   d6bb8:	000de3fe 	.word	0x000de3fe
   d6bbc:	000de3a4 	.word	0x000de3a4
   d6bc0:	000de3ce 	.word	0x000de3ce
   d6bc4:	000de416 	.word	0x000de416
   d6bc8:	000de400 	.word	0x000de400
   d6bcc:	000de415 	.word	0x000de415

000d6bd0 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d6bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6bd2:	4f0e      	ldr	r7, [pc, #56]	; (d6c0c <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6bd4:	4604      	mov	r4, r0
  int timeout = 0;
   d6bd6:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6bd8:	4638      	mov	r0, r7
   d6bda:	f003 fbf5 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d6bde:	4605      	mov	r5, r0
   d6be0:	b990      	cbnz	r0, d6c08 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d6be2:	69a3      	ldr	r3, [r4, #24]
   d6be4:	42b3      	cmp	r3, r6
   d6be6:	dd0f      	ble.n	d6c08 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6be8:	2001      	movs	r0, #1
   d6bea:	f000 ff1f 	bl	d7a2c <delay>
    if (timeout > _timeout - 1) {
   d6bee:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6bf0:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6bf2:	42b3      	cmp	r3, r6
   d6bf4:	dcf0      	bgt.n	d6bd8 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6bf6:	7d20      	ldrb	r0, [r4, #20]
   d6bf8:	b128      	cbz	r0, d6c06 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6bfa:	f004 f871 	bl	dace0 <_Z16_fetch_usbserialv>
   d6bfe:	4904      	ldr	r1, [pc, #16]	; (d6c10 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d6c00:	f002 ffa5 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6c04:	4628      	mov	r0, r5
}
   d6c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6c08:	2001      	movs	r0, #1
   d6c0a:	e7fc      	b.n	d6c06 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d6c0c:	2003e4d8 	.word	0x2003e4d8
   d6c10:	000de132 	.word	0x000de132

000d6c14 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6c18:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c1a:	4606      	mov	r6, r0
   d6c1c:	4688      	mov	r8, r1
   d6c1e:	4614      	mov	r4, r2
  if (_debug) {
   d6c20:	b14b      	cbz	r3, d6c36 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d6c22:	f004 f85d 	bl	dace0 <_Z16_fetch_usbserialv>
   d6c26:	4927      	ldr	r1, [pc, #156]	; (d6cc4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6c28:	f002 ff91 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6c2c:	f004 f858 	bl	dace0 <_Z16_fetch_usbserialv>
   d6c30:	4925      	ldr	r1, [pc, #148]	; (d6cc8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d6c32:	f002 ff8c 	bl	d9b4e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6c36:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d6cdc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c3a:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6c3c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6c40:	4648      	mov	r0, r9
   d6c42:	f003 fbc1 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d6c46:	b178      	cbz	r0, d6c68 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6c48:	4648      	mov	r0, r9
   d6c4a:	f003 fa76 	bl	da13a <_ZN9TCPClient4readEv>
    if (_debug) {
   d6c4e:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d6c50:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d6c52:	b12b      	cbz	r3, d6c60 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6c54:	f004 f844 	bl	dace0 <_Z16_fetch_usbserialv>
   d6c58:	6803      	ldr	r3, [r0, #0]
   d6c5a:	4639      	mov	r1, r7
   d6c5c:	689b      	ldr	r3, [r3, #8]
   d6c5e:	4798      	blx	r3
    response[j] = c;
   d6c60:	5567      	strb	r7, [r4, r5]
    j++;
   d6c62:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6c64:	4555      	cmp	r5, sl
   d6c66:	d1eb      	bne.n	d6c40 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6c68:	7d33      	ldrb	r3, [r6, #20]
   d6c6a:	b123      	cbz	r3, d6c76 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6c6c:	f004 f838 	bl	dace0 <_Z16_fetch_usbserialv>
   d6c70:	4916      	ldr	r1, [pc, #88]	; (d6ccc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d6c72:	f002 ff6c 	bl	d9b4e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6c76:	2300      	movs	r3, #0
   d6c78:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d6c7a:	4915      	ldr	r1, [pc, #84]	; (d6cd0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d6c7c:	4640      	mov	r0, r8
   d6c7e:	f005 f95c 	bl	dbf3a <strcmp>
   d6c82:	b968      	cbnz	r0, d6ca0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d6c84:	4913      	ldr	r1, [pc, #76]	; (d6cd4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d6c86:	4620      	mov	r0, r4
   d6c88:	f005 f9c8 	bl	dc01c <strstr>
      result = 1;
   d6c8c:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6cd8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6c90:	2800      	cmp	r0, #0
   d6c92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6c96:	bf18      	it	ne
   d6c98:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6ca0:	217c      	movs	r1, #124	; 0x7c
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f005 f932 	bl	dbf0c <strchr>
  if (pch != NULL) {
   d6ca8:	b148      	cbz	r0, d6cbe <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d6caa:	3001      	adds	r0, #1
   d6cac:	f005 f8d2 	bl	dbe54 <atof>
   d6cb0:	ec51 0b10 	vmov	r0, r1, d0
   d6cb4:	f005 f85a 	bl	dbd6c <__aeabi_d2f>
   d6cb8:	ee00 0a10 	vmov	s0, r0
   d6cbc:	e7ee      	b.n	d6c9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d6cbe:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6cd8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6cc2:	e7eb      	b.n	d6c9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6cc4:	000de127 	.word	0x000de127
   d6cc8:	000de113 	.word	0x000de113
   d6ccc:	000de126 	.word	0x000de126
   d6cd0:	000de41b 	.word	0x000de41b
   d6cd4:	000de420 	.word	0x000de420
   d6cd8:	cda2425f 	.word	0xcda2425f
   d6cdc:	2003e4d8 	.word	0x2003e4d8

000d6ce0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6ce0:	b570      	push	{r4, r5, r6, lr}
   d6ce2:	ed2d 8b02 	vpush	{d8}
   d6ce6:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6ce8:	6841      	ldr	r1, [r0, #4]
   d6cea:	4822      	ldr	r0, [pc, #136]	; (d6d74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6cec:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6cf0:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6cf2:	2300      	movs	r3, #0
   d6cf4:	f003 fa66 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6cf8:	4620      	mov	r0, r4
   d6cfa:	6861      	ldr	r1, [r4, #4]
   d6cfc:	f242 3234 	movw	r2, #9012	; 0x2334
   d6d00:	f7ff fea8 	bl	d6a54 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6d04:	481b      	ldr	r0, [pc, #108]	; (d6d74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d06:	f003 f958 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d6d0a:	b348      	cbz	r0, d6d60 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d6d0c:	4629      	mov	r1, r5
   d6d0e:	4819      	ldr	r0, [pc, #100]	; (d6d74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d10:	f002 ff0a 	bl	d9b28 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d6d14:	4620      	mov	r0, r4
   d6d16:	f7ff ff5b 	bl	d6bd0 <_ZN6UbiTCP16waitServerAnswerEv>
   d6d1a:	4605      	mov	r5, r0
   d6d1c:	b938      	cbnz	r0, d6d2e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d6d1e:	4815      	ldr	r0, [pc, #84]	; (d6d74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d20:	f003 fbac 	bl	da47c <_ZN9TCPClient4stopEv>
    return false;
   d6d24:	2500      	movs	r5, #0
}
   d6d26:	ecbd 8b02 	vpop	{d8}
   d6d2a:	4628      	mov	r0, r5
   d6d2c:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d6d2e:	2064      	movs	r0, #100	; 0x64
   d6d30:	f000 fe34 	bl	d799c <malloc>
  float value = parseTCPAnswer("POST", response);
   d6d34:	4910      	ldr	r1, [pc, #64]	; (d6d78 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d6d36:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6d38:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d6d3a:	4620      	mov	r0, r4
   d6d3c:	f7ff ff6a 	bl	d6c14 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6d40:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d6d42:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d6d46:	f000 fe31 	bl	d79ac <free>
  if (value != ERROR_VALUE) {
   d6d4a:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6d7c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d6d4e:	eeb4 8a67 	vcmp.f32	s16, s15
   d6d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d56:	d0e2      	beq.n	d6d1e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6d58:	4806      	ldr	r0, [pc, #24]	; (d6d74 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d5a:	f003 fb8f 	bl	da47c <_ZN9TCPClient4stopEv>
    return true;
   d6d5e:	e7e2      	b.n	d6d26 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d6d60:	7d23      	ldrb	r3, [r4, #20]
   d6d62:	2b00      	cmp	r3, #0
   d6d64:	d0db      	beq.n	d6d1e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d6d66:	f003 ffbb 	bl	dace0 <_Z16_fetch_usbserialv>
   d6d6a:	4905      	ldr	r1, [pc, #20]	; (d6d80 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6d6c:	f002 feef 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6d70:	e7d5      	b.n	d6d1e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d6d72:	bf00      	nop
   d6d74:	2003e4d8 	.word	0x2003e4d8
   d6d78:	000de41b 	.word	0x000de41b
   d6d7c:	cda2425f 	.word	0xcda2425f
   d6d80:	000de423 	.word	0x000de423

000d6d84 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6d84:	b570      	push	{r4, r5, r6, lr}
   d6d86:	ed2d 8b02 	vpush	{d8}
   d6d8a:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6d8c:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6d8e:	460d      	mov	r5, r1
   d6d90:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6d92:	6841      	ldr	r1, [r0, #4]
   d6d94:	481e      	ldr	r0, [pc, #120]	; (d6e10 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6d96:	f242 3234 	movw	r2, #9012	; 0x2334
   d6d9a:	f003 fa13 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6d9e:	4620      	mov	r0, r4
   d6da0:	6861      	ldr	r1, [r4, #4]
   d6da2:	f242 3234 	movw	r2, #9012	; 0x2334
   d6da6:	f7ff fe55 	bl	d6a54 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6daa:	4819      	ldr	r0, [pc, #100]	; (d6e10 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6dac:	f003 f905 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d6db0:	b328      	cbz	r0, d6dfe <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d6db2:	4620      	mov	r0, r4
   d6db4:	4632      	mov	r2, r6
   d6db6:	4629      	mov	r1, r5
   d6db8:	f7ff fe98 	bl	d6aec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6dbc:	4620      	mov	r0, r4
   d6dbe:	f7ff ff07 	bl	d6bd0 <_ZN6UbiTCP16waitServerAnswerEv>
   d6dc2:	b948      	cbnz	r0, d6dd8 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6dc4:	4812      	ldr	r0, [pc, #72]	; (d6e10 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6dc6:	ed9f 8a13 	vldr	s16, [pc, #76]	; d6e14 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d6dca:	f003 fb57 	bl	da47c <_ZN9TCPClient4stopEv>
}
   d6dce:	eeb0 0a48 	vmov.f32	s0, s16
   d6dd2:	ecbd 8b02 	vpop	{d8}
   d6dd6:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6dd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6ddc:	f000 fdde 	bl	d799c <malloc>
    float value = parseTCPAnswer("LV", response);
   d6de0:	490d      	ldr	r1, [pc, #52]	; (d6e18 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d6de2:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6de4:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6de6:	4620      	mov	r0, r4
   d6de8:	f7ff ff14 	bl	d6c14 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d6dec:	4808      	ldr	r0, [pc, #32]	; (d6e10 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d6dee:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d6df2:	f003 fb43 	bl	da47c <_ZN9TCPClient4stopEv>
    free(response);
   d6df6:	4628      	mov	r0, r5
   d6df8:	f000 fdd8 	bl	d79ac <free>
    return value;
   d6dfc:	e7e7      	b.n	d6dce <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d6dfe:	7d23      	ldrb	r3, [r4, #20]
   d6e00:	2b00      	cmp	r3, #0
   d6e02:	d0df      	beq.n	d6dc4 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d6e04:	f003 ff6c 	bl	dace0 <_Z16_fetch_usbserialv>
   d6e08:	4904      	ldr	r1, [pc, #16]	; (d6e1c <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d6e0a:	f002 fea0 	bl	d9b4e <_ZN5Print7printlnEPKc>
   d6e0e:	e7d9      	b.n	d6dc4 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d6e10:	2003e4d8 	.word	0x2003e4d8
   d6e14:	cda2425f 	.word	0xcda2425f
   d6e18:	000de441 	.word	0x000de441
   d6e1c:	000de444 	.word	0x000de444

000d6e20 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e24:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e26:	2018      	movs	r0, #24
   d6e28:	4615      	mov	r5, r2
   d6e2a:	460f      	mov	r7, r1
   d6e2c:	f7fd f933 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d6e30:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d6e34:	686b      	ldr	r3, [r5, #4]
   d6e36:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d6e3a:	68ba      	ldr	r2, [r7, #8]
   d6e3c:	6143      	str	r3, [r0, #20]
   d6e3e:	4606      	mov	r6, r0
   d6e40:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d6e44:	4655      	mov	r5, sl
      bool __comp = true;
   d6e46:	2301      	movs	r3, #1
      while (__x != 0)
   d6e48:	b152      	cbz	r2, d6e60 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d6e4a:	6913      	ldr	r3, [r2, #16]
   d6e4c:	454b      	cmp	r3, r9
   d6e4e:	bfcc      	ite	gt
   d6e50:	6891      	ldrgt	r1, [r2, #8]
   d6e52:	68d1      	ldrle	r1, [r2, #12]
   d6e54:	4615      	mov	r5, r2
   d6e56:	bfcc      	ite	gt
   d6e58:	2301      	movgt	r3, #1
   d6e5a:	2300      	movle	r3, #0
   d6e5c:	460a      	mov	r2, r1
   d6e5e:	e7f3      	b.n	d6e48 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d6e60:	b1a3      	cbz	r3, d6e8c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d6e62:	68fb      	ldr	r3, [r7, #12]
   d6e64:	42ab      	cmp	r3, r5
   d6e66:	d023      	beq.n	d6eb0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d6e68:	4628      	mov	r0, r5
   d6e6a:	f004 f963 	bl	db134 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d6e6e:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d6e70:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d6e74:	454b      	cmp	r3, r9
   d6e76:	db1b      	blt.n	d6eb0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d6e78:	4630      	mov	r0, r6
   d6e7a:	f7fd f910 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6e7e:	f8c4 8000 	str.w	r8, [r4]
   d6e82:	2300      	movs	r3, #0
   d6e84:	7123      	strb	r3, [r4, #4]
      }
   d6e86:	4620      	mov	r0, r4
   d6e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e8c:	46a8      	mov	r8, r5
   d6e8e:	e7ef      	b.n	d6e70 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6e90:	6928      	ldr	r0, [r5, #16]
   d6e92:	4581      	cmp	r9, r0
   d6e94:	bfac      	ite	ge
   d6e96:	2000      	movge	r0, #0
   d6e98:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d6e9a:	4653      	mov	r3, sl
   d6e9c:	462a      	mov	r2, r5
   d6e9e:	4631      	mov	r1, r6
   d6ea0:	f004 f94a 	bl	db138 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d6ea4:	697b      	ldr	r3, [r7, #20]
   d6ea6:	6026      	str	r6, [r4, #0]
   d6ea8:	3301      	adds	r3, #1
   d6eaa:	617b      	str	r3, [r7, #20]
   d6eac:	2301      	movs	r3, #1
   d6eae:	e7e9      	b.n	d6e84 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d6eb0:	45aa      	cmp	sl, r5
   d6eb2:	d1ed      	bne.n	d6e90 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6eb4:	2001      	movs	r0, #1
   d6eb6:	e7f0      	b.n	d6e9a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d6eb8 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d6eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6ebc:	460d      	mov	r5, r1
   d6ebe:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6ec0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6ec4:	f000 fd6a 	bl	d799c <malloc>
  if (_debug) {
   d6ec8:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6eca:	4607      	mov	r7, r0
  if (_debug) {
   d6ecc:	b14b      	cbz	r3, d6ee2 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d6ece:	f003 ff07 	bl	dace0 <_Z16_fetch_usbserialv>
   d6ed2:	493a      	ldr	r1, [pc, #232]	; (d6fbc <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d6ed4:	f002 fe3b 	bl	d9b4e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6ed8:	f003 ff02 	bl	dace0 <_Z16_fetch_usbserialv>
   d6edc:	4938      	ldr	r1, [pc, #224]	; (d6fc0 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d6ede:	f002 fe36 	bl	d9b4e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6ee2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d6fd4 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d6ee6:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6ee8:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6eec:	4648      	mov	r0, r9
   d6eee:	f003 fa6b 	bl	da3c8 <_ZN9TCPClient9availableEv>
   d6ef2:	b188      	cbz	r0, d6f18 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d6ef4:	4648      	mov	r0, r9
   d6ef6:	f003 f920 	bl	da13a <_ZN9TCPClient4readEv>
    if (_debug) {
   d6efa:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d6efc:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d6f00:	b12b      	cbz	r3, d6f0e <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d6f02:	f003 feed 	bl	dace0 <_Z16_fetch_usbserialv>
   d6f06:	6803      	ldr	r3, [r0, #0]
   d6f08:	4641      	mov	r1, r8
   d6f0a:	689b      	ldr	r3, [r3, #8]
   d6f0c:	4798      	blx	r3
    response[j] = c;
   d6f0e:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d6f12:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6f14:	4556      	cmp	r6, sl
   d6f16:	d1e9      	bne.n	d6eec <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d6f18:	7d2b      	ldrb	r3, [r5, #20]
   d6f1a:	b123      	cbz	r3, d6f26 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d6f1c:	f003 fee0 	bl	dace0 <_Z16_fetch_usbserialv>
   d6f20:	4928      	ldr	r1, [pc, #160]	; (d6fc4 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d6f22:	f002 fe14 	bl	d9b4e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6f26:	2500      	movs	r5, #0
	  : _Node_allocator()
   d6f28:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d6f2a:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d6f2e:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d6f32:	4925      	ldr	r1, [pc, #148]	; (d6fc8 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d6f34:	7125      	strb	r5, [r4, #4]
   d6f36:	4638      	mov	r0, r7
  response[j] = '\0';
   d6f38:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d6f3a:	f005 febb 	bl	dccb4 <strtok>
    if (strcmp(token, "OK") == 0) {
   d6f3e:	f8df 9098 	ldr.w	r9, [pc, #152]	; d6fd8 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d6f42:	f8df a098 	ldr.w	sl, [pc, #152]	; d6fdc <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d6f46:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6fc8 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d6f4a:	4606      	mov	r6, r0
  while (token != NULL) {
   d6f4c:	b37e      	cbz	r6, d6fae <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d6f4e:	4649      	mov	r1, r9
   d6f50:	4630      	mov	r0, r6
   d6f52:	f004 fff2 	bl	dbf3a <strcmp>
   d6f56:	bb00      	cbnz	r0, d6f9a <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d6f58:	4641      	mov	r1, r8
   d6f5a:	f005 feab 	bl	dccb4 <strtok>
      if (strcmp(token, "null") == 0) {
   d6f5e:	491b      	ldr	r1, [pc, #108]	; (d6fcc <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d6f60:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d6f62:	f004 ffea 	bl	dbf3a <strcmp>
   d6f66:	b918      	cbnz	r0, d6f70 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d6f68:	4b19      	ldr	r3, [pc, #100]	; (d6fd0 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d6f6a:	9500      	str	r5, [sp, #0]
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	e008      	b.n	d6f82 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d6f70:	4630      	mov	r0, r6
   d6f72:	f004 ff6f 	bl	dbe54 <atof>
   d6f76:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6f7a:	9500      	str	r5, [sp, #0]
   d6f7c:	f004 fef6 	bl	dbd6c <__aeabi_d2f>
   d6f80:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d6f82:	466a      	mov	r2, sp
   d6f84:	4621      	mov	r1, r4
   d6f86:	a802      	add	r0, sp, #8
   d6f88:	f7ff ff4a 	bl	d6e20 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d6f8c:	4641      	mov	r1, r8
   d6f8e:	2000      	movs	r0, #0
   d6f90:	f005 fe90 	bl	dccb4 <strtok>
    mapKey++;
   d6f94:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d6f96:	4606      	mov	r6, r0
  while (token != NULL) {
   d6f98:	e7d8      	b.n	d6f4c <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d6f9a:	4651      	mov	r1, sl
   d6f9c:	4630      	mov	r0, r6
   d6f9e:	f004 ffcc 	bl	dbf3a <strcmp>
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	d1f2      	bne.n	d6f8c <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d6fa6:	4641      	mov	r1, r8
   d6fa8:	f005 fe84 	bl	dccb4 <strtok>
   d6fac:	e7dc      	b.n	d6f68 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d6fae:	4638      	mov	r0, r7
   d6fb0:	f000 fcfc 	bl	d79ac <free>
}
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	b004      	add	sp, #16
   d6fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6fbc:	000de127 	.word	0x000de127
   d6fc0:	000de113 	.word	0x000de113
   d6fc4:	000de126 	.word	0x000de126
   d6fc8:	000de3fe 	.word	0x000de3fe
   d6fcc:	000de46a 	.word	0x000de46a
   d6fd0:	cda2425f 	.word	0xcda2425f
   d6fd4:	2003e4d8 	.word	0x2003e4d8
   d6fd8:	000de420 	.word	0x000de420
   d6fdc:	000de46f 	.word	0x000de46f

000d6fe0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d6fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d6fe4:	1d07      	adds	r7, r0, #4
   d6fe6:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d6fe8:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d6fea:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d6fee:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d6ff2:	7103      	strb	r3, [r0, #4]
   d6ff4:	460d      	mov	r5, r1
   d6ff6:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6ff8:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d6ffa:	4604      	mov	r4, r0
   d6ffc:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6ffe:	482e      	ldr	r0, [pc, #184]	; (d70b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d7000:	f242 3234 	movw	r2, #9012	; 0x2334
   d7004:	f003 f8de 	bl	da1c4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d7008:	4628      	mov	r0, r5
   d700a:	6869      	ldr	r1, [r5, #4]
   d700c:	f242 3234 	movw	r2, #9012	; 0x2334
   d7010:	f7ff fd20 	bl	d6a54 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d7014:	4828      	ldr	r0, [pc, #160]	; (d70b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d7016:	f002 ffd0 	bl	d9fba <_ZN9TCPClient9connectedEv>
   d701a:	b310      	cbz	r0, d7062 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d701c:	4631      	mov	r1, r6
   d701e:	4642      	mov	r2, r8
   d7020:	4628      	mov	r0, r5
   d7022:	f7ff fd63 	bl	d6aec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d7026:	4628      	mov	r0, r5
   d7028:	f7ff fdd2 	bl	d6bd0 <_ZN6UbiTCP16waitServerAnswerEv>
   d702c:	4606      	mov	r6, r0
   d702e:	b9c0      	cbnz	r0, d7062 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d7030:	4821      	ldr	r0, [pc, #132]	; (d70b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d7032:	4f22      	ldr	r7, [pc, #136]	; (d70bc <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d7034:	f003 fa22 	bl	da47c <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d7038:	4921      	ldr	r1, [pc, #132]	; (d70c0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d703a:	4640      	mov	r0, r8
   d703c:	f005 fe3a 	bl	dccb4 <strtok>
      int mapKey = 0;
   d7040:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d7042:	4e1f      	ldr	r6, [pc, #124]	; (d70c0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d7044:	2800      	cmp	r0, #0
   d7046:	d032      	beq.n	d70ae <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d7048:	4621      	mov	r1, r4
   d704a:	a802      	add	r0, sp, #8
   d704c:	466a      	mov	r2, sp
   d704e:	9500      	str	r5, [sp, #0]
   d7050:	9701      	str	r7, [sp, #4]
   d7052:	f7ff fee5 	bl	d6e20 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d7056:	4631      	mov	r1, r6
   d7058:	2000      	movs	r0, #0
        mapKey++;
   d705a:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d705c:	f005 fe2a 	bl	dccb4 <strtok>
      while (token != NULL) {
   d7060:	e7f0      	b.n	d7044 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d7062:	4629      	mov	r1, r5
   d7064:	a802      	add	r0, sp, #8
   d7066:	f7ff ff27 	bl	d6eb8 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d706a:	68a1      	ldr	r1, [r4, #8]
   d706c:	4620      	mov	r0, r4
   d706e:	f7ff fcb7 	bl	d69e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d7072:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d7074:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d7076:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d707a:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d707e:	b17a      	cbz	r2, d70a0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d7080:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d7084:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d7086:	9905      	ldr	r1, [sp, #20]
   d7088:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d708a:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d708c:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d708e:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d7090:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d7092:	9a07      	ldr	r2, [sp, #28]
   d7094:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d7096:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d7098:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d709c:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d709e:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d70a0:	a802      	add	r0, sp, #8
   d70a2:	9904      	ldr	r1, [sp, #16]
   d70a4:	f7ff fc9c 	bl	d69e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d70a8:	4803      	ldr	r0, [pc, #12]	; (d70b8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d70aa:	f003 f9e7 	bl	da47c <_ZN9TCPClient4stopEv>
}
   d70ae:	4620      	mov	r0, r4
   d70b0:	b008      	add	sp, #32
   d70b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d70b6:	bf00      	nop
   d70b8:	2003e4d8 	.word	0x2003e4d8
   d70bc:	cda2425f 	.word	0xcda2425f
   d70c0:	000de39b 	.word	0x000de39b

000d70c4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   d70c4:	4801      	ldr	r0, [pc, #4]	; (d70cc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   d70c6:	f003 ba29 	b.w	da51c <_ZN9TCPClientC1Ev>
   d70ca:	bf00      	nop
   d70cc:	2003e4d8 	.word	0x2003e4d8

000d70d0 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d70d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d70d8 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d70d4:	4770      	bx	lr
   d70d6:	bf00      	nop
   d70d8:	cda2425f 	.word	0xcda2425f

000d70dc <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d70dc:	7501      	strb	r1, [r0, #20]
   d70de:	4770      	bx	lr

000d70e0 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d70e0:	2200      	movs	r2, #0
	  : _Node_allocator()
   d70e2:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d70e4:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d70e8:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d70ec:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d70ee:	4770      	bx	lr

000d70f0 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d70f0:	b530      	push	{r4, r5, lr}
   d70f2:	4d06      	ldr	r5, [pc, #24]	; (d710c <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d70f4:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d70f6:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d70fa:	2500      	movs	r5, #0
  _token = token;
   d70fc:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d70fe:	7505      	strb	r5, [r0, #20]
   d7100:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d7104:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7108:	6185      	str	r5, [r0, #24]
}
   d710a:	bd30      	pop	{r4, r5, pc}
   d710c:	000de544 	.word	0x000de544

000d7110 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   d7110:	4801      	ldr	r0, [pc, #4]	; (d7118 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   d7112:	f003 bc5d 	b.w	da9d0 <_ZN3UDPC1Ev>
   d7116:	bf00      	nop
   d7118:	2003e4f4 	.word	0x2003e4f4

000d711c <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d711c:	b510      	push	{r4, lr}
   d711e:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d7120:	684a      	ldr	r2, [r1, #4]
   d7122:	4902      	ldr	r1, [pc, #8]	; (d712c <_ZN6UbiUDP11getServerIpEv+0x10>)
   d7124:	f002 fc64 	bl	d99f0 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d7128:	4620      	mov	r0, r4
   d712a:	bd10      	pop	{r4, pc}
   d712c:	2003e544 	.word	0x2003e544

000d7130 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7130:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7132:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d7134:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7136:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d7138:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d713a:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d713c:	f7ff ffee 	bl	d711c <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7140:	a802      	add	r0, sp, #8
   d7142:	f001 fa41 	bl	d85c8 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d7146:	b9a0      	cbnz	r0, d7172 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d7148:	7d33      	ldrb	r3, [r6, #20]
   d714a:	b123      	cbz	r3, d7156 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d714c:	f003 fdc8 	bl	dace0 <_Z16_fetch_usbserialv>
   d7150:	4927      	ldr	r1, [pc, #156]	; (d71f0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d7152:	f002 fcfc 	bl	d9b4e <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d7156:	23f3      	movs	r3, #243	; 0xf3
   d7158:	9300      	str	r3, [sp, #0]
   d715a:	2237      	movs	r2, #55	; 0x37
   d715c:	233d      	movs	r3, #61	; 0x3d
   d715e:	21a9      	movs	r1, #169	; 0xa9
   d7160:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d7162:	ad09      	add	r5, sp, #36	; 0x24
   d7164:	f001 fa54 	bl	d8610 <_ZN9IPAddressC1Ehhhh>
   d7168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d716a:	ac03      	add	r4, sp, #12
   d716c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d716e:	682b      	ldr	r3, [r5, #0]
   d7170:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d7172:	2200      	movs	r2, #0
   d7174:	f240 21bd 	movw	r1, #701	; 0x2bd
   d7178:	481e      	ldr	r0, [pc, #120]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d717a:	f003 fc5b 	bl	daa34 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d717e:	2200      	movs	r2, #0
   d7180:	f242 3134 	movw	r1, #9012	; 0x2334
   d7184:	481b      	ldr	r0, [pc, #108]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7186:	f003 fa31 	bl	da5ec <_ZN3UDP5beginEtm>
   d718a:	ad03      	add	r5, sp, #12
   d718c:	4b1a      	ldr	r3, [pc, #104]	; (d71f8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d718e:	9308      	str	r3, [sp, #32]
   d7190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7192:	ac09      	add	r4, sp, #36	; 0x24
   d7194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7196:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7198:	4816      	ldr	r0, [pc, #88]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d719a:	7023      	strb	r3, [r4, #0]
   d719c:	f242 3234 	movw	r2, #9012	; 0x2334
   d71a0:	a908      	add	r1, sp, #32
   d71a2:	f003 fc63 	bl	daa6c <_ZN3UDP11beginPacketE9IPAddresst>
   d71a6:	b958      	cbnz	r0, d71c0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d71a8:	7d33      	ldrb	r3, [r6, #20]
   d71aa:	b123      	cbz	r3, d71b6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d71ac:	f003 fd98 	bl	dace0 <_Z16_fetch_usbserialv>
   d71b0:	4912      	ldr	r1, [pc, #72]	; (d71fc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d71b2:	f002 fccc 	bl	d9b4e <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d71b6:	480f      	ldr	r0, [pc, #60]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71b8:	f003 fa64 	bl	da684 <_ZN3UDP4stopEv>
    return false;
   d71bc:	2000      	movs	r0, #0
   d71be:	e014      	b.n	d71ea <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d71c0:	2f00      	cmp	r7, #0
   d71c2:	d0f1      	beq.n	d71a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d71c4:	4638      	mov	r0, r7
   d71c6:	f004 fee8 	bl	dbf9a <strlen>
   d71ca:	4639      	mov	r1, r7
   d71cc:	4602      	mov	r2, r0
   d71ce:	4809      	ldr	r0, [pc, #36]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71d0:	f003 fa66 	bl	da6a0 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d71d4:	2800      	cmp	r0, #0
   d71d6:	d0e7      	beq.n	d71a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d71d8:	4806      	ldr	r0, [pc, #24]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71da:	f003 fac1 	bl	da760 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d71de:	2800      	cmp	r0, #0
   d71e0:	d0e2      	beq.n	d71a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d71e2:	4804      	ldr	r0, [pc, #16]	; (d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71e4:	f003 fa4e 	bl	da684 <_ZN3UDP4stopEv>
  return true;
   d71e8:	2001      	movs	r0, #1
}
   d71ea:	b00f      	add	sp, #60	; 0x3c
   d71ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71ee:	bf00      	nop
   d71f0:	000de490 	.word	0x000de490
   d71f4:	2003e4f4 	.word	0x2003e4f4
   d71f8:	000de6d4 	.word	0x000de6d4
   d71fc:	000de51c 	.word	0x000de51c

000d7200 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7200:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d7202:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7204:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d7206:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7208:	e9cd 2100 	strd	r2, r1, [sp]
   d720c:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d720e:	f000 fbc5 	bl	d799c <malloc>
   d7212:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d7214:	2014      	movs	r0, #20
   d7216:	f7fc ff3e 	bl	d4096 <_Znwj>
   d721a:	4605      	mov	r5, r0
   d721c:	b120      	cbz	r0, d7228 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d721e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7222:	4633      	mov	r3, r6
   d7224:	f7ff fbd4 	bl	d69d0 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d7228:	6025      	str	r5, [r4, #0]
}
   d722a:	b002      	add	sp, #8
   d722c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7230 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d7230:	b538      	push	{r3, r4, r5, lr}
   d7232:	2500      	movs	r5, #0
   d7234:	4604      	mov	r4, r0
   d7236:	4613      	mov	r3, r2
   d7238:	7245      	strb	r5, [r0, #9]
   d723a:	7285      	strb	r5, [r0, #10]
   d723c:	4a02      	ldr	r2, [pc, #8]	; (d7248 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d723e:	f7ff ffdf 	bl	d7200 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d7242:	4620      	mov	r0, r4
   d7244:	bd38      	pop	{r3, r4, r5, pc}
   d7246:	bf00      	nop
   d7248:	000de554 	.word	0x000de554

000d724c <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d724c:	6800      	ldr	r0, [r0, #0]
   d724e:	f7ff b951 	b.w	d64f4 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d7252 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d7252:	b507      	push	{r0, r1, r2, lr}
   d7254:	2300      	movs	r3, #0
   d7256:	9300      	str	r3, [sp, #0]
   d7258:	461a      	mov	r2, r3
   d725a:	f7ff fff7 	bl	d724c <_ZN7Ubidots3addEPcfS0_mj>
   d725e:	b003      	add	sp, #12
   d7260:	f85d fb04 	ldr.w	pc, [sp], #4

000d7264 <_ZN7Ubidots3addEPcfS0_>:
void Ubidots::add(char* variable_label, float value, char* context) { add(variable_label, value, context, NULL, NULL); }
   d7264:	b507      	push	{r0, r1, r2, lr}
   d7266:	2300      	movs	r3, #0
   d7268:	9300      	str	r3, [sp, #0]
   d726a:	f7ff ffef 	bl	d724c <_ZN7Ubidots3addEPcfS0_mj>
   d726e:	b003      	add	sp, #12
   d7270:	f85d fb04 	ldr.w	pc, [sp], #4

000d7274 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d7274:	6800      	ldr	r0, [r0, #0]
   d7276:	f7ff bb59 	b.w	d692c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d727c <_ZN7Ubidots10addContextEPcS0_>:

/*
 * Adds to the context structure values to retrieve later it easily by the user
 */

void Ubidots::addContext(char* key_label, char* key_value) {
   d727c:	b510      	push	{r4, lr}
   d727e:	4604      	mov	r4, r0
  (_context + _current_context)->key_label = key_label;
   d7280:	f990 0009 	ldrsb.w	r0, [r0, #9]
   d7284:	6863      	ldr	r3, [r4, #4]
   d7286:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
  (_context + _current_context)->key_value = key_value;
   d728a:	f994 1009 	ldrsb.w	r1, [r4, #9]
   d728e:	6863      	ldr	r3, [r4, #4]
   d7290:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d7294:	605a      	str	r2, [r3, #4]
  _current_context++;
   d7296:	7a63      	ldrb	r3, [r4, #9]
   d7298:	3301      	adds	r3, #1
   d729a:	b25b      	sxtb	r3, r3
  if (_current_context >= MAX_VALUES) {
   d729c:	2b09      	cmp	r3, #9
  _current_context++;
   d729e:	7263      	strb	r3, [r4, #9]
  if (_current_context >= MAX_VALUES) {
   d72a0:	dd06      	ble.n	d72b0 <_ZN7Ubidots10addContextEPcS0_+0x34>
    Serial.println(
   d72a2:	f003 fd1d 	bl	dace0 <_Z16_fetch_usbserialv>
   d72a6:	4903      	ldr	r1, [pc, #12]	; (d72b4 <_ZN7Ubidots10addContextEPcS0_+0x38>)
   d72a8:	f002 fc51 	bl	d9b4e <_ZN5Print7printlnEPKc>
        F("You are adding more than the maximum of consecutive key-values "
          "pairs"));
    _current_context = MAX_VALUES;
   d72ac:	230a      	movs	r3, #10
   d72ae:	7263      	strb	r3, [r4, #9]
  }
}
   d72b0:	bd10      	pop	{r4, pc}
   d72b2:	bf00      	nop
   d72b4:	000de56f 	.word	0x000de56f

000d72b8 <_ZN7Ubidots10getContextEPc11IotProtocol>:

void Ubidots::getContext(char* context_result) { getContext(context_result, _iotProtocol); }

void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
  // TCP context type
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   d72b8:	1e53      	subs	r3, r2, #1
   d72ba:	2b01      	cmp	r3, #1
void Ubidots::getContext(char* context_result, IotProtocol iotProtocol) {
   d72bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d72c0:	4605      	mov	r5, r0
   d72c2:	460c      	mov	r4, r1
  if (iotProtocol == UBI_TCP || iotProtocol == UBI_UDP) {
   d72c4:	d827      	bhi.n	d7316 <_ZN7Ubidots10getContextEPc11IotProtocol+0x5e>
    sprintf(context_result, "");
   d72c6:	492b      	ldr	r1, [pc, #172]	; (d7374 <_ZN7Ubidots10getContextEPc11IotProtocol+0xbc>)
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s%s=%s", context_result, (_context + i)->key_label, (_context + i)->key_value);
   d72c8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d7378 <_ZN7Ubidots10getContextEPc11IotProtocol+0xc0>
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s$", context_result);
   d72cc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d737c <_ZN7Ubidots10getContextEPc11IotProtocol+0xc4>
    sprintf(context_result, "");
   d72d0:	4620      	mov	r0, r4
   d72d2:	f004 fe3c 	bl	dbf4e <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   d72d6:	2600      	movs	r6, #0
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d72d8:	4637      	mov	r7, r6
    for (uint8_t i = 0; i < _current_context;) {
   d72da:	f995 3009 	ldrsb.w	r3, [r5, #9]
   d72de:	429e      	cmp	r6, r3
   d72e0:	da44      	bge.n	d736c <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
      sprintf(context_result, "%s%s=%s", context_result, (_context + i)->key_label, (_context + i)->key_value);
   d72e2:	686b      	ldr	r3, [r5, #4]
   d72e4:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
   d72e8:	4641      	mov	r1, r8
   d72ea:	6852      	ldr	r2, [r2, #4]
   d72ec:	9200      	str	r2, [sp, #0]
   d72ee:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   d72f2:	4622      	mov	r2, r4
   d72f4:	4620      	mov	r0, r4
   d72f6:	f000 fb69 	bl	d79cc <sprintf>
      i++;
   d72fa:	3601      	adds	r6, #1
      if (i < _current_context) {
   d72fc:	f995 3009 	ldrsb.w	r3, [r5, #9]
      i++;
   d7300:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   d7302:	429e      	cmp	r6, r3
   d7304:	da05      	bge.n	d7312 <_ZN7Ubidots10getContextEPc11IotProtocol+0x5a>
        sprintf(context_result, "%s$", context_result);
   d7306:	4622      	mov	r2, r4
   d7308:	4649      	mov	r1, r9
   d730a:	4620      	mov	r0, r4
   d730c:	f000 fb5e 	bl	d79cc <sprintf>
   d7310:	e7e3      	b.n	d72da <_ZN7Ubidots10getContextEPc11IotProtocol+0x22>
        _current_context = 0;
   d7312:	726f      	strb	r7, [r5, #9]
   d7314:	e7e1      	b.n	d72da <_ZN7Ubidots10getContextEPc11IotProtocol+0x22>
      }
    }
  }

  // HTTP context type
  if (iotProtocol == UBI_PARTICLE || iotProtocol == UBI_HTTP) {
   d7316:	2a03      	cmp	r2, #3
   d7318:	d000      	beq.n	d731c <_ZN7Ubidots10getContextEPc11IotProtocol+0x64>
   d731a:	bb3a      	cbnz	r2, d736c <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
    sprintf(context_result, "");
   d731c:	4915      	ldr	r1, [pc, #84]	; (d7374 <_ZN7Ubidots10getContextEPc11IotProtocol+0xbc>)
    for (uint8_t i = 0; i < _current_context;) {
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result, (_context + i)->key_label, (_context + i)->key_value);
   d731e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7380 <_ZN7Ubidots10getContextEPc11IotProtocol+0xc8>
      i++;
      if (i < _current_context) {
        sprintf(context_result, "%s,", context_result);
   d7322:	f8df 9060 	ldr.w	r9, [pc, #96]	; d7384 <_ZN7Ubidots10getContextEPc11IotProtocol+0xcc>
    sprintf(context_result, "");
   d7326:	4620      	mov	r0, r4
   d7328:	f004 fe11 	bl	dbf4e <strcpy>
    for (uint8_t i = 0; i < _current_context;) {
   d732c:	2600      	movs	r6, #0
      } else {
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
   d732e:	4637      	mov	r7, r6
    for (uint8_t i = 0; i < _current_context;) {
   d7330:	f995 3009 	ldrsb.w	r3, [r5, #9]
   d7334:	429e      	cmp	r6, r3
   d7336:	da19      	bge.n	d736c <_ZN7Ubidots10getContextEPc11IotProtocol+0xb4>
      sprintf(context_result, "%s\"%s\":\"%s\"", context_result, (_context + i)->key_label, (_context + i)->key_value);
   d7338:	686b      	ldr	r3, [r5, #4]
   d733a:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
   d733e:	4641      	mov	r1, r8
   d7340:	6852      	ldr	r2, [r2, #4]
   d7342:	9200      	str	r2, [sp, #0]
   d7344:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   d7348:	4622      	mov	r2, r4
   d734a:	4620      	mov	r0, r4
   d734c:	f000 fb3e 	bl	d79cc <sprintf>
      i++;
   d7350:	3601      	adds	r6, #1
      if (i < _current_context) {
   d7352:	f995 3009 	ldrsb.w	r3, [r5, #9]
      i++;
   d7356:	b2f6      	uxtb	r6, r6
      if (i < _current_context) {
   d7358:	429e      	cmp	r6, r3
   d735a:	da05      	bge.n	d7368 <_ZN7Ubidots10getContextEPc11IotProtocol+0xb0>
        sprintf(context_result, "%s,", context_result);
   d735c:	4622      	mov	r2, r4
   d735e:	4649      	mov	r1, r9
   d7360:	4620      	mov	r0, r4
   d7362:	f000 fb33 	bl	d79cc <sprintf>
   d7366:	e7e3      	b.n	d7330 <_ZN7Ubidots10getContextEPc11IotProtocol+0x78>
        _current_context = 0;
   d7368:	726f      	strb	r7, [r5, #9]
   d736a:	e7e1      	b.n	d7330 <_ZN7Ubidots10getContextEPc11IotProtocol+0x78>
      }
    }
  }
}
   d736c:	b003      	add	sp, #12
   d736e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7372:	bf00      	nop
   d7374:	000de2af 	.word	0x000de2af
   d7378:	000de5b4 	.word	0x000de5b4
   d737c:	000de5bc 	.word	0x000de5bc
   d7380:	000de5c0 	.word	0x000de5c0
   d7384:	000de399 	.word	0x000de399

000d7388 <_ZN7Ubidots10getContextEPc>:
void Ubidots::getContext(char* context_result) { getContext(context_result, _iotProtocol); }
   d7388:	7a02      	ldrb	r2, [r0, #8]
   d738a:	f7ff bf95 	b.w	d72b8 <_ZN7Ubidots10getContextEPc11IotProtocol>
	...

000d7390 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7390:	b508      	push	{r3, lr}
   d7392:	4b02      	ldr	r3, [pc, #8]	; (d739c <cellular_signal+0xc>)
   d7394:	681b      	ldr	r3, [r3, #0]
   d7396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7398:	9301      	str	r3, [sp, #4]
   d739a:	bd08      	pop	{r3, pc}
   d739c:	00030274 	.word	0x00030274

000d73a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d73a0:	b508      	push	{r3, lr}
   d73a2:	4b02      	ldr	r3, [pc, #8]	; (d73ac <os_mutex_recursive_create+0xc>)
   d73a4:	681b      	ldr	r3, [r3, #0]
   d73a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73a8:	9301      	str	r3, [sp, #4]
   d73aa:	bd08      	pop	{r3, pc}
   d73ac:	00030248 	.word	0x00030248

000d73b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d73b0:	b508      	push	{r3, lr}
   d73b2:	4b02      	ldr	r3, [pc, #8]	; (d73bc <os_mutex_recursive_destroy+0xc>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d73b8:	9301      	str	r3, [sp, #4]
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	00030248 	.word	0x00030248

000d73c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d73c0:	b508      	push	{r3, lr}
   d73c2:	4b02      	ldr	r3, [pc, #8]	; (d73cc <os_mutex_recursive_lock+0xc>)
   d73c4:	681b      	ldr	r3, [r3, #0]
   d73c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d73c8:	9301      	str	r3, [sp, #4]
   d73ca:	bd08      	pop	{r3, pc}
   d73cc:	00030248 	.word	0x00030248

000d73d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d73d0:	b508      	push	{r3, lr}
   d73d2:	4b02      	ldr	r3, [pc, #8]	; (d73dc <os_mutex_recursive_unlock+0xc>)
   d73d4:	681b      	ldr	r3, [r3, #0]
   d73d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d73d8:	9301      	str	r3, [sp, #4]
   d73da:	bd08      	pop	{r3, pc}
   d73dc:	00030248 	.word	0x00030248

000d73e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d73e0:	b508      	push	{r3, lr}
   d73e2:	4b02      	ldr	r3, [pc, #8]	; (d73ec <HAL_RNG_GetRandomNumber+0xc>)
   d73e4:	681b      	ldr	r3, [r3, #0]
   d73e6:	685b      	ldr	r3, [r3, #4]
   d73e8:	9301      	str	r3, [sp, #4]
   d73ea:	bd08      	pop	{r3, pc}
   d73ec:	00030218 	.word	0x00030218

000d73f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d73f0:	b508      	push	{r3, lr}
   d73f2:	4b02      	ldr	r3, [pc, #8]	; (d73fc <HAL_Delay_Microseconds+0xc>)
   d73f4:	681b      	ldr	r3, [r3, #0]
   d73f6:	68db      	ldr	r3, [r3, #12]
   d73f8:	9301      	str	r3, [sp, #4]
   d73fa:	bd08      	pop	{r3, pc}
   d73fc:	00030218 	.word	0x00030218

000d7400 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7400:	b508      	push	{r3, lr}
   d7402:	4b02      	ldr	r3, [pc, #8]	; (d740c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7404:	681b      	ldr	r3, [r3, #0]
   d7406:	695b      	ldr	r3, [r3, #20]
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	bd08      	pop	{r3, pc}
   d740c:	00030218 	.word	0x00030218

000d7410 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7410:	b508      	push	{r3, lr}
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <HAL_Pin_Mode+0xc>)
   d7414:	681b      	ldr	r3, [r3, #0]
   d7416:	689b      	ldr	r3, [r3, #8]
   d7418:	9301      	str	r3, [sp, #4]
   d741a:	bd08      	pop	{r3, pc}
   d741c:	0003022c 	.word	0x0003022c

000d7420 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7420:	b508      	push	{r3, lr}
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <HAL_Get_Pin_Mode+0xc>)
   d7424:	681b      	ldr	r3, [r3, #0]
   d7426:	68db      	ldr	r3, [r3, #12]
   d7428:	9301      	str	r3, [sp, #4]
   d742a:	bd08      	pop	{r3, pc}
   d742c:	0003022c 	.word	0x0003022c

000d7430 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7430:	b508      	push	{r3, lr}
   d7432:	4b02      	ldr	r3, [pc, #8]	; (d743c <HAL_GPIO_Write+0xc>)
   d7434:	681b      	ldr	r3, [r3, #0]
   d7436:	691b      	ldr	r3, [r3, #16]
   d7438:	9301      	str	r3, [sp, #4]
   d743a:	bd08      	pop	{r3, pc}
   d743c:	0003022c 	.word	0x0003022c

000d7440 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7440:	b508      	push	{r3, lr}
   d7442:	4b02      	ldr	r3, [pc, #8]	; (d744c <HAL_GPIO_Read+0xc>)
   d7444:	681b      	ldr	r3, [r3, #0]
   d7446:	695b      	ldr	r3, [r3, #20]
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	bd08      	pop	{r3, pc}
   d744c:	0003022c 	.word	0x0003022c

000d7450 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7450:	b508      	push	{r3, lr}
   d7452:	4b02      	ldr	r3, [pc, #8]	; (d745c <hal_i2c_begin+0xc>)
   d7454:	681b      	ldr	r3, [r3, #0]
   d7456:	68db      	ldr	r3, [r3, #12]
   d7458:	9301      	str	r3, [sp, #4]
   d745a:	bd08      	pop	{r3, pc}
   d745c:	00030228 	.word	0x00030228

000d7460 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7460:	b508      	push	{r3, lr}
   d7462:	4b02      	ldr	r3, [pc, #8]	; (d746c <hal_i2c_begin_transmission+0xc>)
   d7464:	681b      	ldr	r3, [r3, #0]
   d7466:	699b      	ldr	r3, [r3, #24]
   d7468:	9301      	str	r3, [sp, #4]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	00030228 	.word	0x00030228

000d7470 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b02      	ldr	r3, [pc, #8]	; (d747c <hal_i2c_end_transmission+0xc>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	69db      	ldr	r3, [r3, #28]
   d7478:	9301      	str	r3, [sp, #4]
   d747a:	bd08      	pop	{r3, pc}
   d747c:	00030228 	.word	0x00030228

000d7480 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7480:	b508      	push	{r3, lr}
   d7482:	4b02      	ldr	r3, [pc, #8]	; (d748c <hal_i2c_write+0xc>)
   d7484:	681b      	ldr	r3, [r3, #0]
   d7486:	6a1b      	ldr	r3, [r3, #32]
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	bd08      	pop	{r3, pc}
   d748c:	00030228 	.word	0x00030228

000d7490 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7490:	b508      	push	{r3, lr}
   d7492:	4b02      	ldr	r3, [pc, #8]	; (d749c <hal_i2c_available+0xc>)
   d7494:	681b      	ldr	r3, [r3, #0]
   d7496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7498:	9301      	str	r3, [sp, #4]
   d749a:	bd08      	pop	{r3, pc}
   d749c:	00030228 	.word	0x00030228

000d74a0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d74a0:	b508      	push	{r3, lr}
   d74a2:	4b02      	ldr	r3, [pc, #8]	; (d74ac <hal_i2c_read+0xc>)
   d74a4:	681b      	ldr	r3, [r3, #0]
   d74a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d74a8:	9301      	str	r3, [sp, #4]
   d74aa:	bd08      	pop	{r3, pc}
   d74ac:	00030228 	.word	0x00030228

000d74b0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d74b0:	b508      	push	{r3, lr}
   d74b2:	4b02      	ldr	r3, [pc, #8]	; (d74bc <hal_i2c_peek+0xc>)
   d74b4:	681b      	ldr	r3, [r3, #0]
   d74b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74b8:	9301      	str	r3, [sp, #4]
   d74ba:	bd08      	pop	{r3, pc}
   d74bc:	00030228 	.word	0x00030228

000d74c0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b02      	ldr	r3, [pc, #8]	; (d74cc <hal_i2c_flush+0xc>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d74c8:	9301      	str	r3, [sp, #4]
   d74ca:	bd08      	pop	{r3, pc}
   d74cc:	00030228 	.word	0x00030228

000d74d0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d74d0:	b508      	push	{r3, lr}
   d74d2:	4b02      	ldr	r3, [pc, #8]	; (d74dc <hal_i2c_is_enabled+0xc>)
   d74d4:	681b      	ldr	r3, [r3, #0]
   d74d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d74d8:	9301      	str	r3, [sp, #4]
   d74da:	bd08      	pop	{r3, pc}
   d74dc:	00030228 	.word	0x00030228

000d74e0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d74e0:	b508      	push	{r3, lr}
   d74e2:	4b02      	ldr	r3, [pc, #8]	; (d74ec <hal_i2c_init+0xc>)
   d74e4:	681b      	ldr	r3, [r3, #0]
   d74e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d74e8:	9301      	str	r3, [sp, #4]
   d74ea:	bd08      	pop	{r3, pc}
   d74ec:	00030228 	.word	0x00030228

000d74f0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <hal_i2c_lock+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	00030228 	.word	0x00030228

000d7500 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <hal_i2c_unlock+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	00030228 	.word	0x00030228

000d7510 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <hal_i2c_request_ex+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	00030228 	.word	0x00030228

000d7520 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <if_index_to_name+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	695b      	ldr	r3, [r3, #20]
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	0003026c 	.word	0x0003026c

000d7530 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7530:	b508      	push	{r3, lr}
   d7532:	4b02      	ldr	r3, [pc, #8]	; (d753c <inet_inet_ntop+0xc>)
   d7534:	681b      	ldr	r3, [r3, #0]
   d7536:	695b      	ldr	r3, [r3, #20]
   d7538:	9301      	str	r3, [sp, #4]
   d753a:	bd08      	pop	{r3, pc}
   d753c:	00030264 	.word	0x00030264

000d7540 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7540:	b508      	push	{r3, lr}
   d7542:	4b02      	ldr	r3, [pc, #8]	; (d754c <inet_htonl+0xc>)
   d7544:	681b      	ldr	r3, [r3, #0]
   d7546:	6a1b      	ldr	r3, [r3, #32]
   d7548:	9301      	str	r3, [sp, #4]
   d754a:	bd08      	pop	{r3, pc}
   d754c:	00030264 	.word	0x00030264

000d7550 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d7550:	b508      	push	{r3, lr}
   d7552:	4b02      	ldr	r3, [pc, #8]	; (d755c <inet_ntohs+0xc>)
   d7554:	681b      	ldr	r3, [r3, #0]
   d7556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7558:	9301      	str	r3, [sp, #4]
   d755a:	bd08      	pop	{r3, pc}
   d755c:	00030264 	.word	0x00030264

000d7560 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b02      	ldr	r3, [pc, #8]	; (d756c <inet_htons+0xc>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7568:	9301      	str	r3, [sp, #4]
   d756a:	bd08      	pop	{r3, pc}
   d756c:	00030264 	.word	0x00030264

000d7570 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7570:	b508      	push	{r3, lr}
   d7572:	4b02      	ldr	r3, [pc, #8]	; (d757c <netdb_freeaddrinfo+0xc>)
   d7574:	681b      	ldr	r3, [r3, #0]
   d7576:	689b      	ldr	r3, [r3, #8]
   d7578:	9301      	str	r3, [sp, #4]
   d757a:	bd08      	pop	{r3, pc}
   d757c:	00030268 	.word	0x00030268

000d7580 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7580:	b508      	push	{r3, lr}
   d7582:	4b02      	ldr	r3, [pc, #8]	; (d758c <netdb_getaddrinfo+0xc>)
   d7584:	681b      	ldr	r3, [r3, #0]
   d7586:	68db      	ldr	r3, [r3, #12]
   d7588:	9301      	str	r3, [sp, #4]
   d758a:	bd08      	pop	{r3, pc}
   d758c:	00030268 	.word	0x00030268

000d7590 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d7590:	b508      	push	{r3, lr}
   d7592:	4b02      	ldr	r3, [pc, #8]	; (d759c <sock_bind+0xc>)
   d7594:	681b      	ldr	r3, [r3, #0]
   d7596:	685b      	ldr	r3, [r3, #4]
   d7598:	9301      	str	r3, [sp, #4]
   d759a:	bd08      	pop	{r3, pc}
   d759c:	00030238 	.word	0x00030238

000d75a0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d75a0:	b508      	push	{r3, lr}
   d75a2:	4b02      	ldr	r3, [pc, #8]	; (d75ac <sock_setsockopt+0xc>)
   d75a4:	681b      	ldr	r3, [r3, #0]
   d75a6:	699b      	ldr	r3, [r3, #24]
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	00030238 	.word	0x00030238

000d75b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d75b0:	b508      	push	{r3, lr}
   d75b2:	4b02      	ldr	r3, [pc, #8]	; (d75bc <sock_close+0xc>)
   d75b4:	681b      	ldr	r3, [r3, #0]
   d75b6:	69db      	ldr	r3, [r3, #28]
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	00030238 	.word	0x00030238

000d75c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d75c0:	b508      	push	{r3, lr}
   d75c2:	4b02      	ldr	r3, [pc, #8]	; (d75cc <sock_connect+0xc>)
   d75c4:	681b      	ldr	r3, [r3, #0]
   d75c6:	6a1b      	ldr	r3, [r3, #32]
   d75c8:	9301      	str	r3, [sp, #4]
   d75ca:	bd08      	pop	{r3, pc}
   d75cc:	00030238 	.word	0x00030238

000d75d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <sock_recv+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	00030238 	.word	0x00030238

000d75e0 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <sock_recvfrom+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	00030238 	.word	0x00030238

000d75f0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <sock_send+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	00030238 	.word	0x00030238

000d7600 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <sock_sendto+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	00030238 	.word	0x00030238

000d7610 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <sock_socket+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	00030238 	.word	0x00030238

000d7620 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <hal_spi_begin+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	681b      	ldr	r3, [r3, #0]
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	00030230 	.word	0x00030230

000d7630 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <hal_spi_transfer+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	695b      	ldr	r3, [r3, #20]
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	00030230 	.word	0x00030230

000d7640 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <hal_spi_init+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	69db      	ldr	r3, [r3, #28]
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	00030230 	.word	0x00030230

000d7650 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <hal_spi_is_enabled+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	6a1b      	ldr	r3, [r3, #32]
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	00030230 	.word	0x00030230

000d7660 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b02      	ldr	r3, [pc, #8]	; (d766c <hal_spi_info+0xc>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7668:	9301      	str	r3, [sp, #4]
   d766a:	bd08      	pop	{r3, pc}
   d766c:	00030230 	.word	0x00030230

000d7670 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7670:	b508      	push	{r3, lr}
   d7672:	4b02      	ldr	r3, [pc, #8]	; (d767c <hal_spi_set_settings+0xc>)
   d7674:	681b      	ldr	r3, [r3, #0]
   d7676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7678:	9301      	str	r3, [sp, #4]
   d767a:	bd08      	pop	{r3, pc}
   d767c:	00030230 	.word	0x00030230

000d7680 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7680:	b508      	push	{r3, lr}
   d7682:	4b02      	ldr	r3, [pc, #8]	; (d768c <hal_spi_acquire+0xc>)
   d7684:	681b      	ldr	r3, [r3, #0]
   d7686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	bd08      	pop	{r3, pc}
   d768c:	00030230 	.word	0x00030230

000d7690 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7690:	b508      	push	{r3, lr}
   d7692:	4b02      	ldr	r3, [pc, #8]	; (d769c <hal_spi_release+0xc>)
   d7694:	681b      	ldr	r3, [r3, #0]
   d7696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7698:	9301      	str	r3, [sp, #4]
   d769a:	bd08      	pop	{r3, pc}
   d769c:	00030230 	.word	0x00030230

000d76a0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d76a0:	b508      	push	{r3, lr}
   d76a2:	4b02      	ldr	r3, [pc, #8]	; (d76ac <hal_usart_init+0xc>)
   d76a4:	681b      	ldr	r3, [r3, #0]
   d76a6:	681b      	ldr	r3, [r3, #0]
   d76a8:	9301      	str	r3, [sp, #4]
   d76aa:	bd08      	pop	{r3, pc}
   d76ac:	0003023c 	.word	0x0003023c

000d76b0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <hal_usart_end+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	689b      	ldr	r3, [r3, #8]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	0003023c 	.word	0x0003023c

000d76c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <hal_usart_write+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	68db      	ldr	r3, [r3, #12]
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	0003023c 	.word	0x0003023c

000d76d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <hal_usart_available+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	691b      	ldr	r3, [r3, #16]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	0003023c 	.word	0x0003023c

000d76e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <hal_usart_read+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	695b      	ldr	r3, [r3, #20]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	0003023c 	.word	0x0003023c

000d76f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <hal_usart_peek+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	699b      	ldr	r3, [r3, #24]
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	0003023c 	.word	0x0003023c

000d7700 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <hal_usart_flush+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	69db      	ldr	r3, [r3, #28]
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	0003023c 	.word	0x0003023c

000d7710 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <hal_usart_is_enabled+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	6a1b      	ldr	r3, [r3, #32]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	0003023c 	.word	0x0003023c

000d7720 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <hal_usart_available_data_for_write+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	0003023c 	.word	0x0003023c

000d7730 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <hal_usart_begin_config+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	0003023c 	.word	0x0003023c

000d7740 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <HAL_USB_USART_Init+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	681b      	ldr	r3, [r3, #0]
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	0003024c 	.word	0x0003024c

000d7750 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <HAL_USB_USART_Begin+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	685b      	ldr	r3, [r3, #4]
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	0003024c 	.word	0x0003024c

000d7760 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <HAL_USB_USART_End+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	689b      	ldr	r3, [r3, #8]
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	0003024c 	.word	0x0003024c

000d7770 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <HAL_USB_USART_Available_Data+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	691b      	ldr	r3, [r3, #16]
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	0003024c 	.word	0x0003024c

000d7780 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	695b      	ldr	r3, [r3, #20]
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	0003024c 	.word	0x0003024c

000d7790 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <HAL_USB_USART_Receive_Data+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	699b      	ldr	r3, [r3, #24]
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	0003024c 	.word	0x0003024c

000d77a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <HAL_USB_USART_Send_Data+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	69db      	ldr	r3, [r3, #28]
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	0003024c 	.word	0x0003024c

000d77b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <HAL_USB_USART_Flush_Data+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	6a1b      	ldr	r3, [r3, #32]
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	0003024c 	.word	0x0003024c

000d77c0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <panic_+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	00030260 	.word	0x00030260

000d77d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <log_message+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	00030260 	.word	0x00030260

000d77e0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <log_level_name+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	00030260 	.word	0x00030260

000d77f0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <log_set_callbacks+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	00030260 	.word	0x00030260

000d7800 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b03      	ldr	r3, [pc, #12]	; (d7810 <diag_get_source+0x10>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d780a:	9301      	str	r3, [sp, #4]
   d780c:	bd08      	pop	{r3, pc}
   d780e:	0000      	.short	0x0000
   d7810:	00030260 	.word	0x00030260

000d7814 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7814:	b508      	push	{r3, lr}
   d7816:	4b02      	ldr	r3, [pc, #8]	; (d7820 <set_system_mode+0xc>)
   d7818:	681b      	ldr	r3, [r3, #0]
   d781a:	685b      	ldr	r3, [r3, #4]
   d781c:	9301      	str	r3, [sp, #4]
   d781e:	bd08      	pop	{r3, pc}
   d7820:	00030220 	.word	0x00030220

000d7824 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7824:	b508      	push	{r3, lr}
   d7826:	4b02      	ldr	r3, [pc, #8]	; (d7830 <system_delay_ms+0xc>)
   d7828:	681b      	ldr	r3, [r3, #0]
   d782a:	695b      	ldr	r3, [r3, #20]
   d782c:	9301      	str	r3, [sp, #4]
   d782e:	bd08      	pop	{r3, pc}
   d7830:	00030220 	.word	0x00030220

000d7834 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7834:	b508      	push	{r3, lr}
   d7836:	4b02      	ldr	r3, [pc, #8]	; (d7840 <application_thread_current+0xc>)
   d7838:	681b      	ldr	r3, [r3, #0]
   d783a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d783c:	9301      	str	r3, [sp, #4]
   d783e:	bd08      	pop	{r3, pc}
   d7840:	00030220 	.word	0x00030220

000d7844 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7844:	b508      	push	{r3, lr}
   d7846:	4b02      	ldr	r3, [pc, #8]	; (d7850 <application_thread_invoke+0xc>)
   d7848:	681b      	ldr	r3, [r3, #0]
   d784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d784c:	9301      	str	r3, [sp, #4]
   d784e:	bd08      	pop	{r3, pc}
   d7850:	00030220 	.word	0x00030220

000d7854 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7854:	b508      	push	{r3, lr}
   d7856:	4b03      	ldr	r3, [pc, #12]	; (d7864 <system_ctrl_set_app_request_handler+0x10>)
   d7858:	681b      	ldr	r3, [r3, #0]
   d785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d785e:	9301      	str	r3, [sp, #4]
   d7860:	bd08      	pop	{r3, pc}
   d7862:	0000      	.short	0x0000
   d7864:	00030220 	.word	0x00030220

000d7868 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7868:	b508      	push	{r3, lr}
   d786a:	4b03      	ldr	r3, [pc, #12]	; (d7878 <system_ctrl_set_result+0x10>)
   d786c:	681b      	ldr	r3, [r3, #0]
   d786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7872:	9301      	str	r3, [sp, #4]
   d7874:	bd08      	pop	{r3, pc}
   d7876:	0000      	.short	0x0000
   d7878:	00030220 	.word	0x00030220

000d787c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d787c:	b508      	push	{r3, lr}
   d787e:	4b02      	ldr	r3, [pc, #8]	; (d7888 <spark_variable+0xc>)
   d7880:	681b      	ldr	r3, [r3, #0]
   d7882:	681b      	ldr	r3, [r3, #0]
   d7884:	9301      	str	r3, [sp, #4]
   d7886:	bd08      	pop	{r3, pc}
   d7888:	00030244 	.word	0x00030244

000d788c <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d788c:	b508      	push	{r3, lr}
   d788e:	4b02      	ldr	r3, [pc, #8]	; (d7898 <spark_process+0xc>)
   d7890:	681b      	ldr	r3, [r3, #0]
   d7892:	689b      	ldr	r3, [r3, #8]
   d7894:	9301      	str	r3, [sp, #4]
   d7896:	bd08      	pop	{r3, pc}
   d7898:	00030244 	.word	0x00030244

000d789c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d789c:	b508      	push	{r3, lr}
   d789e:	4b02      	ldr	r3, [pc, #8]	; (d78a8 <spark_cloud_flag_connected+0xc>)
   d78a0:	681b      	ldr	r3, [r3, #0]
   d78a2:	695b      	ldr	r3, [r3, #20]
   d78a4:	9301      	str	r3, [sp, #4]
   d78a6:	bd08      	pop	{r3, pc}
   d78a8:	00030244 	.word	0x00030244

000d78ac <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d78ac:	b508      	push	{r3, lr}
   d78ae:	4b02      	ldr	r3, [pc, #8]	; (d78b8 <spark_deviceID+0xc>)
   d78b0:	681b      	ldr	r3, [r3, #0]
   d78b2:	69db      	ldr	r3, [r3, #28]
   d78b4:	9301      	str	r3, [sp, #4]
   d78b6:	bd08      	pop	{r3, pc}
   d78b8:	00030244 	.word	0x00030244

000d78bc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d78bc:	b508      	push	{r3, lr}
   d78be:	4b02      	ldr	r3, [pc, #8]	; (d78c8 <spark_send_event+0xc>)
   d78c0:	681b      	ldr	r3, [r3, #0]
   d78c2:	6a1b      	ldr	r3, [r3, #32]
   d78c4:	9301      	str	r3, [sp, #4]
   d78c6:	bd08      	pop	{r3, pc}
   d78c8:	00030244 	.word	0x00030244

000d78cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d78cc:	b508      	push	{r3, lr}
   d78ce:	4b02      	ldr	r3, [pc, #8]	; (d78d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d78d0:	681b      	ldr	r3, [r3, #0]
   d78d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d78d4:	9301      	str	r3, [sp, #4]
   d78d6:	bd08      	pop	{r3, pc}
   d78d8:	00030244 	.word	0x00030244

000d78dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d78dc:	b508      	push	{r3, lr}
   d78de:	4b02      	ldr	r3, [pc, #8]	; (d78e8 <network_connect+0xc>)
   d78e0:	681b      	ldr	r3, [r3, #0]
   d78e2:	685b      	ldr	r3, [r3, #4]
   d78e4:	9301      	str	r3, [sp, #4]
   d78e6:	bd08      	pop	{r3, pc}
   d78e8:	00030240 	.word	0x00030240

000d78ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d78ec:	b508      	push	{r3, lr}
   d78ee:	4b02      	ldr	r3, [pc, #8]	; (d78f8 <network_connecting+0xc>)
   d78f0:	681b      	ldr	r3, [r3, #0]
   d78f2:	689b      	ldr	r3, [r3, #8]
   d78f4:	9301      	str	r3, [sp, #4]
   d78f6:	bd08      	pop	{r3, pc}
   d78f8:	00030240 	.word	0x00030240

000d78fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d78fc:	b508      	push	{r3, lr}
   d78fe:	4b02      	ldr	r3, [pc, #8]	; (d7908 <network_disconnect+0xc>)
   d7900:	681b      	ldr	r3, [r3, #0]
   d7902:	68db      	ldr	r3, [r3, #12]
   d7904:	9301      	str	r3, [sp, #4]
   d7906:	bd08      	pop	{r3, pc}
   d7908:	00030240 	.word	0x00030240

000d790c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d790c:	b508      	push	{r3, lr}
   d790e:	4b02      	ldr	r3, [pc, #8]	; (d7918 <network_ready+0xc>)
   d7910:	681b      	ldr	r3, [r3, #0]
   d7912:	691b      	ldr	r3, [r3, #16]
   d7914:	9301      	str	r3, [sp, #4]
   d7916:	bd08      	pop	{r3, pc}
   d7918:	00030240 	.word	0x00030240

000d791c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d791c:	b508      	push	{r3, lr}
   d791e:	4b02      	ldr	r3, [pc, #8]	; (d7928 <network_on+0xc>)
   d7920:	681b      	ldr	r3, [r3, #0]
   d7922:	695b      	ldr	r3, [r3, #20]
   d7924:	9301      	str	r3, [sp, #4]
   d7926:	bd08      	pop	{r3, pc}
   d7928:	00030240 	.word	0x00030240

000d792c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d792c:	b508      	push	{r3, lr}
   d792e:	4b02      	ldr	r3, [pc, #8]	; (d7938 <network_off+0xc>)
   d7930:	681b      	ldr	r3, [r3, #0]
   d7932:	699b      	ldr	r3, [r3, #24]
   d7934:	9301      	str	r3, [sp, #4]
   d7936:	bd08      	pop	{r3, pc}
   d7938:	00030240 	.word	0x00030240

000d793c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d793c:	b508      	push	{r3, lr}
   d793e:	4b02      	ldr	r3, [pc, #8]	; (d7948 <network_listen+0xc>)
   d7940:	681b      	ldr	r3, [r3, #0]
   d7942:	69db      	ldr	r3, [r3, #28]
   d7944:	9301      	str	r3, [sp, #4]
   d7946:	bd08      	pop	{r3, pc}
   d7948:	00030240 	.word	0x00030240

000d794c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d794c:	b508      	push	{r3, lr}
   d794e:	4b02      	ldr	r3, [pc, #8]	; (d7958 <network_listening+0xc>)
   d7950:	681b      	ldr	r3, [r3, #0]
   d7952:	6a1b      	ldr	r3, [r3, #32]
   d7954:	9301      	str	r3, [sp, #4]
   d7956:	bd08      	pop	{r3, pc}
   d7958:	00030240 	.word	0x00030240

000d795c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d795c:	b508      	push	{r3, lr}
   d795e:	4b02      	ldr	r3, [pc, #8]	; (d7968 <network_set_listen_timeout+0xc>)
   d7960:	681b      	ldr	r3, [r3, #0]
   d7962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7964:	9301      	str	r3, [sp, #4]
   d7966:	bd08      	pop	{r3, pc}
   d7968:	00030240 	.word	0x00030240

000d796c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d796c:	b508      	push	{r3, lr}
   d796e:	4b02      	ldr	r3, [pc, #8]	; (d7978 <network_get_listen_timeout+0xc>)
   d7970:	681b      	ldr	r3, [r3, #0]
   d7972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7974:	9301      	str	r3, [sp, #4]
   d7976:	bd08      	pop	{r3, pc}
   d7978:	00030240 	.word	0x00030240

000d797c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d797c:	b508      	push	{r3, lr}
   d797e:	4b02      	ldr	r3, [pc, #8]	; (d7988 <network_is_on+0xc>)
   d7980:	681b      	ldr	r3, [r3, #0]
   d7982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7984:	9301      	str	r3, [sp, #4]
   d7986:	bd08      	pop	{r3, pc}
   d7988:	00030240 	.word	0x00030240

000d798c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d798c:	b508      	push	{r3, lr}
   d798e:	4b02      	ldr	r3, [pc, #8]	; (d7998 <network_is_off+0xc>)
   d7990:	681b      	ldr	r3, [r3, #0]
   d7992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7994:	9301      	str	r3, [sp, #4]
   d7996:	bd08      	pop	{r3, pc}
   d7998:	00030240 	.word	0x00030240

000d799c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b02      	ldr	r3, [pc, #8]	; (d79a8 <malloc+0xc>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	681b      	ldr	r3, [r3, #0]
   d79a4:	9301      	str	r3, [sp, #4]
   d79a6:	bd08      	pop	{r3, pc}
   d79a8:	0003021c 	.word	0x0003021c

000d79ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d79ac:	b508      	push	{r3, lr}
   d79ae:	4b02      	ldr	r3, [pc, #8]	; (d79b8 <free+0xc>)
   d79b0:	681b      	ldr	r3, [r3, #0]
   d79b2:	685b      	ldr	r3, [r3, #4]
   d79b4:	9301      	str	r3, [sp, #4]
   d79b6:	bd08      	pop	{r3, pc}
   d79b8:	0003021c 	.word	0x0003021c

000d79bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d79bc:	b508      	push	{r3, lr}
   d79be:	4b02      	ldr	r3, [pc, #8]	; (d79c8 <realloc+0xc>)
   d79c0:	681b      	ldr	r3, [r3, #0]
   d79c2:	689b      	ldr	r3, [r3, #8]
   d79c4:	9301      	str	r3, [sp, #4]
   d79c6:	bd08      	pop	{r3, pc}
   d79c8:	0003021c 	.word	0x0003021c

000d79cc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d79cc:	b508      	push	{r3, lr}
   d79ce:	4b02      	ldr	r3, [pc, #8]	; (d79d8 <sprintf+0xc>)
   d79d0:	681b      	ldr	r3, [r3, #0]
   d79d2:	68db      	ldr	r3, [r3, #12]
   d79d4:	9301      	str	r3, [sp, #4]
   d79d6:	bd08      	pop	{r3, pc}
   d79d8:	0003021c 	.word	0x0003021c

000d79dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d79dc:	b508      	push	{r3, lr}
   d79de:	4b02      	ldr	r3, [pc, #8]	; (d79e8 <vsnprintf+0xc>)
   d79e0:	681b      	ldr	r3, [r3, #0]
   d79e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d79e4:	9301      	str	r3, [sp, #4]
   d79e6:	bd08      	pop	{r3, pc}
   d79e8:	0003021c 	.word	0x0003021c

000d79ec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d79ec:	b508      	push	{r3, lr}
   d79ee:	4b02      	ldr	r3, [pc, #8]	; (d79f8 <abort+0xc>)
   d79f0:	681b      	ldr	r3, [r3, #0]
   d79f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79f4:	9301      	str	r3, [sp, #4]
   d79f6:	bd08      	pop	{r3, pc}
   d79f8:	0003021c 	.word	0x0003021c

000d79fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d79fc:	b508      	push	{r3, lr}
   d79fe:	4b02      	ldr	r3, [pc, #8]	; (d7a08 <_malloc_r+0xc>)
   d7a00:	681b      	ldr	r3, [r3, #0]
   d7a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a04:	9301      	str	r3, [sp, #4]
   d7a06:	bd08      	pop	{r3, pc}
   d7a08:	0003021c 	.word	0x0003021c

000d7a0c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7a0c:	b508      	push	{r3, lr}
   d7a0e:	4b02      	ldr	r3, [pc, #8]	; (d7a18 <__errno+0xc>)
   d7a10:	681b      	ldr	r3, [r3, #0]
   d7a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7a14:	9301      	str	r3, [sp, #4]
   d7a16:	bd08      	pop	{r3, pc}
   d7a18:	0003021c 	.word	0x0003021c

000d7a1c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7a1c:	b508      	push	{r3, lr}
   d7a1e:	4b02      	ldr	r3, [pc, #8]	; (d7a28 <newlib_impure_ptr_callback+0xc>)
   d7a20:	681b      	ldr	r3, [r3, #0]
   d7a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a24:	9301      	str	r3, [sp, #4]
   d7a26:	bd08      	pop	{r3, pc}
   d7a28:	0003021c 	.word	0x0003021c

000d7a2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7a2c:	2100      	movs	r1, #0
   d7a2e:	f7ff bef9 	b.w	d7824 <system_delay_ms>

000d7a32 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7a32:	b510      	push	{r4, lr}
      if (_M_empty())
   d7a34:	6883      	ldr	r3, [r0, #8]
   d7a36:	4604      	mov	r4, r0
   d7a38:	b90b      	cbnz	r3, d7a3e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7a3a:	f003 fbd9 	bl	db1f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a3e:	68c3      	ldr	r3, [r0, #12]
   d7a40:	4798      	blx	r3
      if (_M_manager)
   d7a42:	68a3      	ldr	r3, [r4, #8]
   d7a44:	b11b      	cbz	r3, d7a4e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7a46:	2203      	movs	r2, #3
   d7a48:	4621      	mov	r1, r4
   d7a4a:	4620      	mov	r0, r4
   d7a4c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7a4e:	4620      	mov	r0, r4
   d7a50:	2110      	movs	r1, #16
}
   d7a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7a56:	f003 bb13 	b.w	db080 <_ZdlPvj>

000d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7a5a:	680b      	ldr	r3, [r1, #0]
   d7a5c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7a5e:	b113      	cbz	r3, d7a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7a60:	685a      	ldr	r2, [r3, #4]
   d7a62:	3201      	adds	r2, #1
   d7a64:	605a      	str	r2, [r3, #4]
      }
   d7a66:	4770      	bx	lr

000d7a68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7a68:	4802      	ldr	r0, [pc, #8]	; (d7a74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7a6a:	2300      	movs	r3, #0
   d7a6c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7a6e:	f7ff bc97 	b.w	d73a0 <os_mutex_recursive_create>
   d7a72:	bf00      	nop
   d7a74:	2003e540 	.word	0x2003e540

000d7a78 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7a78:	2200      	movs	r2, #0
   d7a7a:	6840      	ldr	r0, [r0, #4]
   d7a7c:	4611      	mov	r1, r2
   d7a7e:	f7ff bf45 	b.w	d790c <network_ready>

000d7a82 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7a82:	2200      	movs	r2, #0
   d7a84:	6840      	ldr	r0, [r0, #4]
   d7a86:	4611      	mov	r1, r2
   d7a88:	f7ff bf60 	b.w	d794c <network_listening>

000d7a8c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	6840      	ldr	r0, [r0, #4]
   d7a90:	4611      	mov	r1, r2
   d7a92:	f7ff bf6b 	b.w	d796c <network_get_listen_timeout>

000d7a96 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7a96:	6840      	ldr	r0, [r0, #4]
   d7a98:	2200      	movs	r2, #0
   d7a9a:	f7ff bf5f 	b.w	d795c <network_set_listen_timeout>

000d7a9e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a9e:	6840      	ldr	r0, [r0, #4]
   d7aa0:	2200      	movs	r2, #0
   d7aa2:	f081 0101 	eor.w	r1, r1, #1
   d7aa6:	f7ff bf49 	b.w	d793c <network_listen>

000d7aaa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7aaa:	2300      	movs	r3, #0
   d7aac:	6840      	ldr	r0, [r0, #4]
   d7aae:	461a      	mov	r2, r3
   d7ab0:	4619      	mov	r1, r3
   d7ab2:	f7ff bf3b 	b.w	d792c <network_off>

000d7ab6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7ab6:	2300      	movs	r3, #0
   d7ab8:	6840      	ldr	r0, [r0, #4]
   d7aba:	461a      	mov	r2, r3
   d7abc:	4619      	mov	r1, r3
   d7abe:	f7ff bf2d 	b.w	d791c <network_on>

000d7ac2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7ac2:	2200      	movs	r2, #0
   d7ac4:	6840      	ldr	r0, [r0, #4]
   d7ac6:	4611      	mov	r1, r2
   d7ac8:	f7ff bf10 	b.w	d78ec <network_connecting>

000d7acc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7acc:	6840      	ldr	r0, [r0, #4]
   d7ace:	2200      	movs	r2, #0
   d7ad0:	2102      	movs	r1, #2
   d7ad2:	f7ff bf13 	b.w	d78fc <network_disconnect>

000d7ad6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7ad6:	2300      	movs	r3, #0
   d7ad8:	6840      	ldr	r0, [r0, #4]
   d7ada:	461a      	mov	r2, r3
   d7adc:	f7ff befe 	b.w	d78dc <network_connect>

000d7ae0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7ae2:	4b1b      	ldr	r3, [pc, #108]	; (d7b50 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7ae4:	6003      	str	r3, [r0, #0]
   d7ae6:	2500      	movs	r5, #0
   d7ae8:	460f      	mov	r7, r1
   d7aea:	3330      	adds	r3, #48	; 0x30
   d7aec:	2618      	movs	r6, #24
   d7aee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7af2:	b089      	sub	sp, #36	; 0x24
   d7af4:	6043      	str	r3, [r0, #4]
   d7af6:	4632      	mov	r2, r6
   d7af8:	4629      	mov	r1, r5
   d7afa:	4604      	mov	r4, r0
   d7afc:	3010      	adds	r0, #16
   d7afe:	f004 f9d8 	bl	dbeb2 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7b02:	6878      	ldr	r0, [r7, #4]
   d7b04:	462a      	mov	r2, r5
   d7b06:	4629      	mov	r1, r5
   d7b08:	f7ff ff00 	bl	d790c <network_ready>
   d7b0c:	b918      	cbnz	r0, d7b16 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7b0e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7b10:	4620      	mov	r0, r4
   d7b12:	b009      	add	sp, #36	; 0x24
   d7b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d7b16:	4629      	mov	r1, r5
   d7b18:	4632      	mov	r2, r6
   d7b1a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7b1c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7b20:	f004 f9c7 	bl	dbeb2 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7b24:	a902      	add	r1, sp, #8
   d7b26:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d7b28:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7b2c:	f7ff fc30 	bl	d7390 <cellular_signal>
   d7b30:	b110      	cbz	r0, d7b38 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d7b32:	2301      	movs	r3, #1
   d7b34:	60a3      	str	r3, [r4, #8]
            return sig;
   d7b36:	e7eb      	b.n	d7b10 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d7b38:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7b3a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d7b3c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7b3e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7b40:	b90b      	cbnz	r3, d7b46 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d7b42:	2302      	movs	r3, #2
   d7b44:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d7b46:	a902      	add	r1, sp, #8
   d7b48:	4620      	mov	r0, r4
   d7b4a:	f000 f8c0 	bl	d7cce <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d7b4e:	e7df      	b.n	d7b10 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d7b50:	000de618 	.word	0x000de618

000d7b54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7b54:	4b08      	ldr	r3, [pc, #32]	; (d7b78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7b56:	b510      	push	{r4, lr}
   d7b58:	2428      	movs	r4, #40	; 0x28
   d7b5a:	4622      	mov	r2, r4
   d7b5c:	4618      	mov	r0, r3
   d7b5e:	2100      	movs	r1, #0
   d7b60:	f004 f9a7 	bl	dbeb2 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7b64:	4b05      	ldr	r3, [pc, #20]	; (d7b7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7b66:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7b6c:	6042      	str	r2, [r0, #4]
   d7b6e:	2204      	movs	r2, #4
   d7b70:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7b72:	4a03      	ldr	r2, [pc, #12]	; (d7b80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7b74:	601a      	str	r2, [r3, #0]
   d7b76:	bd10      	pop	{r4, pc}
   d7b78:	2003e54c 	.word	0x2003e54c
   d7b7c:	2003e544 	.word	0x2003e544
   d7b80:	000de5dc 	.word	0x000de5dc

000d7b84 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7b84:	4770      	bx	lr

000d7b86 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7b86:	7d00      	ldrb	r0, [r0, #20]
   d7b88:	4770      	bx	lr

000d7b8a <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d7b8a:	7d03      	ldrb	r3, [r0, #20]
   d7b8c:	b14b      	cbz	r3, d7ba2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d7b8e:	6983      	ldr	r3, [r0, #24]
   d7b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7b94:	d005      	beq.n	d7ba2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d7b96:	6a00      	ldr	r0, [r0, #32]
   d7b98:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d7b9c:	bf18      	it	ne
   d7b9e:	2001      	movne	r0, #1
   d7ba0:	4770      	bx	lr
   d7ba2:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d7ba4:	4770      	bx	lr

000d7ba6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d7ba6:	6803      	ldr	r3, [r0, #0]
   d7ba8:	6a1b      	ldr	r3, [r3, #32]
   d7baa:	4718      	bx	r3

000d7bac <_ZN14CellularSignalD0Ev>:
   d7bac:	b510      	push	{r4, lr}
   d7bae:	2128      	movs	r1, #40	; 0x28
   d7bb0:	4604      	mov	r4, r0
   d7bb2:	f003 fa65 	bl	db080 <_ZdlPvj>
   d7bb6:	4620      	mov	r0, r4
   d7bb8:	bd10      	pop	{r4, pc}
	...

000d7bbc <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7bbc:	7d03      	ldrb	r3, [r0, #20]
   d7bbe:	b17b      	cbz	r3, d7be0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7bc0:	69c3      	ldr	r3, [r0, #28]
   d7bc2:	2b00      	cmp	r3, #0
   d7bc4:	db0c      	blt.n	d7be0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7bc6:	ee07 3a90 	vmov	s15, r3
   d7bca:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7be8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7bd2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7bd6:	eddf 7a05 	vldr	s15, [pc, #20]	; d7bec <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7bda:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7bde:	4770      	bx	lr
    return -1.0f;
   d7be0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7be4:	4770      	bx	lr
   d7be6:	bf00      	nop
   d7be8:	477fff00 	.word	0x477fff00
   d7bec:	42c80000 	.word	0x42c80000

000d7bf0 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7bf0:	7d03      	ldrb	r3, [r0, #20]
   d7bf2:	b163      	cbz	r3, d7c0e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7bf4:	6983      	ldr	r3, [r0, #24]
   d7bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7bfa:	d008      	beq.n	d7c0e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7bfc:	ee07 3a90 	vmov	s15, r3
   d7c00:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7c14 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c08:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7c0c:	4770      	bx	lr
    return 0.0f;
   d7c0e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7c18 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7c12:	4770      	bx	lr
   d7c14:	42c80000 	.word	0x42c80000
   d7c18:	00000000 	.word	0x00000000

000d7c1c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7c1c:	7d03      	ldrb	r3, [r0, #20]
   d7c1e:	b17b      	cbz	r3, d7c40 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7c20:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7c22:	2b00      	cmp	r3, #0
   d7c24:	db0c      	blt.n	d7c40 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7c26:	ee07 3a90 	vmov	s15, r3
   d7c2a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7c48 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c32:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7c36:	eddf 7a05 	vldr	s15, [pc, #20]	; d7c4c <_ZNK14CellularSignal10getQualityEv+0x30>
   d7c3a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7c3e:	4770      	bx	lr
    return -1.0f;
   d7c40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7c44:	4770      	bx	lr
   d7c46:	bf00      	nop
   d7c48:	477fff00 	.word	0x477fff00
   d7c4c:	42c80000 	.word	0x42c80000

000d7c50 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7c50:	7d03      	ldrb	r3, [r0, #20]
   d7c52:	b163      	cbz	r3, d7c6e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7c54:	6a03      	ldr	r3, [r0, #32]
   d7c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7c5a:	d008      	beq.n	d7c6e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7c5c:	ee07 3a90 	vmov	s15, r3
   d7c60:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7c74 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c68:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7c6c:	4770      	bx	lr
    return 0.0f;
   d7c6e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7c78 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d7c72:	4770      	bx	lr
   d7c74:	42c80000 	.word	0x42c80000
   d7c78:	00000000 	.word	0x00000000

000d7c7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d7c7c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d7c7e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d7c80:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d7c82:	da0a      	bge.n	d7c9a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d7c84:	212d      	movs	r1, #45	; 0x2d
   d7c86:	f001 ff53 	bl	d9b30 <_ZN5Print5printEc>
            val = -n;
   d7c8a:	4261      	negs	r1, r4
            t = print('-');
   d7c8c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7c8e:	220a      	movs	r2, #10
   d7c90:	4630      	mov	r0, r6
   d7c92:	f001 ff66 	bl	d9b62 <_ZN5Print11printNumberEmh>
    }
}
   d7c96:	4428      	add	r0, r5
   d7c98:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d7c9a:	4621      	mov	r1, r4
        size_t t = 0;
   d7c9c:	2500      	movs	r5, #0
   d7c9e:	e7f6      	b.n	d7c8e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d7ca0 <_ZNK14CellularSignal7printToER5Print>:
{
   d7ca0:	b570      	push	{r4, r5, r6, lr}
   d7ca2:	460c      	mov	r4, r1
   d7ca4:	4605      	mov	r5, r0
   d7ca6:	6881      	ldr	r1, [r0, #8]
   d7ca8:	4620      	mov	r0, r4
   d7caa:	f7ff ffe7 	bl	d7c7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d7cae:	212c      	movs	r1, #44	; 0x2c
   d7cb0:	4606      	mov	r6, r0
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	f001 ff3c 	bl	d9b30 <_ZN5Print5printEc>
   d7cb8:	68e9      	ldr	r1, [r5, #12]
   d7cba:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	f7ff ffdd 	bl	d7c7c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d7cc2:	4430      	add	r0, r6
   d7cc4:	bd70      	pop	{r4, r5, r6, pc}

000d7cc6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7cc6:	f1a0 0004 	sub.w	r0, r0, #4
   d7cca:	f7ff bfe9 	b.w	d7ca0 <_ZNK14CellularSignal7printToER5Print>

000d7cce <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d7cce:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7cd0:	460d      	mov	r5, r1
   d7cd2:	f100 0410 	add.w	r4, r0, #16
   d7cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cda:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7cde:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d7ce2:	2001      	movs	r0, #1
   d7ce4:	bd30      	pop	{r4, r5, pc}

000d7ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7ce6:	4770      	bx	lr

000d7ce8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7ce8:	2000      	movs	r0, #0
   d7cea:	4770      	bx	lr

000d7cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7cec:	b510      	push	{r4, lr}
   d7cee:	2110      	movs	r1, #16
   d7cf0:	4604      	mov	r4, r0
   d7cf2:	f003 f9c5 	bl	db080 <_ZdlPvj>
   d7cf6:	4620      	mov	r0, r4
   d7cf8:	bd10      	pop	{r4, pc}

000d7cfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7cfa:	b508      	push	{r3, lr}
      { delete this; }
   d7cfc:	f7ff fff6 	bl	d7cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7d00:	bd08      	pop	{r3, pc}

000d7d02 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7d02:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7d04:	2200      	movs	r2, #0
   d7d06:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7d0a:	6002      	str	r2, [r0, #0]
   d7d0c:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d0e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d10:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d12:	680c      	ldr	r4, [r1, #0]
   d7d14:	8085      	strh	r5, [r0, #4]
   d7d16:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d18:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7d1a:	bd30      	pop	{r4, r5, pc}

000d7d1c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7d1c:	b510      	push	{r4, lr}
   d7d1e:	4604      	mov	r4, r0
    free((void*)msg_);
   d7d20:	6800      	ldr	r0, [r0, #0]
   d7d22:	f7ff fe43 	bl	d79ac <free>
}
   d7d26:	4620      	mov	r0, r4
   d7d28:	bd10      	pop	{r4, pc}

000d7d2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7d2a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7d2c:	68c4      	ldr	r4, [r0, #12]
   d7d2e:	b1f4      	cbz	r4, d7d6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7d30:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7d32:	2b02      	cmp	r3, #2
   d7d34:	d103      	bne.n	d7d3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7d36:	f104 000c 	add.w	r0, r4, #12
   d7d3a:	f7ff ffef 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7d3e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7d40:	b135      	cbz	r5, d7d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7d42:	4628      	mov	r0, r5
   d7d44:	f7fd fec4 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
   d7d48:	2110      	movs	r1, #16
   d7d4a:	4628      	mov	r0, r5
   d7d4c:	f003 f998 	bl	db080 <_ZdlPvj>
   d7d50:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7d52:	b135      	cbz	r5, d7d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7d54:	4628      	mov	r0, r5
   d7d56:	f7fd febb 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
   d7d5a:	2110      	movs	r1, #16
   d7d5c:	4628      	mov	r0, r5
   d7d5e:	f003 f98f 	bl	db080 <_ZdlPvj>
   d7d62:	4620      	mov	r0, r4
   d7d64:	2114      	movs	r1, #20
   d7d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d6a:	f003 b989 	b.w	db080 <_ZdlPvj>
   d7d6e:	bd38      	pop	{r3, r4, r5, pc}

000d7d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7d72:	460e      	mov	r6, r1
   d7d74:	4604      	mov	r4, r0
   d7d76:	f856 3b04 	ldr.w	r3, [r6], #4
   d7d7a:	9300      	str	r3, [sp, #0]
   d7d7c:	460d      	mov	r5, r1
   d7d7e:	a801      	add	r0, sp, #4
   d7d80:	4631      	mov	r1, r6
   d7d82:	f7ff fe6a 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7d86:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7d88:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7d8a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7d8c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7d8e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7d90:	2300      	movs	r3, #0
   d7d92:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7d94:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7d96:	f7fd fee8 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7d9a:	4630      	mov	r0, r6
   d7d9c:	f7fd fee5 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7da0:	4628      	mov	r0, r5
   d7da2:	2108      	movs	r1, #8
   d7da4:	f003 f96c 	bl	db080 <_ZdlPvj>
        return p;
    }
   d7da8:	4620      	mov	r0, r4
   d7daa:	b002      	add	sp, #8
   d7dac:	bd70      	pop	{r4, r5, r6, pc}

000d7dae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7dae:	b513      	push	{r0, r1, r4, lr}
   d7db0:	460b      	mov	r3, r1
   d7db2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7db4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7db8:	466c      	mov	r4, sp
   d7dba:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7dbe:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7dc2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7dca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7dce:	b002      	add	sp, #8
   d7dd0:	bd10      	pop	{r4, pc}

000d7dd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7dd2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7dd4:	b510      	push	{r4, lr}
      if (_M_empty())
   d7dd6:	b90a      	cbnz	r2, d7ddc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7dd8:	f003 fa0a 	bl	db1f0 <_ZSt25__throw_bad_function_callv>
    }
   d7ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7de0:	68c3      	ldr	r3, [r0, #12]
   d7de2:	4718      	bx	r3

000d7de4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7de4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7de6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7de8:	f100 0110 	add.w	r1, r0, #16
   d7dec:	f7ff fff1 	bl	d7dd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7df0:	bd08      	pop	{r3, pc}

000d7df2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7df2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7df4:	b510      	push	{r4, lr}
      if (_M_empty())
   d7df6:	b90a      	cbnz	r2, d7dfc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7df8:	f003 f9fa 	bl	db1f0 <_ZSt25__throw_bad_function_callv>
    }
   d7dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e00:	68c3      	ldr	r3, [r0, #12]
   d7e02:	4718      	bx	r3

000d7e04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e04:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e06:	6800      	ldr	r0, [r0, #0]
   d7e08:	f100 0110 	add.w	r1, r0, #16
   d7e0c:	f7ff fff1 	bl	d7df2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7e10:	bd08      	pop	{r3, pc}
	...

000d7e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e14:	b538      	push	{r3, r4, r5, lr}
   d7e16:	2300      	movs	r3, #0
   d7e18:	4604      	mov	r4, r0
   d7e1a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e1c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e1e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e20:	f7fc f939 	bl	d4096 <_Znwj>
   d7e24:	b128      	cbz	r0, d7e32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e26:	2301      	movs	r3, #1
   d7e28:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7e2c:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7e2e:	6003      	str	r3, [r0, #0]
   d7e30:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e32:	6020      	str	r0, [r4, #0]
	}
   d7e34:	4620      	mov	r0, r4
   d7e36:	bd38      	pop	{r3, r4, r5, pc}
   d7e38:	000de654 	.word	0x000de654

000d7e3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7e3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7e3e:	2300      	movs	r3, #0
   d7e40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7e42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7e44:	4604      	mov	r4, r0
   d7e46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7e48:	b12b      	cbz	r3, d7e56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7e4a:	2202      	movs	r2, #2
   d7e4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7e4e:	68eb      	ldr	r3, [r5, #12]
   d7e50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7e52:	68ab      	ldr	r3, [r5, #8]
   d7e54:	60a3      	str	r3, [r4, #8]
    }
   d7e56:	4620      	mov	r0, r4
   d7e58:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e5e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7e60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7e62:	4668      	mov	r0, sp
   d7e64:	f7ff ff4d 	bl	d7d02 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7e68:	f04f 0302 	mov.w	r3, #2
   d7e6c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7e70:	2a00      	cmp	r2, #0
   d7e72:	d103      	bne.n	d7e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7e74:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7e78:	2900      	cmp	r1, #0
   d7e7a:	d1f7      	bne.n	d7e6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7e7c:	d125      	bne.n	d7eca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7e7e:	f104 050c 	add.w	r5, r4, #12
   d7e82:	4669      	mov	r1, sp
   d7e84:	4628      	mov	r0, r5
   d7e86:	f7ff ff3c 	bl	d7d02 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7e8a:	f3bf 8f5b 	dmb	ish
   d7e8e:	2301      	movs	r3, #1
   d7e90:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7e92:	2000      	movs	r0, #0
   d7e94:	f104 0308 	add.w	r3, r4, #8
   d7e98:	f3bf 8f5b 	dmb	ish
   d7e9c:	e853 6f00 	ldrex	r6, [r3]
   d7ea0:	e843 0200 	strex	r2, r0, [r3]
   d7ea4:	2a00      	cmp	r2, #0
   d7ea6:	d1f9      	bne.n	d7e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7ea8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7eac:	b16e      	cbz	r6, d7eca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7eae:	f7ff fcc1 	bl	d7834 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7eb2:	b178      	cbz	r0, d7ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7eb4:	4629      	mov	r1, r5
   d7eb6:	4630      	mov	r0, r6
   d7eb8:	f7ff ff8b 	bl	d7dd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7ebc:	4630      	mov	r0, r6
   d7ebe:	f7fd fe07 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7ec2:	2110      	movs	r1, #16
   d7ec4:	4630      	mov	r0, r6
   d7ec6:	f003 f8db 	bl	db080 <_ZdlPvj>
        p_->setError(std::move(error));
   d7eca:	4668      	mov	r0, sp
   d7ecc:	f7ff ff26 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
    }
   d7ed0:	b009      	add	sp, #36	; 0x24
   d7ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7ed4:	4631      	mov	r1, r6
   d7ed6:	a802      	add	r0, sp, #8
   d7ed8:	f7ff ffb0 	bl	d7e3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7edc:	68e0      	ldr	r0, [r4, #12]
   d7ede:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7ee2:	b108      	cbz	r0, d7ee8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7ee4:	f004 f83c 	bl	dbf60 <strdup>
        type_(type) {
   d7ee8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7eea:	2010      	movs	r0, #16
   d7eec:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7ef0:	f7fc f8d1 	bl	d4096 <_Znwj>
   d7ef4:	4605      	mov	r5, r0
   d7ef6:	b1e8      	cbz	r0, d7f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7ef8:	2700      	movs	r7, #0
   d7efa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7efc:	2018      	movs	r0, #24
   d7efe:	f7fc f8ca 	bl	d4096 <_Znwj>
   d7f02:	4604      	mov	r4, r0
   d7f04:	b188      	cbz	r0, d7f2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7f06:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7f08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7f0a:	a802      	add	r0, sp, #8
   d7f0c:	f7ff ff4f 	bl	d7dae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7f12:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f14:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f18:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7f1a:	a906      	add	r1, sp, #24
   d7f1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f1e:	60e3      	str	r3, [r4, #12]
   d7f20:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7f24:	9205      	str	r2, [sp, #20]
   d7f26:	f7ff feec 	bl	d7d02 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7f2a:	4b08      	ldr	r3, [pc, #32]	; (d7f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7f2c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7f2e:	4b08      	ldr	r3, [pc, #32]	; (d7f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f30:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7f32:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7f34:	a806      	add	r0, sp, #24
   d7f36:	f7ff fef1 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7f3a:	a802      	add	r0, sp, #8
   d7f3c:	f7fd fdc8 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7f40:	2200      	movs	r2, #0
   d7f42:	4629      	mov	r1, r5
   d7f44:	4803      	ldr	r0, [pc, #12]	; (d7f54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7f46:	f7ff fc7d 	bl	d7844 <application_thread_invoke>
   d7f4a:	e7b7      	b.n	d7ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7f4c:	000d7de5 	.word	0x000d7de5
   d7f50:	000d807d 	.word	0x000d807d
   d7f54:	000d7a33 	.word	0x000d7a33

000d7f58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7f5c:	b08a      	sub	sp, #40	; 0x28
   d7f5e:	4605      	mov	r5, r0
   d7f60:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7f64:	460c      	mov	r4, r1
   d7f66:	4617      	mov	r7, r2
   d7f68:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f6a:	f7ff fc97 	bl	d789c <spark_cloud_flag_connected>
   d7f6e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7f70:	4682      	mov	sl, r0
   d7f72:	bb38      	cbnz	r0, d7fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7f74:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7f78:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7f7a:	a905      	add	r1, sp, #20
   d7f7c:	4630      	mov	r0, r6
   d7f7e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7f82:	f7ff febe 	bl	d7d02 <_ZN8particle5ErrorC1EOS0_>
   d7f86:	2014      	movs	r0, #20
   d7f88:	f7fc f885 	bl	d4096 <_Znwj>
   d7f8c:	4604      	mov	r4, r0
   d7f8e:	b148      	cbz	r0, d7fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7f90:	2302      	movs	r3, #2
   d7f92:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7f94:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7f96:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7f9a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7f9c:	4631      	mov	r1, r6
   d7f9e:	300c      	adds	r0, #12
   d7fa0:	f7ff feaf 	bl	d7d02 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7fa4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7fa6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7fa8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7fac:	f7ff ff32 	bl	d7e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7fb0:	4630      	mov	r0, r6
   d7fb2:	f7ff feb3 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7fb6:	a805      	add	r0, sp, #20
   d7fb8:	f7ff feb0 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d7fbc:	4628      	mov	r0, r5
   d7fbe:	b00a      	add	sp, #40	; 0x28
   d7fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7fc4:	230c      	movs	r3, #12
   d7fc6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7fca:	2014      	movs	r0, #20
   d7fcc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7fd0:	9307      	str	r3, [sp, #28]
   d7fd2:	f7fc f860 	bl	d4096 <_Znwj>
   d7fd6:	4601      	mov	r1, r0
   d7fd8:	b128      	cbz	r0, d7fe6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7fda:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7fde:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fe2:	f880 a001 	strb.w	sl, [r0, #1]
   d7fe6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7fe8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7fea:	f7ff ff13 	bl	d7e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d7fee:	4b22      	ldr	r3, [pc, #136]	; (d8078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7ff0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7ff2:	2008      	movs	r0, #8
   d7ff4:	f7fc f84f 	bl	d4096 <_Znwj>
   d7ff8:	4682      	mov	sl, r0
   d7ffa:	b128      	cbz	r0, d8008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7ffc:	9b03      	ldr	r3, [sp, #12]
   d7ffe:	f840 3b04 	str.w	r3, [r0], #4
   d8002:	a904      	add	r1, sp, #16
   d8004:	f7ff fd29 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8008:	9600      	str	r6, [sp, #0]
   d800a:	fa5f f389 	uxtb.w	r3, r9
   d800e:	4642      	mov	r2, r8
   d8010:	4639      	mov	r1, r7
   d8012:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8014:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8018:	f7ff fc50 	bl	d78bc <spark_send_event>
   d801c:	b9b8      	cbnz	r0, d804e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d801e:	9b03      	ldr	r3, [sp, #12]
   d8020:	785b      	ldrb	r3, [r3, #1]
   d8022:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8026:	b993      	cbnz	r3, d804e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8028:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d802c:	a905      	add	r1, sp, #20
   d802e:	a803      	add	r0, sp, #12
   d8030:	9205      	str	r2, [sp, #20]
   d8032:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8036:	f7ff ff11 	bl	d7e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d803a:	a805      	add	r0, sp, #20
   d803c:	f7ff fe6e 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8040:	a805      	add	r0, sp, #20
   d8042:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8044:	f7ff fe94 	bl	d7d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8048:	a806      	add	r0, sp, #24
   d804a:	f7fd fd8e 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d804e:	9b03      	ldr	r3, [sp, #12]
   d8050:	9305      	str	r3, [sp, #20]
   d8052:	a904      	add	r1, sp, #16
   d8054:	a806      	add	r0, sp, #24
   d8056:	f7ff fd00 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d805a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d805c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d805e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8060:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8062:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8064:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8066:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8068:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d806a:	f7fd fd7e 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d806e:	a804      	add	r0, sp, #16
   d8070:	f7fd fd7b 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8074:	e7a2      	b.n	d7fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8076:	bf00      	nop
   d8078:	000d8141 	.word	0x000d8141

000d807c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d807c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d807e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8080:	4605      	mov	r5, r0
	  switch (__op)
   d8082:	d007      	beq.n	d8094 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8084:	2a03      	cmp	r2, #3
   d8086:	d018      	beq.n	d80ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8088:	2a01      	cmp	r2, #1
   d808a:	d101      	bne.n	d8090 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d808c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d808e:	6003      	str	r3, [r0, #0]
	}
   d8090:	2000      	movs	r0, #0
   d8092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8094:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8096:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8098:	f7fb fffd 	bl	d4096 <_Znwj>
   d809c:	4604      	mov	r4, r0
   d809e:	b150      	cbz	r0, d80b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d80a0:	4631      	mov	r1, r6
   d80a2:	f7ff fecb 	bl	d7e3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d80a6:	6930      	ldr	r0, [r6, #16]
   d80a8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d80ac:	b108      	cbz	r0, d80b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d80ae:	f003 ff57 	bl	dbf60 <strdup>
        type_(type) {
   d80b2:	6120      	str	r0, [r4, #16]
   d80b4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d80b6:	602c      	str	r4, [r5, #0]
	}
   d80b8:	e7ea      	b.n	d8090 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d80ba:	6804      	ldr	r4, [r0, #0]
   d80bc:	2c00      	cmp	r4, #0
   d80be:	d0e7      	beq.n	d8090 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d80c0:	f104 0010 	add.w	r0, r4, #16
   d80c4:	f7ff fe2a 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d80c8:	4620      	mov	r0, r4
   d80ca:	f7fd fd01 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d80ce:	2118      	movs	r1, #24
   d80d0:	4620      	mov	r0, r4
   d80d2:	f002 ffd5 	bl	db080 <_ZdlPvj>
   d80d6:	e7db      	b.n	d8090 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d80d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d80d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d80da:	2300      	movs	r3, #0
   d80dc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d80de:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d80e0:	4604      	mov	r4, r0
   d80e2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d80e4:	b12b      	cbz	r3, d80f2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d80e6:	2202      	movs	r2, #2
   d80e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d80ea:	68eb      	ldr	r3, [r5, #12]
   d80ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d80ee:	68ab      	ldr	r3, [r5, #8]
   d80f0:	60a3      	str	r3, [r4, #8]
    }
   d80f2:	4620      	mov	r0, r4
   d80f4:	bd38      	pop	{r3, r4, r5, pc}

000d80f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d80f6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d80f8:	b570      	push	{r4, r5, r6, lr}
   d80fa:	4604      	mov	r4, r0
	  switch (__op)
   d80fc:	d007      	beq.n	d810e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d80fe:	2a03      	cmp	r2, #3
   d8100:	d012      	beq.n	d8128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8102:	2a01      	cmp	r2, #1
   d8104:	d101      	bne.n	d810a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8106:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8108:	6003      	str	r3, [r0, #0]
	}
   d810a:	2000      	movs	r0, #0
   d810c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d810e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8110:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8112:	f7fb ffc0 	bl	d4096 <_Znwj>
   d8116:	4605      	mov	r5, r0
   d8118:	b120      	cbz	r0, d8124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d811a:	4631      	mov	r1, r6
   d811c:	f7ff ffdc 	bl	d80d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8120:	7c33      	ldrb	r3, [r6, #16]
   d8122:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8124:	6025      	str	r5, [r4, #0]
	}
   d8126:	e7f0      	b.n	d810a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8128:	6804      	ldr	r4, [r0, #0]
   d812a:	2c00      	cmp	r4, #0
   d812c:	d0ed      	beq.n	d810a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d812e:	4620      	mov	r0, r4
   d8130:	f7fd fcce 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8134:	2114      	movs	r1, #20
   d8136:	4620      	mov	r0, r4
   d8138:	f002 ffa2 	bl	db080 <_ZdlPvj>
   d813c:	e7e5      	b.n	d810a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8140:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8142:	b089      	sub	sp, #36	; 0x24
   d8144:	4604      	mov	r4, r0
   d8146:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8148:	a801      	add	r0, sp, #4
   d814a:	4611      	mov	r1, r2
   d814c:	f7ff fe10 	bl	d7d70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8150:	b1a4      	cbz	r4, d817c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8152:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8154:	b11d      	cbz	r5, d815e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8156:	4628      	mov	r0, r5
   d8158:	f003 ff02 	bl	dbf60 <strdup>
   d815c:	4605      	mov	r5, r0
   d815e:	a801      	add	r0, sp, #4
   d8160:	a903      	add	r1, sp, #12
        type_(type) {
   d8162:	9503      	str	r5, [sp, #12]
   d8164:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8168:	f7ff fe78 	bl	d7e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d816c:	a803      	add	r0, sp, #12
   d816e:	f7ff fdd5 	bl	d7d1c <_ZN8particle5ErrorD1Ev>
   d8172:	a802      	add	r0, sp, #8
   d8174:	f7fd fcf9 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8178:	b009      	add	sp, #36	; 0x24
   d817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d817c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d817e:	2301      	movs	r3, #1
   d8180:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8184:	2a00      	cmp	r2, #0
   d8186:	d103      	bne.n	d8190 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8188:	e8c5 3f41 	strexb	r1, r3, [r5]
   d818c:	2900      	cmp	r1, #0
   d818e:	d1f7      	bne.n	d8180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8190:	d1ef      	bne.n	d8172 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8192:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8194:	f3bf 8f5b 	dmb	ish
   d8198:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d819a:	1d2b      	adds	r3, r5, #4
   d819c:	f3bf 8f5b 	dmb	ish
   d81a0:	e853 6f00 	ldrex	r6, [r3]
   d81a4:	e843 4200 	strex	r2, r4, [r3]
   d81a8:	2a00      	cmp	r2, #0
   d81aa:	d1f9      	bne.n	d81a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d81ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d81b0:	2e00      	cmp	r6, #0
   d81b2:	d0de      	beq.n	d8172 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d81b4:	4620      	mov	r0, r4
   d81b6:	f7ff fb3d 	bl	d7834 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d81ba:	4607      	mov	r7, r0
   d81bc:	b160      	cbz	r0, d81d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d81be:	f105 010c 	add.w	r1, r5, #12
   d81c2:	4630      	mov	r0, r6
   d81c4:	f7ff fe15 	bl	d7df2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d81c8:	4630      	mov	r0, r6
   d81ca:	f7fd fc81 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d81ce:	2110      	movs	r1, #16
   d81d0:	4630      	mov	r0, r6
   d81d2:	f002 ff55 	bl	db080 <_ZdlPvj>
   d81d6:	e7cc      	b.n	d8172 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d81d8:	4631      	mov	r1, r6
   d81da:	a803      	add	r0, sp, #12
   d81dc:	f7ff ff7c 	bl	d80d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d81e0:	7b2b      	ldrb	r3, [r5, #12]
   d81e2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d81e6:	2010      	movs	r0, #16
   d81e8:	f7fb ff55 	bl	d4096 <_Znwj>
   d81ec:	4605      	mov	r5, r0
   d81ee:	b1d0      	cbz	r0, d8226 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d81f0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d81f2:	2014      	movs	r0, #20
   d81f4:	f7fb ff4f 	bl	d4096 <_Znwj>
   d81f8:	4604      	mov	r4, r0
   d81fa:	b178      	cbz	r0, d821c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d81fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d81fe:	4601      	mov	r1, r0
   d8200:	a803      	add	r0, sp, #12
   d8202:	f7ff fdd4 	bl	d7dae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8206:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8208:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d820a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d820c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d820e:	9205      	str	r2, [sp, #20]
   d8210:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8212:	60e3      	str	r3, [r4, #12]
   d8214:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8218:	9206      	str	r2, [sp, #24]
   d821a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d821c:	4b06      	ldr	r3, [pc, #24]	; (d8238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d821e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8220:	4b06      	ldr	r3, [pc, #24]	; (d823c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8222:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8224:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8226:	a803      	add	r0, sp, #12
   d8228:	f7fd fc52 	bl	d5ad0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d822c:	2200      	movs	r2, #0
   d822e:	4629      	mov	r1, r5
   d8230:	4803      	ldr	r0, [pc, #12]	; (d8240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8232:	f7ff fb07 	bl	d7844 <application_thread_invoke>
   d8236:	e7c7      	b.n	d81c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8238:	000d7e05 	.word	0x000d7e05
   d823c:	000d80f7 	.word	0x000d80f7
   d8240:	000d7a33 	.word	0x000d7a33

000d8244 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8244:	2200      	movs	r2, #0
   d8246:	6840      	ldr	r0, [r0, #4]
   d8248:	4611      	mov	r1, r2
   d824a:	f7ff bb7f 	b.w	d794c <network_listening>

000d824e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d824e:	2200      	movs	r2, #0
   d8250:	6840      	ldr	r0, [r0, #4]
   d8252:	4611      	mov	r1, r2
   d8254:	f7ff bb8a 	b.w	d796c <network_get_listen_timeout>

000d8258 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8258:	6840      	ldr	r0, [r0, #4]
   d825a:	2200      	movs	r2, #0
   d825c:	f7ff bb7e 	b.w	d795c <network_set_listen_timeout>

000d8260 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8260:	6840      	ldr	r0, [r0, #4]
   d8262:	2200      	movs	r2, #0
   d8264:	f081 0101 	eor.w	r1, r1, #1
   d8268:	f7ff bb68 	b.w	d793c <network_listen>

000d826c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d826c:	2300      	movs	r3, #0
   d826e:	6840      	ldr	r0, [r0, #4]
   d8270:	461a      	mov	r2, r3
   d8272:	4619      	mov	r1, r3
   d8274:	f7ff bb5a 	b.w	d792c <network_off>

000d8278 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8278:	2300      	movs	r3, #0
   d827a:	6840      	ldr	r0, [r0, #4]
   d827c:	461a      	mov	r2, r3
   d827e:	4619      	mov	r1, r3
   d8280:	f7ff bb4c 	b.w	d791c <network_on>

000d8284 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8284:	2200      	movs	r2, #0
   d8286:	6840      	ldr	r0, [r0, #4]
   d8288:	4611      	mov	r1, r2
   d828a:	f7ff bb3f 	b.w	d790c <network_ready>

000d828e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d828e:	2200      	movs	r2, #0
   d8290:	6840      	ldr	r0, [r0, #4]
   d8292:	4611      	mov	r1, r2
   d8294:	f7ff bb2a 	b.w	d78ec <network_connecting>

000d8298 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8298:	6840      	ldr	r0, [r0, #4]
   d829a:	2200      	movs	r2, #0
   d829c:	2102      	movs	r1, #2
   d829e:	f7ff bb2d 	b.w	d78fc <network_disconnect>

000d82a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d82a2:	2300      	movs	r3, #0
   d82a4:	6840      	ldr	r0, [r0, #4]
   d82a6:	461a      	mov	r2, r3
   d82a8:	f7ff bb18 	b.w	d78dc <network_connect>

000d82ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d82ac:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d82ae:	2203      	movs	r2, #3
   d82b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d82b2:	4a02      	ldr	r2, [pc, #8]	; (d82bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d82b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d82b6:	4770      	bx	lr
   d82b8:	2003e574 	.word	0x2003e574
   d82bc:	000de670 	.word	0x000de670

000d82c0 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d82c0:	0909      	lsrs	r1, r1, #4
   d82c2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d82c6:	ee07 1a90 	vmov	s15, r1
   d82ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d82ce:	eddf 7a02 	vldr	s15, [pc, #8]	; d82d8 <_ZN8particle6detail9_getVCellEhh+0x18>
   d82d2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d82d6:	4770      	bx	lr
   d82d8:	44480000 	.word	0x44480000

000d82dc <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d82dc:	6800      	ldr	r0, [r0, #0]
   d82de:	f000 b906 	b.w	d84ee <_ZN7TwoWire4lockEv>

000d82e2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d82e2:	b510      	push	{r4, lr}
   d82e4:	4604      	mov	r4, r0
      lock_(_lock) {
   d82e6:	6001      	str	r1, [r0, #0]
   d82e8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d82ea:	b10a      	cbz	r2, d82f0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d82ec:	f7ff fff6 	bl	d82dc <_ZN9FuelGauge4lockEv>
}
   d82f0:	4620      	mov	r0, r4
   d82f2:	bd10      	pop	{r4, pc}

000d82f4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d82f4:	b513      	push	{r0, r1, r4, lr}
   d82f6:	4604      	mov	r4, r0
   d82f8:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d82fa:	f002 fe9d 	bl	db038 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d82fe:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8300:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8302:	4620      	mov	r0, r4
   d8304:	f7ff ffed 	bl	d82e2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8308:	4620      	mov	r0, r4
   d830a:	b002      	add	sp, #8
   d830c:	bd10      	pop	{r4, pc}

000d830e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d830e:	6800      	ldr	r0, [r0, #0]
   d8310:	f000 b8f6 	b.w	d8500 <_ZN7TwoWire6unlockEv>

000d8314 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8318:	4604      	mov	r4, r0
   d831a:	460d      	mov	r5, r1
   d831c:	4617      	mov	r7, r2
   d831e:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8320:	f7ff ffdc 	bl	d82dc <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8324:	2336      	movs	r3, #54	; 0x36
   d8326:	f88d 3000 	strb.w	r3, [sp]
   d832a:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d832c:	6820      	ldr	r0, [r4, #0]
   d832e:	9301      	str	r3, [sp, #4]
   d8330:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8334:	230a      	movs	r3, #10
   d8336:	4669      	mov	r1, sp
   d8338:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d833a:	f88d 8008 	strb.w	r8, [sp, #8]
   d833e:	f000 f8b7 	bl	d84b0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8342:	6820      	ldr	r0, [r4, #0]
   d8344:	6803      	ldr	r3, [r0, #0]
   d8346:	4629      	mov	r1, r5
   d8348:	689b      	ldr	r3, [r3, #8]
   d834a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d834c:	6820      	ldr	r0, [r4, #0]
   d834e:	4641      	mov	r1, r8
   d8350:	f000 f8c6 	bl	d84e0 <_ZN7TwoWire15endTransmissionEh>
   d8354:	4605      	mov	r5, r0
   d8356:	b140      	cbz	r0, d836a <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8358:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d835c:	4620      	mov	r0, r4
   d835e:	f7ff ffd6 	bl	d830e <_ZN9FuelGauge6unlockEv>
}
   d8362:	4628      	mov	r0, r5
   d8364:	b004      	add	sp, #16
   d8366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d836a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d836c:	6820      	ldr	r0, [r4, #0]
   d836e:	9301      	str	r3, [sp, #4]
   d8370:	4669      	mov	r1, sp
   d8372:	f000 f86d 	bl	d8450 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d8376:	2802      	cmp	r0, #2
   d8378:	d1ee      	bne.n	d8358 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d837a:	6820      	ldr	r0, [r4, #0]
   d837c:	6803      	ldr	r3, [r0, #0]
   d837e:	695b      	ldr	r3, [r3, #20]
   d8380:	4798      	blx	r3
   d8382:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d8384:	6820      	ldr	r0, [r4, #0]
   d8386:	6803      	ldr	r3, [r0, #0]
   d8388:	695b      	ldr	r3, [r3, #20]
   d838a:	4798      	blx	r3
   d838c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d838e:	e7e5      	b.n	d835c <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8390 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d8390:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d8392:	2300      	movs	r3, #0
   d8394:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8398:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d839c:	f10d 0206 	add.w	r2, sp, #6
   d83a0:	f10d 0307 	add.w	r3, sp, #7
   d83a4:	2102      	movs	r1, #2
   d83a6:	f7ff ffb5 	bl	d8314 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d83aa:	b940      	cbnz	r0, d83be <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d83ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d83b0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d83b4:	b003      	add	sp, #12
   d83b6:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d83ba:	f7ff bf81 	b.w	d82c0 <_ZN8particle6detail9_getVCellEhh>
}
   d83be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d83c2:	b003      	add	sp, #12
   d83c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d83c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d83c8:	4770      	bx	lr

000d83ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d83ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d83cc:	4606      	mov	r6, r0
   d83ce:	4615      	mov	r5, r2
   d83d0:	460c      	mov	r4, r1
   d83d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d83d4:	42bc      	cmp	r4, r7
   d83d6:	d006      	beq.n	d83e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d83d8:	6833      	ldr	r3, [r6, #0]
   d83da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d83de:	689b      	ldr	r3, [r3, #8]
   d83e0:	4630      	mov	r0, r6
   d83e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d83e4:	e7f6      	b.n	d83d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d83e6:	4628      	mov	r0, r5
   d83e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d83ea:	7c00      	ldrb	r0, [r0, #16]
   d83ec:	2200      	movs	r2, #0
   d83ee:	f7ff b847 	b.w	d7480 <hal_i2c_write>

000d83f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d83f2:	7c00      	ldrb	r0, [r0, #16]
   d83f4:	2100      	movs	r1, #0
   d83f6:	f7ff b84b 	b.w	d7490 <hal_i2c_available>

000d83fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d83fa:	7c00      	ldrb	r0, [r0, #16]
   d83fc:	2100      	movs	r1, #0
   d83fe:	f7ff b84f 	b.w	d74a0 <hal_i2c_read>

000d8402 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8402:	7c00      	ldrb	r0, [r0, #16]
   d8404:	2100      	movs	r1, #0
   d8406:	f7ff b853 	b.w	d74b0 <hal_i2c_peek>

000d840a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d840a:	7c00      	ldrb	r0, [r0, #16]
   d840c:	2100      	movs	r1, #0
   d840e:	f7ff b857 	b.w	d74c0 <hal_i2c_flush>

000d8412 <_ZN7TwoWireD0Ev>:
   d8412:	b510      	push	{r4, lr}
   d8414:	2114      	movs	r1, #20
   d8416:	4604      	mov	r4, r0
   d8418:	f002 fe32 	bl	db080 <_ZdlPvj>
   d841c:	4620      	mov	r0, r4
   d841e:	bd10      	pop	{r4, pc}

000d8420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8420:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8426:	4604      	mov	r4, r0
   d8428:	4608      	mov	r0, r1
   d842a:	2100      	movs	r1, #0
   d842c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8430:	4b03      	ldr	r3, [pc, #12]	; (d8440 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8432:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8434:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8436:	4611      	mov	r1, r2
   d8438:	f7ff f852 	bl	d74e0 <hal_i2c_init>
}
   d843c:	4620      	mov	r0, r4
   d843e:	bd10      	pop	{r4, pc}
   d8440:	000de6ac 	.word	0x000de6ac

000d8444 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8444:	2300      	movs	r3, #0
   d8446:	7c00      	ldrb	r0, [r0, #16]
   d8448:	461a      	mov	r2, r3
   d844a:	4619      	mov	r1, r3
   d844c:	f7ff b800 	b.w	d7450 <hal_i2c_begin>

000d8450 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8452:	2200      	movs	r2, #0
   d8454:	2314      	movs	r3, #20
   d8456:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d845a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d845e:	780b      	ldrb	r3, [r1, #0]
   d8460:	f88d 3008 	strb.w	r3, [sp, #8]
   d8464:	684b      	ldr	r3, [r1, #4]
   d8466:	9303      	str	r3, [sp, #12]
   d8468:	68cb      	ldr	r3, [r1, #12]
   d846a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d846c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d846e:	7a0b      	ldrb	r3, [r1, #8]
   d8470:	9305      	str	r3, [sp, #20]
   d8472:	a901      	add	r1, sp, #4
   d8474:	f7ff f84c 	bl	d7510 <hal_i2c_request_ex>
}
   d8478:	b007      	add	sp, #28
   d847a:	f85d fb04 	ldr.w	pc, [sp], #4

000d847e <_ZN7TwoWire11requestFromEhjh>:
{
   d847e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8480:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8482:	f88d 1000 	strb.w	r1, [sp]
   d8486:	f04f 0164 	mov.w	r1, #100	; 0x64
   d848a:	9103      	str	r1, [sp, #12]
   d848c:	bf18      	it	ne
   d848e:	2301      	movne	r3, #1
   d8490:	4669      	mov	r1, sp
    size_ = size;
   d8492:	9201      	str	r2, [sp, #4]
   d8494:	f88d 3008 	strb.w	r3, [sp, #8]
   d8498:	f7ff ffda 	bl	d8450 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d849c:	b005      	add	sp, #20
   d849e:	f85d fb04 	ldr.w	pc, [sp], #4

000d84a2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d84a2:	2301      	movs	r3, #1
   d84a4:	f7ff bfeb 	b.w	d847e <_ZN7TwoWire11requestFromEhjh>

000d84a8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d84a8:	7c00      	ldrb	r0, [r0, #16]
   d84aa:	2200      	movs	r2, #0
   d84ac:	f7fe bfd8 	b.w	d7460 <hal_i2c_begin_transmission>

000d84b0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d84b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d84b2:	2300      	movs	r3, #0
   d84b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d84b8:	684a      	ldr	r2, [r1, #4]
   d84ba:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d84bc:	2314      	movs	r3, #20
    };
   d84be:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d84c0:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d84c4:	780b      	ldrb	r3, [r1, #0]
    };
   d84c6:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d84c8:	7a0a      	ldrb	r2, [r1, #8]
   d84ca:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d84cc:	7c00      	ldrb	r0, [r0, #16]
    };
   d84ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d84d2:	aa01      	add	r2, sp, #4
   d84d4:	4619      	mov	r1, r3
   d84d6:	f7fe ffc3 	bl	d7460 <hal_i2c_begin_transmission>
}
   d84da:	b007      	add	sp, #28
   d84dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d84e0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d84e0:	7c00      	ldrb	r0, [r0, #16]
   d84e2:	2200      	movs	r2, #0
   d84e4:	f7fe bfc4 	b.w	d7470 <hal_i2c_end_transmission>

000d84e8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d84e8:	2101      	movs	r1, #1
   d84ea:	f7ff bff9 	b.w	d84e0 <_ZN7TwoWire15endTransmissionEh>

000d84ee <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d84ee:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d84f0:	2100      	movs	r1, #0
   d84f2:	7c00      	ldrb	r0, [r0, #16]
   d84f4:	f7fe fffc 	bl	d74f0 <hal_i2c_lock>
}
   d84f8:	fab0 f080 	clz	r0, r0
   d84fc:	0940      	lsrs	r0, r0, #5
   d84fe:	bd08      	pop	{r3, pc}

000d8500 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8500:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8502:	2100      	movs	r1, #0
   d8504:	7c00      	ldrb	r0, [r0, #16]
   d8506:	f7fe fffb 	bl	d7500 <hal_i2c_unlock>
}
   d850a:	fab0 f080 	clz	r0, r0
   d850e:	0940      	lsrs	r0, r0, #5
   d8510:	bd08      	pop	{r3, pc}

000d8512 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8512:	4770      	bx	lr

000d8514 <_ZN9IPAddressD0Ev>:
   d8514:	b510      	push	{r4, lr}
   d8516:	2118      	movs	r1, #24
   d8518:	4604      	mov	r4, r0
   d851a:	f002 fdb1 	bl	db080 <_ZdlPvj>
   d851e:	4620      	mov	r0, r4
   d8520:	bd10      	pop	{r4, pc}

000d8522 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8522:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8524:	7d03      	ldrb	r3, [r0, #20]
   d8526:	2b06      	cmp	r3, #6
{
   d8528:	b08d      	sub	sp, #52	; 0x34
   d852a:	460e      	mov	r6, r1
   d852c:	f100 0704 	add.w	r7, r0, #4
   d8530:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8534:	d012      	beq.n	d855c <_ZNK9IPAddress7printToER5Print+0x3a>
   d8536:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d853a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d853e:	220a      	movs	r2, #10
   d8540:	4630      	mov	r0, r6
   d8542:	f001 fb0e 	bl	d9b62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8546:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8548:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d854a:	d019      	beq.n	d8580 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d854c:	2c00      	cmp	r4, #0
   d854e:	d0f4      	beq.n	d853a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8550:	212e      	movs	r1, #46	; 0x2e
   d8552:	4630      	mov	r0, r6
   d8554:	f001 faec 	bl	d9b30 <_ZN5Print5printEc>
   d8558:	4404      	add	r4, r0
   d855a:	e7ee      	b.n	d853a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d855c:	232f      	movs	r3, #47	; 0x2f
   d855e:	466a      	mov	r2, sp
   d8560:	4639      	mov	r1, r7
   d8562:	200a      	movs	r0, #10
		buf[0] = 0;
   d8564:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8568:	f7fe ffe2 	bl	d7530 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d856c:	4668      	mov	r0, sp
   d856e:	f003 fd14 	bl	dbf9a <strlen>
   d8572:	6833      	ldr	r3, [r6, #0]
   d8574:	4602      	mov	r2, r0
   d8576:	68db      	ldr	r3, [r3, #12]
   d8578:	4669      	mov	r1, sp
   d857a:	4630      	mov	r0, r6
   d857c:	4798      	blx	r3
   d857e:	4604      	mov	r4, r0
    }
    return n;
}
   d8580:	4620      	mov	r0, r4
   d8582:	b00d      	add	sp, #52	; 0x34
   d8584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8588 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8588:	b510      	push	{r4, lr}
   d858a:	4b05      	ldr	r3, [pc, #20]	; (d85a0 <_ZN9IPAddressC1Ev+0x18>)
   d858c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d858e:	2211      	movs	r2, #17
   d8590:	f840 3b04 	str.w	r3, [r0], #4
   d8594:	2100      	movs	r1, #0
   d8596:	f003 fc8c 	bl	dbeb2 <memset>
}
   d859a:	4620      	mov	r0, r4
   d859c:	bd10      	pop	{r4, pc}
   d859e:	bf00      	nop
   d85a0:	000de6d4 	.word	0x000de6d4

000d85a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d85a4:	4603      	mov	r3, r0
   d85a6:	4a07      	ldr	r2, [pc, #28]	; (d85c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d85a8:	b510      	push	{r4, lr}
   d85aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d85ae:	f101 0210 	add.w	r2, r1, #16
   d85b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d85b6:	f843 4b04 	str.w	r4, [r3], #4
   d85ba:	4291      	cmp	r1, r2
   d85bc:	d1f9      	bne.n	d85b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d85be:	780a      	ldrb	r2, [r1, #0]
   d85c0:	701a      	strb	r2, [r3, #0]
}
   d85c2:	bd10      	pop	{r4, pc}
   d85c4:	000de6d4 	.word	0x000de6d4

000d85c8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d85c8:	7d03      	ldrb	r3, [r0, #20]
   d85ca:	2b04      	cmp	r3, #4
   d85cc:	d104      	bne.n	d85d8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d85ce:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d85d0:	3800      	subs	r0, #0
   d85d2:	bf18      	it	ne
   d85d4:	2001      	movne	r0, #1
   d85d6:	4770      	bx	lr
    } else if (version() == 6) {
   d85d8:	2b06      	cmp	r3, #6
   d85da:	d107      	bne.n	d85ec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d85dc:	6843      	ldr	r3, [r0, #4]
   d85de:	b93b      	cbnz	r3, d85f0 <_ZNK9IPAddresscvbEv+0x28>
   d85e0:	6883      	ldr	r3, [r0, #8]
   d85e2:	b92b      	cbnz	r3, d85f0 <_ZNK9IPAddresscvbEv+0x28>
   d85e4:	68c3      	ldr	r3, [r0, #12]
   d85e6:	b91b      	cbnz	r3, d85f0 <_ZNK9IPAddresscvbEv+0x28>
   d85e8:	6900      	ldr	r0, [r0, #16]
   d85ea:	e7f1      	b.n	d85d0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d85ec:	2000      	movs	r0, #0
   d85ee:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d85f0:	2001      	movs	r0, #1
}
   d85f2:	4770      	bx	lr

000d85f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d85f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d85f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d85fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d85fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8602:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8606:	2304      	movs	r3, #4
   d8608:	6041      	str	r1, [r0, #4]
   d860a:	7503      	strb	r3, [r0, #20]
}
   d860c:	bd10      	pop	{r4, pc}
	...

000d8610 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d8610:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8612:	4d04      	ldr	r5, [pc, #16]	; (d8624 <_ZN9IPAddressC1Ehhhh+0x14>)
   d8614:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d8616:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d861a:	9500      	str	r5, [sp, #0]
   d861c:	f7ff ffea 	bl	d85f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8620:	b003      	add	sp, #12
   d8622:	bd30      	pop	{r4, r5, pc}
   d8624:	000de6d4 	.word	0x000de6d4

000d8628 <_ZN9IPAddressaSEPKh>:
{
   d8628:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d862a:	78cb      	ldrb	r3, [r1, #3]
   d862c:	9300      	str	r3, [sp, #0]
   d862e:	788b      	ldrb	r3, [r1, #2]
   d8630:	784a      	ldrb	r2, [r1, #1]
   d8632:	7809      	ldrb	r1, [r1, #0]
   d8634:	f7ff ffde 	bl	d85f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8638:	b002      	add	sp, #8
   d863a:	bd10      	pop	{r4, pc}

000d863c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d863c:	f100 0310 	add.w	r3, r0, #16
   d8640:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8642:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8646:	2901      	cmp	r1, #1
   d8648:	4618      	mov	r0, r3
   d864a:	d108      	bne.n	d865e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d864c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8650:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8654:	3a01      	subs	r2, #1
   d8656:	f103 0310 	add.w	r3, r3, #16
   d865a:	d1f2      	bne.n	d8642 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d865c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d865e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8660:	bf04      	itt	eq
   d8662:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8666:	1852      	addeq	r2, r2, r1
   d8668:	e7f4      	b.n	d8654 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d866a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d866a:	b40e      	push	{r1, r2, r3}
   d866c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d866e:	b088      	sub	sp, #32
   d8670:	af00      	add	r7, sp, #0
   d8672:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8676:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8678:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d867c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d867e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8680:	462b      	mov	r3, r5
   d8682:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d8684:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8686:	f7ff f9a9 	bl	d79dc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d868a:	280f      	cmp	r0, #15
   d868c:	687a      	ldr	r2, [r7, #4]
   d868e:	d91a      	bls.n	d86c6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8690:	f100 0308 	add.w	r3, r0, #8
   d8694:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8698:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d869a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d869e:	1c41      	adds	r1, r0, #1
   d86a0:	462b      	mov	r3, r5
   d86a2:	4668      	mov	r0, sp
        va_start(args, fmt);
   d86a4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d86a6:	f7ff f999 	bl	d79dc <vsnprintf>
        if (n > 0) {
   d86aa:	1e02      	subs	r2, r0, #0
   d86ac:	dd04      	ble.n	d86b8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d86ae:	6823      	ldr	r3, [r4, #0]
   d86b0:	4669      	mov	r1, sp
   d86b2:	689b      	ldr	r3, [r3, #8]
   d86b4:	4620      	mov	r0, r4
   d86b6:	4798      	blx	r3
   d86b8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d86ba:	3720      	adds	r7, #32
   d86bc:	46bd      	mov	sp, r7
   d86be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d86c2:	b003      	add	sp, #12
   d86c4:	4770      	bx	lr
    } else if (n > 0) {
   d86c6:	2800      	cmp	r0, #0
   d86c8:	d0f7      	beq.n	d86ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d86ca:	6823      	ldr	r3, [r4, #0]
   d86cc:	4602      	mov	r2, r0
   d86ce:	689b      	ldr	r3, [r3, #8]
   d86d0:	f107 0110 	add.w	r1, r7, #16
   d86d4:	4620      	mov	r0, r4
   d86d6:	4798      	blx	r3
}
   d86d8:	e7ef      	b.n	d86ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d86da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d86da:	b510      	push	{r4, lr}
          _M_dispose();
   d86dc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d86de:	4604      	mov	r4, r0
          _M_dispose();
   d86e0:	689b      	ldr	r3, [r3, #8]
   d86e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d86e4:	68a3      	ldr	r3, [r4, #8]
   d86e6:	3b01      	subs	r3, #1
   d86e8:	60a3      	str	r3, [r4, #8]
   d86ea:	b92b      	cbnz	r3, d86f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d86ec:	6823      	ldr	r3, [r4, #0]
   d86ee:	4620      	mov	r0, r4
   d86f0:	68db      	ldr	r3, [r3, #12]
    }
   d86f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d86f6:	4718      	bx	r3
    }
   d86f8:	bd10      	pop	{r4, pc}

000d86fa <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d86fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d86fc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d86fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8702:	689b      	ldr	r3, [r3, #8]
   d8704:	2201      	movs	r2, #1
   d8706:	f10d 0107 	add.w	r1, sp, #7
   d870a:	4798      	blx	r3
}
   d870c:	b003      	add	sp, #12
   d870e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8712 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8712:	b538      	push	{r3, r4, r5, lr}
   d8714:	680b      	ldr	r3, [r1, #0]
   d8716:	6003      	str	r3, [r0, #0]
   d8718:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d871a:	6843      	ldr	r3, [r0, #4]
   d871c:	429d      	cmp	r5, r3
    class __shared_ptr
   d871e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8720:	d00c      	beq.n	d873c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8722:	b115      	cbz	r5, d872a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8724:	686b      	ldr	r3, [r5, #4]
   d8726:	3301      	adds	r3, #1
   d8728:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d872a:	6860      	ldr	r0, [r4, #4]
   d872c:	b128      	cbz	r0, d873a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d872e:	6843      	ldr	r3, [r0, #4]
   d8730:	3b01      	subs	r3, #1
   d8732:	6043      	str	r3, [r0, #4]
   d8734:	b90b      	cbnz	r3, d873a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8736:	f7ff ffd0 	bl	d86da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d873a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d873c:	4620      	mov	r0, r4
   d873e:	bd38      	pop	{r3, r4, r5, pc}

000d8740 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8740:	460b      	mov	r3, r1
   d8742:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8744:	2200      	movs	r2, #0
   d8746:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8748:	e9c0 2200 	strd	r2, r2, [r0]
   d874c:	4604      	mov	r4, r0
        t_ = t;
   d874e:	6083      	str	r3, [r0, #8]
    if (t) {
   d8750:	b90b      	cbnz	r3, d8756 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8752:	4620      	mov	r0, r4
   d8754:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d8756:	f7ff ffdc 	bl	d8712 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d875a:	e7fa      	b.n	d8752 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d875c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d875c:	6883      	ldr	r3, [r0, #8]
   d875e:	b1eb      	cbz	r3, d879c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8760:	781a      	ldrb	r2, [r3, #0]
   d8762:	2a03      	cmp	r2, #3
   d8764:	d81a      	bhi.n	d879c <_ZNK5spark9JSONValue4typeEv+0x40>
   d8766:	e8df f002 	tbb	[pc, r2]
   d876a:	1704      	.short	0x1704
   d876c:	1b02      	.short	0x1b02
   d876e:	2005      	movs	r0, #5
   d8770:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8772:	6802      	ldr	r2, [r0, #0]
   d8774:	685b      	ldr	r3, [r3, #4]
   d8776:	6852      	ldr	r2, [r2, #4]
   d8778:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d877a:	282d      	cmp	r0, #45	; 0x2d
   d877c:	d012      	beq.n	d87a4 <_ZNK5spark9JSONValue4typeEv+0x48>
   d877e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8782:	2b09      	cmp	r3, #9
   d8784:	d90e      	bls.n	d87a4 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8786:	2874      	cmp	r0, #116	; 0x74
   d8788:	d00e      	beq.n	d87a8 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d878a:	2866      	cmp	r0, #102	; 0x66
   d878c:	d00c      	beq.n	d87a8 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d878e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8792:	4258      	negs	r0, r3
   d8794:	4158      	adcs	r0, r3
   d8796:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d8798:	2006      	movs	r0, #6
   d879a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d879c:	2000      	movs	r0, #0
   d879e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d87a0:	2004      	movs	r0, #4
   d87a2:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d87a4:	2003      	movs	r0, #3
   d87a6:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d87a8:	2002      	movs	r0, #2
}
   d87aa:	4770      	bx	lr

000d87ac <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d87ac:	b510      	push	{r4, lr}
   d87ae:	4604      	mov	r4, r0
    switch (type()) {
   d87b0:	f7ff ffd4 	bl	d875c <_ZNK5spark9JSONValue4typeEv>
   d87b4:	2802      	cmp	r0, #2
   d87b6:	d00e      	beq.n	d87d6 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d87b8:	1ec3      	subs	r3, r0, #3
   d87ba:	b2db      	uxtb	r3, r3
   d87bc:	2b01      	cmp	r3, #1
   d87be:	d814      	bhi.n	d87ea <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d87c0:	6822      	ldr	r2, [r4, #0]
   d87c2:	68a3      	ldr	r3, [r4, #8]
   d87c4:	6850      	ldr	r0, [r2, #4]
   d87c6:	685b      	ldr	r3, [r3, #4]
}
   d87c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d87cc:	220a      	movs	r2, #10
   d87ce:	2100      	movs	r1, #0
   d87d0:	4418      	add	r0, r3
   d87d2:	f004 bb3b 	b.w	dce4c <strtol>
        const char* const s = d_->json + t_->start;
   d87d6:	6822      	ldr	r2, [r4, #0]
   d87d8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d87da:	6852      	ldr	r2, [r2, #4]
   d87dc:	685b      	ldr	r3, [r3, #4]
   d87de:	5cd0      	ldrb	r0, [r2, r3]
   d87e0:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d87e4:	4258      	negs	r0, r3
   d87e6:	4158      	adcs	r0, r3
}
   d87e8:	bd10      	pop	{r4, pc}
    switch (type()) {
   d87ea:	2000      	movs	r0, #0
   d87ec:	e7fc      	b.n	d87e8 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d87f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d87f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d87f2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d87f4:	e9c0 3300 	strd	r3, r3, [r0]
   d87f8:	4604      	mov	r4, r0
        n_(0) {
   d87fa:	480e      	ldr	r0, [pc, #56]	; (d8834 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d87fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8800:	b1a9      	cbz	r1, d882e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d8802:	780b      	ldrb	r3, [r1, #0]
   d8804:	2b03      	cmp	r3, #3
   d8806:	d006      	beq.n	d8816 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8808:	b98b      	cbnz	r3, d882e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d880a:	6813      	ldr	r3, [r2, #0]
   d880c:	6858      	ldr	r0, [r3, #4]
   d880e:	684b      	ldr	r3, [r1, #4]
   d8810:	5cc3      	ldrb	r3, [r0, r3]
   d8812:	2b6e      	cmp	r3, #110	; 0x6e
   d8814:	d007      	beq.n	d8826 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8816:	6813      	ldr	r3, [r2, #0]
   d8818:	684d      	ldr	r5, [r1, #4]
   d881a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d881c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d881e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d8820:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d8822:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8824:	60e3      	str	r3, [r4, #12]
   d8826:	4611      	mov	r1, r2
   d8828:	4620      	mov	r0, r4
   d882a:	f7ff ff72 	bl	d8712 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d882e:	4620      	mov	r0, r4
   d8830:	bd38      	pop	{r3, r4, r5, pc}
   d8832:	bf00      	nop
   d8834:	000de2af 	.word	0x000de2af

000d8838 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8838:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d883a:	2500      	movs	r5, #0
   d883c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d883e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d8842:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8846:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d884a:	4604      	mov	r4, r0
   d884c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d884e:	b14b      	cbz	r3, d8864 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8850:	781a      	ldrb	r2, [r3, #0]
   d8852:	2a01      	cmp	r2, #1
   d8854:	d106      	bne.n	d8864 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d8856:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d885a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d885c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d885e:	6143      	str	r3, [r0, #20]
   d8860:	f7ff ff57 	bl	d8712 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8864:	4620      	mov	r0, r4
   d8866:	bd38      	pop	{r3, r4, r5, pc}

000d8868 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8868:	b510      	push	{r4, lr}
    if (!n_) {
   d886a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d886c:	4604      	mov	r4, r0
    if (!n_) {
   d886e:	b163      	cbz	r3, d888a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8870:	6880      	ldr	r0, [r0, #8]
   d8872:	60e0      	str	r0, [r4, #12]
    --n_;
   d8874:	3b01      	subs	r3, #1
    ++t_;
   d8876:	3010      	adds	r0, #16
   d8878:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d887a:	6120      	str	r0, [r4, #16]
    --n_;
   d887c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d887e:	b113      	cbz	r3, d8886 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8880:	f7ff fedc 	bl	d863c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8884:	60a0      	str	r0, [r4, #8]
    return true;
   d8886:	2001      	movs	r0, #1
   d8888:	e000      	b.n	d888c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d888a:	4618      	mov	r0, r3
}
   d888c:	bd10      	pop	{r4, pc}

000d888e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d888e:	b510      	push	{r4, lr}
    write('}');
   d8890:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8892:	4604      	mov	r4, r0
    write('}');
   d8894:	f7ff ff31 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8898:	2301      	movs	r3, #1
   d889a:	7123      	strb	r3, [r4, #4]
}
   d889c:	4620      	mov	r0, r4
   d889e:	bd10      	pop	{r4, pc}

000d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d88a0:	b508      	push	{r3, lr}
    switch (state_) {
   d88a2:	7903      	ldrb	r3, [r0, #4]
   d88a4:	2b01      	cmp	r3, #1
   d88a6:	d002      	beq.n	d88ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d88a8:	2b02      	cmp	r3, #2
   d88aa:	d004      	beq.n	d88b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d88ac:	bd08      	pop	{r3, pc}
        write(',');
   d88ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d88b0:	f7ff ff23 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
}
   d88b4:	e7fa      	b.n	d88ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d88b6:	213a      	movs	r1, #58	; 0x3a
   d88b8:	e7fa      	b.n	d88b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d88ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d88ba:	b510      	push	{r4, lr}
   d88bc:	4604      	mov	r4, r0
    writeSeparator();
   d88be:	f7ff ffef 	bl	d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d88c2:	4620      	mov	r0, r4
   d88c4:	217b      	movs	r1, #123	; 0x7b
   d88c6:	f7ff ff18 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d88ca:	2300      	movs	r3, #0
   d88cc:	7123      	strb	r3, [r4, #4]
}
   d88ce:	4620      	mov	r0, r4
   d88d0:	bd10      	pop	{r4, pc}
	...

000d88d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d88d4:	b513      	push	{r0, r1, r4, lr}
   d88d6:	4604      	mov	r4, r0
   d88d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d88da:	f7ff ffe1 	bl	d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d88de:	6823      	ldr	r3, [r4, #0]
   d88e0:	9a01      	ldr	r2, [sp, #4]
   d88e2:	68db      	ldr	r3, [r3, #12]
   d88e4:	4903      	ldr	r1, [pc, #12]	; (d88f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d88e6:	4620      	mov	r0, r4
   d88e8:	4798      	blx	r3
    state_ = NEXT;
   d88ea:	2301      	movs	r3, #1
}
   d88ec:	4620      	mov	r0, r4
    state_ = NEXT;
   d88ee:	7123      	strb	r3, [r4, #4]
}
   d88f0:	b002      	add	sp, #8
   d88f2:	bd10      	pop	{r4, pc}
   d88f4:	000de824 	.word	0x000de824

000d88f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d88f8:	b513      	push	{r0, r1, r4, lr}
   d88fa:	4604      	mov	r4, r0
   d88fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d88fe:	f7ff ffcf 	bl	d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8902:	6823      	ldr	r3, [r4, #0]
   d8904:	9a01      	ldr	r2, [sp, #4]
   d8906:	68db      	ldr	r3, [r3, #12]
   d8908:	4903      	ldr	r1, [pc, #12]	; (d8918 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d890a:	4620      	mov	r0, r4
   d890c:	4798      	blx	r3
    state_ = NEXT;
   d890e:	2301      	movs	r3, #1
}
   d8910:	4620      	mov	r0, r4
    state_ = NEXT;
   d8912:	7123      	strb	r3, [r4, #4]
}
   d8914:	b002      	add	sp, #8
   d8916:	bd10      	pop	{r4, pc}
   d8918:	000de6e0 	.word	0x000de6e0

000d891c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8920:	460d      	mov	r5, r1
   d8922:	4617      	mov	r7, r2
    write('"');
   d8924:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8926:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d89c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d892a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d892c:	442f      	add	r7, r5
    write('"');
   d892e:	f7ff fee4 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d8932:	4629      	mov	r1, r5
    while (s != end) {
   d8934:	42bd      	cmp	r5, r7
   d8936:	462a      	mov	r2, r5
   d8938:	d038      	beq.n	d89ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d893a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d893e:	2e22      	cmp	r6, #34	; 0x22
   d8940:	d003      	beq.n	d894a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8942:	2e5c      	cmp	r6, #92	; 0x5c
   d8944:	d001      	beq.n	d894a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8946:	2e1f      	cmp	r6, #31
   d8948:	d8f4      	bhi.n	d8934 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d894a:	6823      	ldr	r3, [r4, #0]
   d894c:	1a52      	subs	r2, r2, r1
   d894e:	689b      	ldr	r3, [r3, #8]
   d8950:	4620      	mov	r0, r4
   d8952:	4798      	blx	r3
            write('\\');
   d8954:	215c      	movs	r1, #92	; 0x5c
   d8956:	4620      	mov	r0, r4
   d8958:	f7ff fecf 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d895c:	2e0d      	cmp	r6, #13
   d895e:	d80a      	bhi.n	d8976 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8960:	2e07      	cmp	r6, #7
   d8962:	d91c      	bls.n	d899e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8964:	f1a6 0308 	sub.w	r3, r6, #8
   d8968:	2b05      	cmp	r3, #5
   d896a:	d818      	bhi.n	d899e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d896c:	e8df f003 	tbb	[pc, r3]
   d8970:	17110f0d 	.word	0x17110f0d
   d8974:	1513      	.short	0x1513
   d8976:	2e22      	cmp	r6, #34	; 0x22
   d8978:	d001      	beq.n	d897e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d897a:	2e5c      	cmp	r6, #92	; 0x5c
   d897c:	d10f      	bne.n	d899e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d897e:	4631      	mov	r1, r6
                write('b');
   d8980:	4620      	mov	r0, r4
   d8982:	f7ff feba 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8986:	4629      	mov	r1, r5
    while (s != end) {
   d8988:	e7d4      	b.n	d8934 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d898a:	2162      	movs	r1, #98	; 0x62
   d898c:	e7f8      	b.n	d8980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d898e:	2174      	movs	r1, #116	; 0x74
   d8990:	e7f6      	b.n	d8980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8992:	216e      	movs	r1, #110	; 0x6e
   d8994:	e7f4      	b.n	d8980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8996:	2166      	movs	r1, #102	; 0x66
   d8998:	e7f2      	b.n	d8980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d899a:	2172      	movs	r1, #114	; 0x72
   d899c:	e7f0      	b.n	d8980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d899e:	6823      	ldr	r3, [r4, #0]
   d89a0:	4632      	mov	r2, r6
   d89a2:	68db      	ldr	r3, [r3, #12]
   d89a4:	4641      	mov	r1, r8
   d89a6:	4620      	mov	r0, r4
   d89a8:	4798      	blx	r3
                break;
   d89aa:	e7ec      	b.n	d8986 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d89ac:	428d      	cmp	r5, r1
   d89ae:	d004      	beq.n	d89ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d89b0:	6823      	ldr	r3, [r4, #0]
   d89b2:	1a6a      	subs	r2, r5, r1
   d89b4:	689b      	ldr	r3, [r3, #8]
   d89b6:	4620      	mov	r0, r4
   d89b8:	4798      	blx	r3
    }
    write('"');
   d89ba:	2122      	movs	r1, #34	; 0x22
   d89bc:	4620      	mov	r0, r4
   d89be:	f7ff fe9c 	bl	d86fa <_ZN5spark10JSONWriter5writeEc>
}
   d89c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89c6:	bf00      	nop
   d89c8:	000de6e3 	.word	0x000de6e3

000d89cc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d89cc:	b513      	push	{r0, r1, r4, lr}
   d89ce:	4604      	mov	r4, r0
   d89d0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d89d4:	f7ff ff64 	bl	d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d89d8:	4620      	mov	r0, r4
   d89da:	e9dd 2100 	ldrd	r2, r1, [sp]
   d89de:	f7ff ff9d 	bl	d891c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d89e2:	2302      	movs	r3, #2
}
   d89e4:	4620      	mov	r0, r4
    state_ = VALUE;
   d89e6:	7123      	strb	r3, [r4, #4]
}
   d89e8:	b002      	add	sp, #8
   d89ea:	bd10      	pop	{r4, pc}

000d89ec <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d89ec:	b513      	push	{r0, r1, r4, lr}
   d89ee:	4604      	mov	r4, r0
   d89f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d89f4:	f7ff ff54 	bl	d88a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d89f8:	4620      	mov	r0, r4
   d89fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d89fe:	f7ff ff8d 	bl	d891c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8a02:	2301      	movs	r3, #1
}
   d8a04:	4620      	mov	r0, r4
    state_ = NEXT;
   d8a06:	7123      	strb	r3, [r4, #4]
}
   d8a08:	b002      	add	sp, #8
   d8a0a:	bd10      	pop	{r4, pc}

000d8a0c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8a0c:	6880      	ldr	r0, [r0, #8]
   d8a0e:	6803      	ldr	r3, [r0, #0]
   d8a10:	68db      	ldr	r3, [r3, #12]
   d8a12:	4718      	bx	r3

000d8a14 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8a14:	4770      	bx	lr

000d8a16 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8a16:	4608      	mov	r0, r1
   d8a18:	b111      	cbz	r1, d8a20 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8a1a:	680b      	ldr	r3, [r1, #0]
   d8a1c:	685b      	ldr	r3, [r3, #4]
   d8a1e:	4718      	bx	r3
}
   d8a20:	4770      	bx	lr

000d8a22 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d8a22:	4770      	bx	lr

000d8a24 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8a24:	4770      	bx	lr

000d8a26 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8a26:	4770      	bx	lr

000d8a28 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8a28:	4770      	bx	lr

000d8a2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8a2a:	b538      	push	{r3, r4, r5, lr}
   d8a2c:	4604      	mov	r4, r0
   d8a2e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8a30:	6800      	ldr	r0, [r0, #0]
   d8a32:	212e      	movs	r1, #46	; 0x2e
   d8a34:	f003 fa77 	bl	dbf26 <strchrnul>
    size = s - category;
   d8a38:	6823      	ldr	r3, [r4, #0]
   d8a3a:	1ac3      	subs	r3, r0, r3
   d8a3c:	602b      	str	r3, [r5, #0]
    if (size) {
   d8a3e:	b123      	cbz	r3, d8a4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8a40:	7803      	ldrb	r3, [r0, #0]
   d8a42:	b103      	cbz	r3, d8a46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8a44:	3001      	adds	r0, #1
   d8a46:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a48:	6020      	str	r0, [r4, #0]
}
   d8a4a:	4618      	mov	r0, r3
   d8a4c:	bd38      	pop	{r3, r4, r5, pc}

000d8a4e <_ZN5spark16JSONStreamWriterD0Ev>:
   d8a4e:	b510      	push	{r4, lr}
   d8a50:	210c      	movs	r1, #12
   d8a52:	4604      	mov	r4, r0
   d8a54:	f002 fb14 	bl	db080 <_ZdlPvj>
   d8a58:	4620      	mov	r0, r4
   d8a5a:	bd10      	pop	{r4, pc}

000d8a5c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8a5c:	b510      	push	{r4, lr}
   d8a5e:	2104      	movs	r1, #4
   d8a60:	4604      	mov	r4, r0
   d8a62:	f002 fb0d 	bl	db080 <_ZdlPvj>
   d8a66:	4620      	mov	r0, r4
   d8a68:	bd10      	pop	{r4, pc}

000d8a6a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8a6a:	b510      	push	{r4, lr}
   d8a6c:	2104      	movs	r1, #4
   d8a6e:	4604      	mov	r4, r0
   d8a70:	f002 fb06 	bl	db080 <_ZdlPvj>
   d8a74:	4620      	mov	r0, r4
   d8a76:	bd10      	pop	{r4, pc}

000d8a78 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8a78:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8a7a:	f003 fa5e 	bl	dbf3a <strcmp>
}
   d8a7e:	fab0 f080 	clz	r0, r0
   d8a82:	0940      	lsrs	r0, r0, #5
   d8a84:	bd08      	pop	{r3, pc}

000d8a86 <__tcf_1>:
   d8a86:	4770      	bx	lr

000d8a88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8a88:	b510      	push	{r4, lr}
   d8a8a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8a8c:	f002 f928 	bl	dace0 <_Z16_fetch_usbserialv>
   d8a90:	4284      	cmp	r4, r0
   d8a92:	d010      	beq.n	d8ab6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8a94:	f002 f89c 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d8a98:	4284      	cmp	r4, r0
   d8a9a:	d105      	bne.n	d8aa8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8a9c:	f002 f898 	bl	dabd0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8aa4:	f002 b891 	b.w	dabca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8aa8:	b12c      	cbz	r4, d8ab6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8aaa:	6823      	ldr	r3, [r4, #0]
   d8aac:	4620      	mov	r0, r4
   d8aae:	685b      	ldr	r3, [r3, #4]
}
   d8ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8ab4:	4718      	bx	r3
   d8ab6:	bd10      	pop	{r4, pc}

000d8ab8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8ab8:	b513      	push	{r0, r1, r4, lr}
   d8aba:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8abc:	4608      	mov	r0, r1
   d8abe:	9101      	str	r1, [sp, #4]
   d8ac0:	f003 fa6b 	bl	dbf9a <strlen>
   d8ac4:	9901      	ldr	r1, [sp, #4]
   d8ac6:	4602      	mov	r2, r0
   d8ac8:	4620      	mov	r0, r4
}
   d8aca:	b002      	add	sp, #8
   d8acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8ad0:	f7ff bf8c 	b.w	d89ec <_ZN5spark10JSONWriter5valueEPKcj>

000d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8ad4:	b513      	push	{r0, r1, r4, lr}
   d8ad6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8ad8:	4608      	mov	r0, r1
   d8ada:	9101      	str	r1, [sp, #4]
   d8adc:	f003 fa5d 	bl	dbf9a <strlen>
   d8ae0:	6823      	ldr	r3, [r4, #0]
   d8ae2:	9901      	ldr	r1, [sp, #4]
   d8ae4:	68db      	ldr	r3, [r3, #12]
   d8ae6:	4602      	mov	r2, r0
   d8ae8:	4620      	mov	r0, r4
}
   d8aea:	b002      	add	sp, #8
   d8aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8af0:	4718      	bx	r3

000d8af2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8af2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8af4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8af6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8afa:	68db      	ldr	r3, [r3, #12]
   d8afc:	2201      	movs	r2, #1
   d8afe:	f10d 0107 	add.w	r1, sp, #7
   d8b02:	4798      	blx	r3
}
   d8b04:	b003      	add	sp, #12
   d8b06:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b0a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8b0a:	b40e      	push	{r1, r2, r3}
   d8b0c:	b503      	push	{r0, r1, lr}
   d8b0e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8b10:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8b12:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8b16:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8b18:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8b1a:	f001 f840 	bl	d9b9e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8b1e:	b002      	add	sp, #8
   d8b20:	f85d eb04 	ldr.w	lr, [sp], #4
   d8b24:	b003      	add	sp, #12
   d8b26:	4770      	bx	lr

000d8b28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8b2c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8b30:	f04f 0814 	mov.w	r8, #20
   d8b34:	fb08 f505 	mul.w	r5, r8, r5
   d8b38:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8b3a:	10ab      	asrs	r3, r5, #2
   d8b3c:	4d18      	ldr	r5, [pc, #96]	; (d8ba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8b3e:	4617      	mov	r7, r2
   d8b40:	435d      	muls	r5, r3
   d8b42:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8b44:	2d00      	cmp	r5, #0
   d8b46:	dd23      	ble.n	d8b90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8b48:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8b4a:	fb08 f006 	mul.w	r0, r8, r6
   d8b4e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8b52:	463a      	mov	r2, r7
   d8b54:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8b58:	5820      	ldr	r0, [r4, r0]
   d8b5a:	9101      	str	r1, [sp, #4]
   d8b5c:	455f      	cmp	r7, fp
   d8b5e:	bf28      	it	cs
   d8b60:	465a      	movcs	r2, fp
   d8b62:	f003 fa22 	bl	dbfaa <strncmp>
                if (cmp == 0) {
   d8b66:	9901      	ldr	r1, [sp, #4]
   d8b68:	2301      	movs	r3, #1
   d8b6a:	b978      	cbnz	r0, d8b8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8b6c:	455f      	cmp	r7, fp
   d8b6e:	d103      	bne.n	d8b78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8b70:	9a00      	ldr	r2, [sp, #0]
   d8b72:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8b74:	4635      	mov	r5, r6
   d8b76:	e7e5      	b.n	d8b44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8b78:	bf8c      	ite	hi
   d8b7a:	2001      	movhi	r0, #1
   d8b7c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8b7e:	2800      	cmp	r0, #0
   d8b80:	d0f8      	beq.n	d8b74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8b82:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8b84:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8b88:	3e01      	subs	r6, #1
   d8b8a:	e7f3      	b.n	d8b74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8b8c:	0fc0      	lsrs	r0, r0, #31
   d8b8e:	e7f6      	b.n	d8b7e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8b90:	eba4 0409 	sub.w	r4, r4, r9
}
   d8b94:	4802      	ldr	r0, [pc, #8]	; (d8ba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8b96:	10a4      	asrs	r4, r4, #2
   d8b98:	4360      	muls	r0, r4
   d8b9a:	b003      	add	sp, #12
   d8b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ba0:	cccccccd 	.word	0xcccccccd

000d8ba4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8ba6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8ba8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8baa:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8bac:	b30b      	cbz	r3, d8bf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8bae:	b301      	cbz	r1, d8bf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8bb0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8bb2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8bb6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8bb8:	a903      	add	r1, sp, #12
   d8bba:	a801      	add	r0, sp, #4
   d8bbc:	f7ff ff35 	bl	d8a2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8bc0:	4601      	mov	r1, r0
   d8bc2:	b1b0      	cbz	r0, d8bf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8bc4:	f10d 030b 	add.w	r3, sp, #11
   d8bc8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8bca:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8bce:	4620      	mov	r0, r4
   d8bd0:	f7ff ffaa 	bl	d8b28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8bd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8bd8:	b15b      	cbz	r3, d8bf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8bda:	6824      	ldr	r4, [r4, #0]
   d8bdc:	2314      	movs	r3, #20
   d8bde:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8be2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8be6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8bea:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8bec:	bfa8      	it	ge
   d8bee:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8bf0:	e7e2      	b.n	d8bb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8bf2:	4630      	mov	r0, r6
   d8bf4:	b004      	add	sp, #16
   d8bf6:	bd70      	pop	{r4, r5, r6, pc}

000d8bf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8bf8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8bfa:	4c09      	ldr	r4, [pc, #36]	; (d8c20 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8bfc:	7823      	ldrb	r3, [r4, #0]
   d8bfe:	f3bf 8f5b 	dmb	ish
   d8c02:	07db      	lsls	r3, r3, #31
   d8c04:	d409      	bmi.n	d8c1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8c06:	4620      	mov	r0, r4
   d8c08:	f7fb fa56 	bl	d40b8 <__cxa_guard_acquire>
   d8c0c:	b128      	cbz	r0, d8c1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8c0e:	4620      	mov	r0, r4
   d8c10:	f7fb fa57 	bl	d40c2 <__cxa_guard_release>
   d8c14:	4803      	ldr	r0, [pc, #12]	; (d8c24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8c16:	f003 f917 	bl	dbe48 <atexit>
}
   d8c1a:	4803      	ldr	r0, [pc, #12]	; (d8c28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8c1c:	bd10      	pop	{r4, pc}
   d8c1e:	bf00      	nop
   d8c20:	2003e580 	.word	0x2003e580
   d8c24:	000d8a23 	.word	0x000d8a23
   d8c28:	2003e01c 	.word	0x2003e01c

000d8c2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8c2c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8c2e:	4c09      	ldr	r4, [pc, #36]	; (d8c54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8c30:	7823      	ldrb	r3, [r4, #0]
   d8c32:	f3bf 8f5b 	dmb	ish
   d8c36:	07db      	lsls	r3, r3, #31
   d8c38:	d409      	bmi.n	d8c4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8c3a:	4620      	mov	r0, r4
   d8c3c:	f7fb fa3c 	bl	d40b8 <__cxa_guard_acquire>
   d8c40:	b128      	cbz	r0, d8c4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8c42:	4620      	mov	r0, r4
   d8c44:	f7fb fa3d 	bl	d40c2 <__cxa_guard_release>
   d8c48:	4803      	ldr	r0, [pc, #12]	; (d8c58 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8c4a:	f003 f8fd 	bl	dbe48 <atexit>
    return &factory;
}
   d8c4e:	4803      	ldr	r0, [pc, #12]	; (d8c5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8c50:	bd10      	pop	{r4, pc}
   d8c52:	bf00      	nop
   d8c54:	2003e584 	.word	0x2003e584
   d8c58:	000d8a87 	.word	0x000d8a87
   d8c5c:	2003e020 	.word	0x2003e020

000d8c60 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8c60:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8c62:	2500      	movs	r5, #0
   d8c64:	4604      	mov	r4, r0
   d8c66:	e9c0 5500 	strd	r5, r5, [r0]
   d8c6a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8c6e:	6085      	str	r5, [r0, #8]
   d8c70:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8c72:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8c76:	f7fe fb93 	bl	d73a0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8c7a:	f7ff ffbd 	bl	d8bf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8c7e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8c80:	f7ff ffd4 	bl	d8c2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8c84:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8c86:	6220      	str	r0, [r4, #32]
}
   d8c88:	4620      	mov	r0, r4
   d8c8a:	bd38      	pop	{r3, r4, r5, pc}

000d8c8c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8c8c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8c8e:	4c0a      	ldr	r4, [pc, #40]	; (d8cb8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8c90:	7823      	ldrb	r3, [r4, #0]
   d8c92:	f3bf 8f5b 	dmb	ish
   d8c96:	07db      	lsls	r3, r3, #31
   d8c98:	d40c      	bmi.n	d8cb4 <_ZN5spark10LogManager8instanceEv+0x28>
   d8c9a:	4620      	mov	r0, r4
   d8c9c:	f7fb fa0c 	bl	d40b8 <__cxa_guard_acquire>
   d8ca0:	b140      	cbz	r0, d8cb4 <_ZN5spark10LogManager8instanceEv+0x28>
   d8ca2:	4806      	ldr	r0, [pc, #24]	; (d8cbc <_ZN5spark10LogManager8instanceEv+0x30>)
   d8ca4:	f7ff ffdc 	bl	d8c60 <_ZN5spark10LogManagerC1Ev>
   d8ca8:	4620      	mov	r0, r4
   d8caa:	f7fb fa0a 	bl	d40c2 <__cxa_guard_release>
   d8cae:	4804      	ldr	r0, [pc, #16]	; (d8cc0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d8cb0:	f003 f8ca 	bl	dbe48 <atexit>
    return &mgr;
}
   d8cb4:	4801      	ldr	r0, [pc, #4]	; (d8cbc <_ZN5spark10LogManager8instanceEv+0x30>)
   d8cb6:	bd10      	pop	{r4, pc}
   d8cb8:	2003e57c 	.word	0x2003e57c
   d8cbc:	2003e58c 	.word	0x2003e58c
   d8cc0:	000d916d 	.word	0x000d916d

000d8cc4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8cc4:	4a02      	ldr	r2, [pc, #8]	; (d8cd0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8cc6:	4903      	ldr	r1, [pc, #12]	; (d8cd4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8cc8:	4803      	ldr	r0, [pc, #12]	; (d8cd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8cca:	2300      	movs	r3, #0
   d8ccc:	f7fe bd90 	b.w	d77f0 <log_set_callbacks>
   d8cd0:	000d8ff5 	.word	0x000d8ff5
   d8cd4:	000d8f81 	.word	0x000d8f81
   d8cd8:	000d8f01 	.word	0x000d8f01

000d8cdc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8cdc:	2300      	movs	r3, #0
   d8cde:	461a      	mov	r2, r3
   d8ce0:	4619      	mov	r1, r3
   d8ce2:	4618      	mov	r0, r3
   d8ce4:	f7fe bd84 	b.w	d77f0 <log_set_callbacks>

000d8ce8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d8cea:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8cec:	f851 3b04 	ldr.w	r3, [r1], #4
   d8cf0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8cf2:	4604      	mov	r4, r0
   d8cf4:	a801      	add	r0, sp, #4
   d8cf6:	f7fe feb0 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8cfa:	466a      	mov	r2, sp
   d8cfc:	4629      	mov	r1, r5
   d8cfe:	4620      	mov	r0, r4
   d8d00:	f7ff fd1e 	bl	d8740 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8d04:	a801      	add	r0, sp, #4
   d8d06:	f7fc ff30 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8d0a:	4620      	mov	r0, r4
   d8d0c:	b003      	add	sp, #12
   d8d0e:	bd30      	pop	{r4, r5, pc}

000d8d10 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d8d12:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d14:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d18:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8d1a:	4604      	mov	r4, r0
   d8d1c:	a801      	add	r0, sp, #4
   d8d1e:	f7fe fe9c 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8d22:	466a      	mov	r2, sp
   d8d24:	4629      	mov	r1, r5
   d8d26:	4620      	mov	r0, r4
   d8d28:	f7ff fd86 	bl	d8838 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8d2c:	a801      	add	r0, sp, #4
   d8d2e:	f7fc ff1c 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8d32:	4620      	mov	r0, r4
   d8d34:	b003      	add	sp, #12
   d8d36:	bd30      	pop	{r4, r5, pc}

000d8d38 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d8d3a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d3c:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d40:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8d42:	4604      	mov	r4, r0
   d8d44:	a801      	add	r0, sp, #4
   d8d46:	f7fe fe88 	bl	d7a5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d8d4a:	466a      	mov	r2, sp
   d8d4c:	4629      	mov	r1, r5
   d8d4e:	4620      	mov	r0, r4
   d8d50:	f7ff fd4e 	bl	d87f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8d54:	a801      	add	r0, sp, #4
   d8d56:	f7fc ff08 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8d5a:	4620      	mov	r0, r4
   d8d5c:	b003      	add	sp, #12
   d8d5e:	bd30      	pop	{r4, r5, pc}

000d8d60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8d60:	b570      	push	{r4, r5, r6, lr}
   d8d62:	b08a      	sub	sp, #40	; 0x28
   d8d64:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8d66:	4601      	mov	r1, r0
   d8d68:	a804      	add	r0, sp, #16
   d8d6a:	f7ff ffd1 	bl	d8d10 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8d6e:	4e14      	ldr	r6, [pc, #80]	; (d8dc0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8d70:	a804      	add	r0, sp, #16
   d8d72:	f7ff fd79 	bl	d8868 <_ZN5spark18JSONObjectIterator4nextEv>
   d8d76:	b1e8      	cbz	r0, d8db4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8d78:	a904      	add	r1, sp, #16
   d8d7a:	4668      	mov	r0, sp
   d8d7c:	f7ff ffdc 	bl	d8d38 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8d80:	9802      	ldr	r0, [sp, #8]
   d8d82:	4631      	mov	r1, r6
   d8d84:	f7ff fe78 	bl	d8a78 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8d88:	4604      	mov	r4, r0
   d8d8a:	b110      	cbz	r0, d8d92 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8d8c:	1e2c      	subs	r4, r5, #0
   d8d8e:	bf18      	it	ne
   d8d90:	2401      	movne	r4, #1
   d8d92:	a801      	add	r0, sp, #4
   d8d94:	f7fc fee9 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d98:	2c00      	cmp	r4, #0
   d8d9a:	d0e9      	beq.n	d8d70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8d9c:	a904      	add	r1, sp, #16
   d8d9e:	4668      	mov	r0, sp
   d8da0:	f7ff ffa2 	bl	d8ce8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8da4:	4668      	mov	r0, sp
   d8da6:	f7ff fd01 	bl	d87ac <_ZNK5spark9JSONValue5toIntEv>
   d8daa:	6028      	str	r0, [r5, #0]
   d8dac:	a801      	add	r0, sp, #4
   d8dae:	f7fc fedc 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8db2:	e7dd      	b.n	d8d70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8db4:	a805      	add	r0, sp, #20
   d8db6:	f7fc fed8 	bl	d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8dba:	b00a      	add	sp, #40	; 0x28
   d8dbc:	bd70      	pop	{r4, r5, r6, pc}
   d8dbe:	bf00      	nop
   d8dc0:	000de6e9 	.word	0x000de6e9

000d8dc4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8dc6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8dc8:	4620      	mov	r0, r4
   d8dca:	4912      	ldr	r1, [pc, #72]	; (d8e14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8dcc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8dce:	f003 f8b4 	bl	dbf3a <strcmp>
   d8dd2:	b948      	cbnz	r0, d8de8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8dd4:	f001 ff84 	bl	dace0 <_Z16_fetch_usbserialv>
   d8dd8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8ddc:	f001 ff70 	bl	dacc0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d8de0:	f001 ff7e 	bl	dace0 <_Z16_fetch_usbserialv>
}
   d8de4:	b003      	add	sp, #12
   d8de6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8de8:	490b      	ldr	r1, [pc, #44]	; (d8e18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8dea:	4620      	mov	r0, r4
   d8dec:	f003 f8a5 	bl	dbf3a <strcmp>
   d8df0:	b970      	cbnz	r0, d8e10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8df2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8df6:	a901      	add	r1, sp, #4
   d8df8:	4628      	mov	r0, r5
        int baud = 9600;
   d8dfa:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8dfc:	f7ff ffb0 	bl	d8d60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8e00:	f001 fee6 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d8e04:	9901      	ldr	r1, [sp, #4]
   d8e06:	f001 fedd 	bl	dabc4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8e0a:	f001 fee1 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   d8e0e:	e7e9      	b.n	d8de4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8e10:	2000      	movs	r0, #0
   d8e12:	e7e7      	b.n	d8de4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8e14:	000de6ee 	.word	0x000de6ee
   d8e18:	000de6f5 	.word	0x000de6f5

000d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8e1e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8e22:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e24:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8e26:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8e2a:	42ae      	cmp	r6, r5
   d8e2c:	d005      	beq.n	d8e3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8e2e:	f105 0008 	add.w	r0, r5, #8
   d8e32:	f7ff fff3 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8e36:	3514      	adds	r5, #20
   d8e38:	e7f7      	b.n	d8e2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8e3a:	6820      	ldr	r0, [r4, #0]
   d8e3c:	f7fe fdb6 	bl	d79ac <free>
}
   d8e40:	4620      	mov	r0, r4
   d8e42:	bd70      	pop	{r4, r5, r6, pc}

000d8e44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8e46:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e4a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8e4c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8e50:	42ae      	cmp	r6, r5
   d8e52:	d004      	beq.n	d8e5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8e54:	4628      	mov	r0, r5
   d8e56:	f000 ffb5 	bl	d9dc4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8e5a:	3510      	adds	r5, #16
   d8e5c:	e7f8      	b.n	d8e50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8e5e:	6820      	ldr	r0, [r4, #0]
   d8e60:	f7fe fda4 	bl	d79ac <free>
}
   d8e64:	4620      	mov	r0, r4
   d8e66:	bd70      	pop	{r4, r5, r6, pc}

000d8e68 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8e68:	b510      	push	{r4, lr}
   d8e6a:	4604      	mov	r4, r0
   d8e6c:	300c      	adds	r0, #12
   d8e6e:	f7ff ffd5 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8e72:	4620      	mov	r0, r4
   d8e74:	f7ff ffe6 	bl	d8e44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8e78:	4620      	mov	r0, r4
   d8e7a:	bd10      	pop	{r4, pc}

000d8e7c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8e7c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8e7e:	4b04      	ldr	r3, [pc, #16]	; (d8e90 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8e80:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8e82:	f840 3b04 	str.w	r3, [r0], #4
   d8e86:	f7ff ffef 	bl	d8e68 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8e8a:	4620      	mov	r0, r4
   d8e8c:	bd10      	pop	{r4, pc}
   d8e8e:	bf00      	nop
   d8e90:	000ddfe0 	.word	0x000ddfe0

000d8e94 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8e94:	b510      	push	{r4, lr}
   d8e96:	4604      	mov	r4, r0
   d8e98:	f7ff fff0 	bl	d8e7c <_ZN5spark16StreamLogHandlerD1Ev>
   d8e9c:	4620      	mov	r0, r4
   d8e9e:	2124      	movs	r1, #36	; 0x24
   d8ea0:	f002 f8ee 	bl	db080 <_ZdlPvj>
   d8ea4:	4620      	mov	r0, r4
   d8ea6:	bd10      	pop	{r4, pc}

000d8ea8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8ea8:	b510      	push	{r4, lr}
   d8eaa:	4b03      	ldr	r3, [pc, #12]	; (d8eb8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8eac:	6003      	str	r3, [r0, #0]
   d8eae:	4604      	mov	r4, r0
   d8eb0:	f7ff ffe4 	bl	d8e7c <_ZN5spark16StreamLogHandlerD1Ev>
   d8eb4:	4620      	mov	r0, r4
   d8eb6:	bd10      	pop	{r4, pc}
   d8eb8:	000de78c 	.word	0x000de78c

000d8ebc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8ebc:	b510      	push	{r4, lr}
   d8ebe:	4604      	mov	r4, r0
   d8ec0:	f7ff fff2 	bl	d8ea8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8ec4:	4620      	mov	r0, r4
   d8ec6:	2124      	movs	r1, #36	; 0x24
   d8ec8:	f002 f8da 	bl	db080 <_ZdlPvj>
   d8ecc:	4620      	mov	r0, r4
   d8ece:	bd10      	pop	{r4, pc}

000d8ed0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8ed0:	2200      	movs	r2, #0
   d8ed2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8ed6:	b510      	push	{r4, lr}
        capacity_(0) {
   d8ed8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8eda:	680c      	ldr	r4, [r1, #0]
   d8edc:	6004      	str	r4, [r0, #0]
   d8ede:	684c      	ldr	r4, [r1, #4]
   d8ee0:	6044      	str	r4, [r0, #4]
   d8ee2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8ee4:	600a      	str	r2, [r1, #0]
   d8ee6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8ee8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8eea:	608a      	str	r2, [r1, #8]
}
   d8eec:	bd10      	pop	{r4, pc}

000d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8eee:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8ef0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8ef2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8ef4:	6818      	ldr	r0, [r3, #0]
   d8ef6:	f7fe fa6b 	bl	d73d0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8efa:	4620      	mov	r0, r4
   d8efc:	bd10      	pop	{r4, pc}
	...

000d8f00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f04:	b087      	sub	sp, #28
   d8f06:	4680      	mov	r8, r0
   d8f08:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8f0a:	4b1c      	ldr	r3, [pc, #112]	; (d8f7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d8f0c:	685b      	ldr	r3, [r3, #4]
   d8f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8f12:	4689      	mov	r9, r1
   d8f14:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8f16:	b96b      	cbnz	r3, d8f34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d8f18:	f7ff feb8 	bl	d8c8c <_ZN5spark10LogManager8instanceEv>
   d8f1c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8f1e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d8f22:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8f24:	9305      	str	r3, [sp, #20]
   d8f26:	f7fe fa4b 	bl	d73c0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d8f2a:	7b23      	ldrb	r3, [r4, #12]
   d8f2c:	b12b      	cbz	r3, d8f3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d8f2e:	a805      	add	r0, sp, #20
   d8f30:	f7ff ffdd 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8f34:	b007      	add	sp, #28
   d8f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8f3a:	2301      	movs	r3, #1
   d8f3c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d8f3e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d8f42:	fa5f f989 	uxtb.w	r9, r9
   d8f46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8f4a:	45aa      	cmp	sl, r5
   d8f4c:	d012      	beq.n	d8f74 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d8f4e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d8f52:	4631      	mov	r1, r6
   d8f54:	1d38      	adds	r0, r7, #4
   d8f56:	f7ff fe25 	bl	d8ba4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8f5a:	4581      	cmp	r9, r0
   d8f5c:	d3f5      	bcc.n	d8f4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d8f5e:	683b      	ldr	r3, [r7, #0]
   d8f60:	9a03      	ldr	r2, [sp, #12]
   d8f62:	9200      	str	r2, [sp, #0]
   d8f64:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d8f68:	464a      	mov	r2, r9
   d8f6a:	4633      	mov	r3, r6
   d8f6c:	4641      	mov	r1, r8
   d8f6e:	4638      	mov	r0, r7
   d8f70:	47d8      	blx	fp
   d8f72:	e7ea      	b.n	d8f4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d8f74:	2300      	movs	r3, #0
   d8f76:	7323      	strb	r3, [r4, #12]
   d8f78:	e7d9      	b.n	d8f2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d8f7a:	bf00      	nop
   d8f7c:	e000ed00 	.word	0xe000ed00

000d8f80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f84:	469b      	mov	fp, r3
   d8f86:	4b1a      	ldr	r3, [pc, #104]	; (d8ff0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d8f88:	685b      	ldr	r3, [r3, #4]
   d8f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8f8e:	4680      	mov	r8, r0
   d8f90:	4689      	mov	r9, r1
   d8f92:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d8f94:	b96b      	cbnz	r3, d8fb2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d8f96:	f7ff fe79 	bl	d8c8c <_ZN5spark10LogManager8instanceEv>
   d8f9a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8f9c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d8fa0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8fa2:	9301      	str	r3, [sp, #4]
   d8fa4:	f7fe fa0c 	bl	d73c0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d8fa8:	7b23      	ldrb	r3, [r4, #12]
   d8faa:	b12b      	cbz	r3, d8fb8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d8fac:	a801      	add	r0, sp, #4
   d8fae:	f7ff ff9e 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d8fb2:	b003      	add	sp, #12
   d8fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d8fb8:	2301      	movs	r3, #1
   d8fba:	7323      	strb	r3, [r4, #12]
   d8fbc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d8fc0:	b2f6      	uxtb	r6, r6
   d8fc2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8fc6:	4555      	cmp	r5, sl
   d8fc8:	d00e      	beq.n	d8fe8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d8fca:	f855 7b04 	ldr.w	r7, [r5], #4
   d8fce:	4659      	mov	r1, fp
   d8fd0:	1d38      	adds	r0, r7, #4
   d8fd2:	f7ff fde7 	bl	d8ba4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8fd6:	4286      	cmp	r6, r0
   d8fd8:	d3f5      	bcc.n	d8fc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d8fda:	683b      	ldr	r3, [r7, #0]
   d8fdc:	464a      	mov	r2, r9
   d8fde:	68db      	ldr	r3, [r3, #12]
   d8fe0:	4641      	mov	r1, r8
   d8fe2:	4638      	mov	r0, r7
   d8fe4:	4798      	blx	r3
   d8fe6:	e7ee      	b.n	d8fc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d8fe8:	2300      	movs	r3, #0
   d8fea:	7323      	strb	r3, [r4, #12]
   d8fec:	e7de      	b.n	d8fac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d8fee:	bf00      	nop
   d8ff0:	e000ed00 	.word	0xe000ed00

000d8ff4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8ff8:	4b16      	ldr	r3, [pc, #88]	; (d9054 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d8ffa:	685b      	ldr	r3, [r3, #4]
   d8ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9000:	4605      	mov	r5, r0
   d9002:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9004:	bb1b      	cbnz	r3, d904e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9006:	f7ff fe41 	bl	d8c8c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d900a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d900e:	4604      	mov	r4, r0
   d9010:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9012:	9301      	str	r3, [sp, #4]
   d9014:	f7fe f9d4 	bl	d73c0 <os_mutex_recursive_lock>
   d9018:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d901c:	2446      	movs	r4, #70	; 0x46
   d901e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9022:	45b0      	cmp	r8, r6
   d9024:	d109      	bne.n	d903a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9026:	a801      	add	r0, sp, #4
   d9028:	f7ff ff61 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d902c:	42a5      	cmp	r5, r4
   d902e:	bfb4      	ite	lt
   d9030:	2000      	movlt	r0, #0
   d9032:	2001      	movge	r0, #1
}
   d9034:	b002      	add	sp, #8
   d9036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d903a:	f856 0b04 	ldr.w	r0, [r6], #4
   d903e:	4639      	mov	r1, r7
   d9040:	3004      	adds	r0, #4
   d9042:	f7ff fdaf 	bl	d8ba4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9046:	4284      	cmp	r4, r0
   d9048:	bfa8      	it	ge
   d904a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d904c:	e7e9      	b.n	d9022 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d904e:	2000      	movs	r0, #0
   d9050:	e7f0      	b.n	d9034 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9052:	bf00      	nop
   d9054:	e000ed00 	.word	0xe000ed00

000d9058 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9058:	b570      	push	{r4, r5, r6, lr}
   d905a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d905c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9060:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9062:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9066:	4282      	cmp	r2, r0
   d9068:	d007      	beq.n	d907a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d906a:	4601      	mov	r1, r0
            if (*p == value) {
   d906c:	681d      	ldr	r5, [r3, #0]
   d906e:	f851 6b04 	ldr.w	r6, [r1], #4
   d9072:	42ae      	cmp	r6, r5
   d9074:	d003      	beq.n	d907e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9076:	4608      	mov	r0, r1
   d9078:	e7f5      	b.n	d9066 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d907a:	2000      	movs	r0, #0
}
   d907c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d907e:	1a52      	subs	r2, r2, r1
   d9080:	f002 fefd 	bl	dbe7e <memmove>
    --size_;
   d9084:	6863      	ldr	r3, [r4, #4]
   d9086:	3b01      	subs	r3, #1
   d9088:	6063      	str	r3, [r4, #4]
    return true;
   d908a:	2001      	movs	r0, #1
   d908c:	e7f6      	b.n	d907c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d908e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d908e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9090:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9094:	4604      	mov	r4, r0
   d9096:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9098:	9101      	str	r1, [sp, #4]
   d909a:	9303      	str	r3, [sp, #12]
   d909c:	f7fe f990 	bl	d73c0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d90a0:	a901      	add	r1, sp, #4
   d90a2:	4620      	mov	r0, r4
   d90a4:	f7ff ffd8 	bl	d9058 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d90a8:	b118      	cbz	r0, d90b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d90aa:	6863      	ldr	r3, [r4, #4]
   d90ac:	b90b      	cbnz	r3, d90b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d90ae:	f7ff fe15 	bl	d8cdc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d90b2:	a803      	add	r0, sp, #12
   d90b4:	f7ff ff1b 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d90b8:	b004      	add	sp, #16
   d90ba:	bd10      	pop	{r4, pc}

000d90bc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d90bc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d90be:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d90c2:	2318      	movs	r3, #24
   d90c4:	4604      	mov	r4, r0
   d90c6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d90ca:	42ae      	cmp	r6, r5
   d90cc:	d015      	beq.n	d90fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d90ce:	f105 0110 	add.w	r1, r5, #16
   d90d2:	4620      	mov	r0, r4
   d90d4:	f7ff ffc0 	bl	d9058 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d90d8:	6863      	ldr	r3, [r4, #4]
   d90da:	b90b      	cbnz	r3, d90e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d90dc:	f7ff fdfe 	bl	d8cdc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d90e0:	69e0      	ldr	r0, [r4, #28]
   d90e2:	6929      	ldr	r1, [r5, #16]
   d90e4:	6803      	ldr	r3, [r0, #0]
   d90e6:	68db      	ldr	r3, [r3, #12]
   d90e8:	4798      	blx	r3
        if (h.stream) {
   d90ea:	6969      	ldr	r1, [r5, #20]
   d90ec:	b119      	cbz	r1, d90f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d90ee:	6a20      	ldr	r0, [r4, #32]
   d90f0:	6803      	ldr	r3, [r0, #0]
   d90f2:	68db      	ldr	r3, [r3, #12]
   d90f4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d90f6:	3518      	adds	r5, #24
   d90f8:	e7e7      	b.n	d90ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d90fa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d90fe:	2618      	movs	r6, #24
   d9100:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9104:	42ae      	cmp	r6, r5
   d9106:	d004      	beq.n	d9112 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9108:	4628      	mov	r0, r5
   d910a:	f000 fe5b 	bl	d9dc4 <_ZN6StringD1Ev>
   d910e:	3518      	adds	r5, #24
   d9110:	e7f8      	b.n	d9104 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9112:	2300      	movs	r3, #0
   d9114:	6163      	str	r3, [r4, #20]
}
   d9116:	bd70      	pop	{r4, r5, r6, pc}

000d9118 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9118:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d911a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d911c:	f7ff fdde 	bl	d8cdc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9120:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9124:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9126:	9301      	str	r3, [sp, #4]
   d9128:	f7fe f94a 	bl	d73c0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d912c:	4620      	mov	r0, r4
   d912e:	f7ff ffc5 	bl	d90bc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9132:	a801      	add	r0, sp, #4
   d9134:	f7ff fedb 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9138:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d913a:	b108      	cbz	r0, d9140 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d913c:	f7fe f938 	bl	d73b0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9140:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9144:	2618      	movs	r6, #24
   d9146:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d914a:	42ae      	cmp	r6, r5
   d914c:	d004      	beq.n	d9158 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d914e:	4628      	mov	r0, r5
   d9150:	f000 fe38 	bl	d9dc4 <_ZN6StringD1Ev>
   d9154:	3518      	adds	r5, #24
   d9156:	e7f8      	b.n	d914a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9158:	6920      	ldr	r0, [r4, #16]
   d915a:	f7fe fc27 	bl	d79ac <free>
   d915e:	6820      	ldr	r0, [r4, #0]
   d9160:	f7fe fc24 	bl	d79ac <free>
}
   d9164:	4620      	mov	r0, r4
   d9166:	b002      	add	sp, #8
   d9168:	bd70      	pop	{r4, r5, r6, pc}
	...

000d916c <__tcf_2>:
    static LogManager mgr;
   d916c:	4801      	ldr	r0, [pc, #4]	; (d9174 <__tcf_2+0x8>)
   d916e:	f7ff bfd3 	b.w	d9118 <_ZN5spark10LogManagerD1Ev>
   d9172:	bf00      	nop
   d9174:	2003e58c 	.word	0x2003e58c

000d9178 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9178:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d917a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d917c:	4606      	mov	r6, r0
   d917e:	460c      	mov	r4, r1
   d9180:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9182:	d927      	bls.n	d91d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9184:	4290      	cmp	r0, r2
   d9186:	d226      	bcs.n	d91d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9188:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d918c:	1a6c      	subs	r4, r5, r1
   d918e:	f1a1 0714 	sub.w	r7, r1, #20
   d9192:	4404      	add	r4, r0
        capacity_(0) {
   d9194:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9196:	42af      	cmp	r7, r5
   d9198:	d03d      	beq.n	d9216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d919a:	b1a4      	cbz	r4, d91c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d919c:	682b      	ldr	r3, [r5, #0]
   d919e:	6023      	str	r3, [r4, #0]
   d91a0:	88ab      	ldrh	r3, [r5, #4]
   d91a2:	80a3      	strh	r3, [r4, #4]
   d91a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d91a8:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d91aa:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d91ae:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d91b0:	68ab      	ldr	r3, [r5, #8]
   d91b2:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d91b4:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d91b6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d91b8:	68ea      	ldr	r2, [r5, #12]
   d91ba:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d91bc:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d91be:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d91c0:	692a      	ldr	r2, [r5, #16]
   d91c2:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d91c4:	612b      	str	r3, [r5, #16]
   d91c6:	f105 0008 	add.w	r0, r5, #8
   d91ca:	f7ff fe27 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d91ce:	3d14      	subs	r5, #20
   d91d0:	3c14      	subs	r4, #20
   d91d2:	e7e0      	b.n	d9196 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d91d4:	d01f      	beq.n	d9216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d91d6:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d91d8:	42ac      	cmp	r4, r5
   d91da:	d01c      	beq.n	d9216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d91dc:	b1a6      	cbz	r6, d9208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d91de:	6823      	ldr	r3, [r4, #0]
   d91e0:	6033      	str	r3, [r6, #0]
   d91e2:	88a3      	ldrh	r3, [r4, #4]
   d91e4:	80b3      	strh	r3, [r6, #4]
   d91e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d91ea:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d91ec:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d91f0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d91f2:	68a3      	ldr	r3, [r4, #8]
   d91f4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d91f6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d91f8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d91fa:	68e2      	ldr	r2, [r4, #12]
   d91fc:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d91fe:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9200:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9202:	6922      	ldr	r2, [r4, #16]
   d9204:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9206:	6123      	str	r3, [r4, #16]
   d9208:	f104 0008 	add.w	r0, r4, #8
   d920c:	f7ff fe06 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9210:	3414      	adds	r4, #20
   d9212:	3614      	adds	r6, #20
   d9214:	e7e0      	b.n	d91d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9218 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d921a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d921e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9220:	4604      	mov	r4, r0
   d9222:	460e      	mov	r6, r1
   d9224:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9226:	db0d      	blt.n	d9244 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9228:	3501      	adds	r5, #1
        if (n > 0) {
   d922a:	2d00      	cmp	r5, #0
   d922c:	6800      	ldr	r0, [r0, #0]
   d922e:	dd04      	ble.n	d923a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9230:	00a9      	lsls	r1, r5, #2
   d9232:	f7fe fbc3 	bl	d79bc <realloc>
            if (!d) {
   d9236:	b918      	cbnz	r0, d9240 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d923a:	f7fe fbb7 	bl	d79ac <free>
        T* d = nullptr;
   d923e:	2000      	movs	r0, #0
        data_ = d;
   d9240:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9242:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9244:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9246:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9248:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d924c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d924e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9252:	1d08      	adds	r0, r1, #4
   d9254:	f002 fe13 	bl	dbe7e <memmove>
    new(p) T(std::move(value));
   d9258:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d925c:	6863      	ldr	r3, [r4, #4]
   d925e:	3301      	adds	r3, #1
   d9260:	6063      	str	r3, [r4, #4]
    return true;
   d9262:	2001      	movs	r0, #1
   d9264:	e7e8      	b.n	d9238 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9266 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9266:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9268:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d926c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d926e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9270:	9301      	str	r3, [sp, #4]
   d9272:	460d      	mov	r5, r1
   d9274:	f7fe f8a4 	bl	d73c0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9278:	e9d4 3100 	ldrd	r3, r1, [r4]
   d927c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9280:	4283      	cmp	r3, r0
   d9282:	461a      	mov	r2, r3
   d9284:	d00b      	beq.n	d929e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9286:	6812      	ldr	r2, [r2, #0]
   d9288:	42aa      	cmp	r2, r5
   d928a:	f103 0304 	add.w	r3, r3, #4
   d928e:	d1f7      	bne.n	d9280 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9290:	a801      	add	r0, sp, #4
   d9292:	f7ff fe2c 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9296:	2500      	movs	r5, #0
}
   d9298:	4628      	mov	r0, r5
   d929a:	b003      	add	sp, #12
   d929c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d929e:	462a      	mov	r2, r5
   d92a0:	4620      	mov	r0, r4
   d92a2:	f7ff ffb9 	bl	d9218 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d92a6:	4605      	mov	r5, r0
   d92a8:	2800      	cmp	r0, #0
   d92aa:	d0f1      	beq.n	d9290 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d92ac:	6863      	ldr	r3, [r4, #4]
   d92ae:	2b01      	cmp	r3, #1
   d92b0:	d101      	bne.n	d92b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d92b2:	f7ff fd07 	bl	d8cc4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d92b6:	a801      	add	r0, sp, #4
   d92b8:	f7ff fe19 	bl	d8eee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d92bc:	e7ec      	b.n	d9298 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d92be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d92be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d92c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d92c2:	4604      	mov	r4, r0
   d92c4:	460d      	mov	r5, r1
   d92c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d92c8:	d914      	bls.n	d92f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d92ca:	4290      	cmp	r0, r2
   d92cc:	d213      	bcs.n	d92f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d92ce:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d92d2:	1a75      	subs	r5, r6, r1
   d92d4:	f1a1 0710 	sub.w	r7, r1, #16
   d92d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d92da:	42b7      	cmp	r7, r6
   d92dc:	d018      	beq.n	d9310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d92de:	b11c      	cbz	r4, d92e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d92e0:	4631      	mov	r1, r6
   d92e2:	4620      	mov	r0, r4
   d92e4:	f000 fdea 	bl	d9ebc <_ZN6StringC1EOS_>
                end->~T();
   d92e8:	4630      	mov	r0, r6
   d92ea:	f000 fd6b 	bl	d9dc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d92ee:	3e10      	subs	r6, #16
   d92f0:	3c10      	subs	r4, #16
   d92f2:	e7f2      	b.n	d92da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d92f4:	d00c      	beq.n	d9310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d92f6:	42b5      	cmp	r5, r6
   d92f8:	d00a      	beq.n	d9310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d92fa:	b11c      	cbz	r4, d9304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d92fc:	4629      	mov	r1, r5
   d92fe:	4620      	mov	r0, r4
   d9300:	f000 fddc 	bl	d9ebc <_ZN6StringC1EOS_>
                p->~T();
   d9304:	4628      	mov	r0, r5
   d9306:	f000 fd5d 	bl	d9dc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d930a:	3510      	adds	r5, #16
   d930c:	3410      	adds	r4, #16
   d930e:	e7f2      	b.n	d92f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9312 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9312:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9314:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9316:	4605      	mov	r5, r0
        if (n > 0) {
   d9318:	dd11      	ble.n	d933e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d931a:	0130      	lsls	r0, r6, #4
   d931c:	f7fe fb3e 	bl	d799c <malloc>
            if (!d) {
   d9320:	4604      	mov	r4, r0
   d9322:	b158      	cbz	r0, d933c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9324:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9328:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d932c:	f7ff ffc7 	bl	d92be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9330:	6828      	ldr	r0, [r5, #0]
   d9332:	f7fe fb3b 	bl	d79ac <free>
        data_ = d;
   d9336:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9338:	60ae      	str	r6, [r5, #8]
        return true;
   d933a:	2001      	movs	r0, #1
    }
   d933c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d933e:	2400      	movs	r4, #0
   d9340:	e7f6      	b.n	d9330 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9346:	4691      	mov	r9, r2
   d9348:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d934a:	2300      	movs	r3, #0
   d934c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d934e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9352:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9354:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9356:	4299      	cmp	r1, r3
        capacity_(0) {
   d9358:	e9c0 3300 	strd	r3, r3, [r0]
   d935c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9360:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9364:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9368:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d936a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d936c:	dc23      	bgt.n	d93b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d936e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9372:	2314      	movs	r3, #20
   d9374:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9378:	42af      	cmp	r7, r5
   d937a:	d03b      	beq.n	d93f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d937c:	4629      	mov	r1, r5
   d937e:	a80d      	add	r0, sp, #52	; 0x34
   d9380:	f000 fd9c 	bl	d9ebc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9384:	a90d      	add	r1, sp, #52	; 0x34
   d9386:	a811      	add	r0, sp, #68	; 0x44
   d9388:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d938a:	f000 fd97 	bl	d9ebc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d938e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9392:	4299      	cmp	r1, r3
   d9394:	da1b      	bge.n	d93ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d939a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d939e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d93a2:	4631      	mov	r1, r6
   d93a4:	f106 0010 	add.w	r0, r6, #16
   d93a8:	f7ff ff89 	bl	d92be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d93ac:	b9ee      	cbnz	r6, d93ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d93ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d93b0:	3301      	adds	r3, #1
   d93b2:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d93b4:	e011      	b.n	d93da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d93b6:	a80a      	add	r0, sp, #40	; 0x28
   d93b8:	f7ff ffab 	bl	d9312 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d93bc:	2800      	cmp	r0, #0
   d93be:	d1d6      	bne.n	d936e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d93c0:	a80a      	add	r0, sp, #40	; 0x28
   d93c2:	f7ff fd3f 	bl	d8e44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d93c6:	4620      	mov	r0, r4
   d93c8:	b017      	add	sp, #92	; 0x5c
   d93ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d93ce:	3101      	adds	r1, #1
   d93d0:	a80a      	add	r0, sp, #40	; 0x28
   d93d2:	f7ff ff9e 	bl	d9312 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d93d6:	2800      	cmp	r0, #0
   d93d8:	d1dd      	bne.n	d9396 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d93da:	a811      	add	r0, sp, #68	; 0x44
   d93dc:	f000 fcf2 	bl	d9dc4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d93e0:	a80d      	add	r0, sp, #52	; 0x34
   d93e2:	f000 fcef 	bl	d9dc4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d93e6:	3514      	adds	r5, #20
   d93e8:	e7c6      	b.n	d9378 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d93ea:	a911      	add	r1, sp, #68	; 0x44
   d93ec:	4630      	mov	r0, r6
   d93ee:	f000 fd65 	bl	d9ebc <_ZN6StringC1EOS_>
   d93f2:	e7dc      	b.n	d93ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d93f4:	2600      	movs	r6, #0
   d93f6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d93fa:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d93fc:	4637      	mov	r7, r6
   d93fe:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9406:	429e      	cmp	r6, r3
   d9408:	f280 8097 	bge.w	d953a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d940c:	0133      	lsls	r3, r6, #4
   d940e:	58d3      	ldr	r3, [r2, r3]
   d9410:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9412:	b90b      	cbnz	r3, d9418 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9414:	3601      	adds	r6, #1
   d9416:	e7f4      	b.n	d9402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9418:	fb0a f306 	mul.w	r3, sl, r6
   d941c:	9709      	str	r7, [sp, #36]	; 0x24
   d941e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9420:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9422:	a909      	add	r1, sp, #36	; 0x24
   d9424:	a808      	add	r0, sp, #32
   d9426:	f7ff fb00 	bl	d8a2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d942a:	4683      	mov	fp, r0
   d942c:	2800      	cmp	r0, #0
   d942e:	d0f1      	beq.n	d9414 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9430:	4601      	mov	r1, r0
   d9432:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9434:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9438:	f10d 031f 	add.w	r3, sp, #31
   d943c:	4628      	mov	r0, r5
   d943e:	f7ff fb73 	bl	d8b28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9442:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9446:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9448:	f1b8 0f00 	cmp.w	r8, #0
   d944c:	d166      	bne.n	d951c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d944e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9452:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9456:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d945a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d945e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9462:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9466:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d946a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d946e:	4293      	cmp	r3, r2
   d9470:	db1a      	blt.n	d94a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9472:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9476:	f1bb 0f00 	cmp.w	fp, #0
   d947a:	dd4a      	ble.n	d9512 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d947c:	fb0a f00b 	mul.w	r0, sl, fp
   d9480:	f7fe fa8c 	bl	d799c <malloc>
            if (!d) {
   d9484:	9004      	str	r0, [sp, #16]
   d9486:	2800      	cmp	r0, #0
   d9488:	d045      	beq.n	d9516 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d948a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d948e:	fb0a 1202 	mla	r2, sl, r2, r1
   d9492:	f7ff fe71 	bl	d9178 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9496:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9498:	6828      	ldr	r0, [r5, #0]
   d949a:	9304      	str	r3, [sp, #16]
   d949c:	f7fe fa86 	bl	d79ac <free>
        data_ = d;
   d94a0:	9b04      	ldr	r3, [sp, #16]
   d94a2:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d94a4:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d94a8:	9b01      	ldr	r3, [sp, #4]
   d94aa:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d94ae:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d94b0:	fb0a f303 	mul.w	r3, sl, r3
   d94b4:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d94b8:	f101 0014 	add.w	r0, r1, #20
   d94bc:	fb0a b202 	mla	r2, sl, r2, fp
   d94c0:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d94c2:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d94c4:	f7ff fe58 	bl	d9178 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d94c8:	9904      	ldr	r1, [sp, #16]
   d94ca:	b1a9      	cbz	r1, d94f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d94cc:	9b05      	ldr	r3, [sp, #20]
   d94ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d94d0:	f84b 2003 	str.w	r2, [fp, r3]
   d94d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d94d8:	808b      	strh	r3, [r1, #4]
   d94da:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d94de:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d94e0:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d94e4:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d94e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d94e8:	608b      	str	r3, [r1, #8]
   d94ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d94ec:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d94ee:	60cb      	str	r3, [r1, #12]
   d94f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d94f2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d94f4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d94f6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d94f8:	686b      	ldr	r3, [r5, #4]
   d94fa:	3301      	adds	r3, #1
   d94fc:	606b      	str	r3, [r5, #4]
   d94fe:	a813      	add	r0, sp, #76	; 0x4c
   d9500:	f7ff fc8c 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9504:	f1b8 0f00 	cmp.w	r8, #0
   d9508:	d008      	beq.n	d951c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d950a:	a80d      	add	r0, sp, #52	; 0x34
   d950c:	f7ff fc86 	bl	d8e1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9510:	e756      	b.n	d93c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d9512:	4643      	mov	r3, r8
   d9514:	e7c0      	b.n	d9498 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9516:	f04f 0801 	mov.w	r8, #1
   d951a:	e7f0      	b.n	d94fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d951c:	9b01      	ldr	r3, [sp, #4]
   d951e:	682d      	ldr	r5, [r5, #0]
   d9520:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9524:	9b08      	ldr	r3, [sp, #32]
   d9526:	781b      	ldrb	r3, [r3, #0]
   d9528:	b92b      	cbnz	r3, d9536 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d952a:	f8d9 3000 	ldr.w	r3, [r9]
   d952e:	9a02      	ldr	r2, [sp, #8]
   d9530:	4413      	add	r3, r2
   d9532:	7c1b      	ldrb	r3, [r3, #16]
   d9534:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d9536:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9538:	e773      	b.n	d9422 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d953a:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d953c:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d953e:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9540:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9542:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9544:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d9546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9548:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d954a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d954c:	60a2      	str	r2, [r4, #8]
   d954e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9550:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9552:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9554:	60e2      	str	r2, [r4, #12]
   d9556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9558:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d955a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d955c:	6122      	str	r2, [r4, #16]
   d955e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9560:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9562:	9b03      	ldr	r3, [sp, #12]
   d9564:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d9566:	6162      	str	r2, [r4, #20]
   d9568:	7623      	strb	r3, [r4, #24]
   d956a:	e7ce      	b.n	d950a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d956c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d956c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d956e:	4605      	mov	r5, r0
   d9570:	4b09      	ldr	r3, [pc, #36]	; (d9598 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9572:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9576:	4604      	mov	r4, r0
   d9578:	460e      	mov	r6, r1
        filter_(level, filters) {
   d957a:	a801      	add	r0, sp, #4
   d957c:	4611      	mov	r1, r2
   d957e:	f7fb f991 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9582:	aa01      	add	r2, sp, #4
   d9584:	4631      	mov	r1, r6
   d9586:	4628      	mov	r0, r5
   d9588:	f7ff fedb 	bl	d9342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d958c:	a801      	add	r0, sp, #4
   d958e:	f7fa ff4b 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9592:	4620      	mov	r0, r4
   d9594:	b004      	add	sp, #16
   d9596:	bd70      	pop	{r4, r5, r6, pc}
   d9598:	000ddfe0 	.word	0x000ddfe0

000d959c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d959c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d959e:	460f      	mov	r7, r1
   d95a0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d95a2:	4926      	ldr	r1, [pc, #152]	; (d963c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d95a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d95a6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d95a8:	4616      	mov	r6, r2
   d95aa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d95ac:	f002 fcc5 	bl	dbf3a <strcmp>
   d95b0:	bb00      	cbnz	r0, d95f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d95b2:	b1e4      	cbz	r4, d95ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d95b4:	4629      	mov	r1, r5
   d95b6:	4668      	mov	r0, sp
   d95b8:	f7ff fc8a 	bl	d8ed0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d95bc:	4920      	ldr	r1, [pc, #128]	; (d9640 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d95be:	2024      	movs	r0, #36	; 0x24
   d95c0:	f001 fd60 	bl	db084 <_ZnwjRKSt9nothrow_t>
   d95c4:	4605      	mov	r5, r0
   d95c6:	b170      	cbz	r0, d95e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d95c8:	4669      	mov	r1, sp
   d95ca:	a803      	add	r0, sp, #12
   d95cc:	f7fb f96a 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d95d0:	aa03      	add	r2, sp, #12
   d95d2:	4631      	mov	r1, r6
   d95d4:	4628      	mov	r0, r5
   d95d6:	f7ff ffc9 	bl	d956c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d95da:	a803      	add	r0, sp, #12
   d95dc:	f7fa ff24 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d95e0:	4b18      	ldr	r3, [pc, #96]	; (d9644 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d95e2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d95e4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d95e6:	4668      	mov	r0, sp
   d95e8:	f7fa ff1e 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d95ec:	462c      	mov	r4, r5
}
   d95ee:	4620      	mov	r0, r4
   d95f0:	b007      	add	sp, #28
   d95f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d95f4:	4914      	ldr	r1, [pc, #80]	; (d9648 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d95f6:	4638      	mov	r0, r7
   d95f8:	f002 fc9f 	bl	dbf3a <strcmp>
   d95fc:	b9e0      	cbnz	r0, d9638 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d95fe:	2c00      	cmp	r4, #0
   d9600:	d0f5      	beq.n	d95ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9602:	4629      	mov	r1, r5
   d9604:	4668      	mov	r0, sp
   d9606:	f7ff fc63 	bl	d8ed0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d960a:	490d      	ldr	r1, [pc, #52]	; (d9640 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d960c:	2024      	movs	r0, #36	; 0x24
   d960e:	f001 fd39 	bl	db084 <_ZnwjRKSt9nothrow_t>
   d9612:	4605      	mov	r5, r0
   d9614:	2800      	cmp	r0, #0
   d9616:	d0e6      	beq.n	d95e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9618:	4669      	mov	r1, sp
   d961a:	a803      	add	r0, sp, #12
   d961c:	f7fb f942 	bl	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9620:	aa03      	add	r2, sp, #12
   d9622:	4631      	mov	r1, r6
   d9624:	4628      	mov	r0, r5
   d9626:	f7ff ffa1 	bl	d956c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d962a:	a803      	add	r0, sp, #12
   d962c:	f7fa fefc 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9630:	4b06      	ldr	r3, [pc, #24]	; (d964c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d9632:	602b      	str	r3, [r5, #0]
   d9634:	622c      	str	r4, [r5, #32]
}
   d9636:	e7d6      	b.n	d95e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d9638:	2400      	movs	r4, #0
   d963a:	e7d8      	b.n	d95ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d963c:	000de6fd 	.word	0x000de6fd
   d9640:	000de97c 	.word	0x000de97c
   d9644:	000de78c 	.word	0x000de78c
   d9648:	000de701 	.word	0x000de701
   d964c:	000de774 	.word	0x000de774

000d9650 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9650:	4b01      	ldr	r3, [pc, #4]	; (d9658 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9652:	4a02      	ldr	r2, [pc, #8]	; (d965c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9654:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9656:	4770      	bx	lr
   d9658:	2003e588 	.word	0x2003e588
   d965c:	000de712 	.word	0x000de712

000d9660 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9664:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d9666:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d966a:	4604      	mov	r4, r0
   d966c:	460e      	mov	r6, r1
   d966e:	4617      	mov	r7, r2
   d9670:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9672:	f001 fb35 	bl	dace0 <_Z16_fetch_usbserialv>
   d9676:	4581      	cmp	r9, r0
   d9678:	d04c      	beq.n	d9714 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d967a:	792b      	ldrb	r3, [r5, #4]
   d967c:	0719      	lsls	r1, r3, #28
   d967e:	d504      	bpl.n	d968a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9680:	696a      	ldr	r2, [r5, #20]
   d9682:	4954      	ldr	r1, [pc, #336]	; (d97d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9684:	4620      	mov	r0, r4
   d9686:	f7ff fa40 	bl	d8b0a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d968a:	f1b8 0f00 	cmp.w	r8, #0
   d968e:	d00d      	beq.n	d96ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9690:	215b      	movs	r1, #91	; 0x5b
   d9692:	4620      	mov	r0, r4
   d9694:	f7ff fa2d 	bl	d8af2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d9698:	4641      	mov	r1, r8
   d969a:	4620      	mov	r0, r4
   d969c:	f7ff fa1a 	bl	d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d96a0:	6823      	ldr	r3, [r4, #0]
   d96a2:	494d      	ldr	r1, [pc, #308]	; (d97d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d96a4:	68db      	ldr	r3, [r3, #12]
   d96a6:	2202      	movs	r2, #2
   d96a8:	4620      	mov	r0, r4
   d96aa:	4798      	blx	r3
    if (attr.has_file) {
   d96ac:	792b      	ldrb	r3, [r5, #4]
   d96ae:	07da      	lsls	r2, r3, #31
   d96b0:	d523      	bpl.n	d96fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d96b2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d96b6:	212f      	movs	r1, #47	; 0x2f
   d96b8:	4640      	mov	r0, r8
   d96ba:	f002 fc9b 	bl	dbff4 <strrchr>
    if (s1) {
   d96be:	b108      	cbz	r0, d96c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d96c0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d96c4:	4641      	mov	r1, r8
   d96c6:	4620      	mov	r0, r4
   d96c8:	f7ff fa04 	bl	d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d96cc:	792b      	ldrb	r3, [r5, #4]
   d96ce:	079b      	lsls	r3, r3, #30
   d96d0:	d508      	bpl.n	d96e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d96d2:	213a      	movs	r1, #58	; 0x3a
   d96d4:	4620      	mov	r0, r4
   d96d6:	f7ff fa0c 	bl	d8af2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d96da:	68ea      	ldr	r2, [r5, #12]
   d96dc:	493f      	ldr	r1, [pc, #252]	; (d97dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d96de:	4620      	mov	r0, r4
   d96e0:	f7ff fa13 	bl	d8b0a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d96e4:	792a      	ldrb	r2, [r5, #4]
   d96e6:	6823      	ldr	r3, [r4, #0]
   d96e8:	f012 0f04 	tst.w	r2, #4
   d96ec:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d96ee:	bf14      	ite	ne
   d96f0:	493b      	ldrne	r1, [pc, #236]	; (d97e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d96f2:	493c      	ldreq	r1, [pc, #240]	; (d97e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d96f4:	2202      	movs	r2, #2
            write(": ", 2);
   d96f6:	4620      	mov	r0, r4
   d96f8:	4798      	blx	r3
    if (attr.has_function) {
   d96fa:	792b      	ldrb	r3, [r5, #4]
   d96fc:	0758      	lsls	r0, r3, #29
   d96fe:	d51d      	bpl.n	d973c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9700:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9702:	460b      	mov	r3, r1
   d9704:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d9706:	f813 0b01 	ldrb.w	r0, [r3], #1
   d970a:	b160      	cbz	r0, d9726 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d970c:	2820      	cmp	r0, #32
   d970e:	d108      	bne.n	d9722 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d9710:	4619      	mov	r1, r3
   d9712:	e7f7      	b.n	d9704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d9714:	4834      	ldr	r0, [pc, #208]	; (d97e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d9716:	f000 f966 	bl	d99e6 <_ZN5spark12NetworkClass9listeningEv>
   d971a:	2800      	cmp	r0, #0
   d971c:	d0ad      	beq.n	d967a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d9722:	2828      	cmp	r0, #40	; 0x28
   d9724:	d1ee      	bne.n	d9704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d9726:	6823      	ldr	r3, [r4, #0]
   d9728:	1a52      	subs	r2, r2, r1
   d972a:	68db      	ldr	r3, [r3, #12]
   d972c:	4620      	mov	r0, r4
   d972e:	4798      	blx	r3
        write("(): ", 4);
   d9730:	6823      	ldr	r3, [r4, #0]
   d9732:	492e      	ldr	r1, [pc, #184]	; (d97ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d9734:	68db      	ldr	r3, [r3, #12]
   d9736:	2204      	movs	r2, #4
   d9738:	4620      	mov	r0, r4
   d973a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d973c:	2100      	movs	r1, #0
   d973e:	4638      	mov	r0, r7
   d9740:	f7fe f84e 	bl	d77e0 <log_level_name>
   d9744:	4601      	mov	r1, r0
    write(s);
   d9746:	4620      	mov	r0, r4
   d9748:	f7ff f9c4 	bl	d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d974c:	6823      	ldr	r3, [r4, #0]
   d974e:	4925      	ldr	r1, [pc, #148]	; (d97e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9750:	68db      	ldr	r3, [r3, #12]
   d9752:	2202      	movs	r2, #2
   d9754:	4620      	mov	r0, r4
   d9756:	4798      	blx	r3
    if (msg) {
   d9758:	b11e      	cbz	r6, d9762 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d975a:	4631      	mov	r1, r6
   d975c:	4620      	mov	r0, r4
   d975e:	f7ff f9b9 	bl	d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9762:	792b      	ldrb	r3, [r5, #4]
   d9764:	f013 0f30 	tst.w	r3, #48	; 0x30
   d9768:	d02c      	beq.n	d97c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d976a:	6823      	ldr	r3, [r4, #0]
   d976c:	4920      	ldr	r1, [pc, #128]	; (d97f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d976e:	68db      	ldr	r3, [r3, #12]
   d9770:	2202      	movs	r2, #2
   d9772:	4620      	mov	r0, r4
   d9774:	4798      	blx	r3
        if (attr.has_code) {
   d9776:	792b      	ldrb	r3, [r5, #4]
   d9778:	06d9      	lsls	r1, r3, #27
   d977a:	d50a      	bpl.n	d9792 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d977c:	6823      	ldr	r3, [r4, #0]
   d977e:	491d      	ldr	r1, [pc, #116]	; (d97f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9780:	68db      	ldr	r3, [r3, #12]
   d9782:	2207      	movs	r2, #7
   d9784:	4620      	mov	r0, r4
   d9786:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d9788:	69aa      	ldr	r2, [r5, #24]
   d978a:	491b      	ldr	r1, [pc, #108]	; (d97f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d978c:	4620      	mov	r0, r4
   d978e:	f7ff f9bc 	bl	d8b0a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9792:	792b      	ldrb	r3, [r5, #4]
   d9794:	069a      	lsls	r2, r3, #26
   d9796:	d511      	bpl.n	d97bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d9798:	06db      	lsls	r3, r3, #27
   d979a:	d505      	bpl.n	d97a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d979c:	6823      	ldr	r3, [r4, #0]
   d979e:	4910      	ldr	r1, [pc, #64]	; (d97e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d97a0:	68db      	ldr	r3, [r3, #12]
   d97a2:	2202      	movs	r2, #2
   d97a4:	4620      	mov	r0, r4
   d97a6:	4798      	blx	r3
            write("details = ", 10);
   d97a8:	6823      	ldr	r3, [r4, #0]
   d97aa:	4914      	ldr	r1, [pc, #80]	; (d97fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d97ac:	68db      	ldr	r3, [r3, #12]
   d97ae:	4620      	mov	r0, r4
   d97b0:	220a      	movs	r2, #10
   d97b2:	4798      	blx	r3
            write(attr.details);
   d97b4:	69e9      	ldr	r1, [r5, #28]
   d97b6:	4620      	mov	r0, r4
   d97b8:	f7ff f98c 	bl	d8ad4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d97bc:	215d      	movs	r1, #93	; 0x5d
   d97be:	4620      	mov	r0, r4
   d97c0:	f7ff f997 	bl	d8af2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d97c4:	6823      	ldr	r3, [r4, #0]
   d97c6:	490e      	ldr	r1, [pc, #56]	; (d9800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d97c8:	68db      	ldr	r3, [r3, #12]
   d97ca:	4620      	mov	r0, r4
   d97cc:	2202      	movs	r2, #2
}
   d97ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d97d2:	4718      	bx	r3
   d97d4:	000de716 	.word	0x000de716
   d97d8:	000de71d 	.word	0x000de71d
   d97dc:	000de824 	.word	0x000de824
   d97e0:	000de720 	.word	0x000de720
   d97e4:	000de725 	.word	0x000de725
   d97e8:	2003e5b4 	.word	0x2003e5b4
   d97ec:	000de723 	.word	0x000de723
   d97f0:	000de728 	.word	0x000de728
   d97f4:	000de72b 	.word	0x000de72b
   d97f8:	000de733 	.word	0x000de733
   d97fc:	000de736 	.word	0x000de736
   d9800:	000de2ad 	.word	0x000de2ad

000d9804 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9808:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d980a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d980e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9810:	4605      	mov	r5, r0
   d9812:	460f      	mov	r7, r1
   d9814:	4690      	mov	r8, r2
   d9816:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d9818:	f001 fa62 	bl	dace0 <_Z16_fetch_usbserialv>
   d981c:	4581      	cmp	r9, r0
   d981e:	d105      	bne.n	d982c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9820:	4849      	ldr	r0, [pc, #292]	; (d9948 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d9822:	f000 f8e0 	bl	d99e6 <_ZN5spark12NetworkClass9listeningEv>
   d9826:	2800      	cmp	r0, #0
   d9828:	f040 808a 	bne.w	d9940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d982c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d982e:	4a47      	ldr	r2, [pc, #284]	; (d994c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9830:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9832:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d9836:	a801      	add	r0, sp, #4
        strm_(stream) {
   d9838:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d983a:	f88d 9008 	strb.w	r9, [sp, #8]
   d983e:	f7ff f83c 	bl	d88ba <_ZN5spark10JSONWriter11beginObjectEv>
   d9842:	4649      	mov	r1, r9
   d9844:	4640      	mov	r0, r8
   d9846:	f7fd ffcb 	bl	d77e0 <log_level_name>
    json.name("l", 1).value(s);
   d984a:	4941      	ldr	r1, [pc, #260]	; (d9950 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d984c:	4680      	mov	r8, r0
   d984e:	2201      	movs	r2, #1
   d9850:	a801      	add	r0, sp, #4
   d9852:	f7ff f8bb 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d9856:	4641      	mov	r1, r8
   d9858:	f7ff f92e 	bl	d8ab8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d985c:	b13f      	cbz	r7, d986e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d985e:	493d      	ldr	r1, [pc, #244]	; (d9954 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9860:	2201      	movs	r2, #1
   d9862:	a801      	add	r0, sp, #4
   d9864:	f7ff f8b2 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d9868:	4639      	mov	r1, r7
   d986a:	f7ff f925 	bl	d8ab8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d986e:	b13e      	cbz	r6, d9880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9870:	4939      	ldr	r1, [pc, #228]	; (d9958 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9872:	2201      	movs	r2, #1
   d9874:	a801      	add	r0, sp, #4
   d9876:	f7ff f8a9 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d987a:	4631      	mov	r1, r6
   d987c:	f7ff f91c 	bl	d8ab8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9880:	7923      	ldrb	r3, [r4, #4]
   d9882:	07df      	lsls	r7, r3, #31
   d9884:	d50e      	bpl.n	d98a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d9886:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d9888:	212f      	movs	r1, #47	; 0x2f
   d988a:	4630      	mov	r0, r6
   d988c:	f002 fbb2 	bl	dbff4 <strrchr>
    if (s1) {
   d9890:	b100      	cbz	r0, d9894 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9892:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9894:	4931      	ldr	r1, [pc, #196]	; (d995c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d9896:	2201      	movs	r2, #1
   d9898:	a801      	add	r0, sp, #4
   d989a:	f7ff f897 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d989e:	4631      	mov	r1, r6
   d98a0:	f7ff f90a 	bl	d8ab8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d98a4:	7923      	ldrb	r3, [r4, #4]
   d98a6:	079e      	lsls	r6, r3, #30
   d98a8:	d507      	bpl.n	d98ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d98aa:	492d      	ldr	r1, [pc, #180]	; (d9960 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d98ac:	2202      	movs	r2, #2
   d98ae:	a801      	add	r0, sp, #4
   d98b0:	f7ff f88c 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d98b4:	68e1      	ldr	r1, [r4, #12]
   d98b6:	f7ff f80d 	bl	d88d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d98ba:	7923      	ldrb	r3, [r4, #4]
   d98bc:	0758      	lsls	r0, r3, #29
   d98be:	d514      	bpl.n	d98ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d98c0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d98c2:	4633      	mov	r3, r6
   d98c4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d98c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d98ca:	b12a      	cbz	r2, d98d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d98cc:	2a20      	cmp	r2, #32
   d98ce:	d101      	bne.n	d98d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d98d0:	461e      	mov	r6, r3
   d98d2:	e7f7      	b.n	d98c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d98d4:	2a28      	cmp	r2, #40	; 0x28
   d98d6:	d1f5      	bne.n	d98c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d98d8:	4922      	ldr	r1, [pc, #136]	; (d9964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d98da:	2202      	movs	r2, #2
   d98dc:	a801      	add	r0, sp, #4
   d98de:	f7ff f875 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d98e2:	1bba      	subs	r2, r7, r6
   d98e4:	4631      	mov	r1, r6
   d98e6:	f7ff f881 	bl	d89ec <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d98ea:	7923      	ldrb	r3, [r4, #4]
   d98ec:	0719      	lsls	r1, r3, #28
   d98ee:	d507      	bpl.n	d9900 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d98f0:	491d      	ldr	r1, [pc, #116]	; (d9968 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d98f2:	2201      	movs	r2, #1
   d98f4:	a801      	add	r0, sp, #4
   d98f6:	f7ff f869 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d98fa:	6961      	ldr	r1, [r4, #20]
   d98fc:	f7fe fffc 	bl	d88f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9900:	7923      	ldrb	r3, [r4, #4]
   d9902:	06da      	lsls	r2, r3, #27
   d9904:	d508      	bpl.n	d9918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d9906:	2204      	movs	r2, #4
   d9908:	4918      	ldr	r1, [pc, #96]	; (d996c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d990a:	eb0d 0002 	add.w	r0, sp, r2
   d990e:	f7ff f85d 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d9912:	69a1      	ldr	r1, [r4, #24]
   d9914:	f7fe ffde 	bl	d88d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d9918:	7923      	ldrb	r3, [r4, #4]
   d991a:	069b      	lsls	r3, r3, #26
   d991c:	d507      	bpl.n	d992e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d991e:	4914      	ldr	r1, [pc, #80]	; (d9970 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9920:	2206      	movs	r2, #6
   d9922:	a801      	add	r0, sp, #4
   d9924:	f7ff f852 	bl	d89cc <_ZN5spark10JSONWriter4nameEPKcj>
   d9928:	69e1      	ldr	r1, [r4, #28]
   d992a:	f7ff f8c5 	bl	d8ab8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d992e:	a801      	add	r0, sp, #4
   d9930:	f7fe ffad 	bl	d888e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9934:	6a28      	ldr	r0, [r5, #32]
   d9936:	490f      	ldr	r1, [pc, #60]	; (d9974 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9938:	6803      	ldr	r3, [r0, #0]
   d993a:	2202      	movs	r2, #2
   d993c:	68db      	ldr	r3, [r3, #12]
   d993e:	4798      	blx	r3
}
   d9940:	b005      	add	sp, #20
   d9942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9946:	bf00      	nop
   d9948:	2003e5b4 	.word	0x2003e5b4
   d994c:	000de75c 	.word	0x000de75c
   d9950:	000de6f3 	.word	0x000de6f3
   d9954:	000de56d 	.word	0x000de56d
   d9958:	000ddfb8 	.word	0x000ddfb8
   d995c:	000ddf63 	.word	0x000ddf63
   d9960:	000de741 	.word	0x000de741
   d9964:	000de744 	.word	0x000de744
   d9968:	000de3f9 	.word	0x000de3f9
   d996c:	000de747 	.word	0x000de747
   d9970:	000de74c 	.word	0x000de74c
   d9974:	000de2ad 	.word	0x000de2ad

000d9978 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9978:	2300      	movs	r3, #0
   d997a:	6840      	ldr	r0, [r0, #4]
   d997c:	461a      	mov	r2, r3
   d997e:	f7fd bfad 	b.w	d78dc <network_connect>

000d9982 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9982:	6840      	ldr	r0, [r0, #4]
   d9984:	2200      	movs	r2, #0
   d9986:	2102      	movs	r1, #2
   d9988:	f7fd bfb8 	b.w	d78fc <network_disconnect>

000d998c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d998c:	2200      	movs	r2, #0
   d998e:	6840      	ldr	r0, [r0, #4]
   d9990:	4611      	mov	r1, r2
   d9992:	f7fd bfab 	b.w	d78ec <network_connecting>

000d9996 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9996:	2200      	movs	r2, #0
   d9998:	6840      	ldr	r0, [r0, #4]
   d999a:	4611      	mov	r1, r2
   d999c:	f7fd bfb6 	b.w	d790c <network_ready>

000d99a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d99a0:	2300      	movs	r3, #0
   d99a2:	6840      	ldr	r0, [r0, #4]
   d99a4:	461a      	mov	r2, r3
   d99a6:	4619      	mov	r1, r3
   d99a8:	f7fd bfb8 	b.w	d791c <network_on>

000d99ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d99ac:	2300      	movs	r3, #0
   d99ae:	6840      	ldr	r0, [r0, #4]
   d99b0:	461a      	mov	r2, r3
   d99b2:	4619      	mov	r1, r3
   d99b4:	f7fd bfba 	b.w	d792c <network_off>

000d99b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d99b8:	6840      	ldr	r0, [r0, #4]
   d99ba:	2100      	movs	r1, #0
   d99bc:	f7fd bfde 	b.w	d797c <network_is_on>

000d99c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d99c0:	6840      	ldr	r0, [r0, #4]
   d99c2:	2100      	movs	r1, #0
   d99c4:	f7fd bfe2 	b.w	d798c <network_is_off>

000d99c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d99c8:	6840      	ldr	r0, [r0, #4]
   d99ca:	2200      	movs	r2, #0
   d99cc:	f081 0101 	eor.w	r1, r1, #1
   d99d0:	f7fd bfb4 	b.w	d793c <network_listen>

000d99d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d99d4:	6840      	ldr	r0, [r0, #4]
   d99d6:	2200      	movs	r2, #0
   d99d8:	f7fd bfc0 	b.w	d795c <network_set_listen_timeout>

000d99dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d99dc:	2200      	movs	r2, #0
   d99de:	6840      	ldr	r0, [r0, #4]
   d99e0:	4611      	mov	r1, r2
   d99e2:	f7fd bfc3 	b.w	d796c <network_get_listen_timeout>

000d99e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d99e6:	2200      	movs	r2, #0
   d99e8:	6840      	ldr	r0, [r0, #4]
   d99ea:	4611      	mov	r1, r2
   d99ec:	f7fd bfae 	b.w	d794c <network_listening>

000d99f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d99f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d99f4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d99f6:	b095      	sub	sp, #84	; 0x54
   d99f8:	4616      	mov	r6, r2
   d99fa:	460d      	mov	r5, r1
   d99fc:	4607      	mov	r7, r0
    IPAddress addr;
   d99fe:	f7fe fdc3 	bl	d8588 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9a02:	4621      	mov	r1, r4
   d9a04:	2218      	movs	r2, #24
   d9a06:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9a08:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9a0a:	f002 fa52 	bl	dbeb2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9a0e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9a10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9a14:	4621      	mov	r1, r4
   d9a16:	466b      	mov	r3, sp
   d9a18:	aa0c      	add	r2, sp, #48	; 0x30
   d9a1a:	4630      	mov	r0, r6
   d9a1c:	f7fd fdb0 	bl	d7580 <netdb_getaddrinfo>
    if (!r) {
   d9a20:	4604      	mov	r4, r0
   d9a22:	2800      	cmp	r0, #0
   d9a24:	d146      	bne.n	d9ab4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9a26:	4602      	mov	r2, r0
   d9a28:	2101      	movs	r1, #1
   d9a2a:	6868      	ldr	r0, [r5, #4]
   d9a2c:	f7fd ff6e 	bl	d790c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9a30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9a32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9a34:	4622      	mov	r2, r4
   d9a36:	6868      	ldr	r0, [r5, #4]
   d9a38:	f7fd ff68 	bl	d790c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9a3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9a3e:	4681      	mov	r9, r0
        bool ok = false;
   d9a40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9a42:	2e00      	cmp	r6, #0
   d9a44:	d036      	beq.n	d9ab4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9a46:	2900      	cmp	r1, #0
   d9a48:	d134      	bne.n	d9ab4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9a4a:	6873      	ldr	r3, [r6, #4]
   d9a4c:	2b02      	cmp	r3, #2
   d9a4e:	d003      	beq.n	d9a58 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9a50:	2b0a      	cmp	r3, #10
   d9a52:	d00b      	beq.n	d9a6c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9a54:	69f6      	ldr	r6, [r6, #28]
   d9a56:	e7f4      	b.n	d9a42 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9a58:	f1b8 0f00 	cmp.w	r8, #0
   d9a5c:	d004      	beq.n	d9a68 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9a5e:	6971      	ldr	r1, [r6, #20]
   d9a60:	4638      	mov	r0, r7
   d9a62:	3104      	adds	r1, #4
   d9a64:	f7fe fde0 	bl	d8628 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9a68:	4641      	mov	r1, r8
   d9a6a:	e7f3      	b.n	d9a54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9a6c:	f1b9 0f00 	cmp.w	r9, #0
   d9a70:	d101      	bne.n	d9a76 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9a72:	4649      	mov	r1, r9
   d9a74:	e7ee      	b.n	d9a54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9a76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9a78:	2210      	movs	r2, #16
   d9a7a:	a801      	add	r0, sp, #4
   d9a7c:	f002 fa19 	bl	dbeb2 <memset>
                    a.v = 6;
   d9a80:	2306      	movs	r3, #6
   d9a82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9a86:	ad01      	add	r5, sp, #4
   d9a88:	f104 0308 	add.w	r3, r4, #8
   d9a8c:	3418      	adds	r4, #24
   d9a8e:	6818      	ldr	r0, [r3, #0]
   d9a90:	6859      	ldr	r1, [r3, #4]
   d9a92:	462a      	mov	r2, r5
   d9a94:	c203      	stmia	r2!, {r0, r1}
   d9a96:	3308      	adds	r3, #8
   d9a98:	42a3      	cmp	r3, r4
   d9a9a:	4615      	mov	r5, r2
   d9a9c:	d1f7      	bne.n	d9a8e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9a9e:	a901      	add	r1, sp, #4
   d9aa0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9aa2:	ad07      	add	r5, sp, #28
   d9aa4:	f7fe fd7e 	bl	d85a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9aaa:	1d3c      	adds	r4, r7, #4
   d9aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9aae:	682b      	ldr	r3, [r5, #0]
   d9ab0:	7023      	strb	r3, [r4, #0]
   d9ab2:	e7de      	b.n	d9a72 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9ab4:	9800      	ldr	r0, [sp, #0]
   d9ab6:	f7fd fd5b 	bl	d7570 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9aba:	4638      	mov	r0, r7
   d9abc:	b015      	add	sp, #84	; 0x54
   d9abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9ac4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9ac4:	4b02      	ldr	r3, [pc, #8]	; (d9ad0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9ac6:	4a03      	ldr	r2, [pc, #12]	; (d9ad4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9ac8:	601a      	str	r2, [r3, #0]
   d9aca:	2200      	movs	r2, #0
   d9acc:	605a      	str	r2, [r3, #4]

} // spark
   d9ace:	4770      	bx	lr
   d9ad0:	2003e5b4 	.word	0x2003e5b4
   d9ad4:	000de7d4 	.word	0x000de7d4

000d9ad8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ada:	4606      	mov	r6, r0
   d9adc:	460d      	mov	r5, r1
  size_t n = 0;
   d9ade:	188f      	adds	r7, r1, r2
   d9ae0:	2400      	movs	r4, #0
  while (size--) {
   d9ae2:	42bd      	cmp	r5, r7
   d9ae4:	d00c      	beq.n	d9b00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9ae6:	6833      	ldr	r3, [r6, #0]
   d9ae8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9aec:	689b      	ldr	r3, [r3, #8]
   d9aee:	4630      	mov	r0, r6
   d9af0:	4798      	blx	r3
     if (chunk>=0)
   d9af2:	1e03      	subs	r3, r0, #0
   d9af4:	db01      	blt.n	d9afa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9af6:	441c      	add	r4, r3
  while (size--) {
   d9af8:	e7f3      	b.n	d9ae2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9afa:	2c00      	cmp	r4, #0
   d9afc:	bf08      	it	eq
   d9afe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9b00:	4620      	mov	r0, r4
   d9b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9b04 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9b04:	b513      	push	{r0, r1, r4, lr}
   d9b06:	4604      	mov	r4, r0
    }
   d9b08:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9b0a:	b159      	cbz	r1, d9b24 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9b0c:	9101      	str	r1, [sp, #4]
   d9b0e:	f002 fa44 	bl	dbf9a <strlen>
   d9b12:	6823      	ldr	r3, [r4, #0]
   d9b14:	9901      	ldr	r1, [sp, #4]
   d9b16:	68db      	ldr	r3, [r3, #12]
   d9b18:	4602      	mov	r2, r0
   d9b1a:	4620      	mov	r0, r4
    }
   d9b1c:	b002      	add	sp, #8
   d9b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9b22:	4718      	bx	r3
    }
   d9b24:	b002      	add	sp, #8
   d9b26:	bd10      	pop	{r4, pc}

000d9b28 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9b28:	b508      	push	{r3, lr}
  return write(str);
   d9b2a:	f7ff ffeb 	bl	d9b04 <_ZN5Print5writeEPKc>
}
   d9b2e:	bd08      	pop	{r3, pc}

000d9b30 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9b30:	6803      	ldr	r3, [r0, #0]
   d9b32:	689b      	ldr	r3, [r3, #8]
   d9b34:	4718      	bx	r3

000d9b36 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9b36:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9b38:	210d      	movs	r1, #13
{
   d9b3a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9b3c:	f7ff fff8 	bl	d9b30 <_ZN5Print5printEc>
  n += print('\n');
   d9b40:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9b42:	4604      	mov	r4, r0
  n += print('\n');
   d9b44:	4628      	mov	r0, r5
   d9b46:	f7ff fff3 	bl	d9b30 <_ZN5Print5printEc>
  return n;
}
   d9b4a:	4420      	add	r0, r4
   d9b4c:	bd38      	pop	{r3, r4, r5, pc}

000d9b4e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9b4e:	b538      	push	{r3, r4, r5, lr}
   d9b50:	4605      	mov	r5, r0
  return write(str);
   d9b52:	f7ff ffd7 	bl	d9b04 <_ZN5Print5writeEPKc>
   d9b56:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d9b58:	4628      	mov	r0, r5
   d9b5a:	f7ff ffec 	bl	d9b36 <_ZN5Print7printlnEv>
  return n;
}
   d9b5e:	4420      	add	r0, r4
   d9b60:	bd38      	pop	{r3, r4, r5, pc}

000d9b62 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9b62:	b530      	push	{r4, r5, lr}
   d9b64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9b66:	2300      	movs	r3, #0
   d9b68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9b6c:	2a01      	cmp	r2, #1
   d9b6e:	bf98      	it	ls
   d9b70:	220a      	movls	r2, #10
   d9b72:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9b74:	460d      	mov	r5, r1
   d9b76:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9b7a:	fb01 5312 	mls	r3, r1, r2, r5
   d9b7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9b82:	2b09      	cmp	r3, #9
   d9b84:	bf94      	ite	ls
   d9b86:	3330      	addls	r3, #48	; 0x30
   d9b88:	3337      	addhi	r3, #55	; 0x37
   d9b8a:	b2db      	uxtb	r3, r3
  } while(n);
   d9b8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9b8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9b92:	d9ef      	bls.n	d9b74 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9b94:	4621      	mov	r1, r4
   d9b96:	f7ff ffb5 	bl	d9b04 <_ZN5Print5writeEPKc>
}
   d9b9a:	b00b      	add	sp, #44	; 0x2c
   d9b9c:	bd30      	pop	{r4, r5, pc}

000d9b9e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ba2:	b086      	sub	sp, #24
   d9ba4:	af00      	add	r7, sp, #0
   d9ba6:	4605      	mov	r5, r0
   d9ba8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9baa:	1d38      	adds	r0, r7, #4
   d9bac:	2114      	movs	r1, #20
{
   d9bae:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9bb0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9bb2:	f7fd ff13 	bl	d79dc <vsnprintf>

    if (n<bufsize)
   d9bb6:	2813      	cmp	r0, #19
   d9bb8:	d80e      	bhi.n	d9bd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9bba:	1d39      	adds	r1, r7, #4
   d9bbc:	4628      	mov	r0, r5
   d9bbe:	f7ff ffa1 	bl	d9b04 <_ZN5Print5writeEPKc>
   d9bc2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9bc4:	b11e      	cbz	r6, d9bce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9bc6:	4628      	mov	r0, r5
   d9bc8:	f7ff ffb5 	bl	d9b36 <_ZN5Print7printlnEv>
   d9bcc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9bce:	4620      	mov	r0, r4
   d9bd0:	3718      	adds	r7, #24
   d9bd2:	46bd      	mov	sp, r7
   d9bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9bd8:	f100 0308 	add.w	r3, r0, #8
   d9bdc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9be0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9be2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9be6:	4622      	mov	r2, r4
   d9be8:	1c41      	adds	r1, r0, #1
   d9bea:	683b      	ldr	r3, [r7, #0]
   d9bec:	4668      	mov	r0, sp
   d9bee:	f7fd fef5 	bl	d79dc <vsnprintf>
  return write(str);
   d9bf2:	4669      	mov	r1, sp
   d9bf4:	4628      	mov	r0, r5
   d9bf6:	f7ff ff85 	bl	d9b04 <_ZN5Print5writeEPKc>
   d9bfa:	4604      	mov	r4, r0
   d9bfc:	46c5      	mov	sp, r8
   d9bfe:	e7e1      	b.n	d9bc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9c00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9c00:	4b01      	ldr	r3, [pc, #4]	; (d9c08 <_GLOBAL__sub_I_RGB+0x8>)
   d9c02:	2200      	movs	r2, #0
   d9c04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9c06:	4770      	bx	lr
   d9c08:	2003e5bc 	.word	0x2003e5bc

000d9c0c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9c0c:	2100      	movs	r1, #0
   d9c0e:	f7fd bd37 	b.w	d7680 <hal_spi_acquire>

000d9c12 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9c12:	2100      	movs	r1, #0
   d9c14:	f7fd bd3c 	b.w	d7690 <hal_spi_release>

000d9c18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9c18:	b510      	push	{r4, lr}
   d9c1a:	4604      	mov	r4, r0
   d9c1c:	4608      	mov	r0, r1
{
    _spi = spi;
   d9c1e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9c20:	f7fd fd0e 	bl	d7640 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9c24:	2300      	movs	r3, #0
   d9c26:	6063      	str	r3, [r4, #4]
}
   d9c28:	4620      	mov	r0, r4
   d9c2a:	bd10      	pop	{r4, pc}

000d9c2c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9c2c:	b510      	push	{r4, lr}
   d9c2e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9c30:	7800      	ldrb	r0, [r0, #0]
   d9c32:	f7ff ffeb 	bl	d9c0c <_ZN8SPIClass4lockEv.isra.0>
   d9c36:	b948      	cbnz	r0, d9c4c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9c38:	7820      	ldrb	r0, [r4, #0]
   d9c3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9c3e:	f7fd fcef 	bl	d7620 <hal_spi_begin>
        unlock();
   d9c42:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9c48:	f7ff bfe3 	b.w	d9c12 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9c4c:	bd10      	pop	{r4, pc}

000d9c4e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9c4e:	7800      	ldrb	r0, [r0, #0]
   d9c50:	f7ff bfdf 	b.w	d9c12 <_ZN8SPIClass6unlockEv.isra.0>

000d9c54 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9c54:	0840      	lsrs	r0, r0, #1
{
   d9c56:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9c58:	6018      	str	r0, [r3, #0]
   d9c5a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9c5c:	6818      	ldr	r0, [r3, #0]
   d9c5e:	4288      	cmp	r0, r1
   d9c60:	b2e5      	uxtb	r5, r4
   d9c62:	d906      	bls.n	d9c72 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9c64:	3401      	adds	r4, #1
   d9c66:	2c08      	cmp	r4, #8
   d9c68:	d002      	beq.n	d9c70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9c6a:	0840      	lsrs	r0, r0, #1
   d9c6c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9c6e:	e7f5      	b.n	d9c5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9c70:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9c72:	4b02      	ldr	r3, [pc, #8]	; (d9c7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9c74:	5d5b      	ldrb	r3, [r3, r5]
   d9c76:	7013      	strb	r3, [r2, #0]
}
   d9c78:	bd30      	pop	{r4, r5, pc}
   d9c7a:	bf00      	nop
   d9c7c:	000de808 	.word	0x000de808

000d9c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9c84:	4606      	mov	r6, r0
   d9c86:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9c88:	7800      	ldrb	r0, [r0, #0]
{
   d9c8a:	460c      	mov	r4, r1
    CHECK(lock());
   d9c8c:	f7ff ffbe 	bl	d9c0c <_ZN8SPIClass4lockEv.isra.0>
   d9c90:	2800      	cmp	r0, #0
   d9c92:	db1b      	blt.n	d9ccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9c94:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d9c96:	2214      	movs	r2, #20
   d9c98:	2100      	movs	r1, #0
   d9c9a:	a809      	add	r0, sp, #36	; 0x24
   d9c9c:	f002 f909 	bl	dbeb2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9ca0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9ca2:	2200      	movs	r2, #0
   d9ca4:	a909      	add	r1, sp, #36	; 0x24
   d9ca6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d9ca8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9cac:	f7fd fcd8 	bl	d7660 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9cb0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9cb4:	b113      	cbz	r3, d9cbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9cb6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9cba:	b155      	cbz	r5, d9cd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9cbc:	2700      	movs	r7, #0
   d9cbe:	46b9      	mov	r9, r7
   d9cc0:	46b8      	mov	r8, r7
   d9cc2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d9cc4:	7923      	ldrb	r3, [r4, #4]
   d9cc6:	b15d      	cbz	r5, d9ce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9cc8:	b1c3      	cbz	r3, d9cfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9cca:	2000      	movs	r0, #0
}
   d9ccc:	b00f      	add	sp, #60	; 0x3c
   d9cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9cd2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9cd6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9cda:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9cde:	e7f1      	b.n	d9cc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9ce0:	2b00      	cmp	r3, #0
   d9ce2:	d135      	bne.n	d9d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9ce4:	68a3      	ldr	r3, [r4, #8]
   d9ce6:	4543      	cmp	r3, r8
   d9ce8:	d108      	bne.n	d9cfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9cea:	f88d 9020 	strb.w	r9, [sp, #32]
   d9cee:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9cf2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9cf6:	89a3      	ldrh	r3, [r4, #12]
   d9cf8:	429a      	cmp	r2, r3
   d9cfa:	d0e6      	beq.n	d9cca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9cfc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9cfe:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9d00:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9d04:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9d06:	ab04      	add	r3, sp, #16
   d9d08:	f10d 020f 	add.w	r2, sp, #15
   d9d0c:	f7ff ffa2 	bl	d9c54 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9d10:	7921      	ldrb	r1, [r4, #4]
   d9d12:	b985      	cbnz	r5, d9d36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9d14:	b989      	cbnz	r1, d9d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9d16:	68a3      	ldr	r3, [r4, #8]
   d9d18:	4543      	cmp	r3, r8
   d9d1a:	d30e      	bcc.n	d9d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9d1c:	f88d 9020 	strb.w	r9, [sp, #32]
   d9d20:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9d24:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9d28:	89a3      	ldrh	r3, [r4, #12]
   d9d2a:	429a      	cmp	r2, r3
   d9d2c:	d105      	bne.n	d9d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9d2e:	9b04      	ldr	r3, [sp, #16]
   d9d30:	4543      	cmp	r3, r8
   d9d32:	d102      	bne.n	d9d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9d34:	e7c9      	b.n	d9cca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9d36:	2900      	cmp	r1, #0
   d9d38:	d1f9      	bne.n	d9d2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9d3a:	2300      	movs	r3, #0
   d9d3c:	9301      	str	r3, [sp, #4]
   d9d3e:	7b63      	ldrb	r3, [r4, #13]
   d9d40:	9300      	str	r3, [sp, #0]
   d9d42:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9d46:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9d48:	7830      	ldrb	r0, [r6, #0]
   d9d4a:	f7fd fc91 	bl	d7670 <hal_spi_set_settings>
   d9d4e:	e7bc      	b.n	d9cca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9d50:	e9cd 5500 	strd	r5, r5, [sp]
   d9d54:	462b      	mov	r3, r5
   d9d56:	462a      	mov	r2, r5
   d9d58:	2101      	movs	r1, #1
   d9d5a:	e7f5      	b.n	d9d48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9d5c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9d5c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9d5e:	7800      	ldrb	r0, [r0, #0]
   d9d60:	f7fd fc66 	bl	d7630 <hal_spi_transfer>
}
   d9d64:	b2c0      	uxtb	r0, r0
   d9d66:	bd08      	pop	{r3, pc}

000d9d68 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d9d68:	b510      	push	{r4, lr}
   d9d6a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d9d6c:	f7fd fb48 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d9d70:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d9d72:	6823      	ldr	r3, [r4, #0]
   d9d74:	4620      	mov	r0, r4
   d9d76:	695b      	ldr	r3, [r3, #20]
   d9d78:	4798      	blx	r3
    if (c >= 0) return c;
   d9d7a:	2800      	cmp	r0, #0
   d9d7c:	da08      	bge.n	d9d90 <_ZN6Stream9timedReadEv+0x28>
   d9d7e:	f7fd fb3f 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d9d82:	68e3      	ldr	r3, [r4, #12]
   d9d84:	1ac0      	subs	r0, r0, r3
   d9d86:	68a3      	ldr	r3, [r4, #8]
   d9d88:	4298      	cmp	r0, r3
   d9d8a:	d3f2      	bcc.n	d9d72 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d9d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d9d90:	bd10      	pop	{r4, pc}
	...

000d9d94 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d9d94:	b570      	push	{r4, r5, r6, lr}
   d9d96:	460d      	mov	r5, r1
  String ret;
   d9d98:	4909      	ldr	r1, [pc, #36]	; (d9dc0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d9d9a:	4604      	mov	r4, r0
   d9d9c:	4616      	mov	r6, r2
  String ret;
   d9d9e:	f000 f85c 	bl	d9e5a <_ZN6StringC1EPKc>
  int c = timedRead();
   d9da2:	4628      	mov	r0, r5
   d9da4:	f7ff ffe0 	bl	d9d68 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d9da8:	2800      	cmp	r0, #0
   d9daa:	db06      	blt.n	d9dba <_ZN6Stream15readStringUntilEc+0x26>
   d9dac:	4286      	cmp	r6, r0
   d9dae:	d004      	beq.n	d9dba <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d9db0:	b2c1      	uxtb	r1, r0
   d9db2:	4620      	mov	r0, r4
   d9db4:	f000 f8be 	bl	d9f34 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d9db8:	e7f3      	b.n	d9da2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d9dba:	4620      	mov	r0, r4
   d9dbc:	bd70      	pop	{r4, r5, r6, pc}
   d9dbe:	bf00      	nop
   d9dc0:	000de2af 	.word	0x000de2af

000d9dc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9dc4:	b510      	push	{r4, lr}
   d9dc6:	4604      	mov	r4, r0
{
	free(buffer);
   d9dc8:	6800      	ldr	r0, [r0, #0]
   d9dca:	f7fd fdef 	bl	d79ac <free>
}
   d9dce:	4620      	mov	r0, r4
   d9dd0:	bd10      	pop	{r4, pc}

000d9dd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9dd2:	b510      	push	{r4, lr}
   d9dd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9dd6:	6800      	ldr	r0, [r0, #0]
   d9dd8:	b108      	cbz	r0, d9dde <_ZN6String10invalidateEv+0xc>
   d9dda:	f7fd fde7 	bl	d79ac <free>
	buffer = NULL;
   d9dde:	2300      	movs	r3, #0
	capacity = len = 0;
   d9de0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9de4:	6023      	str	r3, [r4, #0]
}
   d9de6:	bd10      	pop	{r4, pc}

000d9de8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9de8:	b538      	push	{r3, r4, r5, lr}
   d9dea:	4604      	mov	r4, r0
   d9dec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9dee:	6800      	ldr	r0, [r0, #0]
   d9df0:	3101      	adds	r1, #1
   d9df2:	f7fd fde3 	bl	d79bc <realloc>
	if (newbuffer) {
   d9df6:	b110      	cbz	r0, d9dfe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9df8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9dfc:	2001      	movs	r0, #1
	}
	return 0;
}
   d9dfe:	bd38      	pop	{r3, r4, r5, pc}

000d9e00 <_ZN6String7reserveEj>:
{
   d9e00:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9e02:	6803      	ldr	r3, [r0, #0]
{
   d9e04:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9e06:	b123      	cbz	r3, d9e12 <_ZN6String7reserveEj+0x12>
   d9e08:	6843      	ldr	r3, [r0, #4]
   d9e0a:	428b      	cmp	r3, r1
   d9e0c:	d301      	bcc.n	d9e12 <_ZN6String7reserveEj+0x12>
   d9e0e:	2001      	movs	r0, #1
}
   d9e10:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9e12:	4620      	mov	r0, r4
   d9e14:	f7ff ffe8 	bl	d9de8 <_ZN6String12changeBufferEj>
   d9e18:	2800      	cmp	r0, #0
   d9e1a:	d0f9      	beq.n	d9e10 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9e1c:	68a3      	ldr	r3, [r4, #8]
   d9e1e:	2b00      	cmp	r3, #0
   d9e20:	d1f5      	bne.n	d9e0e <_ZN6String7reserveEj+0xe>
   d9e22:	6822      	ldr	r2, [r4, #0]
   d9e24:	7013      	strb	r3, [r2, #0]
   d9e26:	e7f2      	b.n	d9e0e <_ZN6String7reserveEj+0xe>

000d9e28 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9e2a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9e2c:	4611      	mov	r1, r2
   d9e2e:	9201      	str	r2, [sp, #4]
{
   d9e30:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9e32:	f7ff ffe5 	bl	d9e00 <_ZN6String7reserveEj>
   d9e36:	9a01      	ldr	r2, [sp, #4]
   d9e38:	b928      	cbnz	r0, d9e46 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9e3a:	4620      	mov	r0, r4
   d9e3c:	f7ff ffc9 	bl	d9dd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9e40:	4620      	mov	r0, r4
   d9e42:	b003      	add	sp, #12
   d9e44:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9e46:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9e48:	4629      	mov	r1, r5
   d9e4a:	6820      	ldr	r0, [r4, #0]
   d9e4c:	f002 f809 	bl	dbe62 <memcpy>
	buffer[len] = 0;
   d9e50:	6822      	ldr	r2, [r4, #0]
   d9e52:	68a3      	ldr	r3, [r4, #8]
   d9e54:	2100      	movs	r1, #0
   d9e56:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9e58:	e7f2      	b.n	d9e40 <_ZN6String4copyEPKcj+0x18>

000d9e5a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9e5a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9e5c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9e5e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9e62:	4604      	mov	r4, r0
	len = 0;
   d9e64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e66:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9e68:	b141      	cbz	r1, d9e7c <_ZN6StringC1EPKc+0x22>
   d9e6a:	4608      	mov	r0, r1
   d9e6c:	9101      	str	r1, [sp, #4]
   d9e6e:	f002 f894 	bl	dbf9a <strlen>
   d9e72:	9901      	ldr	r1, [sp, #4]
   d9e74:	4602      	mov	r2, r0
   d9e76:	4620      	mov	r0, r4
   d9e78:	f7ff ffd6 	bl	d9e28 <_ZN6String4copyEPKcj>
}
   d9e7c:	4620      	mov	r0, r4
   d9e7e:	b002      	add	sp, #8
   d9e80:	bd10      	pop	{r4, pc}

000d9e82 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9e82:	b538      	push	{r3, r4, r5, lr}
   d9e84:	4605      	mov	r5, r0
	if (buffer) {
   d9e86:	6800      	ldr	r0, [r0, #0]
{
   d9e88:	460c      	mov	r4, r1
	if (buffer) {
   d9e8a:	b168      	cbz	r0, d9ea8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9e8c:	686a      	ldr	r2, [r5, #4]
   d9e8e:	688b      	ldr	r3, [r1, #8]
   d9e90:	429a      	cmp	r2, r3
   d9e92:	d307      	bcc.n	d9ea4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9e94:	6809      	ldr	r1, [r1, #0]
   d9e96:	f002 f85a 	bl	dbf4e <strcpy>
			len = rhs.len;
   d9e9a:	68a3      	ldr	r3, [r4, #8]
   d9e9c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9e9e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9ea0:	60a3      	str	r3, [r4, #8]
}
   d9ea2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9ea4:	f7fd fd82 	bl	d79ac <free>
	buffer = rhs.buffer;
   d9ea8:	6823      	ldr	r3, [r4, #0]
   d9eaa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9eac:	6863      	ldr	r3, [r4, #4]
   d9eae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9eb0:	68a3      	ldr	r3, [r4, #8]
   d9eb2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9eb4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9eb6:	e9c4 3300 	strd	r3, r3, [r4]
   d9eba:	e7f1      	b.n	d9ea0 <_ZN6String4moveERS_+0x1e>

000d9ebc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d9ebc:	b510      	push	{r4, lr}
	buffer = NULL;
   d9ebe:	2300      	movs	r3, #0
	capacity = 0;
   d9ec0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d9ec4:	4604      	mov	r4, r0
	len = 0;
   d9ec6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9ec8:	7303      	strb	r3, [r0, #12]
	move(rval);
   d9eca:	f7ff ffda 	bl	d9e82 <_ZN6String4moveERS_>
}
   d9ece:	4620      	mov	r0, r4
   d9ed0:	bd10      	pop	{r4, pc}

000d9ed2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9ed2:	4288      	cmp	r0, r1
{
   d9ed4:	b510      	push	{r4, lr}
   d9ed6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9ed8:	d005      	beq.n	d9ee6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9eda:	680b      	ldr	r3, [r1, #0]
   d9edc:	b12b      	cbz	r3, d9eea <_ZN6StringaSERKS_+0x18>
   d9ede:	688a      	ldr	r2, [r1, #8]
   d9ee0:	4619      	mov	r1, r3
   d9ee2:	f7ff ffa1 	bl	d9e28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9ee6:	4620      	mov	r0, r4
   d9ee8:	bd10      	pop	{r4, pc}
	else invalidate();
   d9eea:	f7ff ff72 	bl	d9dd2 <_ZN6String10invalidateEv>
   d9eee:	e7fa      	b.n	d9ee6 <_ZN6StringaSERKS_+0x14>

000d9ef0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9ef0:	b510      	push	{r4, lr}
	buffer = NULL;
   d9ef2:	2300      	movs	r3, #0
String::String(const String &value)
   d9ef4:	4604      	mov	r4, r0
	capacity = 0;
   d9ef6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9efa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9efc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9efe:	f7ff ffe8 	bl	d9ed2 <_ZN6StringaSERKS_>
}
   d9f02:	4620      	mov	r0, r4
   d9f04:	bd10      	pop	{r4, pc}

000d9f06 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9f06:	b570      	push	{r4, r5, r6, lr}
   d9f08:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9f0a:	460e      	mov	r6, r1
   d9f0c:	b909      	cbnz	r1, d9f12 <_ZN6String6concatEPKcj+0xc>
   d9f0e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9f10:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9f12:	b16a      	cbz	r2, d9f30 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9f14:	6884      	ldr	r4, [r0, #8]
   d9f16:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9f18:	4621      	mov	r1, r4
   d9f1a:	f7ff ff71 	bl	d9e00 <_ZN6String7reserveEj>
   d9f1e:	2800      	cmp	r0, #0
   d9f20:	d0f5      	beq.n	d9f0e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9f22:	6828      	ldr	r0, [r5, #0]
   d9f24:	68ab      	ldr	r3, [r5, #8]
   d9f26:	4631      	mov	r1, r6
   d9f28:	4418      	add	r0, r3
   d9f2a:	f002 f810 	bl	dbf4e <strcpy>
	len = newlen;
   d9f2e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9f30:	2001      	movs	r0, #1
   d9f32:	e7ed      	b.n	d9f10 <_ZN6String6concatEPKcj+0xa>

000d9f34 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d9f34:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d9f36:	2300      	movs	r3, #0
	buf[0] = c;
   d9f38:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d9f3c:	2201      	movs	r2, #1
   d9f3e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d9f40:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d9f44:	f7ff ffdf 	bl	d9f06 <_ZN6String6concatEPKcj>
}
   d9f48:	b003      	add	sp, #12
   d9f4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9f50:	4b05      	ldr	r3, [pc, #20]	; (d9f68 <_GLOBAL__sub_I_System+0x18>)
   d9f52:	2202      	movs	r2, #2
   d9f54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9f56:	4b05      	ldr	r3, [pc, #20]	; (d9f6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d9f58:	4a05      	ldr	r2, [pc, #20]	; (d9f70 <_GLOBAL__sub_I_System+0x20>)
   d9f5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d9f5c:	2000      	movs	r0, #0
   d9f5e:	6018      	str	r0, [r3, #0]
   d9f60:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d9f62:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9f64:	f7fd bc56 	b.w	d7814 <set_system_mode>
   d9f68:	2003e5d8 	.word	0x2003e5d8
   d9f6c:	2003e5cc 	.word	0x2003e5cc
   d9f70:	ffff0000 	.word	0xffff0000

000d9f74 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9f74:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9f76:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d9f78:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9f7c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d9f7e:	2201      	movs	r2, #1
   d9f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9f84:	f10d 0107 	add.w	r1, sp, #7
   d9f88:	47a0      	blx	r4
}
   d9f8a:	b002      	add	sp, #8
   d9f8c:	bd10      	pop	{r4, pc}

000d9f8e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d9f8e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d9f90:	6803      	ldr	r3, [r0, #0]
   d9f92:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d9f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9f98:	46a4      	mov	ip, r4
}
   d9f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d9f9e:	4760      	bx	ip

000d9fa0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d9fa0:	b513      	push	{r0, r1, r4, lr}
   d9fa2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d9fa4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d9fa6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d9faa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d9fac:	f10d 0107 	add.w	r1, sp, #7
   d9fb0:	2201      	movs	r2, #1
   d9fb2:	47a0      	blx	r4
}
   d9fb4:	b002      	add	sp, #8
   d9fb6:	bd10      	pop	{r4, pc}

000d9fb8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d9fb8:	4770      	bx	lr

000d9fba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d9fba:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9fbc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d9fbe:	681a      	ldr	r2, [r3, #0]
   d9fc0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d9fc2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d9fc4:	da10      	bge.n	d9fe8 <_ZN9TCPClient9connectedEv+0x2e>
   d9fc6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9fca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9fce:	429a      	cmp	r2, r3
   d9fd0:	d10a      	bne.n	d9fe8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d9fd2:	6803      	ldr	r3, [r0, #0]
   d9fd4:	691b      	ldr	r3, [r3, #16]
   d9fd6:	4798      	blx	r3
        if (!rv) {
   d9fd8:	4604      	mov	r4, r0
   d9fda:	b928      	cbnz	r0, d9fe8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d9fdc:	682b      	ldr	r3, [r5, #0]
   d9fde:	4628      	mov	r0, r5
   d9fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9fe2:	4798      	blx	r3
        rv = available();
   d9fe4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d9fe6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d9fe8:	2001      	movs	r0, #1
   d9fea:	e7fc      	b.n	d9fe6 <_ZN9TCPClient9connectedEv+0x2c>

000d9fec <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d9fec:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d9fee:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d9ff0:	43c0      	mvns	r0, r0
   d9ff2:	0fc0      	lsrs	r0, r0, #31
   d9ff4:	4770      	bx	lr

000d9ff6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d9ff6:	4770      	bx	lr

000d9ff8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d9ff8:	4b06      	ldr	r3, [pc, #24]	; (da014 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d9ffa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d9ffc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d9ffe:	f100 040c 	add.w	r4, r0, #12
	    ||
   da002:	d005      	beq.n	da010 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   da004:	4608      	mov	r0, r1
   da006:	f001 f8f7 	bl	db1f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   da00a:	2800      	cmp	r0, #0
	return nullptr;
   da00c:	bf08      	it	eq
   da00e:	2400      	moveq	r4, #0
      }
   da010:	4620      	mov	r0, r4
   da012:	bd10      	pop	{r4, pc}
   da014:	000de5cc 	.word	0x000de5cc

000da018 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   da018:	b510      	push	{r4, lr}
   da01a:	21ac      	movs	r1, #172	; 0xac
   da01c:	4604      	mov	r4, r0
   da01e:	f001 f82f 	bl	db080 <_ZdlPvj>
   da022:	4620      	mov	r0, r4
   da024:	bd10      	pop	{r4, pc}

000da026 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   da026:	f7fa b83a 	b.w	d409e <_ZdlPv>

000da02a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   da02e:	f04f 0800 	mov.w	r8, #0
   da032:	b086      	sub	sp, #24
   da034:	461d      	mov	r5, r3
   da036:	f8c0 8004 	str.w	r8, [r0, #4]
   da03a:	4604      	mov	r4, r0
   da03c:	460e      	mov	r6, r1
   da03e:	4617      	mov	r7, r2
    struct timeval tv = {};
   da040:	4641      	mov	r1, r8
   da042:	2210      	movs	r2, #16
   da044:	a802      	add	r0, sp, #8
   da046:	f001 ff34 	bl	dbeb2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   da04a:	1c6b      	adds	r3, r5, #1
   da04c:	d009      	beq.n	da062 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   da04e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   da052:	fbb5 f3f0 	udiv	r3, r5, r0
   da056:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da05a:	fb00 5313 	mls	r3, r0, r3, r5
   da05e:	4358      	muls	r0, r3
   da060:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da062:	6960      	ldr	r0, [r4, #20]
   da064:	2310      	movs	r3, #16
   da066:	9300      	str	r3, [sp, #0]
   da068:	6800      	ldr	r0, [r0, #0]
   da06a:	ab02      	add	r3, sp, #8
   da06c:	f241 0205 	movw	r2, #4101	; 0x1005
   da070:	f640 71ff 	movw	r1, #4095	; 0xfff
   da074:	f7fd fa94 	bl	d75a0 <sock_setsockopt>
    if (ret < 0) {
   da078:	2800      	cmp	r0, #0
   da07a:	da07      	bge.n	da08c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   da07c:	f7fd fcc6 	bl	d7a0c <__errno>
   da080:	6803      	ldr	r3, [r0, #0]
   da082:	6063      	str	r3, [r4, #4]
        return 0;
   da084:	2000      	movs	r0, #0
}
   da086:	b006      	add	sp, #24
   da088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   da08c:	6960      	ldr	r0, [r4, #20]
   da08e:	2300      	movs	r3, #0
   da090:	6800      	ldr	r0, [r0, #0]
   da092:	463a      	mov	r2, r7
   da094:	4631      	mov	r1, r6
   da096:	f7fd faab 	bl	d75f0 <sock_send>
    if (ret < 0) {
   da09a:	1e03      	subs	r3, r0, #0
   da09c:	dbee      	blt.n	da07c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   da09e:	4618      	mov	r0, r3
   da0a0:	e7f1      	b.n	da086 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000da0a4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   da0a4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   da0a6:	6984      	ldr	r4, [r0, #24]
   da0a8:	4b0a      	ldr	r3, [pc, #40]	; (da0d4 <_ZN9TCPClientD1Ev+0x30>)
   da0aa:	6003      	str	r3, [r0, #0]
   da0ac:	4605      	mov	r5, r0
   da0ae:	b17c      	cbz	r4, da0d0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   da0b0:	6863      	ldr	r3, [r4, #4]
   da0b2:	3b01      	subs	r3, #1
   da0b4:	6063      	str	r3, [r4, #4]
   da0b6:	b95b      	cbnz	r3, da0d0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   da0b8:	6823      	ldr	r3, [r4, #0]
   da0ba:	4620      	mov	r0, r4
   da0bc:	689b      	ldr	r3, [r3, #8]
   da0be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da0c0:	68a3      	ldr	r3, [r4, #8]
   da0c2:	3b01      	subs	r3, #1
   da0c4:	60a3      	str	r3, [r4, #8]
   da0c6:	b91b      	cbnz	r3, da0d0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   da0c8:	6823      	ldr	r3, [r4, #0]
   da0ca:	4620      	mov	r0, r4
   da0cc:	68db      	ldr	r3, [r3, #12]
   da0ce:	4798      	blx	r3
   da0d0:	4628      	mov	r0, r5
   da0d2:	bd38      	pop	{r3, r4, r5, pc}
   da0d4:	000de84c 	.word	0x000de84c

000da0d8 <_ZN9TCPClientD0Ev>:
   da0d8:	b510      	push	{r4, lr}
   da0da:	4604      	mov	r4, r0
   da0dc:	f7ff ffe2 	bl	da0a4 <_ZN9TCPClientD1Ev>
   da0e0:	4620      	mov	r0, r4
   da0e2:	211c      	movs	r1, #28
   da0e4:	f000 ffcc 	bl	db080 <_ZdlPvj>
   da0e8:	4620      	mov	r0, r4
   da0ea:	bd10      	pop	{r4, pc}

000da0ec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   da0ec:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da0ee:	694d      	ldr	r5, [r1, #20]
   da0f0:	4b05      	ldr	r3, [pc, #20]	; (da108 <_ZN9TCPClient8remoteIPEv+0x1c>)
   da0f2:	4604      	mov	r4, r0
   da0f4:	358c      	adds	r5, #140	; 0x8c
   da0f6:	f844 3b04 	str.w	r3, [r4], #4
   da0fa:	4606      	mov	r6, r0
   da0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da0fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da100:	682b      	ldr	r3, [r5, #0]
   da102:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da104:	4630      	mov	r0, r6
   da106:	bd70      	pop	{r4, r5, r6, pc}
   da108:	000de6d4 	.word	0x000de6d4

000da10c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   da10c:	b510      	push	{r4, lr}
   da10e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da110:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da114:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da118:	429a      	cmp	r2, r3
int TCPClient::peek() {
   da11a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da11c:	d005      	beq.n	da12a <_ZN9TCPClient4peekEv+0x1e>
   da11e:	6963      	ldr	r3, [r4, #20]
   da120:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da124:	4413      	add	r3, r2
   da126:	7918      	ldrb	r0, [r3, #4]
}
   da128:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da12a:	6803      	ldr	r3, [r0, #0]
   da12c:	691b      	ldr	r3, [r3, #16]
   da12e:	4798      	blx	r3
   da130:	2800      	cmp	r0, #0
   da132:	d1f4      	bne.n	da11e <_ZN9TCPClient4peekEv+0x12>
   da134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da138:	e7f6      	b.n	da128 <_ZN9TCPClient4peekEv+0x1c>

000da13a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   da13a:	b510      	push	{r4, lr}
   da13c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da13e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da142:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da146:	429a      	cmp	r2, r3
int TCPClient::read() {
   da148:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da14a:	d008      	beq.n	da15e <_ZN9TCPClient4readEv+0x24>
   da14c:	6963      	ldr	r3, [r4, #20]
   da14e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da152:	1c51      	adds	r1, r2, #1
   da154:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   da158:	4413      	add	r3, r2
   da15a:	7918      	ldrb	r0, [r3, #4]
}
   da15c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da15e:	6803      	ldr	r3, [r0, #0]
   da160:	691b      	ldr	r3, [r3, #16]
   da162:	4798      	blx	r3
   da164:	2800      	cmp	r0, #0
   da166:	d1f1      	bne.n	da14c <_ZN9TCPClient4readEv+0x12>
   da168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da16c:	e7f6      	b.n	da15c <_ZN9TCPClient4readEv+0x22>

000da16e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   da16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da170:	6943      	ldr	r3, [r0, #20]
   da172:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   da174:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da178:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da17c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   da17e:	4605      	mov	r5, r0
   da180:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   da182:	d016      	beq.n	da1b2 <_ZN9TCPClient4readEPhj+0x44>
   da184:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   da186:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da18a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da18e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da190:	42bc      	cmp	r4, r7
   da192:	bf28      	it	cs
   da194:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da196:	3304      	adds	r3, #4
   da198:	4622      	mov	r2, r4
   da19a:	4419      	add	r1, r3
   da19c:	4630      	mov	r0, r6
   da19e:	f001 fe60 	bl	dbe62 <memcpy>
   da1a2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da1a4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da1a8:	4423      	add	r3, r4
   da1aa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   da1ae:	4620      	mov	r0, r4
   da1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   da1b2:	6803      	ldr	r3, [r0, #0]
   da1b4:	691b      	ldr	r3, [r3, #16]
   da1b6:	4798      	blx	r3
   da1b8:	2800      	cmp	r0, #0
   da1ba:	d1e3      	bne.n	da184 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   da1bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da1c0:	e7f5      	b.n	da1ae <_ZN9TCPClient4readEPhj+0x40>
	...

000da1c4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da1c8:	4698      	mov	r8, r3
    stop();
   da1ca:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da1cc:	b093      	sub	sp, #76	; 0x4c
   da1ce:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   da1d0:	2400      	movs	r4, #0
    stop();
   da1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da1d4:	4606      	mov	r6, r0
   da1d6:	4617      	mov	r7, r2
    stop();
   da1d8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da1da:	4628      	mov	r0, r5
   da1dc:	466b      	mov	r3, sp
   da1de:	4622      	mov	r2, r4
   da1e0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   da1e2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da1e4:	f7fd f9cc 	bl	d7580 <netdb_getaddrinfo>
   da1e8:	4605      	mov	r5, r0
   da1ea:	2800      	cmp	r0, #0
   da1ec:	d163      	bne.n	da2b6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   da1ee:	9b00      	ldr	r3, [sp, #0]
   da1f0:	2b00      	cmp	r3, #0
   da1f2:	d04b      	beq.n	da28c <_ZN9TCPClient7connectEPKctm+0xc8>
   da1f4:	695b      	ldr	r3, [r3, #20]
   da1f6:	2b00      	cmp	r3, #0
   da1f8:	d048      	beq.n	da28c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   da1fa:	a806      	add	r0, sp, #24
   da1fc:	f7fe f9c4 	bl	d8588 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da200:	9b00      	ldr	r3, [sp, #0]
   da202:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da204:	7863      	ldrb	r3, [r4, #1]
   da206:	2b02      	cmp	r3, #2
   da208:	d104      	bne.n	da214 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da20a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da20c:	a806      	add	r0, sp, #24
   da20e:	f7fe fa0b 	bl	d8628 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   da212:	e026      	b.n	da262 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   da214:	2b0a      	cmp	r3, #10
   da216:	d124      	bne.n	da262 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   da218:	2211      	movs	r2, #17
   da21a:	4629      	mov	r1, r5
   da21c:	a801      	add	r0, sp, #4
   da21e:	f001 fe48 	bl	dbeb2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da222:	68a3      	ldr	r3, [r4, #8]
   da224:	2b00      	cmp	r3, #0
   da226:	d038      	beq.n	da29a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da228:	f104 0308 	add.w	r3, r4, #8
   da22c:	f10d 0c04 	add.w	ip, sp, #4
   da230:	3418      	adds	r4, #24
   da232:	6818      	ldr	r0, [r3, #0]
   da234:	6859      	ldr	r1, [r3, #4]
   da236:	4662      	mov	r2, ip
   da238:	c203      	stmia	r2!, {r0, r1}
   da23a:	3308      	adds	r3, #8
   da23c:	42a3      	cmp	r3, r4
   da23e:	4694      	mov	ip, r2
   da240:	d1f7      	bne.n	da232 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   da242:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da244:	a901      	add	r1, sp, #4
   da246:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   da248:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da24c:	f7fe f9aa 	bl	d85a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da250:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   da254:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   da258:	ac07      	add	r4, sp, #28
   da25a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da25c:	f8dc 3000 	ldr.w	r3, [ip]
   da260:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   da262:	a806      	add	r0, sp, #24
   da264:	f7fe f9b0 	bl	d85c8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da268:	b180      	cbz	r0, da28c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   da26a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   da26c:	ad07      	add	r5, sp, #28
   da26e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da272:	4b12      	ldr	r3, [pc, #72]	; (da2bc <_ZN9TCPClient7connectEPKctm+0xf8>)
   da274:	930c      	str	r3, [sp, #48]	; 0x30
   da276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da278:	ac0d      	add	r4, sp, #52	; 0x34
   da27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da27c:	682b      	ldr	r3, [r5, #0]
   da27e:	7023      	strb	r3, [r4, #0]
   da280:	463a      	mov	r2, r7
   da282:	4643      	mov	r3, r8
   da284:	a90c      	add	r1, sp, #48	; 0x30
   da286:	4630      	mov	r0, r6
   da288:	47c8      	blx	r9
   da28a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   da28c:	9800      	ldr	r0, [sp, #0]
   da28e:	f7fd f96f 	bl	d7570 <netdb_freeaddrinfo>
}
   da292:	4628      	mov	r0, r5
   da294:	b013      	add	sp, #76	; 0x4c
   da296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da29a:	68e3      	ldr	r3, [r4, #12]
   da29c:	2b00      	cmp	r3, #0
   da29e:	d1c3      	bne.n	da228 <_ZN9TCPClient7connectEPKctm+0x64>
   da2a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da2a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da2a8:	f7fd f94a 	bl	d7540 <inet_htonl>
   da2ac:	4581      	cmp	r9, r0
   da2ae:	d1bb      	bne.n	da228 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   da2b0:	f104 0114 	add.w	r1, r4, #20
   da2b4:	e7aa      	b.n	da20c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da2b6:	4625      	mov	r5, r4
   da2b8:	e7e8      	b.n	da28c <_ZN9TCPClient7connectEPKctm+0xc8>
   da2ba:	bf00      	nop
   da2bc:	000de6d4 	.word	0x000de6d4

000da2c0 <_ZN9TCPClient12flush_bufferEv>:
   da2c0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da2c2:	2300      	movs	r3, #0
   da2c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da2c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da2ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   da2ce:	4770      	bx	lr

000da2d0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2d4:	461f      	mov	r7, r3
    stop();
   da2d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da2d8:	460c      	mov	r4, r1
    stop();
   da2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da2dc:	b08a      	sub	sp, #40	; 0x28
   da2de:	4605      	mov	r5, r0
   da2e0:	4616      	mov	r6, r2
    stop();
   da2e2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da2e4:	7d23      	ldrb	r3, [r4, #20]
   da2e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da2ea:	2b04      	cmp	r3, #4
   da2ec:	bf0c      	ite	eq
   da2ee:	2002      	moveq	r0, #2
   da2f0:	200a      	movne	r0, #10
   da2f2:	2206      	movs	r2, #6
   da2f4:	2101      	movs	r1, #1
   da2f6:	f7fd f98b 	bl	d7610 <sock_socket>
   da2fa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da2fe:	696b      	ldr	r3, [r5, #20]
   da300:	681b      	ldr	r3, [r3, #0]
   da302:	2b00      	cmp	r3, #0
   da304:	da08      	bge.n	da318 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   da306:	682b      	ldr	r3, [r5, #0]
   da308:	4628      	mov	r0, r5
   da30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da30c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   da30e:	4798      	blx	r3
}
   da310:	4620      	mov	r0, r4
   da312:	b00a      	add	sp, #40	; 0x28
   da314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   da318:	4628      	mov	r0, r5
   da31a:	f7ff ffd1 	bl	da2c0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   da31e:	b1b7      	cbz	r7, da34e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   da320:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da322:	a903      	add	r1, sp, #12
   da324:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   da326:	9303      	str	r3, [sp, #12]
   da328:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da32c:	f7fd f8f8 	bl	d7520 <if_index_to_name>
   da330:	2800      	cmp	r0, #0
   da332:	d1e8      	bne.n	da306 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da334:	6968      	ldr	r0, [r5, #20]
   da336:	2306      	movs	r3, #6
   da338:	9300      	str	r3, [sp, #0]
   da33a:	6800      	ldr	r0, [r0, #0]
   da33c:	ab03      	add	r3, sp, #12
   da33e:	f241 020b 	movw	r2, #4107	; 0x100b
   da342:	f640 71ff 	movw	r1, #4095	; 0xfff
   da346:	f7fd f92b 	bl	d75a0 <sock_setsockopt>
   da34a:	2800      	cmp	r0, #0
   da34c:	d1db      	bne.n	da306 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   da34e:	221c      	movs	r2, #28
   da350:	2100      	movs	r1, #0
   da352:	a803      	add	r0, sp, #12
   da354:	f001 fdad 	bl	dbeb2 <memset>
    if (ip.version() == 4) {
   da358:	7d23      	ldrb	r3, [r4, #20]
   da35a:	2b04      	cmp	r3, #4
   da35c:	d11d      	bne.n	da39a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   da35e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   da362:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   da364:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   da368:	f7fd f8fa 	bl	d7560 <inet_htons>
   da36c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da370:	6860      	ldr	r0, [r4, #4]
   da372:	f7fd f8e5 	bl	d7540 <inet_htonl>
   da376:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da378:	696b      	ldr	r3, [r5, #20]
   da37a:	221c      	movs	r2, #28
   da37c:	6818      	ldr	r0, [r3, #0]
   da37e:	a903      	add	r1, sp, #12
   da380:	f7fd f91e 	bl	d75c0 <sock_connect>
   da384:	2800      	cmp	r0, #0
   da386:	d1be      	bne.n	da306 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   da388:	3404      	adds	r4, #4
   da38a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da38c:	696d      	ldr	r5, [r5, #20]
   da38e:	358c      	adds	r5, #140	; 0x8c
   da390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da392:	6823      	ldr	r3, [r4, #0]
   da394:	702b      	strb	r3, [r5, #0]
    return 1; // success
   da396:	2401      	movs	r4, #1
   da398:	e7ba      	b.n	da310 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   da39a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   da39e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   da3a0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   da3a4:	f7fd f8dc 	bl	d7560 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da3a8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   da3aa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da3ae:	1d23      	adds	r3, r4, #4
   da3b0:	f104 0714 	add.w	r7, r4, #20
   da3b4:	6818      	ldr	r0, [r3, #0]
   da3b6:	6859      	ldr	r1, [r3, #4]
   da3b8:	4632      	mov	r2, r6
   da3ba:	c203      	stmia	r2!, {r0, r1}
   da3bc:	3308      	adds	r3, #8
   da3be:	42bb      	cmp	r3, r7
   da3c0:	4616      	mov	r6, r2
   da3c2:	d1f7      	bne.n	da3b4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   da3c4:	e7d8      	b.n	da378 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000da3c8 <_ZN9TCPClient9availableEv>:
{
   da3c8:	b530      	push	{r4, r5, lr}
   da3ca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   da3cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   da3d0:	b08b      	sub	sp, #44	; 0x2c
   da3d2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   da3d4:	b12b      	cbz	r3, da3e2 <_ZN9TCPClient9availableEv+0x1a>
   da3d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da3da:	429a      	cmp	r2, r3
   da3dc:	d101      	bne.n	da3e2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   da3de:	f7ff ff6f 	bl	da2c0 <_ZN9TCPClient12flush_bufferEv>
   da3e2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   da3e4:	6808      	ldr	r0, [r1, #0]
   da3e6:	2800      	cmp	r0, #0
   da3e8:	db18      	blt.n	da41c <_ZN9TCPClient9availableEv+0x54>
   da3ea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   da3ee:	2d7f      	cmp	r5, #127	; 0x7f
   da3f0:	d814      	bhi.n	da41c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da3f2:	3104      	adds	r1, #4
   da3f4:	2308      	movs	r3, #8
   da3f6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da3fa:	4429      	add	r1, r5
   da3fc:	f7fd f8e8 	bl	d75d0 <sock_recv>
            if (ret > 0) {
   da400:	2800      	cmp	r0, #0
   da402:	dd13      	ble.n	da42c <_ZN9TCPClient9availableEv+0x64>
   da404:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da406:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da40a:	b90a      	cbnz	r2, da410 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   da40c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da410:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   da412:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da416:	4410      	add	r0, r2
   da418:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   da41c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   da41e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   da422:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   da426:	1ac0      	subs	r0, r0, r3
   da428:	b00b      	add	sp, #44	; 0x2c
   da42a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da42c:	f7fd faee 	bl	d7a0c <__errno>
   da430:	6803      	ldr	r3, [r0, #0]
   da432:	2b0b      	cmp	r3, #11
   da434:	d0f2      	beq.n	da41c <_ZN9TCPClient9availableEv+0x54>
   da436:	f7fd fae9 	bl	d7a0c <__errno>
   da43a:	6803      	ldr	r3, [r0, #0]
   da43c:	2b0b      	cmp	r3, #11
   da43e:	d0ed      	beq.n	da41c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   da440:	2320      	movs	r3, #32
   da442:	2500      	movs	r5, #0
   da444:	e9cd 3502 	strd	r3, r5, [sp, #8]
   da448:	f7fd fae0 	bl	d7a0c <__errno>
   da44c:	6803      	ldr	r3, [r0, #0]
   da44e:	9301      	str	r3, [sp, #4]
   da450:	4b08      	ldr	r3, [pc, #32]	; (da474 <_ZN9TCPClient9availableEv+0xac>)
   da452:	4909      	ldr	r1, [pc, #36]	; (da478 <_ZN9TCPClient9availableEv+0xb0>)
   da454:	9300      	str	r3, [sp, #0]
   da456:	aa02      	add	r2, sp, #8
   da458:	462b      	mov	r3, r5
   da45a:	2032      	movs	r0, #50	; 0x32
   da45c:	f7fd f9b8 	bl	d77d0 <log_message>
                    sock_close(d_->sock);
   da460:	6963      	ldr	r3, [r4, #20]
   da462:	6818      	ldr	r0, [r3, #0]
   da464:	f7fd f8a4 	bl	d75b0 <sock_close>
   da468:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da46e:	601a      	str	r2, [r3, #0]
   da470:	e7d4      	b.n	da41c <_ZN9TCPClient9availableEv+0x54>
   da472:	bf00      	nop
   da474:	000de817 	.word	0x000de817
   da478:	000de810 	.word	0x000de810

000da47c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   da47c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da47e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   da480:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da482:	6818      	ldr	r0, [r3, #0]
   da484:	2800      	cmp	r0, #0
   da486:	db01      	blt.n	da48c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da488:	f7fd f892 	bl	d75b0 <sock_close>
   da48c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   da48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da492:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   da494:	6960      	ldr	r0, [r4, #20]
   da496:	2211      	movs	r2, #17
   da498:	2100      	movs	r1, #0
   da49a:	308c      	adds	r0, #140	; 0x8c
   da49c:	f001 fd09 	bl	dbeb2 <memset>
    flush_buffer();
   da4a0:	4620      	mov	r0, r4
}
   da4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   da4a6:	f7ff bf0b 	b.w	da2c0 <_ZN9TCPClient12flush_bufferEv>

000da4aa <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   da4aa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   da4ac:	6818      	ldr	r0, [r3, #0]
}
   da4ae:	43c0      	mvns	r0, r0
   da4b0:	0fc0      	lsrs	r0, r0, #31
   da4b2:	4770      	bx	lr

000da4b4 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   da4b4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da4b6:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   da4b8:	4604      	mov	r4, r0
          total(0) {
   da4ba:	6001      	str	r1, [r0, #0]
   da4bc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   da4c0:	3088      	adds	r0, #136	; 0x88
   da4c2:	f7fe f861 	bl	d8588 <_ZN9IPAddressC1Ev>
}
   da4c6:	4620      	mov	r0, r4
   da4c8:	bd10      	pop	{r4, pc}
	...

000da4cc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   da4cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da4ce:	2300      	movs	r3, #0
   da4d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da4d4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   da4d8:	4a0e      	ldr	r2, [pc, #56]	; (da514 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   da4da:	6103      	str	r3, [r0, #16]
   da4dc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da4de:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   da4e0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da4e2:	20ac      	movs	r0, #172	; 0xac
   da4e4:	9101      	str	r1, [sp, #4]
   da4e6:	f7f9 fdd6 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da4ea:	1e05      	subs	r5, r0, #0
   da4ec:	f105 060c 	add.w	r6, r5, #12
   da4f0:	d008      	beq.n	da504 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   da4f2:	2301      	movs	r3, #1
   da4f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   da4f8:	4b07      	ldr	r3, [pc, #28]	; (da518 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da4fa:	9901      	ldr	r1, [sp, #4]
   da4fc:	602b      	str	r3, [r5, #0]
   da4fe:	4630      	mov	r0, r6
   da500:	f7ff ffd8 	bl	da4b4 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   da504:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   da506:	e9c4 6505 	strd	r6, r5, [r4, #20]
   da50a:	f7ff fed9 	bl	da2c0 <_ZN9TCPClient12flush_bufferEv>
}
   da50e:	b002      	add	sp, #8
   da510:	bd70      	pop	{r4, r5, r6, pc}
   da512:	bf00      	nop
   da514:	000de84c 	.word	0x000de84c
   da518:	000de830 	.word	0x000de830

000da51c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   da51c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da51e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   da522:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da524:	f7ff ffd2 	bl	da4cc <_ZN9TCPClientC1Ei>
}
   da528:	4620      	mov	r0, r4
   da52a:	bd10      	pop	{r4, pc}

000da52c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   da52c:	b510      	push	{r4, lr}
   da52e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da530:	6800      	ldr	r0, [r0, #0]
   da532:	2800      	cmp	r0, #0
   da534:	db01      	blt.n	da53a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da536:	f7fd f83b 	bl	d75b0 <sock_close>
    }
}
   da53a:	4620      	mov	r0, r4
   da53c:	bd10      	pop	{r4, pc}

000da53e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   da53e:	300c      	adds	r0, #12
   da540:	f7ff bff4 	b.w	da52c <_ZN9TCPClient4DataD1Ev>

000da544 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da544:	4b02      	ldr	r3, [pc, #8]	; (da550 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da546:	681a      	ldr	r2, [r3, #0]
   da548:	4b02      	ldr	r3, [pc, #8]	; (da554 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da54a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da54c:	4770      	bx	lr
   da54e:	bf00      	nop
   da550:	2003e024 	.word	0x2003e024
   da554:	2003e5dc 	.word	0x2003e5dc

000da558 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   da558:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   da55a:	6804      	ldr	r4, [r0, #0]
   da55c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   da55e:	46a4      	mov	ip, r4
    }
   da560:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   da564:	4760      	bx	ip

000da566 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   da566:	6803      	ldr	r3, [r0, #0]
   da568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da56a:	4718      	bx	r3

000da56c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   da56c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   da56e:	4770      	bx	lr

000da570 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   da570:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   da572:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   da574:	1a10      	subs	r0, r2, r0
   da576:	4770      	bx	lr

000da578 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   da578:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   da57a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   da57c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   da580:	68db      	ldr	r3, [r3, #12]
   da582:	2201      	movs	r2, #1
   da584:	f10d 0107 	add.w	r1, sp, #7
   da588:	4798      	blx	r3
}
   da58a:	b003      	add	sp, #12
   da58c:	f85d fb04 	ldr.w	pc, [sp], #4

000da590 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   da590:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   da592:	6803      	ldr	r3, [r0, #0]
   da594:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   da596:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   da598:	4798      	blx	r3
   da59a:	b128      	cbz	r0, da5a8 <_ZN3UDP4readEv+0x18>
   da59c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da59e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   da5a0:	1c59      	adds	r1, r3, #1
   da5a2:	86e1      	strh	r1, [r4, #54]	; 0x36
   da5a4:	5cd0      	ldrb	r0, [r2, r3]
}
   da5a6:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   da5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da5ac:	e7fb      	b.n	da5a6 <_ZN3UDP4readEv+0x16>

000da5ae <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   da5ae:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   da5b0:	6803      	ldr	r3, [r0, #0]
   da5b2:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   da5b4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   da5b6:	4798      	blx	r3
   da5b8:	b118      	cbz	r0, da5c2 <_ZN3UDP4peekEv+0x14>
   da5ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da5bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   da5be:	5cd0      	ldrb	r0, [r2, r3]
}
   da5c0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   da5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da5c6:	e7fb      	b.n	da5c0 <_ZN3UDP4peekEv+0x12>

000da5c8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   da5c8:	4770      	bx	lr

000da5ca <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   da5ca:	b410      	push	{r4}
   da5cc:	4603      	mov	r3, r0
   da5ce:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   da5d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   da5d2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   da5d4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   da5d6:	6803      	ldr	r3, [r0, #0]
   da5d8:	1a52      	subs	r2, r2, r1
   da5da:	68db      	ldr	r3, [r3, #12]
   da5dc:	4421      	add	r1, r4
}
   da5de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   da5e2:	4718      	bx	r3

000da5e4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   da5e4:	f1a0 0010 	sub.w	r0, r0, #16
   da5e8:	f7ff bfef 	b.w	da5ca <_ZNK3UDP7printToER5Print>

000da5ec <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da5ec:	b570      	push	{r4, r5, r6, lr}
    stop();
   da5ee:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da5f0:	b08c      	sub	sp, #48	; 0x30
    stop();
   da5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da5f4:	4604      	mov	r4, r0
   da5f6:	460e      	mov	r6, r1
   da5f8:	4615      	mov	r5, r2
    stop();
   da5fa:	4798      	blx	r3
    const int one = 1;
   da5fc:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   da5fe:	221c      	movs	r2, #28
   da600:	2100      	movs	r1, #0
   da602:	a805      	add	r0, sp, #20
    const int one = 1;
   da604:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   da606:	f001 fc54 	bl	dbeb2 <memset>
    saddr.sin6_len = sizeof(saddr);
   da60a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   da60e:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   da610:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   da614:	f7fc ffa4 	bl	d7560 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da618:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   da61a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da61e:	2102      	movs	r1, #2
   da620:	200a      	movs	r0, #10
   da622:	f7fc fff5 	bl	d7610 <sock_socket>
    if (_sock < 0) {
   da626:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da628:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   da62a:	db25      	blt.n	da678 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   da62c:	2204      	movs	r2, #4
   da62e:	9200      	str	r2, [sp, #0]
   da630:	ab02      	add	r3, sp, #8
   da632:	f640 71ff 	movw	r1, #4095	; 0xfff
   da636:	f7fc ffb3 	bl	d75a0 <sock_setsockopt>
   da63a:	b9e8      	cbnz	r0, da678 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   da63c:	b195      	cbz	r5, da664 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   da63e:	9003      	str	r0, [sp, #12]
   da640:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   da644:	a903      	add	r1, sp, #12
   da646:	b2e8      	uxtb	r0, r5
   da648:	f7fc ff6a 	bl	d7520 <if_index_to_name>
   da64c:	b9a0      	cbnz	r0, da678 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   da64e:	2306      	movs	r3, #6
   da650:	9300      	str	r3, [sp, #0]
   da652:	6960      	ldr	r0, [r4, #20]
   da654:	ab03      	add	r3, sp, #12
   da656:	f241 020b 	movw	r2, #4107	; 0x100b
   da65a:	f640 71ff 	movw	r1, #4095	; 0xfff
   da65e:	f7fc ff9f 	bl	d75a0 <sock_setsockopt>
   da662:	b948      	cbnz	r0, da678 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   da664:	6960      	ldr	r0, [r4, #20]
   da666:	221c      	movs	r2, #28
   da668:	a905      	add	r1, sp, #20
   da66a:	f7fc ff91 	bl	d7590 <sock_bind>
   da66e:	b918      	cbnz	r0, da678 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   da670:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   da672:	2001      	movs	r0, #1
}
   da674:	b00c      	add	sp, #48	; 0x30
   da676:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   da678:	6823      	ldr	r3, [r4, #0]
   da67a:	4620      	mov	r0, r4
   da67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da67e:	4798      	blx	r3
   da680:	2000      	movs	r0, #0
   da682:	e7f7      	b.n	da674 <_ZN3UDP5beginEtm+0x88>

000da684 <_ZN3UDP4stopEv>:
void UDP::stop() {
   da684:	b510      	push	{r4, lr}
   da686:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   da688:	6940      	ldr	r0, [r0, #20]
   da68a:	2800      	cmp	r0, #0
   da68c:	db01      	blt.n	da692 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   da68e:	f7fc ff8f 	bl	d75b0 <sock_close>
    _sock = -1;
   da692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da696:	6163      	str	r3, [r4, #20]
    _offset = 0;
   da698:	2300      	movs	r3, #0
   da69a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   da69c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   da69e:	bd10      	pop	{r4, pc}

000da6a0 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   da6a0:	b570      	push	{r4, r5, r6, lr}
   da6a2:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   da6a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   da6a6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   da6a8:	b168      	cbz	r0, da6c6 <_ZN3UDP5writeEPKhj+0x26>
   da6aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   da6ac:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   da6ae:	4294      	cmp	r4, r2
   da6b0:	bf28      	it	cs
   da6b2:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   da6b4:	4622      	mov	r2, r4
   da6b6:	4430      	add	r0, r6
   da6b8:	f001 fbd3 	bl	dbe62 <memcpy>
    _offset += size;
   da6bc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   da6be:	4423      	add	r3, r4
   da6c0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   da6c2:	4620      	mov	r0, r4
   da6c4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   da6c6:	4604      	mov	r4, r0
   da6c8:	e7f1      	b.n	da6ae <_ZN3UDP5writeEPKhj+0xe>

000da6ca <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   da6ca:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   da6cc:	6803      	ldr	r3, [r0, #0]
   da6ce:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   da6d0:	4604      	mov	r4, r0
   da6d2:	460f      	mov	r7, r1
   da6d4:	4616      	mov	r6, r2
    if (available()) {
   da6d6:	4798      	blx	r3
   da6d8:	b190      	cbz	r0, da700 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   da6da:	6823      	ldr	r3, [r4, #0]
   da6dc:	4620      	mov	r0, r4
   da6de:	691b      	ldr	r3, [r3, #16]
   da6e0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   da6e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da6e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da6e6:	4286      	cmp	r6, r0
   da6e8:	bfa8      	it	ge
   da6ea:	4606      	movge	r6, r0
   da6ec:	4419      	add	r1, r3
   da6ee:	4632      	mov	r2, r6
   da6f0:	4638      	mov	r0, r7
   da6f2:	f001 fbb6 	bl	dbe62 <memcpy>
        _offset += read;
   da6f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da6f8:	4433      	add	r3, r6
   da6fa:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   da6fc:	4630      	mov	r0, r6
   da6fe:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   da700:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   da704:	e7fa      	b.n	da6fc <_ZN3UDP4readEPhj+0x32>
	...

000da708 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   da708:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
   da70a:	4604      	mov	r4, r0
   da70c:	4b05      	ldr	r3, [pc, #20]	; (da724 <_ZN3UDP8remoteIPEv+0x1c>)
   da70e:	f844 3b04 	str.w	r3, [r4], #4
   da712:	f101 0520 	add.w	r5, r1, #32
   da716:	4606      	mov	r6, r0
   da718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da71c:	682b      	ldr	r3, [r5, #0]
   da71e:	7023      	strb	r3, [r4, #0]
   da720:	4630      	mov	r0, r6
   da722:	bd70      	pop	{r4, r5, r6, pc}
   da724:	000de6d4 	.word	0x000de6d4

000da728 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   da728:	b5f0      	push	{r4, r5, r6, r7, lr}
   da72a:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   da72c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   da72e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   da730:	6a97      	ldr	r7, [r2, #40]	; 0x28
   da732:	4a0a      	ldr	r2, [pc, #40]	; (da75c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   da734:	9202      	str	r2, [sp, #8]
   da736:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   da738:	468c      	mov	ip, r1
   da73a:	4606      	mov	r6, r0
   da73c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da73e:	ad03      	add	r5, sp, #12
   da740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da742:	6823      	ldr	r3, [r4, #0]
   da744:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   da746:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   da74a:	9300      	str	r3, [sp, #0]
   da74c:	4672      	mov	r2, lr
   da74e:	ab02      	add	r3, sp, #8
   da750:	4661      	mov	r1, ip
   da752:	4630      	mov	r0, r6
   da754:	47b8      	blx	r7
    }
   da756:	b009      	add	sp, #36	; 0x24
   da758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da75a:	bf00      	nop
   da75c:	000de6d4 	.word	0x000de6d4

000da760 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   da760:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   da762:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   da764:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   da766:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   da768:	4b0c      	ldr	r3, [pc, #48]	; (da79c <_ZN3UDP9endPacketEv+0x3c>)
   da76a:	9302      	str	r3, [sp, #8]
   da76c:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   da770:	4604      	mov	r4, r0
   da772:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   da774:	ad03      	add	r5, sp, #12
   da776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da778:	6833      	ldr	r3, [r6, #0]
   da77a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   da77c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   da77e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   da780:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da782:	9300      	str	r3, [sp, #0]
   da784:	4620      	mov	r0, r4
   da786:	ab02      	add	r3, sp, #8
   da788:	47b8      	blx	r7
    flush(); // wait for send to complete
   da78a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   da78c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   da78e:	69db      	ldr	r3, [r3, #28]
   da790:	4620      	mov	r0, r4
   da792:	4798      	blx	r3
}
   da794:	4628      	mov	r0, r5
   da796:	b009      	add	sp, #36	; 0x24
   da798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da79a:	bf00      	nop
   da79c:	000de6d4 	.word	0x000de6d4

000da7a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   da7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   da7a2:	7843      	ldrb	r3, [r0, #1]
   da7a4:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   da7a6:	b08d      	sub	sp, #52	; 0x34
   da7a8:	4605      	mov	r5, r0
   da7aa:	460c      	mov	r4, r1
   da7ac:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   da7ae:	d104      	bne.n	da7ba <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da7b0:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   da7b2:	4620      	mov	r0, r4
   da7b4:	f7fd ff38 	bl	d8628 <_ZN9IPAddressaSEPKh>
   da7b8:	e022      	b.n	da800 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   da7ba:	2b0a      	cmp	r3, #10
   da7bc:	d125      	bne.n	da80a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   da7be:	2211      	movs	r2, #17
   da7c0:	2100      	movs	r1, #0
   da7c2:	a801      	add	r0, sp, #4
   da7c4:	f001 fb75 	bl	dbeb2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da7c8:	68ab      	ldr	r3, [r5, #8]
   da7ca:	b303      	cbz	r3, da80e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da7cc:	f105 0308 	add.w	r3, r5, #8
   da7d0:	ae01      	add	r6, sp, #4
   da7d2:	f105 0c18 	add.w	ip, r5, #24
   da7d6:	6818      	ldr	r0, [r3, #0]
   da7d8:	6859      	ldr	r1, [r3, #4]
   da7da:	4632      	mov	r2, r6
   da7dc:	c203      	stmia	r2!, {r0, r1}
   da7de:	3308      	adds	r3, #8
   da7e0:	4563      	cmp	r3, ip
   da7e2:	4616      	mov	r6, r2
   da7e4:	d1f7      	bne.n	da7d6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   da7e6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da7e8:	a901      	add	r1, sp, #4
   da7ea:	a806      	add	r0, sp, #24
   da7ec:	ae07      	add	r6, sp, #28
            a.v = 6;
   da7ee:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da7f2:	f7fd fed7 	bl	d85a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da7f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   da7f8:	3404      	adds	r4, #4
   da7fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da7fc:	6833      	ldr	r3, [r6, #0]
   da7fe:	7023      	strb	r3, [r4, #0]
        if (port) {
   da800:	b11f      	cbz	r7, da80a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   da802:	8868      	ldrh	r0, [r5, #2]
   da804:	f7fc fea4 	bl	d7550 <inet_ntohs>
   da808:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   da80a:	b00d      	add	sp, #52	; 0x34
   da80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da80e:	68eb      	ldr	r3, [r5, #12]
   da810:	2b00      	cmp	r3, #0
   da812:	d1db      	bne.n	da7cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   da814:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da818:	692e      	ldr	r6, [r5, #16]
   da81a:	f7fc fe91 	bl	d7540 <inet_htonl>
   da81e:	4286      	cmp	r6, r0
   da820:	d1d4      	bne.n	da7cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   da822:	f105 0114 	add.w	r1, r5, #20
   da826:	e7c4      	b.n	da7b2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000da828 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   da828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da82c:	4617      	mov	r7, r2
   da82e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   da830:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   da832:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   da834:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   da836:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   da838:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   da83a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   da83c:	f7fc fea0 	bl	d7580 <netdb_getaddrinfo>
   da840:	1e04      	subs	r4, r0, #0
   da842:	db20      	blt.n	da886 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   da844:	9b01      	ldr	r3, [sp, #4]
   da846:	b32b      	cbz	r3, da894 <_ZN3UDP11beginPacketEPKct+0x6c>
   da848:	695b      	ldr	r3, [r3, #20]
   da84a:	b31b      	cbz	r3, da894 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   da84c:	a802      	add	r0, sp, #8
   da84e:	f7fd fe9b 	bl	d8588 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da852:	9b01      	ldr	r3, [sp, #4]
   da854:	2200      	movs	r2, #0
   da856:	6958      	ldr	r0, [r3, #20]
   da858:	a902      	add	r1, sp, #8
   da85a:	f7ff ffa1 	bl	da7a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   da85e:	a802      	add	r0, sp, #8
   da860:	f7fd feb2 	bl	d85c8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da864:	b1b0      	cbz	r0, da894 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   da866:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   da868:	ad03      	add	r5, sp, #12
   da86a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   da86e:	4b0b      	ldr	r3, [pc, #44]	; (da89c <_ZN3UDP11beginPacketEPKct+0x74>)
   da870:	9308      	str	r3, [sp, #32]
   da872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da874:	ac09      	add	r4, sp, #36	; 0x24
   da876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da878:	682b      	ldr	r3, [r5, #0]
   da87a:	7023      	strb	r3, [r4, #0]
   da87c:	463a      	mov	r2, r7
   da87e:	a908      	add	r1, sp, #32
   da880:	4630      	mov	r0, r6
   da882:	47c0      	blx	r8
   da884:	4604      	mov	r4, r0
    SCOPE_GUARD({
   da886:	9801      	ldr	r0, [sp, #4]
   da888:	f7fc fe72 	bl	d7570 <netdb_freeaddrinfo>
}
   da88c:	4620      	mov	r0, r4
   da88e:	b00e      	add	sp, #56	; 0x38
   da890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   da894:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da898:	e7f5      	b.n	da886 <_ZN3UDP11beginPacketEPKct+0x5e>
   da89a:	bf00      	nop
   da89c:	000de6d4 	.word	0x000de6d4

000da8a0 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   da8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   da8a4:	f8d0 9014 	ldr.w	r9, [r0, #20]
   da8a8:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   da8ac:	b090      	sub	sp, #64	; 0x40
   da8ae:	4605      	mov	r5, r0
   da8b0:	460e      	mov	r6, r1
   da8b2:	4690      	mov	r8, r2
   da8b4:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   da8b6:	db3c      	blt.n	da932 <_ZN3UDP13receivePacketEPhjm+0x92>
   da8b8:	2900      	cmp	r1, #0
   da8ba:	d03a      	beq.n	da932 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   da8bc:	f04f 0a1c 	mov.w	sl, #28
   da8c0:	af09      	add	r7, sp, #36	; 0x24
   da8c2:	4652      	mov	r2, sl
   da8c4:	2100      	movs	r1, #0
   da8c6:	4638      	mov	r0, r7
   da8c8:	f001 faf3 	bl	dbeb2 <memset>
        socklen_t slen = sizeof(saddr);
   da8cc:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   da8d0:	b1dc      	cbz	r4, da90a <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   da8d2:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   da8d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   da8d8:	fbb4 f3f0 	udiv	r3, r4, r0
   da8dc:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   da8e0:	fb00 4313 	mls	r3, r0, r3, r4
   da8e4:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   da8e6:	2310      	movs	r3, #16
            struct timeval tv = {};
   da8e8:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   da8ea:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   da8ec:	9300      	str	r3, [sp, #0]
   da8ee:	f241 0206 	movw	r2, #4102	; 0x1006
   da8f2:	446b      	add	r3, sp
   da8f4:	f640 71ff 	movw	r1, #4095	; 0xfff
   da8f8:	4648      	mov	r0, r9
   da8fa:	f7fc fe51 	bl	d75a0 <sock_setsockopt>
            if (ret) {
   da8fe:	4604      	mov	r4, r0
   da900:	b120      	cbz	r0, da90c <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   da902:	4620      	mov	r0, r4
   da904:	b010      	add	sp, #64	; 0x40
   da906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   da90a:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   da90c:	ab03      	add	r3, sp, #12
   da90e:	e9cd 7300 	strd	r7, r3, [sp]
   da912:	6968      	ldr	r0, [r5, #20]
   da914:	4623      	mov	r3, r4
   da916:	4642      	mov	r2, r8
   da918:	4631      	mov	r1, r6
   da91a:	f7fc fe61 	bl	d75e0 <sock_recvfrom>
        if (ret >= 0) {
   da91e:	1e04      	subs	r4, r0, #0
   da920:	dbef      	blt.n	da902 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   da922:	f105 0234 	add.w	r2, r5, #52	; 0x34
   da926:	f105 011c 	add.w	r1, r5, #28
   da92a:	4638      	mov	r0, r7
   da92c:	f7ff ff38 	bl	da7a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   da930:	e7e7      	b.n	da902 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   da932:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da936:	e7e4      	b.n	da902 <_ZN3UDP13receivePacketEPhjm+0x62>

000da938 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   da938:	b538      	push	{r3, r4, r5, lr}
   da93a:	4605      	mov	r5, r0
   da93c:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   da93e:	7d2b      	ldrb	r3, [r5, #20]
   da940:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   da942:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   da944:	d110      	bne.n	da968 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   da946:	f640 231c 	movw	r3, #2588	; 0xa1c
   da94a:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   da94c:	f7fc fe08 	bl	d7560 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   da950:	3408      	adds	r4, #8
   da952:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   da954:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   da958:	3514      	adds	r5, #20
   da95a:	f853 2b04 	ldr.w	r2, [r3], #4
   da95e:	f844 2b04 	str.w	r2, [r4], #4
   da962:	42ab      	cmp	r3, r5
   da964:	d1f9      	bne.n	da95a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   da966:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   da968:	2b04      	cmp	r3, #4
   da96a:	d1fc      	bne.n	da966 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   da96c:	f44f 7304 	mov.w	r3, #528	; 0x210
   da970:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   da972:	f7fc fdf5 	bl	d7560 <inet_htons>
   da976:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   da978:	6868      	ldr	r0, [r5, #4]
   da97a:	f7fc fde1 	bl	d7540 <inet_htonl>
   da97e:	6060      	str	r0, [r4, #4]
}
   da980:	e7f1      	b.n	da966 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000da982 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   da982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da986:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   da988:	af03      	add	r7, sp, #12
   da98a:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   da98e:	4698      	mov	r8, r3
   da990:	4604      	mov	r4, r0
   da992:	460d      	mov	r5, r1
   da994:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   da996:	2100      	movs	r1, #0
   da998:	464a      	mov	r2, r9
   da99a:	4638      	mov	r0, r7
   da99c:	f001 fa89 	bl	dbeb2 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   da9a0:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   da9a4:	463a      	mov	r2, r7
   da9a6:	4640      	mov	r0, r8
   da9a8:	f7ff ffc6 	bl	da938 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   da9ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
   da9b0:	b153      	cbz	r3, da9c8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   da9b2:	e9cd 7900 	strd	r7, r9, [sp]
   da9b6:	6960      	ldr	r0, [r4, #20]
   da9b8:	2300      	movs	r3, #0
   da9ba:	4632      	mov	r2, r6
   da9bc:	4629      	mov	r1, r5
   da9be:	f7fc fe1f 	bl	d7600 <sock_sendto>
}
   da9c2:	b00b      	add	sp, #44	; 0x2c
   da9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   da9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da9cc:	e7f9      	b.n	da9c2 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000da9d0 <_ZN3UDPC1Ev>:
UDP::UDP()
   da9d0:	b538      	push	{r3, r4, r5, lr}
   da9d2:	2500      	movs	r5, #0
   da9d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da9d8:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   da9dc:	4b0b      	ldr	r3, [pc, #44]	; (daa0c <_ZN3UDPC1Ev+0x3c>)
   da9de:	f103 0208 	add.w	r2, r3, #8
   da9e2:	336c      	adds	r3, #108	; 0x6c
   da9e4:	6103      	str	r3, [r0, #16]
   da9e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   da9ea:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   da9ec:	6002      	str	r2, [r0, #0]
   da9ee:	6143      	str	r3, [r0, #20]
   da9f0:	301c      	adds	r0, #28
   da9f2:	f7fd fdc9 	bl	d8588 <_ZN9IPAddressC1Ev>
   da9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   da9fa:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   da9fe:	86e5      	strh	r5, [r4, #54]	; 0x36
   daa00:	8725      	strh	r5, [r4, #56]	; 0x38
   daa02:	63e5      	str	r5, [r4, #60]	; 0x3c
   daa04:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   daa08:	4620      	mov	r0, r4
   daa0a:	bd38      	pop	{r3, r4, r5, pc}
   daa0c:	000de8ac 	.word	0x000de8ac

000daa10 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   daa10:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   daa12:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   daa16:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   daa18:	b123      	cbz	r3, daa24 <_ZN3UDP13releaseBufferEv+0x14>
   daa1a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   daa1c:	b110      	cbz	r0, daa24 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   daa1e:	2101      	movs	r1, #1
   daa20:	f000 fb2e 	bl	db080 <_ZdlPvj>
    _buffer = NULL;
   daa24:	2300      	movs	r3, #0
   daa26:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   daa28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   daa2c:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   daa2e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   daa30:	8723      	strh	r3, [r4, #56]	; 0x38
}
   daa32:	bd10      	pop	{r4, pc}

000daa34 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   daa34:	b570      	push	{r4, r5, r6, lr}
   daa36:	4604      	mov	r4, r0
   daa38:	4616      	mov	r6, r2
   daa3a:	460d      	mov	r5, r1
    releaseBuffer();
   daa3c:	f7ff ffe8 	bl	daa10 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   daa40:	2300      	movs	r3, #0
    _buffer = buffer;
   daa42:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   daa44:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   daa46:	b12e      	cbz	r6, daa54 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   daa48:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   daa4a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   daa4c:	3800      	subs	r0, #0
   daa4e:	bf18      	it	ne
   daa50:	2001      	movne	r0, #1
   daa52:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   daa54:	2d00      	cmp	r5, #0
   daa56:	d0f8      	beq.n	daa4a <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   daa58:	4628      	mov	r0, r5
   daa5a:	f7f9 fb1e 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   daa5e:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   daa60:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   daa62:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   daa66:	2800      	cmp	r0, #0
   daa68:	d0ef      	beq.n	daa4a <_ZN3UDP9setBufferEjPh+0x16>
   daa6a:	e7ed      	b.n	daa48 <_ZN3UDP9setBufferEjPh+0x14>

000daa6c <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   daa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa6e:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   daa70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   daa72:	4605      	mov	r5, r0
   daa74:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   daa76:	b91a      	cbnz	r2, daa80 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   daa78:	6c01      	ldr	r1, [r0, #64]	; 0x40
   daa7a:	b109      	cbz	r1, daa80 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   daa7c:	f7ff ffda 	bl	daa34 <_ZN3UDP9setBufferEjPh>
   daa80:	3404      	adds	r4, #4
   daa82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daa84:	f105 0620 	add.w	r6, r5, #32
   daa88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   daa8a:	6823      	ldr	r3, [r4, #0]
   daa8c:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   daa8e:	2300      	movs	r3, #0
}
   daa90:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   daa92:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   daa94:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   daa96:	872b      	strh	r3, [r5, #56]	; 0x38
}
   daa98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa9a <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   daa9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   daa9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   daa9e:	4604      	mov	r4, r0
   daaa0:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   daaa2:	b92a      	cbnz	r2, daab0 <_ZN3UDP11parsePacketEm+0x16>
   daaa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   daaa6:	b119      	cbz	r1, daab0 <_ZN3UDP11parsePacketEm+0x16>
   daaa8:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   daaaa:	f7ff ffc3 	bl	daa34 <_ZN3UDP9setBufferEjPh>
   daaae:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   daab0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   daab2:	2200      	movs	r2, #0
   daab4:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   daab6:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   daab8:	b141      	cbz	r1, daacc <_ZN3UDP11parsePacketEm+0x32>
   daaba:	6c22      	ldr	r2, [r4, #64]	; 0x40
   daabc:	b132      	cbz	r2, daacc <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   daabe:	6820      	ldr	r0, [r4, #0]
   daac0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   daac2:	4620      	mov	r0, r4
   daac4:	47a8      	blx	r5
        if (result > 0) {
   daac6:	2800      	cmp	r0, #0
            _total = result;
   daac8:	bfc8      	it	gt
   daaca:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   daacc:	6823      	ldr	r3, [r4, #0]
   daace:	691b      	ldr	r3, [r3, #16]
   daad0:	4620      	mov	r0, r4
}
   daad2:	b003      	add	sp, #12
   daad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   daad8:	4718      	bx	r3
	...

000daadc <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   daadc:	b510      	push	{r4, lr}
   daade:	4b07      	ldr	r3, [pc, #28]	; (daafc <_ZN3UDPD1Ev+0x20>)
   daae0:	f103 0208 	add.w	r2, r3, #8
   daae4:	336c      	adds	r3, #108	; 0x6c
   daae6:	4604      	mov	r4, r0
   daae8:	6002      	str	r2, [r0, #0]
   daaea:	6103      	str	r3, [r0, #16]
   daaec:	f7ff fdca 	bl	da684 <_ZN3UDP4stopEv>
   daaf0:	4620      	mov	r0, r4
   daaf2:	f7ff ff8d 	bl	daa10 <_ZN3UDP13releaseBufferEv>
   daaf6:	4620      	mov	r0, r4
   daaf8:	bd10      	pop	{r4, pc}
   daafa:	bf00      	nop
   daafc:	000de8ac 	.word	0x000de8ac

000dab00 <_ZN3UDPD0Ev>:
   dab00:	b510      	push	{r4, lr}
   dab02:	4604      	mov	r4, r0
   dab04:	f7ff ffea 	bl	daadc <_ZN3UDPD1Ev>
   dab08:	4620      	mov	r0, r4
   dab0a:	214c      	movs	r1, #76	; 0x4c
   dab0c:	f000 fab8 	bl	db080 <_ZdlPvj>
   dab10:	4620      	mov	r0, r4
   dab12:	bd10      	pop	{r4, pc}

000dab14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dab14:	4770      	bx	lr

000dab16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dab16:	7441      	strb	r1, [r0, #17]
}
   dab18:	4770      	bx	lr

000dab1a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dab1a:	4770      	bx	lr

000dab1c <_ZN11USARTSerial17availableForWriteEv>:
{
   dab1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dab1e:	7c00      	ldrb	r0, [r0, #16]
   dab20:	f7fc fdfe 	bl	d7720 <hal_usart_available_data_for_write>
}
   dab24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dab28:	bd08      	pop	{r3, pc}

000dab2a <_ZN11USARTSerial9availableEv>:
{
   dab2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dab2c:	7c00      	ldrb	r0, [r0, #16]
   dab2e:	f7fc fdcf 	bl	d76d0 <hal_usart_available>
}
   dab32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dab36:	bd08      	pop	{r3, pc}

000dab38 <_ZN11USARTSerial4peekEv>:
{
   dab38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dab3a:	7c00      	ldrb	r0, [r0, #16]
   dab3c:	f7fc fdd8 	bl	d76f0 <hal_usart_peek>
}
   dab40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dab44:	bd08      	pop	{r3, pc}

000dab46 <_ZN11USARTSerial4readEv>:
{
   dab46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dab48:	7c00      	ldrb	r0, [r0, #16]
   dab4a:	f7fc fdc9 	bl	d76e0 <hal_usart_read>
}
   dab4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dab52:	bd08      	pop	{r3, pc}

000dab54 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dab54:	7c00      	ldrb	r0, [r0, #16]
   dab56:	f7fc bdd3 	b.w	d7700 <hal_usart_flush>

000dab5a <_ZN11USARTSerial5writeEh>:
{
   dab5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dab5c:	7c45      	ldrb	r5, [r0, #17]
{
   dab5e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dab60:	b12d      	cbz	r5, dab6e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dab62:	7c20      	ldrb	r0, [r4, #16]
}
   dab64:	b003      	add	sp, #12
   dab66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dab6a:	f7fc bda9 	b.w	d76c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dab6e:	7c00      	ldrb	r0, [r0, #16]
   dab70:	9101      	str	r1, [sp, #4]
   dab72:	f7fc fdd5 	bl	d7720 <hal_usart_available_data_for_write>
   dab76:	2800      	cmp	r0, #0
   dab78:	9901      	ldr	r1, [sp, #4]
   dab7a:	dcf2      	bgt.n	dab62 <_ZN11USARTSerial5writeEh+0x8>
}
   dab7c:	4628      	mov	r0, r5
   dab7e:	b003      	add	sp, #12
   dab80:	bd30      	pop	{r4, r5, pc}

000dab82 <_ZN11USARTSerialD0Ev>:
   dab82:	b510      	push	{r4, lr}
   dab84:	2114      	movs	r1, #20
   dab86:	4604      	mov	r4, r0
   dab88:	f000 fa7a 	bl	db080 <_ZdlPvj>
   dab8c:	4620      	mov	r0, r4
   dab8e:	bd10      	pop	{r4, pc}

000dab90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dab90:	b510      	push	{r4, lr}
   dab92:	f04f 0c00 	mov.w	ip, #0
   dab96:	4604      	mov	r4, r0
   dab98:	4608      	mov	r0, r1
   dab9a:	4611      	mov	r1, r2
   dab9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   daba0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   daba4:	4a04      	ldr	r2, [pc, #16]	; (dabb8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   daba6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   daba8:	2201      	movs	r2, #1
  _serial = serial;
   dabaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dabac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dabae:	461a      	mov	r2, r3
   dabb0:	f7fc fd76 	bl	d76a0 <hal_usart_init>
}
   dabb4:	4620      	mov	r0, r4
   dabb6:	bd10      	pop	{r4, pc}
   dabb8:	000de924 	.word	0x000de924

000dabbc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dabbc:	7c00      	ldrb	r0, [r0, #16]
   dabbe:	2300      	movs	r3, #0
   dabc0:	f7fc bdb6 	b.w	d7730 <hal_usart_begin_config>

000dabc4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dabc4:	2200      	movs	r2, #0
   dabc6:	f7ff bff9 	b.w	dabbc <_ZN11USARTSerial5beginEmm>

000dabca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dabca:	7c00      	ldrb	r0, [r0, #16]
   dabcc:	f7fc bd70 	b.w	d76b0 <hal_usart_end>

000dabd0 <_Z22__fetch_global_Serial1v>:
{
   dabd0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dabd2:	4c0d      	ldr	r4, [pc, #52]	; (dac08 <_Z22__fetch_global_Serial1v+0x38>)
   dabd4:	7821      	ldrb	r1, [r4, #0]
   dabd6:	f3bf 8f5b 	dmb	ish
   dabda:	f011 0101 	ands.w	r1, r1, #1
   dabde:	d110      	bne.n	dac02 <_Z22__fetch_global_Serial1v+0x32>
   dabe0:	4620      	mov	r0, r4
   dabe2:	9101      	str	r1, [sp, #4]
   dabe4:	f7f9 fa68 	bl	d40b8 <__cxa_guard_acquire>
   dabe8:	9901      	ldr	r1, [sp, #4]
   dabea:	b150      	cbz	r0, dac02 <_Z22__fetch_global_Serial1v+0x32>
   dabec:	4b07      	ldr	r3, [pc, #28]	; (dac0c <_Z22__fetch_global_Serial1v+0x3c>)
   dabee:	4a08      	ldr	r2, [pc, #32]	; (dac10 <_Z22__fetch_global_Serial1v+0x40>)
   dabf0:	4808      	ldr	r0, [pc, #32]	; (dac14 <_Z22__fetch_global_Serial1v+0x44>)
   dabf2:	f7ff ffcd 	bl	dab90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dabf6:	4620      	mov	r0, r4
   dabf8:	f7f9 fa63 	bl	d40c2 <__cxa_guard_release>
   dabfc:	4806      	ldr	r0, [pc, #24]	; (dac18 <_Z22__fetch_global_Serial1v+0x48>)
   dabfe:	f001 f923 	bl	dbe48 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dac02:	4804      	ldr	r0, [pc, #16]	; (dac14 <_Z22__fetch_global_Serial1v+0x44>)
   dac04:	b002      	add	sp, #8
   dac06:	bd10      	pop	{r4, pc}
   dac08:	2003e5e0 	.word	0x2003e5e0
   dac0c:	2003e668 	.word	0x2003e668
   dac10:	2003e5e4 	.word	0x2003e5e4
   dac14:	2003e6ec 	.word	0x2003e6ec
   dac18:	000dab1b 	.word	0x000dab1b

000dac1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dac1c:	7441      	strb	r1, [r0, #17]
}
   dac1e:	4770      	bx	lr

000dac20 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dac20:	4770      	bx	lr

000dac22 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dac22:	4770      	bx	lr

000dac24 <_ZN9USBSerial4readEv>:
{
   dac24:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dac26:	2100      	movs	r1, #0
   dac28:	7c00      	ldrb	r0, [r0, #16]
   dac2a:	f7fc fdb1 	bl	d7790 <HAL_USB_USART_Receive_Data>
}
   dac2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dac32:	bd08      	pop	{r3, pc}

000dac34 <_ZN9USBSerial4peekEv>:
{
   dac34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dac36:	2101      	movs	r1, #1
   dac38:	7c00      	ldrb	r0, [r0, #16]
   dac3a:	f7fc fda9 	bl	d7790 <HAL_USB_USART_Receive_Data>
}
   dac3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dac42:	bd08      	pop	{r3, pc}

000dac44 <_ZN9USBSerial17availableForWriteEv>:
{
   dac44:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dac46:	7c00      	ldrb	r0, [r0, #16]
   dac48:	f7fc fd9a 	bl	d7780 <HAL_USB_USART_Available_Data_For_Write>
}
   dac4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dac50:	bd08      	pop	{r3, pc}

000dac52 <_ZN9USBSerial9availableEv>:
{
   dac52:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dac54:	7c00      	ldrb	r0, [r0, #16]
   dac56:	f7fc fd8b 	bl	d7770 <HAL_USB_USART_Available_Data>
}
   dac5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dac5e:	bd08      	pop	{r3, pc}

000dac60 <_ZN9USBSerial5writeEh>:
{
   dac60:	b513      	push	{r0, r1, r4, lr}
   dac62:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dac64:	7c00      	ldrb	r0, [r0, #16]
{
   dac66:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dac68:	f7fc fd8a 	bl	d7780 <HAL_USB_USART_Available_Data_For_Write>
   dac6c:	2800      	cmp	r0, #0
   dac6e:	9901      	ldr	r1, [sp, #4]
   dac70:	dc01      	bgt.n	dac76 <_ZN9USBSerial5writeEh+0x16>
   dac72:	7c60      	ldrb	r0, [r4, #17]
   dac74:	b120      	cbz	r0, dac80 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dac76:	7c20      	ldrb	r0, [r4, #16]
   dac78:	f7fc fd92 	bl	d77a0 <HAL_USB_USART_Send_Data>
   dac7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dac80:	b002      	add	sp, #8
   dac82:	bd10      	pop	{r4, pc}

000dac84 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dac84:	7c00      	ldrb	r0, [r0, #16]
   dac86:	f7fc bd93 	b.w	d77b0 <HAL_USB_USART_Flush_Data>

000dac8a <_ZN9USBSerialD0Ev>:
   dac8a:	b510      	push	{r4, lr}
   dac8c:	2114      	movs	r1, #20
   dac8e:	4604      	mov	r4, r0
   dac90:	f000 f9f6 	bl	db080 <_ZdlPvj>
   dac94:	4620      	mov	r0, r4
   dac96:	bd10      	pop	{r4, pc}

000dac98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dac98:	b510      	push	{r4, lr}
   dac9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dac9e:	4604      	mov	r4, r0
   daca0:	4608      	mov	r0, r1
   daca2:	2100      	movs	r1, #0
   daca4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   daca8:	4b04      	ldr	r3, [pc, #16]	; (dacbc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dacaa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dacac:	2301      	movs	r3, #1
  _serial = serial;
   dacae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dacb0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dacb2:	4611      	mov	r1, r2
   dacb4:	f7fc fd44 	bl	d7740 <HAL_USB_USART_Init>
}
   dacb8:	4620      	mov	r0, r4
   dacba:	bd10      	pop	{r4, pc}
   dacbc:	000de954 	.word	0x000de954

000dacc0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dacc0:	7c00      	ldrb	r0, [r0, #16]
   dacc2:	2200      	movs	r2, #0
   dacc4:	f7fc bd44 	b.w	d7750 <HAL_USB_USART_Begin>

000dacc8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dacc8:	7c00      	ldrb	r0, [r0, #16]
   dacca:	f7fc bd49 	b.w	d7760 <HAL_USB_USART_End>

000dacce <_Z19acquireSerialBufferv>:
{
   dacce:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dacd0:	2214      	movs	r2, #20
{
   dacd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dacd4:	2100      	movs	r1, #0
   dacd6:	f001 f8ec 	bl	dbeb2 <memset>
}
   dacda:	4620      	mov	r0, r4
   dacdc:	bd10      	pop	{r4, pc}
	...

000dace0 <_Z16_fetch_usbserialv>:
{
   dace0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dace2:	4c0f      	ldr	r4, [pc, #60]	; (dad20 <_Z16_fetch_usbserialv+0x40>)
{
   dace4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dace6:	a803      	add	r0, sp, #12
   dace8:	f7ff fff1 	bl	dacce <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dacec:	7821      	ldrb	r1, [r4, #0]
   dacee:	f3bf 8f5b 	dmb	ish
   dacf2:	f011 0101 	ands.w	r1, r1, #1
   dacf6:	d10f      	bne.n	dad18 <_Z16_fetch_usbserialv+0x38>
   dacf8:	4620      	mov	r0, r4
   dacfa:	9101      	str	r1, [sp, #4]
   dacfc:	f7f9 f9dc 	bl	d40b8 <__cxa_guard_acquire>
   dad00:	9901      	ldr	r1, [sp, #4]
   dad02:	b148      	cbz	r0, dad18 <_Z16_fetch_usbserialv+0x38>
   dad04:	aa03      	add	r2, sp, #12
   dad06:	4807      	ldr	r0, [pc, #28]	; (dad24 <_Z16_fetch_usbserialv+0x44>)
   dad08:	f7ff ffc6 	bl	dac98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dad0c:	4620      	mov	r0, r4
   dad0e:	f7f9 f9d8 	bl	d40c2 <__cxa_guard_release>
   dad12:	4805      	ldr	r0, [pc, #20]	; (dad28 <_Z16_fetch_usbserialv+0x48>)
   dad14:	f001 f898 	bl	dbe48 <atexit>
	return _usbserial;
}
   dad18:	4802      	ldr	r0, [pc, #8]	; (dad24 <_Z16_fetch_usbserialv+0x44>)
   dad1a:	b008      	add	sp, #32
   dad1c:	bd10      	pop	{r4, pc}
   dad1e:	bf00      	nop
   dad20:	2003e700 	.word	0x2003e700
   dad24:	2003e704 	.word	0x2003e704
   dad28:	000dac21 	.word	0x000dac21

000dad2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dad2c:	4b01      	ldr	r3, [pc, #4]	; (dad34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dad2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dad30:	4770      	bx	lr
   dad32:	bf00      	nop
   dad34:	2003e028 	.word	0x2003e028

000dad38 <serialEventRun>:
{
   dad38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dad3a:	4b0b      	ldr	r3, [pc, #44]	; (dad68 <serialEventRun+0x30>)
   dad3c:	b143      	cbz	r3, dad50 <serialEventRun+0x18>
   dad3e:	f7ff ffcf 	bl	dace0 <_Z16_fetch_usbserialv>
   dad42:	6803      	ldr	r3, [r0, #0]
   dad44:	691b      	ldr	r3, [r3, #16]
   dad46:	4798      	blx	r3
   dad48:	2800      	cmp	r0, #0
   dad4a:	dd01      	ble.n	dad50 <serialEventRun+0x18>
        serialEvent();
   dad4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dad50:	4b06      	ldr	r3, [pc, #24]	; (dad6c <serialEventRun+0x34>)
   dad52:	b143      	cbz	r3, dad66 <serialEventRun+0x2e>
   dad54:	f7ff ff3c 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   dad58:	6803      	ldr	r3, [r0, #0]
   dad5a:	691b      	ldr	r3, [r3, #16]
   dad5c:	4798      	blx	r3
   dad5e:	2800      	cmp	r0, #0
   dad60:	dd01      	ble.n	dad66 <serialEventRun+0x2e>
        serialEvent1();
   dad62:	f3af 8000 	nop.w
}
   dad66:	bd08      	pop	{r3, pc}
	...

000dad70 <_post_loop>:
{
   dad70:	b508      	push	{r3, lr}
	serialEventRun();
   dad72:	f7ff ffe1 	bl	dad38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dad76:	f7fc fb43 	bl	d7400 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dad7a:	4b01      	ldr	r3, [pc, #4]	; (dad80 <_post_loop+0x10>)
   dad7c:	6018      	str	r0, [r3, #0]
}
   dad7e:	bd08      	pop	{r3, pc}
   dad80:	2003e720 	.word	0x2003e720

000dad84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dad84:	4805      	ldr	r0, [pc, #20]	; (dad9c <_Z33system_initialize_user_backup_ramv+0x18>)
   dad86:	4a06      	ldr	r2, [pc, #24]	; (dada0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dad88:	4906      	ldr	r1, [pc, #24]	; (dada4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dad8a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dad8c:	1a12      	subs	r2, r2, r0
   dad8e:	f001 f868 	bl	dbe62 <memcpy>
    __backup_sram_signature = signature;
   dad92:	4b05      	ldr	r3, [pc, #20]	; (dada8 <_Z33system_initialize_user_backup_ramv+0x24>)
   dad94:	4a05      	ldr	r2, [pc, #20]	; (dadac <_Z33system_initialize_user_backup_ramv+0x28>)
   dad96:	601a      	str	r2, [r3, #0]
}
   dad98:	bd08      	pop	{r3, pc}
   dad9a:	bf00      	nop
   dad9c:	2003f400 	.word	0x2003f400
   dada0:	2003f404 	.word	0x2003f404
   dada4:	000ded20 	.word	0x000ded20
   dada8:	2003f400 	.word	0x2003f400
   dadac:	9a271c1e 	.word	0x9a271c1e

000dadb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dadb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dadb2:	2300      	movs	r3, #0
   dadb4:	9300      	str	r3, [sp, #0]
   dadb6:	461a      	mov	r2, r3
   dadb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dadbc:	f7fc fd54 	bl	d7868 <system_ctrl_set_result>
}
   dadc0:	b003      	add	sp, #12
   dadc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dadc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dadc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dadca:	8843      	ldrh	r3, [r0, #2]
   dadcc:	2b0a      	cmp	r3, #10
   dadce:	d008      	beq.n	dade2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dadd0:	2b50      	cmp	r3, #80	; 0x50
   dadd2:	d10b      	bne.n	dadec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dadd4:	4b09      	ldr	r3, [pc, #36]	; (dadfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dadd6:	681b      	ldr	r3, [r3, #0]
   dadd8:	b14b      	cbz	r3, dadee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dadda:	b003      	add	sp, #12
   daddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dade0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dade2:	f7ff ffe5 	bl	dadb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dade6:	b003      	add	sp, #12
   dade8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dadec:	2300      	movs	r3, #0
   dadee:	9300      	str	r3, [sp, #0]
   dadf0:	461a      	mov	r2, r3
   dadf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dadf6:	f7fc fd37 	bl	d7868 <system_ctrl_set_result>
}
   dadfa:	e7f4      	b.n	dade6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dadfc:	2003e71c 	.word	0x2003e71c

000dae00 <module_user_init_hook>:
{
   dae00:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dae02:	4812      	ldr	r0, [pc, #72]	; (dae4c <module_user_init_hook+0x4c>)
   dae04:	2100      	movs	r1, #0
   dae06:	f7fc fe09 	bl	d7a1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dae0a:	4b11      	ldr	r3, [pc, #68]	; (dae50 <module_user_init_hook+0x50>)
   dae0c:	681a      	ldr	r2, [r3, #0]
   dae0e:	4b11      	ldr	r3, [pc, #68]	; (dae54 <module_user_init_hook+0x54>)
   dae10:	429a      	cmp	r2, r3
   dae12:	4b11      	ldr	r3, [pc, #68]	; (dae58 <module_user_init_hook+0x58>)
   dae14:	bf0c      	ite	eq
   dae16:	2201      	moveq	r2, #1
   dae18:	2200      	movne	r2, #0
   dae1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dae1c:	d001      	beq.n	dae22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dae1e:	f7ff ffb1 	bl	dad84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dae22:	f7fc fadd 	bl	d73e0 <HAL_RNG_GetRandomNumber>
   dae26:	4604      	mov	r4, r0
    srand(seed);
   dae28:	f001 f84c 	bl	dbec4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dae2c:	4b0b      	ldr	r3, [pc, #44]	; (dae5c <module_user_init_hook+0x5c>)
   dae2e:	b113      	cbz	r3, dae36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dae30:	4620      	mov	r0, r4
   dae32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dae36:	2100      	movs	r1, #0
   dae38:	4808      	ldr	r0, [pc, #32]	; (dae5c <module_user_init_hook+0x5c>)
   dae3a:	f7fc fd47 	bl	d78cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dae3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dae42:	4807      	ldr	r0, [pc, #28]	; (dae60 <module_user_init_hook+0x60>)
   dae44:	2100      	movs	r1, #0
   dae46:	f7fc bd05 	b.w	d7854 <system_ctrl_set_app_request_handler>
   dae4a:	bf00      	nop
   dae4c:	000dad2d 	.word	0x000dad2d
   dae50:	2003f400 	.word	0x2003f400
   dae54:	9a271c1e 	.word	0x9a271c1e
   dae58:	2003e718 	.word	0x2003e718
   dae5c:	00000000 	.word	0x00000000
   dae60:	000dadc9 	.word	0x000dadc9

000dae64 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dae64:	b508      	push	{r3, lr}
   dae66:	4b02      	ldr	r3, [pc, #8]	; (dae70 <spark_protocol_instance+0xc>)
   dae68:	681b      	ldr	r3, [r3, #0]
   dae6a:	681b      	ldr	r3, [r3, #0]
   dae6c:	9301      	str	r3, [sp, #4]
   dae6e:	bd08      	pop	{r3, pc}
   dae70:	0003025c 	.word	0x0003025c

000dae74 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dae74:	b508      	push	{r3, lr}
   dae76:	4b02      	ldr	r3, [pc, #8]	; (dae80 <spark_protocol_set_product_id+0xc>)
   dae78:	681b      	ldr	r3, [r3, #0]
   dae7a:	685b      	ldr	r3, [r3, #4]
   dae7c:	9301      	str	r3, [sp, #4]
   dae7e:	bd08      	pop	{r3, pc}
   dae80:	0003025c 	.word	0x0003025c

000dae84 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dae84:	b508      	push	{r3, lr}
   dae86:	4b02      	ldr	r3, [pc, #8]	; (dae90 <spark_protocol_set_product_firmware_version+0xc>)
   dae88:	681b      	ldr	r3, [r3, #0]
   dae8a:	689b      	ldr	r3, [r3, #8]
   dae8c:	9301      	str	r3, [sp, #4]
   dae8e:	bd08      	pop	{r3, pc}
   dae90:	0003025c 	.word	0x0003025c

000dae94 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dae94:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dae96:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dae98:	d902      	bls.n	daea0 <pinAvailable+0xc>
    return false;
   dae9a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dae9c:	b002      	add	sp, #8
   dae9e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   daea0:	f1a0 030b 	sub.w	r3, r0, #11
   daea4:	2b02      	cmp	r3, #2
   daea6:	d81a      	bhi.n	daede <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   daea8:	4c17      	ldr	r4, [pc, #92]	; (daf08 <pinAvailable+0x74>)
   daeaa:	7821      	ldrb	r1, [r4, #0]
   daeac:	f3bf 8f5b 	dmb	ish
   daeb0:	f011 0101 	ands.w	r1, r1, #1
   daeb4:	d10b      	bne.n	daece <pinAvailable+0x3a>
   daeb6:	4620      	mov	r0, r4
   daeb8:	9101      	str	r1, [sp, #4]
   daeba:	f7f9 f8fd 	bl	d40b8 <__cxa_guard_acquire>
   daebe:	9901      	ldr	r1, [sp, #4]
   daec0:	b128      	cbz	r0, daece <pinAvailable+0x3a>
   daec2:	4812      	ldr	r0, [pc, #72]	; (daf0c <pinAvailable+0x78>)
   daec4:	f7fe fea8 	bl	d9c18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   daec8:	4620      	mov	r0, r4
   daeca:	f7f9 f8fa 	bl	d40c2 <__cxa_guard_release>
   daece:	4b0f      	ldr	r3, [pc, #60]	; (daf0c <pinAvailable+0x78>)
   daed0:	7818      	ldrb	r0, [r3, #0]
   daed2:	f7fc fbbd 	bl	d7650 <hal_spi_is_enabled>
   daed6:	2800      	cmp	r0, #0
   daed8:	d1df      	bne.n	dae9a <pinAvailable+0x6>
  return true; // 'pin' is available
   daeda:	2001      	movs	r0, #1
   daedc:	e7de      	b.n	dae9c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   daede:	2801      	cmp	r0, #1
   daee0:	d809      	bhi.n	daef6 <pinAvailable+0x62>
   daee2:	f000 f885 	bl	daff0 <_Z19__fetch_global_Wirev>
   daee6:	2100      	movs	r1, #0
   daee8:	7c00      	ldrb	r0, [r0, #16]
   daeea:	f7fc faf1 	bl	d74d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   daeee:	f080 0001 	eor.w	r0, r0, #1
   daef2:	b2c0      	uxtb	r0, r0
   daef4:	e7d2      	b.n	dae9c <pinAvailable+0x8>
   daef6:	3809      	subs	r0, #9
   daef8:	2801      	cmp	r0, #1
   daefa:	d8ee      	bhi.n	daeda <pinAvailable+0x46>
   daefc:	f7ff fe68 	bl	dabd0 <_Z22__fetch_global_Serial1v>
   daf00:	7c00      	ldrb	r0, [r0, #16]
   daf02:	f7fc fc05 	bl	d7710 <hal_usart_is_enabled>
   daf06:	e7f2      	b.n	daeee <pinAvailable+0x5a>
   daf08:	2003e39c 	.word	0x2003e39c
   daf0c:	2003e3a0 	.word	0x2003e3a0

000daf10 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   daf10:	2823      	cmp	r0, #35	; 0x23
{
   daf12:	b538      	push	{r3, r4, r5, lr}
   daf14:	4604      	mov	r4, r0
   daf16:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   daf18:	d80a      	bhi.n	daf30 <pinMode+0x20>
   daf1a:	29ff      	cmp	r1, #255	; 0xff
   daf1c:	d008      	beq.n	daf30 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   daf1e:	f7ff ffb9 	bl	dae94 <pinAvailable>
   daf22:	b128      	cbz	r0, daf30 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   daf24:	4629      	mov	r1, r5
   daf26:	4620      	mov	r0, r4
}
   daf28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   daf2c:	f7fc ba70 	b.w	d7410 <HAL_Pin_Mode>
}
   daf30:	bd38      	pop	{r3, r4, r5, pc}

000daf32 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   daf32:	b538      	push	{r3, r4, r5, lr}
   daf34:	4604      	mov	r4, r0
   daf36:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daf38:	f7fc fa72 	bl	d7420 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   daf3c:	28ff      	cmp	r0, #255	; 0xff
   daf3e:	d010      	beq.n	daf62 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   daf40:	2806      	cmp	r0, #6
   daf42:	d804      	bhi.n	daf4e <digitalWrite+0x1c>
   daf44:	234d      	movs	r3, #77	; 0x4d
   daf46:	fa23 f000 	lsr.w	r0, r3, r0
   daf4a:	07c3      	lsls	r3, r0, #31
   daf4c:	d409      	bmi.n	daf62 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   daf4e:	4620      	mov	r0, r4
   daf50:	f7ff ffa0 	bl	dae94 <pinAvailable>
   daf54:	b128      	cbz	r0, daf62 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   daf56:	4629      	mov	r1, r5
   daf58:	4620      	mov	r0, r4
}
   daf5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   daf5e:	f7fc ba67 	b.w	d7430 <HAL_GPIO_Write>
}
   daf62:	bd38      	pop	{r3, r4, r5, pc}

000daf64 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   daf64:	b510      	push	{r4, lr}
   daf66:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daf68:	f7fc fa5a 	bl	d7420 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   daf6c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   daf6e:	b2db      	uxtb	r3, r3
   daf70:	2b01      	cmp	r3, #1
   daf72:	d908      	bls.n	daf86 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   daf74:	4620      	mov	r0, r4
   daf76:	f7ff ff8d 	bl	dae94 <pinAvailable>
   daf7a:	b120      	cbz	r0, daf86 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   daf7c:	4620      	mov	r0, r4
}
   daf7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   daf82:	f7fc ba5d 	b.w	d7440 <HAL_GPIO_Read>
}
   daf86:	2000      	movs	r0, #0
   daf88:	bd10      	pop	{r4, pc}

000daf8a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daf8a:	4770      	bx	lr

000daf8c <__tcf_1>:
   daf8c:	4770      	bx	lr
	...

000daf90 <_Z17acquireWireBufferv>:
{
   daf90:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   daf92:	2300      	movs	r3, #0
   daf94:	2520      	movs	r5, #32
   daf96:	8043      	strh	r3, [r0, #2]
   daf98:	2314      	movs	r3, #20
{
   daf9a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   daf9c:	8003      	strh	r3, [r0, #0]
   daf9e:	6085      	str	r5, [r0, #8]
   dafa0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dafa2:	4906      	ldr	r1, [pc, #24]	; (dafbc <_Z17acquireWireBufferv+0x2c>)
   dafa4:	4628      	mov	r0, r5
   dafa6:	f000 f86f 	bl	db088 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dafaa:	4904      	ldr	r1, [pc, #16]	; (dafbc <_Z17acquireWireBufferv+0x2c>)
	};
   dafac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dafae:	4628      	mov	r0, r5
   dafb0:	f000 f86a 	bl	db088 <_ZnajRKSt9nothrow_t>
	};
   dafb4:	60e0      	str	r0, [r4, #12]
}
   dafb6:	4620      	mov	r0, r4
   dafb8:	bd38      	pop	{r3, r4, r5, pc}
   dafba:	bf00      	nop
   dafbc:	000de97c 	.word	0x000de97c

000dafc0 <_Z18acquireWire1Bufferv>:
   dafc0:	b538      	push	{r3, r4, r5, lr}
   dafc2:	2300      	movs	r3, #0
   dafc4:	2520      	movs	r5, #32
   dafc6:	8043      	strh	r3, [r0, #2]
   dafc8:	2314      	movs	r3, #20
   dafca:	4604      	mov	r4, r0
   dafcc:	8003      	strh	r3, [r0, #0]
   dafce:	6085      	str	r5, [r0, #8]
   dafd0:	6105      	str	r5, [r0, #16]
   dafd2:	4906      	ldr	r1, [pc, #24]	; (dafec <_Z18acquireWire1Bufferv+0x2c>)
   dafd4:	4628      	mov	r0, r5
   dafd6:	f000 f857 	bl	db088 <_ZnajRKSt9nothrow_t>
   dafda:	4904      	ldr	r1, [pc, #16]	; (dafec <_Z18acquireWire1Bufferv+0x2c>)
   dafdc:	6060      	str	r0, [r4, #4]
   dafde:	4628      	mov	r0, r5
   dafe0:	f000 f852 	bl	db088 <_ZnajRKSt9nothrow_t>
   dafe4:	60e0      	str	r0, [r4, #12]
   dafe6:	4620      	mov	r0, r4
   dafe8:	bd38      	pop	{r3, r4, r5, pc}
   dafea:	bf00      	nop
   dafec:	000de97c 	.word	0x000de97c

000daff0 <_Z19__fetch_global_Wirev>:
{
   daff0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daff2:	4d0e      	ldr	r5, [pc, #56]	; (db02c <_Z19__fetch_global_Wirev+0x3c>)
   daff4:	7829      	ldrb	r1, [r5, #0]
   daff6:	f3bf 8f5b 	dmb	ish
   daffa:	f011 0401 	ands.w	r4, r1, #1
{
   daffe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db000:	d111      	bne.n	db026 <_Z19__fetch_global_Wirev+0x36>
   db002:	4628      	mov	r0, r5
   db004:	f7f9 f858 	bl	d40b8 <__cxa_guard_acquire>
   db008:	b168      	cbz	r0, db026 <_Z19__fetch_global_Wirev+0x36>
   db00a:	a801      	add	r0, sp, #4
   db00c:	f7ff ffc0 	bl	daf90 <_Z17acquireWireBufferv>
   db010:	aa01      	add	r2, sp, #4
   db012:	4621      	mov	r1, r4
   db014:	4806      	ldr	r0, [pc, #24]	; (db030 <_Z19__fetch_global_Wirev+0x40>)
   db016:	f7fd fa03 	bl	d8420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db01a:	4628      	mov	r0, r5
   db01c:	f7f9 f851 	bl	d40c2 <__cxa_guard_release>
   db020:	4804      	ldr	r0, [pc, #16]	; (db034 <_Z19__fetch_global_Wirev+0x44>)
   db022:	f000 ff11 	bl	dbe48 <atexit>
	return wire;
}
   db026:	4802      	ldr	r0, [pc, #8]	; (db030 <_Z19__fetch_global_Wirev+0x40>)
   db028:	b007      	add	sp, #28
   db02a:	bd30      	pop	{r4, r5, pc}
   db02c:	2003e724 	.word	0x2003e724
   db030:	2003e72c 	.word	0x2003e72c
   db034:	000daf8b 	.word	0x000daf8b

000db038 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db038:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db03a:	4c0e      	ldr	r4, [pc, #56]	; (db074 <_Z20__fetch_global_Wire1v+0x3c>)
   db03c:	7823      	ldrb	r3, [r4, #0]
   db03e:	f3bf 8f5b 	dmb	ish
   db042:	07db      	lsls	r3, r3, #31
{
   db044:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db046:	d411      	bmi.n	db06c <_Z20__fetch_global_Wire1v+0x34>
   db048:	4620      	mov	r0, r4
   db04a:	f7f9 f835 	bl	d40b8 <__cxa_guard_acquire>
   db04e:	b168      	cbz	r0, db06c <_Z20__fetch_global_Wire1v+0x34>
   db050:	a801      	add	r0, sp, #4
   db052:	f7ff ffb5 	bl	dafc0 <_Z18acquireWire1Bufferv>
   db056:	aa01      	add	r2, sp, #4
   db058:	2101      	movs	r1, #1
   db05a:	4807      	ldr	r0, [pc, #28]	; (db078 <_Z20__fetch_global_Wire1v+0x40>)
   db05c:	f7fd f9e0 	bl	d8420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db060:	4620      	mov	r0, r4
   db062:	f7f9 f82e 	bl	d40c2 <__cxa_guard_release>
   db066:	4805      	ldr	r0, [pc, #20]	; (db07c <_Z20__fetch_global_Wire1v+0x44>)
   db068:	f000 feee 	bl	dbe48 <atexit>
	return wire;
}
   db06c:	4802      	ldr	r0, [pc, #8]	; (db078 <_Z20__fetch_global_Wire1v+0x40>)
   db06e:	b006      	add	sp, #24
   db070:	bd10      	pop	{r4, pc}
   db072:	bf00      	nop
   db074:	2003e728 	.word	0x2003e728
   db078:	2003e740 	.word	0x2003e740
   db07c:	000daf8d 	.word	0x000daf8d

000db080 <_ZdlPvj>:
   db080:	f7f9 b80d 	b.w	d409e <_ZdlPv>

000db084 <_ZnwjRKSt9nothrow_t>:
   db084:	f7f9 b807 	b.w	d4096 <_Znwj>

000db088 <_ZnajRKSt9nothrow_t>:
   db088:	f7f9 b807 	b.w	d409a <_Znaj>

000db08c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db08c:	68c3      	ldr	r3, [r0, #12]
   db08e:	689a      	ldr	r2, [r3, #8]
   db090:	60c2      	str	r2, [r0, #12]
   db092:	b510      	push	{r4, lr}
   db094:	b102      	cbz	r2, db098 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   db096:	6050      	str	r0, [r2, #4]
   db098:	6842      	ldr	r2, [r0, #4]
   db09a:	605a      	str	r2, [r3, #4]
   db09c:	680c      	ldr	r4, [r1, #0]
   db09e:	4284      	cmp	r4, r0
   db0a0:	d103      	bne.n	db0aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   db0a2:	600b      	str	r3, [r1, #0]
   db0a4:	6098      	str	r0, [r3, #8]
   db0a6:	6043      	str	r3, [r0, #4]
   db0a8:	bd10      	pop	{r4, pc}
   db0aa:	6891      	ldr	r1, [r2, #8]
   db0ac:	4281      	cmp	r1, r0
   db0ae:	bf0c      	ite	eq
   db0b0:	6093      	streq	r3, [r2, #8]
   db0b2:	60d3      	strne	r3, [r2, #12]
   db0b4:	e7f6      	b.n	db0a4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000db0b6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db0b6:	6883      	ldr	r3, [r0, #8]
   db0b8:	68da      	ldr	r2, [r3, #12]
   db0ba:	6082      	str	r2, [r0, #8]
   db0bc:	b510      	push	{r4, lr}
   db0be:	b102      	cbz	r2, db0c2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   db0c0:	6050      	str	r0, [r2, #4]
   db0c2:	6842      	ldr	r2, [r0, #4]
   db0c4:	605a      	str	r2, [r3, #4]
   db0c6:	680c      	ldr	r4, [r1, #0]
   db0c8:	4284      	cmp	r4, r0
   db0ca:	d103      	bne.n	db0d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   db0cc:	600b      	str	r3, [r1, #0]
   db0ce:	60d8      	str	r0, [r3, #12]
   db0d0:	6043      	str	r3, [r0, #4]
   db0d2:	bd10      	pop	{r4, pc}
   db0d4:	68d1      	ldr	r1, [r2, #12]
   db0d6:	4281      	cmp	r1, r0
   db0d8:	bf0c      	ite	eq
   db0da:	60d3      	streq	r3, [r2, #12]
   db0dc:	6093      	strne	r3, [r2, #8]
   db0de:	e7f6      	b.n	db0ce <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000db0e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db0e0:	7803      	ldrb	r3, [r0, #0]
   db0e2:	b933      	cbnz	r3, db0f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db0e4:	6843      	ldr	r3, [r0, #4]
   db0e6:	685b      	ldr	r3, [r3, #4]
   db0e8:	4283      	cmp	r3, r0
   db0ea:	d102      	bne.n	db0f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db0ec:	68db      	ldr	r3, [r3, #12]
   db0ee:	4618      	mov	r0, r3
   db0f0:	4770      	bx	lr
   db0f2:	6882      	ldr	r2, [r0, #8]
   db0f4:	b122      	cbz	r2, db100 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   db0f6:	4613      	mov	r3, r2
   db0f8:	68d2      	ldr	r2, [r2, #12]
   db0fa:	2a00      	cmp	r2, #0
   db0fc:	d1fb      	bne.n	db0f6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   db0fe:	e7f6      	b.n	db0ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db100:	6843      	ldr	r3, [r0, #4]
   db102:	689a      	ldr	r2, [r3, #8]
   db104:	4282      	cmp	r2, r0
   db106:	d1f2      	bne.n	db0ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db108:	4618      	mov	r0, r3
   db10a:	685b      	ldr	r3, [r3, #4]
   db10c:	e7f9      	b.n	db102 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000db10e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   db10e:	68c3      	ldr	r3, [r0, #12]
   db110:	b123      	cbz	r3, db11c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   db112:	4618      	mov	r0, r3
   db114:	689b      	ldr	r3, [r3, #8]
   db116:	2b00      	cmp	r3, #0
   db118:	d1fb      	bne.n	db112 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   db11a:	4770      	bx	lr
   db11c:	6843      	ldr	r3, [r0, #4]
   db11e:	68da      	ldr	r2, [r3, #12]
   db120:	4282      	cmp	r2, r0
   db122:	d102      	bne.n	db12a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   db124:	4618      	mov	r0, r3
   db126:	685b      	ldr	r3, [r3, #4]
   db128:	e7f9      	b.n	db11e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   db12a:	68c2      	ldr	r2, [r0, #12]
   db12c:	4293      	cmp	r3, r2
   db12e:	bf18      	it	ne
   db130:	4618      	movne	r0, r3
   db132:	4770      	bx	lr

000db134 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db134:	f7ff bfd4 	b.w	db0e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db138 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db13c:	461e      	mov	r6, r3
   db13e:	f103 0804 	add.w	r8, r3, #4
   db142:	2300      	movs	r3, #0
   db144:	e9c1 3302 	strd	r3, r3, [r1, #8]
   db148:	460c      	mov	r4, r1
   db14a:	604a      	str	r2, [r1, #4]
   db14c:	700b      	strb	r3, [r1, #0]
   db14e:	b300      	cbz	r0, db192 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   db150:	4296      	cmp	r6, r2
   db152:	6091      	str	r1, [r2, #8]
   db154:	d118      	bne.n	db188 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   db156:	6071      	str	r1, [r6, #4]
   db158:	60f4      	str	r4, [r6, #12]
   db15a:	2701      	movs	r7, #1
   db15c:	f04f 0900 	mov.w	r9, #0
   db160:	6873      	ldr	r3, [r6, #4]
   db162:	42a3      	cmp	r3, r4
   db164:	d03f      	beq.n	db1e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   db166:	6860      	ldr	r0, [r4, #4]
   db168:	7802      	ldrb	r2, [r0, #0]
   db16a:	2a00      	cmp	r2, #0
   db16c:	d13c      	bne.n	db1e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   db16e:	6845      	ldr	r5, [r0, #4]
   db170:	68ab      	ldr	r3, [r5, #8]
   db172:	4298      	cmp	r0, r3
   db174:	d123      	bne.n	db1be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   db176:	68eb      	ldr	r3, [r5, #12]
   db178:	b183      	cbz	r3, db19c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db17a:	781a      	ldrb	r2, [r3, #0]
   db17c:	b972      	cbnz	r2, db19c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db17e:	7007      	strb	r7, [r0, #0]
   db180:	701f      	strb	r7, [r3, #0]
   db182:	702a      	strb	r2, [r5, #0]
   db184:	462c      	mov	r4, r5
   db186:	e7eb      	b.n	db160 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   db188:	68b3      	ldr	r3, [r6, #8]
   db18a:	4293      	cmp	r3, r2
   db18c:	d1e5      	bne.n	db15a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db18e:	60b1      	str	r1, [r6, #8]
   db190:	e7e3      	b.n	db15a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db192:	60d1      	str	r1, [r2, #12]
   db194:	68f3      	ldr	r3, [r6, #12]
   db196:	4293      	cmp	r3, r2
   db198:	d1df      	bne.n	db15a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db19a:	e7dd      	b.n	db158 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   db19c:	68c3      	ldr	r3, [r0, #12]
   db19e:	42a3      	cmp	r3, r4
   db1a0:	d103      	bne.n	db1aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   db1a2:	4641      	mov	r1, r8
   db1a4:	f7ff ff72 	bl	db08c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db1a8:	4604      	mov	r4, r0
   db1aa:	6863      	ldr	r3, [r4, #4]
   db1ac:	4641      	mov	r1, r8
   db1ae:	701f      	strb	r7, [r3, #0]
   db1b0:	4628      	mov	r0, r5
   db1b2:	f885 9000 	strb.w	r9, [r5]
   db1b6:	f7ff ff7e 	bl	db0b6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db1ba:	4625      	mov	r5, r4
   db1bc:	e7e2      	b.n	db184 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   db1be:	b113      	cbz	r3, db1c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   db1c0:	781a      	ldrb	r2, [r3, #0]
   db1c2:	2a00      	cmp	r2, #0
   db1c4:	d0db      	beq.n	db17e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   db1c6:	6883      	ldr	r3, [r0, #8]
   db1c8:	42a3      	cmp	r3, r4
   db1ca:	d103      	bne.n	db1d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   db1cc:	4641      	mov	r1, r8
   db1ce:	f7ff ff72 	bl	db0b6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db1d2:	4604      	mov	r4, r0
   db1d4:	6863      	ldr	r3, [r4, #4]
   db1d6:	4641      	mov	r1, r8
   db1d8:	701f      	strb	r7, [r3, #0]
   db1da:	4628      	mov	r0, r5
   db1dc:	f885 9000 	strb.w	r9, [r5]
   db1e0:	f7ff ff54 	bl	db08c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db1e4:	e7e9      	b.n	db1ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   db1e6:	4623      	mov	r3, r4
   db1e8:	2201      	movs	r2, #1
   db1ea:	701a      	strb	r2, [r3, #0]
   db1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db1f0 <_ZSt25__throw_bad_function_callv>:
   db1f0:	b508      	push	{r3, lr}
   db1f2:	f7fc fbfb 	bl	d79ec <abort>
	...

000db1f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   db1f8:	4901      	ldr	r1, [pc, #4]	; (db200 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   db1fa:	f000 b8f9 	b.w	db3f0 <_ZNKSt9type_infoeqERKS_>
   db1fe:	bf00      	nop
   db200:	000de998 	.word	0x000de998

000db204 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   db204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db206:	2400      	movs	r4, #0
   db208:	2310      	movs	r3, #16
   db20a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   db20e:	6803      	ldr	r3, [r0, #0]
   db210:	9400      	str	r4, [sp, #0]
   db212:	699e      	ldr	r6, [r3, #24]
   db214:	f88d 4004 	strb.w	r4, [sp, #4]
   db218:	4615      	mov	r5, r2
   db21a:	466b      	mov	r3, sp
   db21c:	6812      	ldr	r2, [r2, #0]
   db21e:	47b0      	blx	r6
   db220:	f89d 3004 	ldrb.w	r3, [sp, #4]
   db224:	f003 0306 	and.w	r3, r3, #6
   db228:	2b06      	cmp	r3, #6
   db22a:	bf03      	ittte	eq
   db22c:	9b00      	ldreq	r3, [sp, #0]
   db22e:	602b      	streq	r3, [r5, #0]
   db230:	2001      	moveq	r0, #1
   db232:	4620      	movne	r0, r4
   db234:	b004      	add	sp, #16
   db236:	bd70      	pop	{r4, r5, r6, pc}

000db238 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   db238:	9800      	ldr	r0, [sp, #0]
   db23a:	4290      	cmp	r0, r2
   db23c:	bf14      	ite	ne
   db23e:	2001      	movne	r0, #1
   db240:	2006      	moveq	r0, #6
   db242:	4770      	bx	lr

000db244 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   db244:	b510      	push	{r4, lr}
   db246:	4b03      	ldr	r3, [pc, #12]	; (db254 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   db248:	6003      	str	r3, [r0, #0]
   db24a:	4604      	mov	r4, r0
   db24c:	f000 f8cd 	bl	db3ea <_ZNSt9type_infoD1Ev>
   db250:	4620      	mov	r0, r4
   db252:	bd10      	pop	{r4, pc}
   db254:	000de9d8 	.word	0x000de9d8

000db258 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   db258:	b510      	push	{r4, lr}
   db25a:	4604      	mov	r4, r0
   db25c:	f7ff fff2 	bl	db244 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   db260:	4620      	mov	r0, r4
   db262:	2108      	movs	r1, #8
   db264:	f7ff ff0c 	bl	db080 <_ZdlPvj>
   db268:	4620      	mov	r0, r4
   db26a:	bd10      	pop	{r4, pc}

000db26c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   db26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db270:	461f      	mov	r7, r3
   db272:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   db276:	f8dd 8018 	ldr.w	r8, [sp, #24]
   db27a:	4598      	cmp	r8, r3
   db27c:	4606      	mov	r6, r0
   db27e:	4615      	mov	r5, r2
   db280:	d107      	bne.n	db292 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db282:	9907      	ldr	r1, [sp, #28]
   db284:	f000 f8b4 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db288:	b118      	cbz	r0, db292 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db28a:	7165      	strb	r5, [r4, #5]
   db28c:	2000      	movs	r0, #0
   db28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db292:	4639      	mov	r1, r7
   db294:	4630      	mov	r0, r6
   db296:	f000 f8ab 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db29a:	2800      	cmp	r0, #0
   db29c:	d0f6      	beq.n	db28c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   db29e:	2301      	movs	r3, #1
   db2a0:	f8c4 8000 	str.w	r8, [r4]
   db2a4:	7125      	strb	r5, [r4, #4]
   db2a6:	71a3      	strb	r3, [r4, #6]
   db2a8:	e7f0      	b.n	db28c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000db2aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   db2aa:	b538      	push	{r3, r4, r5, lr}
   db2ac:	4615      	mov	r5, r2
   db2ae:	461c      	mov	r4, r3
   db2b0:	f000 f89e 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db2b4:	b120      	cbz	r0, db2c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   db2b6:	2308      	movs	r3, #8
   db2b8:	60e3      	str	r3, [r4, #12]
   db2ba:	2306      	movs	r3, #6
   db2bc:	6025      	str	r5, [r4, #0]
   db2be:	7123      	strb	r3, [r4, #4]
   db2c0:	bd38      	pop	{r3, r4, r5, pc}

000db2c2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   db2c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db2c4:	4605      	mov	r5, r0
   db2c6:	460c      	mov	r4, r1
   db2c8:	9201      	str	r2, [sp, #4]
   db2ca:	461e      	mov	r6, r3
   db2cc:	f000 f890 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db2d0:	b950      	cbnz	r0, db2e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   db2d2:	2e03      	cmp	r6, #3
   db2d4:	d808      	bhi.n	db2e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   db2d6:	6823      	ldr	r3, [r4, #0]
   db2d8:	9a01      	ldr	r2, [sp, #4]
   db2da:	695b      	ldr	r3, [r3, #20]
   db2dc:	4629      	mov	r1, r5
   db2de:	4620      	mov	r0, r4
   db2e0:	b002      	add	sp, #8
   db2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db2e6:	4718      	bx	r3
   db2e8:	b002      	add	sp, #8
   db2ea:	bd70      	pop	{r4, r5, r6, pc}

000db2ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   db2ec:	b510      	push	{r4, lr}
   db2ee:	4b03      	ldr	r3, [pc, #12]	; (db2fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   db2f0:	6003      	str	r3, [r0, #0]
   db2f2:	4604      	mov	r4, r0
   db2f4:	f7ff ffa6 	bl	db244 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   db2f8:	4620      	mov	r0, r4
   db2fa:	bd10      	pop	{r4, pc}
   db2fc:	000dea38 	.word	0x000dea38

000db300 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   db300:	b510      	push	{r4, lr}
   db302:	4604      	mov	r4, r0
   db304:	f7ff fff2 	bl	db2ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   db308:	4620      	mov	r0, r4
   db30a:	210c      	movs	r1, #12
   db30c:	f7ff feb8 	bl	db080 <_ZdlPvj>
   db310:	4620      	mov	r0, r4
   db312:	bd10      	pop	{r4, pc}

000db314 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   db314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db316:	9f08      	ldr	r7, [sp, #32]
   db318:	4297      	cmp	r7, r2
   db31a:	4605      	mov	r5, r0
   db31c:	460e      	mov	r6, r1
   db31e:	4614      	mov	r4, r2
   db320:	d00a      	beq.n	db338 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   db322:	68a8      	ldr	r0, [r5, #8]
   db324:	6802      	ldr	r2, [r0, #0]
   db326:	9708      	str	r7, [sp, #32]
   db328:	6a15      	ldr	r5, [r2, #32]
   db32a:	4631      	mov	r1, r6
   db32c:	4622      	mov	r2, r4
   db32e:	46ac      	mov	ip, r5
   db330:	b003      	add	sp, #12
   db332:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db336:	4760      	bx	ip
   db338:	4619      	mov	r1, r3
   db33a:	9301      	str	r3, [sp, #4]
   db33c:	f000 f858 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db340:	9b01      	ldr	r3, [sp, #4]
   db342:	2800      	cmp	r0, #0
   db344:	d0ed      	beq.n	db322 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   db346:	2006      	movs	r0, #6
   db348:	b003      	add	sp, #12
   db34a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db34c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   db34c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db350:	460d      	mov	r5, r1
   db352:	4619      	mov	r1, r3
   db354:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   db358:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   db35c:	4681      	mov	r9, r0
   db35e:	4617      	mov	r7, r2
   db360:	4698      	mov	r8, r3
   db362:	f000 f845 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db366:	b190      	cbz	r0, db38e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   db368:	2d00      	cmp	r5, #0
   db36a:	6034      	str	r4, [r6, #0]
   db36c:	7137      	strb	r7, [r6, #4]
   db36e:	db09      	blt.n	db384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   db370:	1961      	adds	r1, r4, r5
   db372:	458a      	cmp	sl, r1
   db374:	bf0c      	ite	eq
   db376:	2106      	moveq	r1, #6
   db378:	2101      	movne	r1, #1
   db37a:	71b1      	strb	r1, [r6, #6]
   db37c:	2000      	movs	r0, #0
   db37e:	b001      	add	sp, #4
   db380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db384:	3502      	adds	r5, #2
   db386:	d1f9      	bne.n	db37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db388:	2301      	movs	r3, #1
   db38a:	71b3      	strb	r3, [r6, #6]
   db38c:	e7f6      	b.n	db37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db38e:	4554      	cmp	r4, sl
   db390:	d106      	bne.n	db3a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   db392:	4659      	mov	r1, fp
   db394:	4648      	mov	r0, r9
   db396:	f000 f82b 	bl	db3f0 <_ZNKSt9type_infoeqERKS_>
   db39a:	b108      	cbz	r0, db3a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   db39c:	7177      	strb	r7, [r6, #5]
   db39e:	e7ed      	b.n	db37c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db3a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   db3a4:	6803      	ldr	r3, [r0, #0]
   db3a6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   db3aa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   db3ae:	69dc      	ldr	r4, [r3, #28]
   db3b0:	463a      	mov	r2, r7
   db3b2:	4643      	mov	r3, r8
   db3b4:	4629      	mov	r1, r5
   db3b6:	46a4      	mov	ip, r4
   db3b8:	b001      	add	sp, #4
   db3ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db3be:	4760      	bx	ip

000db3c0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   db3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db3c4:	4607      	mov	r7, r0
   db3c6:	460c      	mov	r4, r1
   db3c8:	4615      	mov	r5, r2
   db3ca:	461e      	mov	r6, r3
   db3cc:	f7ff ff6d 	bl	db2aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   db3d0:	b948      	cbnz	r0, db3e6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   db3d2:	68b8      	ldr	r0, [r7, #8]
   db3d4:	6803      	ldr	r3, [r0, #0]
   db3d6:	699f      	ldr	r7, [r3, #24]
   db3d8:	462a      	mov	r2, r5
   db3da:	4633      	mov	r3, r6
   db3dc:	4621      	mov	r1, r4
   db3de:	46bc      	mov	ip, r7
   db3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   db3e4:	4760      	bx	ip
   db3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db3ea <_ZNSt9type_infoD1Ev>:
   db3ea:	4770      	bx	lr

000db3ec <_ZNKSt9type_info14__is_pointer_pEv>:
   db3ec:	2000      	movs	r0, #0
   db3ee:	4770      	bx	lr

000db3f0 <_ZNKSt9type_infoeqERKS_>:
   db3f0:	4281      	cmp	r1, r0
   db3f2:	b508      	push	{r3, lr}
   db3f4:	d00e      	beq.n	db414 <_ZNKSt9type_infoeqERKS_+0x24>
   db3f6:	6840      	ldr	r0, [r0, #4]
   db3f8:	7803      	ldrb	r3, [r0, #0]
   db3fa:	2b2a      	cmp	r3, #42	; 0x2a
   db3fc:	d00c      	beq.n	db418 <_ZNKSt9type_infoeqERKS_+0x28>
   db3fe:	6849      	ldr	r1, [r1, #4]
   db400:	780b      	ldrb	r3, [r1, #0]
   db402:	2b2a      	cmp	r3, #42	; 0x2a
   db404:	bf08      	it	eq
   db406:	3101      	addeq	r1, #1
   db408:	f000 fd97 	bl	dbf3a <strcmp>
   db40c:	fab0 f080 	clz	r0, r0
   db410:	0940      	lsrs	r0, r0, #5
   db412:	bd08      	pop	{r3, pc}
   db414:	2001      	movs	r0, #1
   db416:	e7fc      	b.n	db412 <_ZNKSt9type_infoeqERKS_+0x22>
   db418:	2000      	movs	r0, #0
   db41a:	e7fa      	b.n	db412 <_ZNKSt9type_infoeqERKS_+0x22>
   db41c:	0000      	movs	r0, r0
	...

000db420 <nan>:
   db420:	ed9f 0b01 	vldr	d0, [pc, #4]	; db428 <nan+0x8>
   db424:	4770      	bx	lr
   db426:	bf00      	nop
   db428:	00000000 	.word	0x00000000
   db42c:	7ff80000 	.word	0x7ff80000

000db430 <__aeabi_drsub>:
   db430:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db434:	e002      	b.n	db43c <__adddf3>
   db436:	bf00      	nop

000db438 <__aeabi_dsub>:
   db438:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db43c <__adddf3>:
   db43c:	b530      	push	{r4, r5, lr}
   db43e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db442:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db446:	ea94 0f05 	teq	r4, r5
   db44a:	bf08      	it	eq
   db44c:	ea90 0f02 	teqeq	r0, r2
   db450:	bf1f      	itttt	ne
   db452:	ea54 0c00 	orrsne.w	ip, r4, r0
   db456:	ea55 0c02 	orrsne.w	ip, r5, r2
   db45a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db45e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db462:	f000 80e2 	beq.w	db62a <__adddf3+0x1ee>
   db466:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db46a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db46e:	bfb8      	it	lt
   db470:	426d      	neglt	r5, r5
   db472:	dd0c      	ble.n	db48e <__adddf3+0x52>
   db474:	442c      	add	r4, r5
   db476:	ea80 0202 	eor.w	r2, r0, r2
   db47a:	ea81 0303 	eor.w	r3, r1, r3
   db47e:	ea82 0000 	eor.w	r0, r2, r0
   db482:	ea83 0101 	eor.w	r1, r3, r1
   db486:	ea80 0202 	eor.w	r2, r0, r2
   db48a:	ea81 0303 	eor.w	r3, r1, r3
   db48e:	2d36      	cmp	r5, #54	; 0x36
   db490:	bf88      	it	hi
   db492:	bd30      	pophi	{r4, r5, pc}
   db494:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db498:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db49c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db4a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db4a4:	d002      	beq.n	db4ac <__adddf3+0x70>
   db4a6:	4240      	negs	r0, r0
   db4a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db4ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db4b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db4b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db4b8:	d002      	beq.n	db4c0 <__adddf3+0x84>
   db4ba:	4252      	negs	r2, r2
   db4bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db4c0:	ea94 0f05 	teq	r4, r5
   db4c4:	f000 80a7 	beq.w	db616 <__adddf3+0x1da>
   db4c8:	f1a4 0401 	sub.w	r4, r4, #1
   db4cc:	f1d5 0e20 	rsbs	lr, r5, #32
   db4d0:	db0d      	blt.n	db4ee <__adddf3+0xb2>
   db4d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   db4d6:	fa22 f205 	lsr.w	r2, r2, r5
   db4da:	1880      	adds	r0, r0, r2
   db4dc:	f141 0100 	adc.w	r1, r1, #0
   db4e0:	fa03 f20e 	lsl.w	r2, r3, lr
   db4e4:	1880      	adds	r0, r0, r2
   db4e6:	fa43 f305 	asr.w	r3, r3, r5
   db4ea:	4159      	adcs	r1, r3
   db4ec:	e00e      	b.n	db50c <__adddf3+0xd0>
   db4ee:	f1a5 0520 	sub.w	r5, r5, #32
   db4f2:	f10e 0e20 	add.w	lr, lr, #32
   db4f6:	2a01      	cmp	r2, #1
   db4f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   db4fc:	bf28      	it	cs
   db4fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   db502:	fa43 f305 	asr.w	r3, r3, r5
   db506:	18c0      	adds	r0, r0, r3
   db508:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db50c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db510:	d507      	bpl.n	db522 <__adddf3+0xe6>
   db512:	f04f 0e00 	mov.w	lr, #0
   db516:	f1dc 0c00 	rsbs	ip, ip, #0
   db51a:	eb7e 0000 	sbcs.w	r0, lr, r0
   db51e:	eb6e 0101 	sbc.w	r1, lr, r1
   db522:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db526:	d31b      	bcc.n	db560 <__adddf3+0x124>
   db528:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db52c:	d30c      	bcc.n	db548 <__adddf3+0x10c>
   db52e:	0849      	lsrs	r1, r1, #1
   db530:	ea5f 0030 	movs.w	r0, r0, rrx
   db534:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db538:	f104 0401 	add.w	r4, r4, #1
   db53c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db540:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db544:	f080 809a 	bcs.w	db67c <__adddf3+0x240>
   db548:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db54c:	bf08      	it	eq
   db54e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db552:	f150 0000 	adcs.w	r0, r0, #0
   db556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db55a:	ea41 0105 	orr.w	r1, r1, r5
   db55e:	bd30      	pop	{r4, r5, pc}
   db560:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db564:	4140      	adcs	r0, r0
   db566:	eb41 0101 	adc.w	r1, r1, r1
   db56a:	3c01      	subs	r4, #1
   db56c:	bf28      	it	cs
   db56e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db572:	d2e9      	bcs.n	db548 <__adddf3+0x10c>
   db574:	f091 0f00 	teq	r1, #0
   db578:	bf04      	itt	eq
   db57a:	4601      	moveq	r1, r0
   db57c:	2000      	moveq	r0, #0
   db57e:	fab1 f381 	clz	r3, r1
   db582:	bf08      	it	eq
   db584:	3320      	addeq	r3, #32
   db586:	f1a3 030b 	sub.w	r3, r3, #11
   db58a:	f1b3 0220 	subs.w	r2, r3, #32
   db58e:	da0c      	bge.n	db5aa <__adddf3+0x16e>
   db590:	320c      	adds	r2, #12
   db592:	dd08      	ble.n	db5a6 <__adddf3+0x16a>
   db594:	f102 0c14 	add.w	ip, r2, #20
   db598:	f1c2 020c 	rsb	r2, r2, #12
   db59c:	fa01 f00c 	lsl.w	r0, r1, ip
   db5a0:	fa21 f102 	lsr.w	r1, r1, r2
   db5a4:	e00c      	b.n	db5c0 <__adddf3+0x184>
   db5a6:	f102 0214 	add.w	r2, r2, #20
   db5aa:	bfd8      	it	le
   db5ac:	f1c2 0c20 	rsble	ip, r2, #32
   db5b0:	fa01 f102 	lsl.w	r1, r1, r2
   db5b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   db5b8:	bfdc      	itt	le
   db5ba:	ea41 010c 	orrle.w	r1, r1, ip
   db5be:	4090      	lslle	r0, r2
   db5c0:	1ae4      	subs	r4, r4, r3
   db5c2:	bfa2      	ittt	ge
   db5c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db5c8:	4329      	orrge	r1, r5
   db5ca:	bd30      	popge	{r4, r5, pc}
   db5cc:	ea6f 0404 	mvn.w	r4, r4
   db5d0:	3c1f      	subs	r4, #31
   db5d2:	da1c      	bge.n	db60e <__adddf3+0x1d2>
   db5d4:	340c      	adds	r4, #12
   db5d6:	dc0e      	bgt.n	db5f6 <__adddf3+0x1ba>
   db5d8:	f104 0414 	add.w	r4, r4, #20
   db5dc:	f1c4 0220 	rsb	r2, r4, #32
   db5e0:	fa20 f004 	lsr.w	r0, r0, r4
   db5e4:	fa01 f302 	lsl.w	r3, r1, r2
   db5e8:	ea40 0003 	orr.w	r0, r0, r3
   db5ec:	fa21 f304 	lsr.w	r3, r1, r4
   db5f0:	ea45 0103 	orr.w	r1, r5, r3
   db5f4:	bd30      	pop	{r4, r5, pc}
   db5f6:	f1c4 040c 	rsb	r4, r4, #12
   db5fa:	f1c4 0220 	rsb	r2, r4, #32
   db5fe:	fa20 f002 	lsr.w	r0, r0, r2
   db602:	fa01 f304 	lsl.w	r3, r1, r4
   db606:	ea40 0003 	orr.w	r0, r0, r3
   db60a:	4629      	mov	r1, r5
   db60c:	bd30      	pop	{r4, r5, pc}
   db60e:	fa21 f004 	lsr.w	r0, r1, r4
   db612:	4629      	mov	r1, r5
   db614:	bd30      	pop	{r4, r5, pc}
   db616:	f094 0f00 	teq	r4, #0
   db61a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db61e:	bf06      	itte	eq
   db620:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db624:	3401      	addeq	r4, #1
   db626:	3d01      	subne	r5, #1
   db628:	e74e      	b.n	db4c8 <__adddf3+0x8c>
   db62a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db62e:	bf18      	it	ne
   db630:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db634:	d029      	beq.n	db68a <__adddf3+0x24e>
   db636:	ea94 0f05 	teq	r4, r5
   db63a:	bf08      	it	eq
   db63c:	ea90 0f02 	teqeq	r0, r2
   db640:	d005      	beq.n	db64e <__adddf3+0x212>
   db642:	ea54 0c00 	orrs.w	ip, r4, r0
   db646:	bf04      	itt	eq
   db648:	4619      	moveq	r1, r3
   db64a:	4610      	moveq	r0, r2
   db64c:	bd30      	pop	{r4, r5, pc}
   db64e:	ea91 0f03 	teq	r1, r3
   db652:	bf1e      	ittt	ne
   db654:	2100      	movne	r1, #0
   db656:	2000      	movne	r0, #0
   db658:	bd30      	popne	{r4, r5, pc}
   db65a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db65e:	d105      	bne.n	db66c <__adddf3+0x230>
   db660:	0040      	lsls	r0, r0, #1
   db662:	4149      	adcs	r1, r1
   db664:	bf28      	it	cs
   db666:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db66a:	bd30      	pop	{r4, r5, pc}
   db66c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db670:	bf3c      	itt	cc
   db672:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db676:	bd30      	popcc	{r4, r5, pc}
   db678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db67c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db680:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db684:	f04f 0000 	mov.w	r0, #0
   db688:	bd30      	pop	{r4, r5, pc}
   db68a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db68e:	bf1a      	itte	ne
   db690:	4619      	movne	r1, r3
   db692:	4610      	movne	r0, r2
   db694:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db698:	bf1c      	itt	ne
   db69a:	460b      	movne	r3, r1
   db69c:	4602      	movne	r2, r0
   db69e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db6a2:	bf06      	itte	eq
   db6a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db6a8:	ea91 0f03 	teqeq	r1, r3
   db6ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db6b0:	bd30      	pop	{r4, r5, pc}
   db6b2:	bf00      	nop

000db6b4 <__aeabi_ui2d>:
   db6b4:	f090 0f00 	teq	r0, #0
   db6b8:	bf04      	itt	eq
   db6ba:	2100      	moveq	r1, #0
   db6bc:	4770      	bxeq	lr
   db6be:	b530      	push	{r4, r5, lr}
   db6c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db6c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db6c8:	f04f 0500 	mov.w	r5, #0
   db6cc:	f04f 0100 	mov.w	r1, #0
   db6d0:	e750      	b.n	db574 <__adddf3+0x138>
   db6d2:	bf00      	nop

000db6d4 <__aeabi_i2d>:
   db6d4:	f090 0f00 	teq	r0, #0
   db6d8:	bf04      	itt	eq
   db6da:	2100      	moveq	r1, #0
   db6dc:	4770      	bxeq	lr
   db6de:	b530      	push	{r4, r5, lr}
   db6e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db6e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db6e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db6ec:	bf48      	it	mi
   db6ee:	4240      	negmi	r0, r0
   db6f0:	f04f 0100 	mov.w	r1, #0
   db6f4:	e73e      	b.n	db574 <__adddf3+0x138>
   db6f6:	bf00      	nop

000db6f8 <__aeabi_f2d>:
   db6f8:	0042      	lsls	r2, r0, #1
   db6fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db6fe:	ea4f 0131 	mov.w	r1, r1, rrx
   db702:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db706:	bf1f      	itttt	ne
   db708:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db70c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db710:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db714:	4770      	bxne	lr
   db716:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db71a:	bf08      	it	eq
   db71c:	4770      	bxeq	lr
   db71e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db722:	bf04      	itt	eq
   db724:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db728:	4770      	bxeq	lr
   db72a:	b530      	push	{r4, r5, lr}
   db72c:	f44f 7460 	mov.w	r4, #896	; 0x380
   db730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db738:	e71c      	b.n	db574 <__adddf3+0x138>
   db73a:	bf00      	nop

000db73c <__aeabi_ul2d>:
   db73c:	ea50 0201 	orrs.w	r2, r0, r1
   db740:	bf08      	it	eq
   db742:	4770      	bxeq	lr
   db744:	b530      	push	{r4, r5, lr}
   db746:	f04f 0500 	mov.w	r5, #0
   db74a:	e00a      	b.n	db762 <__aeabi_l2d+0x16>

000db74c <__aeabi_l2d>:
   db74c:	ea50 0201 	orrs.w	r2, r0, r1
   db750:	bf08      	it	eq
   db752:	4770      	bxeq	lr
   db754:	b530      	push	{r4, r5, lr}
   db756:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db75a:	d502      	bpl.n	db762 <__aeabi_l2d+0x16>
   db75c:	4240      	negs	r0, r0
   db75e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db762:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db766:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db76a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db76e:	f43f aed8 	beq.w	db522 <__adddf3+0xe6>
   db772:	f04f 0203 	mov.w	r2, #3
   db776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db77a:	bf18      	it	ne
   db77c:	3203      	addne	r2, #3
   db77e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db782:	bf18      	it	ne
   db784:	3203      	addne	r2, #3
   db786:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db78a:	f1c2 0320 	rsb	r3, r2, #32
   db78e:	fa00 fc03 	lsl.w	ip, r0, r3
   db792:	fa20 f002 	lsr.w	r0, r0, r2
   db796:	fa01 fe03 	lsl.w	lr, r1, r3
   db79a:	ea40 000e 	orr.w	r0, r0, lr
   db79e:	fa21 f102 	lsr.w	r1, r1, r2
   db7a2:	4414      	add	r4, r2
   db7a4:	e6bd      	b.n	db522 <__adddf3+0xe6>
   db7a6:	bf00      	nop

000db7a8 <__aeabi_dmul>:
   db7a8:	b570      	push	{r4, r5, r6, lr}
   db7aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db7ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db7b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db7b6:	bf1d      	ittte	ne
   db7b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db7bc:	ea94 0f0c 	teqne	r4, ip
   db7c0:	ea95 0f0c 	teqne	r5, ip
   db7c4:	f000 f8de 	bleq	db984 <__aeabi_dmul+0x1dc>
   db7c8:	442c      	add	r4, r5
   db7ca:	ea81 0603 	eor.w	r6, r1, r3
   db7ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db7d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db7d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db7da:	bf18      	it	ne
   db7dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db7e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db7e8:	d038      	beq.n	db85c <__aeabi_dmul+0xb4>
   db7ea:	fba0 ce02 	umull	ip, lr, r0, r2
   db7ee:	f04f 0500 	mov.w	r5, #0
   db7f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   db7f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db7fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   db7fe:	f04f 0600 	mov.w	r6, #0
   db802:	fbe1 5603 	umlal	r5, r6, r1, r3
   db806:	f09c 0f00 	teq	ip, #0
   db80a:	bf18      	it	ne
   db80c:	f04e 0e01 	orrne.w	lr, lr, #1
   db810:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db814:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db818:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db81c:	d204      	bcs.n	db828 <__aeabi_dmul+0x80>
   db81e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db822:	416d      	adcs	r5, r5
   db824:	eb46 0606 	adc.w	r6, r6, r6
   db828:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db82c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db830:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db834:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db838:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db83c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db840:	bf88      	it	hi
   db842:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db846:	d81e      	bhi.n	db886 <__aeabi_dmul+0xde>
   db848:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db84c:	bf08      	it	eq
   db84e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db852:	f150 0000 	adcs.w	r0, r0, #0
   db856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db85a:	bd70      	pop	{r4, r5, r6, pc}
   db85c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db860:	ea46 0101 	orr.w	r1, r6, r1
   db864:	ea40 0002 	orr.w	r0, r0, r2
   db868:	ea81 0103 	eor.w	r1, r1, r3
   db86c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db870:	bfc2      	ittt	gt
   db872:	ebd4 050c 	rsbsgt	r5, r4, ip
   db876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db87a:	bd70      	popgt	{r4, r5, r6, pc}
   db87c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db880:	f04f 0e00 	mov.w	lr, #0
   db884:	3c01      	subs	r4, #1
   db886:	f300 80ab 	bgt.w	db9e0 <__aeabi_dmul+0x238>
   db88a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db88e:	bfde      	ittt	le
   db890:	2000      	movle	r0, #0
   db892:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db896:	bd70      	pople	{r4, r5, r6, pc}
   db898:	f1c4 0400 	rsb	r4, r4, #0
   db89c:	3c20      	subs	r4, #32
   db89e:	da35      	bge.n	db90c <__aeabi_dmul+0x164>
   db8a0:	340c      	adds	r4, #12
   db8a2:	dc1b      	bgt.n	db8dc <__aeabi_dmul+0x134>
   db8a4:	f104 0414 	add.w	r4, r4, #20
   db8a8:	f1c4 0520 	rsb	r5, r4, #32
   db8ac:	fa00 f305 	lsl.w	r3, r0, r5
   db8b0:	fa20 f004 	lsr.w	r0, r0, r4
   db8b4:	fa01 f205 	lsl.w	r2, r1, r5
   db8b8:	ea40 0002 	orr.w	r0, r0, r2
   db8bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db8c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db8c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db8c8:	fa21 f604 	lsr.w	r6, r1, r4
   db8cc:	eb42 0106 	adc.w	r1, r2, r6
   db8d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db8d4:	bf08      	it	eq
   db8d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db8da:	bd70      	pop	{r4, r5, r6, pc}
   db8dc:	f1c4 040c 	rsb	r4, r4, #12
   db8e0:	f1c4 0520 	rsb	r5, r4, #32
   db8e4:	fa00 f304 	lsl.w	r3, r0, r4
   db8e8:	fa20 f005 	lsr.w	r0, r0, r5
   db8ec:	fa01 f204 	lsl.w	r2, r1, r4
   db8f0:	ea40 0002 	orr.w	r0, r0, r2
   db8f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db8f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db8fc:	f141 0100 	adc.w	r1, r1, #0
   db900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db904:	bf08      	it	eq
   db906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db90a:	bd70      	pop	{r4, r5, r6, pc}
   db90c:	f1c4 0520 	rsb	r5, r4, #32
   db910:	fa00 f205 	lsl.w	r2, r0, r5
   db914:	ea4e 0e02 	orr.w	lr, lr, r2
   db918:	fa20 f304 	lsr.w	r3, r0, r4
   db91c:	fa01 f205 	lsl.w	r2, r1, r5
   db920:	ea43 0302 	orr.w	r3, r3, r2
   db924:	fa21 f004 	lsr.w	r0, r1, r4
   db928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db92c:	fa21 f204 	lsr.w	r2, r1, r4
   db930:	ea20 0002 	bic.w	r0, r0, r2
   db934:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db938:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db93c:	bf08      	it	eq
   db93e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db942:	bd70      	pop	{r4, r5, r6, pc}
   db944:	f094 0f00 	teq	r4, #0
   db948:	d10f      	bne.n	db96a <__aeabi_dmul+0x1c2>
   db94a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db94e:	0040      	lsls	r0, r0, #1
   db950:	eb41 0101 	adc.w	r1, r1, r1
   db954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db958:	bf08      	it	eq
   db95a:	3c01      	subeq	r4, #1
   db95c:	d0f7      	beq.n	db94e <__aeabi_dmul+0x1a6>
   db95e:	ea41 0106 	orr.w	r1, r1, r6
   db962:	f095 0f00 	teq	r5, #0
   db966:	bf18      	it	ne
   db968:	4770      	bxne	lr
   db96a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db96e:	0052      	lsls	r2, r2, #1
   db970:	eb43 0303 	adc.w	r3, r3, r3
   db974:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db978:	bf08      	it	eq
   db97a:	3d01      	subeq	r5, #1
   db97c:	d0f7      	beq.n	db96e <__aeabi_dmul+0x1c6>
   db97e:	ea43 0306 	orr.w	r3, r3, r6
   db982:	4770      	bx	lr
   db984:	ea94 0f0c 	teq	r4, ip
   db988:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db98c:	bf18      	it	ne
   db98e:	ea95 0f0c 	teqne	r5, ip
   db992:	d00c      	beq.n	db9ae <__aeabi_dmul+0x206>
   db994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db998:	bf18      	it	ne
   db99a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db99e:	d1d1      	bne.n	db944 <__aeabi_dmul+0x19c>
   db9a0:	ea81 0103 	eor.w	r1, r1, r3
   db9a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db9a8:	f04f 0000 	mov.w	r0, #0
   db9ac:	bd70      	pop	{r4, r5, r6, pc}
   db9ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db9b2:	bf06      	itte	eq
   db9b4:	4610      	moveq	r0, r2
   db9b6:	4619      	moveq	r1, r3
   db9b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db9bc:	d019      	beq.n	db9f2 <__aeabi_dmul+0x24a>
   db9be:	ea94 0f0c 	teq	r4, ip
   db9c2:	d102      	bne.n	db9ca <__aeabi_dmul+0x222>
   db9c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db9c8:	d113      	bne.n	db9f2 <__aeabi_dmul+0x24a>
   db9ca:	ea95 0f0c 	teq	r5, ip
   db9ce:	d105      	bne.n	db9dc <__aeabi_dmul+0x234>
   db9d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db9d4:	bf1c      	itt	ne
   db9d6:	4610      	movne	r0, r2
   db9d8:	4619      	movne	r1, r3
   db9da:	d10a      	bne.n	db9f2 <__aeabi_dmul+0x24a>
   db9dc:	ea81 0103 	eor.w	r1, r1, r3
   db9e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db9e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db9e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db9ec:	f04f 0000 	mov.w	r0, #0
   db9f0:	bd70      	pop	{r4, r5, r6, pc}
   db9f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db9f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db9fa:	bd70      	pop	{r4, r5, r6, pc}

000db9fc <__aeabi_ddiv>:
   db9fc:	b570      	push	{r4, r5, r6, lr}
   db9fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dba02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dba06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dba0a:	bf1d      	ittte	ne
   dba0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dba10:	ea94 0f0c 	teqne	r4, ip
   dba14:	ea95 0f0c 	teqne	r5, ip
   dba18:	f000 f8a7 	bleq	dbb6a <__aeabi_ddiv+0x16e>
   dba1c:	eba4 0405 	sub.w	r4, r4, r5
   dba20:	ea81 0e03 	eor.w	lr, r1, r3
   dba24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dba28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dba2c:	f000 8088 	beq.w	dbb40 <__aeabi_ddiv+0x144>
   dba30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dba34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dba38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dba3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dba40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dba44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dba48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dba4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dba50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dba54:	429d      	cmp	r5, r3
   dba56:	bf08      	it	eq
   dba58:	4296      	cmpeq	r6, r2
   dba5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dba5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dba62:	d202      	bcs.n	dba6a <__aeabi_ddiv+0x6e>
   dba64:	085b      	lsrs	r3, r3, #1
   dba66:	ea4f 0232 	mov.w	r2, r2, rrx
   dba6a:	1ab6      	subs	r6, r6, r2
   dba6c:	eb65 0503 	sbc.w	r5, r5, r3
   dba70:	085b      	lsrs	r3, r3, #1
   dba72:	ea4f 0232 	mov.w	r2, r2, rrx
   dba76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dba7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dba7e:	ebb6 0e02 	subs.w	lr, r6, r2
   dba82:	eb75 0e03 	sbcs.w	lr, r5, r3
   dba86:	bf22      	ittt	cs
   dba88:	1ab6      	subcs	r6, r6, r2
   dba8a:	4675      	movcs	r5, lr
   dba8c:	ea40 000c 	orrcs.w	r0, r0, ip
   dba90:	085b      	lsrs	r3, r3, #1
   dba92:	ea4f 0232 	mov.w	r2, r2, rrx
   dba96:	ebb6 0e02 	subs.w	lr, r6, r2
   dba9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dba9e:	bf22      	ittt	cs
   dbaa0:	1ab6      	subcs	r6, r6, r2
   dbaa2:	4675      	movcs	r5, lr
   dbaa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbaa8:	085b      	lsrs	r3, r3, #1
   dbaaa:	ea4f 0232 	mov.w	r2, r2, rrx
   dbaae:	ebb6 0e02 	subs.w	lr, r6, r2
   dbab2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbab6:	bf22      	ittt	cs
   dbab8:	1ab6      	subcs	r6, r6, r2
   dbaba:	4675      	movcs	r5, lr
   dbabc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbac0:	085b      	lsrs	r3, r3, #1
   dbac2:	ea4f 0232 	mov.w	r2, r2, rrx
   dbac6:	ebb6 0e02 	subs.w	lr, r6, r2
   dbaca:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbace:	bf22      	ittt	cs
   dbad0:	1ab6      	subcs	r6, r6, r2
   dbad2:	4675      	movcs	r5, lr
   dbad4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbad8:	ea55 0e06 	orrs.w	lr, r5, r6
   dbadc:	d018      	beq.n	dbb10 <__aeabi_ddiv+0x114>
   dbade:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbae2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbae6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbaea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbaee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbaf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbaf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbafa:	d1c0      	bne.n	dba7e <__aeabi_ddiv+0x82>
   dbafc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbb00:	d10b      	bne.n	dbb1a <__aeabi_ddiv+0x11e>
   dbb02:	ea41 0100 	orr.w	r1, r1, r0
   dbb06:	f04f 0000 	mov.w	r0, #0
   dbb0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbb0e:	e7b6      	b.n	dba7e <__aeabi_ddiv+0x82>
   dbb10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbb14:	bf04      	itt	eq
   dbb16:	4301      	orreq	r1, r0
   dbb18:	2000      	moveq	r0, #0
   dbb1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbb1e:	bf88      	it	hi
   dbb20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbb24:	f63f aeaf 	bhi.w	db886 <__aeabi_dmul+0xde>
   dbb28:	ebb5 0c03 	subs.w	ip, r5, r3
   dbb2c:	bf04      	itt	eq
   dbb2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbb32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbb36:	f150 0000 	adcs.w	r0, r0, #0
   dbb3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbb3e:	bd70      	pop	{r4, r5, r6, pc}
   dbb40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbb44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbb48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbb4c:	bfc2      	ittt	gt
   dbb4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbb52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbb56:	bd70      	popgt	{r4, r5, r6, pc}
   dbb58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbb5c:	f04f 0e00 	mov.w	lr, #0
   dbb60:	3c01      	subs	r4, #1
   dbb62:	e690      	b.n	db886 <__aeabi_dmul+0xde>
   dbb64:	ea45 0e06 	orr.w	lr, r5, r6
   dbb68:	e68d      	b.n	db886 <__aeabi_dmul+0xde>
   dbb6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbb6e:	ea94 0f0c 	teq	r4, ip
   dbb72:	bf08      	it	eq
   dbb74:	ea95 0f0c 	teqeq	r5, ip
   dbb78:	f43f af3b 	beq.w	db9f2 <__aeabi_dmul+0x24a>
   dbb7c:	ea94 0f0c 	teq	r4, ip
   dbb80:	d10a      	bne.n	dbb98 <__aeabi_ddiv+0x19c>
   dbb82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbb86:	f47f af34 	bne.w	db9f2 <__aeabi_dmul+0x24a>
   dbb8a:	ea95 0f0c 	teq	r5, ip
   dbb8e:	f47f af25 	bne.w	db9dc <__aeabi_dmul+0x234>
   dbb92:	4610      	mov	r0, r2
   dbb94:	4619      	mov	r1, r3
   dbb96:	e72c      	b.n	db9f2 <__aeabi_dmul+0x24a>
   dbb98:	ea95 0f0c 	teq	r5, ip
   dbb9c:	d106      	bne.n	dbbac <__aeabi_ddiv+0x1b0>
   dbb9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbba2:	f43f aefd 	beq.w	db9a0 <__aeabi_dmul+0x1f8>
   dbba6:	4610      	mov	r0, r2
   dbba8:	4619      	mov	r1, r3
   dbbaa:	e722      	b.n	db9f2 <__aeabi_dmul+0x24a>
   dbbac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbbb0:	bf18      	it	ne
   dbbb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbbb6:	f47f aec5 	bne.w	db944 <__aeabi_dmul+0x19c>
   dbbba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbbbe:	f47f af0d 	bne.w	db9dc <__aeabi_dmul+0x234>
   dbbc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbbc6:	f47f aeeb 	bne.w	db9a0 <__aeabi_dmul+0x1f8>
   dbbca:	e712      	b.n	db9f2 <__aeabi_dmul+0x24a>

000dbbcc <__gedf2>:
   dbbcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dbbd0:	e006      	b.n	dbbe0 <__cmpdf2+0x4>
   dbbd2:	bf00      	nop

000dbbd4 <__ledf2>:
   dbbd4:	f04f 0c01 	mov.w	ip, #1
   dbbd8:	e002      	b.n	dbbe0 <__cmpdf2+0x4>
   dbbda:	bf00      	nop

000dbbdc <__cmpdf2>:
   dbbdc:	f04f 0c01 	mov.w	ip, #1
   dbbe0:	f84d cd04 	str.w	ip, [sp, #-4]!
   dbbe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbbe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbbec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbbf0:	bf18      	it	ne
   dbbf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dbbf6:	d01b      	beq.n	dbc30 <__cmpdf2+0x54>
   dbbf8:	b001      	add	sp, #4
   dbbfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dbbfe:	bf0c      	ite	eq
   dbc00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dbc04:	ea91 0f03 	teqne	r1, r3
   dbc08:	bf02      	ittt	eq
   dbc0a:	ea90 0f02 	teqeq	r0, r2
   dbc0e:	2000      	moveq	r0, #0
   dbc10:	4770      	bxeq	lr
   dbc12:	f110 0f00 	cmn.w	r0, #0
   dbc16:	ea91 0f03 	teq	r1, r3
   dbc1a:	bf58      	it	pl
   dbc1c:	4299      	cmppl	r1, r3
   dbc1e:	bf08      	it	eq
   dbc20:	4290      	cmpeq	r0, r2
   dbc22:	bf2c      	ite	cs
   dbc24:	17d8      	asrcs	r0, r3, #31
   dbc26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dbc2a:	f040 0001 	orr.w	r0, r0, #1
   dbc2e:	4770      	bx	lr
   dbc30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dbc34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbc38:	d102      	bne.n	dbc40 <__cmpdf2+0x64>
   dbc3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dbc3e:	d107      	bne.n	dbc50 <__cmpdf2+0x74>
   dbc40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dbc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dbc48:	d1d6      	bne.n	dbbf8 <__cmpdf2+0x1c>
   dbc4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dbc4e:	d0d3      	beq.n	dbbf8 <__cmpdf2+0x1c>
   dbc50:	f85d 0b04 	ldr.w	r0, [sp], #4
   dbc54:	4770      	bx	lr
   dbc56:	bf00      	nop

000dbc58 <__aeabi_cdrcmple>:
   dbc58:	4684      	mov	ip, r0
   dbc5a:	4610      	mov	r0, r2
   dbc5c:	4662      	mov	r2, ip
   dbc5e:	468c      	mov	ip, r1
   dbc60:	4619      	mov	r1, r3
   dbc62:	4663      	mov	r3, ip
   dbc64:	e000      	b.n	dbc68 <__aeabi_cdcmpeq>
   dbc66:	bf00      	nop

000dbc68 <__aeabi_cdcmpeq>:
   dbc68:	b501      	push	{r0, lr}
   dbc6a:	f7ff ffb7 	bl	dbbdc <__cmpdf2>
   dbc6e:	2800      	cmp	r0, #0
   dbc70:	bf48      	it	mi
   dbc72:	f110 0f00 	cmnmi.w	r0, #0
   dbc76:	bd01      	pop	{r0, pc}

000dbc78 <__aeabi_dcmpeq>:
   dbc78:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbc7c:	f7ff fff4 	bl	dbc68 <__aeabi_cdcmpeq>
   dbc80:	bf0c      	ite	eq
   dbc82:	2001      	moveq	r0, #1
   dbc84:	2000      	movne	r0, #0
   dbc86:	f85d fb08 	ldr.w	pc, [sp], #8
   dbc8a:	bf00      	nop

000dbc8c <__aeabi_dcmplt>:
   dbc8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbc90:	f7ff ffea 	bl	dbc68 <__aeabi_cdcmpeq>
   dbc94:	bf34      	ite	cc
   dbc96:	2001      	movcc	r0, #1
   dbc98:	2000      	movcs	r0, #0
   dbc9a:	f85d fb08 	ldr.w	pc, [sp], #8
   dbc9e:	bf00      	nop

000dbca0 <__aeabi_dcmple>:
   dbca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbca4:	f7ff ffe0 	bl	dbc68 <__aeabi_cdcmpeq>
   dbca8:	bf94      	ite	ls
   dbcaa:	2001      	movls	r0, #1
   dbcac:	2000      	movhi	r0, #0
   dbcae:	f85d fb08 	ldr.w	pc, [sp], #8
   dbcb2:	bf00      	nop

000dbcb4 <__aeabi_dcmpge>:
   dbcb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbcb8:	f7ff ffce 	bl	dbc58 <__aeabi_cdrcmple>
   dbcbc:	bf94      	ite	ls
   dbcbe:	2001      	movls	r0, #1
   dbcc0:	2000      	movhi	r0, #0
   dbcc2:	f85d fb08 	ldr.w	pc, [sp], #8
   dbcc6:	bf00      	nop

000dbcc8 <__aeabi_dcmpgt>:
   dbcc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dbccc:	f7ff ffc4 	bl	dbc58 <__aeabi_cdrcmple>
   dbcd0:	bf34      	ite	cc
   dbcd2:	2001      	movcc	r0, #1
   dbcd4:	2000      	movcs	r0, #0
   dbcd6:	f85d fb08 	ldr.w	pc, [sp], #8
   dbcda:	bf00      	nop

000dbcdc <__aeabi_d2iz>:
   dbcdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbce4:	d215      	bcs.n	dbd12 <__aeabi_d2iz+0x36>
   dbce6:	d511      	bpl.n	dbd0c <__aeabi_d2iz+0x30>
   dbce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbcec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbcf0:	d912      	bls.n	dbd18 <__aeabi_d2iz+0x3c>
   dbcf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbcf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbcfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbcfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbd02:	fa23 f002 	lsr.w	r0, r3, r2
   dbd06:	bf18      	it	ne
   dbd08:	4240      	negne	r0, r0
   dbd0a:	4770      	bx	lr
   dbd0c:	f04f 0000 	mov.w	r0, #0
   dbd10:	4770      	bx	lr
   dbd12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd16:	d105      	bne.n	dbd24 <__aeabi_d2iz+0x48>
   dbd18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbd1c:	bf08      	it	eq
   dbd1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbd22:	4770      	bx	lr
   dbd24:	f04f 0000 	mov.w	r0, #0
   dbd28:	4770      	bx	lr
   dbd2a:	bf00      	nop

000dbd2c <__aeabi_d2uiz>:
   dbd2c:	004a      	lsls	r2, r1, #1
   dbd2e:	d211      	bcs.n	dbd54 <__aeabi_d2uiz+0x28>
   dbd30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbd34:	d211      	bcs.n	dbd5a <__aeabi_d2uiz+0x2e>
   dbd36:	d50d      	bpl.n	dbd54 <__aeabi_d2uiz+0x28>
   dbd38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbd3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbd40:	d40e      	bmi.n	dbd60 <__aeabi_d2uiz+0x34>
   dbd42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbd46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbd4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbd4e:	fa23 f002 	lsr.w	r0, r3, r2
   dbd52:	4770      	bx	lr
   dbd54:	f04f 0000 	mov.w	r0, #0
   dbd58:	4770      	bx	lr
   dbd5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd5e:	d102      	bne.n	dbd66 <__aeabi_d2uiz+0x3a>
   dbd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbd64:	4770      	bx	lr
   dbd66:	f04f 0000 	mov.w	r0, #0
   dbd6a:	4770      	bx	lr

000dbd6c <__aeabi_d2f>:
   dbd6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbd70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbd74:	bf24      	itt	cs
   dbd76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbd7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbd7e:	d90d      	bls.n	dbd9c <__aeabi_d2f+0x30>
   dbd80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbd84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbd88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbd8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbd90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbd94:	bf08      	it	eq
   dbd96:	f020 0001 	biceq.w	r0, r0, #1
   dbd9a:	4770      	bx	lr
   dbd9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbda0:	d121      	bne.n	dbde6 <__aeabi_d2f+0x7a>
   dbda2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbda6:	bfbc      	itt	lt
   dbda8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbdac:	4770      	bxlt	lr
   dbdae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbdb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbdb6:	f1c2 0218 	rsb	r2, r2, #24
   dbdba:	f1c2 0c20 	rsb	ip, r2, #32
   dbdbe:	fa10 f30c 	lsls.w	r3, r0, ip
   dbdc2:	fa20 f002 	lsr.w	r0, r0, r2
   dbdc6:	bf18      	it	ne
   dbdc8:	f040 0001 	orrne.w	r0, r0, #1
   dbdcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbdd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbdd4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbdd8:	ea40 000c 	orr.w	r0, r0, ip
   dbddc:	fa23 f302 	lsr.w	r3, r3, r2
   dbde0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbde4:	e7cc      	b.n	dbd80 <__aeabi_d2f+0x14>
   dbde6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbdea:	d107      	bne.n	dbdfc <__aeabi_d2f+0x90>
   dbdec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbdf0:	bf1e      	ittt	ne
   dbdf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbdf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbdfa:	4770      	bxne	lr
   dbdfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbe00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbe04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbe08:	4770      	bx	lr
   dbe0a:	bf00      	nop

000dbe0c <__aeabi_d2ulz>:
   dbe0c:	b5d0      	push	{r4, r6, r7, lr}
   dbe0e:	4b0c      	ldr	r3, [pc, #48]	; (dbe40 <__aeabi_d2ulz+0x34>)
   dbe10:	2200      	movs	r2, #0
   dbe12:	4606      	mov	r6, r0
   dbe14:	460f      	mov	r7, r1
   dbe16:	f7ff fcc7 	bl	db7a8 <__aeabi_dmul>
   dbe1a:	f7ff ff87 	bl	dbd2c <__aeabi_d2uiz>
   dbe1e:	4604      	mov	r4, r0
   dbe20:	f7ff fc48 	bl	db6b4 <__aeabi_ui2d>
   dbe24:	4b07      	ldr	r3, [pc, #28]	; (dbe44 <__aeabi_d2ulz+0x38>)
   dbe26:	2200      	movs	r2, #0
   dbe28:	f7ff fcbe 	bl	db7a8 <__aeabi_dmul>
   dbe2c:	4602      	mov	r2, r0
   dbe2e:	460b      	mov	r3, r1
   dbe30:	4630      	mov	r0, r6
   dbe32:	4639      	mov	r1, r7
   dbe34:	f7ff fb00 	bl	db438 <__aeabi_dsub>
   dbe38:	f7ff ff78 	bl	dbd2c <__aeabi_d2uiz>
   dbe3c:	4621      	mov	r1, r4
   dbe3e:	bdd0      	pop	{r4, r6, r7, pc}
   dbe40:	3df00000 	.word	0x3df00000
   dbe44:	41f00000 	.word	0x41f00000

000dbe48 <atexit>:
   dbe48:	2300      	movs	r3, #0
   dbe4a:	4601      	mov	r1, r0
   dbe4c:	461a      	mov	r2, r3
   dbe4e:	4618      	mov	r0, r3
   dbe50:	f001 b806 	b.w	dce60 <__register_exitproc>

000dbe54 <atof>:
   dbe54:	2100      	movs	r1, #0
   dbe56:	f000 bf21 	b.w	dcc9c <strtod>

000dbe5a <atol>:
   dbe5a:	220a      	movs	r2, #10
   dbe5c:	2100      	movs	r1, #0
   dbe5e:	f000 bff5 	b.w	dce4c <strtol>

000dbe62 <memcpy>:
   dbe62:	440a      	add	r2, r1
   dbe64:	4291      	cmp	r1, r2
   dbe66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbe6a:	d100      	bne.n	dbe6e <memcpy+0xc>
   dbe6c:	4770      	bx	lr
   dbe6e:	b510      	push	{r4, lr}
   dbe70:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbe74:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbe78:	4291      	cmp	r1, r2
   dbe7a:	d1f9      	bne.n	dbe70 <memcpy+0xe>
   dbe7c:	bd10      	pop	{r4, pc}

000dbe7e <memmove>:
   dbe7e:	4288      	cmp	r0, r1
   dbe80:	b510      	push	{r4, lr}
   dbe82:	eb01 0402 	add.w	r4, r1, r2
   dbe86:	d902      	bls.n	dbe8e <memmove+0x10>
   dbe88:	4284      	cmp	r4, r0
   dbe8a:	4623      	mov	r3, r4
   dbe8c:	d807      	bhi.n	dbe9e <memmove+0x20>
   dbe8e:	1e43      	subs	r3, r0, #1
   dbe90:	42a1      	cmp	r1, r4
   dbe92:	d008      	beq.n	dbea6 <memmove+0x28>
   dbe94:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbe98:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbe9c:	e7f8      	b.n	dbe90 <memmove+0x12>
   dbe9e:	4402      	add	r2, r0
   dbea0:	4601      	mov	r1, r0
   dbea2:	428a      	cmp	r2, r1
   dbea4:	d100      	bne.n	dbea8 <memmove+0x2a>
   dbea6:	bd10      	pop	{r4, pc}
   dbea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbeac:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbeb0:	e7f7      	b.n	dbea2 <memmove+0x24>

000dbeb2 <memset>:
   dbeb2:	4402      	add	r2, r0
   dbeb4:	4603      	mov	r3, r0
   dbeb6:	4293      	cmp	r3, r2
   dbeb8:	d100      	bne.n	dbebc <memset+0xa>
   dbeba:	4770      	bx	lr
   dbebc:	f803 1b01 	strb.w	r1, [r3], #1
   dbec0:	e7f9      	b.n	dbeb6 <memset+0x4>
	...

000dbec4 <srand>:
   dbec4:	b538      	push	{r3, r4, r5, lr}
   dbec6:	4b0d      	ldr	r3, [pc, #52]	; (dbefc <srand+0x38>)
   dbec8:	681d      	ldr	r5, [r3, #0]
   dbeca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbecc:	4604      	mov	r4, r0
   dbece:	b97b      	cbnz	r3, dbef0 <srand+0x2c>
   dbed0:	2018      	movs	r0, #24
   dbed2:	f7fb fd63 	bl	d799c <malloc>
   dbed6:	4a0a      	ldr	r2, [pc, #40]	; (dbf00 <srand+0x3c>)
   dbed8:	4b0a      	ldr	r3, [pc, #40]	; (dbf04 <srand+0x40>)
   dbeda:	63a8      	str	r0, [r5, #56]	; 0x38
   dbedc:	e9c0 2300 	strd	r2, r3, [r0]
   dbee0:	4b09      	ldr	r3, [pc, #36]	; (dbf08 <srand+0x44>)
   dbee2:	6083      	str	r3, [r0, #8]
   dbee4:	230b      	movs	r3, #11
   dbee6:	8183      	strh	r3, [r0, #12]
   dbee8:	2201      	movs	r2, #1
   dbeea:	2300      	movs	r3, #0
   dbeec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbef0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbef2:	2200      	movs	r2, #0
   dbef4:	611c      	str	r4, [r3, #16]
   dbef6:	615a      	str	r2, [r3, #20]
   dbef8:	bd38      	pop	{r3, r4, r5, pc}
   dbefa:	bf00      	nop
   dbefc:	2003e028 	.word	0x2003e028
   dbf00:	abcd330e 	.word	0xabcd330e
   dbf04:	e66d1234 	.word	0xe66d1234
   dbf08:	0005deec 	.word	0x0005deec

000dbf0c <strchr>:
   dbf0c:	b2c9      	uxtb	r1, r1
   dbf0e:	4603      	mov	r3, r0
   dbf10:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbf14:	b11a      	cbz	r2, dbf1e <strchr+0x12>
   dbf16:	428a      	cmp	r2, r1
   dbf18:	d1f9      	bne.n	dbf0e <strchr+0x2>
   dbf1a:	4618      	mov	r0, r3
   dbf1c:	4770      	bx	lr
   dbf1e:	2900      	cmp	r1, #0
   dbf20:	bf18      	it	ne
   dbf22:	2300      	movne	r3, #0
   dbf24:	e7f9      	b.n	dbf1a <strchr+0xe>

000dbf26 <strchrnul>:
   dbf26:	b510      	push	{r4, lr}
   dbf28:	4604      	mov	r4, r0
   dbf2a:	f7ff ffef 	bl	dbf0c <strchr>
   dbf2e:	b918      	cbnz	r0, dbf38 <strchrnul+0x12>
   dbf30:	4620      	mov	r0, r4
   dbf32:	f000 f832 	bl	dbf9a <strlen>
   dbf36:	4420      	add	r0, r4
   dbf38:	bd10      	pop	{r4, pc}

000dbf3a <strcmp>:
   dbf3a:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbf42:	2a01      	cmp	r2, #1
   dbf44:	bf28      	it	cs
   dbf46:	429a      	cmpcs	r2, r3
   dbf48:	d0f7      	beq.n	dbf3a <strcmp>
   dbf4a:	1ad0      	subs	r0, r2, r3
   dbf4c:	4770      	bx	lr

000dbf4e <strcpy>:
   dbf4e:	4603      	mov	r3, r0
   dbf50:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbf54:	f803 2b01 	strb.w	r2, [r3], #1
   dbf58:	2a00      	cmp	r2, #0
   dbf5a:	d1f9      	bne.n	dbf50 <strcpy+0x2>
   dbf5c:	4770      	bx	lr
	...

000dbf60 <strdup>:
   dbf60:	4b02      	ldr	r3, [pc, #8]	; (dbf6c <strdup+0xc>)
   dbf62:	4601      	mov	r1, r0
   dbf64:	6818      	ldr	r0, [r3, #0]
   dbf66:	f000 b803 	b.w	dbf70 <_strdup_r>
   dbf6a:	bf00      	nop
   dbf6c:	2003e028 	.word	0x2003e028

000dbf70 <_strdup_r>:
   dbf70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbf72:	4604      	mov	r4, r0
   dbf74:	4608      	mov	r0, r1
   dbf76:	460d      	mov	r5, r1
   dbf78:	f000 f80f 	bl	dbf9a <strlen>
   dbf7c:	1c42      	adds	r2, r0, #1
   dbf7e:	4611      	mov	r1, r2
   dbf80:	4620      	mov	r0, r4
   dbf82:	9201      	str	r2, [sp, #4]
   dbf84:	f7fb fd3a 	bl	d79fc <_malloc_r>
   dbf88:	4604      	mov	r4, r0
   dbf8a:	b118      	cbz	r0, dbf94 <_strdup_r+0x24>
   dbf8c:	9a01      	ldr	r2, [sp, #4]
   dbf8e:	4629      	mov	r1, r5
   dbf90:	f7ff ff67 	bl	dbe62 <memcpy>
   dbf94:	4620      	mov	r0, r4
   dbf96:	b003      	add	sp, #12
   dbf98:	bd30      	pop	{r4, r5, pc}

000dbf9a <strlen>:
   dbf9a:	4603      	mov	r3, r0
   dbf9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbfa0:	2a00      	cmp	r2, #0
   dbfa2:	d1fb      	bne.n	dbf9c <strlen+0x2>
   dbfa4:	1a18      	subs	r0, r3, r0
   dbfa6:	3801      	subs	r0, #1
   dbfa8:	4770      	bx	lr

000dbfaa <strncmp>:
   dbfaa:	b510      	push	{r4, lr}
   dbfac:	b16a      	cbz	r2, dbfca <strncmp+0x20>
   dbfae:	3901      	subs	r1, #1
   dbfb0:	1884      	adds	r4, r0, r2
   dbfb2:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbfb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbfba:	4293      	cmp	r3, r2
   dbfbc:	d103      	bne.n	dbfc6 <strncmp+0x1c>
   dbfbe:	42a0      	cmp	r0, r4
   dbfc0:	d001      	beq.n	dbfc6 <strncmp+0x1c>
   dbfc2:	2b00      	cmp	r3, #0
   dbfc4:	d1f5      	bne.n	dbfb2 <strncmp+0x8>
   dbfc6:	1a98      	subs	r0, r3, r2
   dbfc8:	bd10      	pop	{r4, pc}
   dbfca:	4610      	mov	r0, r2
   dbfcc:	e7fc      	b.n	dbfc8 <strncmp+0x1e>

000dbfce <strncpy>:
   dbfce:	b510      	push	{r4, lr}
   dbfd0:	3901      	subs	r1, #1
   dbfd2:	4603      	mov	r3, r0
   dbfd4:	b132      	cbz	r2, dbfe4 <strncpy+0x16>
   dbfd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbfda:	f803 4b01 	strb.w	r4, [r3], #1
   dbfde:	3a01      	subs	r2, #1
   dbfe0:	2c00      	cmp	r4, #0
   dbfe2:	d1f7      	bne.n	dbfd4 <strncpy+0x6>
   dbfe4:	441a      	add	r2, r3
   dbfe6:	2100      	movs	r1, #0
   dbfe8:	4293      	cmp	r3, r2
   dbfea:	d100      	bne.n	dbfee <strncpy+0x20>
   dbfec:	bd10      	pop	{r4, pc}
   dbfee:	f803 1b01 	strb.w	r1, [r3], #1
   dbff2:	e7f9      	b.n	dbfe8 <strncpy+0x1a>

000dbff4 <strrchr>:
   dbff4:	b538      	push	{r3, r4, r5, lr}
   dbff6:	4603      	mov	r3, r0
   dbff8:	460c      	mov	r4, r1
   dbffa:	b969      	cbnz	r1, dc018 <strrchr+0x24>
   dbffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc000:	f7ff bf84 	b.w	dbf0c <strchr>
   dc004:	1c43      	adds	r3, r0, #1
   dc006:	4605      	mov	r5, r0
   dc008:	4621      	mov	r1, r4
   dc00a:	4618      	mov	r0, r3
   dc00c:	f7ff ff7e 	bl	dbf0c <strchr>
   dc010:	2800      	cmp	r0, #0
   dc012:	d1f7      	bne.n	dc004 <strrchr+0x10>
   dc014:	4628      	mov	r0, r5
   dc016:	bd38      	pop	{r3, r4, r5, pc}
   dc018:	2500      	movs	r5, #0
   dc01a:	e7f5      	b.n	dc008 <strrchr+0x14>

000dc01c <strstr>:
   dc01c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc01e:	780c      	ldrb	r4, [r1, #0]
   dc020:	b164      	cbz	r4, dc03c <strstr+0x20>
   dc022:	4603      	mov	r3, r0
   dc024:	781a      	ldrb	r2, [r3, #0]
   dc026:	4618      	mov	r0, r3
   dc028:	1c5e      	adds	r6, r3, #1
   dc02a:	b90a      	cbnz	r2, dc030 <strstr+0x14>
   dc02c:	4610      	mov	r0, r2
   dc02e:	e005      	b.n	dc03c <strstr+0x20>
   dc030:	4294      	cmp	r4, r2
   dc032:	d108      	bne.n	dc046 <strstr+0x2a>
   dc034:	460d      	mov	r5, r1
   dc036:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dc03a:	b902      	cbnz	r2, dc03e <strstr+0x22>
   dc03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc03e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dc042:	4297      	cmp	r7, r2
   dc044:	d0f7      	beq.n	dc036 <strstr+0x1a>
   dc046:	4633      	mov	r3, r6
   dc048:	e7ec      	b.n	dc024 <strstr+0x8>

000dc04a <sulp>:
   dc04a:	b570      	push	{r4, r5, r6, lr}
   dc04c:	4604      	mov	r4, r0
   dc04e:	460d      	mov	r5, r1
   dc050:	ec45 4b10 	vmov	d0, r4, r5
   dc054:	4616      	mov	r6, r2
   dc056:	f001 fdd5 	bl	ddc04 <__ulp>
   dc05a:	ec51 0b10 	vmov	r0, r1, d0
   dc05e:	b17e      	cbz	r6, dc080 <sulp+0x36>
   dc060:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dc064:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc068:	2b00      	cmp	r3, #0
   dc06a:	dd09      	ble.n	dc080 <sulp+0x36>
   dc06c:	051b      	lsls	r3, r3, #20
   dc06e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dc072:	2400      	movs	r4, #0
   dc074:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dc078:	4622      	mov	r2, r4
   dc07a:	462b      	mov	r3, r5
   dc07c:	f7ff fb94 	bl	db7a8 <__aeabi_dmul>
   dc080:	bd70      	pop	{r4, r5, r6, pc}
   dc082:	0000      	movs	r0, r0
   dc084:	0000      	movs	r0, r0
	...

000dc088 <_strtod_l>:
   dc088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc08c:	b0a3      	sub	sp, #140	; 0x8c
   dc08e:	461f      	mov	r7, r3
   dc090:	2300      	movs	r3, #0
   dc092:	931e      	str	r3, [sp, #120]	; 0x78
   dc094:	4ba4      	ldr	r3, [pc, #656]	; (dc328 <_strtod_l+0x2a0>)
   dc096:	9219      	str	r2, [sp, #100]	; 0x64
   dc098:	681b      	ldr	r3, [r3, #0]
   dc09a:	9307      	str	r3, [sp, #28]
   dc09c:	4604      	mov	r4, r0
   dc09e:	4618      	mov	r0, r3
   dc0a0:	4688      	mov	r8, r1
   dc0a2:	f7ff ff7a 	bl	dbf9a <strlen>
   dc0a6:	f04f 0a00 	mov.w	sl, #0
   dc0aa:	4605      	mov	r5, r0
   dc0ac:	f04f 0b00 	mov.w	fp, #0
   dc0b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc0b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc0b6:	781a      	ldrb	r2, [r3, #0]
   dc0b8:	2a2b      	cmp	r2, #43	; 0x2b
   dc0ba:	d04c      	beq.n	dc156 <_strtod_l+0xce>
   dc0bc:	d839      	bhi.n	dc132 <_strtod_l+0xaa>
   dc0be:	2a0d      	cmp	r2, #13
   dc0c0:	d832      	bhi.n	dc128 <_strtod_l+0xa0>
   dc0c2:	2a08      	cmp	r2, #8
   dc0c4:	d832      	bhi.n	dc12c <_strtod_l+0xa4>
   dc0c6:	2a00      	cmp	r2, #0
   dc0c8:	d03c      	beq.n	dc144 <_strtod_l+0xbc>
   dc0ca:	2300      	movs	r3, #0
   dc0cc:	930e      	str	r3, [sp, #56]	; 0x38
   dc0ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dc0d0:	7833      	ldrb	r3, [r6, #0]
   dc0d2:	2b30      	cmp	r3, #48	; 0x30
   dc0d4:	f040 80b4 	bne.w	dc240 <_strtod_l+0x1b8>
   dc0d8:	7873      	ldrb	r3, [r6, #1]
   dc0da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc0de:	2b58      	cmp	r3, #88	; 0x58
   dc0e0:	d16c      	bne.n	dc1bc <_strtod_l+0x134>
   dc0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc0e4:	9301      	str	r3, [sp, #4]
   dc0e6:	ab1e      	add	r3, sp, #120	; 0x78
   dc0e8:	9702      	str	r7, [sp, #8]
   dc0ea:	9300      	str	r3, [sp, #0]
   dc0ec:	4a8f      	ldr	r2, [pc, #572]	; (dc32c <_strtod_l+0x2a4>)
   dc0ee:	ab1f      	add	r3, sp, #124	; 0x7c
   dc0f0:	a91d      	add	r1, sp, #116	; 0x74
   dc0f2:	4620      	mov	r0, r4
   dc0f4:	f000 ff7e 	bl	dcff4 <__gethex>
   dc0f8:	f010 0707 	ands.w	r7, r0, #7
   dc0fc:	4605      	mov	r5, r0
   dc0fe:	d005      	beq.n	dc10c <_strtod_l+0x84>
   dc100:	2f06      	cmp	r7, #6
   dc102:	d12a      	bne.n	dc15a <_strtod_l+0xd2>
   dc104:	3601      	adds	r6, #1
   dc106:	2300      	movs	r3, #0
   dc108:	961d      	str	r6, [sp, #116]	; 0x74
   dc10a:	930e      	str	r3, [sp, #56]	; 0x38
   dc10c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc10e:	2b00      	cmp	r3, #0
   dc110:	f040 8596 	bne.w	dcc40 <_strtod_l+0xbb8>
   dc114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc116:	b1db      	cbz	r3, dc150 <_strtod_l+0xc8>
   dc118:	4652      	mov	r2, sl
   dc11a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dc11e:	ec43 2b10 	vmov	d0, r2, r3
   dc122:	b023      	add	sp, #140	; 0x8c
   dc124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc128:	2a20      	cmp	r2, #32
   dc12a:	d1ce      	bne.n	dc0ca <_strtod_l+0x42>
   dc12c:	3301      	adds	r3, #1
   dc12e:	931d      	str	r3, [sp, #116]	; 0x74
   dc130:	e7c0      	b.n	dc0b4 <_strtod_l+0x2c>
   dc132:	2a2d      	cmp	r2, #45	; 0x2d
   dc134:	d1c9      	bne.n	dc0ca <_strtod_l+0x42>
   dc136:	2201      	movs	r2, #1
   dc138:	920e      	str	r2, [sp, #56]	; 0x38
   dc13a:	1c5a      	adds	r2, r3, #1
   dc13c:	921d      	str	r2, [sp, #116]	; 0x74
   dc13e:	785b      	ldrb	r3, [r3, #1]
   dc140:	2b00      	cmp	r3, #0
   dc142:	d1c4      	bne.n	dc0ce <_strtod_l+0x46>
   dc144:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc146:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc14a:	2b00      	cmp	r3, #0
   dc14c:	f040 8576 	bne.w	dcc3c <_strtod_l+0xbb4>
   dc150:	4652      	mov	r2, sl
   dc152:	465b      	mov	r3, fp
   dc154:	e7e3      	b.n	dc11e <_strtod_l+0x96>
   dc156:	2200      	movs	r2, #0
   dc158:	e7ee      	b.n	dc138 <_strtod_l+0xb0>
   dc15a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc15c:	b13a      	cbz	r2, dc16e <_strtod_l+0xe6>
   dc15e:	2135      	movs	r1, #53	; 0x35
   dc160:	a820      	add	r0, sp, #128	; 0x80
   dc162:	f001 fe4e 	bl	dde02 <__copybits>
   dc166:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc168:	4620      	mov	r0, r4
   dc16a:	f001 fa82 	bl	dd672 <_Bfree>
   dc16e:	3f01      	subs	r7, #1
   dc170:	2f05      	cmp	r7, #5
   dc172:	d807      	bhi.n	dc184 <_strtod_l+0xfc>
   dc174:	e8df f007 	tbb	[pc, r7]
   dc178:	1d180b0e 	.word	0x1d180b0e
   dc17c:	030e      	.short	0x030e
   dc17e:	f04f 0b00 	mov.w	fp, #0
   dc182:	46da      	mov	sl, fp
   dc184:	0728      	lsls	r0, r5, #28
   dc186:	d5c1      	bpl.n	dc10c <_strtod_l+0x84>
   dc188:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dc18c:	e7be      	b.n	dc10c <_strtod_l+0x84>
   dc18e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dc192:	e7f7      	b.n	dc184 <_strtod_l+0xfc>
   dc194:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dc198:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dc19a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dc19e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dc1a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dc1a6:	e7ed      	b.n	dc184 <_strtod_l+0xfc>
   dc1a8:	f8df b184 	ldr.w	fp, [pc, #388]	; dc330 <_strtod_l+0x2a8>
   dc1ac:	f04f 0a00 	mov.w	sl, #0
   dc1b0:	e7e8      	b.n	dc184 <_strtod_l+0xfc>
   dc1b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dc1b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc1ba:	e7e3      	b.n	dc184 <_strtod_l+0xfc>
   dc1bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc1be:	1c5a      	adds	r2, r3, #1
   dc1c0:	921d      	str	r2, [sp, #116]	; 0x74
   dc1c2:	785b      	ldrb	r3, [r3, #1]
   dc1c4:	2b30      	cmp	r3, #48	; 0x30
   dc1c6:	d0f9      	beq.n	dc1bc <_strtod_l+0x134>
   dc1c8:	2b00      	cmp	r3, #0
   dc1ca:	d09f      	beq.n	dc10c <_strtod_l+0x84>
   dc1cc:	2301      	movs	r3, #1
   dc1ce:	f04f 0900 	mov.w	r9, #0
   dc1d2:	9304      	str	r3, [sp, #16]
   dc1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc1d6:	930a      	str	r3, [sp, #40]	; 0x28
   dc1d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dc1dc:	464f      	mov	r7, r9
   dc1de:	220a      	movs	r2, #10
   dc1e0:	981d      	ldr	r0, [sp, #116]	; 0x74
   dc1e2:	7806      	ldrb	r6, [r0, #0]
   dc1e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dc1e8:	b2d9      	uxtb	r1, r3
   dc1ea:	2909      	cmp	r1, #9
   dc1ec:	d92a      	bls.n	dc244 <_strtod_l+0x1bc>
   dc1ee:	9907      	ldr	r1, [sp, #28]
   dc1f0:	462a      	mov	r2, r5
   dc1f2:	f7ff feda 	bl	dbfaa <strncmp>
   dc1f6:	b398      	cbz	r0, dc260 <_strtod_l+0x1d8>
   dc1f8:	2000      	movs	r0, #0
   dc1fa:	4633      	mov	r3, r6
   dc1fc:	463d      	mov	r5, r7
   dc1fe:	9007      	str	r0, [sp, #28]
   dc200:	4602      	mov	r2, r0
   dc202:	2b65      	cmp	r3, #101	; 0x65
   dc204:	d001      	beq.n	dc20a <_strtod_l+0x182>
   dc206:	2b45      	cmp	r3, #69	; 0x45
   dc208:	d118      	bne.n	dc23c <_strtod_l+0x1b4>
   dc20a:	b91d      	cbnz	r5, dc214 <_strtod_l+0x18c>
   dc20c:	9b04      	ldr	r3, [sp, #16]
   dc20e:	4303      	orrs	r3, r0
   dc210:	d098      	beq.n	dc144 <_strtod_l+0xbc>
   dc212:	2500      	movs	r5, #0
   dc214:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dc218:	f108 0301 	add.w	r3, r8, #1
   dc21c:	931d      	str	r3, [sp, #116]	; 0x74
   dc21e:	f898 3001 	ldrb.w	r3, [r8, #1]
   dc222:	2b2b      	cmp	r3, #43	; 0x2b
   dc224:	d075      	beq.n	dc312 <_strtod_l+0x28a>
   dc226:	2b2d      	cmp	r3, #45	; 0x2d
   dc228:	d07b      	beq.n	dc322 <_strtod_l+0x29a>
   dc22a:	f04f 0c00 	mov.w	ip, #0
   dc22e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dc232:	2909      	cmp	r1, #9
   dc234:	f240 8082 	bls.w	dc33c <_strtod_l+0x2b4>
   dc238:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc23c:	2600      	movs	r6, #0
   dc23e:	e09d      	b.n	dc37c <_strtod_l+0x2f4>
   dc240:	2300      	movs	r3, #0
   dc242:	e7c4      	b.n	dc1ce <_strtod_l+0x146>
   dc244:	2f08      	cmp	r7, #8
   dc246:	bfd8      	it	le
   dc248:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dc24a:	f100 0001 	add.w	r0, r0, #1
   dc24e:	bfda      	itte	le
   dc250:	fb02 3301 	mlale	r3, r2, r1, r3
   dc254:	9309      	strle	r3, [sp, #36]	; 0x24
   dc256:	fb02 3909 	mlagt	r9, r2, r9, r3
   dc25a:	3701      	adds	r7, #1
   dc25c:	901d      	str	r0, [sp, #116]	; 0x74
   dc25e:	e7bf      	b.n	dc1e0 <_strtod_l+0x158>
   dc260:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc262:	195a      	adds	r2, r3, r5
   dc264:	921d      	str	r2, [sp, #116]	; 0x74
   dc266:	5d5b      	ldrb	r3, [r3, r5]
   dc268:	2f00      	cmp	r7, #0
   dc26a:	d037      	beq.n	dc2dc <_strtod_l+0x254>
   dc26c:	9007      	str	r0, [sp, #28]
   dc26e:	463d      	mov	r5, r7
   dc270:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dc274:	2a09      	cmp	r2, #9
   dc276:	d912      	bls.n	dc29e <_strtod_l+0x216>
   dc278:	2201      	movs	r2, #1
   dc27a:	e7c2      	b.n	dc202 <_strtod_l+0x17a>
   dc27c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc27e:	1c5a      	adds	r2, r3, #1
   dc280:	921d      	str	r2, [sp, #116]	; 0x74
   dc282:	785b      	ldrb	r3, [r3, #1]
   dc284:	3001      	adds	r0, #1
   dc286:	2b30      	cmp	r3, #48	; 0x30
   dc288:	d0f8      	beq.n	dc27c <_strtod_l+0x1f4>
   dc28a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dc28e:	2a08      	cmp	r2, #8
   dc290:	f200 84db 	bhi.w	dcc4a <_strtod_l+0xbc2>
   dc294:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dc296:	9007      	str	r0, [sp, #28]
   dc298:	2000      	movs	r0, #0
   dc29a:	920a      	str	r2, [sp, #40]	; 0x28
   dc29c:	4605      	mov	r5, r0
   dc29e:	3b30      	subs	r3, #48	; 0x30
   dc2a0:	f100 0201 	add.w	r2, r0, #1
   dc2a4:	d014      	beq.n	dc2d0 <_strtod_l+0x248>
   dc2a6:	9907      	ldr	r1, [sp, #28]
   dc2a8:	4411      	add	r1, r2
   dc2aa:	9107      	str	r1, [sp, #28]
   dc2ac:	462a      	mov	r2, r5
   dc2ae:	eb00 0e05 	add.w	lr, r0, r5
   dc2b2:	210a      	movs	r1, #10
   dc2b4:	4572      	cmp	r2, lr
   dc2b6:	d113      	bne.n	dc2e0 <_strtod_l+0x258>
   dc2b8:	182a      	adds	r2, r5, r0
   dc2ba:	2a08      	cmp	r2, #8
   dc2bc:	f105 0501 	add.w	r5, r5, #1
   dc2c0:	4405      	add	r5, r0
   dc2c2:	dc1c      	bgt.n	dc2fe <_strtod_l+0x276>
   dc2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc2c6:	220a      	movs	r2, #10
   dc2c8:	fb02 3301 	mla	r3, r2, r1, r3
   dc2cc:	9309      	str	r3, [sp, #36]	; 0x24
   dc2ce:	2200      	movs	r2, #0
   dc2d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc2d2:	1c59      	adds	r1, r3, #1
   dc2d4:	911d      	str	r1, [sp, #116]	; 0x74
   dc2d6:	785b      	ldrb	r3, [r3, #1]
   dc2d8:	4610      	mov	r0, r2
   dc2da:	e7c9      	b.n	dc270 <_strtod_l+0x1e8>
   dc2dc:	4638      	mov	r0, r7
   dc2de:	e7d2      	b.n	dc286 <_strtod_l+0x1fe>
   dc2e0:	2a08      	cmp	r2, #8
   dc2e2:	dc04      	bgt.n	dc2ee <_strtod_l+0x266>
   dc2e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dc2e6:	434e      	muls	r6, r1
   dc2e8:	9609      	str	r6, [sp, #36]	; 0x24
   dc2ea:	3201      	adds	r2, #1
   dc2ec:	e7e2      	b.n	dc2b4 <_strtod_l+0x22c>
   dc2ee:	f102 0c01 	add.w	ip, r2, #1
   dc2f2:	f1bc 0f10 	cmp.w	ip, #16
   dc2f6:	bfd8      	it	le
   dc2f8:	fb01 f909 	mulle.w	r9, r1, r9
   dc2fc:	e7f5      	b.n	dc2ea <_strtod_l+0x262>
   dc2fe:	2d10      	cmp	r5, #16
   dc300:	bfdc      	itt	le
   dc302:	220a      	movle	r2, #10
   dc304:	fb02 3909 	mlale	r9, r2, r9, r3
   dc308:	e7e1      	b.n	dc2ce <_strtod_l+0x246>
   dc30a:	2300      	movs	r3, #0
   dc30c:	9307      	str	r3, [sp, #28]
   dc30e:	2201      	movs	r2, #1
   dc310:	e77c      	b.n	dc20c <_strtod_l+0x184>
   dc312:	f04f 0c00 	mov.w	ip, #0
   dc316:	f108 0302 	add.w	r3, r8, #2
   dc31a:	931d      	str	r3, [sp, #116]	; 0x74
   dc31c:	f898 3002 	ldrb.w	r3, [r8, #2]
   dc320:	e785      	b.n	dc22e <_strtod_l+0x1a6>
   dc322:	f04f 0c01 	mov.w	ip, #1
   dc326:	e7f6      	b.n	dc316 <_strtod_l+0x28e>
   dc328:	000debd4 	.word	0x000debd4
   dc32c:	000dea80 	.word	0x000dea80
   dc330:	7ff00000 	.word	0x7ff00000
   dc334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc336:	1c59      	adds	r1, r3, #1
   dc338:	911d      	str	r1, [sp, #116]	; 0x74
   dc33a:	785b      	ldrb	r3, [r3, #1]
   dc33c:	2b30      	cmp	r3, #48	; 0x30
   dc33e:	d0f9      	beq.n	dc334 <_strtod_l+0x2ac>
   dc340:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dc344:	2908      	cmp	r1, #8
   dc346:	f63f af79 	bhi.w	dc23c <_strtod_l+0x1b4>
   dc34a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dc34e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc350:	9308      	str	r3, [sp, #32]
   dc352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc354:	1c59      	adds	r1, r3, #1
   dc356:	911d      	str	r1, [sp, #116]	; 0x74
   dc358:	785b      	ldrb	r3, [r3, #1]
   dc35a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dc35e:	2e09      	cmp	r6, #9
   dc360:	d937      	bls.n	dc3d2 <_strtod_l+0x34a>
   dc362:	9e08      	ldr	r6, [sp, #32]
   dc364:	1b89      	subs	r1, r1, r6
   dc366:	2908      	cmp	r1, #8
   dc368:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dc36c:	dc02      	bgt.n	dc374 <_strtod_l+0x2ec>
   dc36e:	4576      	cmp	r6, lr
   dc370:	bfa8      	it	ge
   dc372:	4676      	movge	r6, lr
   dc374:	f1bc 0f00 	cmp.w	ip, #0
   dc378:	d000      	beq.n	dc37c <_strtod_l+0x2f4>
   dc37a:	4276      	negs	r6, r6
   dc37c:	2d00      	cmp	r5, #0
   dc37e:	d14f      	bne.n	dc420 <_strtod_l+0x398>
   dc380:	9904      	ldr	r1, [sp, #16]
   dc382:	4301      	orrs	r1, r0
   dc384:	f47f aec2 	bne.w	dc10c <_strtod_l+0x84>
   dc388:	2a00      	cmp	r2, #0
   dc38a:	f47f aedb 	bne.w	dc144 <_strtod_l+0xbc>
   dc38e:	2b69      	cmp	r3, #105	; 0x69
   dc390:	d027      	beq.n	dc3e2 <_strtod_l+0x35a>
   dc392:	dc24      	bgt.n	dc3de <_strtod_l+0x356>
   dc394:	2b49      	cmp	r3, #73	; 0x49
   dc396:	d024      	beq.n	dc3e2 <_strtod_l+0x35a>
   dc398:	2b4e      	cmp	r3, #78	; 0x4e
   dc39a:	f47f aed3 	bne.w	dc144 <_strtod_l+0xbc>
   dc39e:	499e      	ldr	r1, [pc, #632]	; (dc618 <_strtod_l+0x590>)
   dc3a0:	a81d      	add	r0, sp, #116	; 0x74
   dc3a2:	f001 f86d 	bl	dd480 <__match>
   dc3a6:	2800      	cmp	r0, #0
   dc3a8:	f43f aecc 	beq.w	dc144 <_strtod_l+0xbc>
   dc3ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc3ae:	781b      	ldrb	r3, [r3, #0]
   dc3b0:	2b28      	cmp	r3, #40	; 0x28
   dc3b2:	d12d      	bne.n	dc410 <_strtod_l+0x388>
   dc3b4:	4999      	ldr	r1, [pc, #612]	; (dc61c <_strtod_l+0x594>)
   dc3b6:	aa20      	add	r2, sp, #128	; 0x80
   dc3b8:	a81d      	add	r0, sp, #116	; 0x74
   dc3ba:	f001 f875 	bl	dd4a8 <__hexnan>
   dc3be:	2805      	cmp	r0, #5
   dc3c0:	d126      	bne.n	dc410 <_strtod_l+0x388>
   dc3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dc3c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dc3c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dc3cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dc3d0:	e69c      	b.n	dc10c <_strtod_l+0x84>
   dc3d2:	210a      	movs	r1, #10
   dc3d4:	fb01 3e0e 	mla	lr, r1, lr, r3
   dc3d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dc3dc:	e7b9      	b.n	dc352 <_strtod_l+0x2ca>
   dc3de:	2b6e      	cmp	r3, #110	; 0x6e
   dc3e0:	e7db      	b.n	dc39a <_strtod_l+0x312>
   dc3e2:	498f      	ldr	r1, [pc, #572]	; (dc620 <_strtod_l+0x598>)
   dc3e4:	a81d      	add	r0, sp, #116	; 0x74
   dc3e6:	f001 f84b 	bl	dd480 <__match>
   dc3ea:	2800      	cmp	r0, #0
   dc3ec:	f43f aeaa 	beq.w	dc144 <_strtod_l+0xbc>
   dc3f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc3f2:	498c      	ldr	r1, [pc, #560]	; (dc624 <_strtod_l+0x59c>)
   dc3f4:	3b01      	subs	r3, #1
   dc3f6:	a81d      	add	r0, sp, #116	; 0x74
   dc3f8:	931d      	str	r3, [sp, #116]	; 0x74
   dc3fa:	f001 f841 	bl	dd480 <__match>
   dc3fe:	b910      	cbnz	r0, dc406 <_strtod_l+0x37e>
   dc400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc402:	3301      	adds	r3, #1
   dc404:	931d      	str	r3, [sp, #116]	; 0x74
   dc406:	f8df b22c 	ldr.w	fp, [pc, #556]	; dc634 <_strtod_l+0x5ac>
   dc40a:	f04f 0a00 	mov.w	sl, #0
   dc40e:	e67d      	b.n	dc10c <_strtod_l+0x84>
   dc410:	4885      	ldr	r0, [pc, #532]	; (dc628 <_strtod_l+0x5a0>)
   dc412:	f7ff f805 	bl	db420 <nan>
   dc416:	ed8d 0b04 	vstr	d0, [sp, #16]
   dc41a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc41e:	e675      	b.n	dc10c <_strtod_l+0x84>
   dc420:	9b07      	ldr	r3, [sp, #28]
   dc422:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc424:	1af3      	subs	r3, r6, r3
   dc426:	2f00      	cmp	r7, #0
   dc428:	bf08      	it	eq
   dc42a:	462f      	moveq	r7, r5
   dc42c:	2d10      	cmp	r5, #16
   dc42e:	9308      	str	r3, [sp, #32]
   dc430:	46a8      	mov	r8, r5
   dc432:	bfa8      	it	ge
   dc434:	f04f 0810 	movge.w	r8, #16
   dc438:	f7ff f93c 	bl	db6b4 <__aeabi_ui2d>
   dc43c:	2d09      	cmp	r5, #9
   dc43e:	4682      	mov	sl, r0
   dc440:	468b      	mov	fp, r1
   dc442:	dd13      	ble.n	dc46c <_strtod_l+0x3e4>
   dc444:	4b79      	ldr	r3, [pc, #484]	; (dc62c <_strtod_l+0x5a4>)
   dc446:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dc44a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dc44e:	f7ff f9ab 	bl	db7a8 <__aeabi_dmul>
   dc452:	4682      	mov	sl, r0
   dc454:	4648      	mov	r0, r9
   dc456:	468b      	mov	fp, r1
   dc458:	f7ff f92c 	bl	db6b4 <__aeabi_ui2d>
   dc45c:	4602      	mov	r2, r0
   dc45e:	460b      	mov	r3, r1
   dc460:	4650      	mov	r0, sl
   dc462:	4659      	mov	r1, fp
   dc464:	f7fe ffea 	bl	db43c <__adddf3>
   dc468:	4682      	mov	sl, r0
   dc46a:	468b      	mov	fp, r1
   dc46c:	2d0f      	cmp	r5, #15
   dc46e:	dc38      	bgt.n	dc4e2 <_strtod_l+0x45a>
   dc470:	9b08      	ldr	r3, [sp, #32]
   dc472:	2b00      	cmp	r3, #0
   dc474:	f43f ae4a 	beq.w	dc10c <_strtod_l+0x84>
   dc478:	dd24      	ble.n	dc4c4 <_strtod_l+0x43c>
   dc47a:	2b16      	cmp	r3, #22
   dc47c:	dc0b      	bgt.n	dc496 <_strtod_l+0x40e>
   dc47e:	4d6b      	ldr	r5, [pc, #428]	; (dc62c <_strtod_l+0x5a4>)
   dc480:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dc484:	e9d5 0100 	ldrd	r0, r1, [r5]
   dc488:	4652      	mov	r2, sl
   dc48a:	465b      	mov	r3, fp
   dc48c:	f7ff f98c 	bl	db7a8 <__aeabi_dmul>
   dc490:	4682      	mov	sl, r0
   dc492:	468b      	mov	fp, r1
   dc494:	e63a      	b.n	dc10c <_strtod_l+0x84>
   dc496:	9a08      	ldr	r2, [sp, #32]
   dc498:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dc49c:	4293      	cmp	r3, r2
   dc49e:	db20      	blt.n	dc4e2 <_strtod_l+0x45a>
   dc4a0:	4c62      	ldr	r4, [pc, #392]	; (dc62c <_strtod_l+0x5a4>)
   dc4a2:	f1c5 050f 	rsb	r5, r5, #15
   dc4a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dc4aa:	4652      	mov	r2, sl
   dc4ac:	465b      	mov	r3, fp
   dc4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc4b2:	f7ff f979 	bl	db7a8 <__aeabi_dmul>
   dc4b6:	9b08      	ldr	r3, [sp, #32]
   dc4b8:	1b5d      	subs	r5, r3, r5
   dc4ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dc4be:	e9d4 2300 	ldrd	r2, r3, [r4]
   dc4c2:	e7e3      	b.n	dc48c <_strtod_l+0x404>
   dc4c4:	9b08      	ldr	r3, [sp, #32]
   dc4c6:	3316      	adds	r3, #22
   dc4c8:	db0b      	blt.n	dc4e2 <_strtod_l+0x45a>
   dc4ca:	9b07      	ldr	r3, [sp, #28]
   dc4cc:	4a57      	ldr	r2, [pc, #348]	; (dc62c <_strtod_l+0x5a4>)
   dc4ce:	1b9e      	subs	r6, r3, r6
   dc4d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dc4d4:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc4d8:	4650      	mov	r0, sl
   dc4da:	4659      	mov	r1, fp
   dc4dc:	f7ff fa8e 	bl	db9fc <__aeabi_ddiv>
   dc4e0:	e7d6      	b.n	dc490 <_strtod_l+0x408>
   dc4e2:	9b08      	ldr	r3, [sp, #32]
   dc4e4:	eba5 0808 	sub.w	r8, r5, r8
   dc4e8:	4498      	add	r8, r3
   dc4ea:	f1b8 0f00 	cmp.w	r8, #0
   dc4ee:	dd71      	ble.n	dc5d4 <_strtod_l+0x54c>
   dc4f0:	f018 030f 	ands.w	r3, r8, #15
   dc4f4:	d00a      	beq.n	dc50c <_strtod_l+0x484>
   dc4f6:	494d      	ldr	r1, [pc, #308]	; (dc62c <_strtod_l+0x5a4>)
   dc4f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dc4fc:	4652      	mov	r2, sl
   dc4fe:	465b      	mov	r3, fp
   dc500:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc504:	f7ff f950 	bl	db7a8 <__aeabi_dmul>
   dc508:	4682      	mov	sl, r0
   dc50a:	468b      	mov	fp, r1
   dc50c:	f038 080f 	bics.w	r8, r8, #15
   dc510:	d04d      	beq.n	dc5ae <_strtod_l+0x526>
   dc512:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dc516:	dd22      	ble.n	dc55e <_strtod_l+0x4d6>
   dc518:	2500      	movs	r5, #0
   dc51a:	462e      	mov	r6, r5
   dc51c:	9509      	str	r5, [sp, #36]	; 0x24
   dc51e:	9507      	str	r5, [sp, #28]
   dc520:	2322      	movs	r3, #34	; 0x22
   dc522:	f8df b110 	ldr.w	fp, [pc, #272]	; dc634 <_strtod_l+0x5ac>
   dc526:	6023      	str	r3, [r4, #0]
   dc528:	f04f 0a00 	mov.w	sl, #0
   dc52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc52e:	2b00      	cmp	r3, #0
   dc530:	f43f adec 	beq.w	dc10c <_strtod_l+0x84>
   dc534:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc536:	4620      	mov	r0, r4
   dc538:	f001 f89b 	bl	dd672 <_Bfree>
   dc53c:	9907      	ldr	r1, [sp, #28]
   dc53e:	4620      	mov	r0, r4
   dc540:	f001 f897 	bl	dd672 <_Bfree>
   dc544:	4631      	mov	r1, r6
   dc546:	4620      	mov	r0, r4
   dc548:	f001 f893 	bl	dd672 <_Bfree>
   dc54c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc54e:	4620      	mov	r0, r4
   dc550:	f001 f88f 	bl	dd672 <_Bfree>
   dc554:	4629      	mov	r1, r5
   dc556:	4620      	mov	r0, r4
   dc558:	f001 f88b 	bl	dd672 <_Bfree>
   dc55c:	e5d6      	b.n	dc10c <_strtod_l+0x84>
   dc55e:	2300      	movs	r3, #0
   dc560:	ea4f 1828 	mov.w	r8, r8, asr #4
   dc564:	4650      	mov	r0, sl
   dc566:	4659      	mov	r1, fp
   dc568:	4699      	mov	r9, r3
   dc56a:	f1b8 0f01 	cmp.w	r8, #1
   dc56e:	dc21      	bgt.n	dc5b4 <_strtod_l+0x52c>
   dc570:	b10b      	cbz	r3, dc576 <_strtod_l+0x4ee>
   dc572:	4682      	mov	sl, r0
   dc574:	468b      	mov	fp, r1
   dc576:	4b2e      	ldr	r3, [pc, #184]	; (dc630 <_strtod_l+0x5a8>)
   dc578:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dc57c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dc580:	4652      	mov	r2, sl
   dc582:	465b      	mov	r3, fp
   dc584:	e9d9 0100 	ldrd	r0, r1, [r9]
   dc588:	f7ff f90e 	bl	db7a8 <__aeabi_dmul>
   dc58c:	4b29      	ldr	r3, [pc, #164]	; (dc634 <_strtod_l+0x5ac>)
   dc58e:	460a      	mov	r2, r1
   dc590:	400b      	ands	r3, r1
   dc592:	4929      	ldr	r1, [pc, #164]	; (dc638 <_strtod_l+0x5b0>)
   dc594:	428b      	cmp	r3, r1
   dc596:	4682      	mov	sl, r0
   dc598:	d8be      	bhi.n	dc518 <_strtod_l+0x490>
   dc59a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dc59e:	428b      	cmp	r3, r1
   dc5a0:	bf86      	itte	hi
   dc5a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dc63c <_strtod_l+0x5b4>
   dc5a6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dc5aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dc5ae:	2300      	movs	r3, #0
   dc5b0:	9304      	str	r3, [sp, #16]
   dc5b2:	e081      	b.n	dc6b8 <_strtod_l+0x630>
   dc5b4:	f018 0f01 	tst.w	r8, #1
   dc5b8:	d007      	beq.n	dc5ca <_strtod_l+0x542>
   dc5ba:	4b1d      	ldr	r3, [pc, #116]	; (dc630 <_strtod_l+0x5a8>)
   dc5bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dc5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc5c4:	f7ff f8f0 	bl	db7a8 <__aeabi_dmul>
   dc5c8:	2301      	movs	r3, #1
   dc5ca:	f109 0901 	add.w	r9, r9, #1
   dc5ce:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc5d2:	e7ca      	b.n	dc56a <_strtod_l+0x4e2>
   dc5d4:	d0eb      	beq.n	dc5ae <_strtod_l+0x526>
   dc5d6:	f1c8 0800 	rsb	r8, r8, #0
   dc5da:	f018 020f 	ands.w	r2, r8, #15
   dc5de:	d00a      	beq.n	dc5f6 <_strtod_l+0x56e>
   dc5e0:	4b12      	ldr	r3, [pc, #72]	; (dc62c <_strtod_l+0x5a4>)
   dc5e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dc5e6:	4650      	mov	r0, sl
   dc5e8:	4659      	mov	r1, fp
   dc5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc5ee:	f7ff fa05 	bl	db9fc <__aeabi_ddiv>
   dc5f2:	4682      	mov	sl, r0
   dc5f4:	468b      	mov	fp, r1
   dc5f6:	ea5f 1828 	movs.w	r8, r8, asr #4
   dc5fa:	d0d8      	beq.n	dc5ae <_strtod_l+0x526>
   dc5fc:	f1b8 0f1f 	cmp.w	r8, #31
   dc600:	dd1e      	ble.n	dc640 <_strtod_l+0x5b8>
   dc602:	2500      	movs	r5, #0
   dc604:	462e      	mov	r6, r5
   dc606:	9509      	str	r5, [sp, #36]	; 0x24
   dc608:	9507      	str	r5, [sp, #28]
   dc60a:	2322      	movs	r3, #34	; 0x22
   dc60c:	f04f 0a00 	mov.w	sl, #0
   dc610:	f04f 0b00 	mov.w	fp, #0
   dc614:	6023      	str	r3, [r4, #0]
   dc616:	e789      	b.n	dc52c <_strtod_l+0x4a4>
   dc618:	000dea7a 	.word	0x000dea7a
   dc61c:	000dea94 	.word	0x000dea94
   dc620:	000dea71 	.word	0x000dea71
   dc624:	000dea74 	.word	0x000dea74
   dc628:	000de2af 	.word	0x000de2af
   dc62c:	000dec10 	.word	0x000dec10
   dc630:	000debe8 	.word	0x000debe8
   dc634:	7ff00000 	.word	0x7ff00000
   dc638:	7ca00000 	.word	0x7ca00000
   dc63c:	7fefffff 	.word	0x7fefffff
   dc640:	f018 0310 	ands.w	r3, r8, #16
   dc644:	bf18      	it	ne
   dc646:	236a      	movne	r3, #106	; 0x6a
   dc648:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dca00 <_strtod_l+0x978>
   dc64c:	9304      	str	r3, [sp, #16]
   dc64e:	4650      	mov	r0, sl
   dc650:	4659      	mov	r1, fp
   dc652:	2300      	movs	r3, #0
   dc654:	f018 0f01 	tst.w	r8, #1
   dc658:	d004      	beq.n	dc664 <_strtod_l+0x5dc>
   dc65a:	e9d9 2300 	ldrd	r2, r3, [r9]
   dc65e:	f7ff f8a3 	bl	db7a8 <__aeabi_dmul>
   dc662:	2301      	movs	r3, #1
   dc664:	ea5f 0868 	movs.w	r8, r8, asr #1
   dc668:	f109 0908 	add.w	r9, r9, #8
   dc66c:	d1f2      	bne.n	dc654 <_strtod_l+0x5cc>
   dc66e:	b10b      	cbz	r3, dc674 <_strtod_l+0x5ec>
   dc670:	4682      	mov	sl, r0
   dc672:	468b      	mov	fp, r1
   dc674:	9b04      	ldr	r3, [sp, #16]
   dc676:	b1bb      	cbz	r3, dc6a8 <_strtod_l+0x620>
   dc678:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dc67c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc680:	2b00      	cmp	r3, #0
   dc682:	4659      	mov	r1, fp
   dc684:	dd10      	ble.n	dc6a8 <_strtod_l+0x620>
   dc686:	2b1f      	cmp	r3, #31
   dc688:	f340 8128 	ble.w	dc8dc <_strtod_l+0x854>
   dc68c:	2b34      	cmp	r3, #52	; 0x34
   dc68e:	bfde      	ittt	le
   dc690:	3b20      	suble	r3, #32
   dc692:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dc696:	fa02 f303 	lslle.w	r3, r2, r3
   dc69a:	f04f 0a00 	mov.w	sl, #0
   dc69e:	bfcc      	ite	gt
   dc6a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc6a4:	ea03 0b01 	andle.w	fp, r3, r1
   dc6a8:	2200      	movs	r2, #0
   dc6aa:	2300      	movs	r3, #0
   dc6ac:	4650      	mov	r0, sl
   dc6ae:	4659      	mov	r1, fp
   dc6b0:	f7ff fae2 	bl	dbc78 <__aeabi_dcmpeq>
   dc6b4:	2800      	cmp	r0, #0
   dc6b6:	d1a4      	bne.n	dc602 <_strtod_l+0x57a>
   dc6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc6ba:	9300      	str	r3, [sp, #0]
   dc6bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc6be:	462b      	mov	r3, r5
   dc6c0:	463a      	mov	r2, r7
   dc6c2:	4620      	mov	r0, r4
   dc6c4:	f001 f82a 	bl	dd71c <__s2b>
   dc6c8:	9009      	str	r0, [sp, #36]	; 0x24
   dc6ca:	2800      	cmp	r0, #0
   dc6cc:	f43f af24 	beq.w	dc518 <_strtod_l+0x490>
   dc6d0:	9b07      	ldr	r3, [sp, #28]
   dc6d2:	1b9e      	subs	r6, r3, r6
   dc6d4:	9b08      	ldr	r3, [sp, #32]
   dc6d6:	2b00      	cmp	r3, #0
   dc6d8:	bfb4      	ite	lt
   dc6da:	4633      	movlt	r3, r6
   dc6dc:	2300      	movge	r3, #0
   dc6de:	9310      	str	r3, [sp, #64]	; 0x40
   dc6e0:	9b08      	ldr	r3, [sp, #32]
   dc6e2:	2500      	movs	r5, #0
   dc6e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc6e8:	9318      	str	r3, [sp, #96]	; 0x60
   dc6ea:	462e      	mov	r6, r5
   dc6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc6ee:	4620      	mov	r0, r4
   dc6f0:	6859      	ldr	r1, [r3, #4]
   dc6f2:	f000 ff8a 	bl	dd60a <_Balloc>
   dc6f6:	9007      	str	r0, [sp, #28]
   dc6f8:	2800      	cmp	r0, #0
   dc6fa:	f43f af11 	beq.w	dc520 <_strtod_l+0x498>
   dc6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc700:	691a      	ldr	r2, [r3, #16]
   dc702:	3202      	adds	r2, #2
   dc704:	f103 010c 	add.w	r1, r3, #12
   dc708:	0092      	lsls	r2, r2, #2
   dc70a:	300c      	adds	r0, #12
   dc70c:	f7ff fba9 	bl	dbe62 <memcpy>
   dc710:	ec4b ab10 	vmov	d0, sl, fp
   dc714:	aa20      	add	r2, sp, #128	; 0x80
   dc716:	a91f      	add	r1, sp, #124	; 0x7c
   dc718:	4620      	mov	r0, r4
   dc71a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc71e:	f001 faed 	bl	ddcfc <__d2b>
   dc722:	901e      	str	r0, [sp, #120]	; 0x78
   dc724:	2800      	cmp	r0, #0
   dc726:	f43f aefb 	beq.w	dc520 <_strtod_l+0x498>
   dc72a:	2101      	movs	r1, #1
   dc72c:	4620      	mov	r0, r4
   dc72e:	f001 f883 	bl	dd838 <__i2b>
   dc732:	4606      	mov	r6, r0
   dc734:	2800      	cmp	r0, #0
   dc736:	f43f aef3 	beq.w	dc520 <_strtod_l+0x498>
   dc73a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dc73c:	9904      	ldr	r1, [sp, #16]
   dc73e:	2b00      	cmp	r3, #0
   dc740:	bfab      	itete	ge
   dc742:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dc744:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dc746:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dc748:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dc74c:	bfac      	ite	ge
   dc74e:	eb03 0902 	addge.w	r9, r3, r2
   dc752:	1ad7      	sublt	r7, r2, r3
   dc754:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dc756:	eba3 0801 	sub.w	r8, r3, r1
   dc75a:	4490      	add	r8, r2
   dc75c:	4ba3      	ldr	r3, [pc, #652]	; (dc9ec <_strtod_l+0x964>)
   dc75e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc762:	4598      	cmp	r8, r3
   dc764:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dc768:	f280 80cc 	bge.w	dc904 <_strtod_l+0x87c>
   dc76c:	eba3 0308 	sub.w	r3, r3, r8
   dc770:	2b1f      	cmp	r3, #31
   dc772:	eba2 0203 	sub.w	r2, r2, r3
   dc776:	f04f 0101 	mov.w	r1, #1
   dc77a:	f300 80b6 	bgt.w	dc8ea <_strtod_l+0x862>
   dc77e:	fa01 f303 	lsl.w	r3, r1, r3
   dc782:	9311      	str	r3, [sp, #68]	; 0x44
   dc784:	2300      	movs	r3, #0
   dc786:	930c      	str	r3, [sp, #48]	; 0x30
   dc788:	eb09 0802 	add.w	r8, r9, r2
   dc78c:	9b04      	ldr	r3, [sp, #16]
   dc78e:	45c1      	cmp	r9, r8
   dc790:	4417      	add	r7, r2
   dc792:	441f      	add	r7, r3
   dc794:	464b      	mov	r3, r9
   dc796:	bfa8      	it	ge
   dc798:	4643      	movge	r3, r8
   dc79a:	42bb      	cmp	r3, r7
   dc79c:	bfa8      	it	ge
   dc79e:	463b      	movge	r3, r7
   dc7a0:	2b00      	cmp	r3, #0
   dc7a2:	bfc2      	ittt	gt
   dc7a4:	eba8 0803 	subgt.w	r8, r8, r3
   dc7a8:	1aff      	subgt	r7, r7, r3
   dc7aa:	eba9 0903 	subgt.w	r9, r9, r3
   dc7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc7b0:	2b00      	cmp	r3, #0
   dc7b2:	dd17      	ble.n	dc7e4 <_strtod_l+0x75c>
   dc7b4:	4631      	mov	r1, r6
   dc7b6:	461a      	mov	r2, r3
   dc7b8:	4620      	mov	r0, r4
   dc7ba:	f001 f8e3 	bl	dd984 <__pow5mult>
   dc7be:	4606      	mov	r6, r0
   dc7c0:	2800      	cmp	r0, #0
   dc7c2:	f43f aead 	beq.w	dc520 <_strtod_l+0x498>
   dc7c6:	4601      	mov	r1, r0
   dc7c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc7ca:	4620      	mov	r0, r4
   dc7cc:	f001 f83d 	bl	dd84a <__multiply>
   dc7d0:	900f      	str	r0, [sp, #60]	; 0x3c
   dc7d2:	2800      	cmp	r0, #0
   dc7d4:	f43f aea4 	beq.w	dc520 <_strtod_l+0x498>
   dc7d8:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc7da:	4620      	mov	r0, r4
   dc7dc:	f000 ff49 	bl	dd672 <_Bfree>
   dc7e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc7e2:	931e      	str	r3, [sp, #120]	; 0x78
   dc7e4:	f1b8 0f00 	cmp.w	r8, #0
   dc7e8:	f300 8091 	bgt.w	dc90e <_strtod_l+0x886>
   dc7ec:	9b08      	ldr	r3, [sp, #32]
   dc7ee:	2b00      	cmp	r3, #0
   dc7f0:	dd08      	ble.n	dc804 <_strtod_l+0x77c>
   dc7f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc7f4:	9907      	ldr	r1, [sp, #28]
   dc7f6:	4620      	mov	r0, r4
   dc7f8:	f001 f8c4 	bl	dd984 <__pow5mult>
   dc7fc:	9007      	str	r0, [sp, #28]
   dc7fe:	2800      	cmp	r0, #0
   dc800:	f43f ae8e 	beq.w	dc520 <_strtod_l+0x498>
   dc804:	2f00      	cmp	r7, #0
   dc806:	dd08      	ble.n	dc81a <_strtod_l+0x792>
   dc808:	9907      	ldr	r1, [sp, #28]
   dc80a:	463a      	mov	r2, r7
   dc80c:	4620      	mov	r0, r4
   dc80e:	f001 f907 	bl	dda20 <__lshift>
   dc812:	9007      	str	r0, [sp, #28]
   dc814:	2800      	cmp	r0, #0
   dc816:	f43f ae83 	beq.w	dc520 <_strtod_l+0x498>
   dc81a:	f1b9 0f00 	cmp.w	r9, #0
   dc81e:	dd08      	ble.n	dc832 <_strtod_l+0x7aa>
   dc820:	4631      	mov	r1, r6
   dc822:	464a      	mov	r2, r9
   dc824:	4620      	mov	r0, r4
   dc826:	f001 f8fb 	bl	dda20 <__lshift>
   dc82a:	4606      	mov	r6, r0
   dc82c:	2800      	cmp	r0, #0
   dc82e:	f43f ae77 	beq.w	dc520 <_strtod_l+0x498>
   dc832:	9a07      	ldr	r2, [sp, #28]
   dc834:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc836:	4620      	mov	r0, r4
   dc838:	f001 f96d 	bl	ddb16 <__mdiff>
   dc83c:	4605      	mov	r5, r0
   dc83e:	2800      	cmp	r0, #0
   dc840:	f43f ae6e 	beq.w	dc520 <_strtod_l+0x498>
   dc844:	68c3      	ldr	r3, [r0, #12]
   dc846:	930f      	str	r3, [sp, #60]	; 0x3c
   dc848:	2300      	movs	r3, #0
   dc84a:	60c3      	str	r3, [r0, #12]
   dc84c:	4631      	mov	r1, r6
   dc84e:	f001 f946 	bl	ddade <__mcmp>
   dc852:	2800      	cmp	r0, #0
   dc854:	da65      	bge.n	dc922 <_strtod_l+0x89a>
   dc856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc858:	ea53 030a 	orrs.w	r3, r3, sl
   dc85c:	f040 8087 	bne.w	dc96e <_strtod_l+0x8e6>
   dc860:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc864:	2b00      	cmp	r3, #0
   dc866:	f040 8082 	bne.w	dc96e <_strtod_l+0x8e6>
   dc86a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc86e:	0d1b      	lsrs	r3, r3, #20
   dc870:	051b      	lsls	r3, r3, #20
   dc872:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dc876:	d97a      	bls.n	dc96e <_strtod_l+0x8e6>
   dc878:	696b      	ldr	r3, [r5, #20]
   dc87a:	b913      	cbnz	r3, dc882 <_strtod_l+0x7fa>
   dc87c:	692b      	ldr	r3, [r5, #16]
   dc87e:	2b01      	cmp	r3, #1
   dc880:	dd75      	ble.n	dc96e <_strtod_l+0x8e6>
   dc882:	4629      	mov	r1, r5
   dc884:	2201      	movs	r2, #1
   dc886:	4620      	mov	r0, r4
   dc888:	f001 f8ca 	bl	dda20 <__lshift>
   dc88c:	4631      	mov	r1, r6
   dc88e:	4605      	mov	r5, r0
   dc890:	f001 f925 	bl	ddade <__mcmp>
   dc894:	2800      	cmp	r0, #0
   dc896:	dd6a      	ble.n	dc96e <_strtod_l+0x8e6>
   dc898:	9904      	ldr	r1, [sp, #16]
   dc89a:	4a55      	ldr	r2, [pc, #340]	; (dc9f0 <_strtod_l+0x968>)
   dc89c:	465b      	mov	r3, fp
   dc89e:	2900      	cmp	r1, #0
   dc8a0:	f000 8085 	beq.w	dc9ae <_strtod_l+0x926>
   dc8a4:	ea02 010b 	and.w	r1, r2, fp
   dc8a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dc8ac:	dc7f      	bgt.n	dc9ae <_strtod_l+0x926>
   dc8ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dc8b2:	f77f aeaa 	ble.w	dc60a <_strtod_l+0x582>
   dc8b6:	4a4f      	ldr	r2, [pc, #316]	; (dc9f4 <_strtod_l+0x96c>)
   dc8b8:	2300      	movs	r3, #0
   dc8ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dc8be:	4650      	mov	r0, sl
   dc8c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dc8c4:	4659      	mov	r1, fp
   dc8c6:	f7fe ff6f 	bl	db7a8 <__aeabi_dmul>
   dc8ca:	460b      	mov	r3, r1
   dc8cc:	4303      	orrs	r3, r0
   dc8ce:	bf08      	it	eq
   dc8d0:	2322      	moveq	r3, #34	; 0x22
   dc8d2:	4682      	mov	sl, r0
   dc8d4:	468b      	mov	fp, r1
   dc8d6:	bf08      	it	eq
   dc8d8:	6023      	streq	r3, [r4, #0]
   dc8da:	e62b      	b.n	dc534 <_strtod_l+0x4ac>
   dc8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc8e0:	fa02 f303 	lsl.w	r3, r2, r3
   dc8e4:	ea03 0a0a 	and.w	sl, r3, sl
   dc8e8:	e6de      	b.n	dc6a8 <_strtod_l+0x620>
   dc8ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dc8ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dc8f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dc8f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dc8fa:	fa01 f308 	lsl.w	r3, r1, r8
   dc8fe:	930c      	str	r3, [sp, #48]	; 0x30
   dc900:	9111      	str	r1, [sp, #68]	; 0x44
   dc902:	e741      	b.n	dc788 <_strtod_l+0x700>
   dc904:	2300      	movs	r3, #0
   dc906:	930c      	str	r3, [sp, #48]	; 0x30
   dc908:	2301      	movs	r3, #1
   dc90a:	9311      	str	r3, [sp, #68]	; 0x44
   dc90c:	e73c      	b.n	dc788 <_strtod_l+0x700>
   dc90e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc910:	4642      	mov	r2, r8
   dc912:	4620      	mov	r0, r4
   dc914:	f001 f884 	bl	dda20 <__lshift>
   dc918:	901e      	str	r0, [sp, #120]	; 0x78
   dc91a:	2800      	cmp	r0, #0
   dc91c:	f47f af66 	bne.w	dc7ec <_strtod_l+0x764>
   dc920:	e5fe      	b.n	dc520 <_strtod_l+0x498>
   dc922:	465f      	mov	r7, fp
   dc924:	d16e      	bne.n	dca04 <_strtod_l+0x97c>
   dc926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc928:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc92c:	b342      	cbz	r2, dc980 <_strtod_l+0x8f8>
   dc92e:	4a32      	ldr	r2, [pc, #200]	; (dc9f8 <_strtod_l+0x970>)
   dc930:	4293      	cmp	r3, r2
   dc932:	d128      	bne.n	dc986 <_strtod_l+0x8fe>
   dc934:	9b04      	ldr	r3, [sp, #16]
   dc936:	4650      	mov	r0, sl
   dc938:	b1eb      	cbz	r3, dc976 <_strtod_l+0x8ee>
   dc93a:	4a2d      	ldr	r2, [pc, #180]	; (dc9f0 <_strtod_l+0x968>)
   dc93c:	403a      	ands	r2, r7
   dc93e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc946:	d819      	bhi.n	dc97c <_strtod_l+0x8f4>
   dc948:	0d12      	lsrs	r2, r2, #20
   dc94a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc94e:	fa01 f303 	lsl.w	r3, r1, r3
   dc952:	4298      	cmp	r0, r3
   dc954:	d117      	bne.n	dc986 <_strtod_l+0x8fe>
   dc956:	4b29      	ldr	r3, [pc, #164]	; (dc9fc <_strtod_l+0x974>)
   dc958:	429f      	cmp	r7, r3
   dc95a:	d102      	bne.n	dc962 <_strtod_l+0x8da>
   dc95c:	3001      	adds	r0, #1
   dc95e:	f43f addf 	beq.w	dc520 <_strtod_l+0x498>
   dc962:	4b23      	ldr	r3, [pc, #140]	; (dc9f0 <_strtod_l+0x968>)
   dc964:	403b      	ands	r3, r7
   dc966:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc96a:	f04f 0a00 	mov.w	sl, #0
   dc96e:	9b04      	ldr	r3, [sp, #16]
   dc970:	2b00      	cmp	r3, #0
   dc972:	d1a0      	bne.n	dc8b6 <_strtod_l+0x82e>
   dc974:	e5de      	b.n	dc534 <_strtod_l+0x4ac>
   dc976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc97a:	e7ea      	b.n	dc952 <_strtod_l+0x8ca>
   dc97c:	460b      	mov	r3, r1
   dc97e:	e7e8      	b.n	dc952 <_strtod_l+0x8ca>
   dc980:	ea53 030a 	orrs.w	r3, r3, sl
   dc984:	d088      	beq.n	dc898 <_strtod_l+0x810>
   dc986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc988:	b1db      	cbz	r3, dc9c2 <_strtod_l+0x93a>
   dc98a:	423b      	tst	r3, r7
   dc98c:	d0ef      	beq.n	dc96e <_strtod_l+0x8e6>
   dc98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc990:	9a04      	ldr	r2, [sp, #16]
   dc992:	4650      	mov	r0, sl
   dc994:	4659      	mov	r1, fp
   dc996:	b1c3      	cbz	r3, dc9ca <_strtod_l+0x942>
   dc998:	f7ff fb57 	bl	dc04a <sulp>
   dc99c:	4602      	mov	r2, r0
   dc99e:	460b      	mov	r3, r1
   dc9a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc9a4:	f7fe fd4a 	bl	db43c <__adddf3>
   dc9a8:	4682      	mov	sl, r0
   dc9aa:	468b      	mov	fp, r1
   dc9ac:	e7df      	b.n	dc96e <_strtod_l+0x8e6>
   dc9ae:	4013      	ands	r3, r2
   dc9b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc9b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc9b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc9bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc9c0:	e7d5      	b.n	dc96e <_strtod_l+0x8e6>
   dc9c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc9c4:	ea13 0f0a 	tst.w	r3, sl
   dc9c8:	e7e0      	b.n	dc98c <_strtod_l+0x904>
   dc9ca:	f7ff fb3e 	bl	dc04a <sulp>
   dc9ce:	4602      	mov	r2, r0
   dc9d0:	460b      	mov	r3, r1
   dc9d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc9d6:	f7fe fd2f 	bl	db438 <__aeabi_dsub>
   dc9da:	2200      	movs	r2, #0
   dc9dc:	2300      	movs	r3, #0
   dc9de:	4682      	mov	sl, r0
   dc9e0:	468b      	mov	fp, r1
   dc9e2:	f7ff f949 	bl	dbc78 <__aeabi_dcmpeq>
   dc9e6:	2800      	cmp	r0, #0
   dc9e8:	d0c1      	beq.n	dc96e <_strtod_l+0x8e6>
   dc9ea:	e60e      	b.n	dc60a <_strtod_l+0x582>
   dc9ec:	fffffc02 	.word	0xfffffc02
   dc9f0:	7ff00000 	.word	0x7ff00000
   dc9f4:	39500000 	.word	0x39500000
   dc9f8:	000fffff 	.word	0x000fffff
   dc9fc:	7fefffff 	.word	0x7fefffff
   dca00:	000deaa8 	.word	0x000deaa8
   dca04:	4631      	mov	r1, r6
   dca06:	4628      	mov	r0, r5
   dca08:	f001 f9c8 	bl	ddd9c <__ratio>
   dca0c:	ec59 8b10 	vmov	r8, r9, d0
   dca10:	ee10 0a10 	vmov	r0, s0
   dca14:	2200      	movs	r2, #0
   dca16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dca1a:	4649      	mov	r1, r9
   dca1c:	f7ff f940 	bl	dbca0 <__aeabi_dcmple>
   dca20:	2800      	cmp	r0, #0
   dca22:	d07c      	beq.n	dcb1e <_strtod_l+0xa96>
   dca24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dca26:	2b00      	cmp	r3, #0
   dca28:	d04c      	beq.n	dcac4 <_strtod_l+0xa3c>
   dca2a:	4b95      	ldr	r3, [pc, #596]	; (dcc80 <_strtod_l+0xbf8>)
   dca2c:	2200      	movs	r2, #0
   dca2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dca32:	f8df 924c 	ldr.w	r9, [pc, #588]	; dcc80 <_strtod_l+0xbf8>
   dca36:	f04f 0800 	mov.w	r8, #0
   dca3a:	4b92      	ldr	r3, [pc, #584]	; (dcc84 <_strtod_l+0xbfc>)
   dca3c:	403b      	ands	r3, r7
   dca3e:	9311      	str	r3, [sp, #68]	; 0x44
   dca40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dca42:	4b91      	ldr	r3, [pc, #580]	; (dcc88 <_strtod_l+0xc00>)
   dca44:	429a      	cmp	r2, r3
   dca46:	f040 80b2 	bne.w	dcbae <_strtod_l+0xb26>
   dca4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dca4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dca52:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dca56:	ec4b ab10 	vmov	d0, sl, fp
   dca5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dca5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dca62:	f001 f8cf 	bl	ddc04 <__ulp>
   dca66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dca6a:	ec53 2b10 	vmov	r2, r3, d0
   dca6e:	f7fe fe9b 	bl	db7a8 <__aeabi_dmul>
   dca72:	4652      	mov	r2, sl
   dca74:	465b      	mov	r3, fp
   dca76:	f7fe fce1 	bl	db43c <__adddf3>
   dca7a:	460b      	mov	r3, r1
   dca7c:	4981      	ldr	r1, [pc, #516]	; (dcc84 <_strtod_l+0xbfc>)
   dca7e:	4a83      	ldr	r2, [pc, #524]	; (dcc8c <_strtod_l+0xc04>)
   dca80:	4019      	ands	r1, r3
   dca82:	4291      	cmp	r1, r2
   dca84:	4682      	mov	sl, r0
   dca86:	d95e      	bls.n	dcb46 <_strtod_l+0xabe>
   dca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dca8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dca8e:	4293      	cmp	r3, r2
   dca90:	d103      	bne.n	dca9a <_strtod_l+0xa12>
   dca92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dca94:	3301      	adds	r3, #1
   dca96:	f43f ad43 	beq.w	dc520 <_strtod_l+0x498>
   dca9a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dcc98 <_strtod_l+0xc10>
   dca9e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dcaa2:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcaa4:	4620      	mov	r0, r4
   dcaa6:	f000 fde4 	bl	dd672 <_Bfree>
   dcaaa:	9907      	ldr	r1, [sp, #28]
   dcaac:	4620      	mov	r0, r4
   dcaae:	f000 fde0 	bl	dd672 <_Bfree>
   dcab2:	4631      	mov	r1, r6
   dcab4:	4620      	mov	r0, r4
   dcab6:	f000 fddc 	bl	dd672 <_Bfree>
   dcaba:	4629      	mov	r1, r5
   dcabc:	4620      	mov	r0, r4
   dcabe:	f000 fdd8 	bl	dd672 <_Bfree>
   dcac2:	e613      	b.n	dc6ec <_strtod_l+0x664>
   dcac4:	f1ba 0f00 	cmp.w	sl, #0
   dcac8:	d11b      	bne.n	dcb02 <_strtod_l+0xa7a>
   dcaca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcace:	b9f3      	cbnz	r3, dcb0e <_strtod_l+0xa86>
   dcad0:	4b6b      	ldr	r3, [pc, #428]	; (dcc80 <_strtod_l+0xbf8>)
   dcad2:	2200      	movs	r2, #0
   dcad4:	4640      	mov	r0, r8
   dcad6:	4649      	mov	r1, r9
   dcad8:	f7ff f8d8 	bl	dbc8c <__aeabi_dcmplt>
   dcadc:	b9d0      	cbnz	r0, dcb14 <_strtod_l+0xa8c>
   dcade:	4640      	mov	r0, r8
   dcae0:	4649      	mov	r1, r9
   dcae2:	4b6b      	ldr	r3, [pc, #428]	; (dcc90 <_strtod_l+0xc08>)
   dcae4:	2200      	movs	r2, #0
   dcae6:	f7fe fe5f 	bl	db7a8 <__aeabi_dmul>
   dcaea:	4680      	mov	r8, r0
   dcaec:	4689      	mov	r9, r1
   dcaee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dcaf2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dcaf6:	931b      	str	r3, [sp, #108]	; 0x6c
   dcaf8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dcafc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dcb00:	e79b      	b.n	dca3a <_strtod_l+0x9b2>
   dcb02:	f1ba 0f01 	cmp.w	sl, #1
   dcb06:	d102      	bne.n	dcb0e <_strtod_l+0xa86>
   dcb08:	2f00      	cmp	r7, #0
   dcb0a:	f43f ad7e 	beq.w	dc60a <_strtod_l+0x582>
   dcb0e:	4b61      	ldr	r3, [pc, #388]	; (dcc94 <_strtod_l+0xc0c>)
   dcb10:	2200      	movs	r2, #0
   dcb12:	e78c      	b.n	dca2e <_strtod_l+0x9a6>
   dcb14:	f8df 9178 	ldr.w	r9, [pc, #376]	; dcc90 <_strtod_l+0xc08>
   dcb18:	f04f 0800 	mov.w	r8, #0
   dcb1c:	e7e7      	b.n	dcaee <_strtod_l+0xa66>
   dcb1e:	4b5c      	ldr	r3, [pc, #368]	; (dcc90 <_strtod_l+0xc08>)
   dcb20:	4640      	mov	r0, r8
   dcb22:	4649      	mov	r1, r9
   dcb24:	2200      	movs	r2, #0
   dcb26:	f7fe fe3f 	bl	db7a8 <__aeabi_dmul>
   dcb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dcb2c:	4680      	mov	r8, r0
   dcb2e:	4689      	mov	r9, r1
   dcb30:	b933      	cbnz	r3, dcb40 <_strtod_l+0xab8>
   dcb32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dcb36:	9012      	str	r0, [sp, #72]	; 0x48
   dcb38:	9313      	str	r3, [sp, #76]	; 0x4c
   dcb3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dcb3e:	e7dd      	b.n	dcafc <_strtod_l+0xa74>
   dcb40:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dcb44:	e7f9      	b.n	dcb3a <_strtod_l+0xab2>
   dcb46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dcb4a:	9b04      	ldr	r3, [sp, #16]
   dcb4c:	2b00      	cmp	r3, #0
   dcb4e:	d1a8      	bne.n	dcaa2 <_strtod_l+0xa1a>
   dcb50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dcb54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dcb56:	0d1b      	lsrs	r3, r3, #20
   dcb58:	051b      	lsls	r3, r3, #20
   dcb5a:	429a      	cmp	r2, r3
   dcb5c:	d1a1      	bne.n	dcaa2 <_strtod_l+0xa1a>
   dcb5e:	4640      	mov	r0, r8
   dcb60:	4649      	mov	r1, r9
   dcb62:	f001 f9af 	bl	ddec4 <__aeabi_d2lz>
   dcb66:	f7fe fdf1 	bl	db74c <__aeabi_l2d>
   dcb6a:	4602      	mov	r2, r0
   dcb6c:	460b      	mov	r3, r1
   dcb6e:	4640      	mov	r0, r8
   dcb70:	4649      	mov	r1, r9
   dcb72:	f7fe fc61 	bl	db438 <__aeabi_dsub>
   dcb76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dcb78:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcb7c:	ea43 030a 	orr.w	r3, r3, sl
   dcb80:	4313      	orrs	r3, r2
   dcb82:	4680      	mov	r8, r0
   dcb84:	4689      	mov	r9, r1
   dcb86:	d053      	beq.n	dcc30 <_strtod_l+0xba8>
   dcb88:	a335      	add	r3, pc, #212	; (adr r3, dcc60 <_strtod_l+0xbd8>)
   dcb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb8e:	f7ff f87d 	bl	dbc8c <__aeabi_dcmplt>
   dcb92:	2800      	cmp	r0, #0
   dcb94:	f47f acce 	bne.w	dc534 <_strtod_l+0x4ac>
   dcb98:	a333      	add	r3, pc, #204	; (adr r3, dcc68 <_strtod_l+0xbe0>)
   dcb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb9e:	4640      	mov	r0, r8
   dcba0:	4649      	mov	r1, r9
   dcba2:	f7ff f891 	bl	dbcc8 <__aeabi_dcmpgt>
   dcba6:	2800      	cmp	r0, #0
   dcba8:	f43f af7b 	beq.w	dcaa2 <_strtod_l+0xa1a>
   dcbac:	e4c2      	b.n	dc534 <_strtod_l+0x4ac>
   dcbae:	9b04      	ldr	r3, [sp, #16]
   dcbb0:	b333      	cbz	r3, dcc00 <_strtod_l+0xb78>
   dcbb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dcbb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dcbb8:	d822      	bhi.n	dcc00 <_strtod_l+0xb78>
   dcbba:	a32d      	add	r3, pc, #180	; (adr r3, dcc70 <_strtod_l+0xbe8>)
   dcbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbc0:	4640      	mov	r0, r8
   dcbc2:	4649      	mov	r1, r9
   dcbc4:	f7ff f86c 	bl	dbca0 <__aeabi_dcmple>
   dcbc8:	b1a0      	cbz	r0, dcbf4 <_strtod_l+0xb6c>
   dcbca:	4649      	mov	r1, r9
   dcbcc:	4640      	mov	r0, r8
   dcbce:	f7ff f8ad 	bl	dbd2c <__aeabi_d2uiz>
   dcbd2:	2801      	cmp	r0, #1
   dcbd4:	bf38      	it	cc
   dcbd6:	2001      	movcc	r0, #1
   dcbd8:	f7fe fd6c 	bl	db6b4 <__aeabi_ui2d>
   dcbdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dcbde:	4680      	mov	r8, r0
   dcbe0:	4689      	mov	r9, r1
   dcbe2:	bb13      	cbnz	r3, dcc2a <_strtod_l+0xba2>
   dcbe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dcbe8:	9014      	str	r0, [sp, #80]	; 0x50
   dcbea:	9315      	str	r3, [sp, #84]	; 0x54
   dcbec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dcbf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dcbf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dcbf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dcbf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dcbfc:	1a9b      	subs	r3, r3, r2
   dcbfe:	930d      	str	r3, [sp, #52]	; 0x34
   dcc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dcc04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dcc08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dcc0c:	f000 fffa 	bl	ddc04 <__ulp>
   dcc10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dcc14:	ec53 2b10 	vmov	r2, r3, d0
   dcc18:	f7fe fdc6 	bl	db7a8 <__aeabi_dmul>
   dcc1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dcc20:	f7fe fc0c 	bl	db43c <__adddf3>
   dcc24:	4682      	mov	sl, r0
   dcc26:	468b      	mov	fp, r1
   dcc28:	e78f      	b.n	dcb4a <_strtod_l+0xac2>
   dcc2a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dcc2e:	e7dd      	b.n	dcbec <_strtod_l+0xb64>
   dcc30:	a311      	add	r3, pc, #68	; (adr r3, dcc78 <_strtod_l+0xbf0>)
   dcc32:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcc36:	f7ff f829 	bl	dbc8c <__aeabi_dcmplt>
   dcc3a:	e7b4      	b.n	dcba6 <_strtod_l+0xb1e>
   dcc3c:	2300      	movs	r3, #0
   dcc3e:	930e      	str	r3, [sp, #56]	; 0x38
   dcc40:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dcc42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc44:	6013      	str	r3, [r2, #0]
   dcc46:	f7ff ba65 	b.w	dc114 <_strtod_l+0x8c>
   dcc4a:	2b65      	cmp	r3, #101	; 0x65
   dcc4c:	f43f ab5d 	beq.w	dc30a <_strtod_l+0x282>
   dcc50:	2b45      	cmp	r3, #69	; 0x45
   dcc52:	f43f ab5a 	beq.w	dc30a <_strtod_l+0x282>
   dcc56:	2201      	movs	r2, #1
   dcc58:	f7ff bb92 	b.w	dc380 <_strtod_l+0x2f8>
   dcc5c:	f3af 8000 	nop.w
   dcc60:	94a03595 	.word	0x94a03595
   dcc64:	3fdfffff 	.word	0x3fdfffff
   dcc68:	35afe535 	.word	0x35afe535
   dcc6c:	3fe00000 	.word	0x3fe00000
   dcc70:	ffc00000 	.word	0xffc00000
   dcc74:	41dfffff 	.word	0x41dfffff
   dcc78:	94a03595 	.word	0x94a03595
   dcc7c:	3fcfffff 	.word	0x3fcfffff
   dcc80:	3ff00000 	.word	0x3ff00000
   dcc84:	7ff00000 	.word	0x7ff00000
   dcc88:	7fe00000 	.word	0x7fe00000
   dcc8c:	7c9fffff 	.word	0x7c9fffff
   dcc90:	3fe00000 	.word	0x3fe00000
   dcc94:	bff00000 	.word	0xbff00000
   dcc98:	7fefffff 	.word	0x7fefffff

000dcc9c <strtod>:
   dcc9c:	460a      	mov	r2, r1
   dcc9e:	4601      	mov	r1, r0
   dcca0:	4802      	ldr	r0, [pc, #8]	; (dccac <strtod+0x10>)
   dcca2:	4b03      	ldr	r3, [pc, #12]	; (dccb0 <strtod+0x14>)
   dcca4:	6800      	ldr	r0, [r0, #0]
   dcca6:	f7ff b9ef 	b.w	dc088 <_strtod_l>
   dccaa:	bf00      	nop
   dccac:	2003e028 	.word	0x2003e028
   dccb0:	2003e094 	.word	0x2003e094

000dccb4 <strtok>:
   dccb4:	4b13      	ldr	r3, [pc, #76]	; (dcd04 <strtok+0x50>)
   dccb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dccb8:	681e      	ldr	r6, [r3, #0]
   dccba:	6db4      	ldr	r4, [r6, #88]	; 0x58
   dccbc:	4605      	mov	r5, r0
   dccbe:	b9c4      	cbnz	r4, dccf2 <strtok+0x3e>
   dccc0:	2050      	movs	r0, #80	; 0x50
   dccc2:	9101      	str	r1, [sp, #4]
   dccc4:	f7fa fe6a 	bl	d799c <malloc>
   dccc8:	65b0      	str	r0, [r6, #88]	; 0x58
   dccca:	e9c0 4400 	strd	r4, r4, [r0]
   dccce:	e9c0 4402 	strd	r4, r4, [r0, #8]
   dccd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   dccd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   dccda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   dccde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   dcce2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   dcce6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   dccea:	9901      	ldr	r1, [sp, #4]
   dccec:	6184      	str	r4, [r0, #24]
   dccee:	7704      	strb	r4, [r0, #28]
   dccf0:	6244      	str	r4, [r0, #36]	; 0x24
   dccf2:	6db2      	ldr	r2, [r6, #88]	; 0x58
   dccf4:	2301      	movs	r3, #1
   dccf6:	4628      	mov	r0, r5
   dccf8:	b002      	add	sp, #8
   dccfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dccfe:	f000 b803 	b.w	dcd08 <__strtok_r>
   dcd02:	bf00      	nop
   dcd04:	2003e028 	.word	0x2003e028

000dcd08 <__strtok_r>:
   dcd08:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcd0a:	b908      	cbnz	r0, dcd10 <__strtok_r+0x8>
   dcd0c:	6810      	ldr	r0, [r2, #0]
   dcd0e:	b188      	cbz	r0, dcd34 <__strtok_r+0x2c>
   dcd10:	4604      	mov	r4, r0
   dcd12:	4620      	mov	r0, r4
   dcd14:	f814 5b01 	ldrb.w	r5, [r4], #1
   dcd18:	460f      	mov	r7, r1
   dcd1a:	f817 6b01 	ldrb.w	r6, [r7], #1
   dcd1e:	b91e      	cbnz	r6, dcd28 <__strtok_r+0x20>
   dcd20:	b965      	cbnz	r5, dcd3c <__strtok_r+0x34>
   dcd22:	6015      	str	r5, [r2, #0]
   dcd24:	4628      	mov	r0, r5
   dcd26:	e005      	b.n	dcd34 <__strtok_r+0x2c>
   dcd28:	42b5      	cmp	r5, r6
   dcd2a:	d1f6      	bne.n	dcd1a <__strtok_r+0x12>
   dcd2c:	2b00      	cmp	r3, #0
   dcd2e:	d1f0      	bne.n	dcd12 <__strtok_r+0xa>
   dcd30:	6014      	str	r4, [r2, #0]
   dcd32:	7003      	strb	r3, [r0, #0]
   dcd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcd36:	461c      	mov	r4, r3
   dcd38:	e00c      	b.n	dcd54 <__strtok_r+0x4c>
   dcd3a:	b915      	cbnz	r5, dcd42 <__strtok_r+0x3a>
   dcd3c:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcd40:	460e      	mov	r6, r1
   dcd42:	f816 5b01 	ldrb.w	r5, [r6], #1
   dcd46:	42ab      	cmp	r3, r5
   dcd48:	d1f7      	bne.n	dcd3a <__strtok_r+0x32>
   dcd4a:	2b00      	cmp	r3, #0
   dcd4c:	d0f3      	beq.n	dcd36 <__strtok_r+0x2e>
   dcd4e:	2300      	movs	r3, #0
   dcd50:	f804 3c01 	strb.w	r3, [r4, #-1]
   dcd54:	6014      	str	r4, [r2, #0]
   dcd56:	e7ed      	b.n	dcd34 <__strtok_r+0x2c>

000dcd58 <_strtol_l.isra.0>:
   dcd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcd5c:	4e3a      	ldr	r6, [pc, #232]	; (dce48 <_strtol_l.isra.0+0xf0>)
   dcd5e:	4686      	mov	lr, r0
   dcd60:	468c      	mov	ip, r1
   dcd62:	4660      	mov	r0, ip
   dcd64:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcd68:	5da5      	ldrb	r5, [r4, r6]
   dcd6a:	f015 0508 	ands.w	r5, r5, #8
   dcd6e:	d1f8      	bne.n	dcd62 <_strtol_l.isra.0+0xa>
   dcd70:	2c2d      	cmp	r4, #45	; 0x2d
   dcd72:	d133      	bne.n	dcddc <_strtol_l.isra.0+0x84>
   dcd74:	f89c 4000 	ldrb.w	r4, [ip]
   dcd78:	f04f 0801 	mov.w	r8, #1
   dcd7c:	f100 0c02 	add.w	ip, r0, #2
   dcd80:	2b00      	cmp	r3, #0
   dcd82:	d05c      	beq.n	dce3e <_strtol_l.isra.0+0xe6>
   dcd84:	2b10      	cmp	r3, #16
   dcd86:	d10c      	bne.n	dcda2 <_strtol_l.isra.0+0x4a>
   dcd88:	2c30      	cmp	r4, #48	; 0x30
   dcd8a:	d10a      	bne.n	dcda2 <_strtol_l.isra.0+0x4a>
   dcd8c:	f89c 0000 	ldrb.w	r0, [ip]
   dcd90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dcd94:	2858      	cmp	r0, #88	; 0x58
   dcd96:	d14d      	bne.n	dce34 <_strtol_l.isra.0+0xdc>
   dcd98:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dcd9c:	2310      	movs	r3, #16
   dcd9e:	f10c 0c02 	add.w	ip, ip, #2
   dcda2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dcda6:	3f01      	subs	r7, #1
   dcda8:	2600      	movs	r6, #0
   dcdaa:	fbb7 f9f3 	udiv	r9, r7, r3
   dcdae:	4630      	mov	r0, r6
   dcdb0:	fb03 7a19 	mls	sl, r3, r9, r7
   dcdb4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dcdb8:	2d09      	cmp	r5, #9
   dcdba:	d818      	bhi.n	dcdee <_strtol_l.isra.0+0x96>
   dcdbc:	462c      	mov	r4, r5
   dcdbe:	42a3      	cmp	r3, r4
   dcdc0:	dd24      	ble.n	dce0c <_strtol_l.isra.0+0xb4>
   dcdc2:	1c75      	adds	r5, r6, #1
   dcdc4:	d007      	beq.n	dcdd6 <_strtol_l.isra.0+0x7e>
   dcdc6:	4581      	cmp	r9, r0
   dcdc8:	d31d      	bcc.n	dce06 <_strtol_l.isra.0+0xae>
   dcdca:	d101      	bne.n	dcdd0 <_strtol_l.isra.0+0x78>
   dcdcc:	45a2      	cmp	sl, r4
   dcdce:	db1a      	blt.n	dce06 <_strtol_l.isra.0+0xae>
   dcdd0:	fb00 4003 	mla	r0, r0, r3, r4
   dcdd4:	2601      	movs	r6, #1
   dcdd6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcdda:	e7eb      	b.n	dcdb4 <_strtol_l.isra.0+0x5c>
   dcddc:	2c2b      	cmp	r4, #43	; 0x2b
   dcdde:	bf08      	it	eq
   dcde0:	f89c 4000 	ldrbeq.w	r4, [ip]
   dcde4:	46a8      	mov	r8, r5
   dcde6:	bf08      	it	eq
   dcde8:	f100 0c02 	addeq.w	ip, r0, #2
   dcdec:	e7c8      	b.n	dcd80 <_strtol_l.isra.0+0x28>
   dcdee:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dcdf2:	2d19      	cmp	r5, #25
   dcdf4:	d801      	bhi.n	dcdfa <_strtol_l.isra.0+0xa2>
   dcdf6:	3c37      	subs	r4, #55	; 0x37
   dcdf8:	e7e1      	b.n	dcdbe <_strtol_l.isra.0+0x66>
   dcdfa:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dcdfe:	2d19      	cmp	r5, #25
   dce00:	d804      	bhi.n	dce0c <_strtol_l.isra.0+0xb4>
   dce02:	3c57      	subs	r4, #87	; 0x57
   dce04:	e7db      	b.n	dcdbe <_strtol_l.isra.0+0x66>
   dce06:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dce0a:	e7e4      	b.n	dcdd6 <_strtol_l.isra.0+0x7e>
   dce0c:	1c73      	adds	r3, r6, #1
   dce0e:	d106      	bne.n	dce1e <_strtol_l.isra.0+0xc6>
   dce10:	2322      	movs	r3, #34	; 0x22
   dce12:	f8ce 3000 	str.w	r3, [lr]
   dce16:	4638      	mov	r0, r7
   dce18:	b942      	cbnz	r2, dce2c <_strtol_l.isra.0+0xd4>
   dce1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dce1e:	f1b8 0f00 	cmp.w	r8, #0
   dce22:	d000      	beq.n	dce26 <_strtol_l.isra.0+0xce>
   dce24:	4240      	negs	r0, r0
   dce26:	2a00      	cmp	r2, #0
   dce28:	d0f7      	beq.n	dce1a <_strtol_l.isra.0+0xc2>
   dce2a:	b10e      	cbz	r6, dce30 <_strtol_l.isra.0+0xd8>
   dce2c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dce30:	6011      	str	r1, [r2, #0]
   dce32:	e7f2      	b.n	dce1a <_strtol_l.isra.0+0xc2>
   dce34:	2430      	movs	r4, #48	; 0x30
   dce36:	2b00      	cmp	r3, #0
   dce38:	d1b3      	bne.n	dcda2 <_strtol_l.isra.0+0x4a>
   dce3a:	2308      	movs	r3, #8
   dce3c:	e7b1      	b.n	dcda2 <_strtol_l.isra.0+0x4a>
   dce3e:	2c30      	cmp	r4, #48	; 0x30
   dce40:	d0a4      	beq.n	dcd8c <_strtol_l.isra.0+0x34>
   dce42:	230a      	movs	r3, #10
   dce44:	e7ad      	b.n	dcda2 <_strtol_l.isra.0+0x4a>
   dce46:	bf00      	nop
   dce48:	000dead1 	.word	0x000dead1

000dce4c <strtol>:
   dce4c:	4613      	mov	r3, r2
   dce4e:	460a      	mov	r2, r1
   dce50:	4601      	mov	r1, r0
   dce52:	4802      	ldr	r0, [pc, #8]	; (dce5c <strtol+0x10>)
   dce54:	6800      	ldr	r0, [r0, #0]
   dce56:	f7ff bf7f 	b.w	dcd58 <_strtol_l.isra.0>
   dce5a:	bf00      	nop
   dce5c:	2003e028 	.word	0x2003e028

000dce60 <__register_exitproc>:
   dce60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dce64:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dcf20 <__register_exitproc+0xc0>
   dce68:	4606      	mov	r6, r0
   dce6a:	f8d8 0000 	ldr.w	r0, [r8]
   dce6e:	461f      	mov	r7, r3
   dce70:	460d      	mov	r5, r1
   dce72:	4691      	mov	r9, r2
   dce74:	f000 fbb4 	bl	dd5e0 <__retarget_lock_acquire_recursive>
   dce78:	4b25      	ldr	r3, [pc, #148]	; (dcf10 <__register_exitproc+0xb0>)
   dce7a:	681c      	ldr	r4, [r3, #0]
   dce7c:	b934      	cbnz	r4, dce8c <__register_exitproc+0x2c>
   dce7e:	4c25      	ldr	r4, [pc, #148]	; (dcf14 <__register_exitproc+0xb4>)
   dce80:	601c      	str	r4, [r3, #0]
   dce82:	4b25      	ldr	r3, [pc, #148]	; (dcf18 <__register_exitproc+0xb8>)
   dce84:	b113      	cbz	r3, dce8c <__register_exitproc+0x2c>
   dce86:	681b      	ldr	r3, [r3, #0]
   dce88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dce8c:	6863      	ldr	r3, [r4, #4]
   dce8e:	2b1f      	cmp	r3, #31
   dce90:	dd07      	ble.n	dcea2 <__register_exitproc+0x42>
   dce92:	f8d8 0000 	ldr.w	r0, [r8]
   dce96:	f000 fba5 	bl	dd5e4 <__retarget_lock_release_recursive>
   dce9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcea2:	b34e      	cbz	r6, dcef8 <__register_exitproc+0x98>
   dcea4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dcea8:	b988      	cbnz	r0, dcece <__register_exitproc+0x6e>
   dceaa:	4b1c      	ldr	r3, [pc, #112]	; (dcf1c <__register_exitproc+0xbc>)
   dceac:	b923      	cbnz	r3, dceb8 <__register_exitproc+0x58>
   dceae:	f8d8 0000 	ldr.w	r0, [r8]
   dceb2:	f000 fb96 	bl	dd5e2 <__retarget_lock_release>
   dceb6:	e7f0      	b.n	dce9a <__register_exitproc+0x3a>
   dceb8:	f44f 7084 	mov.w	r0, #264	; 0x108
   dcebc:	f7fa fd6e 	bl	d799c <malloc>
   dcec0:	2800      	cmp	r0, #0
   dcec2:	d0f4      	beq.n	dceae <__register_exitproc+0x4e>
   dcec4:	2300      	movs	r3, #0
   dcec6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dceca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dcece:	6863      	ldr	r3, [r4, #4]
   dced0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dced4:	2201      	movs	r2, #1
   dced6:	409a      	lsls	r2, r3
   dced8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dcedc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dcee0:	4313      	orrs	r3, r2
   dcee2:	2e02      	cmp	r6, #2
   dcee4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dcee8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dceec:	bf02      	ittt	eq
   dceee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dcef2:	431a      	orreq	r2, r3
   dcef4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dcef8:	6863      	ldr	r3, [r4, #4]
   dcefa:	f8d8 0000 	ldr.w	r0, [r8]
   dcefe:	1c5a      	adds	r2, r3, #1
   dcf00:	3302      	adds	r3, #2
   dcf02:	6062      	str	r2, [r4, #4]
   dcf04:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dcf08:	f000 fb6c 	bl	dd5e4 <__retarget_lock_release_recursive>
   dcf0c:	2000      	movs	r0, #0
   dcf0e:	e7c6      	b.n	dce9e <__register_exitproc+0x3e>
   dcf10:	2003e7e0 	.word	0x2003e7e0
   dcf14:	2003e754 	.word	0x2003e754
   dcf18:	00000000 	.word	0x00000000
   dcf1c:	000d799d 	.word	0x000d799d
   dcf20:	2003e08c 	.word	0x2003e08c

000dcf24 <rshift>:
   dcf24:	6903      	ldr	r3, [r0, #16]
   dcf26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dcf2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcf2e:	ea4f 1261 	mov.w	r2, r1, asr #5
   dcf32:	f100 0414 	add.w	r4, r0, #20
   dcf36:	dd45      	ble.n	dcfc4 <rshift+0xa0>
   dcf38:	f011 011f 	ands.w	r1, r1, #31
   dcf3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dcf40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dcf44:	d10c      	bne.n	dcf60 <rshift+0x3c>
   dcf46:	f100 0710 	add.w	r7, r0, #16
   dcf4a:	4629      	mov	r1, r5
   dcf4c:	42b1      	cmp	r1, r6
   dcf4e:	d334      	bcc.n	dcfba <rshift+0x96>
   dcf50:	1a9b      	subs	r3, r3, r2
   dcf52:	009b      	lsls	r3, r3, #2
   dcf54:	1eea      	subs	r2, r5, #3
   dcf56:	4296      	cmp	r6, r2
   dcf58:	bf38      	it	cc
   dcf5a:	2300      	movcc	r3, #0
   dcf5c:	4423      	add	r3, r4
   dcf5e:	e015      	b.n	dcf8c <rshift+0x68>
   dcf60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dcf64:	f1c1 0820 	rsb	r8, r1, #32
   dcf68:	40cf      	lsrs	r7, r1
   dcf6a:	f105 0e04 	add.w	lr, r5, #4
   dcf6e:	46a1      	mov	r9, r4
   dcf70:	4576      	cmp	r6, lr
   dcf72:	46f4      	mov	ip, lr
   dcf74:	d815      	bhi.n	dcfa2 <rshift+0x7e>
   dcf76:	1a9b      	subs	r3, r3, r2
   dcf78:	009a      	lsls	r2, r3, #2
   dcf7a:	3a04      	subs	r2, #4
   dcf7c:	3501      	adds	r5, #1
   dcf7e:	42ae      	cmp	r6, r5
   dcf80:	bf38      	it	cc
   dcf82:	2200      	movcc	r2, #0
   dcf84:	18a3      	adds	r3, r4, r2
   dcf86:	50a7      	str	r7, [r4, r2]
   dcf88:	b107      	cbz	r7, dcf8c <rshift+0x68>
   dcf8a:	3304      	adds	r3, #4
   dcf8c:	1b1a      	subs	r2, r3, r4
   dcf8e:	42a3      	cmp	r3, r4
   dcf90:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dcf94:	bf08      	it	eq
   dcf96:	2300      	moveq	r3, #0
   dcf98:	6102      	str	r2, [r0, #16]
   dcf9a:	bf08      	it	eq
   dcf9c:	6143      	streq	r3, [r0, #20]
   dcf9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcfa2:	f8dc c000 	ldr.w	ip, [ip]
   dcfa6:	fa0c fc08 	lsl.w	ip, ip, r8
   dcfaa:	ea4c 0707 	orr.w	r7, ip, r7
   dcfae:	f849 7b04 	str.w	r7, [r9], #4
   dcfb2:	f85e 7b04 	ldr.w	r7, [lr], #4
   dcfb6:	40cf      	lsrs	r7, r1
   dcfb8:	e7da      	b.n	dcf70 <rshift+0x4c>
   dcfba:	f851 cb04 	ldr.w	ip, [r1], #4
   dcfbe:	f847 cf04 	str.w	ip, [r7, #4]!
   dcfc2:	e7c3      	b.n	dcf4c <rshift+0x28>
   dcfc4:	4623      	mov	r3, r4
   dcfc6:	e7e1      	b.n	dcf8c <rshift+0x68>

000dcfc8 <__hexdig_fun>:
   dcfc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dcfcc:	2b09      	cmp	r3, #9
   dcfce:	d802      	bhi.n	dcfd6 <__hexdig_fun+0xe>
   dcfd0:	3820      	subs	r0, #32
   dcfd2:	b2c0      	uxtb	r0, r0
   dcfd4:	4770      	bx	lr
   dcfd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dcfda:	2b05      	cmp	r3, #5
   dcfdc:	d801      	bhi.n	dcfe2 <__hexdig_fun+0x1a>
   dcfde:	3847      	subs	r0, #71	; 0x47
   dcfe0:	e7f7      	b.n	dcfd2 <__hexdig_fun+0xa>
   dcfe2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dcfe6:	2b05      	cmp	r3, #5
   dcfe8:	d801      	bhi.n	dcfee <__hexdig_fun+0x26>
   dcfea:	3827      	subs	r0, #39	; 0x27
   dcfec:	e7f1      	b.n	dcfd2 <__hexdig_fun+0xa>
   dcfee:	2000      	movs	r0, #0
   dcff0:	4770      	bx	lr
	...

000dcff4 <__gethex>:
   dcff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcff8:	ed2d 8b02 	vpush	{d8}
   dcffc:	b089      	sub	sp, #36	; 0x24
   dcffe:	ee08 0a10 	vmov	s16, r0
   dd002:	9304      	str	r3, [sp, #16]
   dd004:	4bbc      	ldr	r3, [pc, #752]	; (dd2f8 <__gethex+0x304>)
   dd006:	681b      	ldr	r3, [r3, #0]
   dd008:	9301      	str	r3, [sp, #4]
   dd00a:	4618      	mov	r0, r3
   dd00c:	468b      	mov	fp, r1
   dd00e:	4690      	mov	r8, r2
   dd010:	f7fe ffc3 	bl	dbf9a <strlen>
   dd014:	9b01      	ldr	r3, [sp, #4]
   dd016:	f8db 2000 	ldr.w	r2, [fp]
   dd01a:	4403      	add	r3, r0
   dd01c:	4682      	mov	sl, r0
   dd01e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dd022:	9305      	str	r3, [sp, #20]
   dd024:	1c93      	adds	r3, r2, #2
   dd026:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dd02a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dd02e:	32fe      	adds	r2, #254	; 0xfe
   dd030:	18d1      	adds	r1, r2, r3
   dd032:	461f      	mov	r7, r3
   dd034:	f813 0b01 	ldrb.w	r0, [r3], #1
   dd038:	9100      	str	r1, [sp, #0]
   dd03a:	2830      	cmp	r0, #48	; 0x30
   dd03c:	d0f8      	beq.n	dd030 <__gethex+0x3c>
   dd03e:	f7ff ffc3 	bl	dcfc8 <__hexdig_fun>
   dd042:	4604      	mov	r4, r0
   dd044:	2800      	cmp	r0, #0
   dd046:	d13a      	bne.n	dd0be <__gethex+0xca>
   dd048:	9901      	ldr	r1, [sp, #4]
   dd04a:	4652      	mov	r2, sl
   dd04c:	4638      	mov	r0, r7
   dd04e:	f7fe ffac 	bl	dbfaa <strncmp>
   dd052:	4605      	mov	r5, r0
   dd054:	2800      	cmp	r0, #0
   dd056:	d168      	bne.n	dd12a <__gethex+0x136>
   dd058:	f817 000a 	ldrb.w	r0, [r7, sl]
   dd05c:	eb07 060a 	add.w	r6, r7, sl
   dd060:	f7ff ffb2 	bl	dcfc8 <__hexdig_fun>
   dd064:	2800      	cmp	r0, #0
   dd066:	d062      	beq.n	dd12e <__gethex+0x13a>
   dd068:	4633      	mov	r3, r6
   dd06a:	7818      	ldrb	r0, [r3, #0]
   dd06c:	2830      	cmp	r0, #48	; 0x30
   dd06e:	461f      	mov	r7, r3
   dd070:	f103 0301 	add.w	r3, r3, #1
   dd074:	d0f9      	beq.n	dd06a <__gethex+0x76>
   dd076:	f7ff ffa7 	bl	dcfc8 <__hexdig_fun>
   dd07a:	2301      	movs	r3, #1
   dd07c:	fab0 f480 	clz	r4, r0
   dd080:	0964      	lsrs	r4, r4, #5
   dd082:	4635      	mov	r5, r6
   dd084:	9300      	str	r3, [sp, #0]
   dd086:	463a      	mov	r2, r7
   dd088:	4616      	mov	r6, r2
   dd08a:	3201      	adds	r2, #1
   dd08c:	7830      	ldrb	r0, [r6, #0]
   dd08e:	f7ff ff9b 	bl	dcfc8 <__hexdig_fun>
   dd092:	2800      	cmp	r0, #0
   dd094:	d1f8      	bne.n	dd088 <__gethex+0x94>
   dd096:	9901      	ldr	r1, [sp, #4]
   dd098:	4652      	mov	r2, sl
   dd09a:	4630      	mov	r0, r6
   dd09c:	f7fe ff85 	bl	dbfaa <strncmp>
   dd0a0:	b980      	cbnz	r0, dd0c4 <__gethex+0xd0>
   dd0a2:	b94d      	cbnz	r5, dd0b8 <__gethex+0xc4>
   dd0a4:	eb06 050a 	add.w	r5, r6, sl
   dd0a8:	462a      	mov	r2, r5
   dd0aa:	4616      	mov	r6, r2
   dd0ac:	3201      	adds	r2, #1
   dd0ae:	7830      	ldrb	r0, [r6, #0]
   dd0b0:	f7ff ff8a 	bl	dcfc8 <__hexdig_fun>
   dd0b4:	2800      	cmp	r0, #0
   dd0b6:	d1f8      	bne.n	dd0aa <__gethex+0xb6>
   dd0b8:	1bad      	subs	r5, r5, r6
   dd0ba:	00ad      	lsls	r5, r5, #2
   dd0bc:	e004      	b.n	dd0c8 <__gethex+0xd4>
   dd0be:	2400      	movs	r4, #0
   dd0c0:	4625      	mov	r5, r4
   dd0c2:	e7e0      	b.n	dd086 <__gethex+0x92>
   dd0c4:	2d00      	cmp	r5, #0
   dd0c6:	d1f7      	bne.n	dd0b8 <__gethex+0xc4>
   dd0c8:	7833      	ldrb	r3, [r6, #0]
   dd0ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dd0ce:	2b50      	cmp	r3, #80	; 0x50
   dd0d0:	d13b      	bne.n	dd14a <__gethex+0x156>
   dd0d2:	7873      	ldrb	r3, [r6, #1]
   dd0d4:	2b2b      	cmp	r3, #43	; 0x2b
   dd0d6:	d02c      	beq.n	dd132 <__gethex+0x13e>
   dd0d8:	2b2d      	cmp	r3, #45	; 0x2d
   dd0da:	d02e      	beq.n	dd13a <__gethex+0x146>
   dd0dc:	1c71      	adds	r1, r6, #1
   dd0de:	f04f 0900 	mov.w	r9, #0
   dd0e2:	7808      	ldrb	r0, [r1, #0]
   dd0e4:	f7ff ff70 	bl	dcfc8 <__hexdig_fun>
   dd0e8:	1e43      	subs	r3, r0, #1
   dd0ea:	b2db      	uxtb	r3, r3
   dd0ec:	2b18      	cmp	r3, #24
   dd0ee:	d82c      	bhi.n	dd14a <__gethex+0x156>
   dd0f0:	f1a0 0210 	sub.w	r2, r0, #16
   dd0f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dd0f8:	f7ff ff66 	bl	dcfc8 <__hexdig_fun>
   dd0fc:	1e43      	subs	r3, r0, #1
   dd0fe:	b2db      	uxtb	r3, r3
   dd100:	2b18      	cmp	r3, #24
   dd102:	d91d      	bls.n	dd140 <__gethex+0x14c>
   dd104:	f1b9 0f00 	cmp.w	r9, #0
   dd108:	d000      	beq.n	dd10c <__gethex+0x118>
   dd10a:	4252      	negs	r2, r2
   dd10c:	4415      	add	r5, r2
   dd10e:	f8cb 1000 	str.w	r1, [fp]
   dd112:	b1e4      	cbz	r4, dd14e <__gethex+0x15a>
   dd114:	9b00      	ldr	r3, [sp, #0]
   dd116:	2b00      	cmp	r3, #0
   dd118:	bf14      	ite	ne
   dd11a:	2700      	movne	r7, #0
   dd11c:	2706      	moveq	r7, #6
   dd11e:	4638      	mov	r0, r7
   dd120:	b009      	add	sp, #36	; 0x24
   dd122:	ecbd 8b02 	vpop	{d8}
   dd126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd12a:	463e      	mov	r6, r7
   dd12c:	4625      	mov	r5, r4
   dd12e:	2401      	movs	r4, #1
   dd130:	e7ca      	b.n	dd0c8 <__gethex+0xd4>
   dd132:	f04f 0900 	mov.w	r9, #0
   dd136:	1cb1      	adds	r1, r6, #2
   dd138:	e7d3      	b.n	dd0e2 <__gethex+0xee>
   dd13a:	f04f 0901 	mov.w	r9, #1
   dd13e:	e7fa      	b.n	dd136 <__gethex+0x142>
   dd140:	230a      	movs	r3, #10
   dd142:	fb03 0202 	mla	r2, r3, r2, r0
   dd146:	3a10      	subs	r2, #16
   dd148:	e7d4      	b.n	dd0f4 <__gethex+0x100>
   dd14a:	4631      	mov	r1, r6
   dd14c:	e7df      	b.n	dd10e <__gethex+0x11a>
   dd14e:	1bf3      	subs	r3, r6, r7
   dd150:	3b01      	subs	r3, #1
   dd152:	4621      	mov	r1, r4
   dd154:	2b07      	cmp	r3, #7
   dd156:	dc52      	bgt.n	dd1fe <__gethex+0x20a>
   dd158:	ee18 0a10 	vmov	r0, s16
   dd15c:	f000 fa55 	bl	dd60a <_Balloc>
   dd160:	f04f 0b00 	mov.w	fp, #0
   dd164:	f100 0914 	add.w	r9, r0, #20
   dd168:	f1ca 0301 	rsb	r3, sl, #1
   dd16c:	4604      	mov	r4, r0
   dd16e:	f8cd 9008 	str.w	r9, [sp, #8]
   dd172:	f8cd b000 	str.w	fp, [sp]
   dd176:	9306      	str	r3, [sp, #24]
   dd178:	42b7      	cmp	r7, r6
   dd17a:	d343      	bcc.n	dd204 <__gethex+0x210>
   dd17c:	9802      	ldr	r0, [sp, #8]
   dd17e:	9b00      	ldr	r3, [sp, #0]
   dd180:	f840 3b04 	str.w	r3, [r0], #4
   dd184:	eba0 0009 	sub.w	r0, r0, r9
   dd188:	1080      	asrs	r0, r0, #2
   dd18a:	0146      	lsls	r6, r0, #5
   dd18c:	6120      	str	r0, [r4, #16]
   dd18e:	4618      	mov	r0, r3
   dd190:	f000 fb02 	bl	dd798 <__hi0bits>
   dd194:	1a30      	subs	r0, r6, r0
   dd196:	f8d8 6000 	ldr.w	r6, [r8]
   dd19a:	42b0      	cmp	r0, r6
   dd19c:	dd66      	ble.n	dd26c <__gethex+0x278>
   dd19e:	1b87      	subs	r7, r0, r6
   dd1a0:	4639      	mov	r1, r7
   dd1a2:	4620      	mov	r0, r4
   dd1a4:	f000 fe50 	bl	dde48 <__any_on>
   dd1a8:	4682      	mov	sl, r0
   dd1aa:	b1a8      	cbz	r0, dd1d8 <__gethex+0x1e4>
   dd1ac:	1e7b      	subs	r3, r7, #1
   dd1ae:	1159      	asrs	r1, r3, #5
   dd1b0:	f003 021f 	and.w	r2, r3, #31
   dd1b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dd1b8:	f04f 0a01 	mov.w	sl, #1
   dd1bc:	fa0a f202 	lsl.w	r2, sl, r2
   dd1c0:	420a      	tst	r2, r1
   dd1c2:	d009      	beq.n	dd1d8 <__gethex+0x1e4>
   dd1c4:	4553      	cmp	r3, sl
   dd1c6:	dd05      	ble.n	dd1d4 <__gethex+0x1e0>
   dd1c8:	1eb9      	subs	r1, r7, #2
   dd1ca:	4620      	mov	r0, r4
   dd1cc:	f000 fe3c 	bl	dde48 <__any_on>
   dd1d0:	2800      	cmp	r0, #0
   dd1d2:	d148      	bne.n	dd266 <__gethex+0x272>
   dd1d4:	f04f 0a02 	mov.w	sl, #2
   dd1d8:	4639      	mov	r1, r7
   dd1da:	4620      	mov	r0, r4
   dd1dc:	f7ff fea2 	bl	dcf24 <rshift>
   dd1e0:	443d      	add	r5, r7
   dd1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd1e6:	42ab      	cmp	r3, r5
   dd1e8:	da4f      	bge.n	dd28a <__gethex+0x296>
   dd1ea:	ee18 0a10 	vmov	r0, s16
   dd1ee:	4621      	mov	r1, r4
   dd1f0:	f000 fa3f 	bl	dd672 <_Bfree>
   dd1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dd1f6:	2300      	movs	r3, #0
   dd1f8:	6013      	str	r3, [r2, #0]
   dd1fa:	27a3      	movs	r7, #163	; 0xa3
   dd1fc:	e78f      	b.n	dd11e <__gethex+0x12a>
   dd1fe:	3101      	adds	r1, #1
   dd200:	105b      	asrs	r3, r3, #1
   dd202:	e7a7      	b.n	dd154 <__gethex+0x160>
   dd204:	1e73      	subs	r3, r6, #1
   dd206:	9a05      	ldr	r2, [sp, #20]
   dd208:	9303      	str	r3, [sp, #12]
   dd20a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dd20e:	4293      	cmp	r3, r2
   dd210:	d019      	beq.n	dd246 <__gethex+0x252>
   dd212:	f1bb 0f20 	cmp.w	fp, #32
   dd216:	d107      	bne.n	dd228 <__gethex+0x234>
   dd218:	9b02      	ldr	r3, [sp, #8]
   dd21a:	9a00      	ldr	r2, [sp, #0]
   dd21c:	f843 2b04 	str.w	r2, [r3], #4
   dd220:	9302      	str	r3, [sp, #8]
   dd222:	2300      	movs	r3, #0
   dd224:	9300      	str	r3, [sp, #0]
   dd226:	469b      	mov	fp, r3
   dd228:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dd22c:	f7ff fecc 	bl	dcfc8 <__hexdig_fun>
   dd230:	9b00      	ldr	r3, [sp, #0]
   dd232:	f000 000f 	and.w	r0, r0, #15
   dd236:	fa00 f00b 	lsl.w	r0, r0, fp
   dd23a:	4303      	orrs	r3, r0
   dd23c:	9300      	str	r3, [sp, #0]
   dd23e:	f10b 0b04 	add.w	fp, fp, #4
   dd242:	9b03      	ldr	r3, [sp, #12]
   dd244:	e00d      	b.n	dd262 <__gethex+0x26e>
   dd246:	9b03      	ldr	r3, [sp, #12]
   dd248:	9a06      	ldr	r2, [sp, #24]
   dd24a:	4413      	add	r3, r2
   dd24c:	42bb      	cmp	r3, r7
   dd24e:	d3e0      	bcc.n	dd212 <__gethex+0x21e>
   dd250:	4618      	mov	r0, r3
   dd252:	9901      	ldr	r1, [sp, #4]
   dd254:	9307      	str	r3, [sp, #28]
   dd256:	4652      	mov	r2, sl
   dd258:	f7fe fea7 	bl	dbfaa <strncmp>
   dd25c:	9b07      	ldr	r3, [sp, #28]
   dd25e:	2800      	cmp	r0, #0
   dd260:	d1d7      	bne.n	dd212 <__gethex+0x21e>
   dd262:	461e      	mov	r6, r3
   dd264:	e788      	b.n	dd178 <__gethex+0x184>
   dd266:	f04f 0a03 	mov.w	sl, #3
   dd26a:	e7b5      	b.n	dd1d8 <__gethex+0x1e4>
   dd26c:	da0a      	bge.n	dd284 <__gethex+0x290>
   dd26e:	1a37      	subs	r7, r6, r0
   dd270:	4621      	mov	r1, r4
   dd272:	ee18 0a10 	vmov	r0, s16
   dd276:	463a      	mov	r2, r7
   dd278:	f000 fbd2 	bl	dda20 <__lshift>
   dd27c:	1bed      	subs	r5, r5, r7
   dd27e:	4604      	mov	r4, r0
   dd280:	f100 0914 	add.w	r9, r0, #20
   dd284:	f04f 0a00 	mov.w	sl, #0
   dd288:	e7ab      	b.n	dd1e2 <__gethex+0x1ee>
   dd28a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dd28e:	42a8      	cmp	r0, r5
   dd290:	dd6d      	ble.n	dd36e <__gethex+0x37a>
   dd292:	1b45      	subs	r5, r0, r5
   dd294:	42ae      	cmp	r6, r5
   dd296:	dc31      	bgt.n	dd2fc <__gethex+0x308>
   dd298:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dd29c:	2b02      	cmp	r3, #2
   dd29e:	d023      	beq.n	dd2e8 <__gethex+0x2f4>
   dd2a0:	2b03      	cmp	r3, #3
   dd2a2:	d025      	beq.n	dd2f0 <__gethex+0x2fc>
   dd2a4:	2b01      	cmp	r3, #1
   dd2a6:	d115      	bne.n	dd2d4 <__gethex+0x2e0>
   dd2a8:	42ae      	cmp	r6, r5
   dd2aa:	d113      	bne.n	dd2d4 <__gethex+0x2e0>
   dd2ac:	2e01      	cmp	r6, #1
   dd2ae:	d10b      	bne.n	dd2c8 <__gethex+0x2d4>
   dd2b0:	9a04      	ldr	r2, [sp, #16]
   dd2b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dd2b6:	6013      	str	r3, [r2, #0]
   dd2b8:	2301      	movs	r3, #1
   dd2ba:	6123      	str	r3, [r4, #16]
   dd2bc:	f8c9 3000 	str.w	r3, [r9]
   dd2c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dd2c2:	2762      	movs	r7, #98	; 0x62
   dd2c4:	601c      	str	r4, [r3, #0]
   dd2c6:	e72a      	b.n	dd11e <__gethex+0x12a>
   dd2c8:	1e71      	subs	r1, r6, #1
   dd2ca:	4620      	mov	r0, r4
   dd2cc:	f000 fdbc 	bl	dde48 <__any_on>
   dd2d0:	2800      	cmp	r0, #0
   dd2d2:	d1ed      	bne.n	dd2b0 <__gethex+0x2bc>
   dd2d4:	ee18 0a10 	vmov	r0, s16
   dd2d8:	4621      	mov	r1, r4
   dd2da:	f000 f9ca 	bl	dd672 <_Bfree>
   dd2de:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dd2e0:	2300      	movs	r3, #0
   dd2e2:	6013      	str	r3, [r2, #0]
   dd2e4:	2750      	movs	r7, #80	; 0x50
   dd2e6:	e71a      	b.n	dd11e <__gethex+0x12a>
   dd2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd2ea:	2b00      	cmp	r3, #0
   dd2ec:	d1f2      	bne.n	dd2d4 <__gethex+0x2e0>
   dd2ee:	e7df      	b.n	dd2b0 <__gethex+0x2bc>
   dd2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd2f2:	2b00      	cmp	r3, #0
   dd2f4:	d1dc      	bne.n	dd2b0 <__gethex+0x2bc>
   dd2f6:	e7ed      	b.n	dd2d4 <__gethex+0x2e0>
   dd2f8:	000debd4 	.word	0x000debd4
   dd2fc:	1e6f      	subs	r7, r5, #1
   dd2fe:	f1ba 0f00 	cmp.w	sl, #0
   dd302:	d131      	bne.n	dd368 <__gethex+0x374>
   dd304:	b127      	cbz	r7, dd310 <__gethex+0x31c>
   dd306:	4639      	mov	r1, r7
   dd308:	4620      	mov	r0, r4
   dd30a:	f000 fd9d 	bl	dde48 <__any_on>
   dd30e:	4682      	mov	sl, r0
   dd310:	117b      	asrs	r3, r7, #5
   dd312:	2101      	movs	r1, #1
   dd314:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dd318:	f007 071f 	and.w	r7, r7, #31
   dd31c:	fa01 f707 	lsl.w	r7, r1, r7
   dd320:	421f      	tst	r7, r3
   dd322:	4629      	mov	r1, r5
   dd324:	4620      	mov	r0, r4
   dd326:	bf18      	it	ne
   dd328:	f04a 0a02 	orrne.w	sl, sl, #2
   dd32c:	1b76      	subs	r6, r6, r5
   dd32e:	f7ff fdf9 	bl	dcf24 <rshift>
   dd332:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dd336:	2702      	movs	r7, #2
   dd338:	f1ba 0f00 	cmp.w	sl, #0
   dd33c:	d048      	beq.n	dd3d0 <__gethex+0x3dc>
   dd33e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dd342:	2b02      	cmp	r3, #2
   dd344:	d015      	beq.n	dd372 <__gethex+0x37e>
   dd346:	2b03      	cmp	r3, #3
   dd348:	d017      	beq.n	dd37a <__gethex+0x386>
   dd34a:	2b01      	cmp	r3, #1
   dd34c:	d109      	bne.n	dd362 <__gethex+0x36e>
   dd34e:	f01a 0f02 	tst.w	sl, #2
   dd352:	d006      	beq.n	dd362 <__gethex+0x36e>
   dd354:	f8d9 0000 	ldr.w	r0, [r9]
   dd358:	ea4a 0a00 	orr.w	sl, sl, r0
   dd35c:	f01a 0f01 	tst.w	sl, #1
   dd360:	d10e      	bne.n	dd380 <__gethex+0x38c>
   dd362:	f047 0710 	orr.w	r7, r7, #16
   dd366:	e033      	b.n	dd3d0 <__gethex+0x3dc>
   dd368:	f04f 0a01 	mov.w	sl, #1
   dd36c:	e7d0      	b.n	dd310 <__gethex+0x31c>
   dd36e:	2701      	movs	r7, #1
   dd370:	e7e2      	b.n	dd338 <__gethex+0x344>
   dd372:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd374:	f1c3 0301 	rsb	r3, r3, #1
   dd378:	9315      	str	r3, [sp, #84]	; 0x54
   dd37a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dd37c:	2b00      	cmp	r3, #0
   dd37e:	d0f0      	beq.n	dd362 <__gethex+0x36e>
   dd380:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dd384:	f104 0314 	add.w	r3, r4, #20
   dd388:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dd38c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dd390:	f04f 0c00 	mov.w	ip, #0
   dd394:	4618      	mov	r0, r3
   dd396:	f853 2b04 	ldr.w	r2, [r3], #4
   dd39a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dd39e:	d01c      	beq.n	dd3da <__gethex+0x3e6>
   dd3a0:	3201      	adds	r2, #1
   dd3a2:	6002      	str	r2, [r0, #0]
   dd3a4:	2f02      	cmp	r7, #2
   dd3a6:	f104 0314 	add.w	r3, r4, #20
   dd3aa:	d13a      	bne.n	dd422 <__gethex+0x42e>
   dd3ac:	f8d8 2000 	ldr.w	r2, [r8]
   dd3b0:	3a01      	subs	r2, #1
   dd3b2:	42b2      	cmp	r2, r6
   dd3b4:	d10a      	bne.n	dd3cc <__gethex+0x3d8>
   dd3b6:	1171      	asrs	r1, r6, #5
   dd3b8:	2201      	movs	r2, #1
   dd3ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dd3be:	f006 061f 	and.w	r6, r6, #31
   dd3c2:	fa02 f606 	lsl.w	r6, r2, r6
   dd3c6:	421e      	tst	r6, r3
   dd3c8:	bf18      	it	ne
   dd3ca:	4617      	movne	r7, r2
   dd3cc:	f047 0720 	orr.w	r7, r7, #32
   dd3d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dd3d2:	601c      	str	r4, [r3, #0]
   dd3d4:	9b04      	ldr	r3, [sp, #16]
   dd3d6:	601d      	str	r5, [r3, #0]
   dd3d8:	e6a1      	b.n	dd11e <__gethex+0x12a>
   dd3da:	4299      	cmp	r1, r3
   dd3dc:	f843 cc04 	str.w	ip, [r3, #-4]
   dd3e0:	d8d8      	bhi.n	dd394 <__gethex+0x3a0>
   dd3e2:	68a3      	ldr	r3, [r4, #8]
   dd3e4:	4599      	cmp	r9, r3
   dd3e6:	db14      	blt.n	dd412 <__gethex+0x41e>
   dd3e8:	6861      	ldr	r1, [r4, #4]
   dd3ea:	ee18 0a10 	vmov	r0, s16
   dd3ee:	3101      	adds	r1, #1
   dd3f0:	f000 f90b 	bl	dd60a <_Balloc>
   dd3f4:	6922      	ldr	r2, [r4, #16]
   dd3f6:	3202      	adds	r2, #2
   dd3f8:	f104 010c 	add.w	r1, r4, #12
   dd3fc:	4682      	mov	sl, r0
   dd3fe:	0092      	lsls	r2, r2, #2
   dd400:	300c      	adds	r0, #12
   dd402:	f7fe fd2e 	bl	dbe62 <memcpy>
   dd406:	4621      	mov	r1, r4
   dd408:	ee18 0a10 	vmov	r0, s16
   dd40c:	f000 f931 	bl	dd672 <_Bfree>
   dd410:	4654      	mov	r4, sl
   dd412:	6923      	ldr	r3, [r4, #16]
   dd414:	1c5a      	adds	r2, r3, #1
   dd416:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dd41a:	6122      	str	r2, [r4, #16]
   dd41c:	2201      	movs	r2, #1
   dd41e:	615a      	str	r2, [r3, #20]
   dd420:	e7c0      	b.n	dd3a4 <__gethex+0x3b0>
   dd422:	6922      	ldr	r2, [r4, #16]
   dd424:	454a      	cmp	r2, r9
   dd426:	dd0b      	ble.n	dd440 <__gethex+0x44c>
   dd428:	2101      	movs	r1, #1
   dd42a:	4620      	mov	r0, r4
   dd42c:	f7ff fd7a 	bl	dcf24 <rshift>
   dd430:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd434:	3501      	adds	r5, #1
   dd436:	42ab      	cmp	r3, r5
   dd438:	f6ff aed7 	blt.w	dd1ea <__gethex+0x1f6>
   dd43c:	2701      	movs	r7, #1
   dd43e:	e7c5      	b.n	dd3cc <__gethex+0x3d8>
   dd440:	f016 061f 	ands.w	r6, r6, #31
   dd444:	d0fa      	beq.n	dd43c <__gethex+0x448>
   dd446:	449b      	add	fp, r3
   dd448:	f1c6 0620 	rsb	r6, r6, #32
   dd44c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dd450:	f000 f9a2 	bl	dd798 <__hi0bits>
   dd454:	42b0      	cmp	r0, r6
   dd456:	dbe7      	blt.n	dd428 <__gethex+0x434>
   dd458:	e7f0      	b.n	dd43c <__gethex+0x448>
   dd45a:	bf00      	nop

000dd45c <L_shift>:
   dd45c:	f1c2 0208 	rsb	r2, r2, #8
   dd460:	0092      	lsls	r2, r2, #2
   dd462:	b570      	push	{r4, r5, r6, lr}
   dd464:	f1c2 0620 	rsb	r6, r2, #32
   dd468:	6843      	ldr	r3, [r0, #4]
   dd46a:	6804      	ldr	r4, [r0, #0]
   dd46c:	fa03 f506 	lsl.w	r5, r3, r6
   dd470:	432c      	orrs	r4, r5
   dd472:	40d3      	lsrs	r3, r2
   dd474:	6004      	str	r4, [r0, #0]
   dd476:	f840 3f04 	str.w	r3, [r0, #4]!
   dd47a:	4288      	cmp	r0, r1
   dd47c:	d3f4      	bcc.n	dd468 <L_shift+0xc>
   dd47e:	bd70      	pop	{r4, r5, r6, pc}

000dd480 <__match>:
   dd480:	b530      	push	{r4, r5, lr}
   dd482:	6803      	ldr	r3, [r0, #0]
   dd484:	3301      	adds	r3, #1
   dd486:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd48a:	b914      	cbnz	r4, dd492 <__match+0x12>
   dd48c:	6003      	str	r3, [r0, #0]
   dd48e:	2001      	movs	r0, #1
   dd490:	bd30      	pop	{r4, r5, pc}
   dd492:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd496:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dd49a:	2d19      	cmp	r5, #25
   dd49c:	bf98      	it	ls
   dd49e:	3220      	addls	r2, #32
   dd4a0:	42a2      	cmp	r2, r4
   dd4a2:	d0f0      	beq.n	dd486 <__match+0x6>
   dd4a4:	2000      	movs	r0, #0
   dd4a6:	e7f3      	b.n	dd490 <__match+0x10>

000dd4a8 <__hexnan>:
   dd4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd4ac:	680b      	ldr	r3, [r1, #0]
   dd4ae:	6801      	ldr	r1, [r0, #0]
   dd4b0:	115e      	asrs	r6, r3, #5
   dd4b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dd4b6:	f013 031f 	ands.w	r3, r3, #31
   dd4ba:	b087      	sub	sp, #28
   dd4bc:	bf18      	it	ne
   dd4be:	3604      	addne	r6, #4
   dd4c0:	2500      	movs	r5, #0
   dd4c2:	1f37      	subs	r7, r6, #4
   dd4c4:	4682      	mov	sl, r0
   dd4c6:	4690      	mov	r8, r2
   dd4c8:	9301      	str	r3, [sp, #4]
   dd4ca:	f846 5c04 	str.w	r5, [r6, #-4]
   dd4ce:	46b9      	mov	r9, r7
   dd4d0:	463c      	mov	r4, r7
   dd4d2:	9502      	str	r5, [sp, #8]
   dd4d4:	46ab      	mov	fp, r5
   dd4d6:	784a      	ldrb	r2, [r1, #1]
   dd4d8:	1c4b      	adds	r3, r1, #1
   dd4da:	9303      	str	r3, [sp, #12]
   dd4dc:	b342      	cbz	r2, dd530 <__hexnan+0x88>
   dd4de:	4610      	mov	r0, r2
   dd4e0:	9105      	str	r1, [sp, #20]
   dd4e2:	9204      	str	r2, [sp, #16]
   dd4e4:	f7ff fd70 	bl	dcfc8 <__hexdig_fun>
   dd4e8:	2800      	cmp	r0, #0
   dd4ea:	d14f      	bne.n	dd58c <__hexnan+0xe4>
   dd4ec:	9a04      	ldr	r2, [sp, #16]
   dd4ee:	9905      	ldr	r1, [sp, #20]
   dd4f0:	2a20      	cmp	r2, #32
   dd4f2:	d818      	bhi.n	dd526 <__hexnan+0x7e>
   dd4f4:	9b02      	ldr	r3, [sp, #8]
   dd4f6:	459b      	cmp	fp, r3
   dd4f8:	dd13      	ble.n	dd522 <__hexnan+0x7a>
   dd4fa:	454c      	cmp	r4, r9
   dd4fc:	d206      	bcs.n	dd50c <__hexnan+0x64>
   dd4fe:	2d07      	cmp	r5, #7
   dd500:	dc04      	bgt.n	dd50c <__hexnan+0x64>
   dd502:	462a      	mov	r2, r5
   dd504:	4649      	mov	r1, r9
   dd506:	4620      	mov	r0, r4
   dd508:	f7ff ffa8 	bl	dd45c <L_shift>
   dd50c:	4544      	cmp	r4, r8
   dd50e:	d950      	bls.n	dd5b2 <__hexnan+0x10a>
   dd510:	2300      	movs	r3, #0
   dd512:	f1a4 0904 	sub.w	r9, r4, #4
   dd516:	f844 3c04 	str.w	r3, [r4, #-4]
   dd51a:	f8cd b008 	str.w	fp, [sp, #8]
   dd51e:	464c      	mov	r4, r9
   dd520:	461d      	mov	r5, r3
   dd522:	9903      	ldr	r1, [sp, #12]
   dd524:	e7d7      	b.n	dd4d6 <__hexnan+0x2e>
   dd526:	2a29      	cmp	r2, #41	; 0x29
   dd528:	d156      	bne.n	dd5d8 <__hexnan+0x130>
   dd52a:	3102      	adds	r1, #2
   dd52c:	f8ca 1000 	str.w	r1, [sl]
   dd530:	f1bb 0f00 	cmp.w	fp, #0
   dd534:	d050      	beq.n	dd5d8 <__hexnan+0x130>
   dd536:	454c      	cmp	r4, r9
   dd538:	d206      	bcs.n	dd548 <__hexnan+0xa0>
   dd53a:	2d07      	cmp	r5, #7
   dd53c:	dc04      	bgt.n	dd548 <__hexnan+0xa0>
   dd53e:	462a      	mov	r2, r5
   dd540:	4649      	mov	r1, r9
   dd542:	4620      	mov	r0, r4
   dd544:	f7ff ff8a 	bl	dd45c <L_shift>
   dd548:	4544      	cmp	r4, r8
   dd54a:	d934      	bls.n	dd5b6 <__hexnan+0x10e>
   dd54c:	f1a8 0204 	sub.w	r2, r8, #4
   dd550:	4623      	mov	r3, r4
   dd552:	f853 1b04 	ldr.w	r1, [r3], #4
   dd556:	f842 1f04 	str.w	r1, [r2, #4]!
   dd55a:	429f      	cmp	r7, r3
   dd55c:	d2f9      	bcs.n	dd552 <__hexnan+0xaa>
   dd55e:	1b3b      	subs	r3, r7, r4
   dd560:	f023 0303 	bic.w	r3, r3, #3
   dd564:	3304      	adds	r3, #4
   dd566:	3401      	adds	r4, #1
   dd568:	3e03      	subs	r6, #3
   dd56a:	42b4      	cmp	r4, r6
   dd56c:	bf88      	it	hi
   dd56e:	2304      	movhi	r3, #4
   dd570:	4443      	add	r3, r8
   dd572:	2200      	movs	r2, #0
   dd574:	f843 2b04 	str.w	r2, [r3], #4
   dd578:	429f      	cmp	r7, r3
   dd57a:	d2fb      	bcs.n	dd574 <__hexnan+0xcc>
   dd57c:	683b      	ldr	r3, [r7, #0]
   dd57e:	b91b      	cbnz	r3, dd588 <__hexnan+0xe0>
   dd580:	4547      	cmp	r7, r8
   dd582:	d127      	bne.n	dd5d4 <__hexnan+0x12c>
   dd584:	2301      	movs	r3, #1
   dd586:	603b      	str	r3, [r7, #0]
   dd588:	2005      	movs	r0, #5
   dd58a:	e026      	b.n	dd5da <__hexnan+0x132>
   dd58c:	3501      	adds	r5, #1
   dd58e:	2d08      	cmp	r5, #8
   dd590:	f10b 0b01 	add.w	fp, fp, #1
   dd594:	dd06      	ble.n	dd5a4 <__hexnan+0xfc>
   dd596:	4544      	cmp	r4, r8
   dd598:	d9c3      	bls.n	dd522 <__hexnan+0x7a>
   dd59a:	2300      	movs	r3, #0
   dd59c:	f844 3c04 	str.w	r3, [r4, #-4]
   dd5a0:	2501      	movs	r5, #1
   dd5a2:	3c04      	subs	r4, #4
   dd5a4:	6822      	ldr	r2, [r4, #0]
   dd5a6:	f000 000f 	and.w	r0, r0, #15
   dd5aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dd5ae:	6022      	str	r2, [r4, #0]
   dd5b0:	e7b7      	b.n	dd522 <__hexnan+0x7a>
   dd5b2:	2508      	movs	r5, #8
   dd5b4:	e7b5      	b.n	dd522 <__hexnan+0x7a>
   dd5b6:	9b01      	ldr	r3, [sp, #4]
   dd5b8:	2b00      	cmp	r3, #0
   dd5ba:	d0df      	beq.n	dd57c <__hexnan+0xd4>
   dd5bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd5c0:	f1c3 0320 	rsb	r3, r3, #32
   dd5c4:	fa22 f303 	lsr.w	r3, r2, r3
   dd5c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dd5cc:	401a      	ands	r2, r3
   dd5ce:	f846 2c04 	str.w	r2, [r6, #-4]
   dd5d2:	e7d3      	b.n	dd57c <__hexnan+0xd4>
   dd5d4:	3f04      	subs	r7, #4
   dd5d6:	e7d1      	b.n	dd57c <__hexnan+0xd4>
   dd5d8:	2004      	movs	r0, #4
   dd5da:	b007      	add	sp, #28
   dd5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd5e0 <__retarget_lock_acquire_recursive>:
   dd5e0:	4770      	bx	lr

000dd5e2 <__retarget_lock_release>:
   dd5e2:	4770      	bx	lr

000dd5e4 <__retarget_lock_release_recursive>:
   dd5e4:	4770      	bx	lr

000dd5e6 <__ascii_mbtowc>:
   dd5e6:	b082      	sub	sp, #8
   dd5e8:	b901      	cbnz	r1, dd5ec <__ascii_mbtowc+0x6>
   dd5ea:	a901      	add	r1, sp, #4
   dd5ec:	b142      	cbz	r2, dd600 <__ascii_mbtowc+0x1a>
   dd5ee:	b14b      	cbz	r3, dd604 <__ascii_mbtowc+0x1e>
   dd5f0:	7813      	ldrb	r3, [r2, #0]
   dd5f2:	600b      	str	r3, [r1, #0]
   dd5f4:	7812      	ldrb	r2, [r2, #0]
   dd5f6:	1e10      	subs	r0, r2, #0
   dd5f8:	bf18      	it	ne
   dd5fa:	2001      	movne	r0, #1
   dd5fc:	b002      	add	sp, #8
   dd5fe:	4770      	bx	lr
   dd600:	4610      	mov	r0, r2
   dd602:	e7fb      	b.n	dd5fc <__ascii_mbtowc+0x16>
   dd604:	f06f 0001 	mvn.w	r0, #1
   dd608:	e7f8      	b.n	dd5fc <__ascii_mbtowc+0x16>

000dd60a <_Balloc>:
   dd60a:	b570      	push	{r4, r5, r6, lr}
   dd60c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd60e:	4604      	mov	r4, r0
   dd610:	460d      	mov	r5, r1
   dd612:	b93e      	cbnz	r6, dd624 <_Balloc+0x1a>
   dd614:	2010      	movs	r0, #16
   dd616:	f7fa f9c1 	bl	d799c <malloc>
   dd61a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd61e:	6260      	str	r0, [r4, #36]	; 0x24
   dd620:	6006      	str	r6, [r0, #0]
   dd622:	60c6      	str	r6, [r0, #12]
   dd624:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dd626:	68f3      	ldr	r3, [r6, #12]
   dd628:	b183      	cbz	r3, dd64c <_Balloc+0x42>
   dd62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd62c:	68db      	ldr	r3, [r3, #12]
   dd62e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dd632:	b9b8      	cbnz	r0, dd664 <_Balloc+0x5a>
   dd634:	2101      	movs	r1, #1
   dd636:	fa01 f605 	lsl.w	r6, r1, r5
   dd63a:	1d72      	adds	r2, r6, #5
   dd63c:	0092      	lsls	r2, r2, #2
   dd63e:	4620      	mov	r0, r4
   dd640:	f000 fc23 	bl	dde8a <_calloc_r>
   dd644:	b160      	cbz	r0, dd660 <_Balloc+0x56>
   dd646:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dd64a:	e00e      	b.n	dd66a <_Balloc+0x60>
   dd64c:	2221      	movs	r2, #33	; 0x21
   dd64e:	2104      	movs	r1, #4
   dd650:	4620      	mov	r0, r4
   dd652:	f000 fc1a 	bl	dde8a <_calloc_r>
   dd656:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd658:	60f0      	str	r0, [r6, #12]
   dd65a:	68db      	ldr	r3, [r3, #12]
   dd65c:	2b00      	cmp	r3, #0
   dd65e:	d1e4      	bne.n	dd62a <_Balloc+0x20>
   dd660:	2000      	movs	r0, #0
   dd662:	bd70      	pop	{r4, r5, r6, pc}
   dd664:	6802      	ldr	r2, [r0, #0]
   dd666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dd66a:	2300      	movs	r3, #0
   dd66c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dd670:	e7f7      	b.n	dd662 <_Balloc+0x58>

000dd672 <_Bfree>:
   dd672:	b570      	push	{r4, r5, r6, lr}
   dd674:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd676:	4605      	mov	r5, r0
   dd678:	460c      	mov	r4, r1
   dd67a:	b93e      	cbnz	r6, dd68c <_Bfree+0x1a>
   dd67c:	2010      	movs	r0, #16
   dd67e:	f7fa f98d 	bl	d799c <malloc>
   dd682:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd686:	6268      	str	r0, [r5, #36]	; 0x24
   dd688:	6006      	str	r6, [r0, #0]
   dd68a:	60c6      	str	r6, [r0, #12]
   dd68c:	b13c      	cbz	r4, dd69e <_Bfree+0x2c>
   dd68e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dd690:	6862      	ldr	r2, [r4, #4]
   dd692:	68db      	ldr	r3, [r3, #12]
   dd694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dd698:	6021      	str	r1, [r4, #0]
   dd69a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dd69e:	bd70      	pop	{r4, r5, r6, pc}

000dd6a0 <__multadd>:
   dd6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd6a4:	690e      	ldr	r6, [r1, #16]
   dd6a6:	4607      	mov	r7, r0
   dd6a8:	4698      	mov	r8, r3
   dd6aa:	460c      	mov	r4, r1
   dd6ac:	f101 0014 	add.w	r0, r1, #20
   dd6b0:	2300      	movs	r3, #0
   dd6b2:	6805      	ldr	r5, [r0, #0]
   dd6b4:	b2a9      	uxth	r1, r5
   dd6b6:	fb02 8101 	mla	r1, r2, r1, r8
   dd6ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dd6be:	0c2d      	lsrs	r5, r5, #16
   dd6c0:	fb02 c505 	mla	r5, r2, r5, ip
   dd6c4:	b289      	uxth	r1, r1
   dd6c6:	3301      	adds	r3, #1
   dd6c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dd6cc:	429e      	cmp	r6, r3
   dd6ce:	f840 1b04 	str.w	r1, [r0], #4
   dd6d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dd6d6:	dcec      	bgt.n	dd6b2 <__multadd+0x12>
   dd6d8:	f1b8 0f00 	cmp.w	r8, #0
   dd6dc:	d01b      	beq.n	dd716 <__multadd+0x76>
   dd6de:	68a3      	ldr	r3, [r4, #8]
   dd6e0:	42b3      	cmp	r3, r6
   dd6e2:	dc12      	bgt.n	dd70a <__multadd+0x6a>
   dd6e4:	6861      	ldr	r1, [r4, #4]
   dd6e6:	4638      	mov	r0, r7
   dd6e8:	3101      	adds	r1, #1
   dd6ea:	f7ff ff8e 	bl	dd60a <_Balloc>
   dd6ee:	6922      	ldr	r2, [r4, #16]
   dd6f0:	3202      	adds	r2, #2
   dd6f2:	f104 010c 	add.w	r1, r4, #12
   dd6f6:	4605      	mov	r5, r0
   dd6f8:	0092      	lsls	r2, r2, #2
   dd6fa:	300c      	adds	r0, #12
   dd6fc:	f7fe fbb1 	bl	dbe62 <memcpy>
   dd700:	4621      	mov	r1, r4
   dd702:	4638      	mov	r0, r7
   dd704:	f7ff ffb5 	bl	dd672 <_Bfree>
   dd708:	462c      	mov	r4, r5
   dd70a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dd70e:	3601      	adds	r6, #1
   dd710:	f8c3 8014 	str.w	r8, [r3, #20]
   dd714:	6126      	str	r6, [r4, #16]
   dd716:	4620      	mov	r0, r4
   dd718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd71c <__s2b>:
   dd71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd720:	460c      	mov	r4, r1
   dd722:	4615      	mov	r5, r2
   dd724:	461f      	mov	r7, r3
   dd726:	2209      	movs	r2, #9
   dd728:	3308      	adds	r3, #8
   dd72a:	4606      	mov	r6, r0
   dd72c:	fb93 f3f2 	sdiv	r3, r3, r2
   dd730:	2100      	movs	r1, #0
   dd732:	2201      	movs	r2, #1
   dd734:	429a      	cmp	r2, r3
   dd736:	db20      	blt.n	dd77a <__s2b+0x5e>
   dd738:	4630      	mov	r0, r6
   dd73a:	f7ff ff66 	bl	dd60a <_Balloc>
   dd73e:	9b08      	ldr	r3, [sp, #32]
   dd740:	6143      	str	r3, [r0, #20]
   dd742:	2d09      	cmp	r5, #9
   dd744:	f04f 0301 	mov.w	r3, #1
   dd748:	6103      	str	r3, [r0, #16]
   dd74a:	dd19      	ble.n	dd780 <__s2b+0x64>
   dd74c:	f104 0909 	add.w	r9, r4, #9
   dd750:	46c8      	mov	r8, r9
   dd752:	442c      	add	r4, r5
   dd754:	f818 3b01 	ldrb.w	r3, [r8], #1
   dd758:	4601      	mov	r1, r0
   dd75a:	3b30      	subs	r3, #48	; 0x30
   dd75c:	220a      	movs	r2, #10
   dd75e:	4630      	mov	r0, r6
   dd760:	f7ff ff9e 	bl	dd6a0 <__multadd>
   dd764:	45a0      	cmp	r8, r4
   dd766:	d1f5      	bne.n	dd754 <__s2b+0x38>
   dd768:	f1a5 0408 	sub.w	r4, r5, #8
   dd76c:	444c      	add	r4, r9
   dd76e:	1b2d      	subs	r5, r5, r4
   dd770:	1963      	adds	r3, r4, r5
   dd772:	42bb      	cmp	r3, r7
   dd774:	db07      	blt.n	dd786 <__s2b+0x6a>
   dd776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd77a:	0052      	lsls	r2, r2, #1
   dd77c:	3101      	adds	r1, #1
   dd77e:	e7d9      	b.n	dd734 <__s2b+0x18>
   dd780:	340a      	adds	r4, #10
   dd782:	2509      	movs	r5, #9
   dd784:	e7f3      	b.n	dd76e <__s2b+0x52>
   dd786:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd78a:	4601      	mov	r1, r0
   dd78c:	3b30      	subs	r3, #48	; 0x30
   dd78e:	220a      	movs	r2, #10
   dd790:	4630      	mov	r0, r6
   dd792:	f7ff ff85 	bl	dd6a0 <__multadd>
   dd796:	e7eb      	b.n	dd770 <__s2b+0x54>

000dd798 <__hi0bits>:
   dd798:	0c03      	lsrs	r3, r0, #16
   dd79a:	041b      	lsls	r3, r3, #16
   dd79c:	b9d3      	cbnz	r3, dd7d4 <__hi0bits+0x3c>
   dd79e:	0400      	lsls	r0, r0, #16
   dd7a0:	2310      	movs	r3, #16
   dd7a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dd7a6:	bf04      	itt	eq
   dd7a8:	0200      	lsleq	r0, r0, #8
   dd7aa:	3308      	addeq	r3, #8
   dd7ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dd7b0:	bf04      	itt	eq
   dd7b2:	0100      	lsleq	r0, r0, #4
   dd7b4:	3304      	addeq	r3, #4
   dd7b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dd7ba:	bf04      	itt	eq
   dd7bc:	0080      	lsleq	r0, r0, #2
   dd7be:	3302      	addeq	r3, #2
   dd7c0:	2800      	cmp	r0, #0
   dd7c2:	db05      	blt.n	dd7d0 <__hi0bits+0x38>
   dd7c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dd7c8:	f103 0301 	add.w	r3, r3, #1
   dd7cc:	bf08      	it	eq
   dd7ce:	2320      	moveq	r3, #32
   dd7d0:	4618      	mov	r0, r3
   dd7d2:	4770      	bx	lr
   dd7d4:	2300      	movs	r3, #0
   dd7d6:	e7e4      	b.n	dd7a2 <__hi0bits+0xa>

000dd7d8 <__lo0bits>:
   dd7d8:	6803      	ldr	r3, [r0, #0]
   dd7da:	f013 0207 	ands.w	r2, r3, #7
   dd7de:	4601      	mov	r1, r0
   dd7e0:	d00b      	beq.n	dd7fa <__lo0bits+0x22>
   dd7e2:	07da      	lsls	r2, r3, #31
   dd7e4:	d424      	bmi.n	dd830 <__lo0bits+0x58>
   dd7e6:	0798      	lsls	r0, r3, #30
   dd7e8:	bf49      	itett	mi
   dd7ea:	085b      	lsrmi	r3, r3, #1
   dd7ec:	089b      	lsrpl	r3, r3, #2
   dd7ee:	2001      	movmi	r0, #1
   dd7f0:	600b      	strmi	r3, [r1, #0]
   dd7f2:	bf5c      	itt	pl
   dd7f4:	600b      	strpl	r3, [r1, #0]
   dd7f6:	2002      	movpl	r0, #2
   dd7f8:	4770      	bx	lr
   dd7fa:	b298      	uxth	r0, r3
   dd7fc:	b9b0      	cbnz	r0, dd82c <__lo0bits+0x54>
   dd7fe:	0c1b      	lsrs	r3, r3, #16
   dd800:	2010      	movs	r0, #16
   dd802:	f013 0fff 	tst.w	r3, #255	; 0xff
   dd806:	bf04      	itt	eq
   dd808:	0a1b      	lsreq	r3, r3, #8
   dd80a:	3008      	addeq	r0, #8
   dd80c:	071a      	lsls	r2, r3, #28
   dd80e:	bf04      	itt	eq
   dd810:	091b      	lsreq	r3, r3, #4
   dd812:	3004      	addeq	r0, #4
   dd814:	079a      	lsls	r2, r3, #30
   dd816:	bf04      	itt	eq
   dd818:	089b      	lsreq	r3, r3, #2
   dd81a:	3002      	addeq	r0, #2
   dd81c:	07da      	lsls	r2, r3, #31
   dd81e:	d403      	bmi.n	dd828 <__lo0bits+0x50>
   dd820:	085b      	lsrs	r3, r3, #1
   dd822:	f100 0001 	add.w	r0, r0, #1
   dd826:	d005      	beq.n	dd834 <__lo0bits+0x5c>
   dd828:	600b      	str	r3, [r1, #0]
   dd82a:	4770      	bx	lr
   dd82c:	4610      	mov	r0, r2
   dd82e:	e7e8      	b.n	dd802 <__lo0bits+0x2a>
   dd830:	2000      	movs	r0, #0
   dd832:	4770      	bx	lr
   dd834:	2020      	movs	r0, #32
   dd836:	4770      	bx	lr

000dd838 <__i2b>:
   dd838:	b510      	push	{r4, lr}
   dd83a:	460c      	mov	r4, r1
   dd83c:	2101      	movs	r1, #1
   dd83e:	f7ff fee4 	bl	dd60a <_Balloc>
   dd842:	2201      	movs	r2, #1
   dd844:	6144      	str	r4, [r0, #20]
   dd846:	6102      	str	r2, [r0, #16]
   dd848:	bd10      	pop	{r4, pc}

000dd84a <__multiply>:
   dd84a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd84e:	4615      	mov	r5, r2
   dd850:	690a      	ldr	r2, [r1, #16]
   dd852:	692b      	ldr	r3, [r5, #16]
   dd854:	429a      	cmp	r2, r3
   dd856:	bfb8      	it	lt
   dd858:	460b      	movlt	r3, r1
   dd85a:	460c      	mov	r4, r1
   dd85c:	bfbc      	itt	lt
   dd85e:	462c      	movlt	r4, r5
   dd860:	461d      	movlt	r5, r3
   dd862:	6927      	ldr	r7, [r4, #16]
   dd864:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dd868:	68a3      	ldr	r3, [r4, #8]
   dd86a:	6861      	ldr	r1, [r4, #4]
   dd86c:	eb07 0609 	add.w	r6, r7, r9
   dd870:	42b3      	cmp	r3, r6
   dd872:	bfb8      	it	lt
   dd874:	3101      	addlt	r1, #1
   dd876:	b085      	sub	sp, #20
   dd878:	f7ff fec7 	bl	dd60a <_Balloc>
   dd87c:	f100 0114 	add.w	r1, r0, #20
   dd880:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dd884:	460b      	mov	r3, r1
   dd886:	2200      	movs	r2, #0
   dd888:	4543      	cmp	r3, r8
   dd88a:	d31d      	bcc.n	dd8c8 <__multiply+0x7e>
   dd88c:	f104 0314 	add.w	r3, r4, #20
   dd890:	f105 0214 	add.w	r2, r5, #20
   dd894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dd898:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd89c:	9302      	str	r3, [sp, #8]
   dd89e:	1b3b      	subs	r3, r7, r4
   dd8a0:	3b15      	subs	r3, #21
   dd8a2:	f023 0303 	bic.w	r3, r3, #3
   dd8a6:	3304      	adds	r3, #4
   dd8a8:	f104 0515 	add.w	r5, r4, #21
   dd8ac:	42af      	cmp	r7, r5
   dd8ae:	bf38      	it	cc
   dd8b0:	2304      	movcc	r3, #4
   dd8b2:	9301      	str	r3, [sp, #4]
   dd8b4:	9b02      	ldr	r3, [sp, #8]
   dd8b6:	9203      	str	r2, [sp, #12]
   dd8b8:	4293      	cmp	r3, r2
   dd8ba:	d808      	bhi.n	dd8ce <__multiply+0x84>
   dd8bc:	2e00      	cmp	r6, #0
   dd8be:	dc5a      	bgt.n	dd976 <__multiply+0x12c>
   dd8c0:	6106      	str	r6, [r0, #16]
   dd8c2:	b005      	add	sp, #20
   dd8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd8c8:	f843 2b04 	str.w	r2, [r3], #4
   dd8cc:	e7dc      	b.n	dd888 <__multiply+0x3e>
   dd8ce:	f8b2 a000 	ldrh.w	sl, [r2]
   dd8d2:	f1ba 0f00 	cmp.w	sl, #0
   dd8d6:	d024      	beq.n	dd922 <__multiply+0xd8>
   dd8d8:	f104 0e14 	add.w	lr, r4, #20
   dd8dc:	4689      	mov	r9, r1
   dd8de:	f04f 0c00 	mov.w	ip, #0
   dd8e2:	f85e 5b04 	ldr.w	r5, [lr], #4
   dd8e6:	f8d9 b000 	ldr.w	fp, [r9]
   dd8ea:	b2ab      	uxth	r3, r5
   dd8ec:	fa1f fb8b 	uxth.w	fp, fp
   dd8f0:	fb0a b303 	mla	r3, sl, r3, fp
   dd8f4:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dd8f8:	f8d9 5000 	ldr.w	r5, [r9]
   dd8fc:	4463      	add	r3, ip
   dd8fe:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd902:	fb0a c50b 	mla	r5, sl, fp, ip
   dd906:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dd90a:	b29b      	uxth	r3, r3
   dd90c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dd910:	4577      	cmp	r7, lr
   dd912:	f849 3b04 	str.w	r3, [r9], #4
   dd916:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd91a:	d8e2      	bhi.n	dd8e2 <__multiply+0x98>
   dd91c:	9b01      	ldr	r3, [sp, #4]
   dd91e:	f841 c003 	str.w	ip, [r1, r3]
   dd922:	9b03      	ldr	r3, [sp, #12]
   dd924:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dd928:	3204      	adds	r2, #4
   dd92a:	f1b9 0f00 	cmp.w	r9, #0
   dd92e:	d020      	beq.n	dd972 <__multiply+0x128>
   dd930:	680b      	ldr	r3, [r1, #0]
   dd932:	f104 0c14 	add.w	ip, r4, #20
   dd936:	468e      	mov	lr, r1
   dd938:	f04f 0a00 	mov.w	sl, #0
   dd93c:	f8bc 5000 	ldrh.w	r5, [ip]
   dd940:	f8be b002 	ldrh.w	fp, [lr, #2]
   dd944:	fb09 b505 	mla	r5, r9, r5, fp
   dd948:	44aa      	add	sl, r5
   dd94a:	b29b      	uxth	r3, r3
   dd94c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dd950:	f84e 3b04 	str.w	r3, [lr], #4
   dd954:	f85c 3b04 	ldr.w	r3, [ip], #4
   dd958:	f8be 5000 	ldrh.w	r5, [lr]
   dd95c:	0c1b      	lsrs	r3, r3, #16
   dd95e:	fb09 5303 	mla	r3, r9, r3, r5
   dd962:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dd966:	4567      	cmp	r7, ip
   dd968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dd96c:	d8e6      	bhi.n	dd93c <__multiply+0xf2>
   dd96e:	9d01      	ldr	r5, [sp, #4]
   dd970:	514b      	str	r3, [r1, r5]
   dd972:	3104      	adds	r1, #4
   dd974:	e79e      	b.n	dd8b4 <__multiply+0x6a>
   dd976:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dd97a:	2b00      	cmp	r3, #0
   dd97c:	d1a0      	bne.n	dd8c0 <__multiply+0x76>
   dd97e:	3e01      	subs	r6, #1
   dd980:	e79c      	b.n	dd8bc <__multiply+0x72>
	...

000dd984 <__pow5mult>:
   dd984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd988:	4615      	mov	r5, r2
   dd98a:	f012 0203 	ands.w	r2, r2, #3
   dd98e:	4606      	mov	r6, r0
   dd990:	460f      	mov	r7, r1
   dd992:	d007      	beq.n	dd9a4 <__pow5mult+0x20>
   dd994:	4c21      	ldr	r4, [pc, #132]	; (dda1c <__pow5mult+0x98>)
   dd996:	3a01      	subs	r2, #1
   dd998:	2300      	movs	r3, #0
   dd99a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd99e:	f7ff fe7f 	bl	dd6a0 <__multadd>
   dd9a2:	4607      	mov	r7, r0
   dd9a4:	10ad      	asrs	r5, r5, #2
   dd9a6:	d035      	beq.n	dda14 <__pow5mult+0x90>
   dd9a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd9aa:	b93c      	cbnz	r4, dd9bc <__pow5mult+0x38>
   dd9ac:	2010      	movs	r0, #16
   dd9ae:	f7f9 fff5 	bl	d799c <malloc>
   dd9b2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dd9b6:	6270      	str	r0, [r6, #36]	; 0x24
   dd9b8:	6004      	str	r4, [r0, #0]
   dd9ba:	60c4      	str	r4, [r0, #12]
   dd9bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd9c4:	b94c      	cbnz	r4, dd9da <__pow5mult+0x56>
   dd9c6:	f240 2171 	movw	r1, #625	; 0x271
   dd9ca:	4630      	mov	r0, r6
   dd9cc:	f7ff ff34 	bl	dd838 <__i2b>
   dd9d0:	2300      	movs	r3, #0
   dd9d2:	f8c8 0008 	str.w	r0, [r8, #8]
   dd9d6:	4604      	mov	r4, r0
   dd9d8:	6003      	str	r3, [r0, #0]
   dd9da:	f04f 0900 	mov.w	r9, #0
   dd9de:	07eb      	lsls	r3, r5, #31
   dd9e0:	d50a      	bpl.n	dd9f8 <__pow5mult+0x74>
   dd9e2:	4639      	mov	r1, r7
   dd9e4:	4622      	mov	r2, r4
   dd9e6:	4630      	mov	r0, r6
   dd9e8:	f7ff ff2f 	bl	dd84a <__multiply>
   dd9ec:	4639      	mov	r1, r7
   dd9ee:	4680      	mov	r8, r0
   dd9f0:	4630      	mov	r0, r6
   dd9f2:	f7ff fe3e 	bl	dd672 <_Bfree>
   dd9f6:	4647      	mov	r7, r8
   dd9f8:	106d      	asrs	r5, r5, #1
   dd9fa:	d00b      	beq.n	dda14 <__pow5mult+0x90>
   dd9fc:	6820      	ldr	r0, [r4, #0]
   dd9fe:	b938      	cbnz	r0, dda10 <__pow5mult+0x8c>
   dda00:	4622      	mov	r2, r4
   dda02:	4621      	mov	r1, r4
   dda04:	4630      	mov	r0, r6
   dda06:	f7ff ff20 	bl	dd84a <__multiply>
   dda0a:	6020      	str	r0, [r4, #0]
   dda0c:	f8c0 9000 	str.w	r9, [r0]
   dda10:	4604      	mov	r4, r0
   dda12:	e7e4      	b.n	dd9de <__pow5mult+0x5a>
   dda14:	4638      	mov	r0, r7
   dda16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dda1a:	bf00      	nop
   dda1c:	000decd8 	.word	0x000decd8

000dda20 <__lshift>:
   dda20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dda24:	460c      	mov	r4, r1
   dda26:	6849      	ldr	r1, [r1, #4]
   dda28:	6923      	ldr	r3, [r4, #16]
   dda2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dda2e:	68a3      	ldr	r3, [r4, #8]
   dda30:	4607      	mov	r7, r0
   dda32:	4691      	mov	r9, r2
   dda34:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dda38:	f108 0601 	add.w	r6, r8, #1
   dda3c:	42b3      	cmp	r3, r6
   dda3e:	db3f      	blt.n	ddac0 <__lshift+0xa0>
   dda40:	4638      	mov	r0, r7
   dda42:	f7ff fde2 	bl	dd60a <_Balloc>
   dda46:	2300      	movs	r3, #0
   dda48:	4605      	mov	r5, r0
   dda4a:	f100 0114 	add.w	r1, r0, #20
   dda4e:	f100 0210 	add.w	r2, r0, #16
   dda52:	4618      	mov	r0, r3
   dda54:	4553      	cmp	r3, sl
   dda56:	db36      	blt.n	ddac6 <__lshift+0xa6>
   dda58:	6920      	ldr	r0, [r4, #16]
   dda5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dda5e:	f104 0314 	add.w	r3, r4, #20
   dda62:	f019 091f 	ands.w	r9, r9, #31
   dda66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dda6a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dda6e:	d02e      	beq.n	ddace <__lshift+0xae>
   dda70:	f1c9 0e20 	rsb	lr, r9, #32
   dda74:	468a      	mov	sl, r1
   dda76:	2200      	movs	r2, #0
   dda78:	6818      	ldr	r0, [r3, #0]
   dda7a:	fa00 f009 	lsl.w	r0, r0, r9
   dda7e:	4302      	orrs	r2, r0
   dda80:	f84a 2b04 	str.w	r2, [sl], #4
   dda84:	f853 2b04 	ldr.w	r2, [r3], #4
   dda88:	459c      	cmp	ip, r3
   dda8a:	fa22 f20e 	lsr.w	r2, r2, lr
   dda8e:	d8f3      	bhi.n	dda78 <__lshift+0x58>
   dda90:	ebac 0304 	sub.w	r3, ip, r4
   dda94:	3b15      	subs	r3, #21
   dda96:	f023 0303 	bic.w	r3, r3, #3
   dda9a:	3304      	adds	r3, #4
   dda9c:	f104 0015 	add.w	r0, r4, #21
   ddaa0:	4560      	cmp	r0, ip
   ddaa2:	bf88      	it	hi
   ddaa4:	2304      	movhi	r3, #4
   ddaa6:	50ca      	str	r2, [r1, r3]
   ddaa8:	b10a      	cbz	r2, ddaae <__lshift+0x8e>
   ddaaa:	f108 0602 	add.w	r6, r8, #2
   ddaae:	3e01      	subs	r6, #1
   ddab0:	4638      	mov	r0, r7
   ddab2:	612e      	str	r6, [r5, #16]
   ddab4:	4621      	mov	r1, r4
   ddab6:	f7ff fddc 	bl	dd672 <_Bfree>
   ddaba:	4628      	mov	r0, r5
   ddabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddac0:	3101      	adds	r1, #1
   ddac2:	005b      	lsls	r3, r3, #1
   ddac4:	e7ba      	b.n	dda3c <__lshift+0x1c>
   ddac6:	f842 0f04 	str.w	r0, [r2, #4]!
   ddaca:	3301      	adds	r3, #1
   ddacc:	e7c2      	b.n	dda54 <__lshift+0x34>
   ddace:	3904      	subs	r1, #4
   ddad0:	f853 2b04 	ldr.w	r2, [r3], #4
   ddad4:	f841 2f04 	str.w	r2, [r1, #4]!
   ddad8:	459c      	cmp	ip, r3
   ddada:	d8f9      	bhi.n	ddad0 <__lshift+0xb0>
   ddadc:	e7e7      	b.n	ddaae <__lshift+0x8e>

000ddade <__mcmp>:
   ddade:	b530      	push	{r4, r5, lr}
   ddae0:	6902      	ldr	r2, [r0, #16]
   ddae2:	690c      	ldr	r4, [r1, #16]
   ddae4:	1b12      	subs	r2, r2, r4
   ddae6:	d10e      	bne.n	ddb06 <__mcmp+0x28>
   ddae8:	f100 0314 	add.w	r3, r0, #20
   ddaec:	3114      	adds	r1, #20
   ddaee:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ddaf2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ddaf6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ddafa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ddafe:	42a5      	cmp	r5, r4
   ddb00:	d003      	beq.n	ddb0a <__mcmp+0x2c>
   ddb02:	d305      	bcc.n	ddb10 <__mcmp+0x32>
   ddb04:	2201      	movs	r2, #1
   ddb06:	4610      	mov	r0, r2
   ddb08:	bd30      	pop	{r4, r5, pc}
   ddb0a:	4283      	cmp	r3, r0
   ddb0c:	d3f3      	bcc.n	ddaf6 <__mcmp+0x18>
   ddb0e:	e7fa      	b.n	ddb06 <__mcmp+0x28>
   ddb10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ddb14:	e7f7      	b.n	ddb06 <__mcmp+0x28>

000ddb16 <__mdiff>:
   ddb16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddb1a:	460c      	mov	r4, r1
   ddb1c:	4606      	mov	r6, r0
   ddb1e:	4611      	mov	r1, r2
   ddb20:	4620      	mov	r0, r4
   ddb22:	4617      	mov	r7, r2
   ddb24:	f7ff ffdb 	bl	ddade <__mcmp>
   ddb28:	1e05      	subs	r5, r0, #0
   ddb2a:	d108      	bne.n	ddb3e <__mdiff+0x28>
   ddb2c:	4629      	mov	r1, r5
   ddb2e:	4630      	mov	r0, r6
   ddb30:	f7ff fd6b 	bl	dd60a <_Balloc>
   ddb34:	2301      	movs	r3, #1
   ddb36:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ddb3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb3e:	bfa4      	itt	ge
   ddb40:	463b      	movge	r3, r7
   ddb42:	4627      	movge	r7, r4
   ddb44:	4630      	mov	r0, r6
   ddb46:	6879      	ldr	r1, [r7, #4]
   ddb48:	bfa6      	itte	ge
   ddb4a:	461c      	movge	r4, r3
   ddb4c:	2500      	movge	r5, #0
   ddb4e:	2501      	movlt	r5, #1
   ddb50:	f7ff fd5b 	bl	dd60a <_Balloc>
   ddb54:	693e      	ldr	r6, [r7, #16]
   ddb56:	60c5      	str	r5, [r0, #12]
   ddb58:	6925      	ldr	r5, [r4, #16]
   ddb5a:	f107 0114 	add.w	r1, r7, #20
   ddb5e:	f104 0914 	add.w	r9, r4, #20
   ddb62:	f100 0e14 	add.w	lr, r0, #20
   ddb66:	f107 0210 	add.w	r2, r7, #16
   ddb6a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   ddb6e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   ddb72:	46f2      	mov	sl, lr
   ddb74:	2700      	movs	r7, #0
   ddb76:	f859 3b04 	ldr.w	r3, [r9], #4
   ddb7a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ddb7e:	fa1f f883 	uxth.w	r8, r3
   ddb82:	fa17 f78b 	uxtah	r7, r7, fp
   ddb86:	0c1b      	lsrs	r3, r3, #16
   ddb88:	eba7 0808 	sub.w	r8, r7, r8
   ddb8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ddb90:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ddb94:	fa1f f888 	uxth.w	r8, r8
   ddb98:	141f      	asrs	r7, r3, #16
   ddb9a:	454d      	cmp	r5, r9
   ddb9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ddba0:	f84a 3b04 	str.w	r3, [sl], #4
   ddba4:	d8e7      	bhi.n	ddb76 <__mdiff+0x60>
   ddba6:	1b2b      	subs	r3, r5, r4
   ddba8:	3b15      	subs	r3, #21
   ddbaa:	f023 0303 	bic.w	r3, r3, #3
   ddbae:	3304      	adds	r3, #4
   ddbb0:	3415      	adds	r4, #21
   ddbb2:	42a5      	cmp	r5, r4
   ddbb4:	bf38      	it	cc
   ddbb6:	2304      	movcc	r3, #4
   ddbb8:	4419      	add	r1, r3
   ddbba:	4473      	add	r3, lr
   ddbbc:	469e      	mov	lr, r3
   ddbbe:	460d      	mov	r5, r1
   ddbc0:	4565      	cmp	r5, ip
   ddbc2:	d30e      	bcc.n	ddbe2 <__mdiff+0xcc>
   ddbc4:	f10c 0203 	add.w	r2, ip, #3
   ddbc8:	1a52      	subs	r2, r2, r1
   ddbca:	f022 0203 	bic.w	r2, r2, #3
   ddbce:	3903      	subs	r1, #3
   ddbd0:	458c      	cmp	ip, r1
   ddbd2:	bf38      	it	cc
   ddbd4:	2200      	movcc	r2, #0
   ddbd6:	441a      	add	r2, r3
   ddbd8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ddbdc:	b17b      	cbz	r3, ddbfe <__mdiff+0xe8>
   ddbde:	6106      	str	r6, [r0, #16]
   ddbe0:	e7ab      	b.n	ddb3a <__mdiff+0x24>
   ddbe2:	f855 8b04 	ldr.w	r8, [r5], #4
   ddbe6:	fa17 f488 	uxtah	r4, r7, r8
   ddbea:	1422      	asrs	r2, r4, #16
   ddbec:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   ddbf0:	b2a4      	uxth	r4, r4
   ddbf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   ddbf6:	f84e 4b04 	str.w	r4, [lr], #4
   ddbfa:	1417      	asrs	r7, r2, #16
   ddbfc:	e7e0      	b.n	ddbc0 <__mdiff+0xaa>
   ddbfe:	3e01      	subs	r6, #1
   ddc00:	e7ea      	b.n	ddbd8 <__mdiff+0xc2>
	...

000ddc04 <__ulp>:
   ddc04:	b082      	sub	sp, #8
   ddc06:	ed8d 0b00 	vstr	d0, [sp]
   ddc0a:	9b01      	ldr	r3, [sp, #4]
   ddc0c:	4912      	ldr	r1, [pc, #72]	; (ddc58 <__ulp+0x54>)
   ddc0e:	4019      	ands	r1, r3
   ddc10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ddc14:	2900      	cmp	r1, #0
   ddc16:	dd05      	ble.n	ddc24 <__ulp+0x20>
   ddc18:	2200      	movs	r2, #0
   ddc1a:	460b      	mov	r3, r1
   ddc1c:	ec43 2b10 	vmov	d0, r2, r3
   ddc20:	b002      	add	sp, #8
   ddc22:	4770      	bx	lr
   ddc24:	4249      	negs	r1, r1
   ddc26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ddc2a:	ea4f 5021 	mov.w	r0, r1, asr #20
   ddc2e:	f04f 0200 	mov.w	r2, #0
   ddc32:	f04f 0300 	mov.w	r3, #0
   ddc36:	da04      	bge.n	ddc42 <__ulp+0x3e>
   ddc38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ddc3c:	fa41 f300 	asr.w	r3, r1, r0
   ddc40:	e7ec      	b.n	ddc1c <__ulp+0x18>
   ddc42:	f1a0 0114 	sub.w	r1, r0, #20
   ddc46:	291e      	cmp	r1, #30
   ddc48:	bfda      	itte	le
   ddc4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ddc4e:	fa20 f101 	lsrle.w	r1, r0, r1
   ddc52:	2101      	movgt	r1, #1
   ddc54:	460a      	mov	r2, r1
   ddc56:	e7e1      	b.n	ddc1c <__ulp+0x18>
   ddc58:	7ff00000 	.word	0x7ff00000

000ddc5c <__b2d>:
   ddc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddc5e:	6905      	ldr	r5, [r0, #16]
   ddc60:	f100 0714 	add.w	r7, r0, #20
   ddc64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ddc68:	1f2e      	subs	r6, r5, #4
   ddc6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ddc6e:	4620      	mov	r0, r4
   ddc70:	f7ff fd92 	bl	dd798 <__hi0bits>
   ddc74:	f1c0 0320 	rsb	r3, r0, #32
   ddc78:	280a      	cmp	r0, #10
   ddc7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; ddcf8 <__b2d+0x9c>
   ddc7e:	600b      	str	r3, [r1, #0]
   ddc80:	dc14      	bgt.n	ddcac <__b2d+0x50>
   ddc82:	f1c0 0e0b 	rsb	lr, r0, #11
   ddc86:	fa24 f10e 	lsr.w	r1, r4, lr
   ddc8a:	42b7      	cmp	r7, r6
   ddc8c:	ea41 030c 	orr.w	r3, r1, ip
   ddc90:	bf34      	ite	cc
   ddc92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ddc96:	2100      	movcs	r1, #0
   ddc98:	3015      	adds	r0, #21
   ddc9a:	fa04 f000 	lsl.w	r0, r4, r0
   ddc9e:	fa21 f10e 	lsr.w	r1, r1, lr
   ddca2:	ea40 0201 	orr.w	r2, r0, r1
   ddca6:	ec43 2b10 	vmov	d0, r2, r3
   ddcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ddcac:	42b7      	cmp	r7, r6
   ddcae:	bf3a      	itte	cc
   ddcb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ddcb4:	f1a5 0608 	subcc.w	r6, r5, #8
   ddcb8:	2100      	movcs	r1, #0
   ddcba:	380b      	subs	r0, #11
   ddcbc:	d017      	beq.n	ddcee <__b2d+0x92>
   ddcbe:	f1c0 0c20 	rsb	ip, r0, #32
   ddcc2:	fa04 f500 	lsl.w	r5, r4, r0
   ddcc6:	42be      	cmp	r6, r7
   ddcc8:	fa21 f40c 	lsr.w	r4, r1, ip
   ddccc:	ea45 0504 	orr.w	r5, r5, r4
   ddcd0:	bf8c      	ite	hi
   ddcd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ddcd6:	2400      	movls	r4, #0
   ddcd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ddcdc:	fa01 f000 	lsl.w	r0, r1, r0
   ddce0:	fa24 f40c 	lsr.w	r4, r4, ip
   ddce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ddce8:	ea40 0204 	orr.w	r2, r0, r4
   ddcec:	e7db      	b.n	ddca6 <__b2d+0x4a>
   ddcee:	ea44 030c 	orr.w	r3, r4, ip
   ddcf2:	460a      	mov	r2, r1
   ddcf4:	e7d7      	b.n	ddca6 <__b2d+0x4a>
   ddcf6:	bf00      	nop
   ddcf8:	3ff00000 	.word	0x3ff00000

000ddcfc <__d2b>:
   ddcfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ddd00:	4689      	mov	r9, r1
   ddd02:	2101      	movs	r1, #1
   ddd04:	ec57 6b10 	vmov	r6, r7, d0
   ddd08:	4690      	mov	r8, r2
   ddd0a:	f7ff fc7e 	bl	dd60a <_Balloc>
   ddd0e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ddd12:	4604      	mov	r4, r0
   ddd14:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ddd18:	bb35      	cbnz	r5, ddd68 <__d2b+0x6c>
   ddd1a:	2e00      	cmp	r6, #0
   ddd1c:	9301      	str	r3, [sp, #4]
   ddd1e:	d028      	beq.n	ddd72 <__d2b+0x76>
   ddd20:	4668      	mov	r0, sp
   ddd22:	9600      	str	r6, [sp, #0]
   ddd24:	f7ff fd58 	bl	dd7d8 <__lo0bits>
   ddd28:	9900      	ldr	r1, [sp, #0]
   ddd2a:	b300      	cbz	r0, ddd6e <__d2b+0x72>
   ddd2c:	9a01      	ldr	r2, [sp, #4]
   ddd2e:	f1c0 0320 	rsb	r3, r0, #32
   ddd32:	fa02 f303 	lsl.w	r3, r2, r3
   ddd36:	430b      	orrs	r3, r1
   ddd38:	40c2      	lsrs	r2, r0
   ddd3a:	6163      	str	r3, [r4, #20]
   ddd3c:	9201      	str	r2, [sp, #4]
   ddd3e:	9b01      	ldr	r3, [sp, #4]
   ddd40:	61a3      	str	r3, [r4, #24]
   ddd42:	2b00      	cmp	r3, #0
   ddd44:	bf14      	ite	ne
   ddd46:	2202      	movne	r2, #2
   ddd48:	2201      	moveq	r2, #1
   ddd4a:	6122      	str	r2, [r4, #16]
   ddd4c:	b1d5      	cbz	r5, ddd84 <__d2b+0x88>
   ddd4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ddd52:	4405      	add	r5, r0
   ddd54:	f8c9 5000 	str.w	r5, [r9]
   ddd58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ddd5c:	f8c8 0000 	str.w	r0, [r8]
   ddd60:	4620      	mov	r0, r4
   ddd62:	b003      	add	sp, #12
   ddd64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ddd68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ddd6c:	e7d5      	b.n	ddd1a <__d2b+0x1e>
   ddd6e:	6161      	str	r1, [r4, #20]
   ddd70:	e7e5      	b.n	ddd3e <__d2b+0x42>
   ddd72:	a801      	add	r0, sp, #4
   ddd74:	f7ff fd30 	bl	dd7d8 <__lo0bits>
   ddd78:	9b01      	ldr	r3, [sp, #4]
   ddd7a:	6163      	str	r3, [r4, #20]
   ddd7c:	2201      	movs	r2, #1
   ddd7e:	6122      	str	r2, [r4, #16]
   ddd80:	3020      	adds	r0, #32
   ddd82:	e7e3      	b.n	ddd4c <__d2b+0x50>
   ddd84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ddd88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ddd8c:	f8c9 0000 	str.w	r0, [r9]
   ddd90:	6918      	ldr	r0, [r3, #16]
   ddd92:	f7ff fd01 	bl	dd798 <__hi0bits>
   ddd96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ddd9a:	e7df      	b.n	ddd5c <__d2b+0x60>

000ddd9c <__ratio>:
   ddd9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddda0:	4688      	mov	r8, r1
   ddda2:	4669      	mov	r1, sp
   ddda4:	4681      	mov	r9, r0
   ddda6:	f7ff ff59 	bl	ddc5c <__b2d>
   dddaa:	a901      	add	r1, sp, #4
   dddac:	4640      	mov	r0, r8
   dddae:	ec55 4b10 	vmov	r4, r5, d0
   dddb2:	f7ff ff53 	bl	ddc5c <__b2d>
   dddb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dddba:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dddbe:	eba3 0c02 	sub.w	ip, r3, r2
   dddc2:	e9dd 3200 	ldrd	r3, r2, [sp]
   dddc6:	1a9b      	subs	r3, r3, r2
   dddc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dddcc:	ec51 0b10 	vmov	r0, r1, d0
   dddd0:	2b00      	cmp	r3, #0
   dddd2:	bfd6      	itet	le
   dddd4:	460a      	movle	r2, r1
   dddd6:	462a      	movgt	r2, r5
   dddd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ddddc:	468b      	mov	fp, r1
   dddde:	462f      	mov	r7, r5
   ddde0:	bfd4      	ite	le
   ddde2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ddde6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dddea:	4620      	mov	r0, r4
   dddec:	ee10 2a10 	vmov	r2, s0
   dddf0:	465b      	mov	r3, fp
   dddf2:	4639      	mov	r1, r7
   dddf4:	f7fd fe02 	bl	db9fc <__aeabi_ddiv>
   dddf8:	ec41 0b10 	vmov	d0, r0, r1
   dddfc:	b003      	add	sp, #12
   dddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dde02 <__copybits>:
   dde02:	3901      	subs	r1, #1
   dde04:	b570      	push	{r4, r5, r6, lr}
   dde06:	1149      	asrs	r1, r1, #5
   dde08:	6914      	ldr	r4, [r2, #16]
   dde0a:	3101      	adds	r1, #1
   dde0c:	f102 0314 	add.w	r3, r2, #20
   dde10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dde14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dde18:	1f05      	subs	r5, r0, #4
   dde1a:	42a3      	cmp	r3, r4
   dde1c:	d30c      	bcc.n	dde38 <__copybits+0x36>
   dde1e:	1aa3      	subs	r3, r4, r2
   dde20:	3b11      	subs	r3, #17
   dde22:	f023 0303 	bic.w	r3, r3, #3
   dde26:	3211      	adds	r2, #17
   dde28:	42a2      	cmp	r2, r4
   dde2a:	bf88      	it	hi
   dde2c:	2300      	movhi	r3, #0
   dde2e:	4418      	add	r0, r3
   dde30:	2300      	movs	r3, #0
   dde32:	4288      	cmp	r0, r1
   dde34:	d305      	bcc.n	dde42 <__copybits+0x40>
   dde36:	bd70      	pop	{r4, r5, r6, pc}
   dde38:	f853 6b04 	ldr.w	r6, [r3], #4
   dde3c:	f845 6f04 	str.w	r6, [r5, #4]!
   dde40:	e7eb      	b.n	dde1a <__copybits+0x18>
   dde42:	f840 3b04 	str.w	r3, [r0], #4
   dde46:	e7f4      	b.n	dde32 <__copybits+0x30>

000dde48 <__any_on>:
   dde48:	f100 0214 	add.w	r2, r0, #20
   dde4c:	6900      	ldr	r0, [r0, #16]
   dde4e:	114b      	asrs	r3, r1, #5
   dde50:	4298      	cmp	r0, r3
   dde52:	b510      	push	{r4, lr}
   dde54:	db11      	blt.n	dde7a <__any_on+0x32>
   dde56:	dd0a      	ble.n	dde6e <__any_on+0x26>
   dde58:	f011 011f 	ands.w	r1, r1, #31
   dde5c:	d007      	beq.n	dde6e <__any_on+0x26>
   dde5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dde62:	fa24 f001 	lsr.w	r0, r4, r1
   dde66:	fa00 f101 	lsl.w	r1, r0, r1
   dde6a:	428c      	cmp	r4, r1
   dde6c:	d10b      	bne.n	dde86 <__any_on+0x3e>
   dde6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dde72:	4293      	cmp	r3, r2
   dde74:	d803      	bhi.n	dde7e <__any_on+0x36>
   dde76:	2000      	movs	r0, #0
   dde78:	bd10      	pop	{r4, pc}
   dde7a:	4603      	mov	r3, r0
   dde7c:	e7f7      	b.n	dde6e <__any_on+0x26>
   dde7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dde82:	2900      	cmp	r1, #0
   dde84:	d0f5      	beq.n	dde72 <__any_on+0x2a>
   dde86:	2001      	movs	r0, #1
   dde88:	e7f6      	b.n	dde78 <__any_on+0x30>

000dde8a <_calloc_r>:
   dde8a:	b513      	push	{r0, r1, r4, lr}
   dde8c:	434a      	muls	r2, r1
   dde8e:	4611      	mov	r1, r2
   dde90:	9201      	str	r2, [sp, #4]
   dde92:	f7f9 fdb3 	bl	d79fc <_malloc_r>
   dde96:	4604      	mov	r4, r0
   dde98:	b118      	cbz	r0, ddea2 <_calloc_r+0x18>
   dde9a:	9a01      	ldr	r2, [sp, #4]
   dde9c:	2100      	movs	r1, #0
   dde9e:	f7fe f808 	bl	dbeb2 <memset>
   ddea2:	4620      	mov	r0, r4
   ddea4:	b002      	add	sp, #8
   ddea6:	bd10      	pop	{r4, pc}

000ddea8 <__ascii_wctomb>:
   ddea8:	b149      	cbz	r1, ddebe <__ascii_wctomb+0x16>
   ddeaa:	2aff      	cmp	r2, #255	; 0xff
   ddeac:	bf85      	ittet	hi
   ddeae:	238a      	movhi	r3, #138	; 0x8a
   ddeb0:	6003      	strhi	r3, [r0, #0]
   ddeb2:	700a      	strbls	r2, [r1, #0]
   ddeb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   ddeb8:	bf98      	it	ls
   ddeba:	2001      	movls	r0, #1
   ddebc:	4770      	bx	lr
   ddebe:	4608      	mov	r0, r1
   ddec0:	4770      	bx	lr
	...

000ddec4 <__aeabi_d2lz>:
   ddec4:	b538      	push	{r3, r4, r5, lr}
   ddec6:	2200      	movs	r2, #0
   ddec8:	2300      	movs	r3, #0
   ddeca:	4604      	mov	r4, r0
   ddecc:	460d      	mov	r5, r1
   ddece:	f7fd fedd 	bl	dbc8c <__aeabi_dcmplt>
   dded2:	b928      	cbnz	r0, ddee0 <__aeabi_d2lz+0x1c>
   dded4:	4620      	mov	r0, r4
   dded6:	4629      	mov	r1, r5
   dded8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ddedc:	f7fd bf96 	b.w	dbe0c <__aeabi_d2ulz>
   ddee0:	4620      	mov	r0, r4
   ddee2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ddee6:	f7fd ff91 	bl	dbe0c <__aeabi_d2ulz>
   ddeea:	4240      	negs	r0, r0
   ddeec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddef0:	bd38      	pop	{r3, r4, r5, pc}
   ddef2:	bf00      	nop

000ddef4 <dynalib_user>:
   ddef4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   ddf04:	0000 0000 6574 706d 665f 6800 6d75 6469     ....temp_f.humid
   ddf14:	7469 0079 6973 6e67 6c61 735f 7274 6e65     ity.signal_stren
   ddf24:	7467 0068 6973 6e67 6c61 715f 6175 696c     gth.signal_quali
   ddf34:	7974 7000 7265 6563 746e 635f 6168 6772     ty.percent_charg
   ddf44:	0065 6f6c 676e 7469 6475 0065 616c 6974     e.longitude.lati
   ddf54:	7574 6564 6100 746c 7469 6475 0065 6625     tude.altitude.%f
   ddf64:	5600 6c61 6575 2073 6573 746e 6220 2079     .Values sent by 
   ddf74:	6874 2065 6564 6976 6563 7000 736f 7469     the device.posit
   ddf84:	6f69 006e 6554 706d 7265 7461 7275 2065     ion.Temperature 
   ddf94:	6e69 4620 6861 6572 686e 6965 0074 7548     in Fahrenheit.Hu
   ddfa4:	696d 6964 7974 4200 7461 6574 7972 7400     midity.Battery.t
   ddfb4:	6d65 5f70 0063 6f76 746c 6761 0065 7165     emp_c.voltage.eq
   ddfc4:	6975 6d70 6e65 5f74 6572 6461 6e69 7367     uipment_readings
   ddfd4:	0000 0000                                   ....

000ddfd8 <_ZTVN5spark10LogHandlerE>:
	...
   ddfe8:	40a5 000d 40c9 000d                         .@...@..

000ddff0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   ddff8:	4101 000d 4135 000d 9661 000d 40cb 000d     .A..5A..a....@..

000de008 <_ZTV16JsonWriterStaticILj256EE>:
	...
   de010:	40d5 000d 40e9 000d 6255 6469 746f 0073     .@...@..Ubidots.
   de020:	5047 4d52 0043 4e47 4d52 0043 5047 4747     GPRMC.GNRMC.GPGG
   de030:	0041 4e47 4747 0041 6564 6166 6c75 2074     A.GNGGA.default 
   de040:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   de050:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   de060:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   de070:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000de07c <_ZTVN8particle11SPISettingsE>:
	...
   de084:	4fd9 000d 4fab 000d 4fad 000d 755c 3025     .O...O...O..\u%0
   de094:	5834 2500 2a2e 666c 2500 666c 0000 0000     4X.%.*lf.%lf....

000de0a4 <_ZTV10JsonBuffer>:
	...
   de0ac:	572d 000d 5749 000d                         -W..IW..

000de0b4 <_ZTV10JsonWriter>:
	...
   de0bc:	575d 000d 5771 000d 6255 6469 746f 5073     ]W..qW..UbidotsP
   de0cc:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   de0dc:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   de0ec:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   de0fc:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   de10c:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   de11c:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   de12c:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   de13c:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   de14c:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   de15c:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   de16c:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   de17c:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   de18c:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   de19c:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   de1ac:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   de1bc:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   de1cc:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   de1dc:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   de1ec:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   de1fc:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   de20c:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   de21c:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   de22c:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   de23c:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   de24c:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   de25c:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   de26c:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   de27c:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   de28c:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   de29c:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   de2ac:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   de2bc:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   de2cc:	7254 2079 6741 6961 006e 0000               Try Again...

000de2d8 <_ZTV7UbiHTTP>:
	...
   de2e0:	6029 000d 6259 000d 5dd5 000d 5dd9 000d     )`..Yb...]...]..

000de2f0 <_ZTV11UbiParticle>:
	...
   de2f8:	6461 000d 6441 000d 644d 000d 6451 000d     ad..Ad..Md..Qd..
   de308:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   de318:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   de328:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   de338:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   de348:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   de358:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   de368:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   de378:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   de388:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   de398:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   de3a8:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   de3b8:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   de3c8:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   de3d8:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   de3e8:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   de3f8:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   de408:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   de418:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   de428:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   de438:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   de448:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   de458:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   de468:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000de478 <_ZTV6UbiTCP>:
	...
   de480:	6ce1 000d 6d85 000d 6a31 000d 6fe1 000d     .l...m..1j...o..
   de490:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   de4a0:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   de4b0:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   de4c0:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   de4d0:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   de4e0:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   de4f0:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   de500:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   de510:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   de520:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   de530:	7720 7469 2068 4455 0050 0000                with UDP...

000de53c <_ZTV6UbiUDP>:
	...
   de544:	7131 000d 70d1 000d 70dd 000d 70e1 000d     1q...p...p...p..
   de554:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   de564:	6962 6f64 7374 632e 6d6f 5900 756f 6120     bidots.com.You a
   de574:	6572 6120 6464 6e69 2067 6f6d 6572 7420     re adding more t
   de584:	6168 206e 6874 2065 616d 6978 756d 206d     han the maximum 
   de594:	666f 6320 6e6f 6573 7563 6974 6576 6b20     of consecutive k
   de5a4:	7965 762d 6c61 6575 2073 6170 7269 0073     ey-values pairs.
   de5b4:	7325 7325 253d 0073 7325 0024 7325 2522     %s%s=%s.%s$.%s"%
   de5c4:	2273 223a 7325 0022                         s":"%s".

000de5cc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000de5d4 <_ZTVN5spark13CellularClassE>:
	...
   de5dc:	7ad7 000d 7acd 000d 7ac3 000d 7a79 000d     .z...z...z..yz..
   de5ec:	7ab7 000d 7aab 000d 99b9 000d 99c1 000d     .z...z..........
   de5fc:	7a9f 000d 7a97 000d 7a8d 000d 7a83 000d     .z...z...z...z..
   de60c:	99f1 000d                                   ....

000de610 <_ZTV14CellularSignal>:
	...
   de618:	7b85 000d 7bad 000d 7b87 000d 7bbd 000d     .{...{...{...{..
   de628:	7bf1 000d 7c1d 000d 7c51 000d 7ca1 000d     .{...|..Q|...|..
   de638:	7b8b 000d 7ba7 000d fffc ffff 0000 0000     .{...{..........
   de648:	7cc7 000d                                   .|..

000de64c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de654:	7ce7 000d 7ced 000d 7d2b 000d 7cfb 000d     .|...|..+}...|..
   de664:	7ce9 000d                                   .|..

000de668 <_ZTVN5spark13EthernetClassE>:
	...
   de670:	82a3 000d 8299 000d 828f 000d 8285 000d     ................
   de680:	8279 000d 826d 000d 99b9 000d 99c1 000d     y...m...........
   de690:	8261 000d 8259 000d 824f 000d 8245 000d     a...Y...O...E...
   de6a0:	99f1 000d                                   ....

000de6a4 <_ZTV7TwoWire>:
	...
   de6ac:	83c9 000d 8413 000d 83eb 000d 83cb 000d     ................
   de6bc:	83f3 000d 83fb 000d 8403 000d 840b 000d     ................

000de6cc <_ZTV9IPAddress>:
	...
   de6d4:	8523 000d 8513 000d 8515 000d 7525 7500     #...........%u.u
   de6e4:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   de6f4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   de704:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   de714:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   de724:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   de734:	0069 6564 6174 6c69 2073 203d 6c00 006e     i.details = .ln.
   de744:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..

000de754 <_ZTVN5spark16JSONStreamWriterE>:
	...
   de75c:	8a29 000d 8a4f 000d 8a0d 000d 866b 000d     )...O.......k...

000de76c <_ZTVN5spark16StreamLogHandlerE>:
	...
   de774:	8e7d 000d 8e95 000d 9661 000d 40cb 000d     }.......a....@..

000de784 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   de78c:	8ea9 000d 8ebd 000d 9805 000d 8a15 000d     ................

000de79c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   de7a4:	8a27 000d 8a5d 000d 959d 000d 8a17 000d     '...]...........

000de7b4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   de7bc:	8a25 000d 8a6b 000d 8dc5 000d 8a89 000d     %...k...........

000de7cc <_ZTVN5spark12NetworkClassE>:
	...
   de7d4:	9979 000d 9983 000d 998d 000d 9997 000d     y...............
   de7e4:	99a1 000d 99ad 000d 99b9 000d 99c1 000d     ................
   de7f4:	99c9 000d 99d5 000d 99dd 000d 99e7 000d     ................
   de804:	99f1 000d                                   ....

000de808 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   de808:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   de818:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000de828 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de830:	9ff7 000d a019 000d a53f 000d a027 000d     ........?...'...
   de840:	9ff9 000d                                   ....

000de844 <_ZTV9TCPClient>:
	...
   de84c:	a0a5 000d a0d9 000d 9f75 000d 9f8f 000d     ........u.......
   de85c:	a3c9 000d a13b 000d a10d 000d 9fb9 000d     ....;...........
   de86c:	a2d1 000d a1c5 000d a16f 000d a47d 000d     ........o...}...
   de87c:	9fbb 000d 9fed 000d 9fa1 000d a02b 000d     ............+...
   de88c:	a0ed 000d 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   de89c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000de8ac <_ZTV3UDP>:
	...
   de8b4:	aadd 000d ab01 000d a579 000d a6a1 000d     ........y.......
   de8c4:	a571 000d a591 000d a5af 000d a5c9 000d     q...............
   de8d4:	a5ed 000d a685 000d a983 000d a729 000d     ............)...
   de8e4:	a8a1 000d a559 000d aa6d 000d a829 000d     ....Y...m...)...
   de8f4:	a761 000d aa9b 000d a6cb 000d a567 000d     a...........g...
   de904:	a709 000d a56d 000d a5cb 000d fff0 ffff     ....m...........
   de914:	0000 0000 a5e5 000d                         ........

000de91c <_ZTV11USARTSerial>:
	...
   de924:	ab15 000d ab83 000d ab5b 000d 9ad9 000d     ........[.......
   de934:	ab2b 000d ab47 000d ab39 000d ab55 000d     +...G...9...U...
   de944:	ab17 000d ab1d 000d                         ........

000de94c <_ZTV9USBSerial>:
	...
   de954:	ac23 000d ac8b 000d ac61 000d 9ad9 000d     #.......a.......
   de964:	ac53 000d ac25 000d ac35 000d ac85 000d     S...%...5.......
   de974:	ac45 000d ac1d 000d                         E.......

000de97c <_ZSt7nothrow>:
	...

000de97d <_ZTSSt19_Sp_make_shared_tag>:
   de97d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   de98d:	6572 5f64 6174 0067 0000                     red_tag....

000de998 <_ZTISt19_Sp_make_shared_tag>:
   de998:	e9d8 000d e97d 000d                         ....}...

000de9a0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   de9a0:	ea38 000d e9ac 000d ea5c 000d               8.......\...

000de9ac <_ZTSN10__cxxabiv117__class_type_infoE>:
   de9ac:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   de9bc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   de9cc:	0045 0000                                   E...

000de9d0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   de9d0:	0000 0000 e9a0 000d b245 000d b259 000d     ........E...Y...
   de9e0:	b3ed 000d b3ed 000d b2c3 000d b205 000d     ................
   de9f0:	b2ab 000d b26d 000d b239 000d               ....m...9...

000de9fc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   de9fc:	ea38 000d ea08 000d e9a0 000d               8...........

000dea08 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dea08:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dea18:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dea28:	666e 456f 0000 0000                         nfoE....

000dea30 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dea30:	0000 0000 e9fc 000d b2ed 000d b301 000d     ................
   dea40:	b3ed 000d b3ed 000d b2c3 000d b205 000d     ................
   dea50:	b3c1 000d b34d 000d b315 000d               ....M.......

000dea5c <_ZTISt9type_info>:
   dea5c:	e9d8 000d ea64 000d                         ....d...

000dea64 <_ZTSSt9type_info>:
   dea64:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   dea74:	6e69 7469 0079 6e61 0000 0000               inity.an....

000dea80 <fpi.7566>:
   dea80:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dea90:	0000 0000                                   ....

000dea94 <fpinan.7602>:
   dea94:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   deaa4:	0000 0000                                   ....

000deaa8 <tinytens>:
   deaa8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   deab8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   deac8:	6f43 64ac 0628 1168                         Co.d(.h.

000dead0 <_ctype_>:
   dead0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   deae0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   deaf0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   deb00:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   deb10:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   deb20:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   deb30:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   deb40:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   deb50:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000debd4 <_C_numeric_locale>:
   debd4:	e22a 000d e2af 000d e090 2003 4f50 4953     *.......... POSI
   debe4:	0058 0000                                   X...

000debe8 <__mprec_bigtens>:
   debe8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   debf8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dec08:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dec10 <__mprec_tens>:
   dec10:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dec20:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dec30:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dec40:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dec50:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dec60:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dec70:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dec80:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dec90:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   deca0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   decb0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   decc0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   decd0:	9db4 79d9 7843 44ea                         ...yCx.D

000decd8 <p05.7490>:
   decd8:	0005 0000 0019 0000 007d 0000               ........}...

000dece4 <link_const_variable_data_end>:
   dece4:	000d4909 	.word	0x000d4909
   dece8:	000d5db1 	.word	0x000d5db1
   decec:	000d6435 	.word	0x000d6435
   decf0:	000d6a01 	.word	0x000d6a01
   decf4:	000d70c5 	.word	0x000d70c5
   decf8:	000d7111 	.word	0x000d7111
   decfc:	000d7a69 	.word	0x000d7a69
   ded00:	000d7b55 	.word	0x000d7b55
   ded04:	000d82ad 	.word	0x000d82ad
   ded08:	000d9651 	.word	0x000d9651
   ded0c:	000d9ac5 	.word	0x000d9ac5
   ded10:	000d9c01 	.word	0x000d9c01
   ded14:	000d9f51 	.word	0x000d9f51
   ded18:	000da545 	.word	0x000da545

000ded1c <link_constructors_end>:
   ded1c:	00000000 	.word	0x00000000
