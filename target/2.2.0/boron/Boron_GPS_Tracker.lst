
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/2.2.0/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d99c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e318  000d99c4  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000044c  2003e3a8  2003e3a8  0002e3a8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000d9a50  000d9a50  00029a50  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d9a7c  000d9a7c  00029a7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b2bef  00000000  00000000  00029a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bf28  00000000  00000000  001dc66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00036116  00000000  00000000  001f8597  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003218  00000000  00000000  0022e6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008e58  00000000  00000000  002318c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f16c  00000000  00000000  0023a71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00047144  00000000  00000000  00279889  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115abf  00000000  00000000  002c09cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008d40  00000000  00000000  003d648c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f849 	bl	d90c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f86b 	bl	d9118 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e318 	.word	0x2003e318
   d404c:	000d99c4 	.word	0x000d99c4
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e3a8 	.word	0x2003e3a8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fae7 	bl	d8634 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9990 	.word	0x000d9990
   d4080:	000d99b4 	.word	0x000d99b4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b860 	b.w	d4148 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9fd 	bl	d4488 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 ba87 	b.w	d85a4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 be71 	b.w	d5d7c <malloc>

000d409a <_Znaj>:
   d409a:	f001 be6f 	b.w	d5d7c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 be75 	b.w	d5d8c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fd90 	bl	d5bd0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d58d1 	.word	0x000d58d1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 fa7e 	bl	d55dc <_ZN10JsonWriterD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000d9520 	.word	0x000d9520

000d40e8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f6:	f004 fbdd 	bl	d88b4 <_ZdlPvj>
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
	...

000d4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
   d4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4108:	f002 ffa0 	bl	d704c <_ZN5spark10LogManager8instanceEv>
   d410c:	4621      	mov	r1, r4
   d410e:	f003 f99e 	bl	d744e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4112:	f004 f9ff 	bl	d8514 <_Z16_fetch_usbserialv>
   d4116:	f004 f9f1 	bl	d84fc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411a:	4620      	mov	r0, r4
   d411c:	4b04      	ldr	r3, [pc, #16]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411e:	f840 3b04 	str.w	r3, [r0], #4
   d4122:	f003 f881 	bl	d7228 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	000d9508 	.word	0x000d9508
   d4130:	000d94f0 	.word	0x000d94f0

000d4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
    }
   d4138:	f7ff ffe2 	bl	d4100 <_ZN5spark16SerialLogHandlerD1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2124      	movs	r1, #36	; 0x24
   d4140:	f004 fbb8 	bl	d88b4 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <setup>:

// product/version
PRODUCT_ID(16112)
PRODUCT_VERSION(1)

void setup() {
   d4148:	b510      	push	{r4, lr}
    //setup serial port
    Serial.begin(9600);
   d414a:	f004 f9e3 	bl	d8514 <_Z16_fetch_usbserialv>
   d414e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4152:	f004 f9cf 	bl	d84f4 <_ZN9USBSerial5beginEl>
  
    //setup GPS port
    Serial1.begin(9600);
   d4156:	f004 f955 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415e:	f004 f94b 	bl	d83f8 <_ZN11USARTSerial5beginEm>

    //setup BME sensor
    bme.begin();
   d4162:	481a      	ldr	r0, [pc, #104]	; (d41cc <setup+0x84>)
   d4164:	f001 fa0f 	bl	d5586 <_ZN15Adafruit_BME2805beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4168:	4919      	ldr	r1, [pc, #100]	; (d41d0 <setup+0x88>)
   d416a:	481a      	ldr	r0, [pc, #104]	; (d41d4 <setup+0x8c>)
   d416c:	2300      	movs	r3, #0
   d416e:	2202      	movs	r2, #2
   d4170:	f001 fd84 	bl	d5c7c <spark_variable>
   d4174:	4918      	ldr	r1, [pc, #96]	; (d41d8 <setup+0x90>)
   d4176:	4819      	ldr	r0, [pc, #100]	; (d41dc <setup+0x94>)
   d4178:	2300      	movs	r3, #0
   d417a:	2202      	movs	r2, #2
   d417c:	f001 fd7e 	bl	d5c7c <spark_variable>
   d4180:	4917      	ldr	r1, [pc, #92]	; (d41e0 <setup+0x98>)
   d4182:	4818      	ldr	r0, [pc, #96]	; (d41e4 <setup+0x9c>)
   d4184:	2300      	movs	r3, #0
   d4186:	2202      	movs	r2, #2
   d4188:	f001 fd78 	bl	d5c7c <spark_variable>
   d418c:	4916      	ldr	r1, [pc, #88]	; (d41e8 <setup+0xa0>)
   d418e:	4817      	ldr	r0, [pc, #92]	; (d41ec <setup+0xa4>)
   d4190:	2300      	movs	r3, #0
   d4192:	2202      	movs	r2, #2
   d4194:	f001 fd72 	bl	d5c7c <spark_variable>
   d4198:	4915      	ldr	r1, [pc, #84]	; (d41f0 <setup+0xa8>)
   d419a:	4816      	ldr	r0, [pc, #88]	; (d41f4 <setup+0xac>)
   d419c:	2300      	movs	r3, #0
   d419e:	2202      	movs	r2, #2
   d41a0:	f001 fd6c 	bl	d5c7c <spark_variable>
   d41a4:	4914      	ldr	r1, [pc, #80]	; (d41f8 <setup+0xb0>)
   d41a6:	4815      	ldr	r0, [pc, #84]	; (d41fc <setup+0xb4>)
   d41a8:	2300      	movs	r3, #0
   d41aa:	2209      	movs	r2, #9
   d41ac:	f001 fd66 	bl	d5c7c <spark_variable>
   d41b0:	4913      	ldr	r1, [pc, #76]	; (d4200 <setup+0xb8>)
   d41b2:	4814      	ldr	r0, [pc, #80]	; (d4204 <setup+0xbc>)
   d41b4:	2300      	movs	r3, #0
   d41b6:	2209      	movs	r2, #9
   d41b8:	f001 fd60 	bl	d5c7c <spark_variable>
    Particle.variable("percent_charge", percent_charge);    
    Particle.variable("longitude", &longitude, DOUBLE);
    Particle.variable("latitude", &latitude, DOUBLE);
    Particle.variable("altitude", &altitude, DOUBLE);

}
   d41bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41c0:	4911      	ldr	r1, [pc, #68]	; (d4208 <setup+0xc0>)
   d41c2:	4812      	ldr	r0, [pc, #72]	; (d420c <setup+0xc4>)
   d41c4:	2300      	movs	r3, #0
   d41c6:	2209      	movs	r2, #9
   d41c8:	f001 bd58 	b.w	d5c7c <spark_variable>
   d41cc:	2003e3b8 	.word	0x2003e3b8
   d41d0:	2003e530 	.word	0x2003e530
   d41d4:	000d9468 	.word	0x000d9468
   d41d8:	2003e4dc 	.word	0x2003e4dc
   d41dc:	000d946f 	.word	0x000d946f
   d41e0:	2003e528 	.word	0x2003e528
   d41e4:	000d9478 	.word	0x000d9478
   d41e8:	2003e524 	.word	0x2003e524
   d41ec:	000d9488 	.word	0x000d9488
   d41f0:	2003e520 	.word	0x2003e520
   d41f4:	000d9497 	.word	0x000d9497
   d41f8:	2003e518 	.word	0x2003e518
   d41fc:	000d94a6 	.word	0x000d94a6
   d4200:	2003e4e8 	.word	0x2003e4e8
   d4204:	000d94b0 	.word	0x000d94b0
   d4208:	2003e3b0 	.word	0x2003e3b0
   d420c:	000d94b9 	.word	0x000d94b9

000d4210 <_Z6getGPSv>:
        last_latitude = latitude;
        last_longitude = longitude;
    }
}

void getGPS() {
   d4210:	e92d 43df 	stmdb	sp!, {r0, r1, r2, r3, r4, r6, r7, r8, r9, lr}
struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4214:	a72a      	add	r7, pc, #168	; (adr r7, d42c0 <_Z6getGPSv+0xb0>)
   d4216:	e9d7 6700 	ldrd	r6, r7, [r7]
    while(Serial1.available())
    {
        if(gps.encode(Serial1.read()))
   d421a:	4c25      	ldr	r4, [pc, #148]	; (d42b0 <_Z6getGPSv+0xa0>)
   d421c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d42c8 <_Z6getGPSv+0xb8>
   d4220:	f04f 0800 	mov.w	r8, #0
    while(Serial1.available())
   d4224:	f004 f8ee 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d4228:	6803      	ldr	r3, [r0, #0]
   d422a:	691b      	ldr	r3, [r3, #16]
   d422c:	4798      	blx	r3
   d422e:	2800      	cmp	r0, #0
   d4230:	d03b      	beq.n	d42aa <_Z6getGPSv+0x9a>
        if(gps.encode(Serial1.read()))
   d4232:	f004 f8e7 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d4236:	6803      	ldr	r3, [r0, #0]
   d4238:	695b      	ldr	r3, [r3, #20]
   d423a:	4798      	blx	r3
   d423c:	b2c1      	uxtb	r1, r0
   d423e:	481c      	ldr	r0, [pc, #112]	; (d42b0 <_Z6getGPSv+0xa0>)
   d4240:	f000 fda0 	bl	d4d84 <_ZN11TinyGPSPlus6encodeEc>
   d4244:	2800      	cmp	r0, #0
   d4246:	d0ed      	beq.n	d4224 <_Z6getGPSv+0x14>
        {
            String msg = Serial1.readStringUntil('\r');
   d4248:	f004 f8dc 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d424c:	220d      	movs	r2, #13
   d424e:	4601      	mov	r1, r0
   d4250:	4668      	mov	r0, sp
   d4252:	f003 ff7f 	bl	d8154 <_ZN6Stream15readStringUntilEc>
            Serial.println(msg);
   d4256:	f004 f95d 	bl	d8514 <_Z16_fetch_usbserialv>
   d425a:	9900      	ldr	r1, [sp, #0]
   d425c:	f003 fe57 	bl	d7f0e <_ZN5Print7printlnEPKc>

            if (gps.sentencesWithFix() > 0) {
   d4260:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4264:	b1eb      	cbz	r3, d42a2 <_Z6getGPSv+0x92>
                latitude = gps.location.lat();
   d4266:	4620      	mov	r0, r4
   d4268:	f000 fbbe 	bl	d49e8 <_ZN15TinyGPSLocation3latEv>
   d426c:	4b11      	ldr	r3, [pc, #68]	; (d42b4 <_Z6getGPSv+0xa4>)
                longitude = gps.location.lng();
   d426e:	4620      	mov	r0, r4
                latitude = gps.location.lat();
   d4270:	ed83 0b00 	vstr	d0, [r3]
                longitude = gps.location.lng();
   d4274:	f000 fbdc 	bl	d4a30 <_ZN15TinyGPSLocation3lngEv>
   d4278:	4b0f      	ldr	r3, [pc, #60]	; (d42b8 <_Z6getGPSv+0xa8>)
   d427a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d427e:	ed83 0b00 	vstr	d0, [r3]
   int32_t value()         { updated = false; return val; }
   d4282:	2300      	movs	r3, #0
   d4284:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4288:	f004 fc70 	bl	d8b6c <__aeabi_i2d>
   d428c:	4632      	mov	r2, r6
   d428e:	463b      	mov	r3, r7
   d4290:	f004 fcd6 	bl	d8c40 <__aeabi_dmul>
   d4294:	464b      	mov	r3, r9
   d4296:	4642      	mov	r2, r8
   d4298:	f004 fdfc 	bl	d8e94 <__aeabi_ddiv>
                altitude = gps.altitude.feet();
   d429c:	4b07      	ldr	r3, [pc, #28]	; (d42bc <_Z6getGPSv+0xac>)
   d429e:	e9c3 0100 	strd	r0, r1, [r3]
            String msg = Serial1.readStringUntil('\r');
   d42a2:	4668      	mov	r0, sp
   d42a4:	f003 ff6e 	bl	d8184 <_ZN6StringD1Ev>
   d42a8:	e7bc      	b.n	d4224 <_Z6getGPSv+0x14>
            }

        }
    }  

}
   d42aa:	b004      	add	sp, #16
   d42ac:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d42b0:	2003e404 	.word	0x2003e404
   d42b4:	2003e4e8 	.word	0x2003e4e8
   d42b8:	2003e518 	.word	0x2003e518
   d42bc:	2003e3b0 	.word	0x2003e3b0
   d42c0:	fd4f4b98 	.word	0xfd4f4b98
   d42c4:	400a3f28 	.word	0x400a3f28
   d42c8:	40590000 	.word	0x40590000

000d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d42ce:	e9d0 5300 	ldrd	r5, r3, [r0]
   d42d2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d42d6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d42da:	42ae      	cmp	r6, r5
   d42dc:	d004      	beq.n	d42e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d42de:	4628      	mov	r0, r5
   d42e0:	f003 ff50 	bl	d8184 <_ZN6StringD1Ev>
   d42e4:	3514      	adds	r5, #20
   d42e6:	e7f8      	b.n	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d42e8:	6820      	ldr	r0, [r4, #0]
   d42ea:	f001 fd4f 	bl	d5d8c <free>
    AllocatorT::free(data_);
}
   d42ee:	4620      	mov	r0, r4
   d42f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d42f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	4615      	mov	r5, r2
   d42fa:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   d42fc:	f001 fa7a 	bl	d57f4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d4300:	9901      	ldr	r1, [sp, #4]
   d4302:	2201      	movs	r2, #1
   d4304:	4620      	mov	r0, r4
   d4306:	f001 f9e3 	bl	d56d0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d430a:	4620      	mov	r0, r4
   d430c:	213a      	movs	r1, #58	; 0x3a
   d430e:	f001 f993 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   d4312:	4904      	ldr	r1, [pc, #16]	; (d4324 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   d4314:	462a      	mov	r2, r5
   d4316:	4620      	mov	r0, r4
	}
   d4318:	b003      	add	sp, #12
   d431a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   d431e:	f001 b9ca 	b.w	d56b6 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4322:	bf00      	nop
   d4324:	000d94c2 	.word	0x000d94c2

000d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d4328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d432a:	4604      	mov	r4, r0
   d432c:	ed8d 0b00 	vstr	d0, [sp]
   d4330:	9103      	str	r1, [sp, #12]
		insertCheckSeparator();
   d4332:	f001 fa5f 	bl	d57f4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d4336:	9903      	ldr	r1, [sp, #12]
   d4338:	2201      	movs	r2, #1
   d433a:	4620      	mov	r0, r4
   d433c:	f001 f9c8 	bl	d56d0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d4340:	4620      	mov	r0, r4
   d4342:	213a      	movs	r1, #58	; 0x3a
   d4344:	f001 f978 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4348:	ed9d 0b00 	vldr	d0, [sp]
   d434c:	4620      	mov	r0, r4
	}
   d434e:	b004      	add	sp, #16
   d4350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   d4354:	f001 ba72 	b.w	d583c <_ZN10JsonWriter11insertValueEd>

000d4358 <_Z18createEventPayloadiiiiiiiddd>:

void createEventPayload(int temp_c, int temp_f, int humidity, int voltage, int percent_charge, int signal_strength , int signal_quality, double longitude, double latitude, double altitude)
{
   d4358:	b5f0      	push	{r4, r5, r6, r7, lr}
   d435a:	ed2d 8b04 	vpush	{d8-d9}
   d435e:	eeb0 9a41 	vmov.f32	s18, s2
   d4362:	eef0 9a61 	vmov.f32	s19, s3
   d4366:	eeb0 8a42 	vmov.f32	s16, s4
   d436a:	eef0 8a62 	vmov.f32	s17, s5
   d436e:	b0d3      	sub	sp, #332	; 0x14c
   d4370:	4607      	mov	r7, r0
   d4372:	460e      	mov	r6, r1
   d4374:	4615      	mov	r5, r2
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4376:	a912      	add	r1, sp, #72	; 0x48
   d4378:	f44f 7280 	mov.w	r2, #256	; 0x100
   d437c:	a806      	add	r0, sp, #24
   d437e:	ed8d 0b02 	vstr	d0, [sp, #8]
   d4382:	461c      	mov	r4, r3
   d4384:	f001 f946 	bl	d5614 <_ZN10JsonWriterC1EPcj>
   d4388:	4b32      	ldr	r3, [pc, #200]	; (d4454 <_Z18createEventPayloadiiiiiiiddd+0xfc>)
   d438a:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   d438c:	227d      	movs	r2, #125	; 0x7d
   d438e:	217b      	movs	r1, #123	; 0x7b
   d4390:	a806      	add	r0, sp, #24
   d4392:	f001 fa3a 	bl	d580a <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;

  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp_c", temp_c);
   d4396:	4930      	ldr	r1, [pc, #192]	; (d4458 <_Z18createEventPayloadiiiiiiiddd+0x100>)
   d4398:	463a      	mov	r2, r7
   d439a:	a806      	add	r0, sp, #24
   d439c:	f7ff ffaa 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("temp_f", temp_f);
   d43a0:	492e      	ldr	r1, [pc, #184]	; (d445c <_Z18createEventPayloadiiiiiiiddd+0x104>)
   d43a2:	4632      	mov	r2, r6
   d43a4:	a806      	add	r0, sp, #24
   d43a6:	f7ff ffa5 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d43aa:	492d      	ldr	r1, [pc, #180]	; (d4460 <_Z18createEventPayloadiiiiiiiddd+0x108>)
   d43ac:	462a      	mov	r2, r5
   d43ae:	a806      	add	r0, sp, #24
   d43b0:	f7ff ffa0 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("voltage", voltage);
   d43b4:	4622      	mov	r2, r4
   d43b6:	492b      	ldr	r1, [pc, #172]	; (d4464 <_Z18createEventPayloadiiiiiiiddd+0x10c>)
   d43b8:	a806      	add	r0, sp, #24
   d43ba:	f7ff ff9b 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("percent_charge", percent_charge);
   d43be:	9a5c      	ldr	r2, [sp, #368]	; 0x170
   d43c0:	4929      	ldr	r1, [pc, #164]	; (d4468 <_Z18createEventPayloadiiiiiiiddd+0x110>)
   d43c2:	a806      	add	r0, sp, #24
   d43c4:	f7ff ff96 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_strength", signal_strength );
   d43c8:	9a5d      	ldr	r2, [sp, #372]	; 0x174
   d43ca:	4928      	ldr	r1, [pc, #160]	; (d446c <_Z18createEventPayloadiiiiiiiddd+0x114>)
   d43cc:	a806      	add	r0, sp, #24
   d43ce:	f7ff ff91 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_quality", signal_quality);
   d43d2:	9a5e      	ldr	r2, [sp, #376]	; 0x178
   d43d4:	4926      	ldr	r1, [pc, #152]	; (d4470 <_Z18createEventPayloadiiiiiiiddd+0x118>)
   d43d6:	a806      	add	r0, sp, #24
   d43d8:	f7ff ff8c 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("longitude", longitude);
   d43dc:	ed9d 0b02 	vldr	d0, [sp, #8]
   d43e0:	4924      	ldr	r1, [pc, #144]	; (d4474 <_Z18createEventPayloadiiiiiiiddd+0x11c>)
   d43e2:	a806      	add	r0, sp, #24
   d43e4:	f7ff ffa0 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("latitude", latitude);
   d43e8:	eeb0 0a49 	vmov.f32	s0, s18
   d43ec:	eef0 0a69 	vmov.f32	s1, s19
   d43f0:	4921      	ldr	r1, [pc, #132]	; (d4478 <_Z18createEventPayloadiiiiiiiddd+0x120>)
   d43f2:	a806      	add	r0, sp, #24
   d43f4:	f7ff ff98 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("altitude", altitude);
   d43f8:	eeb0 0a48 	vmov.f32	s0, s16
   d43fc:	eef0 0a68 	vmov.f32	s1, s17
   d4400:	491e      	ldr	r1, [pc, #120]	; (d447c <_Z18createEventPayloadiiiiiiiddd+0x124>)
   d4402:	a806      	add	r0, sp, #24
   d4404:	f7ff ff90 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4408:	a806      	add	r0, sp, #24
   d440a:	f001 f923 	bl	d5654 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d440e:	4b1c      	ldr	r3, [pc, #112]	; (d4480 <_Z18createEventPayloadiiiiiiiddd+0x128>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4410:	9a07      	ldr	r2, [sp, #28]
   d4412:	781b      	ldrb	r3, [r3, #0]
   d4414:	f88d 3000 	strb.w	r3, [sp]
   d4418:	491a      	ldr	r1, [pc, #104]	; (d4484 <_Z18createEventPayloadiiiiiiiddd+0x12c>)
   d441a:	233c      	movs	r3, #60	; 0x3c
   d441c:	a804      	add	r0, sp, #16
   d441e:	f001 ff9f 	bl	d6360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4422:	9c05      	ldr	r4, [sp, #20]
   d4424:	b17c      	cbz	r4, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
      if (--_M_use_count == 0)
   d4426:	6863      	ldr	r3, [r4, #4]
   d4428:	3b01      	subs	r3, #1
   d442a:	6063      	str	r3, [r4, #4]
   d442c:	b95b      	cbnz	r3, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
          _M_dispose();
   d442e:	6823      	ldr	r3, [r4, #0]
   d4430:	4620      	mov	r0, r4
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4436:	68a3      	ldr	r3, [r4, #8]
   d4438:	3b01      	subs	r3, #1
   d443a:	60a3      	str	r3, [r4, #8]
   d443c:	b91b      	cbnz	r3, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
            _M_destroy();
   d443e:	6823      	ldr	r3, [r4, #0]
   d4440:	4620      	mov	r0, r4
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	4798      	blx	r3
  JsonWriterStatic<256> jw;
   d4446:	a806      	add	r0, sp, #24
   d4448:	f7ff fe44 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>

  }

  Particle.publish("equipment_readings", jw.getBuffer(), PRIVATE);

}
   d444c:	b053      	add	sp, #332	; 0x14c
   d444e:	ecbd 8b04 	vpop	{d8-d9}
   d4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4454:	000d9520 	.word	0x000d9520
   d4458:	000d94c5 	.word	0x000d94c5
   d445c:	000d9468 	.word	0x000d9468
   d4460:	000d946f 	.word	0x000d946f
   d4464:	000d94cc 	.word	0x000d94cc
   d4468:	000d9497 	.word	0x000d9497
   d446c:	000d9478 	.word	0x000d9478
   d4470:	000d9488 	.word	0x000d9488
   d4474:	000d94a6 	.word	0x000d94a6
   d4478:	000d94b0 	.word	0x000d94b0
   d447c:	000d94b9 	.word	0x000d94b9
   d4480:	2003e3a8 	.word	0x2003e3a8
   d4484:	000d94d4 	.word	0x000d94d4

000d4488 <loop>:
void loop() {
   d4488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d448c:	ed2d 8b02 	vpush	{d8}
   d4490:	b093      	sub	sp, #76	; 0x4c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4492:	f001 fa25 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
    if((currentMillis - lastCheck > delay_millis) | first_loop) //after first loop, wait delay_millis to check again
   d4496:	4b7a      	ldr	r3, [pc, #488]	; (d4680 <loop+0x1f8>)
   d4498:	497a      	ldr	r1, [pc, #488]	; (d4684 <loop+0x1fc>)
   d449a:	681a      	ldr	r2, [r3, #0]
   d449c:	6809      	ldr	r1, [r1, #0]
   d449e:	4f7a      	ldr	r7, [pc, #488]	; (d4688 <loop+0x200>)
   d44a0:	4d7a      	ldr	r5, [pc, #488]	; (d468c <loop+0x204>)
   d44a2:	4e7b      	ldr	r6, [pc, #492]	; (d4690 <loop+0x208>)
   d44a4:	1a82      	subs	r2, r0, r2
   d44a6:	428a      	cmp	r2, r1
   d44a8:	d803      	bhi.n	d44b2 <loop+0x2a>
   d44aa:	783a      	ldrb	r2, [r7, #0]
   d44ac:	2a00      	cmp	r2, #0
   d44ae:	f000 8083 	beq.w	d45b8 <loop+0x130>
        lastCheck = currentMillis;
   d44b2:	6018      	str	r0, [r3, #0]
        temp_c = (int8_t)bme.readTemperature();
   d44b4:	4877      	ldr	r0, [pc, #476]	; (d4694 <loop+0x20c>)
   d44b6:	f000 fdcb 	bl	d5050 <_ZN15Adafruit_BME28015readTemperatureEv>
   d44ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d44be:	edcd 7a05 	vstr	s15, [sp, #20]
   d44c2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
   d44c6:	6028      	str	r0, [r5, #0]
        temp_f = (temp_c * 1.8) + 32;
   d44c8:	f004 fb50 	bl	d8b6c <__aeabi_i2d>
   d44cc:	a36a      	add	r3, pc, #424	; (adr r3, d4678 <loop+0x1f0>)
   d44ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44d2:	f004 fbb5 	bl	d8c40 <__aeabi_dmul>
   d44d6:	2200      	movs	r2, #0
   d44d8:	4b6f      	ldr	r3, [pc, #444]	; (d4698 <loop+0x210>)
   d44da:	f004 f9fb 	bl	d88d4 <__adddf3>
   d44de:	f004 fdc1 	bl	d9064 <__aeabi_d2iz>
   d44e2:	4b6e      	ldr	r3, [pc, #440]	; (d469c <loop+0x214>)
   d44e4:	6018      	str	r0, [r3, #0]
        humidity = (uint8_t)bme.readHumidity();
   d44e6:	486b      	ldr	r0, [pc, #428]	; (d4694 <loop+0x20c>)
   d44e8:	f000 fe48 	bl	d517c <_ZN15Adafruit_BME28012readHumidityEv>
   d44ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        voltage = (uint8_t)fuel.getVCell();
   d44f0:	486b      	ldr	r0, [pc, #428]	; (d46a0 <loop+0x218>)
        humidity = (uint8_t)bme.readHumidity();
   d44f2:	edcd 7a05 	vstr	s15, [sp, #20]
   d44f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d44fa:	6033      	str	r3, [r6, #0]
        voltage = (uint8_t)fuel.getVCell();
   d44fc:	f002 f94c 	bl	d6798 <_ZN9FuelGauge8getVCellEv>
   d4500:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4504:	4a67      	ldr	r2, [pc, #412]	; (d46a4 <loop+0x21c>)
   d4506:	edcd 7a05 	vstr	s15, [sp, #20]
   d450a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d450e:	6013      	str	r3, [r2, #0]
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d4510:	a907      	add	r1, sp, #28
    const diag_source* src = nullptr;
   d4512:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4514:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d4516:	9207      	str	r2, [sp, #28]
    const int ret = diag_get_source(id, &src, nullptr);
   d4518:	f001 fb72 	bl	d5c00 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d451c:	2800      	cmp	r0, #0
   d451e:	f040 80a6 	bne.w	d466e <loop+0x1e6>
        return ret;
    }
    return get(src, val);
   d4522:	9c07      	ldr	r4, [sp, #28]
    SPARK_ASSERT(src && src->callback);
   d4524:	b10c      	cbz	r4, d452a <loop+0xa2>
   d4526:	6923      	ldr	r3, [r4, #16]
   d4528:	b923      	cbnz	r3, d4534 <loop+0xac>
   d452a:	4a5f      	ldr	r2, [pc, #380]	; (d46a8 <loop+0x220>)
   d452c:	2100      	movs	r1, #0
   d452e:	200a      	movs	r0, #10
   d4530:	f001 fb4e 	bl	d5bd0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4534:	2300      	movs	r3, #0
   d4536:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   d453a:	230c      	movs	r3, #12
   d453c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d4540:	ab06      	add	r3, sp, #24
   d4542:	9309      	str	r3, [sp, #36]	; 0x24
   d4544:	2304      	movs	r3, #4
   d4546:	930a      	str	r3, [sp, #40]	; 0x28
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4548:	6923      	ldr	r3, [r4, #16]
   d454a:	aa08      	add	r2, sp, #32
   d454c:	2101      	movs	r1, #1
   d454e:	4620      	mov	r0, r4
   d4550:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4552:	2800      	cmp	r0, #0
   d4554:	f040 808b 	bne.w	d466e <loop+0x1e6>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4558:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d455c:	ee07 3a90 	vmov	s15, r3
   d4560:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        percent_charge = (uint8_t)System.batteryCharge();
   d4564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4568:	4a50      	ldr	r2, [pc, #320]	; (d46ac <loop+0x224>)
   d456a:	edcd 7a05 	vstr	s15, [sp, #20]
   d456e:	f89d 3014 	ldrb.w	r3, [sp, #20]
        CellularSignal sig = Cellular.RSSI();
   d4572:	494f      	ldr	r1, [pc, #316]	; (d46b0 <loop+0x228>)
        percent_charge = (uint8_t)System.batteryCharge();
   d4574:	6013      	str	r3, [r2, #0]
        CellularSignal sig = Cellular.RSSI();
   d4576:	a808      	add	r0, sp, #32
   d4578:	f001 fcae 	bl	d5ed8 <_ZN5spark13CellularClass4RSSIEv>
        signal_strength  = (uint8_t)sig.getStrength();
   d457c:	a808      	add	r0, sp, #32
   d457e:	f001 fd19 	bl	d5fb4 <_ZNK14CellularSignal11getStrengthEv>
   d4582:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4586:	4a4b      	ldr	r2, [pc, #300]	; (d46b4 <loop+0x22c>)
   d4588:	edcd 7a05 	vstr	s15, [sp, #20]
   d458c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4590:	6013      	str	r3, [r2, #0]
        signal_quality = (uint8_t)sig.getQuality();
   d4592:	a808      	add	r0, sp, #32
   d4594:	f001 fd3e 	bl	d6014 <_ZNK14CellularSignal10getQualityEv>
   d4598:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d459c:	4a46      	ldr	r2, [pc, #280]	; (d46b8 <loop+0x230>)
   d459e:	edcd 7a05 	vstr	s15, [sp, #20]
   d45a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d45a6:	6013      	str	r3, [r2, #0]
        getGPS();
   d45a8:	f7ff fe32 	bl	d4210 <_Z6getGPSv>
        first_loop = false;
   d45ac:	2300      	movs	r3, #0
        delay(5000);
   d45ae:	f241 3088 	movw	r0, #5000	; 0x1388
        first_loop = false;
   d45b2:	703b      	strb	r3, [r7, #0]
        delay(5000);
   d45b4:	f001 fc1a 	bl	d5dec <delay>
    if((last_temp_c != temp_c) | (last_humidity != humidity) | (last_latitude != (int)latitude) | (last_longitude != (int)longitude))
   d45b8:	4a40      	ldr	r2, [pc, #256]	; (d46bc <loop+0x234>)
   d45ba:	4f41      	ldr	r7, [pc, #260]	; (d46c0 <loop+0x238>)
   d45bc:	6814      	ldr	r4, [r2, #0]
   d45be:	4a41      	ldr	r2, [pc, #260]	; (d46c4 <loop+0x23c>)
   d45c0:	f8d5 8000 	ldr.w	r8, [r5]
   d45c4:	6810      	ldr	r0, [r2, #0]
   d45c6:	f8d6 9000 	ldr.w	r9, [r6]
   d45ca:	4b3f      	ldr	r3, [pc, #252]	; (d46c8 <loop+0x240>)
   d45cc:	ed97 8b00 	vldr	d8, [r7]
   d45d0:	4548      	cmp	r0, r9
   d45d2:	bf08      	it	eq
   d45d4:	4544      	cmpeq	r4, r8
   d45d6:	ec51 0b18 	vmov	r0, r1, d8
   d45da:	bf14      	ite	ne
   d45dc:	2401      	movne	r4, #1
   d45de:	2400      	moveq	r4, #0
   d45e0:	e9d3 ab00 	ldrd	sl, fp, [r3]
   d45e4:	f004 fd3e 	bl	d9064 <__aeabi_d2iz>
   d45e8:	4a38      	ldr	r2, [pc, #224]	; (d46cc <loop+0x244>)
   d45ea:	4b37      	ldr	r3, [pc, #220]	; (d46c8 <loop+0x240>)
   d45ec:	6812      	ldr	r2, [r2, #0]
   d45ee:	4290      	cmp	r0, r2
   d45f0:	bf0c      	ite	eq
   d45f2:	4620      	moveq	r0, r4
   d45f4:	f044 0001 	orrne.w	r0, r4, #1
   d45f8:	461c      	mov	r4, r3
   d45fa:	b938      	cbnz	r0, d460c <loop+0x184>
   d45fc:	4650      	mov	r0, sl
   d45fe:	4659      	mov	r1, fp
   d4600:	f004 fd30 	bl	d9064 <__aeabi_d2iz>
   d4604:	4b32      	ldr	r3, [pc, #200]	; (d46d0 <loop+0x248>)
   d4606:	681b      	ldr	r3, [r3, #0]
   d4608:	4298      	cmp	r0, r3
   d460a:	d02b      	beq.n	d4664 <loop+0x1dc>
        createEventPayload(temp_c, temp_f, humidity, voltage, percent_charge, signal_strength , signal_quality, longitude, latitude, altitude);
   d460c:	eeb0 1a48 	vmov.f32	s2, s16
   d4610:	eef0 1a68 	vmov.f32	s3, s17
   d4614:	4b28      	ldr	r3, [pc, #160]	; (d46b8 <loop+0x230>)
   d4616:	4921      	ldr	r1, [pc, #132]	; (d469c <loop+0x214>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	9302      	str	r3, [sp, #8]
   d461c:	4b25      	ldr	r3, [pc, #148]	; (d46b4 <loop+0x22c>)
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	4b22      	ldr	r3, [pc, #136]	; (d46ac <loop+0x224>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	9300      	str	r3, [sp, #0]
   d4628:	4b2a      	ldr	r3, [pc, #168]	; (d46d4 <loop+0x24c>)
   d462a:	6809      	ldr	r1, [r1, #0]
   d462c:	ed93 2b00 	vldr	d2, [r3]
   d4630:	4b1c      	ldr	r3, [pc, #112]	; (d46a4 <loop+0x21c>)
   d4632:	ec4b ab10 	vmov	d0, sl, fp
   d4636:	681b      	ldr	r3, [r3, #0]
   d4638:	464a      	mov	r2, r9
   d463a:	4640      	mov	r0, r8
   d463c:	f7ff fe8c 	bl	d4358 <_Z18createEventPayloadiiiiiiiddd>
        last_temp_c = temp_c;
   d4640:	4b1e      	ldr	r3, [pc, #120]	; (d46bc <loop+0x234>)
   d4642:	682a      	ldr	r2, [r5, #0]
   d4644:	601a      	str	r2, [r3, #0]
        last_humidity = humidity;
   d4646:	4b1f      	ldr	r3, [pc, #124]	; (d46c4 <loop+0x23c>)
   d4648:	6832      	ldr	r2, [r6, #0]
   d464a:	601a      	str	r2, [r3, #0]
        last_latitude = latitude;
   d464c:	e9d7 0100 	ldrd	r0, r1, [r7]
   d4650:	f004 fd08 	bl	d9064 <__aeabi_d2iz>
   d4654:	4b1d      	ldr	r3, [pc, #116]	; (d46cc <loop+0x244>)
   d4656:	6018      	str	r0, [r3, #0]
        last_longitude = longitude;
   d4658:	e9d4 0100 	ldrd	r0, r1, [r4]
   d465c:	f004 fd02 	bl	d9064 <__aeabi_d2iz>
   d4660:	4b1b      	ldr	r3, [pc, #108]	; (d46d0 <loop+0x248>)
   d4662:	6018      	str	r0, [r3, #0]
}
   d4664:	b013      	add	sp, #76	; 0x4c
   d4666:	ecbd 8b02 	vpop	{d8}
   d466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -1.0f;
   d466e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4672:	e777      	b.n	d4564 <loop+0xdc>
   d4674:	f3af 8000 	nop.w
   d4678:	cccccccd 	.word	0xcccccccd
   d467c:	3ffccccc 	.word	0x3ffccccc
   d4680:	2003e4e0 	.word	0x2003e4e0
   d4684:	2003e318 	.word	0x2003e318
   d4688:	2003e31c 	.word	0x2003e31c
   d468c:	2003e52c 	.word	0x2003e52c
   d4690:	2003e4dc 	.word	0x2003e4dc
   d4694:	2003e3b8 	.word	0x2003e3b8
   d4698:	40400000 	.word	0x40400000
   d469c:	2003e530 	.word	0x2003e530
   d46a0:	2003e3fc 	.word	0x2003e3fc
   d46a4:	2003e534 	.word	0x2003e534
   d46a8:	000d58d1 	.word	0x000d58d1
   d46ac:	2003e520 	.word	0x2003e520
   d46b0:	2003e548 	.word	0x2003e548
   d46b4:	2003e528 	.word	0x2003e528
   d46b8:	2003e524 	.word	0x2003e524
   d46bc:	2003e32c 	.word	0x2003e32c
   d46c0:	2003e4e8 	.word	0x2003e4e8
   d46c4:	2003e320 	.word	0x2003e320
   d46c8:	2003e518 	.word	0x2003e518
   d46cc:	2003e324 	.word	0x2003e324
   d46d0:	2003e328 	.word	0x2003e328
   d46d4:	2003e3b0 	.word	0x2003e3b0

000d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d46d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d46da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46dc:	4604      	mov	r4, r0
   d46de:	460d      	mov	r5, r1
   d46e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d46e2:	d916      	bls.n	d4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46e4:	4290      	cmp	r0, r2
   d46e6:	d215      	bcs.n	d4714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d46e8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d46ec:	1a75      	subs	r5, r6, r1
   d46ee:	f1a1 0714 	sub.w	r7, r1, #20
   d46f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d46f4:	42b7      	cmp	r7, r6
   d46f6:	d01c      	beq.n	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46f8:	b12c      	cbz	r4, d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46fa:	4631      	mov	r1, r6
   d46fc:	4620      	mov	r0, r4
   d46fe:	f003 fdbd 	bl	d827c <_ZN6StringC1EOS_>
   d4702:	7c33      	ldrb	r3, [r6, #16]
   d4704:	7423      	strb	r3, [r4, #16]
   d4706:	4630      	mov	r0, r6
   d4708:	f003 fd3c 	bl	d8184 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d470c:	3e14      	subs	r6, #20
   d470e:	3c14      	subs	r4, #20
   d4710:	e7f0      	b.n	d46f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4712:	d00e      	beq.n	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4714:	42b5      	cmp	r5, r6
   d4716:	d00c      	beq.n	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4718:	b12c      	cbz	r4, d4726 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d471a:	4629      	mov	r1, r5
   d471c:	4620      	mov	r0, r4
   d471e:	f003 fdad 	bl	d827c <_ZN6StringC1EOS_>
   d4722:	7c2b      	ldrb	r3, [r5, #16]
   d4724:	7423      	strb	r3, [r4, #16]
   d4726:	4628      	mov	r0, r5
   d4728:	f003 fd2c 	bl	d8184 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d472c:	3514      	adds	r5, #20
   d472e:	3414      	adds	r4, #20
   d4730:	e7f0      	b.n	d4714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4738:	2300      	movs	r3, #0
   d473a:	e9c0 3300 	strd	r3, r3, [r0]
   d473e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4740:	684f      	ldr	r7, [r1, #4]
   d4742:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4744:	4604      	mov	r4, r0
   d4746:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4748:	dd23      	ble.n	d4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d474a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d474e:	fb08 f007 	mul.w	r0, r8, r7
   d4752:	f001 fb13 	bl	d5d7c <malloc>
            if (!d) {
   d4756:	4605      	mov	r5, r0
   d4758:	b1d8      	cbz	r0, d4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d475a:	e9d4 1200 	ldrd	r1, r2, [r4]
   d475e:	fb08 1202 	mla	r2, r8, r2, r1
   d4762:	f7ff ffb9 	bl	d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4766:	6820      	ldr	r0, [r4, #0]
   d4768:	f001 fb10 	bl	d5d8c <free>
        data_ = d;
   d476c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d476e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4770:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4774:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4778:	45b8      	cmp	r8, r7
   d477a:	d008      	beq.n	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d477c:	4639      	mov	r1, r7
   d477e:	4628      	mov	r0, r5
   d4780:	f003 fd96 	bl	d82b0 <_ZN6StringC1ERKS_>
   d4784:	7c3b      	ldrb	r3, [r7, #16]
   d4786:	742b      	strb	r3, [r5, #16]
   d4788:	3714      	adds	r7, #20
   d478a:	3514      	adds	r5, #20
   d478c:	e7f4      	b.n	d4778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d478e:	6873      	ldr	r3, [r6, #4]
   d4790:	6063      	str	r3, [r4, #4]
}
   d4792:	4620      	mov	r0, r4
   d4794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4798 <_GLOBAL__sub_I_logHandler>:
}
   d4798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d479c:	4b2d      	ldr	r3, [pc, #180]	; (d4854 <_GLOBAL__sub_I_logHandler+0xbc>)
        filter_(level, filters) {
   d479e:	4d2e      	ldr	r5, [pc, #184]	; (d4858 <_GLOBAL__sub_I_logHandler+0xc0>)
   d47a0:	b08c      	sub	sp, #48	; 0x30
   d47a2:	f04f 0801 	mov.w	r8, #1
        capacity_(0) {
   d47a6:	2400      	movs	r4, #0
   d47a8:	f883 8000 	strb.w	r8, [r3]
   d47ac:	e9cd 4400 	strd	r4, r4, [sp]
   d47b0:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d47b2:	f003 feaf 	bl	d8514 <_Z16_fetch_usbserialv>
   d47b6:	4669      	mov	r1, sp
   d47b8:	4606      	mov	r6, r0
   d47ba:	a803      	add	r0, sp, #12
   d47bc:	f7ff ffba 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47c0:	462f      	mov	r7, r5
        stream_(&stream) {
   d47c2:	a903      	add	r1, sp, #12
   d47c4:	a806      	add	r0, sp, #24
   d47c6:	f7ff ffb5 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d47ca:	4b24      	ldr	r3, [pc, #144]	; (d485c <_GLOBAL__sub_I_logHandler+0xc4>)
   d47cc:	f847 3b04 	str.w	r3, [r7], #4
   d47d0:	a906      	add	r1, sp, #24
   d47d2:	a809      	add	r0, sp, #36	; 0x24
   d47d4:	f7ff ffae 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47d8:	aa09      	add	r2, sp, #36	; 0x24
   d47da:	211e      	movs	r1, #30
   d47dc:	4638      	mov	r0, r7
   d47de:	f002 ff90 	bl	d7702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47e2:	a809      	add	r0, sp, #36	; 0x24
   d47e4:	f7ff fd72 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d47e8:	a806      	add	r0, sp, #24
   d47ea:	f7ff fd6f 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47ee:	4b1c      	ldr	r3, [pc, #112]	; (d4860 <_GLOBAL__sub_I_logHandler+0xc8>)
   d47f0:	602b      	str	r3, [r5, #0]
   d47f2:	a803      	add	r0, sp, #12
   d47f4:	622e      	str	r6, [r5, #32]
   d47f6:	f7ff fd69 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47fa:	4b1a      	ldr	r3, [pc, #104]	; (d4864 <_GLOBAL__sub_I_logHandler+0xcc>)
   d47fc:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d47fe:	f003 fe89 	bl	d8514 <_Z16_fetch_usbserialv>
   d4802:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4806:	f003 fe75 	bl	d84f4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d480a:	f002 fc1f 	bl	d704c <_ZN5spark10LogManager8instanceEv>
   d480e:	4629      	mov	r1, r5
   d4810:	f002 ff09 	bl	d7626 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4814:	4668      	mov	r0, sp
   d4816:	f7ff fd59 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   d481a:	4813      	ldr	r0, [pc, #76]	; (d4868 <_GLOBAL__sub_I_logHandler+0xd0>)
   d481c:	f000 f82a 	bl	d4874 <_ZN11TinyGPSPlusC1Ev>
Adafruit_BME280 bme;
   d4820:	4812      	ldr	r0, [pc, #72]	; (d486c <_GLOBAL__sub_I_logHandler+0xd4>)
   d4822:	f000 fb43 	bl	d4eac <_ZN15Adafruit_BME280C1Ev>
FuelGauge fuel;
   d4826:	4621      	mov	r1, r4
   d4828:	4811      	ldr	r0, [pc, #68]	; (d4870 <_GLOBAL__sub_I_logHandler+0xd8>)
   d482a:	f001 ff67 	bl	d66fc <_ZN9FuelGaugeC1Eb>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d482e:	f003 ff33 	bl	d8698 <spark_protocol_instance>
   d4832:	4623      	mov	r3, r4
   d4834:	4622      	mov	r2, r4
   d4836:	f643 61f0 	movw	r1, #16112	; 0x3ef0
   d483a:	f003 ff35 	bl	d86a8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d483e:	f003 ff2b 	bl	d8698 <spark_protocol_instance>
   d4842:	4623      	mov	r3, r4
   d4844:	4622      	mov	r2, r4
   d4846:	4641      	mov	r1, r8
   d4848:	f003 ff36 	bl	d86b8 <spark_protocol_set_product_firmware_version>
}
   d484c:	b00c      	add	sp, #48	; 0x30
   d484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4852:	bf00      	nop
   d4854:	2003e3a8 	.word	0x2003e3a8
   d4858:	2003e4f0 	.word	0x2003e4f0
   d485c:	000d94f0 	.word	0x000d94f0
   d4860:	000d9774 	.word	0x000d9774
   d4864:	000d9508 	.word	0x000d9508
   d4868:	2003e404 	.word	0x2003e404
   d486c:	2003e3b8 	.word	0x2003e3b8
   d4870:	2003e3fc 	.word	0x2003e3fc

000d4874 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   d4874:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d4876:	2102      	movs	r1, #2
   d4878:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d487c:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d487e:	8082      	strh	r2, [r0, #4]
   d4880:	6082      	str	r2, [r0, #8]
   d4882:	7302      	strb	r2, [r0, #12]
   d4884:	8202      	strh	r2, [r0, #16]
   d4886:	6142      	str	r2, [r0, #20]
   d4888:	7602      	strb	r2, [r0, #24]
   d488a:	8382      	strh	r2, [r0, #28]
   d488c:	6202      	str	r2, [r0, #32]
   d488e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d4892:	8502      	strh	r2, [r0, #40]	; 0x28
   d4894:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4896:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   d489a:	8702      	strh	r2, [r0, #56]	; 0x38
   d489c:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   d489e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d48a2:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d48a4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d48a8:	6602      	str	r2, [r0, #96]	; 0x60
   d48aa:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d48ae:	6702      	str	r2, [r0, #112]	; 0x70
   d48b0:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d48b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   d48b8:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d48bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d48c0:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d48c4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d48c8:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d48cc:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d48d0:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d48d4:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d48d8:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d48dc:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d48e0:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d48e4:	4770      	bx	lr

000d48e6 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d48e6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d48ea:	2b05      	cmp	r3, #5
   d48ec:	d802      	bhi.n	d48f4 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d48ee:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d48f2:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d48f4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d48f8:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d48fa:	bf94      	ite	ls
   d48fc:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4900:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d4904:	4770      	bx	lr

000d4906 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d4906:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d4908:	7805      	ldrb	r5, [r0, #0]
{
   d490a:	4604      	mov	r4, r0
  if (negative) ++term;
   d490c:	2d2d      	cmp	r5, #45	; 0x2d
   d490e:	bf08      	it	eq
   d4910:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d4912:	4620      	mov	r0, r4
   d4914:	f004 fbd4 	bl	d90c0 <atol>
   d4918:	2364      	movs	r3, #100	; 0x64
   d491a:	4358      	muls	r0, r3
   d491c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d491e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4922:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d4926:	2909      	cmp	r1, #9
   d4928:	d9f8      	bls.n	d491c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d492a:	2b2e      	cmp	r3, #46	; 0x2e
   d492c:	d10b      	bne.n	d4946 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d492e:	7853      	ldrb	r3, [r2, #1]
   d4930:	3b30      	subs	r3, #48	; 0x30
   d4932:	2b09      	cmp	r3, #9
   d4934:	d807      	bhi.n	d4946 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d4936:	210a      	movs	r1, #10
   d4938:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d493c:	7893      	ldrb	r3, [r2, #2]
   d493e:	3b30      	subs	r3, #48	; 0x30
   d4940:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d4942:	bf98      	it	ls
   d4944:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d4946:	2d2d      	cmp	r5, #45	; 0x2d
   d4948:	bf08      	it	eq
   d494a:	4240      	negeq	r0, r0
}
   d494c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4950 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d4950:	b538      	push	{r3, r4, r5, lr}
   d4952:	460d      	mov	r5, r1
   d4954:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d4956:	f004 fbb3 	bl	d90c0 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d495a:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d495c:	4b13      	ldr	r3, [pc, #76]	; (d49ac <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d495e:	fbb0 f1f2 	udiv	r1, r0, r2
   d4962:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4966:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d4968:	8029      	strh	r1, [r5, #0]
   d496a:	4620      	mov	r0, r4

  while (isdigit(*term))
   d496c:	7802      	ldrb	r2, [r0, #0]
   d496e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d4972:	2c09      	cmp	r4, #9
   d4974:	4601      	mov	r1, r0
   d4976:	f100 0001 	add.w	r0, r0, #1
   d497a:	d9f7      	bls.n	d496c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d497c:	2a2e      	cmp	r2, #46	; 0x2e
   d497e:	d10b      	bne.n	d4998 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d4980:	480a      	ldr	r0, [pc, #40]	; (d49ac <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d4982:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d4984:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d4988:	3a30      	subs	r2, #48	; 0x30
   d498a:	2a09      	cmp	r2, #9
   d498c:	d804      	bhi.n	d4998 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d498e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d4992:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d4996:	e7f5      	b.n	d4984 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4998:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d499c:	3301      	adds	r3, #1
   d499e:	2203      	movs	r2, #3
   d49a0:	fbb3 f3f2 	udiv	r3, r3, r2
   d49a4:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d49a6:	2300      	movs	r3, #0
   d49a8:	722b      	strb	r3, [r5, #8]
}
   d49aa:	bd38      	pop	{r3, r4, r5, pc}
   d49ac:	00989680 	.word	0x00989680

000d49b0 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d49b0:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d49b2:	4603      	mov	r3, r0
{
   d49b4:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d49b6:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d49ba:	6042      	str	r2, [r0, #4]
   d49bc:	685a      	ldr	r2, [r3, #4]
   d49be:	6082      	str	r2, [r0, #8]
   d49c0:	7a1b      	ldrb	r3, [r3, #8]
   d49c2:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d49c4:	4603      	mov	r3, r0
   d49c6:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d49ca:	6102      	str	r2, [r0, #16]
   d49cc:	685a      	ldr	r2, [r3, #4]
   d49ce:	6142      	str	r2, [r0, #20]
   d49d0:	7a1b      	ldrb	r3, [r3, #8]
   d49d2:	7603      	strb	r3, [r0, #24]
   d49d4:	f000 ff84 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d49d8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d49dc:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d49de:	8023      	strh	r3, [r4, #0]
}
   d49e0:	bd10      	pop	{r4, pc}
   d49e2:	0000      	movs	r0, r0
   d49e4:	0000      	movs	r0, r0
	...

000d49e8 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d49e8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d49ea:	2300      	movs	r3, #0
{
   d49ec:	4604      	mov	r4, r0
   updated = false;
   d49ee:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d49f0:	6880      	ldr	r0, [r0, #8]
   d49f2:	f004 f8ab 	bl	d8b4c <__aeabi_ui2d>
   d49f6:	a30c      	add	r3, pc, #48	; (adr r3, d4a28 <_ZN15TinyGPSLocation3latEv+0x40>)
   d49f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49fc:	f004 fa4a 	bl	d8e94 <__aeabi_ddiv>
   d4a00:	4606      	mov	r6, r0
   d4a02:	88a0      	ldrh	r0, [r4, #4]
   d4a04:	460f      	mov	r7, r1
   d4a06:	f004 f8b1 	bl	d8b6c <__aeabi_i2d>
   d4a0a:	460b      	mov	r3, r1
   d4a0c:	4602      	mov	r2, r0
   d4a0e:	4639      	mov	r1, r7
   d4a10:	4630      	mov	r0, r6
   d4a12:	f003 ff5f 	bl	d88d4 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d4a16:	7b23      	ldrb	r3, [r4, #12]
   d4a18:	b113      	cbz	r3, d4a20 <_ZN15TinyGPSLocation3latEv+0x38>
   d4a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4a1e:	4619      	mov	r1, r3
}
   d4a20:	ec41 0b10 	vmov	d0, r0, r1
   d4a24:	bdd0      	pop	{r4, r6, r7, pc}
   d4a26:	bf00      	nop
   d4a28:	00000000 	.word	0x00000000
   d4a2c:	41cdcd65 	.word	0x41cdcd65

000d4a30 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d4a30:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4a32:	2300      	movs	r3, #0
{
   d4a34:	4604      	mov	r4, r0
   updated = false;
   d4a36:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d4a38:	6940      	ldr	r0, [r0, #20]
   d4a3a:	f004 f887 	bl	d8b4c <__aeabi_ui2d>
   d4a3e:	a30c      	add	r3, pc, #48	; (adr r3, d4a70 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d4a40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a44:	f004 fa26 	bl	d8e94 <__aeabi_ddiv>
   d4a48:	4606      	mov	r6, r0
   d4a4a:	8a20      	ldrh	r0, [r4, #16]
   d4a4c:	460f      	mov	r7, r1
   d4a4e:	f004 f88d 	bl	d8b6c <__aeabi_i2d>
   d4a52:	460b      	mov	r3, r1
   d4a54:	4602      	mov	r2, r0
   d4a56:	4639      	mov	r1, r7
   d4a58:	4630      	mov	r0, r6
   d4a5a:	f003 ff3b 	bl	d88d4 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d4a5e:	7e23      	ldrb	r3, [r4, #24]
   d4a60:	b113      	cbz	r3, d4a68 <_ZN15TinyGPSLocation3lngEv+0x38>
   d4a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4a66:	4619      	mov	r1, r3
}
   d4a68:	ec41 0b10 	vmov	d0, r0, r1
   d4a6c:	bdd0      	pop	{r4, r6, r7, pc}
   d4a6e:	bf00      	nop
   d4a70:	00000000 	.word	0x00000000
   d4a74:	41cdcd65 	.word	0x41cdcd65

000d4a78 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d4a78:	b510      	push	{r4, lr}
   date = newDate;
   d4a7a:	6883      	ldr	r3, [r0, #8]
   d4a7c:	6043      	str	r3, [r0, #4]
{
   d4a7e:	4604      	mov	r4, r0
   d4a80:	f000 ff2e 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4a84:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4a88:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4a8a:	8023      	strh	r3, [r4, #0]
}
   d4a8c:	bd10      	pop	{r4, pc}

000d4a8e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d4a8e:	b510      	push	{r4, lr}
   time = newTime;
   d4a90:	6883      	ldr	r3, [r0, #8]
   d4a92:	6043      	str	r3, [r0, #4]
{
   d4a94:	4604      	mov	r4, r0
   d4a96:	f000 ff23 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4a9a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4a9e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4aa0:	8023      	strh	r3, [r4, #0]
}
   d4aa2:	bd10      	pop	{r4, pc}

000d4aa4 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d4aa4:	b510      	push	{r4, lr}
   d4aa6:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4aa8:	4608      	mov	r0, r1
   d4aaa:	f7ff ff2c 	bl	d4906 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4aae:	60a0      	str	r0, [r4, #8]
}
   d4ab0:	bd10      	pop	{r4, pc}

000d4ab2 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d4ab2:	b510      	push	{r4, lr}
   d4ab4:	4604      	mov	r4, r0
   newDate = atol(term);
   d4ab6:	4608      	mov	r0, r1
   d4ab8:	f004 fb02 	bl	d90c0 <atol>
   d4abc:	60a0      	str	r0, [r4, #8]
}
   d4abe:	bd10      	pop	{r4, pc}

000d4ac0 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4ac0:	b510      	push	{r4, lr}
   val = newval;
   d4ac2:	68c3      	ldr	r3, [r0, #12]
   d4ac4:	6083      	str	r3, [r0, #8]
{
   d4ac6:	4604      	mov	r4, r0
   d4ac8:	f000 ff0a 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4acc:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4ad0:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4ad2:	8023      	strh	r3, [r4, #0]
}
   d4ad4:	bd10      	pop	{r4, pc}

000d4ad6 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d4ad6:	b510      	push	{r4, lr}
   d4ad8:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d4ada:	4608      	mov	r0, r1
   d4adc:	f7ff ff13 	bl	d4906 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4ae0:	60e0      	str	r0, [r4, #12]
}
   d4ae2:	bd10      	pop	{r4, pc}

000d4ae4 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d4ae4:	b510      	push	{r4, lr}
   val = newval;
   d4ae6:	68c3      	ldr	r3, [r0, #12]
   d4ae8:	6083      	str	r3, [r0, #8]
{
   d4aea:	4604      	mov	r4, r0
   d4aec:	f000 fef8 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4af0:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4af4:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4af6:	8023      	strh	r3, [r4, #0]
}
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d4afa:	b510      	push	{r4, lr}
   d4afc:	4604      	mov	r4, r0
   newval = atol(term);
   d4afe:	4608      	mov	r0, r1
   d4b00:	f004 fade 	bl	d90c0 <atol>
   d4b04:	60e0      	str	r0, [r4, #12]
}
   d4b06:	bd10      	pop	{r4, pc}

000d4b08 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4b08:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d4b0a:	4601      	mov	r1, r0
{
   d4b0c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d4b0e:	3010      	adds	r0, #16
   d4b10:	f004 fb4f 	bl	d91b2 <strcpy>
   d4b14:	f000 fee4 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4b18:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4b1c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d4b1e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4b20:	bd10      	pop	{r4, pc}

000d4b22 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4b22:	2210      	movs	r2, #16
   d4b24:	f004 bb85 	b.w	d9232 <strncpy>

000d4b28 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d4b2a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d4b2e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d4b30:	2d00      	cmp	r5, #0
   d4b32:	d064      	beq.n	d4bfe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4b34:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d4b38:	f7ff fed5 	bl	d48e6 <_ZN11TinyGPSPlus7fromHexEc>
   d4b3c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4b40:	4602      	mov	r2, r0
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff fecf 	bl	d48e6 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d4b48:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4b4c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d4b50:	b2c0      	uxtb	r0, r0
   d4b52:	4283      	cmp	r3, r0
   d4b54:	d14b      	bne.n	d4bee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d4b56:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d4b5a:	3301      	adds	r3, #1
   d4b5c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d4b60:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4b64:	b123      	cbz	r3, d4b70 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d4b66:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4b6a:	3301      	adds	r3, #1
   d4b6c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d4b70:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d4b74:	b333      	cbz	r3, d4bc4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d4b76:	2b01      	cmp	r3, #1
   d4b78:	d115      	bne.n	d4ba6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d4b7a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4b7e:	f7ff ff7b 	bl	d4a78 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d4b82:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4b86:	f7ff ff82 	bl	d4a8e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4b8a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4b8e:	b153      	cbz	r3, d4ba6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d4b90:	4620      	mov	r0, r4
   d4b92:	f7ff ff0d 	bl	d49b0 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d4b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b9a:	f7ff ff91 	bl	d4ac0 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d4b9e:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d4ba2:	f7ff ff8d 	bl	d4ac0 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4ba6:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4baa:	b336      	cbz	r6, d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4bac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4bb0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4bb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4bb4:	f004 faf3 	bl	d919e <strcmp>
   d4bb8:	b9f8      	cbnz	r0, d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d4bba:	4630      	mov	r0, r6
   d4bbc:	f7ff ffa4 	bl	d4b08 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4bc0:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4bc2:	e7f2      	b.n	d4baa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d4bc4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4bc8:	f7ff ff61 	bl	d4a8e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4bcc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4bd0:	b133      	cbz	r3, d4be0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff feec 	bl	d49b0 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4bd8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4bdc:	f7ff ff70 	bl	d4ac0 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4be0:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4be4:	f7ff ff7e 	bl	d4ae4 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4be8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4bec:	e7d9      	b.n	d4ba2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d4bee:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d4bf2:	3301      	adds	r3, #1
   d4bf4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4bf8:	2500      	movs	r5, #0
}
   d4bfa:	4628      	mov	r0, r5
   d4bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d4bfe:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d4c02:	bb6a      	cbnz	r2, d4c60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   d4c04:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   d4c08:	495a      	ldr	r1, [pc, #360]	; (d4d74 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   d4c0a:	4630      	mov	r0, r6
   d4c0c:	f004 fac7 	bl	d919e <strcmp>
   d4c10:	b120      	cbz	r0, d4c1c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   d4c12:	4959      	ldr	r1, [pc, #356]	; (d4d78 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   d4c14:	4630      	mov	r0, r6
   d4c16:	f004 fac2 	bl	d919e <strcmp>
   d4c1a:	b998      	cbnz	r0, d4c44 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d4c1c:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d4c1e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4c22:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d4c26:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4c2a:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   d4c2e:	2f00      	cmp	r7, #0
   d4c30:	d0e3      	beq.n	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d4c34:	4631      	mov	r1, r6
   d4c36:	f004 fab2 	bl	d919e <strcmp>
   d4c3a:	2800      	cmp	r0, #0
   d4c3c:	f280 8094 	bge.w	d4d68 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   d4c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d4c42:	e7f0      	b.n	d4c26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   d4c44:	494d      	ldr	r1, [pc, #308]	; (d4d7c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   d4c46:	4630      	mov	r0, r6
   d4c48:	f004 faa9 	bl	d919e <strcmp>
   d4c4c:	b120      	cbz	r0, d4c58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   d4c4e:	494c      	ldr	r1, [pc, #304]	; (d4d80 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   d4c50:	4630      	mov	r0, r6
   d4c52:	f004 faa4 	bl	d919e <strcmp>
   d4c56:	b908      	cbnz	r0, d4c5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d4c58:	2300      	movs	r3, #0
   d4c5a:	e7e0      	b.n	d4c1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   d4c5c:	2302      	movs	r3, #2
   d4c5e:	e7de      	b.n	d4c1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d4c60:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d4c64:	2902      	cmp	r1, #2
   d4c66:	d023      	beq.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4c68:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d4c6c:	b303      	cbz	r3, d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   d4c6e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d4c72:	3a01      	subs	r2, #1
   d4c74:	2a28      	cmp	r2, #40	; 0x28
   d4c76:	d81b      	bhi.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4c78:	e8df f002 	tbb	[pc, r2]
   d4c7c:	49423b15 	.word	0x49423b15
   d4c80:	6e68634c 	.word	0x6e68634c
   d4c84:	1a1a1a72 	.word	0x1a1a1a72
   d4c88:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c8c:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c90:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c94:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c98:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c9c:	423b3415 	.word	0x423b3415
   d4ca0:	59534c49 	.word	0x59534c49
   d4ca4:	5d          	.byte	0x5d
   d4ca5:	00          	.byte	0x00
      time.setTime(term);
   d4ca6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4caa:	3048      	adds	r0, #72	; 0x48
   d4cac:	f7ff fefa 	bl	d4aa4 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4cb0:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d4cb4:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4cb8:	2e00      	cmp	r6, #0
   d4cba:	d09e      	beq.n	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4cbc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4cc0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4cc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4cc4:	f004 fa6b 	bl	d919e <strcmp>
   d4cc8:	2800      	cmp	r0, #0
   d4cca:	d196      	bne.n	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4ccc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d4cce:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4cd2:	429a      	cmp	r2, r3
   d4cd4:	dc91      	bgt.n	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d4cd6:	d103      	bne.n	d4ce0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   d4cd8:	4639      	mov	r1, r7
   d4cda:	4630      	mov	r0, r6
   d4cdc:	f7ff ff21 	bl	d4b22 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4ce0:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4ce2:	e7e9      	b.n	d4cb8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   d4ce4:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4ce8:	4243      	negs	r3, r0
   d4cea:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d4cec:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4cf0:	e7de      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4cf2:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4cf6:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d4cfa:	f7ff fe29 	bl	d4950 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d4cfe:	e7d7      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   d4d00:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4d04:	424b      	negs	r3, r1
   d4d06:	414b      	adcs	r3, r1
   d4d08:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d4d0c:	e7d0      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4d0e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d4d12:	e7f0      	b.n	d4cf6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   d4d14:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4d18:	4253      	negs	r3, r2
   d4d1a:	4153      	adcs	r3, r2
   d4d1c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4d20:	e7c6      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   d4d22:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d26:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4d28:	f7ff fed5 	bl	d4ad6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d4d2c:	e7c0      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   d4d2e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d32:	3068      	adds	r0, #104	; 0x68
   d4d34:	e7f8      	b.n	d4d28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   d4d36:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d3a:	3038      	adds	r0, #56	; 0x38
   d4d3c:	f7ff feb9 	bl	d4ab2 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4d40:	e7b6      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   d4d42:	2b30      	cmp	r3, #48	; 0x30
   d4d44:	bf94      	ite	ls
   d4d46:	2300      	movls	r3, #0
   d4d48:	2301      	movhi	r3, #1
   d4d4a:	e7cf      	b.n	d4cec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   d4d4c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d50:	3088      	adds	r0, #136	; 0x88
   d4d52:	f7ff fed2 	bl	d4afa <_ZN14TinyGPSInteger3setEPKc>
      break;
   d4d56:	e7ab      	b.n	d4cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   d4d58:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d5c:	3098      	adds	r0, #152	; 0x98
   d4d5e:	e7e3      	b.n	d4d28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   d4d60:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d64:	3078      	adds	r0, #120	; 0x78
   d4d66:	e7df      	b.n	d4d28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d4d68:	f43f af47 	beq.w	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d4d6c:	2300      	movs	r3, #0
   d4d6e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4d72:	e742      	b.n	d4bfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4d74:	000d9528 	.word	0x000d9528
   d4d78:	000d952e 	.word	0x000d952e
   d4d7c:	000d9534 	.word	0x000d9534
   d4d80:	000d953a 	.word	0x000d953a

000d4d84 <_ZN11TinyGPSPlus6encodeEc>:
{
   d4d84:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d4d86:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4d8a:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d4d8c:	f103 0301 	add.w	r3, r3, #1
{
   d4d90:	4604      	mov	r4, r0
   d4d92:	460d      	mov	r5, r1
  ++encodedCharCount;
   d4d94:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4d98:	d03a      	beq.n	d4e10 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d4d9a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d4d9e:	d814      	bhi.n	d4dca <_ZN11TinyGPSPlus6encodeEc+0x46>
   d4da0:	290a      	cmp	r1, #10
   d4da2:	d01c      	beq.n	d4dde <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4da4:	290d      	cmp	r1, #13
   d4da6:	d01a      	beq.n	d4dde <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d4da8:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d4daa:	bf9f      	itttt	ls
   d4dac:	1c5a      	addls	r2, r3, #1
   d4dae:	191b      	addls	r3, r3, r4
   d4db0:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d4db4:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4db8:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d4dbc:	bb98      	cbnz	r0, d4e26 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d4dbe:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d4dc2:	404d      	eors	r5, r1
   d4dc4:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4dc8:	e021      	b.n	d4e0e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d4dca:	292a      	cmp	r1, #42	; 0x2a
   d4dcc:	d007      	beq.n	d4dde <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4dce:	292c      	cmp	r1, #44	; 0x2c
   d4dd0:	d1ea      	bne.n	d4da8 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d4dd2:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4dd6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4dda:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d4dde:	2b0e      	cmp	r3, #14
   d4de0:	f04f 0000 	mov.w	r0, #0
   d4de4:	d805      	bhi.n	d4df2 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d4de6:	4423      	add	r3, r4
   d4de8:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d4dec:	4620      	mov	r0, r4
   d4dee:	f7ff fe9b 	bl	d4b28 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d4df2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4df6:	3301      	adds	r3, #1
   d4df8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d4e02:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4e06:	425d      	negs	r5, r3
   d4e08:	415d      	adcs	r5, r3
   d4e0a:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d4e0e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4e10:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d4e12:	2302      	movs	r3, #2
    parity = 0;
   d4e14:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4e18:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d4e1c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4e20:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d4e24:	e7f3      	b.n	d4e0e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d4e26:	2000      	movs	r0, #0
   d4e28:	e7f1      	b.n	d4e0e <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d4e2a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4e2a:	4770      	bx	lr

000d4e2c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4e2c:	b510      	push	{r4, lr}
  }
   d4e2e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4e30:	4604      	mov	r4, r0
  }
   d4e32:	f003 fd3f 	bl	d88b4 <_ZdlPvj>
   d4e36:	4620      	mov	r0, r4
   d4e38:	bd10      	pop	{r4, pc}

000d4e3a <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4e3a:	b40e      	push	{r1, r2, r3}
   d4e3c:	b503      	push	{r0, r1, lr}
   d4e3e:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4e40:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4e42:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4e46:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4e48:	f003 f889 	bl	d7f5e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4e4c:	b002      	add	sp, #8
   d4e4e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4e52:	b003      	add	sp, #12
   d4e54:	4770      	bx	lr
	...

000d4e58 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4e5a:	4604      	mov	r4, r0
   d4e5c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4e5e:	7922      	ldrb	r2, [r4, #4]
   d4e60:	68a3      	ldr	r3, [r4, #8]
   d4e62:	b132      	cbz	r2, d4e72 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4e64:	b9a3      	cbnz	r3, d4e90 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4e66:	490b      	ldr	r1, [pc, #44]	; (d4e94 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4e68:	b002      	add	sp, #8
   d4e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4e6e:	f003 b83b 	b.w	d7ee8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4e72:	4a09      	ldr	r2, [pc, #36]	; (d4e98 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4e74:	7b26      	ldrb	r6, [r4, #12]
   d4e76:	4d09      	ldr	r5, [pc, #36]	; (d4e9c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4e78:	4909      	ldr	r1, [pc, #36]	; (d4ea0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4e7a:	7b64      	ldrb	r4, [r4, #13]
   d4e7c:	2e01      	cmp	r6, #1
   d4e7e:	bf18      	it	ne
   d4e80:	4629      	movne	r1, r5
   d4e82:	e9cd 1400 	strd	r1, r4, [sp]
   d4e86:	4907      	ldr	r1, [pc, #28]	; (d4ea4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4e88:	f7ff ffd7 	bl	d4e3a <_ZN5Print6printfEPKcz>
  }
   d4e8c:	b002      	add	sp, #8
   d4e8e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4e90:	4a05      	ldr	r2, [pc, #20]	; (d4ea8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4e92:	e7ef      	b.n	d4e74 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4e94:	000d9551 	.word	0x000d9551
   d4e98:	000d973b 	.word	0x000d973b
   d4e9c:	000d954d 	.word	0x000d954d
   d4ea0:	000d9549 	.word	0x000d9549
   d4ea4:	000d9567 	.word	0x000d9567
   d4ea8:	000d9540 	.word	0x000d9540

000d4eac <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4eb0:	6103      	str	r3, [r0, #16]
{ }
   d4eb2:	4770      	bx	lr

000d4eb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4eb4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4eb6:	4c0b      	ldr	r4, [pc, #44]	; (d4ee4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4eb8:	7821      	ldrb	r1, [r4, #0]
   d4eba:	f3bf 8f5b 	dmb	ish
   d4ebe:	f011 0101 	ands.w	r1, r1, #1
   d4ec2:	d10b      	bne.n	d4edc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	9101      	str	r1, [sp, #4]
   d4ec8:	f7ff f8f6 	bl	d40b8 <__cxa_guard_acquire>
   d4ecc:	9901      	ldr	r1, [sp, #4]
   d4ece:	b128      	cbz	r0, d4edc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4ed0:	4805      	ldr	r0, [pc, #20]	; (d4ee8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4ed2:	f003 f881 	bl	d7fd8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	f7ff f8f3 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4edc:	4802      	ldr	r0, [pc, #8]	; (d4ee8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4ede:	b002      	add	sp, #8
   d4ee0:	bd10      	pop	{r4, pc}
   d4ee2:	bf00      	nop
   d4ee4:	2003e538 	.word	0x2003e538
   d4ee8:	2003e53c 	.word	0x2003e53c

000d4eec <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4ef0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ef4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ef6:	4605      	mov	r5, r0
   d4ef8:	460f      	mov	r7, r1
    if (_sck == -1)
   d4efa:	d106      	bne.n	d4f0a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4efc:	f7ff ffda 	bl	d4eb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f00:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4f06:	f003 b909 	b.w	d811c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4f0a:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4f0c:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4f0e:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4f12:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4f16:	2100      	movs	r1, #0
   d4f18:	b280      	uxth	r0, r0
   d4f1a:	f003 fc24 	bl	d8766 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4f1e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4f22:	fa08 f106 	lsl.w	r1, r8, r6
   d4f26:	4039      	ands	r1, r7
   d4f28:	b280      	uxth	r0, r0
   d4f2a:	f003 fc1c 	bl	d8766 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4f2e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4f32:	2101      	movs	r1, #1
   d4f34:	b280      	uxth	r0, r0
   d4f36:	f003 fc16 	bl	d8766 <digitalWrite>
        if (digitalRead(_miso))
   d4f3a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4f3e:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4f40:	b280      	uxth	r0, r0
        reply <<= 1;
   d4f42:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4f44:	f003 fc28 	bl	d8798 <digitalRead>
   d4f48:	b108      	cbz	r0, d4f4e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4f4a:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4f4e:	3e01      	subs	r6, #1
   d4f50:	d2df      	bcs.n	d4f12 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4f52:	4620      	mov	r0, r4
   d4f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4f58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4f58:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4f5a:	f7ff ffab 	bl	d4eb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4f62:	f003 b854 	b.w	d800e <_ZN8SPIClass14endTransactionEv>

000d4f66 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4f66:	b507      	push	{r0, r1, r2, lr}
   d4f68:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4f6a:	f7ff ffa3 	bl	d4eb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f6e:	9901      	ldr	r1, [sp, #4]
    }
   d4f70:	b003      	add	sp, #12
   d4f72:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4f76:	f003 b863 	b.w	d8040 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4f7c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4f7c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4f7e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f82:	3301      	adds	r3, #1
{
   d4f84:	b085      	sub	sp, #20
   d4f86:	4604      	mov	r4, r0
   d4f88:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4f8a:	d123      	bne.n	d4fd4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4f8c:	7901      	ldrb	r1, [r0, #4]
   d4f8e:	6800      	ldr	r0, [r0, #0]
   d4f90:	f001 fc8e 	bl	d68b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4f94:	6820      	ldr	r0, [r4, #0]
   d4f96:	6803      	ldr	r3, [r0, #0]
   d4f98:	4629      	mov	r1, r5
   d4f9a:	689b      	ldr	r3, [r3, #8]
   d4f9c:	4798      	blx	r3
        _wire -> endTransmission();
   d4f9e:	6820      	ldr	r0, [r4, #0]
   d4fa0:	f001 fca6 	bl	d68f0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4fa4:	7921      	ldrb	r1, [r4, #4]
   d4fa6:	6820      	ldr	r0, [r4, #0]
   d4fa8:	2203      	movs	r2, #3
   d4faa:	f001 fc7e 	bl	d68aa <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4fae:	6820      	ldr	r0, [r4, #0]
   d4fb0:	6803      	ldr	r3, [r0, #0]
   d4fb2:	695b      	ldr	r3, [r3, #20]
   d4fb4:	4798      	blx	r3
        value <<= 8;
   d4fb6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4fb8:	6820      	ldr	r0, [r4, #0]
   d4fba:	6803      	ldr	r3, [r0, #0]
   d4fbc:	695b      	ldr	r3, [r3, #20]
   d4fbe:	4798      	blx	r3
   d4fc0:	4328      	orrs	r0, r5
        value <<= 8;
   d4fc2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4fc4:	6820      	ldr	r0, [r4, #0]
   d4fc6:	6803      	ldr	r3, [r0, #0]
   d4fc8:	695b      	ldr	r3, [r3, #20]
   d4fca:	4798      	blx	r3
   d4fcc:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4fce:	4628      	mov	r0, r5
   d4fd0:	b005      	add	sp, #20
   d4fd2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4fd4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fd8:	3301      	adds	r3, #1
   d4fda:	d10c      	bne.n	d4ff6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4fdc:	4b1a      	ldr	r3, [pc, #104]	; (d5048 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4fde:	9300      	str	r3, [sp, #0]
   d4fe0:	2300      	movs	r3, #0
   d4fe2:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fe6:	4b19      	ldr	r3, [pc, #100]	; (d504c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4fe8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fea:	4668      	mov	r0, sp
   d4fec:	2301      	movs	r3, #1
   d4fee:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4ff2:	f7ff ffb8 	bl	d4f66 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4ff6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ffa:	2100      	movs	r1, #0
   d4ffc:	b280      	uxth	r0, r0
   d4ffe:	f003 fbb2 	bl	d8766 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5002:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5006:	4620      	mov	r0, r4
   d5008:	f7ff ff70 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d500c:	2100      	movs	r1, #0
   d500e:	4620      	mov	r0, r4
   d5010:	f7ff ff6c 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5014:	2100      	movs	r1, #0
        value <<= 8;
   d5016:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff ff67 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
   d501e:	4328      	orrs	r0, r5
        value <<= 8;
   d5020:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5022:	2100      	movs	r1, #0
   d5024:	4620      	mov	r0, r4
   d5026:	f7ff ff61 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
   d502a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d502c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5030:	2101      	movs	r1, #1
   d5032:	b280      	uxth	r0, r0
   d5034:	f003 fb97 	bl	d8766 <digitalWrite>
        if (_sck == -1)
   d5038:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d503c:	3301      	adds	r3, #1
   d503e:	d1c6      	bne.n	d4fce <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5040:	f7ff ff8a 	bl	d4f58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5044:	e7c3      	b.n	d4fce <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5046:	bf00      	nop
   d5048:	000d958c 	.word	0x000d958c
   d504c:	0007a120 	.word	0x0007a120

000d5050 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5050:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5052:	21fa      	movs	r1, #250	; 0xfa
{
   d5054:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5056:	f7ff ff91 	bl	d4f7c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d505a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d505e:	d01e      	beq.n	d509e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5060:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5062:	ed9f 7a10 	vldr	s14, [pc, #64]	; d50a4 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5066:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5068:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d506c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5070:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5074:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5076:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5078:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d507c:	1312      	asrs	r2, r2, #12
   d507e:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5080:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5082:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5086:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d508c:	3380      	adds	r3, #128	; 0x80
   d508e:	121b      	asrs	r3, r3, #8
   d5090:	ee07 3a90 	vmov	s15, r3
   d5094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5098:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d509c:	bd10      	pop	{r4, pc}
        return NAN;
   d509e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d50a8 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d50a2:	e7fb      	b.n	d509c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d50a4:	42c80000 	.word	0x42c80000
   d50a8:	7fc00000 	.word	0x7fc00000

000d50ac <_ZN15Adafruit_BME2806read16Eh>:
{
   d50ac:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d50ae:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d50b2:	3301      	adds	r3, #1
{
   d50b4:	b085      	sub	sp, #20
   d50b6:	4604      	mov	r4, r0
   d50b8:	460d      	mov	r5, r1
    if (_cs == -1) {
   d50ba:	d11f      	bne.n	d50fc <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d50bc:	7901      	ldrb	r1, [r0, #4]
   d50be:	6800      	ldr	r0, [r0, #0]
   d50c0:	f001 fbf6 	bl	d68b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50c4:	6820      	ldr	r0, [r4, #0]
   d50c6:	6803      	ldr	r3, [r0, #0]
   d50c8:	4629      	mov	r1, r5
   d50ca:	689b      	ldr	r3, [r3, #8]
   d50cc:	4798      	blx	r3
        _wire -> endTransmission();
   d50ce:	6820      	ldr	r0, [r4, #0]
   d50d0:	f001 fc0e 	bl	d68f0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d50d4:	7921      	ldrb	r1, [r4, #4]
   d50d6:	6820      	ldr	r0, [r4, #0]
   d50d8:	2202      	movs	r2, #2
   d50da:	f001 fbe6 	bl	d68aa <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d50de:	6820      	ldr	r0, [r4, #0]
   d50e0:	6803      	ldr	r3, [r0, #0]
   d50e2:	695b      	ldr	r3, [r3, #20]
   d50e4:	4798      	blx	r3
   d50e6:	4605      	mov	r5, r0
   d50e8:	6820      	ldr	r0, [r4, #0]
   d50ea:	6803      	ldr	r3, [r0, #0]
   d50ec:	695b      	ldr	r3, [r3, #20]
   d50ee:	4798      	blx	r3
   d50f0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d50f4:	b285      	uxth	r5, r0
}
   d50f6:	4628      	mov	r0, r5
   d50f8:	b005      	add	sp, #20
   d50fa:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d50fc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5100:	3301      	adds	r3, #1
   d5102:	d10c      	bne.n	d511e <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5104:	4b18      	ldr	r3, [pc, #96]	; (d5168 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5106:	9300      	str	r3, [sp, #0]
   d5108:	2300      	movs	r3, #0
   d510a:	f88d 3004 	strb.w	r3, [sp, #4]
   d510e:	4b17      	ldr	r3, [pc, #92]	; (d516c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5110:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5112:	4668      	mov	r0, sp
   d5114:	2301      	movs	r3, #1
   d5116:	f8ad 300c 	strh.w	r3, [sp, #12]
   d511a:	f7ff ff24 	bl	d4f66 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d511e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5122:	2100      	movs	r1, #0
   d5124:	b280      	uxth	r0, r0
   d5126:	f003 fb1e 	bl	d8766 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d512a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d512e:	4620      	mov	r0, r4
   d5130:	f7ff fedc 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5134:	2100      	movs	r1, #0
   d5136:	4620      	mov	r0, r4
   d5138:	f7ff fed8 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
   d513c:	2100      	movs	r1, #0
   d513e:	4605      	mov	r5, r0
   d5140:	4620      	mov	r0, r4
   d5142:	f7ff fed3 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
   d5146:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d514a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d514c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5150:	2101      	movs	r1, #1
   d5152:	b280      	uxth	r0, r0
   d5154:	f003 fb07 	bl	d8766 <digitalWrite>
        if (_sck == -1)
   d5158:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d515c:	3301      	adds	r3, #1
   d515e:	d1ca      	bne.n	d50f6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5160:	f7ff fefa 	bl	d4f58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5164:	e7c7      	b.n	d50f6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5166:	bf00      	nop
   d5168:	000d958c 	.word	0x000d958c
   d516c:	0007a120 	.word	0x0007a120

000d5170 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5170:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5172:	f7ff ff9b 	bl	d50ac <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5176:	ba40      	rev16	r0, r0
}
   d5178:	b280      	uxth	r0, r0
   d517a:	bd08      	pop	{r3, pc}

000d517c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d517c:	b538      	push	{r3, r4, r5, lr}
   d517e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5180:	f7ff ff66 	bl	d5050 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5184:	21fd      	movs	r1, #253	; 0xfd
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff ff90 	bl	d50ac <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d518c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5190:	d038      	beq.n	d5204 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5192:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5196:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5198:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d519c:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d519e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d51a2:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d51a6:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d51aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d51ae:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d51b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d51b4:	4353      	muls	r3, r2
   d51b6:	12db      	asrs	r3, r3, #11
   d51b8:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d51bc:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d51c0:	4353      	muls	r3, r2
   d51c2:	129b      	asrs	r3, r3, #10
   d51c4:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d51c6:	129b      	asrs	r3, r3, #10
   d51c8:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d51cc:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d51d0:	4353      	muls	r3, r2
   d51d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d51d6:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d51d8:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d51da:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d51dc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d51e0:	4352      	muls	r2, r2
   d51e2:	11d2      	asrs	r2, r2, #7
   d51e4:	434a      	muls	r2, r1
   d51e6:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d51ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d51ee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d51f2:	bfa8      	it	ge
   d51f4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d51f8:	131b      	asrs	r3, r3, #12
   d51fa:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d51fe:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5202:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5204:	ed9f 0a01 	vldr	s0, [pc, #4]	; d520c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5208:	e7fb      	b.n	d5202 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d520a:	bf00      	nop
   d520c:	7fc00000 	.word	0x7fc00000

000d5210 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5210:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5212:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5216:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5218:	b085      	sub	sp, #20
   d521a:	4604      	mov	r4, r0
   d521c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d521e:	d118      	bne.n	d5252 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5220:	7901      	ldrb	r1, [r0, #4]
   d5222:	6800      	ldr	r0, [r0, #0]
   d5224:	f001 fb44 	bl	d68b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5228:	6820      	ldr	r0, [r4, #0]
   d522a:	6803      	ldr	r3, [r0, #0]
   d522c:	4629      	mov	r1, r5
   d522e:	689b      	ldr	r3, [r3, #8]
   d5230:	4798      	blx	r3
        _wire -> endTransmission();
   d5232:	6820      	ldr	r0, [r4, #0]
   d5234:	f001 fb5c 	bl	d68f0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5238:	7921      	ldrb	r1, [r4, #4]
   d523a:	6820      	ldr	r0, [r4, #0]
   d523c:	2201      	movs	r2, #1
   d523e:	f001 fb34 	bl	d68aa <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5242:	6820      	ldr	r0, [r4, #0]
   d5244:	6803      	ldr	r3, [r0, #0]
   d5246:	695b      	ldr	r3, [r3, #20]
   d5248:	4798      	blx	r3
   d524a:	b2c5      	uxtb	r5, r0
}
   d524c:	4628      	mov	r0, r5
   d524e:	b005      	add	sp, #20
   d5250:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5252:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5256:	3301      	adds	r3, #1
   d5258:	d10c      	bne.n	d5274 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d525a:	4b15      	ldr	r3, [pc, #84]	; (d52b0 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d525c:	9300      	str	r3, [sp, #0]
   d525e:	2300      	movs	r3, #0
   d5260:	f88d 3004 	strb.w	r3, [sp, #4]
   d5264:	4b13      	ldr	r3, [pc, #76]	; (d52b4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5266:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5268:	4668      	mov	r0, sp
   d526a:	2301      	movs	r3, #1
   d526c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5270:	f7ff fe79 	bl	d4f66 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5274:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5278:	2100      	movs	r1, #0
   d527a:	b280      	uxth	r0, r0
   d527c:	f003 fa73 	bl	d8766 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5280:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff fe31 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d528a:	2100      	movs	r1, #0
   d528c:	4620      	mov	r0, r4
   d528e:	f7ff fe2d 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
   d5292:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5294:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5298:	2101      	movs	r1, #1
   d529a:	b280      	uxth	r0, r0
   d529c:	f003 fa63 	bl	d8766 <digitalWrite>
        if (_sck == -1)
   d52a0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d52a4:	3301      	adds	r3, #1
   d52a6:	d1d1      	bne.n	d524c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d52a8:	f7ff fe56 	bl	d4f58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d52ac:	e7ce      	b.n	d524c <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d52ae:	bf00      	nop
   d52b0:	000d958c 	.word	0x000d958c
   d52b4:	0007a120 	.word	0x0007a120

000d52b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d52b8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d52ba:	21f3      	movs	r1, #243	; 0xf3
   d52bc:	f7ff ffa8 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
}
   d52c0:	f000 0001 	and.w	r0, r0, #1
   d52c4:	bd08      	pop	{r3, pc}

000d52c6 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d52c6:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52c8:	2188      	movs	r1, #136	; 0x88
{
   d52ca:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52cc:	f7ff ff50 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d52d0:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52d2:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7ff ff4b 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d52da:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d52dc:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d52de:	4620      	mov	r0, r4
   d52e0:	f7ff ff46 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52e4:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d52e6:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52e8:	4620      	mov	r0, r4
   d52ea:	f7ff ff41 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d52ee:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52f0:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff ff3c 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d52f8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d52fa:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d52fc:	4620      	mov	r0, r4
   d52fe:	f7ff ff37 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d5302:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5304:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff ff32 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d530c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d530e:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5310:	4620      	mov	r0, r4
   d5312:	f7ff ff2d 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d5316:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5318:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d531a:	4620      	mov	r0, r4
   d531c:	f7ff ff28 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d5320:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5322:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5324:	4620      	mov	r0, r4
   d5326:	f7ff ff23 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d532a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d532c:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d532e:	4620      	mov	r0, r4
   d5330:	f7ff ff1e 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
   d5334:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5336:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5338:	4620      	mov	r0, r4
   d533a:	f7ff ff19 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d533e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5340:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5342:	4620      	mov	r0, r4
   d5344:	f7ff ff64 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5348:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d534a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d534e:	4620      	mov	r0, r4
   d5350:	f7ff ff0e 	bl	d5170 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5354:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5356:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5358:	4620      	mov	r0, r4
   d535a:	f7ff ff59 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d535e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5360:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5364:	4620      	mov	r0, r4
   d5366:	f7ff ff53 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
   d536a:	21e5      	movs	r1, #229	; 0xe5
   d536c:	4605      	mov	r5, r0
   d536e:	4620      	mov	r0, r4
   d5370:	f7ff ff4e 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
   d5374:	f000 030f 	and.w	r3, r0, #15
   d5378:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d537c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d537e:	21e6      	movs	r1, #230	; 0xe6
   d5380:	4620      	mov	r0, r4
   d5382:	f7ff ff45 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
   d5386:	21e5      	movs	r1, #229	; 0xe5
   d5388:	4605      	mov	r5, r0
   d538a:	4620      	mov	r0, r4
   d538c:	f7ff ff40 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
   d5390:	1103      	asrs	r3, r0, #4
   d5392:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5396:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5398:	21e7      	movs	r1, #231	; 0xe7
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff ff38 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
   d53a0:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d53a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d53a8 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d53a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d53aa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d53ae:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d53b0:	4604      	mov	r4, r0
   d53b2:	460e      	mov	r6, r1
   d53b4:	4615      	mov	r5, r2
    if (_cs == -1) {
   d53b6:	d112      	bne.n	d53de <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d53b8:	7901      	ldrb	r1, [r0, #4]
   d53ba:	6800      	ldr	r0, [r0, #0]
   d53bc:	f001 fa78 	bl	d68b0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d53c0:	6820      	ldr	r0, [r4, #0]
   d53c2:	6803      	ldr	r3, [r0, #0]
   d53c4:	4631      	mov	r1, r6
   d53c6:	689b      	ldr	r3, [r3, #8]
   d53c8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d53ca:	6820      	ldr	r0, [r4, #0]
   d53cc:	6803      	ldr	r3, [r0, #0]
   d53ce:	4629      	mov	r1, r5
   d53d0:	689b      	ldr	r3, [r3, #8]
   d53d2:	4798      	blx	r3
        _wire -> endTransmission();
   d53d4:	6820      	ldr	r0, [r4, #0]
   d53d6:	f001 fa8b 	bl	d68f0 <_ZN7TwoWire15endTransmissionEv>
}
   d53da:	b004      	add	sp, #16
   d53dc:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d53de:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d53e2:	3301      	adds	r3, #1
   d53e4:	d10c      	bne.n	d5400 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d53e6:	4b14      	ldr	r3, [pc, #80]	; (d5438 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d53e8:	9300      	str	r3, [sp, #0]
   d53ea:	2300      	movs	r3, #0
   d53ec:	f88d 3004 	strb.w	r3, [sp, #4]
   d53f0:	4b12      	ldr	r3, [pc, #72]	; (d543c <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d53f2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d53f4:	4668      	mov	r0, sp
   d53f6:	2301      	movs	r3, #1
   d53f8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d53fc:	f7ff fdb3 	bl	d4f66 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5400:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5404:	2100      	movs	r1, #0
   d5406:	b280      	uxth	r0, r0
   d5408:	f003 f9ad 	bl	d8766 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d540c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5410:	4620      	mov	r0, r4
   d5412:	f7ff fd6b 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5416:	4629      	mov	r1, r5
   d5418:	4620      	mov	r0, r4
   d541a:	f7ff fd67 	bl	d4eec <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d541e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5422:	2101      	movs	r1, #1
   d5424:	b280      	uxth	r0, r0
   d5426:	f003 f99e 	bl	d8766 <digitalWrite>
    if (_sck == -1)
   d542a:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d542e:	3301      	adds	r3, #1
   d5430:	d1d3      	bne.n	d53da <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5432:	f7ff fd91 	bl	d4f58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5436:	e7d0      	b.n	d53da <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5438:	000d958c 	.word	0x000d958c
   d543c:	0007a120 	.word	0x0007a120

000d5440 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5442:	00db      	lsls	r3, r3, #3
   d5444:	f002 0207 	and.w	r2, r2, #7
   d5448:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d544c:	4313      	orrs	r3, r2
   d544e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5452:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5456:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d545a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d545e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5462:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d5466:	f366 1347 	bfi	r3, r6, #5, #3
   d546a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d546e:	00ed      	lsls	r5, r5, #3
   d5470:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5474:	f007 0707 	and.w	r7, r7, #7
   d5478:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d547c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5480:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5482:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5484:	431d      	orrs	r5, r3
   d5486:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d548a:	f006 0207 	and.w	r2, r6, #7
   d548e:	21f2      	movs	r1, #242	; 0xf2
   d5490:	f7ff ff8a 	bl	d53a8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5494:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5498:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d549c:	f002 0107 	and.w	r1, r2, #7
   d54a0:	009b      	lsls	r3, r3, #2
   d54a2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d54a6:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d54aa:	4620      	mov	r0, r4
   d54ac:	21f5      	movs	r1, #245	; 0xf5
   d54ae:	f7ff ff7b 	bl	d53a8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d54b2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d54b6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d54ba:	f002 0107 	and.w	r1, r2, #7
   d54be:	009b      	lsls	r3, r3, #2
   d54c0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d54c4:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d54c8:	4620      	mov	r0, r4
   d54ca:	21f4      	movs	r1, #244	; 0xf4
}
   d54cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d54d0:	f7ff bf6a 	b.w	d53a8 <_ZN15Adafruit_BME2806write8Ehh>

000d54d4 <_ZN15Adafruit_BME2804initEv>:
{
   d54d4:	b530      	push	{r4, r5, lr}
   d54d6:	4604      	mov	r4, r0
    if (_cs == -1) {
   d54d8:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d54dc:	1c42      	adds	r2, r0, #1
{
   d54de:	b085      	sub	sp, #20
    if (_cs == -1) {
   d54e0:	d119      	bne.n	d5516 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d54e2:	6820      	ldr	r0, [r4, #0]
   d54e4:	f001 f9b2 	bl	d684c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d54e8:	21d0      	movs	r1, #208	; 0xd0
   d54ea:	4620      	mov	r0, r4
   d54ec:	f7ff fe90 	bl	d5210 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d54f0:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d54f2:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d54f4:	d145      	bne.n	d5582 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d54f6:	4620      	mov	r0, r4
   d54f8:	22b6      	movs	r2, #182	; 0xb6
   d54fa:	21e0      	movs	r1, #224	; 0xe0
   d54fc:	f7ff ff54 	bl	d53a8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5500:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5504:	f000 fc72 	bl	d5dec <delay>
    while (isReadingCalibration())
   d5508:	4620      	mov	r0, r4
   d550a:	f7ff fed5 	bl	d52b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d550e:	4605      	mov	r5, r0
   d5510:	b328      	cbz	r0, d555e <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5512:	2064      	movs	r0, #100	; 0x64
   d5514:	e7f6      	b.n	d5504 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5516:	2101      	movs	r1, #1
   d5518:	b280      	uxth	r0, r0
   d551a:	f003 f924 	bl	d8766 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d551e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5522:	2101      	movs	r1, #1
   d5524:	b280      	uxth	r0, r0
   d5526:	f003 f90d 	bl	d8744 <pinMode>
        if (_sck == -1) {
   d552a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d552e:	1c43      	adds	r3, r0, #1
   d5530:	d104      	bne.n	d553c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d5532:	f7ff fcbf 	bl	d4eb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5536:	f002 fd59 	bl	d7fec <_ZN8SPIClass5beginEv>
    }
   d553a:	e7d5      	b.n	d54e8 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d553c:	2101      	movs	r1, #1
   d553e:	b280      	uxth	r0, r0
   d5540:	f003 f900 	bl	d8744 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5544:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5548:	2101      	movs	r1, #1
   d554a:	b280      	uxth	r0, r0
   d554c:	f003 f8fa 	bl	d8744 <pinMode>
            pinMode(_miso, INPUT);
   d5550:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5554:	2100      	movs	r1, #0
   d5556:	b280      	uxth	r0, r0
   d5558:	f003 f8f4 	bl	d8744 <pinMode>
   d555c:	e7c4      	b.n	d54e8 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d555e:	4620      	mov	r0, r4
   d5560:	f7ff feb1 	bl	d52c6 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5564:	2305      	movs	r3, #5
   d5566:	9300      	str	r3, [sp, #0]
   d5568:	461a      	mov	r2, r3
   d556a:	2103      	movs	r1, #3
   d556c:	4620      	mov	r0, r4
   d556e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5572:	f7ff ff65 	bl	d5440 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d5576:	2064      	movs	r0, #100	; 0x64
   d5578:	f000 fc38 	bl	d5dec <delay>
   d557c:	2001      	movs	r0, #1
}
   d557e:	b005      	add	sp, #20
   d5580:	bd30      	pop	{r4, r5, pc}
        return false;
   d5582:	2000      	movs	r0, #0
   d5584:	e7fb      	b.n	d557e <_ZN15Adafruit_BME2804initEv+0xaa>

000d5586 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d5586:	2377      	movs	r3, #119	; 0x77
{
   d5588:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d558a:	7103      	strb	r3, [r0, #4]
{
   d558c:	4604      	mov	r4, r0
	_wire = &Wire;
   d558e:	f003 f949 	bl	d8824 <_Z19__fetch_global_Wirev>
   d5592:	6020      	str	r0, [r4, #0]
	status = init();
   d5594:	4620      	mov	r0, r4
   d5596:	f7ff ff9d 	bl	d54d4 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d559a:	b930      	cbnz	r0, d55aa <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d559c:	2376      	movs	r3, #118	; 0x76
   d559e:	7123      	strb	r3, [r4, #4]
 		status = init();
   d55a0:	4620      	mov	r0, r4
}
   d55a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d55a6:	f7ff bf95 	b.w	d54d4 <_ZN15Adafruit_BME2804initEv>
}
   d55aa:	bd10      	pop	{r4, pc}

000d55ac <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d55ac:	b510      	push	{r4, lr}
   d55ae:	4b05      	ldr	r3, [pc, #20]	; (d55c4 <_ZN10JsonBufferD1Ev+0x18>)
   d55b0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d55b2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d55b4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d55b6:	b91b      	cbnz	r3, d55c0 <_ZN10JsonBufferD1Ev+0x14>
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	b108      	cbz	r0, d55c0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d55bc:	f000 fbe6 	bl	d5d8c <free>
	}
}
   d55c0:	4620      	mov	r0, r4
   d55c2:	bd10      	pop	{r4, pc}
   d55c4:	000d95b4 	.word	0x000d95b4

000d55c8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d55c8:	b510      	push	{r4, lr}
   d55ca:	4604      	mov	r4, r0
}
   d55cc:	f7ff ffee 	bl	d55ac <_ZN10JsonBufferD1Ev>
   d55d0:	4620      	mov	r0, r4
   d55d2:	2114      	movs	r1, #20
   d55d4:	f003 f96e 	bl	d88b4 <_ZdlPvj>
   d55d8:	4620      	mov	r0, r4
   d55da:	bd10      	pop	{r4, pc}

000d55dc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d55dc:	b510      	push	{r4, lr}
   d55de:	4b03      	ldr	r3, [pc, #12]	; (d55ec <_ZN10JsonWriterD1Ev+0x10>)
   d55e0:	6003      	str	r3, [r0, #0]
   d55e2:	4604      	mov	r4, r0
   d55e4:	f7ff ffe2 	bl	d55ac <_ZN10JsonBufferD1Ev>

}
   d55e8:	4620      	mov	r0, r4
   d55ea:	bd10      	pop	{r4, pc}
   d55ec:	000d95c4 	.word	0x000d95c4

000d55f0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   d55f0:	b510      	push	{r4, lr}
   d55f2:	4604      	mov	r4, r0
}
   d55f4:	f7ff fff2 	bl	d55dc <_ZN10JsonWriterD1Ev>
   d55f8:	4620      	mov	r0, r4
   d55fa:	2130      	movs	r1, #48	; 0x30
   d55fc:	f003 f95a 	bl	d88b4 <_ZdlPvj>
   d5600:	4620      	mov	r0, r4
   d5602:	bd10      	pop	{r4, pc}

000d5604 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5604:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5606:	2201      	movs	r2, #1
	offset = 0;
   d5608:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   d560a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d560c:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   d560e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   d5612:	4770      	bx	lr

000d5614 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5614:	2300      	movs	r3, #0
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5616:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5618:	60c3      	str	r3, [r0, #12]
   d561a:	2301      	movs	r3, #1
   d561c:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d561e:	4b05      	ldr	r3, [pc, #20]	; (d5634 <_ZN10JsonWriterC1EPcj+0x20>)
   d5620:	6003      	str	r3, [r0, #0]
   d5622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5626:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d562a:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d562c:	f7ff ffea 	bl	d5604 <_ZN10JsonWriter4initEv>
}
   d5630:	bd10      	pop	{r4, pc}
   d5632:	bf00      	nop
   d5634:	000d95c4 	.word	0x000d95c4

000d5638 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5638:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   d563c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d563e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5640:	bf3f      	itttt	cc
   d5642:	6842      	ldrcc	r2, [r0, #4]
   d5644:	1c5c      	addcc	r4, r3, #1
   d5646:	60c4      	strcc	r4, [r0, #12]
   d5648:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d564a:	bf24      	itt	cs
   d564c:	2301      	movcs	r3, #1
   d564e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   d5652:	bd10      	pop	{r4, pc}

000d5654 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   d5654:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5656:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   d5658:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d565a:	b143      	cbz	r3, d566e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d565c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5660:	7e59      	ldrb	r1, [r3, #25]
   d5662:	b109      	cbz	r1, d5668 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5664:	f7ff ffe8 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   d5668:	6963      	ldr	r3, [r4, #20]
   d566a:	3b01      	subs	r3, #1
   d566c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   d566e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   d5672:	6863      	ldr	r3, [r4, #4]
   d5674:	4288      	cmp	r0, r1
   d5676:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   d567a:	bf2a      	itet	cs
   d567c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   d567e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   d5680:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   d5684:	bd10      	pop	{r4, pc}

000d5686 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5686:	b570      	push	{r4, r5, r6, lr}
   d5688:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d568a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d568e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   d5690:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5692:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5694:	4430      	add	r0, r6
   d5696:	460a      	mov	r2, r1
   d5698:	4629      	mov	r1, r5
   d569a:	f000 fb87 	bl	d5dac <vsnprintf>
	if (count <= spaceAvailable) {
   d569e:	4285      	cmp	r5, r0
		offset += count;
   d56a0:	bf2d      	iteet	cs
   d56a2:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d56a4:	68a3      	ldrcc	r3, [r4, #8]
   d56a6:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   d56a8:	18c0      	addcs	r0, r0, r3
		truncated = true;
   d56aa:	bf36      	itet	cc
   d56ac:	2301      	movcc	r3, #1
		offset += count;
   d56ae:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   d56b0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   d56b4:	bd70      	pop	{r4, r5, r6, pc}

000d56b6 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   d56b6:	b40e      	push	{r1, r2, r3}
   d56b8:	b503      	push	{r0, r1, lr}
   d56ba:	aa03      	add	r2, sp, #12
   d56bc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   d56c0:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d56c2:	f7ff ffe0 	bl	d5686 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   d56c6:	b002      	add	sp, #8
   d56c8:	f85d eb04 	ldr.w	lr, [sp], #4
   d56cc:	b003      	add	sp, #12
   d56ce:	4770      	bx	lr

000d56d0 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   d56d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56d4:	4604      	mov	r4, r0
   d56d6:	460e      	mov	r6, r1
	if (quoted) {
   d56d8:	4617      	mov	r7, r2
   d56da:	b112      	cbz	r2, d56e2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d56dc:	2122      	movs	r1, #34	; 0x22
   d56de:	f7ff ffab 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   d56e2:	f8df 810c 	ldr.w	r8, [pc, #268]	; d57f0 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   d56e6:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d56e8:	5d71      	ldrb	r1, [r6, r5]
   d56ea:	eb06 0905 	add.w	r9, r6, r5
   d56ee:	2900      	cmp	r1, #0
   d56f0:	d074      	beq.n	d57dc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   d56f2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d56f6:	429a      	cmp	r2, r3
   d56f8:	d270      	bcs.n	d57dc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   d56fa:	060b      	lsls	r3, r1, #24
   d56fc:	d534      	bpl.n	d5768 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d56fe:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5702:	2be0      	cmp	r3, #224	; 0xe0
   d5704:	f105 0901 	add.w	r9, r5, #1
   d5708:	d11d      	bne.n	d5746 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   d570a:	f816 2009 	ldrb.w	r2, [r6, r9]
   d570e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   d5712:	2b80      	cmp	r3, #128	; 0x80
   d5714:	d139      	bne.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5716:	f105 0902 	add.w	r9, r5, #2
   d571a:	f816 3009 	ldrb.w	r3, [r6, r9]
   d571e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   d5722:	2880      	cmp	r0, #128	; 0x80
   d5724:	d131      	bne.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   d5726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d572a:	0192      	lsls	r2, r2, #6
   d572c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   d5730:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   d5734:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   d5736:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   d5738:	4641      	mov	r1, r8
   d573a:	4620      	mov	r0, r4
   d573c:	f7ff ffbb 	bl	d56b6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5740:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5742:	3501      	adds	r5, #1
   d5744:	e7d0      	b.n	d56e8 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5746:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d574a:	2bc0      	cmp	r3, #192	; 0xc0
   d574c:	d11d      	bne.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d574e:	f816 3009 	ldrb.w	r3, [r6, r9]
   d5752:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5756:	2a80      	cmp	r2, #128	; 0x80
   d5758:	d117      	bne.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   d575a:	0189      	lsls	r1, r1, #6
   d575c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   d5764:	431a      	orrs	r2, r3
   d5766:	e7e7      	b.n	d5738 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   d5768:	290d      	cmp	r1, #13
   d576a:	d80a      	bhi.n	d5782 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   d576c:	2907      	cmp	r1, #7
   d576e:	d90c      	bls.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5770:	f1a1 0308 	sub.w	r3, r1, #8
   d5774:	2b05      	cmp	r3, #5
   d5776:	d808      	bhi.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5778:	e8df f003 	tbb	[pc, r3]
   d577c:	0717230b 	.word	0x0717230b
   d5780:	1d11      	.short	0x1d11
   d5782:	2922      	cmp	r1, #34	; 0x22
   d5784:	d023      	beq.n	d57ce <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   d5786:	295c      	cmp	r1, #92	; 0x5c
   d5788:	d021      	beq.n	d57ce <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   d578a:	4620      	mov	r0, r4
   d578c:	f7ff ff54 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				break;
   d5790:	e7d7      	b.n	d5742 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   d5792:	215c      	movs	r1, #92	; 0x5c
   d5794:	4620      	mov	r0, r4
   d5796:	f7ff ff4f 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d579a:	2162      	movs	r1, #98	; 0x62
   d579c:	e7f5      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d579e:	215c      	movs	r1, #92	; 0x5c
   d57a0:	4620      	mov	r0, r4
   d57a2:	f7ff ff49 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d57a6:	2166      	movs	r1, #102	; 0x66
   d57a8:	e7ef      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57aa:	215c      	movs	r1, #92	; 0x5c
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7ff ff43 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d57b2:	216e      	movs	r1, #110	; 0x6e
   d57b4:	e7e9      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57b6:	215c      	movs	r1, #92	; 0x5c
   d57b8:	4620      	mov	r0, r4
   d57ba:	f7ff ff3d 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d57be:	2172      	movs	r1, #114	; 0x72
   d57c0:	e7e3      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57c2:	215c      	movs	r1, #92	; 0x5c
   d57c4:	4620      	mov	r0, r4
   d57c6:	f7ff ff37 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d57ca:	2174      	movs	r1, #116	; 0x74
   d57cc:	e7dd      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57ce:	215c      	movs	r1, #92	; 0x5c
   d57d0:	4620      	mov	r0, r4
   d57d2:	f7ff ff31 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d57d6:	f899 1000 	ldrb.w	r1, [r9]
   d57da:	e7d6      	b.n	d578a <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
   d57dc:	b12f      	cbz	r7, d57ea <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   d57de:	4620      	mov	r0, r4
   d57e0:	2122      	movs	r1, #34	; 0x22
}
   d57e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   d57e6:	f7ff bf27 	b.w	d5638 <_ZN10JsonWriter10insertCharEc>
}
   d57ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d57ee:	bf00      	nop
   d57f0:	000d9598 	.word	0x000d9598

000d57f4 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   d57f4:	6942      	ldr	r2, [r0, #20]
   d57f6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   d57fa:	7e1a      	ldrb	r2, [r3, #24]
   d57fc:	b112      	cbz	r2, d5804 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d57fe:	2200      	movs	r2, #0
   d5800:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   d5802:	4770      	bx	lr
		insertChar(',');
   d5804:	212c      	movs	r1, #44	; 0x2c
   d5806:	f7ff bf17 	b.w	d5638 <_ZN10JsonWriter10insertCharEc>

000d580a <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d580a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d580c:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d580e:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5810:	3301      	adds	r3, #1
   d5812:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5814:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5816:	d80f      	bhi.n	d5838 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   d5818:	f7ff ffec 	bl	d57f4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   d581c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   d581e:	9901      	ldr	r1, [sp, #4]
	contextIndex++;
   d5820:	1c5a      	adds	r2, r3, #1
   d5822:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	context[contextIndex].isFirst = true;
   d5826:	2501      	movs	r5, #1
	contextIndex++;
   d5828:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   d582a:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
   d582c:	76de      	strb	r6, [r3, #27]
	insertChar(startChar);
   d582e:	f7ff ff03 	bl	d5638 <_ZN10JsonWriter10insertCharEc>
   d5832:	4628      	mov	r0, r5
}
   d5834:	b002      	add	sp, #8
   d5836:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   d5838:	2000      	movs	r0, #0
   d583a:	e7fb      	b.n	d5834 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000d583c <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d583c:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d583e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   d5840:	2900      	cmp	r1, #0
void JsonWriter::insertValue(double value) {
   d5842:	ec53 2b10 	vmov	r2, r3, d0
	if (floatPlaces >= 0) {
   d5846:	db08      	blt.n	d585a <_ZN10JsonWriter11insertValueEd+0x1e>
		insertsprintf("%.*lf", floatPlaces, value);
   d5848:	460a      	mov	r2, r1
   d584a:	ed8d 0b00 	vstr	d0, [sp]
   d584e:	4906      	ldr	r1, [pc, #24]	; (d5868 <_ZN10JsonWriter11insertValueEd+0x2c>)
   d5850:	f7ff ff31 	bl	d56b6 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d5854:	b003      	add	sp, #12
   d5856:	f85d fb04 	ldr.w	pc, [sp], #4
		insertsprintf("%lf", value);
   d585a:	4904      	ldr	r1, [pc, #16]	; (d586c <_ZN10JsonWriter11insertValueEd+0x30>)
}
   d585c:	b003      	add	sp, #12
   d585e:	f85d eb04 	ldr.w	lr, [sp], #4
		insertsprintf("%lf", value);
   d5862:	f7ff bf28 	b.w	d56b6 <_ZN10JsonWriter13insertsprintfEPKcz>
   d5866:	bf00      	nop
   d5868:	000d959f 	.word	0x000d959f
   d586c:	000d95a5 	.word	0x000d95a5

000d5870 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <cellular_signal+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030274 	.word	0x00030274

000d5880 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <os_mutex_recursive_create+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030248 	.word	0x00030248

000d5890 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <os_mutex_recursive_destroy+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030248 	.word	0x00030248

000d58a0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <os_mutex_recursive_lock+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030248 	.word	0x00030248

000d58b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <os_mutex_recursive_unlock+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030248 	.word	0x00030248

000d58c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_RNG_GetRandomNumber+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	685b      	ldr	r3, [r3, #4]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030218 	.word	0x00030218

000d58d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_Delay_Microseconds+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	68db      	ldr	r3, [r3, #12]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030218 	.word	0x00030218

000d58e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	695b      	ldr	r3, [r3, #20]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030218 	.word	0x00030218

000d58f0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_Pin_Mode+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	689b      	ldr	r3, [r3, #8]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003022c 	.word	0x0003022c

000d5900 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_Get_Pin_Mode+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	68db      	ldr	r3, [r3, #12]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003022c 	.word	0x0003022c

000d5910 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <HAL_GPIO_Write+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	691b      	ldr	r3, [r3, #16]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	0003022c 	.word	0x0003022c

000d5920 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <HAL_GPIO_Read+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	695b      	ldr	r3, [r3, #20]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	0003022c 	.word	0x0003022c

000d5930 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <hal_i2c_begin+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	68db      	ldr	r3, [r3, #12]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030228 	.word	0x00030228

000d5940 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <hal_i2c_begin_transmission+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	699b      	ldr	r3, [r3, #24]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030228 	.word	0x00030228

000d5950 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <hal_i2c_end_transmission+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	69db      	ldr	r3, [r3, #28]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030228 	.word	0x00030228

000d5960 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <hal_i2c_write+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6a1b      	ldr	r3, [r3, #32]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030228 	.word	0x00030228

000d5970 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <hal_i2c_available+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030228 	.word	0x00030228

000d5980 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <hal_i2c_read+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030228 	.word	0x00030228

000d5990 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <hal_i2c_peek+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030228 	.word	0x00030228

000d59a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <hal_i2c_flush+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030228 	.word	0x00030228

000d59b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <hal_i2c_is_enabled+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030228 	.word	0x00030228

000d59c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <hal_i2c_init+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030228 	.word	0x00030228

000d59d0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <hal_i2c_lock+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030228 	.word	0x00030228

000d59e0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <hal_i2c_unlock+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030228 	.word	0x00030228

000d59f0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <hal_i2c_request_ex+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030228 	.word	0x00030228

000d5a00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <inet_inet_ntop+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	695b      	ldr	r3, [r3, #20]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030264 	.word	0x00030264

000d5a10 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <netdb_freeaddrinfo+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	689b      	ldr	r3, [r3, #8]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030268 	.word	0x00030268

000d5a20 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <netdb_getaddrinfo+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	68db      	ldr	r3, [r3, #12]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030268 	.word	0x00030268

000d5a30 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <hal_spi_begin+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	681b      	ldr	r3, [r3, #0]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030230 	.word	0x00030230

000d5a40 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <hal_spi_transfer+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	695b      	ldr	r3, [r3, #20]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030230 	.word	0x00030230

000d5a50 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <hal_spi_init+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030230 	.word	0x00030230

000d5a60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <hal_spi_is_enabled+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030230 	.word	0x00030230

000d5a70 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <hal_spi_info+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030230 	.word	0x00030230

000d5a80 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <hal_spi_set_settings+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030230 	.word	0x00030230

000d5a90 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <hal_spi_acquire+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030230 	.word	0x00030230

000d5aa0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <hal_spi_release+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030230 	.word	0x00030230

000d5ab0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <hal_usart_init+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	681b      	ldr	r3, [r3, #0]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003023c 	.word	0x0003023c

000d5ac0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <hal_usart_end+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	689b      	ldr	r3, [r3, #8]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003023c 	.word	0x0003023c

000d5ad0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <hal_usart_write+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	68db      	ldr	r3, [r3, #12]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003023c 	.word	0x0003023c

000d5ae0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <hal_usart_available+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	691b      	ldr	r3, [r3, #16]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003023c 	.word	0x0003023c

000d5af0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <hal_usart_read+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	695b      	ldr	r3, [r3, #20]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003023c 	.word	0x0003023c

000d5b00 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <hal_usart_peek+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	699b      	ldr	r3, [r3, #24]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003023c 	.word	0x0003023c

000d5b10 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <hal_usart_flush+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	69db      	ldr	r3, [r3, #28]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003023c 	.word	0x0003023c

000d5b20 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <hal_usart_is_enabled+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6a1b      	ldr	r3, [r3, #32]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003023c 	.word	0x0003023c

000d5b30 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <hal_usart_available_data_for_write+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003023c 	.word	0x0003023c

000d5b40 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <hal_usart_begin_config+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003023c 	.word	0x0003023c

000d5b50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_USB_USART_Init+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	681b      	ldr	r3, [r3, #0]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	0003024c 	.word	0x0003024c

000d5b60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_USB_USART_Begin+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	685b      	ldr	r3, [r3, #4]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	0003024c 	.word	0x0003024c

000d5b70 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_USB_USART_End+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	689b      	ldr	r3, [r3, #8]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	0003024c 	.word	0x0003024c

000d5b80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_USB_USART_Available_Data+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	691b      	ldr	r3, [r3, #16]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	0003024c 	.word	0x0003024c

000d5b90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	695b      	ldr	r3, [r3, #20]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	0003024c 	.word	0x0003024c

000d5ba0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_USB_USART_Receive_Data+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	699b      	ldr	r3, [r3, #24]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	0003024c 	.word	0x0003024c

000d5bb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_USB_USART_Send_Data+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	69db      	ldr	r3, [r3, #28]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	0003024c 	.word	0x0003024c

000d5bc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_USB_USART_Flush_Data+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6a1b      	ldr	r3, [r3, #32]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	0003024c 	.word	0x0003024c

000d5bd0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <panic_+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030260 	.word	0x00030260

000d5be0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <log_level_name+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030260 	.word	0x00030260

000d5bf0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <log_set_callbacks+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030260 	.word	0x00030260

000d5c00 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b03      	ldr	r3, [pc, #12]	; (d5c10 <diag_get_source+0x10>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5c0a:	9301      	str	r3, [sp, #4]
   d5c0c:	bd08      	pop	{r3, pc}
   d5c0e:	0000      	.short	0x0000
   d5c10:	00030260 	.word	0x00030260

000d5c14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <set_system_mode+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	685b      	ldr	r3, [r3, #4]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030220 	.word	0x00030220

000d5c24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <system_delay_ms+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	695b      	ldr	r3, [r3, #20]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030220 	.word	0x00030220

000d5c34 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <application_thread_current+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030220 	.word	0x00030220

000d5c44 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <application_thread_invoke+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030220 	.word	0x00030220

000d5c54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b03      	ldr	r3, [pc, #12]	; (d5c64 <system_ctrl_set_app_request_handler+0x10>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5c5e:	9301      	str	r3, [sp, #4]
   d5c60:	bd08      	pop	{r3, pc}
   d5c62:	0000      	.short	0x0000
   d5c64:	00030220 	.word	0x00030220

000d5c68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b03      	ldr	r3, [pc, #12]	; (d5c78 <system_ctrl_set_result+0x10>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5c72:	9301      	str	r3, [sp, #4]
   d5c74:	bd08      	pop	{r3, pc}
   d5c76:	0000      	.short	0x0000
   d5c78:	00030220 	.word	0x00030220

000d5c7c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <spark_variable+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	681b      	ldr	r3, [r3, #0]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030244 	.word	0x00030244

000d5c8c <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <spark_cloud_flag_connected+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	695b      	ldr	r3, [r3, #20]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030244 	.word	0x00030244

000d5c9c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <spark_send_event+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6a1b      	ldr	r3, [r3, #32]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030244 	.word	0x00030244

000d5cac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030244 	.word	0x00030244

000d5cbc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <network_connect+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	685b      	ldr	r3, [r3, #4]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030240 	.word	0x00030240

000d5ccc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <network_connecting+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	689b      	ldr	r3, [r3, #8]
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	00030240 	.word	0x00030240

000d5cdc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <network_disconnect+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	68db      	ldr	r3, [r3, #12]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	00030240 	.word	0x00030240

000d5cec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <network_ready+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	691b      	ldr	r3, [r3, #16]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030240 	.word	0x00030240

000d5cfc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <network_on+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	695b      	ldr	r3, [r3, #20]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030240 	.word	0x00030240

000d5d0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <network_off+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	699b      	ldr	r3, [r3, #24]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	00030240 	.word	0x00030240

000d5d1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <network_listen+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	69db      	ldr	r3, [r3, #28]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030240 	.word	0x00030240

000d5d2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <network_listening+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6a1b      	ldr	r3, [r3, #32]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030240 	.word	0x00030240

000d5d3c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <network_set_listen_timeout+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030240 	.word	0x00030240

000d5d4c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <network_get_listen_timeout+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030240 	.word	0x00030240

000d5d5c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <network_is_on+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030240 	.word	0x00030240

000d5d6c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <network_is_off+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030240 	.word	0x00030240

000d5d7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <malloc+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	681b      	ldr	r3, [r3, #0]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	0003021c 	.word	0x0003021c

000d5d8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <free+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	685b      	ldr	r3, [r3, #4]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	0003021c 	.word	0x0003021c

000d5d9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <realloc+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	689b      	ldr	r3, [r3, #8]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	0003021c 	.word	0x0003021c

000d5dac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <vsnprintf+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	0003021c 	.word	0x0003021c

000d5dbc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <abort+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	0003021c 	.word	0x0003021c

000d5dcc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <_malloc_r+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003021c 	.word	0x0003021c

000d5ddc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <newlib_impure_ptr_callback+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003021c 	.word	0x0003021c

000d5dec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5dec:	2100      	movs	r1, #0
   d5dee:	f7ff bf19 	b.w	d5c24 <system_delay_ms>

000d5df2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5df2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5df4:	6883      	ldr	r3, [r0, #8]
   d5df6:	4604      	mov	r4, r0
   d5df8:	b90b      	cbnz	r3, d5dfe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5dfa:	f002 fd61 	bl	d88c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5dfe:	68c3      	ldr	r3, [r0, #12]
   d5e00:	4798      	blx	r3
      if (_M_manager)
   d5e02:	68a3      	ldr	r3, [r4, #8]
   d5e04:	b11b      	cbz	r3, d5e0e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e06:	2203      	movs	r2, #3
   d5e08:	4621      	mov	r1, r4
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e0e:	4620      	mov	r0, r4
   d5e10:	2110      	movs	r1, #16
}
   d5e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5e16:	f002 bd4d 	b.w	d88b4 <_ZdlPvj>

000d5e1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e1a:	b510      	push	{r4, lr}
          _M_dispose();
   d5e1c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e1e:	4604      	mov	r4, r0
          _M_dispose();
   d5e20:	689b      	ldr	r3, [r3, #8]
   d5e22:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e24:	68a3      	ldr	r3, [r4, #8]
   d5e26:	3b01      	subs	r3, #1
   d5e28:	60a3      	str	r3, [r4, #8]
   d5e2a:	b92b      	cbnz	r3, d5e38 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5e2c:	6823      	ldr	r3, [r4, #0]
   d5e2e:	4620      	mov	r0, r4
   d5e30:	68db      	ldr	r3, [r3, #12]
    }
   d5e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5e36:	4718      	bx	r3
    }
   d5e38:	bd10      	pop	{r4, pc}

000d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5e3a:	680b      	ldr	r3, [r1, #0]
   d5e3c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5e3e:	b113      	cbz	r3, d5e46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5e40:	685a      	ldr	r2, [r3, #4]
   d5e42:	3201      	adds	r2, #1
   d5e44:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5e46:	4770      	bx	lr

000d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5e48:	b510      	push	{r4, lr}
   d5e4a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5e4c:	6800      	ldr	r0, [r0, #0]
   d5e4e:	b128      	cbz	r0, d5e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5e50:	6843      	ldr	r3, [r0, #4]
   d5e52:	3b01      	subs	r3, #1
   d5e54:	6043      	str	r3, [r0, #4]
   d5e56:	b90b      	cbnz	r3, d5e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5e58:	f7ff ffdf 	bl	d5e1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e60:	4802      	ldr	r0, [pc, #8]	; (d5e6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5e62:	2300      	movs	r3, #0
   d5e64:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5e66:	f7ff bd0b 	b.w	d5880 <os_mutex_recursive_create>
   d5e6a:	bf00      	nop
   d5e6c:	2003e544 	.word	0x2003e544

000d5e70 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5e70:	2200      	movs	r2, #0
   d5e72:	6840      	ldr	r0, [r0, #4]
   d5e74:	4611      	mov	r1, r2
   d5e76:	f7ff bf39 	b.w	d5cec <network_ready>

000d5e7a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5e7a:	2200      	movs	r2, #0
   d5e7c:	6840      	ldr	r0, [r0, #4]
   d5e7e:	4611      	mov	r1, r2
   d5e80:	f7ff bf54 	b.w	d5d2c <network_listening>

000d5e84 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5e84:	2200      	movs	r2, #0
   d5e86:	6840      	ldr	r0, [r0, #4]
   d5e88:	4611      	mov	r1, r2
   d5e8a:	f7ff bf5f 	b.w	d5d4c <network_get_listen_timeout>

000d5e8e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5e8e:	6840      	ldr	r0, [r0, #4]
   d5e90:	2200      	movs	r2, #0
   d5e92:	f7ff bf53 	b.w	d5d3c <network_set_listen_timeout>

000d5e96 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	2200      	movs	r2, #0
   d5e9a:	f081 0101 	eor.w	r1, r1, #1
   d5e9e:	f7ff bf3d 	b.w	d5d1c <network_listen>

000d5ea2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5ea2:	2300      	movs	r3, #0
   d5ea4:	6840      	ldr	r0, [r0, #4]
   d5ea6:	461a      	mov	r2, r3
   d5ea8:	4619      	mov	r1, r3
   d5eaa:	f7ff bf2f 	b.w	d5d0c <network_off>

000d5eae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5eae:	2300      	movs	r3, #0
   d5eb0:	6840      	ldr	r0, [r0, #4]
   d5eb2:	461a      	mov	r2, r3
   d5eb4:	4619      	mov	r1, r3
   d5eb6:	f7ff bf21 	b.w	d5cfc <network_on>

000d5eba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5eba:	2200      	movs	r2, #0
   d5ebc:	6840      	ldr	r0, [r0, #4]
   d5ebe:	4611      	mov	r1, r2
   d5ec0:	f7ff bf04 	b.w	d5ccc <network_connecting>

000d5ec4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	2200      	movs	r2, #0
   d5ec8:	2102      	movs	r1, #2
   d5eca:	f7ff bf07 	b.w	d5cdc <network_disconnect>

000d5ece <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5ece:	2300      	movs	r3, #0
   d5ed0:	6840      	ldr	r0, [r0, #4]
   d5ed2:	461a      	mov	r2, r3
   d5ed4:	f7ff bef2 	b.w	d5cbc <network_connect>

000d5ed8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d5eda:	4b1b      	ldr	r3, [pc, #108]	; (d5f48 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5edc:	6003      	str	r3, [r0, #0]
   d5ede:	2500      	movs	r5, #0
   d5ee0:	460f      	mov	r7, r1
   d5ee2:	3330      	adds	r3, #48	; 0x30
   d5ee4:	2618      	movs	r6, #24
   d5ee6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5eea:	b089      	sub	sp, #36	; 0x24
   d5eec:	6043      	str	r3, [r0, #4]
   d5eee:	4632      	mov	r2, r6
   d5ef0:	4629      	mov	r1, r5
   d5ef2:	4604      	mov	r4, r0
   d5ef4:	3010      	adds	r0, #16
   d5ef6:	f003 f90f 	bl	d9118 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5efa:	6878      	ldr	r0, [r7, #4]
   d5efc:	462a      	mov	r2, r5
   d5efe:	4629      	mov	r1, r5
   d5f00:	f7ff fef4 	bl	d5cec <network_ready>
   d5f04:	b918      	cbnz	r0, d5f0e <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d5f06:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d5f08:	4620      	mov	r0, r4
   d5f0a:	b009      	add	sp, #36	; 0x24
   d5f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d5f0e:	4629      	mov	r1, r5
   d5f10:	4632      	mov	r2, r6
   d5f12:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d5f14:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d5f18:	f003 f8fe 	bl	d9118 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5f1c:	a902      	add	r1, sp, #8
   d5f1e:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d5f20:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5f24:	f7ff fca4 	bl	d5870 <cellular_signal>
   d5f28:	b110      	cbz	r0, d5f30 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d5f2a:	2301      	movs	r3, #1
   d5f2c:	60a3      	str	r3, [r4, #8]
            return sig;
   d5f2e:	e7eb      	b.n	d5f08 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d5f30:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5f32:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d5f34:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5f36:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5f38:	b90b      	cbnz	r3, d5f3e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d5f3a:	2302      	movs	r3, #2
   d5f3c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d5f3e:	a902      	add	r1, sp, #8
   d5f40:	4620      	mov	r0, r4
   d5f42:	f000 f8c0 	bl	d60c6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d5f46:	e7df      	b.n	d5f08 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d5f48:	000d9610 	.word	0x000d9610

000d5f4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5f4c:	4b08      	ldr	r3, [pc, #32]	; (d5f70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5f4e:	b510      	push	{r4, lr}
   d5f50:	2428      	movs	r4, #40	; 0x28
   d5f52:	4622      	mov	r2, r4
   d5f54:	4618      	mov	r0, r3
   d5f56:	2100      	movs	r1, #0
   d5f58:	f003 f8de 	bl	d9118 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f5c:	4b05      	ldr	r3, [pc, #20]	; (d5f74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5f5e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5f64:	6042      	str	r2, [r0, #4]
   d5f66:	2204      	movs	r2, #4
   d5f68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5f6a:	4a03      	ldr	r2, [pc, #12]	; (d5f78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5f6c:	601a      	str	r2, [r3, #0]
   d5f6e:	bd10      	pop	{r4, pc}
   d5f70:	2003e550 	.word	0x2003e550
   d5f74:	2003e548 	.word	0x2003e548
   d5f78:	000d95d4 	.word	0x000d95d4

000d5f7c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5f7c:	4770      	bx	lr

000d5f7e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5f7e:	7d00      	ldrb	r0, [r0, #20]
   d5f80:	4770      	bx	lr

000d5f82 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d5f82:	7d03      	ldrb	r3, [r0, #20]
   d5f84:	b14b      	cbz	r3, d5f9a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d5f86:	6983      	ldr	r3, [r0, #24]
   d5f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5f8c:	d005      	beq.n	d5f9a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d5f8e:	6a00      	ldr	r0, [r0, #32]
   d5f90:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d5f94:	bf18      	it	ne
   d5f96:	2001      	movne	r0, #1
   d5f98:	4770      	bx	lr
   d5f9a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d5f9c:	4770      	bx	lr

000d5f9e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d5f9e:	6803      	ldr	r3, [r0, #0]
   d5fa0:	6a1b      	ldr	r3, [r3, #32]
   d5fa2:	4718      	bx	r3

000d5fa4 <_ZN14CellularSignalD0Ev>:
   d5fa4:	b510      	push	{r4, lr}
   d5fa6:	2128      	movs	r1, #40	; 0x28
   d5fa8:	4604      	mov	r4, r0
   d5faa:	f002 fc83 	bl	d88b4 <_ZdlPvj>
   d5fae:	4620      	mov	r0, r4
   d5fb0:	bd10      	pop	{r4, pc}
	...

000d5fb4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5fb4:	7d03      	ldrb	r3, [r0, #20]
   d5fb6:	b17b      	cbz	r3, d5fd8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5fb8:	69c3      	ldr	r3, [r0, #28]
   d5fba:	2b00      	cmp	r3, #0
   d5fbc:	db0c      	blt.n	d5fd8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5fbe:	ee07 3a90 	vmov	s15, r3
   d5fc2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5fe0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5fca:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5fce:	eddf 7a05 	vldr	s15, [pc, #20]	; d5fe4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5fd2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5fd6:	4770      	bx	lr
    return -1.0f;
   d5fd8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5fdc:	4770      	bx	lr
   d5fde:	bf00      	nop
   d5fe0:	477fff00 	.word	0x477fff00
   d5fe4:	42c80000 	.word	0x42c80000

000d5fe8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5fe8:	7d03      	ldrb	r3, [r0, #20]
   d5fea:	b163      	cbz	r3, d6006 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d5fec:	6983      	ldr	r3, [r0, #24]
   d5fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5ff2:	d008      	beq.n	d6006 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d5ff4:	ee07 3a90 	vmov	s15, r3
   d5ff8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d600c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6000:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6004:	4770      	bx	lr
    return 0.0f;
   d6006:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6010 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d600a:	4770      	bx	lr
   d600c:	42c80000 	.word	0x42c80000
   d6010:	00000000 	.word	0x00000000

000d6014 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6014:	7d03      	ldrb	r3, [r0, #20]
   d6016:	b17b      	cbz	r3, d6038 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6018:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d601a:	2b00      	cmp	r3, #0
   d601c:	db0c      	blt.n	d6038 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d601e:	ee07 3a90 	vmov	s15, r3
   d6022:	ed9f 7a07 	vldr	s14, [pc, #28]	; d6040 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d602a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d602e:	eddf 7a05 	vldr	s15, [pc, #20]	; d6044 <_ZNK14CellularSignal10getQualityEv+0x30>
   d6032:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6036:	4770      	bx	lr
    return -1.0f;
   d6038:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d603c:	4770      	bx	lr
   d603e:	bf00      	nop
   d6040:	477fff00 	.word	0x477fff00
   d6044:	42c80000 	.word	0x42c80000

000d6048 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6048:	7d03      	ldrb	r3, [r0, #20]
   d604a:	b163      	cbz	r3, d6066 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d604c:	6a03      	ldr	r3, [r0, #32]
   d604e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6052:	d008      	beq.n	d6066 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d6054:	ee07 3a90 	vmov	s15, r3
   d6058:	ed9f 7a04 	vldr	s14, [pc, #16]	; d606c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d605c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6060:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6064:	4770      	bx	lr
    return 0.0f;
   d6066:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6070 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d606a:	4770      	bx	lr
   d606c:	42c80000 	.word	0x42c80000
   d6070:	00000000 	.word	0x00000000

000d6074 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d6074:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d6076:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d6078:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d607a:	da0a      	bge.n	d6092 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d607c:	212d      	movs	r1, #45	; 0x2d
   d607e:	f001 ff37 	bl	d7ef0 <_ZN5Print5printEc>
            val = -n;
   d6082:	4261      	negs	r1, r4
            t = print('-');
   d6084:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6086:	220a      	movs	r2, #10
   d6088:	4630      	mov	r0, r6
   d608a:	f001 ff4a 	bl	d7f22 <_ZN5Print11printNumberEmh>
    }
}
   d608e:	4428      	add	r0, r5
   d6090:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d6092:	4621      	mov	r1, r4
        size_t t = 0;
   d6094:	2500      	movs	r5, #0
   d6096:	e7f6      	b.n	d6086 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d6098 <_ZNK14CellularSignal7printToER5Print>:
{
   d6098:	b570      	push	{r4, r5, r6, lr}
   d609a:	460c      	mov	r4, r1
   d609c:	4605      	mov	r5, r0
   d609e:	6881      	ldr	r1, [r0, #8]
   d60a0:	4620      	mov	r0, r4
   d60a2:	f7ff ffe7 	bl	d6074 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d60a6:	212c      	movs	r1, #44	; 0x2c
   d60a8:	4606      	mov	r6, r0
   d60aa:	4620      	mov	r0, r4
   d60ac:	f001 ff20 	bl	d7ef0 <_ZN5Print5printEc>
   d60b0:	68e9      	ldr	r1, [r5, #12]
   d60b2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d60b4:	4620      	mov	r0, r4
   d60b6:	f7ff ffdd 	bl	d6074 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d60ba:	4430      	add	r0, r6
   d60bc:	bd70      	pop	{r4, r5, r6, pc}

000d60be <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d60be:	f1a0 0004 	sub.w	r0, r0, #4
   d60c2:	f7ff bfe9 	b.w	d6098 <_ZNK14CellularSignal7printToER5Print>

000d60c6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d60c6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d60c8:	460d      	mov	r5, r1
   d60ca:	f100 0410 	add.w	r4, r0, #16
   d60ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60d2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d60d6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d60da:	2001      	movs	r0, #1
   d60dc:	bd30      	pop	{r4, r5, pc}

000d60de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d60de:	4770      	bx	lr

000d60e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d60e0:	2000      	movs	r0, #0
   d60e2:	4770      	bx	lr

000d60e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d60e4:	b510      	push	{r4, lr}
   d60e6:	2110      	movs	r1, #16
   d60e8:	4604      	mov	r4, r0
   d60ea:	f002 fbe3 	bl	d88b4 <_ZdlPvj>
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d60f2:	b508      	push	{r3, lr}
      { delete this; }
   d60f4:	f7ff fff6 	bl	d60e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d60f8:	bd08      	pop	{r3, pc}

000d60fa <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d60fa:	b510      	push	{r4, lr}
      if (_M_manager)
   d60fc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d60fe:	4604      	mov	r4, r0
      if (_M_manager)
   d6100:	b113      	cbz	r3, d6108 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6102:	2203      	movs	r2, #3
   d6104:	4601      	mov	r1, r0
   d6106:	4798      	blx	r3
    }
   d6108:	4620      	mov	r0, r4
   d610a:	bd10      	pop	{r4, pc}

000d610c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d610c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d610e:	2200      	movs	r2, #0
   d6110:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6114:	6002      	str	r2, [r0, #0]
   d6116:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6118:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d611a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d611c:	680c      	ldr	r4, [r1, #0]
   d611e:	8085      	strh	r5, [r0, #4]
   d6120:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6122:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6124:	bd30      	pop	{r4, r5, pc}

000d6126 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6126:	b510      	push	{r4, lr}
   d6128:	4604      	mov	r4, r0
    free((void*)msg_);
   d612a:	6800      	ldr	r0, [r0, #0]
   d612c:	f7ff fe2e 	bl	d5d8c <free>
}
   d6130:	4620      	mov	r0, r4
   d6132:	bd10      	pop	{r4, pc}

000d6134 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6134:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6136:	68c4      	ldr	r4, [r0, #12]
   d6138:	b1f4      	cbz	r4, d6178 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d613a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d613c:	2b02      	cmp	r3, #2
   d613e:	d103      	bne.n	d6148 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6140:	f104 000c 	add.w	r0, r4, #12
   d6144:	f7ff ffef 	bl	d6126 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6148:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d614a:	b135      	cbz	r5, d615a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d614c:	4628      	mov	r0, r5
   d614e:	f7ff ffd4 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
   d6152:	2110      	movs	r1, #16
   d6154:	4628      	mov	r0, r5
   d6156:	f002 fbad 	bl	d88b4 <_ZdlPvj>
   d615a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d615c:	b135      	cbz	r5, d616c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d615e:	4628      	mov	r0, r5
   d6160:	f7ff ffcb 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
   d6164:	2110      	movs	r1, #16
   d6166:	4628      	mov	r0, r5
   d6168:	f002 fba4 	bl	d88b4 <_ZdlPvj>
   d616c:	4620      	mov	r0, r4
   d616e:	2114      	movs	r1, #20
   d6170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6174:	f002 bb9e 	b.w	d88b4 <_ZdlPvj>
   d6178:	bd38      	pop	{r3, r4, r5, pc}

000d617a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d617a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d617c:	460e      	mov	r6, r1
   d617e:	4604      	mov	r4, r0
   d6180:	f856 3b04 	ldr.w	r3, [r6], #4
   d6184:	9300      	str	r3, [sp, #0]
   d6186:	460d      	mov	r5, r1
   d6188:	a801      	add	r0, sp, #4
   d618a:	4631      	mov	r1, r6
   d618c:	f7ff fe55 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6190:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6192:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6194:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6196:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6198:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d619a:	2300      	movs	r3, #0
   d619c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d619e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d61a0:	f7ff fe52 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61a4:	4630      	mov	r0, r6
   d61a6:	f7ff fe4f 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d61aa:	4628      	mov	r0, r5
   d61ac:	2108      	movs	r1, #8
   d61ae:	f002 fb81 	bl	d88b4 <_ZdlPvj>
        return p;
    }
   d61b2:	4620      	mov	r0, r4
   d61b4:	b002      	add	sp, #8
   d61b6:	bd70      	pop	{r4, r5, r6, pc}

000d61b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d61b8:	b513      	push	{r0, r1, r4, lr}
   d61ba:	460b      	mov	r3, r1
   d61bc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61be:	e9d0 0100 	ldrd	r0, r1, [r0]
   d61c2:	466c      	mov	r4, sp
   d61c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d61d4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61d8:	b002      	add	sp, #8
   d61da:	bd10      	pop	{r4, pc}

000d61dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d61dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61de:	b510      	push	{r4, lr}
      if (_M_empty())
   d61e0:	b90a      	cbnz	r2, d61e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d61e2:	f002 fb6d 	bl	d88c0 <_ZSt25__throw_bad_function_callv>
    }
   d61e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61ea:	68c3      	ldr	r3, [r0, #12]
   d61ec:	4718      	bx	r3

000d61ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d61f0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d61f2:	f100 0110 	add.w	r1, r0, #16
   d61f6:	f7ff fff1 	bl	d61dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d61fa:	bd08      	pop	{r3, pc}

000d61fc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d61fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61fe:	b510      	push	{r4, lr}
      if (_M_empty())
   d6200:	b90a      	cbnz	r2, d6206 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6202:	f002 fb5d 	bl	d88c0 <_ZSt25__throw_bad_function_callv>
    }
   d6206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d620a:	68c3      	ldr	r3, [r0, #12]
   d620c:	4718      	bx	r3

000d620e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d620e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6210:	6800      	ldr	r0, [r0, #0]
   d6212:	f100 0110 	add.w	r1, r0, #16
   d6216:	f7ff fff1 	bl	d61fc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d621a:	bd08      	pop	{r3, pc}

000d621c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d621c:	b538      	push	{r3, r4, r5, lr}
   d621e:	2300      	movs	r3, #0
   d6220:	4604      	mov	r4, r0
   d6222:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6224:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6226:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6228:	f7fd ff35 	bl	d4096 <_Znwj>
   d622c:	b128      	cbz	r0, d623a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d622e:	2301      	movs	r3, #1
   d6230:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6234:	4b02      	ldr	r3, [pc, #8]	; (d6240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6236:	6003      	str	r3, [r0, #0]
   d6238:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d623a:	6020      	str	r0, [r4, #0]
	}
   d623c:	4620      	mov	r0, r4
   d623e:	bd38      	pop	{r3, r4, r5, pc}
   d6240:	000d964c 	.word	0x000d964c

000d6244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6244:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6246:	2300      	movs	r3, #0
   d6248:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d624a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d624c:	4604      	mov	r4, r0
   d624e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6250:	b12b      	cbz	r3, d625e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6252:	2202      	movs	r2, #2
   d6254:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6256:	68eb      	ldr	r3, [r5, #12]
   d6258:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d625a:	68ab      	ldr	r3, [r5, #8]
   d625c:	60a3      	str	r3, [r4, #8]
    }
   d625e:	4620      	mov	r0, r4
   d6260:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6264:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6266:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6268:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d626a:	4668      	mov	r0, sp
   d626c:	f7ff ff4e 	bl	d610c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6270:	f04f 0302 	mov.w	r3, #2
   d6274:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6278:	2a00      	cmp	r2, #0
   d627a:	d103      	bne.n	d6284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d627c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6280:	2900      	cmp	r1, #0
   d6282:	d1f7      	bne.n	d6274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6284:	d125      	bne.n	d62d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6286:	f104 050c 	add.w	r5, r4, #12
   d628a:	4669      	mov	r1, sp
   d628c:	4628      	mov	r0, r5
   d628e:	f7ff ff3d 	bl	d610c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6292:	f3bf 8f5b 	dmb	ish
   d6296:	2301      	movs	r3, #1
   d6298:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d629a:	2000      	movs	r0, #0
   d629c:	f104 0308 	add.w	r3, r4, #8
   d62a0:	f3bf 8f5b 	dmb	ish
   d62a4:	e853 6f00 	ldrex	r6, [r3]
   d62a8:	e843 0200 	strex	r2, r0, [r3]
   d62ac:	2a00      	cmp	r2, #0
   d62ae:	d1f9      	bne.n	d62a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d62b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d62b4:	b16e      	cbz	r6, d62d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d62b6:	f7ff fcbd 	bl	d5c34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d62ba:	b178      	cbz	r0, d62dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d62bc:	4629      	mov	r1, r5
   d62be:	4630      	mov	r0, r6
   d62c0:	f7ff ff8c 	bl	d61dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d62c4:	4630      	mov	r0, r6
   d62c6:	f7ff ff18 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d62ca:	2110      	movs	r1, #16
   d62cc:	4630      	mov	r0, r6
   d62ce:	f002 faf1 	bl	d88b4 <_ZdlPvj>
        p_->setError(std::move(error));
   d62d2:	4668      	mov	r0, sp
   d62d4:	f7ff ff27 	bl	d6126 <_ZN8particle5ErrorD1Ev>
    }
   d62d8:	b009      	add	sp, #36	; 0x24
   d62da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d62dc:	4631      	mov	r1, r6
   d62de:	a802      	add	r0, sp, #8
   d62e0:	f7ff ffb0 	bl	d6244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d62e4:	68e0      	ldr	r0, [r4, #12]
   d62e6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d62ea:	b108      	cbz	r0, d62f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d62ec:	f002 ff6a 	bl	d91c4 <strdup>
        type_(type) {
   d62f0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d62f2:	2010      	movs	r0, #16
   d62f4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d62f8:	f7fd fecd 	bl	d4096 <_Znwj>
   d62fc:	4605      	mov	r5, r0
   d62fe:	b1e8      	cbz	r0, d633c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6300:	2700      	movs	r7, #0
   d6302:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6304:	2018      	movs	r0, #24
   d6306:	f7fd fec6 	bl	d4096 <_Znwj>
   d630a:	4604      	mov	r4, r0
   d630c:	b188      	cbz	r0, d6332 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d630e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6310:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6312:	a802      	add	r0, sp, #8
   d6314:	f7ff ff50 	bl	d61b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6318:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d631a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d631c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d631e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6320:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6322:	a906      	add	r1, sp, #24
   d6324:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6326:	60e3      	str	r3, [r4, #12]
   d6328:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d632c:	9205      	str	r2, [sp, #20]
   d632e:	f7ff feed 	bl	d610c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6332:	4b08      	ldr	r3, [pc, #32]	; (d6354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6334:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6336:	4b08      	ldr	r3, [pc, #32]	; (d6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6338:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d633a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d633c:	a806      	add	r0, sp, #24
   d633e:	f7ff fef2 	bl	d6126 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6342:	a802      	add	r0, sp, #8
   d6344:	f7ff fed9 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6348:	2200      	movs	r2, #0
   d634a:	4629      	mov	r1, r5
   d634c:	4803      	ldr	r0, [pc, #12]	; (d635c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d634e:	f7ff fc79 	bl	d5c44 <application_thread_invoke>
   d6352:	e7b7      	b.n	d62c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6354:	000d61ef 	.word	0x000d61ef
   d6358:	000d6485 	.word	0x000d6485
   d635c:	000d5df3 	.word	0x000d5df3

000d6360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6364:	b08a      	sub	sp, #40	; 0x28
   d6366:	4605      	mov	r5, r0
   d6368:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d636c:	460c      	mov	r4, r1
   d636e:	4617      	mov	r7, r2
   d6370:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6372:	f7ff fc8b 	bl	d5c8c <spark_cloud_flag_connected>
   d6376:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6378:	4682      	mov	sl, r0
   d637a:	bb38      	cbnz	r0, d63cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d637c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6380:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6382:	a905      	add	r1, sp, #20
   d6384:	4630      	mov	r0, r6
   d6386:	f8ad 3018 	strh.w	r3, [sp, #24]
   d638a:	f7ff febf 	bl	d610c <_ZN8particle5ErrorC1EOS0_>
   d638e:	2014      	movs	r0, #20
   d6390:	f7fd fe81 	bl	d4096 <_Znwj>
   d6394:	4604      	mov	r4, r0
   d6396:	b148      	cbz	r0, d63ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6398:	2302      	movs	r3, #2
   d639a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d639c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d639e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63a2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d63a4:	4631      	mov	r1, r6
   d63a6:	300c      	adds	r0, #12
   d63a8:	f7ff feb0 	bl	d610c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63ac:	4628      	mov	r0, r5
	: __shared_count(__p)
   d63ae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63b0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d63b4:	f7ff ff32 	bl	d621c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d63b8:	4630      	mov	r0, r6
   d63ba:	f7ff feb4 	bl	d6126 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d63be:	a805      	add	r0, sp, #20
   d63c0:	f7ff feb1 	bl	d6126 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d63c4:	4628      	mov	r0, r5
   d63c6:	b00a      	add	sp, #40	; 0x28
   d63c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d63cc:	230c      	movs	r3, #12
   d63ce:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d63d2:	2014      	movs	r0, #20
   d63d4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d63d8:	9307      	str	r3, [sp, #28]
   d63da:	f7fd fe5c 	bl	d4096 <_Znwj>
   d63de:	4601      	mov	r1, r0
   d63e0:	b128      	cbz	r0, d63ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d63e2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d63e6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63ea:	f880 a001 	strb.w	sl, [r0, #1]
   d63ee:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63f0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d63f2:	f7ff ff13 	bl	d621c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d63f6:	4b22      	ldr	r3, [pc, #136]	; (d6480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d63f8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d63fa:	2008      	movs	r0, #8
   d63fc:	f7fd fe4b 	bl	d4096 <_Znwj>
   d6400:	4682      	mov	sl, r0
   d6402:	b128      	cbz	r0, d6410 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6404:	9b03      	ldr	r3, [sp, #12]
   d6406:	f840 3b04 	str.w	r3, [r0], #4
   d640a:	a904      	add	r1, sp, #16
   d640c:	f7ff fd15 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6410:	9600      	str	r6, [sp, #0]
   d6412:	fa5f f389 	uxtb.w	r3, r9
   d6416:	4642      	mov	r2, r8
   d6418:	4639      	mov	r1, r7
   d641a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d641c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6420:	f7ff fc3c 	bl	d5c9c <spark_send_event>
   d6424:	b9b8      	cbnz	r0, d6456 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6426:	9b03      	ldr	r3, [sp, #12]
   d6428:	785b      	ldrb	r3, [r3, #1]
   d642a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d642e:	b993      	cbnz	r3, d6456 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6430:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6434:	a905      	add	r1, sp, #20
   d6436:	a803      	add	r0, sp, #12
   d6438:	9205      	str	r2, [sp, #20]
   d643a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d643e:	f7ff ff11 	bl	d6264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6442:	a805      	add	r0, sp, #20
   d6444:	f7ff fe6f 	bl	d6126 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6448:	a805      	add	r0, sp, #20
   d644a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d644c:	f7ff fe95 	bl	d617a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6450:	a806      	add	r0, sp, #24
   d6452:	f7ff fcf9 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6456:	9b03      	ldr	r3, [sp, #12]
   d6458:	9305      	str	r3, [sp, #20]
   d645a:	a904      	add	r1, sp, #16
   d645c:	a806      	add	r0, sp, #24
   d645e:	f7ff fcec 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6462:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6464:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6466:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6468:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d646a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d646c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d646e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6470:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6472:	f7ff fce9 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6476:	a804      	add	r0, sp, #16
   d6478:	f7ff fce6 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d647c:	e7a2      	b.n	d63c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d647e:	bf00      	nop
   d6480:	000d6549 	.word	0x000d6549

000d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6484:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6488:	4605      	mov	r5, r0
	  switch (__op)
   d648a:	d007      	beq.n	d649c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d648c:	2a03      	cmp	r2, #3
   d648e:	d018      	beq.n	d64c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6490:	2a01      	cmp	r2, #1
   d6492:	d101      	bne.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6494:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6496:	6003      	str	r3, [r0, #0]
	}
   d6498:	2000      	movs	r0, #0
   d649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d649c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d649e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d64a0:	f7fd fdf9 	bl	d4096 <_Znwj>
   d64a4:	4604      	mov	r4, r0
   d64a6:	b150      	cbz	r0, d64be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d64a8:	4631      	mov	r1, r6
   d64aa:	f7ff fecb 	bl	d6244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d64ae:	6930      	ldr	r0, [r6, #16]
   d64b0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d64b4:	b108      	cbz	r0, d64ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d64b6:	f002 fe85 	bl	d91c4 <strdup>
        type_(type) {
   d64ba:	6120      	str	r0, [r4, #16]
   d64bc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d64be:	602c      	str	r4, [r5, #0]
	}
   d64c0:	e7ea      	b.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d64c2:	6804      	ldr	r4, [r0, #0]
   d64c4:	2c00      	cmp	r4, #0
   d64c6:	d0e7      	beq.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d64c8:	f104 0010 	add.w	r0, r4, #16
   d64cc:	f7ff fe2b 	bl	d6126 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d64d0:	4620      	mov	r0, r4
   d64d2:	f7ff fe12 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d64d6:	2118      	movs	r1, #24
   d64d8:	4620      	mov	r0, r4
   d64da:	f002 f9eb 	bl	d88b4 <_ZdlPvj>
   d64de:	e7db      	b.n	d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d64e0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d64e0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d64e2:	2300      	movs	r3, #0
   d64e4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d64e6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d64e8:	4604      	mov	r4, r0
   d64ea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d64ec:	b12b      	cbz	r3, d64fa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64ee:	2202      	movs	r2, #2
   d64f0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64f2:	68eb      	ldr	r3, [r5, #12]
   d64f4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64f6:	68ab      	ldr	r3, [r5, #8]
   d64f8:	60a3      	str	r3, [r4, #8]
    }
   d64fa:	4620      	mov	r0, r4
   d64fc:	bd38      	pop	{r3, r4, r5, pc}

000d64fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d64fe:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6500:	b570      	push	{r4, r5, r6, lr}
   d6502:	4604      	mov	r4, r0
	  switch (__op)
   d6504:	d007      	beq.n	d6516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6506:	2a03      	cmp	r2, #3
   d6508:	d012      	beq.n	d6530 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d650a:	2a01      	cmp	r2, #1
   d650c:	d101      	bne.n	d6512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d650e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6510:	6003      	str	r3, [r0, #0]
	}
   d6512:	2000      	movs	r0, #0
   d6514:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6516:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6518:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d651a:	f7fd fdbc 	bl	d4096 <_Znwj>
   d651e:	4605      	mov	r5, r0
   d6520:	b120      	cbz	r0, d652c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6522:	4631      	mov	r1, r6
   d6524:	f7ff ffdc 	bl	d64e0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6528:	7c33      	ldrb	r3, [r6, #16]
   d652a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d652c:	6025      	str	r5, [r4, #0]
	}
   d652e:	e7f0      	b.n	d6512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6530:	6804      	ldr	r4, [r0, #0]
   d6532:	2c00      	cmp	r4, #0
   d6534:	d0ed      	beq.n	d6512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6536:	4620      	mov	r0, r4
   d6538:	f7ff fddf 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d653c:	2114      	movs	r1, #20
   d653e:	4620      	mov	r0, r4
   d6540:	f002 f9b8 	bl	d88b4 <_ZdlPvj>
   d6544:	e7e5      	b.n	d6512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6548 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6548:	b5f0      	push	{r4, r5, r6, r7, lr}
   d654a:	b089      	sub	sp, #36	; 0x24
   d654c:	4604      	mov	r4, r0
   d654e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6550:	a801      	add	r0, sp, #4
   d6552:	4611      	mov	r1, r2
   d6554:	f7ff fe11 	bl	d617a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6558:	b1a4      	cbz	r4, d6584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d655a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d655c:	b11d      	cbz	r5, d6566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d655e:	4628      	mov	r0, r5
   d6560:	f002 fe30 	bl	d91c4 <strdup>
   d6564:	4605      	mov	r5, r0
   d6566:	a801      	add	r0, sp, #4
   d6568:	a903      	add	r1, sp, #12
        type_(type) {
   d656a:	9503      	str	r5, [sp, #12]
   d656c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6570:	f7ff fe78 	bl	d6264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6574:	a803      	add	r0, sp, #12
   d6576:	f7ff fdd6 	bl	d6126 <_ZN8particle5ErrorD1Ev>
   d657a:	a802      	add	r0, sp, #8
   d657c:	f7ff fc64 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6580:	b009      	add	sp, #36	; 0x24
   d6582:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6584:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6586:	2301      	movs	r3, #1
   d6588:	e8d5 2f4f 	ldrexb	r2, [r5]
   d658c:	2a00      	cmp	r2, #0
   d658e:	d103      	bne.n	d6598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6590:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6594:	2900      	cmp	r1, #0
   d6596:	d1f7      	bne.n	d6588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6598:	d1ef      	bne.n	d657a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d659a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d659c:	f3bf 8f5b 	dmb	ish
   d65a0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d65a2:	1d2b      	adds	r3, r5, #4
   d65a4:	f3bf 8f5b 	dmb	ish
   d65a8:	e853 6f00 	ldrex	r6, [r3]
   d65ac:	e843 4200 	strex	r2, r4, [r3]
   d65b0:	2a00      	cmp	r2, #0
   d65b2:	d1f9      	bne.n	d65a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d65b4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d65b8:	2e00      	cmp	r6, #0
   d65ba:	d0de      	beq.n	d657a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d65bc:	4620      	mov	r0, r4
   d65be:	f7ff fb39 	bl	d5c34 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d65c2:	4607      	mov	r7, r0
   d65c4:	b160      	cbz	r0, d65e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65c6:	f105 010c 	add.w	r1, r5, #12
   d65ca:	4630      	mov	r0, r6
   d65cc:	f7ff fe16 	bl	d61fc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d65d0:	4630      	mov	r0, r6
   d65d2:	f7ff fd92 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65d6:	2110      	movs	r1, #16
   d65d8:	4630      	mov	r0, r6
   d65da:	f002 f96b 	bl	d88b4 <_ZdlPvj>
   d65de:	e7cc      	b.n	d657a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65e0:	4631      	mov	r1, r6
   d65e2:	a803      	add	r0, sp, #12
   d65e4:	f7ff ff7c 	bl	d64e0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65e8:	7b2b      	ldrb	r3, [r5, #12]
   d65ea:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65ee:	2010      	movs	r0, #16
   d65f0:	f7fd fd51 	bl	d4096 <_Znwj>
   d65f4:	4605      	mov	r5, r0
   d65f6:	b1d0      	cbz	r0, d662e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d65f8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65fa:	2014      	movs	r0, #20
   d65fc:	f7fd fd4b 	bl	d4096 <_Znwj>
   d6600:	4604      	mov	r4, r0
   d6602:	b178      	cbz	r0, d6624 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6604:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6606:	4601      	mov	r1, r0
   d6608:	a803      	add	r0, sp, #12
   d660a:	f7ff fdd5 	bl	d61b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d660e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6610:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6612:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6614:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6616:	9205      	str	r2, [sp, #20]
   d6618:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d661a:	60e3      	str	r3, [r4, #12]
   d661c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6620:	9206      	str	r2, [sp, #24]
   d6622:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6624:	4b06      	ldr	r3, [pc, #24]	; (d6640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6626:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6628:	4b06      	ldr	r3, [pc, #24]	; (d6644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d662a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d662c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d662e:	a803      	add	r0, sp, #12
   d6630:	f7ff fd63 	bl	d60fa <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6634:	2200      	movs	r2, #0
   d6636:	4629      	mov	r1, r5
   d6638:	4803      	ldr	r0, [pc, #12]	; (d6648 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d663a:	f7ff fb03 	bl	d5c44 <application_thread_invoke>
   d663e:	e7c7      	b.n	d65d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6640:	000d620f 	.word	0x000d620f
   d6644:	000d64ff 	.word	0x000d64ff
   d6648:	000d5df3 	.word	0x000d5df3

000d664c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d664c:	2200      	movs	r2, #0
   d664e:	6840      	ldr	r0, [r0, #4]
   d6650:	4611      	mov	r1, r2
   d6652:	f7ff bb6b 	b.w	d5d2c <network_listening>

000d6656 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6656:	2200      	movs	r2, #0
   d6658:	6840      	ldr	r0, [r0, #4]
   d665a:	4611      	mov	r1, r2
   d665c:	f7ff bb76 	b.w	d5d4c <network_get_listen_timeout>

000d6660 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6660:	6840      	ldr	r0, [r0, #4]
   d6662:	2200      	movs	r2, #0
   d6664:	f7ff bb6a 	b.w	d5d3c <network_set_listen_timeout>

000d6668 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6668:	6840      	ldr	r0, [r0, #4]
   d666a:	2200      	movs	r2, #0
   d666c:	f081 0101 	eor.w	r1, r1, #1
   d6670:	f7ff bb54 	b.w	d5d1c <network_listen>

000d6674 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6674:	2300      	movs	r3, #0
   d6676:	6840      	ldr	r0, [r0, #4]
   d6678:	461a      	mov	r2, r3
   d667a:	4619      	mov	r1, r3
   d667c:	f7ff bb46 	b.w	d5d0c <network_off>

000d6680 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6680:	2300      	movs	r3, #0
   d6682:	6840      	ldr	r0, [r0, #4]
   d6684:	461a      	mov	r2, r3
   d6686:	4619      	mov	r1, r3
   d6688:	f7ff bb38 	b.w	d5cfc <network_on>

000d668c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d668c:	2200      	movs	r2, #0
   d668e:	6840      	ldr	r0, [r0, #4]
   d6690:	4611      	mov	r1, r2
   d6692:	f7ff bb2b 	b.w	d5cec <network_ready>

000d6696 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6696:	2200      	movs	r2, #0
   d6698:	6840      	ldr	r0, [r0, #4]
   d669a:	4611      	mov	r1, r2
   d669c:	f7ff bb16 	b.w	d5ccc <network_connecting>

000d66a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d66a0:	6840      	ldr	r0, [r0, #4]
   d66a2:	2200      	movs	r2, #0
   d66a4:	2102      	movs	r1, #2
   d66a6:	f7ff bb19 	b.w	d5cdc <network_disconnect>

000d66aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d66aa:	2300      	movs	r3, #0
   d66ac:	6840      	ldr	r0, [r0, #4]
   d66ae:	461a      	mov	r2, r3
   d66b0:	f7ff bb04 	b.w	d5cbc <network_connect>

000d66b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d66b4:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d66b6:	2203      	movs	r2, #3
   d66b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d66ba:	4a02      	ldr	r2, [pc, #8]	; (d66c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d66bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d66be:	4770      	bx	lr
   d66c0:	2003e578 	.word	0x2003e578
   d66c4:	000d9668 	.word	0x000d9668

000d66c8 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d66c8:	0909      	lsrs	r1, r1, #4
   d66ca:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d66ce:	ee07 1a90 	vmov	s15, r1
   d66d2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d66d6:	eddf 7a02 	vldr	s15, [pc, #8]	; d66e0 <_ZN8particle6detail9_getVCellEhh+0x18>
   d66da:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d66de:	4770      	bx	lr
   d66e0:	44480000 	.word	0x44480000

000d66e4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d66e4:	6800      	ldr	r0, [r0, #0]
   d66e6:	f000 b906 	b.w	d68f6 <_ZN7TwoWire4lockEv>

000d66ea <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d66ea:	b510      	push	{r4, lr}
   d66ec:	4604      	mov	r4, r0
      lock_(_lock) {
   d66ee:	6001      	str	r1, [r0, #0]
   d66f0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d66f2:	b10a      	cbz	r2, d66f8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d66f4:	f7ff fff6 	bl	d66e4 <_ZN9FuelGauge4lockEv>
}
   d66f8:	4620      	mov	r0, r4
   d66fa:	bd10      	pop	{r4, pc}

000d66fc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d66fc:	b513      	push	{r0, r1, r4, lr}
   d66fe:	4604      	mov	r4, r0
   d6700:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d6702:	f002 f8b3 	bl	d886c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d6706:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d6708:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d670a:	4620      	mov	r0, r4
   d670c:	f7ff ffed 	bl	d66ea <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d6710:	4620      	mov	r0, r4
   d6712:	b002      	add	sp, #8
   d6714:	bd10      	pop	{r4, pc}

000d6716 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d6716:	6800      	ldr	r0, [r0, #0]
   d6718:	f000 b8f6 	b.w	d6908 <_ZN7TwoWire6unlockEv>

000d671c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d671c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6720:	4604      	mov	r4, r0
   d6722:	460d      	mov	r5, r1
   d6724:	4617      	mov	r7, r2
   d6726:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6728:	f7ff ffdc 	bl	d66e4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d672c:	2336      	movs	r3, #54	; 0x36
   d672e:	f88d 3000 	strb.w	r3, [sp]
   d6732:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d6734:	6820      	ldr	r0, [r4, #0]
   d6736:	9301      	str	r3, [sp, #4]
   d6738:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d673c:	230a      	movs	r3, #10
   d673e:	4669      	mov	r1, sp
   d6740:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6742:	f88d 8008 	strb.w	r8, [sp, #8]
   d6746:	f000 f8b7 	bl	d68b8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d674a:	6820      	ldr	r0, [r4, #0]
   d674c:	6803      	ldr	r3, [r0, #0]
   d674e:	4629      	mov	r1, r5
   d6750:	689b      	ldr	r3, [r3, #8]
   d6752:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d6754:	6820      	ldr	r0, [r4, #0]
   d6756:	4641      	mov	r1, r8
   d6758:	f000 f8c6 	bl	d68e8 <_ZN7TwoWire15endTransmissionEh>
   d675c:	4605      	mov	r5, r0
   d675e:	b140      	cbz	r0, d6772 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d6760:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6764:	4620      	mov	r0, r4
   d6766:	f7ff ffd6 	bl	d6716 <_ZN9FuelGauge6unlockEv>
}
   d676a:	4628      	mov	r0, r5
   d676c:	b004      	add	sp, #16
   d676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d6772:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d6774:	6820      	ldr	r0, [r4, #0]
   d6776:	9301      	str	r3, [sp, #4]
   d6778:	4669      	mov	r1, sp
   d677a:	f000 f86d 	bl	d6858 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d677e:	2802      	cmp	r0, #2
   d6780:	d1ee      	bne.n	d6760 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d6782:	6820      	ldr	r0, [r4, #0]
   d6784:	6803      	ldr	r3, [r0, #0]
   d6786:	695b      	ldr	r3, [r3, #20]
   d6788:	4798      	blx	r3
   d678a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d678c:	6820      	ldr	r0, [r4, #0]
   d678e:	6803      	ldr	r3, [r0, #0]
   d6790:	695b      	ldr	r3, [r3, #20]
   d6792:	4798      	blx	r3
   d6794:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d6796:	e7e5      	b.n	d6764 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d6798 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d6798:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d679a:	2300      	movs	r3, #0
   d679c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d67a0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d67a4:	f10d 0206 	add.w	r2, sp, #6
   d67a8:	f10d 0307 	add.w	r3, sp, #7
   d67ac:	2102      	movs	r1, #2
   d67ae:	f7ff ffb5 	bl	d671c <_ZN9FuelGauge12readRegisterEhRhS0_>
   d67b2:	b940      	cbnz	r0, d67c6 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d67b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d67b8:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d67bc:	b003      	add	sp, #12
   d67be:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d67c2:	f7ff bf81 	b.w	d66c8 <_ZN8particle6detail9_getVCellEhh>
}
   d67c6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d67ca:	b003      	add	sp, #12
   d67cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d67d0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d67d0:	4770      	bx	lr

000d67d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67d4:	4606      	mov	r6, r0
   d67d6:	4615      	mov	r5, r2
   d67d8:	460c      	mov	r4, r1
   d67da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67dc:	42bc      	cmp	r4, r7
   d67de:	d006      	beq.n	d67ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67e0:	6833      	ldr	r3, [r6, #0]
   d67e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67e6:	689b      	ldr	r3, [r3, #8]
   d67e8:	4630      	mov	r0, r6
   d67ea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d67ec:	e7f6      	b.n	d67dc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d67ee:	4628      	mov	r0, r5
   d67f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67f2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d67f2:	7c00      	ldrb	r0, [r0, #16]
   d67f4:	2200      	movs	r2, #0
   d67f6:	f7ff b8b3 	b.w	d5960 <hal_i2c_write>

000d67fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d67fa:	7c00      	ldrb	r0, [r0, #16]
   d67fc:	2100      	movs	r1, #0
   d67fe:	f7ff b8b7 	b.w	d5970 <hal_i2c_available>

000d6802 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6802:	7c00      	ldrb	r0, [r0, #16]
   d6804:	2100      	movs	r1, #0
   d6806:	f7ff b8bb 	b.w	d5980 <hal_i2c_read>

000d680a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d680a:	7c00      	ldrb	r0, [r0, #16]
   d680c:	2100      	movs	r1, #0
   d680e:	f7ff b8bf 	b.w	d5990 <hal_i2c_peek>

000d6812 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6812:	7c00      	ldrb	r0, [r0, #16]
   d6814:	2100      	movs	r1, #0
   d6816:	f7ff b8c3 	b.w	d59a0 <hal_i2c_flush>

000d681a <_ZN7TwoWireD0Ev>:
   d681a:	b510      	push	{r4, lr}
   d681c:	2114      	movs	r1, #20
   d681e:	4604      	mov	r4, r0
   d6820:	f002 f848 	bl	d88b4 <_ZdlPvj>
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}

000d6828 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6828:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d682a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d682e:	4604      	mov	r4, r0
   d6830:	4608      	mov	r0, r1
   d6832:	2100      	movs	r1, #0
   d6834:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6838:	4b03      	ldr	r3, [pc, #12]	; (d6848 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d683a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d683c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d683e:	4611      	mov	r1, r2
   d6840:	f7ff f8be 	bl	d59c0 <hal_i2c_init>
}
   d6844:	4620      	mov	r0, r4
   d6846:	bd10      	pop	{r4, pc}
   d6848:	000d96a4 	.word	0x000d96a4

000d684c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d684c:	2300      	movs	r3, #0
   d684e:	7c00      	ldrb	r0, [r0, #16]
   d6850:	461a      	mov	r2, r3
   d6852:	4619      	mov	r1, r3
   d6854:	f7ff b86c 	b.w	d5930 <hal_i2c_begin>

000d6858 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d685a:	2200      	movs	r2, #0
   d685c:	2314      	movs	r3, #20
   d685e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6862:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6866:	780b      	ldrb	r3, [r1, #0]
   d6868:	f88d 3008 	strb.w	r3, [sp, #8]
   d686c:	684b      	ldr	r3, [r1, #4]
   d686e:	9303      	str	r3, [sp, #12]
   d6870:	68cb      	ldr	r3, [r1, #12]
   d6872:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6874:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6876:	7a0b      	ldrb	r3, [r1, #8]
   d6878:	9305      	str	r3, [sp, #20]
   d687a:	a901      	add	r1, sp, #4
   d687c:	f7ff f8b8 	bl	d59f0 <hal_i2c_request_ex>
}
   d6880:	b007      	add	sp, #28
   d6882:	f85d fb04 	ldr.w	pc, [sp], #4

000d6886 <_ZN7TwoWire11requestFromEhjh>:
{
   d6886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6888:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d688a:	f88d 1000 	strb.w	r1, [sp]
   d688e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6892:	9103      	str	r1, [sp, #12]
   d6894:	bf18      	it	ne
   d6896:	2301      	movne	r3, #1
   d6898:	4669      	mov	r1, sp
    size_ = size;
   d689a:	9201      	str	r2, [sp, #4]
   d689c:	f88d 3008 	strb.w	r3, [sp, #8]
   d68a0:	f7ff ffda 	bl	d6858 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d68a4:	b005      	add	sp, #20
   d68a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d68aa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d68aa:	2301      	movs	r3, #1
   d68ac:	f7ff bfeb 	b.w	d6886 <_ZN7TwoWire11requestFromEhjh>

000d68b0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d68b0:	7c00      	ldrb	r0, [r0, #16]
   d68b2:	2200      	movs	r2, #0
   d68b4:	f7ff b844 	b.w	d5940 <hal_i2c_begin_transmission>

000d68b8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d68b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d68ba:	2300      	movs	r3, #0
   d68bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d68c0:	684a      	ldr	r2, [r1, #4]
   d68c2:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d68c4:	2314      	movs	r3, #20
    };
   d68c6:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d68c8:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d68cc:	780b      	ldrb	r3, [r1, #0]
    };
   d68ce:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d68d0:	7a0a      	ldrb	r2, [r1, #8]
   d68d2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d68d4:	7c00      	ldrb	r0, [r0, #16]
    };
   d68d6:	f88d 3008 	strb.w	r3, [sp, #8]
   d68da:	aa01      	add	r2, sp, #4
   d68dc:	4619      	mov	r1, r3
   d68de:	f7ff f82f 	bl	d5940 <hal_i2c_begin_transmission>
}
   d68e2:	b007      	add	sp, #28
   d68e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d68e8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d68e8:	7c00      	ldrb	r0, [r0, #16]
   d68ea:	2200      	movs	r2, #0
   d68ec:	f7ff b830 	b.w	d5950 <hal_i2c_end_transmission>

000d68f0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d68f0:	2101      	movs	r1, #1
   d68f2:	f7ff bff9 	b.w	d68e8 <_ZN7TwoWire15endTransmissionEh>

000d68f6 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d68f6:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d68f8:	2100      	movs	r1, #0
   d68fa:	7c00      	ldrb	r0, [r0, #16]
   d68fc:	f7ff f868 	bl	d59d0 <hal_i2c_lock>
}
   d6900:	fab0 f080 	clz	r0, r0
   d6904:	0940      	lsrs	r0, r0, #5
   d6906:	bd08      	pop	{r3, pc}

000d6908 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6908:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d690a:	2100      	movs	r1, #0
   d690c:	7c00      	ldrb	r0, [r0, #16]
   d690e:	f7ff f867 	bl	d59e0 <hal_i2c_unlock>
}
   d6912:	fab0 f080 	clz	r0, r0
   d6916:	0940      	lsrs	r0, r0, #5
   d6918:	bd08      	pop	{r3, pc}

000d691a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d691a:	4770      	bx	lr

000d691c <_ZN9IPAddressD0Ev>:
   d691c:	b510      	push	{r4, lr}
   d691e:	2118      	movs	r1, #24
   d6920:	4604      	mov	r4, r0
   d6922:	f001 ffc7 	bl	d88b4 <_ZdlPvj>
   d6926:	4620      	mov	r0, r4
   d6928:	bd10      	pop	{r4, pc}

000d692a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d692a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d692c:	7d03      	ldrb	r3, [r0, #20]
   d692e:	2b06      	cmp	r3, #6
{
   d6930:	b08d      	sub	sp, #52	; 0x34
   d6932:	460e      	mov	r6, r1
   d6934:	f100 0704 	add.w	r7, r0, #4
   d6938:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d693c:	d012      	beq.n	d6964 <_ZNK9IPAddress7printToER5Print+0x3a>
   d693e:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d6942:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6946:	220a      	movs	r2, #10
   d6948:	4630      	mov	r0, r6
   d694a:	f001 faea 	bl	d7f22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d694e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6950:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6952:	d019      	beq.n	d6988 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6954:	2c00      	cmp	r4, #0
   d6956:	d0f4      	beq.n	d6942 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6958:	212e      	movs	r1, #46	; 0x2e
   d695a:	4630      	mov	r0, r6
   d695c:	f001 fac8 	bl	d7ef0 <_ZN5Print5printEc>
   d6960:	4404      	add	r4, r0
   d6962:	e7ee      	b.n	d6942 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6964:	232f      	movs	r3, #47	; 0x2f
   d6966:	466a      	mov	r2, sp
   d6968:	4639      	mov	r1, r7
   d696a:	200a      	movs	r0, #10
		buf[0] = 0;
   d696c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6970:	f7ff f846 	bl	d5a00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6974:	4668      	mov	r0, sp
   d6976:	f002 fc42 	bl	d91fe <strlen>
   d697a:	6833      	ldr	r3, [r6, #0]
   d697c:	4602      	mov	r2, r0
   d697e:	68db      	ldr	r3, [r3, #12]
   d6980:	4669      	mov	r1, sp
   d6982:	4630      	mov	r0, r6
   d6984:	4798      	blx	r3
   d6986:	4604      	mov	r4, r0
    }
    return n;
}
   d6988:	4620      	mov	r0, r4
   d698a:	b00d      	add	sp, #52	; 0x34
   d698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6990 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6990:	b510      	push	{r4, lr}
   d6992:	4b05      	ldr	r3, [pc, #20]	; (d69a8 <_ZN9IPAddressC1Ev+0x18>)
   d6994:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6996:	2211      	movs	r2, #17
   d6998:	f840 3b04 	str.w	r3, [r0], #4
   d699c:	2100      	movs	r1, #0
   d699e:	f002 fbbb 	bl	d9118 <memset>
}
   d69a2:	4620      	mov	r0, r4
   d69a4:	bd10      	pop	{r4, pc}
   d69a6:	bf00      	nop
   d69a8:	000d96cc 	.word	0x000d96cc

000d69ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d69ac:	4603      	mov	r3, r0
   d69ae:	4a07      	ldr	r2, [pc, #28]	; (d69cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d69b0:	b510      	push	{r4, lr}
   d69b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d69b6:	f101 0210 	add.w	r2, r1, #16
   d69ba:	f851 4b04 	ldr.w	r4, [r1], #4
   d69be:	f843 4b04 	str.w	r4, [r3], #4
   d69c2:	4291      	cmp	r1, r2
   d69c4:	d1f9      	bne.n	d69ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d69c6:	780a      	ldrb	r2, [r1, #0]
   d69c8:	701a      	strb	r2, [r3, #0]
}
   d69ca:	bd10      	pop	{r4, pc}
   d69cc:	000d96cc 	.word	0x000d96cc

000d69d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d69d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d69d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d69d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d69da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d69de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d69e2:	2304      	movs	r3, #4
   d69e4:	6041      	str	r1, [r0, #4]
   d69e6:	7503      	strb	r3, [r0, #20]
}
   d69e8:	bd10      	pop	{r4, pc}

000d69ea <_ZN9IPAddressaSEPKh>:
{
   d69ea:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d69ec:	78cb      	ldrb	r3, [r1, #3]
   d69ee:	9300      	str	r3, [sp, #0]
   d69f0:	788b      	ldrb	r3, [r1, #2]
   d69f2:	784a      	ldrb	r2, [r1, #1]
   d69f4:	7809      	ldrb	r1, [r1, #0]
   d69f6:	f7ff ffeb 	bl	d69d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d69fa:	b002      	add	sp, #8
   d69fc:	bd10      	pop	{r4, pc}

000d69fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d69fe:	f100 0310 	add.w	r3, r0, #16
   d6a02:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6a04:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6a08:	2901      	cmp	r1, #1
   d6a0a:	4618      	mov	r0, r3
   d6a0c:	d108      	bne.n	d6a20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6a0e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6a12:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6a16:	3a01      	subs	r2, #1
   d6a18:	f103 0310 	add.w	r3, r3, #16
   d6a1c:	d1f2      	bne.n	d6a04 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6a1e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6a20:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6a22:	bf04      	itt	eq
   d6a24:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6a28:	1852      	addeq	r2, r2, r1
   d6a2a:	e7f4      	b.n	d6a16 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6a2c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a2c:	b40e      	push	{r1, r2, r3}
   d6a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a30:	b088      	sub	sp, #32
   d6a32:	af00      	add	r7, sp, #0
   d6a34:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a38:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a3a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a3e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a40:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a42:	462b      	mov	r3, r5
   d6a44:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6a46:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a48:	f7ff f9b0 	bl	d5dac <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6a4c:	280f      	cmp	r0, #15
   d6a4e:	687a      	ldr	r2, [r7, #4]
   d6a50:	d91a      	bls.n	d6a88 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6a52:	f100 0308 	add.w	r3, r0, #8
   d6a56:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6a5a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6a5c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a60:	1c41      	adds	r1, r0, #1
   d6a62:	462b      	mov	r3, r5
   d6a64:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6a66:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a68:	f7ff f9a0 	bl	d5dac <vsnprintf>
        if (n > 0) {
   d6a6c:	1e02      	subs	r2, r0, #0
   d6a6e:	dd04      	ble.n	d6a7a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6a70:	6823      	ldr	r3, [r4, #0]
   d6a72:	4669      	mov	r1, sp
   d6a74:	689b      	ldr	r3, [r3, #8]
   d6a76:	4620      	mov	r0, r4
   d6a78:	4798      	blx	r3
   d6a7a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6a7c:	3720      	adds	r7, #32
   d6a7e:	46bd      	mov	sp, r7
   d6a80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6a84:	b003      	add	sp, #12
   d6a86:	4770      	bx	lr
    } else if (n > 0) {
   d6a88:	2800      	cmp	r0, #0
   d6a8a:	d0f7      	beq.n	d6a7c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6a8c:	6823      	ldr	r3, [r4, #0]
   d6a8e:	4602      	mov	r2, r0
   d6a90:	689b      	ldr	r3, [r3, #8]
   d6a92:	f107 0110 	add.w	r1, r7, #16
   d6a96:	4620      	mov	r0, r4
   d6a98:	4798      	blx	r3
}
   d6a9a:	e7ef      	b.n	d6a7c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6a9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6a9c:	b510      	push	{r4, lr}
          _M_dispose();
   d6a9e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6aa0:	4604      	mov	r4, r0
          _M_dispose();
   d6aa2:	689b      	ldr	r3, [r3, #8]
   d6aa4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6aa6:	68a3      	ldr	r3, [r4, #8]
   d6aa8:	3b01      	subs	r3, #1
   d6aaa:	60a3      	str	r3, [r4, #8]
   d6aac:	b92b      	cbnz	r3, d6aba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6aae:	6823      	ldr	r3, [r4, #0]
   d6ab0:	4620      	mov	r0, r4
   d6ab2:	68db      	ldr	r3, [r3, #12]
    }
   d6ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6ab8:	4718      	bx	r3
    }
   d6aba:	bd10      	pop	{r4, pc}

000d6abc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6abc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6abe:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6ac0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6ac4:	689b      	ldr	r3, [r3, #8]
   d6ac6:	2201      	movs	r2, #1
   d6ac8:	f10d 0107 	add.w	r1, sp, #7
   d6acc:	4798      	blx	r3
}
   d6ace:	b003      	add	sp, #12
   d6ad0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ad4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6ad4:	b538      	push	{r3, r4, r5, lr}
   d6ad6:	680b      	ldr	r3, [r1, #0]
   d6ad8:	6003      	str	r3, [r0, #0]
   d6ada:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6adc:	6843      	ldr	r3, [r0, #4]
   d6ade:	429d      	cmp	r5, r3
    class __shared_ptr
   d6ae0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6ae2:	d00c      	beq.n	d6afe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6ae4:	b115      	cbz	r5, d6aec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6ae6:	686b      	ldr	r3, [r5, #4]
   d6ae8:	3301      	adds	r3, #1
   d6aea:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6aec:	6860      	ldr	r0, [r4, #4]
   d6aee:	b128      	cbz	r0, d6afc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6af0:	6843      	ldr	r3, [r0, #4]
   d6af2:	3b01      	subs	r3, #1
   d6af4:	6043      	str	r3, [r0, #4]
   d6af6:	b90b      	cbnz	r3, d6afc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6af8:	f7ff ffd0 	bl	d6a9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6afc:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6afe:	4620      	mov	r0, r4
   d6b00:	bd38      	pop	{r3, r4, r5, pc}

000d6b02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6b02:	460b      	mov	r3, r1
   d6b04:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6b06:	2200      	movs	r2, #0
   d6b08:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b0a:	e9c0 2200 	strd	r2, r2, [r0]
   d6b0e:	4604      	mov	r4, r0
        t_ = t;
   d6b10:	6083      	str	r3, [r0, #8]
    if (t) {
   d6b12:	b90b      	cbnz	r3, d6b18 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6b14:	4620      	mov	r0, r4
   d6b16:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6b18:	f7ff ffdc 	bl	d6ad4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6b1c:	e7fa      	b.n	d6b14 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6b1e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6b1e:	6883      	ldr	r3, [r0, #8]
   d6b20:	b1eb      	cbz	r3, d6b5e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6b22:	781a      	ldrb	r2, [r3, #0]
   d6b24:	2a03      	cmp	r2, #3
   d6b26:	d81a      	bhi.n	d6b5e <_ZNK5spark9JSONValue4typeEv+0x40>
   d6b28:	e8df f002 	tbb	[pc, r2]
   d6b2c:	1b021704 	.word	0x1b021704
   d6b30:	2005      	movs	r0, #5
   d6b32:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6b34:	6802      	ldr	r2, [r0, #0]
   d6b36:	685b      	ldr	r3, [r3, #4]
   d6b38:	6852      	ldr	r2, [r2, #4]
   d6b3a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6b3c:	282d      	cmp	r0, #45	; 0x2d
   d6b3e:	d012      	beq.n	d6b66 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6b40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6b44:	2b09      	cmp	r3, #9
   d6b46:	d90e      	bls.n	d6b66 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6b48:	2874      	cmp	r0, #116	; 0x74
   d6b4a:	d00e      	beq.n	d6b6a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6b4c:	2866      	cmp	r0, #102	; 0x66
   d6b4e:	d00c      	beq.n	d6b6a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6b50:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6b54:	4258      	negs	r0, r3
   d6b56:	4158      	adcs	r0, r3
   d6b58:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6b5a:	2006      	movs	r0, #6
   d6b5c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6b5e:	2000      	movs	r0, #0
   d6b60:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6b62:	2004      	movs	r0, #4
   d6b64:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6b66:	2003      	movs	r0, #3
   d6b68:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6b6a:	2002      	movs	r0, #2
}
   d6b6c:	4770      	bx	lr

000d6b6e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6b6e:	b510      	push	{r4, lr}
   d6b70:	4604      	mov	r4, r0
    switch (type()) {
   d6b72:	f7ff ffd4 	bl	d6b1e <_ZNK5spark9JSONValue4typeEv>
   d6b76:	2802      	cmp	r0, #2
   d6b78:	d00e      	beq.n	d6b98 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6b7a:	1ec3      	subs	r3, r0, #3
   d6b7c:	b2db      	uxtb	r3, r3
   d6b7e:	2b01      	cmp	r3, #1
   d6b80:	d814      	bhi.n	d6bac <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6b82:	6822      	ldr	r2, [r4, #0]
   d6b84:	68a3      	ldr	r3, [r4, #8]
   d6b86:	6850      	ldr	r0, [r2, #4]
   d6b88:	685b      	ldr	r3, [r3, #4]
}
   d6b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6b8e:	220a      	movs	r2, #10
   d6b90:	2100      	movs	r1, #0
   d6b92:	4418      	add	r0, r3
   d6b94:	f002 bbee 	b.w	d9374 <strtol>
        const char* const s = d_->json + t_->start;
   d6b98:	6822      	ldr	r2, [r4, #0]
   d6b9a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6b9c:	6852      	ldr	r2, [r2, #4]
   d6b9e:	685b      	ldr	r3, [r3, #4]
   d6ba0:	5cd0      	ldrb	r0, [r2, r3]
   d6ba2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6ba6:	4258      	negs	r0, r3
   d6ba8:	4158      	adcs	r0, r3
}
   d6baa:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6bac:	2000      	movs	r0, #0
   d6bae:	e7fc      	b.n	d6baa <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d6bb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6bb0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6bb2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bb4:	e9c0 3300 	strd	r3, r3, [r0]
   d6bb8:	4604      	mov	r4, r0
        n_(0) {
   d6bba:	480e      	ldr	r0, [pc, #56]	; (d6bf4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6bbc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6bc0:	b1a9      	cbz	r1, d6bee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6bc2:	780b      	ldrb	r3, [r1, #0]
   d6bc4:	2b03      	cmp	r3, #3
   d6bc6:	d006      	beq.n	d6bd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6bc8:	b98b      	cbnz	r3, d6bee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6bca:	6813      	ldr	r3, [r2, #0]
   d6bcc:	6858      	ldr	r0, [r3, #4]
   d6bce:	684b      	ldr	r3, [r1, #4]
   d6bd0:	5cc3      	ldrb	r3, [r0, r3]
   d6bd2:	2b6e      	cmp	r3, #110	; 0x6e
   d6bd4:	d007      	beq.n	d6be6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6bd6:	6813      	ldr	r3, [r2, #0]
   d6bd8:	684d      	ldr	r5, [r1, #4]
   d6bda:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6bdc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6bde:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6be0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6be2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6be4:	60e3      	str	r3, [r4, #12]
   d6be6:	4611      	mov	r1, r2
   d6be8:	4620      	mov	r0, r4
   d6bea:	f7ff ff73 	bl	d6ad4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6bee:	4620      	mov	r0, r4
   d6bf0:	bd38      	pop	{r3, r4, r5, pc}
   d6bf2:	bf00      	nop
   d6bf4:	000d973b 	.word	0x000d973b

000d6bf8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6bf8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6bfa:	2500      	movs	r5, #0
   d6bfc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bfe:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6c02:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6c06:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6c0a:	4604      	mov	r4, r0
   d6c0c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6c0e:	b14b      	cbz	r3, d6c24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6c10:	781a      	ldrb	r2, [r3, #0]
   d6c12:	2a01      	cmp	r2, #1
   d6c14:	d106      	bne.n	d6c24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6c16:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6c1a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6c1c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6c1e:	6143      	str	r3, [r0, #20]
   d6c20:	f7ff ff58 	bl	d6ad4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c24:	4620      	mov	r0, r4
   d6c26:	bd38      	pop	{r3, r4, r5, pc}

000d6c28 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6c28:	b510      	push	{r4, lr}
    if (!n_) {
   d6c2a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6c2c:	4604      	mov	r4, r0
    if (!n_) {
   d6c2e:	b163      	cbz	r3, d6c4a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6c30:	6880      	ldr	r0, [r0, #8]
   d6c32:	60e0      	str	r0, [r4, #12]
    --n_;
   d6c34:	3b01      	subs	r3, #1
    ++t_;
   d6c36:	3010      	adds	r0, #16
   d6c38:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6c3a:	6120      	str	r0, [r4, #16]
    --n_;
   d6c3c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6c3e:	b113      	cbz	r3, d6c46 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6c40:	f7ff fedd 	bl	d69fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6c44:	60a0      	str	r0, [r4, #8]
    return true;
   d6c46:	2001      	movs	r0, #1
   d6c48:	e000      	b.n	d6c4c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6c4a:	4618      	mov	r0, r3
}
   d6c4c:	bd10      	pop	{r4, pc}

000d6c4e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6c4e:	b510      	push	{r4, lr}
    write('}');
   d6c50:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6c52:	4604      	mov	r4, r0
    write('}');
   d6c54:	f7ff ff32 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6c58:	2301      	movs	r3, #1
   d6c5a:	7123      	strb	r3, [r4, #4]
}
   d6c5c:	4620      	mov	r0, r4
   d6c5e:	bd10      	pop	{r4, pc}

000d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6c60:	b508      	push	{r3, lr}
    switch (state_) {
   d6c62:	7903      	ldrb	r3, [r0, #4]
   d6c64:	2b01      	cmp	r3, #1
   d6c66:	d002      	beq.n	d6c6e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6c68:	2b02      	cmp	r3, #2
   d6c6a:	d004      	beq.n	d6c76 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6c6c:	bd08      	pop	{r3, pc}
        write(',');
   d6c6e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6c70:	f7ff ff24 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
}
   d6c74:	e7fa      	b.n	d6c6c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6c76:	213a      	movs	r1, #58	; 0x3a
   d6c78:	e7fa      	b.n	d6c70 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6c7a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6c7a:	b510      	push	{r4, lr}
   d6c7c:	4604      	mov	r4, r0
    writeSeparator();
   d6c7e:	f7ff ffef 	bl	d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6c82:	4620      	mov	r0, r4
   d6c84:	217b      	movs	r1, #123	; 0x7b
   d6c86:	f7ff ff19 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6c8a:	2300      	movs	r3, #0
   d6c8c:	7123      	strb	r3, [r4, #4]
}
   d6c8e:	4620      	mov	r0, r4
   d6c90:	bd10      	pop	{r4, pc}
	...

000d6c94 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6c94:	b513      	push	{r0, r1, r4, lr}
   d6c96:	4604      	mov	r4, r0
   d6c98:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6c9a:	f7ff ffe1 	bl	d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6c9e:	6823      	ldr	r3, [r4, #0]
   d6ca0:	9a01      	ldr	r2, [sp, #4]
   d6ca2:	68db      	ldr	r3, [r3, #12]
   d6ca4:	4903      	ldr	r1, [pc, #12]	; (d6cb4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	4798      	blx	r3
    state_ = NEXT;
   d6caa:	2301      	movs	r3, #1
}
   d6cac:	4620      	mov	r0, r4
    state_ = NEXT;
   d6cae:	7123      	strb	r3, [r4, #4]
}
   d6cb0:	b002      	add	sp, #8
   d6cb2:	bd10      	pop	{r4, pc}
   d6cb4:	000d94c2 	.word	0x000d94c2

000d6cb8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6cb8:	b513      	push	{r0, r1, r4, lr}
   d6cba:	4604      	mov	r4, r0
   d6cbc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6cbe:	f7ff ffcf 	bl	d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6cc2:	6823      	ldr	r3, [r4, #0]
   d6cc4:	9a01      	ldr	r2, [sp, #4]
   d6cc6:	68db      	ldr	r3, [r3, #12]
   d6cc8:	4903      	ldr	r1, [pc, #12]	; (d6cd8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6cca:	4620      	mov	r0, r4
   d6ccc:	4798      	blx	r3
    state_ = NEXT;
   d6cce:	2301      	movs	r3, #1
}
   d6cd0:	4620      	mov	r0, r4
    state_ = NEXT;
   d6cd2:	7123      	strb	r3, [r4, #4]
}
   d6cd4:	b002      	add	sp, #8
   d6cd6:	bd10      	pop	{r4, pc}
   d6cd8:	000d96d8 	.word	0x000d96d8

000d6cdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ce0:	460d      	mov	r5, r1
   d6ce2:	4617      	mov	r7, r2
    write('"');
   d6ce4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6ce6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6d88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6cea:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6cec:	442f      	add	r7, r5
    write('"');
   d6cee:	f7ff fee5 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6cf2:	4629      	mov	r1, r5
    while (s != end) {
   d6cf4:	42bd      	cmp	r5, r7
   d6cf6:	462a      	mov	r2, r5
   d6cf8:	d038      	beq.n	d6d6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6cfa:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6cfe:	2e22      	cmp	r6, #34	; 0x22
   d6d00:	d003      	beq.n	d6d0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d02:	2e5c      	cmp	r6, #92	; 0x5c
   d6d04:	d001      	beq.n	d6d0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d06:	2e1f      	cmp	r6, #31
   d6d08:	d8f4      	bhi.n	d6cf4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6d0a:	6823      	ldr	r3, [r4, #0]
   d6d0c:	1a52      	subs	r2, r2, r1
   d6d0e:	689b      	ldr	r3, [r3, #8]
   d6d10:	4620      	mov	r0, r4
   d6d12:	4798      	blx	r3
            write('\\');
   d6d14:	215c      	movs	r1, #92	; 0x5c
   d6d16:	4620      	mov	r0, r4
   d6d18:	f7ff fed0 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6d1c:	2e0d      	cmp	r6, #13
   d6d1e:	d80a      	bhi.n	d6d36 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6d20:	2e07      	cmp	r6, #7
   d6d22:	d91c      	bls.n	d6d5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d24:	f1a6 0308 	sub.w	r3, r6, #8
   d6d28:	2b05      	cmp	r3, #5
   d6d2a:	d818      	bhi.n	d6d5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d2c:	e8df f003 	tbb	[pc, r3]
   d6d30:	17110f0d 	.word	0x17110f0d
   d6d34:	1513      	.short	0x1513
   d6d36:	2e22      	cmp	r6, #34	; 0x22
   d6d38:	d001      	beq.n	d6d3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6d3a:	2e5c      	cmp	r6, #92	; 0x5c
   d6d3c:	d10f      	bne.n	d6d5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6d3e:	4631      	mov	r1, r6
                write('b');
   d6d40:	4620      	mov	r0, r4
   d6d42:	f7ff febb 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6d46:	4629      	mov	r1, r5
    while (s != end) {
   d6d48:	e7d4      	b.n	d6cf4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6d4a:	2162      	movs	r1, #98	; 0x62
   d6d4c:	e7f8      	b.n	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6d4e:	2174      	movs	r1, #116	; 0x74
   d6d50:	e7f6      	b.n	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6d52:	216e      	movs	r1, #110	; 0x6e
   d6d54:	e7f4      	b.n	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6d56:	2166      	movs	r1, #102	; 0x66
   d6d58:	e7f2      	b.n	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6d5a:	2172      	movs	r1, #114	; 0x72
   d6d5c:	e7f0      	b.n	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6d5e:	6823      	ldr	r3, [r4, #0]
   d6d60:	4632      	mov	r2, r6
   d6d62:	68db      	ldr	r3, [r3, #12]
   d6d64:	4641      	mov	r1, r8
   d6d66:	4620      	mov	r0, r4
   d6d68:	4798      	blx	r3
                break;
   d6d6a:	e7ec      	b.n	d6d46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6d6c:	428d      	cmp	r5, r1
   d6d6e:	d004      	beq.n	d6d7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6d70:	6823      	ldr	r3, [r4, #0]
   d6d72:	1a6a      	subs	r2, r5, r1
   d6d74:	689b      	ldr	r3, [r3, #8]
   d6d76:	4620      	mov	r0, r4
   d6d78:	4798      	blx	r3
    }
    write('"');
   d6d7a:	2122      	movs	r1, #34	; 0x22
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	f7ff fe9d 	bl	d6abc <_ZN5spark10JSONWriter5writeEc>
}
   d6d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d86:	bf00      	nop
   d6d88:	000d96db 	.word	0x000d96db

000d6d8c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6d8c:	b513      	push	{r0, r1, r4, lr}
   d6d8e:	4604      	mov	r4, r0
   d6d90:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6d94:	f7ff ff64 	bl	d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6d98:	4620      	mov	r0, r4
   d6d9a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6d9e:	f7ff ff9d 	bl	d6cdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6da2:	2302      	movs	r3, #2
}
   d6da4:	4620      	mov	r0, r4
    state_ = VALUE;
   d6da6:	7123      	strb	r3, [r4, #4]
}
   d6da8:	b002      	add	sp, #8
   d6daa:	bd10      	pop	{r4, pc}

000d6dac <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6dac:	b513      	push	{r0, r1, r4, lr}
   d6dae:	4604      	mov	r4, r0
   d6db0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6db4:	f7ff ff54 	bl	d6c60 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6db8:	4620      	mov	r0, r4
   d6dba:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6dbe:	f7ff ff8d 	bl	d6cdc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6dc2:	2301      	movs	r3, #1
}
   d6dc4:	4620      	mov	r0, r4
    state_ = NEXT;
   d6dc6:	7123      	strb	r3, [r4, #4]
}
   d6dc8:	b002      	add	sp, #8
   d6dca:	bd10      	pop	{r4, pc}

000d6dcc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6dcc:	6880      	ldr	r0, [r0, #8]
   d6dce:	6803      	ldr	r3, [r0, #0]
   d6dd0:	68db      	ldr	r3, [r3, #12]
   d6dd2:	4718      	bx	r3

000d6dd4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d6dd4:	4770      	bx	lr

000d6dd6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6dd6:	4608      	mov	r0, r1
   d6dd8:	b111      	cbz	r1, d6de0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6dda:	680b      	ldr	r3, [r1, #0]
   d6ddc:	685b      	ldr	r3, [r3, #4]
   d6dde:	4718      	bx	r3
}
   d6de0:	4770      	bx	lr

000d6de2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d6de2:	4770      	bx	lr

000d6de4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6de4:	4770      	bx	lr

000d6de6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6de6:	4770      	bx	lr

000d6de8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d6de8:	4770      	bx	lr

000d6dea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6dea:	b538      	push	{r3, r4, r5, lr}
   d6dec:	4604      	mov	r4, r0
   d6dee:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6df0:	6800      	ldr	r0, [r0, #0]
   d6df2:	212e      	movs	r1, #46	; 0x2e
   d6df4:	f002 f9c9 	bl	d918a <strchrnul>
    size = s - category;
   d6df8:	6823      	ldr	r3, [r4, #0]
   d6dfa:	1ac3      	subs	r3, r0, r3
   d6dfc:	602b      	str	r3, [r5, #0]
    if (size) {
   d6dfe:	b123      	cbz	r3, d6e0a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6e00:	7803      	ldrb	r3, [r0, #0]
   d6e02:	b103      	cbz	r3, d6e06 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6e04:	3001      	adds	r0, #1
   d6e06:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e08:	6020      	str	r0, [r4, #0]
}
   d6e0a:	4618      	mov	r0, r3
   d6e0c:	bd38      	pop	{r3, r4, r5, pc}

000d6e0e <_ZN5spark16JSONStreamWriterD0Ev>:
   d6e0e:	b510      	push	{r4, lr}
   d6e10:	210c      	movs	r1, #12
   d6e12:	4604      	mov	r4, r0
   d6e14:	f001 fd4e 	bl	d88b4 <_ZdlPvj>
   d6e18:	4620      	mov	r0, r4
   d6e1a:	bd10      	pop	{r4, pc}

000d6e1c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6e1c:	b510      	push	{r4, lr}
   d6e1e:	2104      	movs	r1, #4
   d6e20:	4604      	mov	r4, r0
   d6e22:	f001 fd47 	bl	d88b4 <_ZdlPvj>
   d6e26:	4620      	mov	r0, r4
   d6e28:	bd10      	pop	{r4, pc}

000d6e2a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e2a:	b510      	push	{r4, lr}
   d6e2c:	2104      	movs	r1, #4
   d6e2e:	4604      	mov	r4, r0
   d6e30:	f001 fd40 	bl	d88b4 <_ZdlPvj>
   d6e34:	4620      	mov	r0, r4
   d6e36:	bd10      	pop	{r4, pc}

000d6e38 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6e38:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6e3a:	f002 f9b0 	bl	d919e <strcmp>
}
   d6e3e:	fab0 f080 	clz	r0, r0
   d6e42:	0940      	lsrs	r0, r0, #5
   d6e44:	bd08      	pop	{r3, pc}

000d6e46 <__tcf_1>:
   d6e46:	4770      	bx	lr

000d6e48 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6e48:	b510      	push	{r4, lr}
   d6e4a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6e4c:	f001 fb62 	bl	d8514 <_Z16_fetch_usbserialv>
   d6e50:	4284      	cmp	r4, r0
   d6e52:	d010      	beq.n	d6e76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6e54:	f001 fad6 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d6e58:	4284      	cmp	r4, r0
   d6e5a:	d105      	bne.n	d6e68 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d6e5c:	f001 fad2 	bl	d8404 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d6e64:	f001 bacb 	b.w	d83fe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6e68:	b12c      	cbz	r4, d6e76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d6e6a:	6823      	ldr	r3, [r4, #0]
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	685b      	ldr	r3, [r3, #4]
}
   d6e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6e74:	4718      	bx	r3
   d6e76:	bd10      	pop	{r4, pc}

000d6e78 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6e78:	b513      	push	{r0, r1, r4, lr}
   d6e7a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d6e7c:	4608      	mov	r0, r1
   d6e7e:	9101      	str	r1, [sp, #4]
   d6e80:	f002 f9bd 	bl	d91fe <strlen>
   d6e84:	9901      	ldr	r1, [sp, #4]
   d6e86:	4602      	mov	r2, r0
   d6e88:	4620      	mov	r0, r4
}
   d6e8a:	b002      	add	sp, #8
   d6e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d6e90:	f7ff bf8c 	b.w	d6dac <_ZN5spark10JSONWriter5valueEPKcj>

000d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d6e94:	b513      	push	{r0, r1, r4, lr}
   d6e96:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6e98:	4608      	mov	r0, r1
   d6e9a:	9101      	str	r1, [sp, #4]
   d6e9c:	f002 f9af 	bl	d91fe <strlen>
   d6ea0:	6823      	ldr	r3, [r4, #0]
   d6ea2:	9901      	ldr	r1, [sp, #4]
   d6ea4:	68db      	ldr	r3, [r3, #12]
   d6ea6:	4602      	mov	r2, r0
   d6ea8:	4620      	mov	r0, r4
}
   d6eaa:	b002      	add	sp, #8
   d6eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d6eb0:	4718      	bx	r3

000d6eb2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d6eb2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6eb4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d6eb6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6eba:	68db      	ldr	r3, [r3, #12]
   d6ebc:	2201      	movs	r2, #1
   d6ebe:	f10d 0107 	add.w	r1, sp, #7
   d6ec2:	4798      	blx	r3
}
   d6ec4:	b003      	add	sp, #12
   d6ec6:	f85d fb04 	ldr.w	pc, [sp], #4

000d6eca <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6eca:	b40e      	push	{r1, r2, r3}
   d6ecc:	b503      	push	{r0, r1, lr}
   d6ece:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d6ed0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6ed2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d6ed6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d6ed8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d6eda:	f001 f840 	bl	d7f5e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d6ede:	b002      	add	sp, #8
   d6ee0:	f85d eb04 	ldr.w	lr, [sp], #4
   d6ee4:	b003      	add	sp, #12
   d6ee6:	4770      	bx	lr

000d6ee8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d6eec:	e9d0 9500 	ldrd	r9, r5, [r0]
   d6ef0:	f04f 0814 	mov.w	r8, #20
   d6ef4:	fb08 f505 	mul.w	r5, r8, r5
   d6ef8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6efa:	10ab      	asrs	r3, r5, #2
   d6efc:	4d18      	ldr	r5, [pc, #96]	; (d6f60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6efe:	4617      	mov	r7, r2
   d6f00:	435d      	muls	r5, r3
   d6f02:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6f04:	2d00      	cmp	r5, #0
   d6f06:	dd23      	ble.n	d6f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d6f08:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d6f0a:	fb08 f006 	mul.w	r0, r8, r6
   d6f0e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6f12:	463a      	mov	r2, r7
   d6f14:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d6f18:	5820      	ldr	r0, [r4, r0]
   d6f1a:	9101      	str	r1, [sp, #4]
   d6f1c:	455f      	cmp	r7, fp
   d6f1e:	bf28      	it	cs
   d6f20:	465a      	movcs	r2, fp
   d6f22:	f002 f974 	bl	d920e <strncmp>
                if (cmp == 0) {
   d6f26:	9901      	ldr	r1, [sp, #4]
   d6f28:	2301      	movs	r3, #1
   d6f2a:	b978      	cbnz	r0, d6f4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d6f2c:	455f      	cmp	r7, fp
   d6f2e:	d103      	bne.n	d6f38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6f30:	9a00      	ldr	r2, [sp, #0]
   d6f32:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6f34:	4635      	mov	r5, r6
   d6f36:	e7e5      	b.n	d6f04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d6f38:	bf8c      	ite	hi
   d6f3a:	2001      	movhi	r0, #1
   d6f3c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6f3e:	2800      	cmp	r0, #0
   d6f40:	d0f8      	beq.n	d6f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6f42:	1bae      	subs	r6, r5, r6
	      ++__first;
   d6f44:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d6f48:	3e01      	subs	r6, #1
   d6f4a:	e7f3      	b.n	d6f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d6f4c:	0fc0      	lsrs	r0, r0, #31
   d6f4e:	e7f6      	b.n	d6f3e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d6f50:	eba4 0409 	sub.w	r4, r4, r9
}
   d6f54:	4802      	ldr	r0, [pc, #8]	; (d6f60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6f56:	10a4      	asrs	r4, r4, #2
   d6f58:	4360      	muls	r0, r4
   d6f5a:	b003      	add	sp, #12
   d6f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f60:	cccccccd 	.word	0xcccccccd

000d6f64 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d6f66:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d6f68:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f6a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d6f6c:	b30b      	cbz	r3, d6fb2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d6f6e:	b301      	cbz	r1, d6fb2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d6f70:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6f72:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d6f76:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d6f78:	a903      	add	r1, sp, #12
   d6f7a:	a801      	add	r0, sp, #4
   d6f7c:	f7ff ff35 	bl	d6dea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6f80:	4601      	mov	r1, r0
   d6f82:	b1b0      	cbz	r0, d6fb2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f84:	f10d 030b 	add.w	r3, sp, #11
   d6f88:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d6f8a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f8e:	4620      	mov	r0, r4
   d6f90:	f7ff ffaa 	bl	d6ee8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6f94:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6f98:	b15b      	cbz	r3, d6fb2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d6f9a:	6824      	ldr	r4, [r4, #0]
   d6f9c:	2314      	movs	r3, #20
   d6f9e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d6fa2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d6fa6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d6faa:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6fac:	bfa8      	it	ge
   d6fae:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d6fb0:	e7e2      	b.n	d6f78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d6fb2:	4630      	mov	r0, r6
   d6fb4:	b004      	add	sp, #16
   d6fb6:	bd70      	pop	{r4, r5, r6, pc}

000d6fb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6fb8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6fba:	4c09      	ldr	r4, [pc, #36]	; (d6fe0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6fbc:	7823      	ldrb	r3, [r4, #0]
   d6fbe:	f3bf 8f5b 	dmb	ish
   d6fc2:	07db      	lsls	r3, r3, #31
   d6fc4:	d409      	bmi.n	d6fda <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	f7fd f876 	bl	d40b8 <__cxa_guard_acquire>
   d6fcc:	b128      	cbz	r0, d6fda <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fce:	4620      	mov	r0, r4
   d6fd0:	f7fd f877 	bl	d40c2 <__cxa_guard_release>
   d6fd4:	4803      	ldr	r0, [pc, #12]	; (d6fe4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6fd6:	f002 f86d 	bl	d90b4 <atexit>
}
   d6fda:	4803      	ldr	r0, [pc, #12]	; (d6fe8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6fdc:	bd10      	pop	{r4, pc}
   d6fde:	bf00      	nop
   d6fe0:	2003e584 	.word	0x2003e584
   d6fe4:	000d6de3 	.word	0x000d6de3
   d6fe8:	2003e330 	.word	0x2003e330

000d6fec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6fec:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6fee:	4c09      	ldr	r4, [pc, #36]	; (d7014 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6ff0:	7823      	ldrb	r3, [r4, #0]
   d6ff2:	f3bf 8f5b 	dmb	ish
   d6ff6:	07db      	lsls	r3, r3, #31
   d6ff8:	d409      	bmi.n	d700e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	f7fd f85c 	bl	d40b8 <__cxa_guard_acquire>
   d7000:	b128      	cbz	r0, d700e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7002:	4620      	mov	r0, r4
   d7004:	f7fd f85d 	bl	d40c2 <__cxa_guard_release>
   d7008:	4803      	ldr	r0, [pc, #12]	; (d7018 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d700a:	f002 f853 	bl	d90b4 <atexit>
    return &factory;
}
   d700e:	4803      	ldr	r0, [pc, #12]	; (d701c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7010:	bd10      	pop	{r4, pc}
   d7012:	bf00      	nop
   d7014:	2003e588 	.word	0x2003e588
   d7018:	000d6e47 	.word	0x000d6e47
   d701c:	2003e334 	.word	0x2003e334

000d7020 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7020:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d7022:	2500      	movs	r5, #0
   d7024:	4604      	mov	r4, r0
   d7026:	e9c0 5500 	strd	r5, r5, [r0]
   d702a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d702e:	6085      	str	r5, [r0, #8]
   d7030:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d7032:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d7036:	f7fe fc23 	bl	d5880 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d703a:	f7ff ffbd 	bl	d6fb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d703e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7040:	f7ff ffd4 	bl	d6fec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7044:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7046:	6220      	str	r0, [r4, #32]
}
   d7048:	4620      	mov	r0, r4
   d704a:	bd38      	pop	{r3, r4, r5, pc}

000d704c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d704c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d704e:	4c0a      	ldr	r4, [pc, #40]	; (d7078 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d7050:	7823      	ldrb	r3, [r4, #0]
   d7052:	f3bf 8f5b 	dmb	ish
   d7056:	07db      	lsls	r3, r3, #31
   d7058:	d40c      	bmi.n	d7074 <_ZN5spark10LogManager8instanceEv+0x28>
   d705a:	4620      	mov	r0, r4
   d705c:	f7fd f82c 	bl	d40b8 <__cxa_guard_acquire>
   d7060:	b140      	cbz	r0, d7074 <_ZN5spark10LogManager8instanceEv+0x28>
   d7062:	4806      	ldr	r0, [pc, #24]	; (d707c <_ZN5spark10LogManager8instanceEv+0x30>)
   d7064:	f7ff ffdc 	bl	d7020 <_ZN5spark10LogManagerC1Ev>
   d7068:	4620      	mov	r0, r4
   d706a:	f7fd f82a 	bl	d40c2 <__cxa_guard_release>
   d706e:	4804      	ldr	r0, [pc, #16]	; (d7080 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7070:	f002 f820 	bl	d90b4 <atexit>
    return &mgr;
}
   d7074:	4801      	ldr	r0, [pc, #4]	; (d707c <_ZN5spark10LogManager8instanceEv+0x30>)
   d7076:	bd10      	pop	{r4, pc}
   d7078:	2003e580 	.word	0x2003e580
   d707c:	2003e590 	.word	0x2003e590
   d7080:	000d752d 	.word	0x000d752d

000d7084 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7084:	4a02      	ldr	r2, [pc, #8]	; (d7090 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7086:	4903      	ldr	r1, [pc, #12]	; (d7094 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7088:	4803      	ldr	r0, [pc, #12]	; (d7098 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d708a:	2300      	movs	r3, #0
   d708c:	f7fe bdb0 	b.w	d5bf0 <log_set_callbacks>
   d7090:	000d73b5 	.word	0x000d73b5
   d7094:	000d7341 	.word	0x000d7341
   d7098:	000d72c1 	.word	0x000d72c1

000d709c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d709c:	2300      	movs	r3, #0
   d709e:	461a      	mov	r2, r3
   d70a0:	4619      	mov	r1, r3
   d70a2:	4618      	mov	r0, r3
   d70a4:	f7fe bda4 	b.w	d5bf0 <log_set_callbacks>

000d70a8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d70a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d70aa:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70ac:	f851 3b04 	ldr.w	r3, [r1], #4
   d70b0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d70b2:	4604      	mov	r4, r0
   d70b4:	a801      	add	r0, sp, #4
   d70b6:	f7fe fec0 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d70ba:	466a      	mov	r2, sp
   d70bc:	4629      	mov	r1, r5
   d70be:	4620      	mov	r0, r4
   d70c0:	f7ff fd1f 	bl	d6b02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d70c4:	a801      	add	r0, sp, #4
   d70c6:	f7fe febf 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70ca:	4620      	mov	r0, r4
   d70cc:	b003      	add	sp, #12
   d70ce:	bd30      	pop	{r4, r5, pc}

000d70d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d70d2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70d4:	f851 3b04 	ldr.w	r3, [r1], #4
   d70d8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70da:	4604      	mov	r4, r0
   d70dc:	a801      	add	r0, sp, #4
   d70de:	f7fe feac 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d70e2:	466a      	mov	r2, sp
   d70e4:	4629      	mov	r1, r5
   d70e6:	4620      	mov	r0, r4
   d70e8:	f7ff fd86 	bl	d6bf8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d70ec:	a801      	add	r0, sp, #4
   d70ee:	f7fe feab 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70f2:	4620      	mov	r0, r4
   d70f4:	b003      	add	sp, #12
   d70f6:	bd30      	pop	{r4, r5, pc}

000d70f8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d70f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d70fa:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70fc:	f851 3b04 	ldr.w	r3, [r1], #4
   d7100:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7102:	4604      	mov	r4, r0
   d7104:	a801      	add	r0, sp, #4
   d7106:	f7fe fe98 	bl	d5e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d710a:	466a      	mov	r2, sp
   d710c:	4629      	mov	r1, r5
   d710e:	4620      	mov	r0, r4
   d7110:	f7ff fd4e 	bl	d6bb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7114:	a801      	add	r0, sp, #4
   d7116:	f7fe fe97 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d711a:	4620      	mov	r0, r4
   d711c:	b003      	add	sp, #12
   d711e:	bd30      	pop	{r4, r5, pc}

000d7120 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7120:	b570      	push	{r4, r5, r6, lr}
   d7122:	b08a      	sub	sp, #40	; 0x28
   d7124:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7126:	4601      	mov	r1, r0
   d7128:	a804      	add	r0, sp, #16
   d712a:	f7ff ffd1 	bl	d70d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d712e:	4e14      	ldr	r6, [pc, #80]	; (d7180 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d7130:	a804      	add	r0, sp, #16
   d7132:	f7ff fd79 	bl	d6c28 <_ZN5spark18JSONObjectIterator4nextEv>
   d7136:	b1e8      	cbz	r0, d7174 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d7138:	a904      	add	r1, sp, #16
   d713a:	4668      	mov	r0, sp
   d713c:	f7ff ffdc 	bl	d70f8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7140:	9802      	ldr	r0, [sp, #8]
   d7142:	4631      	mov	r1, r6
   d7144:	f7ff fe78 	bl	d6e38 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d7148:	4604      	mov	r4, r0
   d714a:	b110      	cbz	r0, d7152 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d714c:	1e2c      	subs	r4, r5, #0
   d714e:	bf18      	it	ne
   d7150:	2401      	movne	r4, #1
   d7152:	a801      	add	r0, sp, #4
   d7154:	f7fe fe78 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7158:	2c00      	cmp	r4, #0
   d715a:	d0e9      	beq.n	d7130 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d715c:	a904      	add	r1, sp, #16
   d715e:	4668      	mov	r0, sp
   d7160:	f7ff ffa2 	bl	d70a8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d7164:	4668      	mov	r0, sp
   d7166:	f7ff fd02 	bl	d6b6e <_ZNK5spark9JSONValue5toIntEv>
   d716a:	6028      	str	r0, [r5, #0]
   d716c:	a801      	add	r0, sp, #4
   d716e:	f7fe fe6b 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7172:	e7dd      	b.n	d7130 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7174:	a805      	add	r0, sp, #20
   d7176:	f7fe fe67 	bl	d5e48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d717a:	b00a      	add	sp, #40	; 0x28
   d717c:	bd70      	pop	{r4, r5, r6, pc}
   d717e:	bf00      	nop
   d7180:	000d96e1 	.word	0x000d96e1

000d7184 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7186:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7188:	4620      	mov	r0, r4
   d718a:	4912      	ldr	r1, [pc, #72]	; (d71d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d718c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d718e:	f002 f806 	bl	d919e <strcmp>
   d7192:	b948      	cbnz	r0, d71a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d7194:	f001 f9be 	bl	d8514 <_Z16_fetch_usbserialv>
   d7198:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d719c:	f001 f9aa 	bl	d84f4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d71a0:	f001 f9b8 	bl	d8514 <_Z16_fetch_usbserialv>
}
   d71a4:	b003      	add	sp, #12
   d71a6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d71a8:	490b      	ldr	r1, [pc, #44]	; (d71d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d71aa:	4620      	mov	r0, r4
   d71ac:	f001 fff7 	bl	d919e <strcmp>
   d71b0:	b970      	cbnz	r0, d71d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d71b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d71b6:	a901      	add	r1, sp, #4
   d71b8:	4628      	mov	r0, r5
        int baud = 9600;
   d71ba:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d71bc:	f7ff ffb0 	bl	d7120 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d71c0:	f001 f920 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d71c4:	9901      	ldr	r1, [sp, #4]
   d71c6:	f001 f917 	bl	d83f8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d71ca:	f001 f91b 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d71ce:	e7e9      	b.n	d71a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d71d0:	2000      	movs	r0, #0
   d71d2:	e7e7      	b.n	d71a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d71d4:	000d96e6 	.word	0x000d96e6
   d71d8:	000d96ed 	.word	0x000d96ed

000d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d71de:	e9d0 5300 	ldrd	r5, r3, [r0]
   d71e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71e4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d71e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d71ea:	42ae      	cmp	r6, r5
   d71ec:	d005      	beq.n	d71fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d71ee:	f105 0008 	add.w	r0, r5, #8
   d71f2:	f7ff fff3 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d71f6:	3514      	adds	r5, #20
   d71f8:	e7f7      	b.n	d71ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d71fa:	6820      	ldr	r0, [r4, #0]
   d71fc:	f7fe fdc6 	bl	d5d8c <free>
}
   d7200:	4620      	mov	r0, r4
   d7202:	bd70      	pop	{r4, r5, r6, pc}

000d7204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7204:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7206:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d720a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d720c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d7210:	42ae      	cmp	r6, r5
   d7212:	d004      	beq.n	d721e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7214:	4628      	mov	r0, r5
   d7216:	f000 ffb5 	bl	d8184 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d721a:	3510      	adds	r5, #16
   d721c:	e7f8      	b.n	d7210 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d721e:	6820      	ldr	r0, [r4, #0]
   d7220:	f7fe fdb4 	bl	d5d8c <free>
}
   d7224:	4620      	mov	r0, r4
   d7226:	bd70      	pop	{r4, r5, r6, pc}

000d7228 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d7228:	b510      	push	{r4, lr}
   d722a:	4604      	mov	r4, r0
   d722c:	300c      	adds	r0, #12
   d722e:	f7ff ffd5 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7232:	4620      	mov	r0, r4
   d7234:	f7ff ffe6 	bl	d7204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7238:	4620      	mov	r0, r4
   d723a:	bd10      	pop	{r4, pc}

000d723c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d723c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d723e:	4b04      	ldr	r3, [pc, #16]	; (d7250 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7240:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d7242:	f840 3b04 	str.w	r3, [r0], #4
   d7246:	f7ff ffef 	bl	d7228 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d724a:	4620      	mov	r0, r4
   d724c:	bd10      	pop	{r4, pc}
   d724e:	bf00      	nop
   d7250:	000d94f0 	.word	0x000d94f0

000d7254 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7254:	b510      	push	{r4, lr}
   d7256:	4604      	mov	r4, r0
   d7258:	f7ff fff0 	bl	d723c <_ZN5spark16StreamLogHandlerD1Ev>
   d725c:	4620      	mov	r0, r4
   d725e:	2124      	movs	r1, #36	; 0x24
   d7260:	f001 fb28 	bl	d88b4 <_ZdlPvj>
   d7264:	4620      	mov	r0, r4
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7268:	b510      	push	{r4, lr}
   d726a:	4b03      	ldr	r3, [pc, #12]	; (d7278 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d726c:	6003      	str	r3, [r0, #0]
   d726e:	4604      	mov	r4, r0
   d7270:	f7ff ffe4 	bl	d723c <_ZN5spark16StreamLogHandlerD1Ev>
   d7274:	4620      	mov	r0, r4
   d7276:	bd10      	pop	{r4, pc}
   d7278:	000d978c 	.word	0x000d978c

000d727c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d727c:	b510      	push	{r4, lr}
   d727e:	4604      	mov	r4, r0
   d7280:	f7ff fff2 	bl	d7268 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7284:	4620      	mov	r0, r4
   d7286:	2124      	movs	r1, #36	; 0x24
   d7288:	f001 fb14 	bl	d88b4 <_ZdlPvj>
   d728c:	4620      	mov	r0, r4
   d728e:	bd10      	pop	{r4, pc}

000d7290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d7290:	2200      	movs	r2, #0
   d7292:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7296:	b510      	push	{r4, lr}
        capacity_(0) {
   d7298:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d729a:	680c      	ldr	r4, [r1, #0]
   d729c:	6004      	str	r4, [r0, #0]
   d729e:	684c      	ldr	r4, [r1, #4]
   d72a0:	6044      	str	r4, [r0, #4]
   d72a2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d72a4:	600a      	str	r2, [r1, #0]
   d72a6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d72a8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d72aa:	608a      	str	r2, [r1, #8]
}
   d72ac:	bd10      	pop	{r4, pc}

000d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d72ae:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d72b0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d72b2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d72b4:	6818      	ldr	r0, [r3, #0]
   d72b6:	f7fe fafb 	bl	d58b0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d72ba:	4620      	mov	r0, r4
   d72bc:	bd10      	pop	{r4, pc}
	...

000d72c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d72c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72c4:	b087      	sub	sp, #28
   d72c6:	4680      	mov	r8, r0
   d72c8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d72ca:	4b1c      	ldr	r3, [pc, #112]	; (d733c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d72cc:	685b      	ldr	r3, [r3, #4]
   d72ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d72d2:	4689      	mov	r9, r1
   d72d4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72d6:	b96b      	cbnz	r3, d72f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d72d8:	f7ff feb8 	bl	d704c <_ZN5spark10LogManager8instanceEv>
   d72dc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d72de:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d72e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72e4:	9305      	str	r3, [sp, #20]
   d72e6:	f7fe fadb 	bl	d58a0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d72ea:	7b23      	ldrb	r3, [r4, #12]
   d72ec:	b12b      	cbz	r3, d72fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d72ee:	a805      	add	r0, sp, #20
   d72f0:	f7ff ffdd 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d72f4:	b007      	add	sp, #28
   d72f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d72fa:	2301      	movs	r3, #1
   d72fc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d72fe:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d7302:	fa5f f989 	uxtb.w	r9, r9
   d7306:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d730a:	45aa      	cmp	sl, r5
   d730c:	d012      	beq.n	d7334 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d730e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d7312:	4631      	mov	r1, r6
   d7314:	1d38      	adds	r0, r7, #4
   d7316:	f7ff fe25 	bl	d6f64 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d731a:	4581      	cmp	r9, r0
   d731c:	d3f5      	bcc.n	d730a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d731e:	683b      	ldr	r3, [r7, #0]
   d7320:	9a03      	ldr	r2, [sp, #12]
   d7322:	9200      	str	r2, [sp, #0]
   d7324:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d7328:	464a      	mov	r2, r9
   d732a:	4633      	mov	r3, r6
   d732c:	4641      	mov	r1, r8
   d732e:	4638      	mov	r0, r7
   d7330:	47d8      	blx	fp
   d7332:	e7ea      	b.n	d730a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d7334:	2300      	movs	r3, #0
   d7336:	7323      	strb	r3, [r4, #12]
   d7338:	e7d9      	b.n	d72ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d733a:	bf00      	nop
   d733c:	e000ed00 	.word	0xe000ed00

000d7340 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7344:	469b      	mov	fp, r3
   d7346:	4b1a      	ldr	r3, [pc, #104]	; (d73b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d7348:	685b      	ldr	r3, [r3, #4]
   d734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d734e:	4680      	mov	r8, r0
   d7350:	4689      	mov	r9, r1
   d7352:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d7354:	b96b      	cbnz	r3, d7372 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d7356:	f7ff fe79 	bl	d704c <_ZN5spark10LogManager8instanceEv>
   d735a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d735c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7360:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7362:	9301      	str	r3, [sp, #4]
   d7364:	f7fe fa9c 	bl	d58a0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7368:	7b23      	ldrb	r3, [r4, #12]
   d736a:	b12b      	cbz	r3, d7378 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d736c:	a801      	add	r0, sp, #4
   d736e:	f7ff ff9e 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7372:	b003      	add	sp, #12
   d7374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7378:	2301      	movs	r3, #1
   d737a:	7323      	strb	r3, [r4, #12]
   d737c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7380:	b2f6      	uxtb	r6, r6
   d7382:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7386:	4555      	cmp	r5, sl
   d7388:	d00e      	beq.n	d73a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d738a:	f855 7b04 	ldr.w	r7, [r5], #4
   d738e:	4659      	mov	r1, fp
   d7390:	1d38      	adds	r0, r7, #4
   d7392:	f7ff fde7 	bl	d6f64 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7396:	4286      	cmp	r6, r0
   d7398:	d3f5      	bcc.n	d7386 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d739a:	683b      	ldr	r3, [r7, #0]
   d739c:	464a      	mov	r2, r9
   d739e:	68db      	ldr	r3, [r3, #12]
   d73a0:	4641      	mov	r1, r8
   d73a2:	4638      	mov	r0, r7
   d73a4:	4798      	blx	r3
   d73a6:	e7ee      	b.n	d7386 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d73a8:	2300      	movs	r3, #0
   d73aa:	7323      	strb	r3, [r4, #12]
   d73ac:	e7de      	b.n	d736c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d73ae:	bf00      	nop
   d73b0:	e000ed00 	.word	0xe000ed00

000d73b4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d73b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73b8:	4b16      	ldr	r3, [pc, #88]	; (d7414 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d73ba:	685b      	ldr	r3, [r3, #4]
   d73bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d73c0:	4605      	mov	r5, r0
   d73c2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d73c4:	bb1b      	cbnz	r3, d740e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d73c6:	f7ff fe41 	bl	d704c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d73ca:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d73ce:	4604      	mov	r4, r0
   d73d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d73d2:	9301      	str	r3, [sp, #4]
   d73d4:	f7fe fa64 	bl	d58a0 <os_mutex_recursive_lock>
   d73d8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d73dc:	2446      	movs	r4, #70	; 0x46
   d73de:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d73e2:	45b0      	cmp	r8, r6
   d73e4:	d109      	bne.n	d73fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d73e6:	a801      	add	r0, sp, #4
   d73e8:	f7ff ff61 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d73ec:	42a5      	cmp	r5, r4
   d73ee:	bfb4      	ite	lt
   d73f0:	2000      	movlt	r0, #0
   d73f2:	2001      	movge	r0, #1
}
   d73f4:	b002      	add	sp, #8
   d73f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d73fa:	f856 0b04 	ldr.w	r0, [r6], #4
   d73fe:	4639      	mov	r1, r7
   d7400:	3004      	adds	r0, #4
   d7402:	f7ff fdaf 	bl	d6f64 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d7406:	4284      	cmp	r4, r0
   d7408:	bfa8      	it	ge
   d740a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d740c:	e7e9      	b.n	d73e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d740e:	2000      	movs	r0, #0
   d7410:	e7f0      	b.n	d73f4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d7412:	bf00      	nop
   d7414:	e000ed00 	.word	0xe000ed00

000d7418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7418:	b570      	push	{r4, r5, r6, lr}
   d741a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d741c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7420:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d7422:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d7426:	4282      	cmp	r2, r0
   d7428:	d007      	beq.n	d743a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d742a:	4601      	mov	r1, r0
            if (*p == value) {
   d742c:	681d      	ldr	r5, [r3, #0]
   d742e:	f851 6b04 	ldr.w	r6, [r1], #4
   d7432:	42ae      	cmp	r6, r5
   d7434:	d003      	beq.n	d743e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d7436:	4608      	mov	r0, r1
   d7438:	e7f5      	b.n	d7426 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d743a:	2000      	movs	r0, #0
}
   d743c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d743e:	1a52      	subs	r2, r2, r1
   d7440:	f001 fe50 	bl	d90e4 <memmove>
    --size_;
   d7444:	6863      	ldr	r3, [r4, #4]
   d7446:	3b01      	subs	r3, #1
   d7448:	6063      	str	r3, [r4, #4]
    return true;
   d744a:	2001      	movs	r0, #1
   d744c:	e7f6      	b.n	d743c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d744e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d744e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d7450:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7454:	4604      	mov	r4, r0
   d7456:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7458:	9101      	str	r1, [sp, #4]
   d745a:	9303      	str	r3, [sp, #12]
   d745c:	f7fe fa20 	bl	d58a0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7460:	a901      	add	r1, sp, #4
   d7462:	4620      	mov	r0, r4
   d7464:	f7ff ffd8 	bl	d7418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7468:	b118      	cbz	r0, d7472 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d746a:	6863      	ldr	r3, [r4, #4]
   d746c:	b90b      	cbnz	r3, d7472 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d746e:	f7ff fe15 	bl	d709c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7472:	a803      	add	r0, sp, #12
   d7474:	f7ff ff1b 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7478:	b004      	add	sp, #16
   d747a:	bd10      	pop	{r4, pc}

000d747c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d747c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d747e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7482:	2318      	movs	r3, #24
   d7484:	4604      	mov	r4, r0
   d7486:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d748a:	42ae      	cmp	r6, r5
   d748c:	d015      	beq.n	d74ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d748e:	f105 0110 	add.w	r1, r5, #16
   d7492:	4620      	mov	r0, r4
   d7494:	f7ff ffc0 	bl	d7418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7498:	6863      	ldr	r3, [r4, #4]
   d749a:	b90b      	cbnz	r3, d74a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d749c:	f7ff fdfe 	bl	d709c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d74a0:	69e0      	ldr	r0, [r4, #28]
   d74a2:	6929      	ldr	r1, [r5, #16]
   d74a4:	6803      	ldr	r3, [r0, #0]
   d74a6:	68db      	ldr	r3, [r3, #12]
   d74a8:	4798      	blx	r3
        if (h.stream) {
   d74aa:	6969      	ldr	r1, [r5, #20]
   d74ac:	b119      	cbz	r1, d74b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d74ae:	6a20      	ldr	r0, [r4, #32]
   d74b0:	6803      	ldr	r3, [r0, #0]
   d74b2:	68db      	ldr	r3, [r3, #12]
   d74b4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d74b6:	3518      	adds	r5, #24
   d74b8:	e7e7      	b.n	d748a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d74ba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d74be:	2618      	movs	r6, #24
   d74c0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d74c4:	42ae      	cmp	r6, r5
   d74c6:	d004      	beq.n	d74d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d74c8:	4628      	mov	r0, r5
   d74ca:	f000 fe5b 	bl	d8184 <_ZN6StringD1Ev>
   d74ce:	3518      	adds	r5, #24
   d74d0:	e7f8      	b.n	d74c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d74d2:	2300      	movs	r3, #0
   d74d4:	6163      	str	r3, [r4, #20]
}
   d74d6:	bd70      	pop	{r4, r5, r6, pc}

000d74d8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d74d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74da:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d74dc:	f7ff fdde 	bl	d709c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d74e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d74e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d74e6:	9301      	str	r3, [sp, #4]
   d74e8:	f7fe f9da 	bl	d58a0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d74ec:	4620      	mov	r0, r4
   d74ee:	f7ff ffc5 	bl	d747c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d74f2:	a801      	add	r0, sp, #4
   d74f4:	f7ff fedb 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d74f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d74fa:	b108      	cbz	r0, d7500 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d74fc:	f7fe f9c8 	bl	d5890 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7500:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7504:	2618      	movs	r6, #24
   d7506:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d750a:	42ae      	cmp	r6, r5
   d750c:	d004      	beq.n	d7518 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d750e:	4628      	mov	r0, r5
   d7510:	f000 fe38 	bl	d8184 <_ZN6StringD1Ev>
   d7514:	3518      	adds	r5, #24
   d7516:	e7f8      	b.n	d750a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7518:	6920      	ldr	r0, [r4, #16]
   d751a:	f7fe fc37 	bl	d5d8c <free>
   d751e:	6820      	ldr	r0, [r4, #0]
   d7520:	f7fe fc34 	bl	d5d8c <free>
}
   d7524:	4620      	mov	r0, r4
   d7526:	b002      	add	sp, #8
   d7528:	bd70      	pop	{r4, r5, r6, pc}
	...

000d752c <__tcf_2>:
    static LogManager mgr;
   d752c:	4801      	ldr	r0, [pc, #4]	; (d7534 <__tcf_2+0x8>)
   d752e:	f7ff bfd3 	b.w	d74d8 <_ZN5spark10LogManagerD1Ev>
   d7532:	bf00      	nop
   d7534:	2003e590 	.word	0x2003e590

000d7538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7538:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d753c:	4606      	mov	r6, r0
   d753e:	460c      	mov	r4, r1
   d7540:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7542:	d927      	bls.n	d7594 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7544:	4290      	cmp	r0, r2
   d7546:	d226      	bcs.n	d7596 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7548:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d754c:	1a6c      	subs	r4, r5, r1
   d754e:	f1a1 0714 	sub.w	r7, r1, #20
   d7552:	4404      	add	r4, r0
        capacity_(0) {
   d7554:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7556:	42af      	cmp	r7, r5
   d7558:	d03d      	beq.n	d75d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d755a:	b1a4      	cbz	r4, d7586 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d755c:	682b      	ldr	r3, [r5, #0]
   d755e:	6023      	str	r3, [r4, #0]
   d7560:	88ab      	ldrh	r3, [r5, #4]
   d7562:	80a3      	strh	r3, [r4, #4]
   d7564:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7568:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d756a:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d756e:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7570:	68ab      	ldr	r3, [r5, #8]
   d7572:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7574:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7576:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7578:	68ea      	ldr	r2, [r5, #12]
   d757a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d757c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d757e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7580:	692a      	ldr	r2, [r5, #16]
   d7582:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7584:	612b      	str	r3, [r5, #16]
   d7586:	f105 0008 	add.w	r0, r5, #8
   d758a:	f7ff fe27 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d758e:	3d14      	subs	r5, #20
   d7590:	3c14      	subs	r4, #20
   d7592:	e7e0      	b.n	d7556 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7594:	d01f      	beq.n	d75d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7596:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7598:	42ac      	cmp	r4, r5
   d759a:	d01c      	beq.n	d75d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d759c:	b1a6      	cbz	r6, d75c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d759e:	6823      	ldr	r3, [r4, #0]
   d75a0:	6033      	str	r3, [r6, #0]
   d75a2:	88a3      	ldrh	r3, [r4, #4]
   d75a4:	80b3      	strh	r3, [r6, #4]
   d75a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d75aa:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d75ac:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d75b0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75b2:	68a3      	ldr	r3, [r4, #8]
   d75b4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d75b6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75b8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d75ba:	68e2      	ldr	r2, [r4, #12]
   d75bc:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d75be:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75c0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75c2:	6922      	ldr	r2, [r4, #16]
   d75c4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d75c6:	6123      	str	r3, [r4, #16]
   d75c8:	f104 0008 	add.w	r0, r4, #8
   d75cc:	f7ff fe06 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d75d0:	3414      	adds	r4, #20
   d75d2:	3614      	adds	r6, #20
   d75d4:	e7e0      	b.n	d7598 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d75d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75da:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d75de:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75e0:	4604      	mov	r4, r0
   d75e2:	460e      	mov	r6, r1
   d75e4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75e6:	db0d      	blt.n	d7604 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d75e8:	3501      	adds	r5, #1
        if (n > 0) {
   d75ea:	2d00      	cmp	r5, #0
   d75ec:	6800      	ldr	r0, [r0, #0]
   d75ee:	dd04      	ble.n	d75fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d75f0:	00a9      	lsls	r1, r5, #2
   d75f2:	f7fe fbd3 	bl	d5d9c <realloc>
            if (!d) {
   d75f6:	b918      	cbnz	r0, d7600 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d75f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d75fa:	f7fe fbc7 	bl	d5d8c <free>
        T* d = nullptr;
   d75fe:	2000      	movs	r0, #0
        data_ = d;
   d7600:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7602:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d7604:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7606:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7608:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d760c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d760e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d7612:	1d08      	adds	r0, r1, #4
   d7614:	f001 fd66 	bl	d90e4 <memmove>
    new(p) T(std::move(value));
   d7618:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d761c:	6863      	ldr	r3, [r4, #4]
   d761e:	3301      	adds	r3, #1
   d7620:	6063      	str	r3, [r4, #4]
    return true;
   d7622:	2001      	movs	r0, #1
   d7624:	e7e8      	b.n	d75f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7626 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7626:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7628:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d762c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d762e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	460d      	mov	r5, r1
   d7634:	f7fe f934 	bl	d58a0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7638:	e9d4 3100 	ldrd	r3, r1, [r4]
   d763c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7640:	4283      	cmp	r3, r0
   d7642:	461a      	mov	r2, r3
   d7644:	d00b      	beq.n	d765e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7646:	6812      	ldr	r2, [r2, #0]
   d7648:	42aa      	cmp	r2, r5
   d764a:	f103 0304 	add.w	r3, r3, #4
   d764e:	d1f7      	bne.n	d7640 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7650:	a801      	add	r0, sp, #4
   d7652:	f7ff fe2c 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7656:	2500      	movs	r5, #0
}
   d7658:	4628      	mov	r0, r5
   d765a:	b003      	add	sp, #12
   d765c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d765e:	462a      	mov	r2, r5
   d7660:	4620      	mov	r0, r4
   d7662:	f7ff ffb9 	bl	d75d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7666:	4605      	mov	r5, r0
   d7668:	2800      	cmp	r0, #0
   d766a:	d0f1      	beq.n	d7650 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d766c:	6863      	ldr	r3, [r4, #4]
   d766e:	2b01      	cmp	r3, #1
   d7670:	d101      	bne.n	d7676 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7672:	f7ff fd07 	bl	d7084 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7676:	a801      	add	r0, sp, #4
   d7678:	f7ff fe19 	bl	d72ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d767c:	e7ec      	b.n	d7658 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d767e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d767e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7682:	4604      	mov	r4, r0
   d7684:	460d      	mov	r5, r1
   d7686:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7688:	d914      	bls.n	d76b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d768a:	4290      	cmp	r0, r2
   d768c:	d213      	bcs.n	d76b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d768e:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7692:	1a75      	subs	r5, r6, r1
   d7694:	f1a1 0710 	sub.w	r7, r1, #16
   d7698:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d769a:	42b7      	cmp	r7, r6
   d769c:	d018      	beq.n	d76d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d769e:	b11c      	cbz	r4, d76a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d76a0:	4631      	mov	r1, r6
   d76a2:	4620      	mov	r0, r4
   d76a4:	f000 fdea 	bl	d827c <_ZN6StringC1EOS_>
                end->~T();
   d76a8:	4630      	mov	r0, r6
   d76aa:	f000 fd6b 	bl	d8184 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d76ae:	3e10      	subs	r6, #16
   d76b0:	3c10      	subs	r4, #16
   d76b2:	e7f2      	b.n	d769a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d76b4:	d00c      	beq.n	d76d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d76b6:	42b5      	cmp	r5, r6
   d76b8:	d00a      	beq.n	d76d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d76ba:	b11c      	cbz	r4, d76c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d76bc:	4629      	mov	r1, r5
   d76be:	4620      	mov	r0, r4
   d76c0:	f000 fddc 	bl	d827c <_ZN6StringC1EOS_>
                p->~T();
   d76c4:	4628      	mov	r0, r5
   d76c6:	f000 fd5d 	bl	d8184 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d76ca:	3510      	adds	r5, #16
   d76cc:	3410      	adds	r4, #16
   d76ce:	e7f2      	b.n	d76b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d76d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d76d2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d76d4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d76d6:	4605      	mov	r5, r0
        if (n > 0) {
   d76d8:	dd11      	ble.n	d76fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d76da:	0130      	lsls	r0, r6, #4
   d76dc:	f7fe fb4e 	bl	d5d7c <malloc>
            if (!d) {
   d76e0:	4604      	mov	r4, r0
   d76e2:	b158      	cbz	r0, d76fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d76e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d76e8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d76ec:	f7ff ffc7 	bl	d767e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d76f0:	6828      	ldr	r0, [r5, #0]
   d76f2:	f7fe fb4b 	bl	d5d8c <free>
        data_ = d;
   d76f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d76f8:	60ae      	str	r6, [r5, #8]
        return true;
   d76fa:	2001      	movs	r0, #1
    }
   d76fc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d76fe:	2400      	movs	r4, #0
   d7700:	e7f6      	b.n	d76f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d7702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7706:	4691      	mov	r9, r2
   d7708:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d770a:	2300      	movs	r3, #0
   d770c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d770e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d7712:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7714:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d7716:	4299      	cmp	r1, r3
        capacity_(0) {
   d7718:	e9c0 3300 	strd	r3, r3, [r0]
   d771c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7720:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7724:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7728:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d772a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d772c:	dc23      	bgt.n	d7776 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d772e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d7732:	2314      	movs	r3, #20
   d7734:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7738:	42af      	cmp	r7, r5
   d773a:	d03b      	beq.n	d77b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d773c:	4629      	mov	r1, r5
   d773e:	a80d      	add	r0, sp, #52	; 0x34
   d7740:	f000 fd9c 	bl	d827c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d7744:	a90d      	add	r1, sp, #52	; 0x34
   d7746:	a811      	add	r0, sp, #68	; 0x44
   d7748:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d774a:	f000 fd97 	bl	d827c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d774e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d7752:	4299      	cmp	r1, r3
   d7754:	da1b      	bge.n	d778e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d7756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d775a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d775e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7762:	4631      	mov	r1, r6
   d7764:	f106 0010 	add.w	r0, r6, #16
   d7768:	f7ff ff89 	bl	d767e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d776c:	b9ee      	cbnz	r6, d77aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7770:	3301      	adds	r3, #1
   d7772:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d7774:	e011      	b.n	d779a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d7776:	a80a      	add	r0, sp, #40	; 0x28
   d7778:	f7ff ffab 	bl	d76d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d777c:	2800      	cmp	r0, #0
   d777e:	d1d6      	bne.n	d772e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d7780:	a80a      	add	r0, sp, #40	; 0x28
   d7782:	f7ff fd3f 	bl	d7204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7786:	4620      	mov	r0, r4
   d7788:	b017      	add	sp, #92	; 0x5c
   d778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d778e:	3101      	adds	r1, #1
   d7790:	a80a      	add	r0, sp, #40	; 0x28
   d7792:	f7ff ff9e 	bl	d76d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7796:	2800      	cmp	r0, #0
   d7798:	d1dd      	bne.n	d7756 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d779a:	a811      	add	r0, sp, #68	; 0x44
   d779c:	f000 fcf2 	bl	d8184 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d77a0:	a80d      	add	r0, sp, #52	; 0x34
   d77a2:	f000 fcef 	bl	d8184 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d77a6:	3514      	adds	r5, #20
   d77a8:	e7c6      	b.n	d7738 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d77aa:	a911      	add	r1, sp, #68	; 0x44
   d77ac:	4630      	mov	r0, r6
   d77ae:	f000 fd65 	bl	d827c <_ZN6StringC1EOS_>
   d77b2:	e7dc      	b.n	d776e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d77b4:	2600      	movs	r6, #0
   d77b6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d77ba:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d77bc:	4637      	mov	r7, r6
   d77be:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d77c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d77c6:	429e      	cmp	r6, r3
   d77c8:	f280 8097 	bge.w	d78fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d77cc:	0133      	lsls	r3, r6, #4
   d77ce:	58d3      	ldr	r3, [r2, r3]
   d77d0:	9308      	str	r3, [sp, #32]
        if (!category) {
   d77d2:	b90b      	cbnz	r3, d77d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d77d4:	3601      	adds	r6, #1
   d77d6:	e7f4      	b.n	d77c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d77d8:	fb0a f306 	mul.w	r3, sl, r6
   d77dc:	9709      	str	r7, [sp, #36]	; 0x24
   d77de:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d77e0:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d77e2:	a909      	add	r1, sp, #36	; 0x24
   d77e4:	a808      	add	r0, sp, #32
   d77e6:	f7ff fb00 	bl	d6dea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d77ea:	4683      	mov	fp, r0
   d77ec:	2800      	cmp	r0, #0
   d77ee:	d0f1      	beq.n	d77d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d77f0:	4601      	mov	r1, r0
   d77f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d77f4:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d77f8:	f10d 031f 	add.w	r3, sp, #31
   d77fc:	4628      	mov	r0, r5
   d77fe:	f7ff fb73 	bl	d6ee8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7802:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7806:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7808:	f1b8 0f00 	cmp.w	r8, #0
   d780c:	d166      	bne.n	d78dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d780e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d7812:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d7816:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d781a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d781e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d7822:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d7826:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d782a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d782e:	4293      	cmp	r3, r2
   d7830:	db1a      	blt.n	d7868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d7832:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d7836:	f1bb 0f00 	cmp.w	fp, #0
   d783a:	dd4a      	ble.n	d78d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d783c:	fb0a f00b 	mul.w	r0, sl, fp
   d7840:	f7fe fa9c 	bl	d5d7c <malloc>
            if (!d) {
   d7844:	9004      	str	r0, [sp, #16]
   d7846:	2800      	cmp	r0, #0
   d7848:	d045      	beq.n	d78d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d784a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d784e:	fb0a 1202 	mla	r2, sl, r2, r1
   d7852:	f7ff fe71 	bl	d7538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7856:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d7858:	6828      	ldr	r0, [r5, #0]
   d785a:	9304      	str	r3, [sp, #16]
   d785c:	f7fe fa96 	bl	d5d8c <free>
        data_ = d;
   d7860:	9b04      	ldr	r3, [sp, #16]
   d7862:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d7864:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d7868:	9b01      	ldr	r3, [sp, #4]
   d786a:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d786e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d7870:	fb0a f303 	mul.w	r3, sl, r3
   d7874:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d7878:	f101 0014 	add.w	r0, r1, #20
   d787c:	fb0a b202 	mla	r2, sl, r2, fp
   d7880:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d7882:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d7884:	f7ff fe58 	bl	d7538 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7888:	9904      	ldr	r1, [sp, #16]
   d788a:	b1a9      	cbz	r1, d78b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d788c:	9b05      	ldr	r3, [sp, #20]
   d788e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7890:	f84b 2003 	str.w	r2, [fp, r3]
   d7894:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7898:	808b      	strh	r3, [r1, #4]
   d789a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d789e:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d78a0:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d78a4:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d78a8:	608b      	str	r3, [r1, #8]
   d78aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d78ac:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d78ae:	60cb      	str	r3, [r1, #12]
   d78b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d78b2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d78b4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d78b8:	686b      	ldr	r3, [r5, #4]
   d78ba:	3301      	adds	r3, #1
   d78bc:	606b      	str	r3, [r5, #4]
   d78be:	a813      	add	r0, sp, #76	; 0x4c
   d78c0:	f7ff fc8c 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d78c4:	f1b8 0f00 	cmp.w	r8, #0
   d78c8:	d008      	beq.n	d78dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d78ca:	a80d      	add	r0, sp, #52	; 0x34
   d78cc:	f7ff fc86 	bl	d71dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d78d0:	e756      	b.n	d7780 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d78d2:	4643      	mov	r3, r8
   d78d4:	e7c0      	b.n	d7858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d78d6:	f04f 0801 	mov.w	r8, #1
   d78da:	e7f0      	b.n	d78be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d78dc:	9b01      	ldr	r3, [sp, #4]
   d78de:	682d      	ldr	r5, [r5, #0]
   d78e0:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d78e4:	9b08      	ldr	r3, [sp, #32]
   d78e6:	781b      	ldrb	r3, [r3, #0]
   d78e8:	b92b      	cbnz	r3, d78f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d78ea:	f8d9 3000 	ldr.w	r3, [r9]
   d78ee:	9a02      	ldr	r2, [sp, #8]
   d78f0:	4413      	add	r3, r2
   d78f2:	7c1b      	ldrb	r3, [r3, #16]
   d78f4:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d78f6:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d78f8:	e773      	b.n	d77e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78fa:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d78fc:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78fe:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7900:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7902:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7904:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d7906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d7908:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d790a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d790c:	60a2      	str	r2, [r4, #8]
   d790e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d7910:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7912:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7914:	60e2      	str	r2, [r4, #12]
   d7916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d7918:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d791a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d791c:	6122      	str	r2, [r4, #16]
   d791e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7920:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d7922:	9b03      	ldr	r3, [sp, #12]
   d7924:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d7926:	6162      	str	r2, [r4, #20]
   d7928:	7623      	strb	r3, [r4, #24]
   d792a:	e7ce      	b.n	d78ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d792c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d792c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d792e:	4605      	mov	r5, r0
   d7930:	4b09      	ldr	r3, [pc, #36]	; (d7958 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7932:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7936:	4604      	mov	r4, r0
   d7938:	460e      	mov	r6, r1
        filter_(level, filters) {
   d793a:	a801      	add	r0, sp, #4
   d793c:	4611      	mov	r1, r2
   d793e:	f7fc fef9 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7942:	aa01      	add	r2, sp, #4
   d7944:	4631      	mov	r1, r6
   d7946:	4628      	mov	r0, r5
   d7948:	f7ff fedb 	bl	d7702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d794c:	a801      	add	r0, sp, #4
   d794e:	f7fc fcbd 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7952:	4620      	mov	r0, r4
   d7954:	b004      	add	sp, #16
   d7956:	bd70      	pop	{r4, r5, r6, pc}
   d7958:	000d94f0 	.word	0x000d94f0

000d795c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d795c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d795e:	460f      	mov	r7, r1
   d7960:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7962:	4926      	ldr	r1, [pc, #152]	; (d79fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d7964:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7966:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d7968:	4616      	mov	r6, r2
   d796a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d796c:	f001 fc17 	bl	d919e <strcmp>
   d7970:	bb00      	cbnz	r0, d79b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d7972:	b1e4      	cbz	r4, d79ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7974:	4629      	mov	r1, r5
   d7976:	4668      	mov	r0, sp
   d7978:	f7ff fc8a 	bl	d7290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d797c:	4920      	ldr	r1, [pc, #128]	; (d7a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d797e:	2024      	movs	r0, #36	; 0x24
   d7980:	f000 ff9a 	bl	d88b8 <_ZnwjRKSt9nothrow_t>
   d7984:	4605      	mov	r5, r0
   d7986:	b170      	cbz	r0, d79a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7988:	4669      	mov	r1, sp
   d798a:	a803      	add	r0, sp, #12
   d798c:	f7fc fed2 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7990:	aa03      	add	r2, sp, #12
   d7992:	4631      	mov	r1, r6
   d7994:	4628      	mov	r0, r5
   d7996:	f7ff ffc9 	bl	d792c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d799a:	a803      	add	r0, sp, #12
   d799c:	f7fc fc96 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d79a0:	4b18      	ldr	r3, [pc, #96]	; (d7a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d79a2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d79a4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d79a6:	4668      	mov	r0, sp
   d79a8:	f7fc fc90 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79ac:	462c      	mov	r4, r5
}
   d79ae:	4620      	mov	r0, r4
   d79b0:	b007      	add	sp, #28
   d79b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d79b4:	4914      	ldr	r1, [pc, #80]	; (d7a08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d79b6:	4638      	mov	r0, r7
   d79b8:	f001 fbf1 	bl	d919e <strcmp>
   d79bc:	b9e0      	cbnz	r0, d79f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d79be:	2c00      	cmp	r4, #0
   d79c0:	d0f5      	beq.n	d79ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d79c2:	4629      	mov	r1, r5
   d79c4:	4668      	mov	r0, sp
   d79c6:	f7ff fc63 	bl	d7290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d79ca:	490d      	ldr	r1, [pc, #52]	; (d7a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d79cc:	2024      	movs	r0, #36	; 0x24
   d79ce:	f000 ff73 	bl	d88b8 <_ZnwjRKSt9nothrow_t>
   d79d2:	4605      	mov	r5, r0
   d79d4:	2800      	cmp	r0, #0
   d79d6:	d0e6      	beq.n	d79a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d79d8:	4669      	mov	r1, sp
   d79da:	a803      	add	r0, sp, #12
   d79dc:	f7fc feaa 	bl	d4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d79e0:	aa03      	add	r2, sp, #12
   d79e2:	4631      	mov	r1, r6
   d79e4:	4628      	mov	r0, r5
   d79e6:	f7ff ffa1 	bl	d792c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79ea:	a803      	add	r0, sp, #12
   d79ec:	f7fc fc6e 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79f0:	4b06      	ldr	r3, [pc, #24]	; (d7a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d79f2:	602b      	str	r3, [r5, #0]
   d79f4:	622c      	str	r4, [r5, #32]
}
   d79f6:	e7d6      	b.n	d79a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d79f8:	2400      	movs	r4, #0
   d79fa:	e7d8      	b.n	d79ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d79fc:	000d96f5 	.word	0x000d96f5
   d7a00:	000d988c 	.word	0x000d988c
   d7a04:	000d978c 	.word	0x000d978c
   d7a08:	000d96f9 	.word	0x000d96f9
   d7a0c:	000d9774 	.word	0x000d9774

000d7a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d7a10:	4b01      	ldr	r3, [pc, #4]	; (d7a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a12:	4a02      	ldr	r2, [pc, #8]	; (d7a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7a16:	4770      	bx	lr
   d7a18:	2003e58c 	.word	0x2003e58c
   d7a1c:	000d970a 	.word	0x000d970a

000d7a20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a24:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d7a26:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a2a:	4604      	mov	r4, r0
   d7a2c:	460e      	mov	r6, r1
   d7a2e:	4617      	mov	r7, r2
   d7a30:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d7a32:	f000 fd6f 	bl	d8514 <_Z16_fetch_usbserialv>
   d7a36:	4581      	cmp	r9, r0
   d7a38:	d04c      	beq.n	d7ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d7a3a:	792b      	ldrb	r3, [r5, #4]
   d7a3c:	0719      	lsls	r1, r3, #28
   d7a3e:	d504      	bpl.n	d7a4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d7a40:	696a      	ldr	r2, [r5, #20]
   d7a42:	4954      	ldr	r1, [pc, #336]	; (d7b94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7a44:	4620      	mov	r0, r4
   d7a46:	f7ff fa40 	bl	d6eca <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d7a4a:	f1b8 0f00 	cmp.w	r8, #0
   d7a4e:	d00d      	beq.n	d7a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d7a50:	215b      	movs	r1, #91	; 0x5b
   d7a52:	4620      	mov	r0, r4
   d7a54:	f7ff fa2d 	bl	d6eb2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7a58:	4641      	mov	r1, r8
   d7a5a:	4620      	mov	r0, r4
   d7a5c:	f7ff fa1a 	bl	d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7a60:	6823      	ldr	r3, [r4, #0]
   d7a62:	494d      	ldr	r1, [pc, #308]	; (d7b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d7a64:	68db      	ldr	r3, [r3, #12]
   d7a66:	2202      	movs	r2, #2
   d7a68:	4620      	mov	r0, r4
   d7a6a:	4798      	blx	r3
    if (attr.has_file) {
   d7a6c:	792b      	ldrb	r3, [r5, #4]
   d7a6e:	07da      	lsls	r2, r3, #31
   d7a70:	d523      	bpl.n	d7aba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d7a72:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d7a76:	212f      	movs	r1, #47	; 0x2f
   d7a78:	4640      	mov	r0, r8
   d7a7a:	f001 fbed 	bl	d9258 <strrchr>
    if (s1) {
   d7a7e:	b108      	cbz	r0, d7a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d7a80:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d7a84:	4641      	mov	r1, r8
   d7a86:	4620      	mov	r0, r4
   d7a88:	f7ff fa04 	bl	d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7a8c:	792b      	ldrb	r3, [r5, #4]
   d7a8e:	079b      	lsls	r3, r3, #30
   d7a90:	d508      	bpl.n	d7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d7a92:	213a      	movs	r1, #58	; 0x3a
   d7a94:	4620      	mov	r0, r4
   d7a96:	f7ff fa0c 	bl	d6eb2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d7a9a:	68ea      	ldr	r2, [r5, #12]
   d7a9c:	493f      	ldr	r1, [pc, #252]	; (d7b9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d7a9e:	4620      	mov	r0, r4
   d7aa0:	f7ff fa13 	bl	d6eca <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d7aa4:	792a      	ldrb	r2, [r5, #4]
   d7aa6:	6823      	ldr	r3, [r4, #0]
   d7aa8:	f012 0f04 	tst.w	r2, #4
   d7aac:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d7aae:	bf14      	ite	ne
   d7ab0:	493b      	ldrne	r1, [pc, #236]	; (d7ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d7ab2:	493c      	ldreq	r1, [pc, #240]	; (d7ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d7ab4:	2202      	movs	r2, #2
            write(": ", 2);
   d7ab6:	4620      	mov	r0, r4
   d7ab8:	4798      	blx	r3
    if (attr.has_function) {
   d7aba:	792b      	ldrb	r3, [r5, #4]
   d7abc:	0758      	lsls	r0, r3, #29
   d7abe:	d51d      	bpl.n	d7afc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7ac0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7ac2:	460b      	mov	r3, r1
   d7ac4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d7ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7aca:	b160      	cbz	r0, d7ae6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d7acc:	2820      	cmp	r0, #32
   d7ace:	d108      	bne.n	d7ae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d7ad0:	4619      	mov	r1, r3
   d7ad2:	e7f7      	b.n	d7ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d7ad4:	4834      	ldr	r0, [pc, #208]	; (d7ba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7ad6:	f000 f966 	bl	d7da6 <_ZN5spark12NetworkClass9listeningEv>
   d7ada:	2800      	cmp	r0, #0
   d7adc:	d0ad      	beq.n	d7a3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d7ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d7ae2:	2828      	cmp	r0, #40	; 0x28
   d7ae4:	d1ee      	bne.n	d7ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d7ae6:	6823      	ldr	r3, [r4, #0]
   d7ae8:	1a52      	subs	r2, r2, r1
   d7aea:	68db      	ldr	r3, [r3, #12]
   d7aec:	4620      	mov	r0, r4
   d7aee:	4798      	blx	r3
        write("(): ", 4);
   d7af0:	6823      	ldr	r3, [r4, #0]
   d7af2:	492e      	ldr	r1, [pc, #184]	; (d7bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7af4:	68db      	ldr	r3, [r3, #12]
   d7af6:	2204      	movs	r2, #4
   d7af8:	4620      	mov	r0, r4
   d7afa:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d7afc:	2100      	movs	r1, #0
   d7afe:	4638      	mov	r0, r7
   d7b00:	f7fe f86e 	bl	d5be0 <log_level_name>
   d7b04:	4601      	mov	r1, r0
    write(s);
   d7b06:	4620      	mov	r0, r4
   d7b08:	f7ff f9c4 	bl	d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7b0c:	6823      	ldr	r3, [r4, #0]
   d7b0e:	4925      	ldr	r1, [pc, #148]	; (d7ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7b10:	68db      	ldr	r3, [r3, #12]
   d7b12:	2202      	movs	r2, #2
   d7b14:	4620      	mov	r0, r4
   d7b16:	4798      	blx	r3
    if (msg) {
   d7b18:	b11e      	cbz	r6, d7b22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d7b1a:	4631      	mov	r1, r6
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	f7ff f9b9 	bl	d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d7b22:	792b      	ldrb	r3, [r5, #4]
   d7b24:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7b28:	d02c      	beq.n	d7b84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d7b2a:	6823      	ldr	r3, [r4, #0]
   d7b2c:	4920      	ldr	r1, [pc, #128]	; (d7bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7b2e:	68db      	ldr	r3, [r3, #12]
   d7b30:	2202      	movs	r2, #2
   d7b32:	4620      	mov	r0, r4
   d7b34:	4798      	blx	r3
        if (attr.has_code) {
   d7b36:	792b      	ldrb	r3, [r5, #4]
   d7b38:	06d9      	lsls	r1, r3, #27
   d7b3a:	d50a      	bpl.n	d7b52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d7b3c:	6823      	ldr	r3, [r4, #0]
   d7b3e:	491d      	ldr	r1, [pc, #116]	; (d7bb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7b40:	68db      	ldr	r3, [r3, #12]
   d7b42:	2207      	movs	r2, #7
   d7b44:	4620      	mov	r0, r4
   d7b46:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7b48:	69aa      	ldr	r2, [r5, #24]
   d7b4a:	491b      	ldr	r1, [pc, #108]	; (d7bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7b4c:	4620      	mov	r0, r4
   d7b4e:	f7ff f9bc 	bl	d6eca <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d7b52:	792b      	ldrb	r3, [r5, #4]
   d7b54:	069a      	lsls	r2, r3, #26
   d7b56:	d511      	bpl.n	d7b7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7b58:	06db      	lsls	r3, r3, #27
   d7b5a:	d505      	bpl.n	d7b68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d7b5c:	6823      	ldr	r3, [r4, #0]
   d7b5e:	4910      	ldr	r1, [pc, #64]	; (d7ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7b60:	68db      	ldr	r3, [r3, #12]
   d7b62:	2202      	movs	r2, #2
   d7b64:	4620      	mov	r0, r4
   d7b66:	4798      	blx	r3
            write("details = ", 10);
   d7b68:	6823      	ldr	r3, [r4, #0]
   d7b6a:	4914      	ldr	r1, [pc, #80]	; (d7bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7b6c:	68db      	ldr	r3, [r3, #12]
   d7b6e:	4620      	mov	r0, r4
   d7b70:	220a      	movs	r2, #10
   d7b72:	4798      	blx	r3
            write(attr.details);
   d7b74:	69e9      	ldr	r1, [r5, #28]
   d7b76:	4620      	mov	r0, r4
   d7b78:	f7ff f98c 	bl	d6e94 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d7b7c:	215d      	movs	r1, #93	; 0x5d
   d7b7e:	4620      	mov	r0, r4
   d7b80:	f7ff f997 	bl	d6eb2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d7b84:	6823      	ldr	r3, [r4, #0]
   d7b86:	490e      	ldr	r1, [pc, #56]	; (d7bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7b88:	68db      	ldr	r3, [r3, #12]
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	2202      	movs	r2, #2
}
   d7b8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d7b92:	4718      	bx	r3
   d7b94:	000d970e 	.word	0x000d970e
   d7b98:	000d9715 	.word	0x000d9715
   d7b9c:	000d94c2 	.word	0x000d94c2
   d7ba0:	000d9718 	.word	0x000d9718
   d7ba4:	000d971d 	.word	0x000d971d
   d7ba8:	2003e5b8 	.word	0x2003e5b8
   d7bac:	000d971b 	.word	0x000d971b
   d7bb0:	000d9720 	.word	0x000d9720
   d7bb4:	000d9723 	.word	0x000d9723
   d7bb8:	000d972b 	.word	0x000d972b
   d7bbc:	000d972e 	.word	0x000d972e
   d7bc0:	000d9739 	.word	0x000d9739

000d7bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bc8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d7bca:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7bd0:	4605      	mov	r5, r0
   d7bd2:	460f      	mov	r7, r1
   d7bd4:	4690      	mov	r8, r2
   d7bd6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d7bd8:	f000 fc9c 	bl	d8514 <_Z16_fetch_usbserialv>
   d7bdc:	4581      	cmp	r9, r0
   d7bde:	d105      	bne.n	d7bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7be0:	4849      	ldr	r0, [pc, #292]	; (d7d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d7be2:	f000 f8e0 	bl	d7da6 <_ZN5spark12NetworkClass9listeningEv>
   d7be6:	2800      	cmp	r0, #0
   d7be8:	f040 808a 	bne.w	d7d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d7bec:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d7bee:	4a47      	ldr	r2, [pc, #284]	; (d7d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7bf0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d7bf2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d7bf6:	a801      	add	r0, sp, #4
        strm_(stream) {
   d7bf8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d7bfa:	f88d 9008 	strb.w	r9, [sp, #8]
   d7bfe:	f7ff f83c 	bl	d6c7a <_ZN5spark10JSONWriter11beginObjectEv>
   d7c02:	4649      	mov	r1, r9
   d7c04:	4640      	mov	r0, r8
   d7c06:	f7fd ffeb 	bl	d5be0 <log_level_name>
    json.name("l", 1).value(s);
   d7c0a:	4941      	ldr	r1, [pc, #260]	; (d7d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7c0c:	4680      	mov	r8, r0
   d7c0e:	2201      	movs	r2, #1
   d7c10:	a801      	add	r0, sp, #4
   d7c12:	f7ff f8bb 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c16:	4641      	mov	r1, r8
   d7c18:	f7ff f92e 	bl	d6e78 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d7c1c:	b13f      	cbz	r7, d7c2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7c1e:	493d      	ldr	r1, [pc, #244]	; (d7d14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7c20:	2201      	movs	r2, #1
   d7c22:	a801      	add	r0, sp, #4
   d7c24:	f7ff f8b2 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c28:	4639      	mov	r1, r7
   d7c2a:	f7ff f925 	bl	d6e78 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d7c2e:	b13e      	cbz	r6, d7c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7c30:	4939      	ldr	r1, [pc, #228]	; (d7d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7c32:	2201      	movs	r2, #1
   d7c34:	a801      	add	r0, sp, #4
   d7c36:	f7ff f8a9 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c3a:	4631      	mov	r1, r6
   d7c3c:	f7ff f91c 	bl	d6e78 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7c40:	7923      	ldrb	r3, [r4, #4]
   d7c42:	07df      	lsls	r7, r3, #31
   d7c44:	d50e      	bpl.n	d7c64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7c46:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7c48:	212f      	movs	r1, #47	; 0x2f
   d7c4a:	4630      	mov	r0, r6
   d7c4c:	f001 fb04 	bl	d9258 <strrchr>
    if (s1) {
   d7c50:	b100      	cbz	r0, d7c54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7c52:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d7c54:	4931      	ldr	r1, [pc, #196]	; (d7d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7c56:	2201      	movs	r2, #1
   d7c58:	a801      	add	r0, sp, #4
   d7c5a:	f7ff f897 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c5e:	4631      	mov	r1, r6
   d7c60:	f7ff f90a 	bl	d6e78 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d7c64:	7923      	ldrb	r3, [r4, #4]
   d7c66:	079e      	lsls	r6, r3, #30
   d7c68:	d507      	bpl.n	d7c7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7c6a:	492d      	ldr	r1, [pc, #180]	; (d7d20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7c6c:	2202      	movs	r2, #2
   d7c6e:	a801      	add	r0, sp, #4
   d7c70:	f7ff f88c 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c74:	68e1      	ldr	r1, [r4, #12]
   d7c76:	f7ff f80d 	bl	d6c94 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d7c7a:	7923      	ldrb	r3, [r4, #4]
   d7c7c:	0758      	lsls	r0, r3, #29
   d7c7e:	d514      	bpl.n	d7caa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7c80:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7c82:	4633      	mov	r3, r6
   d7c84:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d7c86:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7c8a:	b12a      	cbz	r2, d7c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d7c8c:	2a20      	cmp	r2, #32
   d7c8e:	d101      	bne.n	d7c94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7c90:	461e      	mov	r6, r3
   d7c92:	e7f7      	b.n	d7c84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d7c94:	2a28      	cmp	r2, #40	; 0x28
   d7c96:	d1f5      	bne.n	d7c84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d7c98:	4922      	ldr	r1, [pc, #136]	; (d7d24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7c9a:	2202      	movs	r2, #2
   d7c9c:	a801      	add	r0, sp, #4
   d7c9e:	f7ff f875 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7ca2:	1bba      	subs	r2, r7, r6
   d7ca4:	4631      	mov	r1, r6
   d7ca6:	f7ff f881 	bl	d6dac <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d7caa:	7923      	ldrb	r3, [r4, #4]
   d7cac:	0719      	lsls	r1, r3, #28
   d7cae:	d507      	bpl.n	d7cc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d7cb0:	491d      	ldr	r1, [pc, #116]	; (d7d28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7cb2:	2201      	movs	r2, #1
   d7cb4:	a801      	add	r0, sp, #4
   d7cb6:	f7ff f869 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7cba:	6961      	ldr	r1, [r4, #20]
   d7cbc:	f7fe fffc 	bl	d6cb8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d7cc0:	7923      	ldrb	r3, [r4, #4]
   d7cc2:	06da      	lsls	r2, r3, #27
   d7cc4:	d508      	bpl.n	d7cd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d7cc6:	2204      	movs	r2, #4
   d7cc8:	4918      	ldr	r1, [pc, #96]	; (d7d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7cca:	eb0d 0002 	add.w	r0, sp, r2
   d7cce:	f7ff f85d 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7cd2:	69a1      	ldr	r1, [r4, #24]
   d7cd4:	f7fe ffde 	bl	d6c94 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d7cd8:	7923      	ldrb	r3, [r4, #4]
   d7cda:	069b      	lsls	r3, r3, #26
   d7cdc:	d507      	bpl.n	d7cee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d7cde:	4914      	ldr	r1, [pc, #80]	; (d7d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7ce0:	2206      	movs	r2, #6
   d7ce2:	a801      	add	r0, sp, #4
   d7ce4:	f7ff f852 	bl	d6d8c <_ZN5spark10JSONWriter4nameEPKcj>
   d7ce8:	69e1      	ldr	r1, [r4, #28]
   d7cea:	f7ff f8c5 	bl	d6e78 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d7cee:	a801      	add	r0, sp, #4
   d7cf0:	f7fe ffad 	bl	d6c4e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7cf4:	6a28      	ldr	r0, [r5, #32]
   d7cf6:	490f      	ldr	r1, [pc, #60]	; (d7d34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7cf8:	6803      	ldr	r3, [r0, #0]
   d7cfa:	2202      	movs	r2, #2
   d7cfc:	68db      	ldr	r3, [r3, #12]
   d7cfe:	4798      	blx	r3
}
   d7d00:	b005      	add	sp, #20
   d7d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7d06:	bf00      	nop
   d7d08:	2003e5b8 	.word	0x2003e5b8
   d7d0c:	000d975c 	.word	0x000d975c
   d7d10:	000d96eb 	.word	0x000d96eb
   d7d14:	000d973c 	.word	0x000d973c
   d7d18:	000d94ca 	.word	0x000d94ca
   d7d1c:	000d946d 	.word	0x000d946d
   d7d20:	000d973e 	.word	0x000d973e
   d7d24:	000d9741 	.word	0x000d9741
   d7d28:	000d9744 	.word	0x000d9744
   d7d2c:	000d9746 	.word	0x000d9746
   d7d30:	000d974b 	.word	0x000d974b
   d7d34:	000d9739 	.word	0x000d9739

000d7d38 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7d38:	2300      	movs	r3, #0
   d7d3a:	6840      	ldr	r0, [r0, #4]
   d7d3c:	461a      	mov	r2, r3
   d7d3e:	f7fd bfbd 	b.w	d5cbc <network_connect>

000d7d42 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7d42:	6840      	ldr	r0, [r0, #4]
   d7d44:	2200      	movs	r2, #0
   d7d46:	2102      	movs	r1, #2
   d7d48:	f7fd bfc8 	b.w	d5cdc <network_disconnect>

000d7d4c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7d4c:	2200      	movs	r2, #0
   d7d4e:	6840      	ldr	r0, [r0, #4]
   d7d50:	4611      	mov	r1, r2
   d7d52:	f7fd bfbb 	b.w	d5ccc <network_connecting>

000d7d56 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7d56:	2200      	movs	r2, #0
   d7d58:	6840      	ldr	r0, [r0, #4]
   d7d5a:	4611      	mov	r1, r2
   d7d5c:	f7fd bfc6 	b.w	d5cec <network_ready>

000d7d60 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7d60:	2300      	movs	r3, #0
   d7d62:	6840      	ldr	r0, [r0, #4]
   d7d64:	461a      	mov	r2, r3
   d7d66:	4619      	mov	r1, r3
   d7d68:	f7fd bfc8 	b.w	d5cfc <network_on>

000d7d6c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7d6c:	2300      	movs	r3, #0
   d7d6e:	6840      	ldr	r0, [r0, #4]
   d7d70:	461a      	mov	r2, r3
   d7d72:	4619      	mov	r1, r3
   d7d74:	f7fd bfca 	b.w	d5d0c <network_off>

000d7d78 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7d78:	6840      	ldr	r0, [r0, #4]
   d7d7a:	2100      	movs	r1, #0
   d7d7c:	f7fd bfee 	b.w	d5d5c <network_is_on>

000d7d80 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7d80:	6840      	ldr	r0, [r0, #4]
   d7d82:	2100      	movs	r1, #0
   d7d84:	f7fd bff2 	b.w	d5d6c <network_is_off>

000d7d88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7d88:	6840      	ldr	r0, [r0, #4]
   d7d8a:	2200      	movs	r2, #0
   d7d8c:	f081 0101 	eor.w	r1, r1, #1
   d7d90:	f7fd bfc4 	b.w	d5d1c <network_listen>

000d7d94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7d94:	6840      	ldr	r0, [r0, #4]
   d7d96:	2200      	movs	r2, #0
   d7d98:	f7fd bfd0 	b.w	d5d3c <network_set_listen_timeout>

000d7d9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7d9c:	2200      	movs	r2, #0
   d7d9e:	6840      	ldr	r0, [r0, #4]
   d7da0:	4611      	mov	r1, r2
   d7da2:	f7fd bfd3 	b.w	d5d4c <network_get_listen_timeout>

000d7da6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7da6:	2200      	movs	r2, #0
   d7da8:	6840      	ldr	r0, [r0, #4]
   d7daa:	4611      	mov	r1, r2
   d7dac:	f7fd bfbe 	b.w	d5d2c <network_listening>

000d7db0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7db4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7db6:	b095      	sub	sp, #84	; 0x54
   d7db8:	4616      	mov	r6, r2
   d7dba:	460d      	mov	r5, r1
   d7dbc:	4607      	mov	r7, r0
    IPAddress addr;
   d7dbe:	f7fe fde7 	bl	d6990 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7dc2:	4621      	mov	r1, r4
   d7dc4:	2218      	movs	r2, #24
   d7dc6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7dc8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7dca:	f001 f9a5 	bl	d9118 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7dce:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7dd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7dd4:	4621      	mov	r1, r4
   d7dd6:	466b      	mov	r3, sp
   d7dd8:	aa0c      	add	r2, sp, #48	; 0x30
   d7dda:	4630      	mov	r0, r6
   d7ddc:	f7fd fe20 	bl	d5a20 <netdb_getaddrinfo>
    if (!r) {
   d7de0:	4604      	mov	r4, r0
   d7de2:	2800      	cmp	r0, #0
   d7de4:	d146      	bne.n	d7e74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7de6:	4602      	mov	r2, r0
   d7de8:	2101      	movs	r1, #1
   d7dea:	6868      	ldr	r0, [r5, #4]
   d7dec:	f7fd ff7e 	bl	d5cec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7df0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7df2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7df4:	4622      	mov	r2, r4
   d7df6:	6868      	ldr	r0, [r5, #4]
   d7df8:	f7fd ff78 	bl	d5cec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7dfc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7dfe:	4681      	mov	r9, r0
        bool ok = false;
   d7e00:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e02:	2e00      	cmp	r6, #0
   d7e04:	d036      	beq.n	d7e74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7e06:	2900      	cmp	r1, #0
   d7e08:	d134      	bne.n	d7e74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7e0a:	6873      	ldr	r3, [r6, #4]
   d7e0c:	2b02      	cmp	r3, #2
   d7e0e:	d003      	beq.n	d7e18 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7e10:	2b0a      	cmp	r3, #10
   d7e12:	d00b      	beq.n	d7e2c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e14:	69f6      	ldr	r6, [r6, #28]
   d7e16:	e7f4      	b.n	d7e02 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7e18:	f1b8 0f00 	cmp.w	r8, #0
   d7e1c:	d004      	beq.n	d7e28 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7e1e:	6971      	ldr	r1, [r6, #20]
   d7e20:	4638      	mov	r0, r7
   d7e22:	3104      	adds	r1, #4
   d7e24:	f7fe fde1 	bl	d69ea <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7e28:	4641      	mov	r1, r8
   d7e2a:	e7f3      	b.n	d7e14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e2c:	f1b9 0f00 	cmp.w	r9, #0
   d7e30:	d101      	bne.n	d7e36 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7e32:	4649      	mov	r1, r9
   d7e34:	e7ee      	b.n	d7e14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7e36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7e38:	2210      	movs	r2, #16
   d7e3a:	a801      	add	r0, sp, #4
   d7e3c:	f001 f96c 	bl	d9118 <memset>
                    a.v = 6;
   d7e40:	2306      	movs	r3, #6
   d7e42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e46:	ad01      	add	r5, sp, #4
   d7e48:	f104 0308 	add.w	r3, r4, #8
   d7e4c:	3418      	adds	r4, #24
   d7e4e:	6818      	ldr	r0, [r3, #0]
   d7e50:	6859      	ldr	r1, [r3, #4]
   d7e52:	462a      	mov	r2, r5
   d7e54:	c203      	stmia	r2!, {r0, r1}
   d7e56:	3308      	adds	r3, #8
   d7e58:	42a3      	cmp	r3, r4
   d7e5a:	4615      	mov	r5, r2
   d7e5c:	d1f7      	bne.n	d7e4e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7e5e:	a901      	add	r1, sp, #4
   d7e60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7e62:	ad07      	add	r5, sp, #28
   d7e64:	f7fe fda2 	bl	d69ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e6a:	1d3c      	adds	r4, r7, #4
   d7e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e6e:	682b      	ldr	r3, [r5, #0]
   d7e70:	7023      	strb	r3, [r4, #0]
   d7e72:	e7de      	b.n	d7e32 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7e74:	9800      	ldr	r0, [sp, #0]
   d7e76:	f7fd fdcb 	bl	d5a10 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7e7a:	4638      	mov	r0, r7
   d7e7c:	b015      	add	sp, #84	; 0x54
   d7e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7e84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7e84:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7e86:	4a03      	ldr	r2, [pc, #12]	; (d7e94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7e88:	601a      	str	r2, [r3, #0]
   d7e8a:	2200      	movs	r2, #0
   d7e8c:	605a      	str	r2, [r3, #4]

} // spark
   d7e8e:	4770      	bx	lr
   d7e90:	2003e5b8 	.word	0x2003e5b8
   d7e94:	000d97d4 	.word	0x000d97d4

000d7e98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e9a:	4606      	mov	r6, r0
   d7e9c:	460d      	mov	r5, r1
  size_t n = 0;
   d7e9e:	188f      	adds	r7, r1, r2
   d7ea0:	2400      	movs	r4, #0
  while (size--) {
   d7ea2:	42bd      	cmp	r5, r7
   d7ea4:	d00c      	beq.n	d7ec0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7ea6:	6833      	ldr	r3, [r6, #0]
   d7ea8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7eac:	689b      	ldr	r3, [r3, #8]
   d7eae:	4630      	mov	r0, r6
   d7eb0:	4798      	blx	r3
     if (chunk>=0)
   d7eb2:	1e03      	subs	r3, r0, #0
   d7eb4:	db01      	blt.n	d7eba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7eb6:	441c      	add	r4, r3
  while (size--) {
   d7eb8:	e7f3      	b.n	d7ea2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7eba:	2c00      	cmp	r4, #0
   d7ebc:	bf08      	it	eq
   d7ebe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ec0:	4620      	mov	r0, r4
   d7ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ec4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7ec4:	b513      	push	{r0, r1, r4, lr}
   d7ec6:	4604      	mov	r4, r0
    }
   d7ec8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7eca:	b159      	cbz	r1, d7ee4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7ecc:	9101      	str	r1, [sp, #4]
   d7ece:	f001 f996 	bl	d91fe <strlen>
   d7ed2:	6823      	ldr	r3, [r4, #0]
   d7ed4:	9901      	ldr	r1, [sp, #4]
   d7ed6:	68db      	ldr	r3, [r3, #12]
   d7ed8:	4602      	mov	r2, r0
   d7eda:	4620      	mov	r0, r4
    }
   d7edc:	b002      	add	sp, #8
   d7ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7ee2:	4718      	bx	r3
    }
   d7ee4:	b002      	add	sp, #8
   d7ee6:	bd10      	pop	{r4, pc}

000d7ee8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7ee8:	b508      	push	{r3, lr}
  return write(str);
   d7eea:	f7ff ffeb 	bl	d7ec4 <_ZN5Print5writeEPKc>
}
   d7eee:	bd08      	pop	{r3, pc}

000d7ef0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7ef0:	6803      	ldr	r3, [r0, #0]
   d7ef2:	689b      	ldr	r3, [r3, #8]
   d7ef4:	4718      	bx	r3

000d7ef6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7ef6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7ef8:	210d      	movs	r1, #13
{
   d7efa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7efc:	f7ff fff8 	bl	d7ef0 <_ZN5Print5printEc>
  n += print('\n');
   d7f00:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7f02:	4604      	mov	r4, r0
  n += print('\n');
   d7f04:	4628      	mov	r0, r5
   d7f06:	f7ff fff3 	bl	d7ef0 <_ZN5Print5printEc>
  return n;
}
   d7f0a:	4420      	add	r0, r4
   d7f0c:	bd38      	pop	{r3, r4, r5, pc}

000d7f0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7f0e:	b538      	push	{r3, r4, r5, lr}
   d7f10:	4605      	mov	r5, r0
  return write(str);
   d7f12:	f7ff ffd7 	bl	d7ec4 <_ZN5Print5writeEPKc>
   d7f16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7f18:	4628      	mov	r0, r5
   d7f1a:	f7ff ffec 	bl	d7ef6 <_ZN5Print7printlnEv>
  return n;
}
   d7f1e:	4420      	add	r0, r4
   d7f20:	bd38      	pop	{r3, r4, r5, pc}

000d7f22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f22:	b530      	push	{r4, r5, lr}
   d7f24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f26:	2300      	movs	r3, #0
   d7f28:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f2c:	2a01      	cmp	r2, #1
   d7f2e:	bf98      	it	ls
   d7f30:	220a      	movls	r2, #10
   d7f32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7f34:	460d      	mov	r5, r1
   d7f36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7f3a:	fb01 5312 	mls	r3, r1, r2, r5
   d7f3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f42:	2b09      	cmp	r3, #9
   d7f44:	bf94      	ite	ls
   d7f46:	3330      	addls	r3, #48	; 0x30
   d7f48:	3337      	addhi	r3, #55	; 0x37
   d7f4a:	b2db      	uxtb	r3, r3
  } while(n);
   d7f4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7f52:	d9ef      	bls.n	d7f34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7f54:	4621      	mov	r1, r4
   d7f56:	f7ff ffb5 	bl	d7ec4 <_ZN5Print5writeEPKc>
}
   d7f5a:	b00b      	add	sp, #44	; 0x2c
   d7f5c:	bd30      	pop	{r4, r5, pc}

000d7f5e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f62:	b086      	sub	sp, #24
   d7f64:	af00      	add	r7, sp, #0
   d7f66:	4605      	mov	r5, r0
   d7f68:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f6a:	1d38      	adds	r0, r7, #4
   d7f6c:	2114      	movs	r1, #20
{
   d7f6e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7f70:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f72:	f7fd ff1b 	bl	d5dac <vsnprintf>

    if (n<bufsize)
   d7f76:	2813      	cmp	r0, #19
   d7f78:	d80e      	bhi.n	d7f98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7f7a:	1d39      	adds	r1, r7, #4
   d7f7c:	4628      	mov	r0, r5
   d7f7e:	f7ff ffa1 	bl	d7ec4 <_ZN5Print5writeEPKc>
   d7f82:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7f84:	b11e      	cbz	r6, d7f8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7f86:	4628      	mov	r0, r5
   d7f88:	f7ff ffb5 	bl	d7ef6 <_ZN5Print7printlnEv>
   d7f8c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7f8e:	4620      	mov	r0, r4
   d7f90:	3718      	adds	r7, #24
   d7f92:	46bd      	mov	sp, r7
   d7f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7f98:	f100 0308 	add.w	r3, r0, #8
   d7f9c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7fa0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7fa2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7fa6:	4622      	mov	r2, r4
   d7fa8:	1c41      	adds	r1, r0, #1
   d7faa:	683b      	ldr	r3, [r7, #0]
   d7fac:	4668      	mov	r0, sp
   d7fae:	f7fd fefd 	bl	d5dac <vsnprintf>
  return write(str);
   d7fb2:	4669      	mov	r1, sp
   d7fb4:	4628      	mov	r0, r5
   d7fb6:	f7ff ff85 	bl	d7ec4 <_ZN5Print5writeEPKc>
   d7fba:	4604      	mov	r4, r0
   d7fbc:	46c5      	mov	sp, r8
   d7fbe:	e7e1      	b.n	d7f84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7fc0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7fc0:	4b01      	ldr	r3, [pc, #4]	; (d7fc8 <_GLOBAL__sub_I_RGB+0x8>)
   d7fc2:	2200      	movs	r2, #0
   d7fc4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7fc6:	4770      	bx	lr
   d7fc8:	2003e5c0 	.word	0x2003e5c0

000d7fcc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7fcc:	2100      	movs	r1, #0
   d7fce:	f7fd bd5f 	b.w	d5a90 <hal_spi_acquire>

000d7fd2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7fd2:	2100      	movs	r1, #0
   d7fd4:	f7fd bd64 	b.w	d5aa0 <hal_spi_release>

000d7fd8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7fd8:	b510      	push	{r4, lr}
   d7fda:	4604      	mov	r4, r0
   d7fdc:	4608      	mov	r0, r1
{
    _spi = spi;
   d7fde:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7fe0:	f7fd fd36 	bl	d5a50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7fe4:	2300      	movs	r3, #0
   d7fe6:	6063      	str	r3, [r4, #4]
}
   d7fe8:	4620      	mov	r0, r4
   d7fea:	bd10      	pop	{r4, pc}

000d7fec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7fec:	b510      	push	{r4, lr}
   d7fee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7ff0:	7800      	ldrb	r0, [r0, #0]
   d7ff2:	f7ff ffeb 	bl	d7fcc <_ZN8SPIClass4lockEv.isra.0>
   d7ff6:	b948      	cbnz	r0, d800c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7ff8:	7820      	ldrb	r0, [r4, #0]
   d7ffa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7ffe:	f7fd fd17 	bl	d5a30 <hal_spi_begin>
        unlock();
   d8002:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8008:	f7ff bfe3 	b.w	d7fd2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d800c:	bd10      	pop	{r4, pc}

000d800e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d800e:	7800      	ldrb	r0, [r0, #0]
   d8010:	f7ff bfdf 	b.w	d7fd2 <_ZN8SPIClass6unlockEv.isra.0>

000d8014 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8014:	0840      	lsrs	r0, r0, #1
{
   d8016:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d8018:	6018      	str	r0, [r3, #0]
   d801a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d801c:	6818      	ldr	r0, [r3, #0]
   d801e:	4288      	cmp	r0, r1
   d8020:	b2e5      	uxtb	r5, r4
   d8022:	d906      	bls.n	d8032 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8024:	3401      	adds	r4, #1
   d8026:	2c08      	cmp	r4, #8
   d8028:	d002      	beq.n	d8030 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d802a:	0840      	lsrs	r0, r0, #1
   d802c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d802e:	e7f5      	b.n	d801c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8030:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8034:	5d5b      	ldrb	r3, [r3, r5]
   d8036:	7013      	strb	r3, [r2, #0]
}
   d8038:	bd30      	pop	{r4, r5, pc}
   d803a:	bf00      	nop
   d803c:	000d9808 	.word	0x000d9808

000d8040 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8044:	4606      	mov	r6, r0
   d8046:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8048:	7800      	ldrb	r0, [r0, #0]
{
   d804a:	460c      	mov	r4, r1
    CHECK(lock());
   d804c:	f7ff ffbe 	bl	d7fcc <_ZN8SPIClass4lockEv.isra.0>
   d8050:	2800      	cmp	r0, #0
   d8052:	db1b      	blt.n	d808c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8054:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8056:	2214      	movs	r2, #20
   d8058:	2100      	movs	r1, #0
   d805a:	a809      	add	r0, sp, #36	; 0x24
   d805c:	f001 f85c 	bl	d9118 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8060:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8062:	2200      	movs	r2, #0
   d8064:	a909      	add	r1, sp, #36	; 0x24
   d8066:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8068:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d806c:	f7fd fd00 	bl	d5a70 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8070:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8074:	b113      	cbz	r3, d807c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8076:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d807a:	b155      	cbz	r5, d8092 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d807c:	2700      	movs	r7, #0
   d807e:	46b9      	mov	r9, r7
   d8080:	46b8      	mov	r8, r7
   d8082:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8084:	7923      	ldrb	r3, [r4, #4]
   d8086:	b15d      	cbz	r5, d80a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8088:	b1c3      	cbz	r3, d80bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d808a:	2000      	movs	r0, #0
}
   d808c:	b00f      	add	sp, #60	; 0x3c
   d808e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d8092:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8096:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d809a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d809e:	e7f1      	b.n	d8084 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d80a0:	2b00      	cmp	r3, #0
   d80a2:	d135      	bne.n	d8110 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d80a4:	68a3      	ldr	r3, [r4, #8]
   d80a6:	4543      	cmp	r3, r8
   d80a8:	d108      	bne.n	d80bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d80aa:	f88d 9020 	strb.w	r9, [sp, #32]
   d80ae:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d80b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d80b6:	89a3      	ldrh	r3, [r4, #12]
   d80b8:	429a      	cmp	r2, r3
   d80ba:	d0e6      	beq.n	d808a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d80bc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d80be:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d80c0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d80c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d80c6:	ab04      	add	r3, sp, #16
   d80c8:	f10d 020f 	add.w	r2, sp, #15
   d80cc:	f7ff ffa2 	bl	d8014 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d80d0:	7921      	ldrb	r1, [r4, #4]
   d80d2:	b985      	cbnz	r5, d80f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d80d4:	b989      	cbnz	r1, d80fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d80d6:	68a3      	ldr	r3, [r4, #8]
   d80d8:	4543      	cmp	r3, r8
   d80da:	d30e      	bcc.n	d80fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d80dc:	f88d 9020 	strb.w	r9, [sp, #32]
   d80e0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d80e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d80e8:	89a3      	ldrh	r3, [r4, #12]
   d80ea:	429a      	cmp	r2, r3
   d80ec:	d105      	bne.n	d80fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d80ee:	9b04      	ldr	r3, [sp, #16]
   d80f0:	4543      	cmp	r3, r8
   d80f2:	d102      	bne.n	d80fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d80f4:	e7c9      	b.n	d808a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d80f6:	2900      	cmp	r1, #0
   d80f8:	d1f9      	bne.n	d80ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d80fa:	2300      	movs	r3, #0
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	7b63      	ldrb	r3, [r4, #13]
   d8100:	9300      	str	r3, [sp, #0]
   d8102:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8106:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8108:	7830      	ldrb	r0, [r6, #0]
   d810a:	f7fd fcb9 	bl	d5a80 <hal_spi_set_settings>
   d810e:	e7bc      	b.n	d808a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d8110:	e9cd 5500 	strd	r5, r5, [sp]
   d8114:	462b      	mov	r3, r5
   d8116:	462a      	mov	r2, r5
   d8118:	2101      	movs	r1, #1
   d811a:	e7f5      	b.n	d8108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d811c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d811c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d811e:	7800      	ldrb	r0, [r0, #0]
   d8120:	f7fd fc8e 	bl	d5a40 <hal_spi_transfer>
}
   d8124:	b2c0      	uxtb	r0, r0
   d8126:	bd08      	pop	{r3, pc}

000d8128 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8128:	b510      	push	{r4, lr}
   d812a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d812c:	f7fd fbd8 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8130:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8132:	6823      	ldr	r3, [r4, #0]
   d8134:	4620      	mov	r0, r4
   d8136:	695b      	ldr	r3, [r3, #20]
   d8138:	4798      	blx	r3
    if (c >= 0) return c;
   d813a:	2800      	cmp	r0, #0
   d813c:	da08      	bge.n	d8150 <_ZN6Stream9timedReadEv+0x28>
   d813e:	f7fd fbcf 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d8142:	68e3      	ldr	r3, [r4, #12]
   d8144:	1ac0      	subs	r0, r0, r3
   d8146:	68a3      	ldr	r3, [r4, #8]
   d8148:	4298      	cmp	r0, r3
   d814a:	d3f2      	bcc.n	d8132 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d814c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8150:	bd10      	pop	{r4, pc}
	...

000d8154 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8154:	b570      	push	{r4, r5, r6, lr}
   d8156:	460d      	mov	r5, r1
  String ret;
   d8158:	4909      	ldr	r1, [pc, #36]	; (d8180 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d815a:	4604      	mov	r4, r0
   d815c:	4616      	mov	r6, r2
  String ret;
   d815e:	f000 f85c 	bl	d821a <_ZN6StringC1EPKc>
  int c = timedRead();
   d8162:	4628      	mov	r0, r5
   d8164:	f7ff ffe0 	bl	d8128 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d8168:	2800      	cmp	r0, #0
   d816a:	db06      	blt.n	d817a <_ZN6Stream15readStringUntilEc+0x26>
   d816c:	4286      	cmp	r6, r0
   d816e:	d004      	beq.n	d817a <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d8170:	b2c1      	uxtb	r1, r0
   d8172:	4620      	mov	r0, r4
   d8174:	f000 f8be 	bl	d82f4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d8178:	e7f3      	b.n	d8162 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d817a:	4620      	mov	r0, r4
   d817c:	bd70      	pop	{r4, r5, r6, pc}
   d817e:	bf00      	nop
   d8180:	000d973b 	.word	0x000d973b

000d8184 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8184:	b510      	push	{r4, lr}
   d8186:	4604      	mov	r4, r0
{
	free(buffer);
   d8188:	6800      	ldr	r0, [r0, #0]
   d818a:	f7fd fdff 	bl	d5d8c <free>
}
   d818e:	4620      	mov	r0, r4
   d8190:	bd10      	pop	{r4, pc}

000d8192 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8192:	b510      	push	{r4, lr}
   d8194:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8196:	6800      	ldr	r0, [r0, #0]
   d8198:	b108      	cbz	r0, d819e <_ZN6String10invalidateEv+0xc>
   d819a:	f7fd fdf7 	bl	d5d8c <free>
	buffer = NULL;
   d819e:	2300      	movs	r3, #0
	capacity = len = 0;
   d81a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d81a4:	6023      	str	r3, [r4, #0]
}
   d81a6:	bd10      	pop	{r4, pc}

000d81a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d81a8:	b538      	push	{r3, r4, r5, lr}
   d81aa:	4604      	mov	r4, r0
   d81ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d81ae:	6800      	ldr	r0, [r0, #0]
   d81b0:	3101      	adds	r1, #1
   d81b2:	f7fd fdf3 	bl	d5d9c <realloc>
	if (newbuffer) {
   d81b6:	b110      	cbz	r0, d81be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d81b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d81bc:	2001      	movs	r0, #1
	}
	return 0;
}
   d81be:	bd38      	pop	{r3, r4, r5, pc}

000d81c0 <_ZN6String7reserveEj>:
{
   d81c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d81c2:	6803      	ldr	r3, [r0, #0]
{
   d81c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d81c6:	b123      	cbz	r3, d81d2 <_ZN6String7reserveEj+0x12>
   d81c8:	6843      	ldr	r3, [r0, #4]
   d81ca:	428b      	cmp	r3, r1
   d81cc:	d301      	bcc.n	d81d2 <_ZN6String7reserveEj+0x12>
   d81ce:	2001      	movs	r0, #1
}
   d81d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d81d2:	4620      	mov	r0, r4
   d81d4:	f7ff ffe8 	bl	d81a8 <_ZN6String12changeBufferEj>
   d81d8:	2800      	cmp	r0, #0
   d81da:	d0f9      	beq.n	d81d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d81dc:	68a3      	ldr	r3, [r4, #8]
   d81de:	2b00      	cmp	r3, #0
   d81e0:	d1f5      	bne.n	d81ce <_ZN6String7reserveEj+0xe>
   d81e2:	6822      	ldr	r2, [r4, #0]
   d81e4:	7013      	strb	r3, [r2, #0]
   d81e6:	e7f2      	b.n	d81ce <_ZN6String7reserveEj+0xe>

000d81e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d81e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d81ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d81ec:	4611      	mov	r1, r2
   d81ee:	9201      	str	r2, [sp, #4]
{
   d81f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d81f2:	f7ff ffe5 	bl	d81c0 <_ZN6String7reserveEj>
   d81f6:	9a01      	ldr	r2, [sp, #4]
   d81f8:	b928      	cbnz	r0, d8206 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d81fa:	4620      	mov	r0, r4
   d81fc:	f7ff ffc9 	bl	d8192 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8200:	4620      	mov	r0, r4
   d8202:	b003      	add	sp, #12
   d8204:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8206:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8208:	4629      	mov	r1, r5
   d820a:	6820      	ldr	r0, [r4, #0]
   d820c:	f000 ff5c 	bl	d90c8 <memcpy>
	buffer[len] = 0;
   d8210:	6822      	ldr	r2, [r4, #0]
   d8212:	68a3      	ldr	r3, [r4, #8]
   d8214:	2100      	movs	r1, #0
   d8216:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8218:	e7f2      	b.n	d8200 <_ZN6String4copyEPKcj+0x18>

000d821a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d821a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d821c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d821e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8222:	4604      	mov	r4, r0
	len = 0;
   d8224:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8226:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8228:	b141      	cbz	r1, d823c <_ZN6StringC1EPKc+0x22>
   d822a:	4608      	mov	r0, r1
   d822c:	9101      	str	r1, [sp, #4]
   d822e:	f000 ffe6 	bl	d91fe <strlen>
   d8232:	9901      	ldr	r1, [sp, #4]
   d8234:	4602      	mov	r2, r0
   d8236:	4620      	mov	r0, r4
   d8238:	f7ff ffd6 	bl	d81e8 <_ZN6String4copyEPKcj>
}
   d823c:	4620      	mov	r0, r4
   d823e:	b002      	add	sp, #8
   d8240:	bd10      	pop	{r4, pc}

000d8242 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8242:	b538      	push	{r3, r4, r5, lr}
   d8244:	4605      	mov	r5, r0
	if (buffer) {
   d8246:	6800      	ldr	r0, [r0, #0]
{
   d8248:	460c      	mov	r4, r1
	if (buffer) {
   d824a:	b168      	cbz	r0, d8268 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d824c:	686a      	ldr	r2, [r5, #4]
   d824e:	688b      	ldr	r3, [r1, #8]
   d8250:	429a      	cmp	r2, r3
   d8252:	d307      	bcc.n	d8264 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8254:	6809      	ldr	r1, [r1, #0]
   d8256:	f000 ffac 	bl	d91b2 <strcpy>
			len = rhs.len;
   d825a:	68a3      	ldr	r3, [r4, #8]
   d825c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d825e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8260:	60a3      	str	r3, [r4, #8]
}
   d8262:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8264:	f7fd fd92 	bl	d5d8c <free>
	buffer = rhs.buffer;
   d8268:	6823      	ldr	r3, [r4, #0]
   d826a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d826c:	6863      	ldr	r3, [r4, #4]
   d826e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8270:	68a3      	ldr	r3, [r4, #8]
   d8272:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8274:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8276:	e9c4 3300 	strd	r3, r3, [r4]
   d827a:	e7f1      	b.n	d8260 <_ZN6String4moveERS_+0x1e>

000d827c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d827c:	b510      	push	{r4, lr}
	buffer = NULL;
   d827e:	2300      	movs	r3, #0
	capacity = 0;
   d8280:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d8284:	4604      	mov	r4, r0
	len = 0;
   d8286:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8288:	7303      	strb	r3, [r0, #12]
	move(rval);
   d828a:	f7ff ffda 	bl	d8242 <_ZN6String4moveERS_>
}
   d828e:	4620      	mov	r0, r4
   d8290:	bd10      	pop	{r4, pc}

000d8292 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8292:	4288      	cmp	r0, r1
{
   d8294:	b510      	push	{r4, lr}
   d8296:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8298:	d005      	beq.n	d82a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d829a:	680b      	ldr	r3, [r1, #0]
   d829c:	b12b      	cbz	r3, d82aa <_ZN6StringaSERKS_+0x18>
   d829e:	688a      	ldr	r2, [r1, #8]
   d82a0:	4619      	mov	r1, r3
   d82a2:	f7ff ffa1 	bl	d81e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d82a6:	4620      	mov	r0, r4
   d82a8:	bd10      	pop	{r4, pc}
	else invalidate();
   d82aa:	f7ff ff72 	bl	d8192 <_ZN6String10invalidateEv>
   d82ae:	e7fa      	b.n	d82a6 <_ZN6StringaSERKS_+0x14>

000d82b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d82b0:	b510      	push	{r4, lr}
	buffer = NULL;
   d82b2:	2300      	movs	r3, #0
String::String(const String &value)
   d82b4:	4604      	mov	r4, r0
	capacity = 0;
   d82b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d82ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d82bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d82be:	f7ff ffe8 	bl	d8292 <_ZN6StringaSERKS_>
}
   d82c2:	4620      	mov	r0, r4
   d82c4:	bd10      	pop	{r4, pc}

000d82c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d82c6:	b570      	push	{r4, r5, r6, lr}
   d82c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d82ca:	460e      	mov	r6, r1
   d82cc:	b909      	cbnz	r1, d82d2 <_ZN6String6concatEPKcj+0xc>
   d82ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d82d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d82d2:	b16a      	cbz	r2, d82f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d82d4:	6884      	ldr	r4, [r0, #8]
   d82d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d82d8:	4621      	mov	r1, r4
   d82da:	f7ff ff71 	bl	d81c0 <_ZN6String7reserveEj>
   d82de:	2800      	cmp	r0, #0
   d82e0:	d0f5      	beq.n	d82ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d82e2:	6828      	ldr	r0, [r5, #0]
   d82e4:	68ab      	ldr	r3, [r5, #8]
   d82e6:	4631      	mov	r1, r6
   d82e8:	4418      	add	r0, r3
   d82ea:	f000 ff62 	bl	d91b2 <strcpy>
	len = newlen;
   d82ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d82f0:	2001      	movs	r0, #1
   d82f2:	e7ed      	b.n	d82d0 <_ZN6String6concatEPKcj+0xa>

000d82f4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d82f4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d82f6:	2300      	movs	r3, #0
	buf[0] = c;
   d82f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d82fc:	2201      	movs	r2, #1
   d82fe:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d8300:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8304:	f7ff ffdf 	bl	d82c6 <_ZN6String6concatEPKcj>
}
   d8308:	b003      	add	sp, #12
   d830a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8310 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8310:	4b05      	ldr	r3, [pc, #20]	; (d8328 <_GLOBAL__sub_I_System+0x18>)
   d8312:	2202      	movs	r2, #2
   d8314:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8316:	4b05      	ldr	r3, [pc, #20]	; (d832c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8318:	4a05      	ldr	r2, [pc, #20]	; (d8330 <_GLOBAL__sub_I_System+0x20>)
   d831a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d831c:	2000      	movs	r0, #0
   d831e:	6018      	str	r0, [r3, #0]
   d8320:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8322:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8324:	f7fd bc76 	b.w	d5c14 <set_system_mode>
   d8328:	2003e5dc 	.word	0x2003e5dc
   d832c:	2003e5d0 	.word	0x2003e5d0
   d8330:	ffff0000 	.word	0xffff0000

000d8334 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8334:	4b02      	ldr	r3, [pc, #8]	; (d8340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8336:	681a      	ldr	r2, [r3, #0]
   d8338:	4b02      	ldr	r3, [pc, #8]	; (d8344 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d833a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d833c:	4770      	bx	lr
   d833e:	bf00      	nop
   d8340:	2003e338 	.word	0x2003e338
   d8344:	2003e5e0 	.word	0x2003e5e0

000d8348 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8348:	4770      	bx	lr

000d834a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d834a:	7441      	strb	r1, [r0, #17]
}
   d834c:	4770      	bx	lr

000d834e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d834e:	4770      	bx	lr

000d8350 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8350:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8352:	7c00      	ldrb	r0, [r0, #16]
   d8354:	f7fd fbec 	bl	d5b30 <hal_usart_available_data_for_write>
}
   d8358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d835c:	bd08      	pop	{r3, pc}

000d835e <_ZN11USARTSerial9availableEv>:
{
   d835e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8360:	7c00      	ldrb	r0, [r0, #16]
   d8362:	f7fd fbbd 	bl	d5ae0 <hal_usart_available>
}
   d8366:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d836a:	bd08      	pop	{r3, pc}

000d836c <_ZN11USARTSerial4peekEv>:
{
   d836c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d836e:	7c00      	ldrb	r0, [r0, #16]
   d8370:	f7fd fbc6 	bl	d5b00 <hal_usart_peek>
}
   d8374:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8378:	bd08      	pop	{r3, pc}

000d837a <_ZN11USARTSerial4readEv>:
{
   d837a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d837c:	7c00      	ldrb	r0, [r0, #16]
   d837e:	f7fd fbb7 	bl	d5af0 <hal_usart_read>
}
   d8382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8386:	bd08      	pop	{r3, pc}

000d8388 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8388:	7c00      	ldrb	r0, [r0, #16]
   d838a:	f7fd bbc1 	b.w	d5b10 <hal_usart_flush>

000d838e <_ZN11USARTSerial5writeEh>:
{
   d838e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8390:	7c45      	ldrb	r5, [r0, #17]
{
   d8392:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8394:	b12d      	cbz	r5, d83a2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8396:	7c20      	ldrb	r0, [r4, #16]
}
   d8398:	b003      	add	sp, #12
   d839a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d839e:	f7fd bb97 	b.w	d5ad0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d83a2:	7c00      	ldrb	r0, [r0, #16]
   d83a4:	9101      	str	r1, [sp, #4]
   d83a6:	f7fd fbc3 	bl	d5b30 <hal_usart_available_data_for_write>
   d83aa:	2800      	cmp	r0, #0
   d83ac:	9901      	ldr	r1, [sp, #4]
   d83ae:	dcf2      	bgt.n	d8396 <_ZN11USARTSerial5writeEh+0x8>
}
   d83b0:	4628      	mov	r0, r5
   d83b2:	b003      	add	sp, #12
   d83b4:	bd30      	pop	{r4, r5, pc}

000d83b6 <_ZN11USARTSerialD0Ev>:
   d83b6:	b510      	push	{r4, lr}
   d83b8:	2114      	movs	r1, #20
   d83ba:	4604      	mov	r4, r0
   d83bc:	f000 fa7a 	bl	d88b4 <_ZdlPvj>
   d83c0:	4620      	mov	r0, r4
   d83c2:	bd10      	pop	{r4, pc}

000d83c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d83c4:	b510      	push	{r4, lr}
   d83c6:	f04f 0c00 	mov.w	ip, #0
   d83ca:	4604      	mov	r4, r0
   d83cc:	4608      	mov	r0, r1
   d83ce:	4611      	mov	r1, r2
   d83d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d83d4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d83d8:	4a04      	ldr	r2, [pc, #16]	; (d83ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d83da:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d83dc:	2201      	movs	r2, #1
  _serial = serial;
   d83de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d83e0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d83e2:	461a      	mov	r2, r3
   d83e4:	f7fd fb64 	bl	d5ab0 <hal_usart_init>
}
   d83e8:	4620      	mov	r0, r4
   d83ea:	bd10      	pop	{r4, pc}
   d83ec:	000d9834 	.word	0x000d9834

000d83f0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d83f0:	7c00      	ldrb	r0, [r0, #16]
   d83f2:	2300      	movs	r3, #0
   d83f4:	f7fd bba4 	b.w	d5b40 <hal_usart_begin_config>

000d83f8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d83f8:	2200      	movs	r2, #0
   d83fa:	f7ff bff9 	b.w	d83f0 <_ZN11USARTSerial5beginEmm>

000d83fe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d83fe:	7c00      	ldrb	r0, [r0, #16]
   d8400:	f7fd bb5e 	b.w	d5ac0 <hal_usart_end>

000d8404 <_Z22__fetch_global_Serial1v>:
{
   d8404:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8406:	4c0d      	ldr	r4, [pc, #52]	; (d843c <_Z22__fetch_global_Serial1v+0x38>)
   d8408:	7821      	ldrb	r1, [r4, #0]
   d840a:	f3bf 8f5b 	dmb	ish
   d840e:	f011 0101 	ands.w	r1, r1, #1
   d8412:	d110      	bne.n	d8436 <_Z22__fetch_global_Serial1v+0x32>
   d8414:	4620      	mov	r0, r4
   d8416:	9101      	str	r1, [sp, #4]
   d8418:	f7fb fe4e 	bl	d40b8 <__cxa_guard_acquire>
   d841c:	9901      	ldr	r1, [sp, #4]
   d841e:	b150      	cbz	r0, d8436 <_Z22__fetch_global_Serial1v+0x32>
   d8420:	4b07      	ldr	r3, [pc, #28]	; (d8440 <_Z22__fetch_global_Serial1v+0x3c>)
   d8422:	4a08      	ldr	r2, [pc, #32]	; (d8444 <_Z22__fetch_global_Serial1v+0x40>)
   d8424:	4808      	ldr	r0, [pc, #32]	; (d8448 <_Z22__fetch_global_Serial1v+0x44>)
   d8426:	f7ff ffcd 	bl	d83c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d842a:	4620      	mov	r0, r4
   d842c:	f7fb fe49 	bl	d40c2 <__cxa_guard_release>
   d8430:	4806      	ldr	r0, [pc, #24]	; (d844c <_Z22__fetch_global_Serial1v+0x48>)
   d8432:	f000 fe3f 	bl	d90b4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8436:	4804      	ldr	r0, [pc, #16]	; (d8448 <_Z22__fetch_global_Serial1v+0x44>)
   d8438:	b002      	add	sp, #8
   d843a:	bd10      	pop	{r4, pc}
   d843c:	2003e5e4 	.word	0x2003e5e4
   d8440:	2003e66c 	.word	0x2003e66c
   d8444:	2003e5e8 	.word	0x2003e5e8
   d8448:	2003e6f0 	.word	0x2003e6f0
   d844c:	000d834f 	.word	0x000d834f

000d8450 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8450:	7441      	strb	r1, [r0, #17]
}
   d8452:	4770      	bx	lr

000d8454 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8454:	4770      	bx	lr

000d8456 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8456:	4770      	bx	lr

000d8458 <_ZN9USBSerial4readEv>:
{
   d8458:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d845a:	2100      	movs	r1, #0
   d845c:	7c00      	ldrb	r0, [r0, #16]
   d845e:	f7fd fb9f 	bl	d5ba0 <HAL_USB_USART_Receive_Data>
}
   d8462:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8466:	bd08      	pop	{r3, pc}

000d8468 <_ZN9USBSerial4peekEv>:
{
   d8468:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d846a:	2101      	movs	r1, #1
   d846c:	7c00      	ldrb	r0, [r0, #16]
   d846e:	f7fd fb97 	bl	d5ba0 <HAL_USB_USART_Receive_Data>
}
   d8472:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8476:	bd08      	pop	{r3, pc}

000d8478 <_ZN9USBSerial17availableForWriteEv>:
{
   d8478:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d847a:	7c00      	ldrb	r0, [r0, #16]
   d847c:	f7fd fb88 	bl	d5b90 <HAL_USB_USART_Available_Data_For_Write>
}
   d8480:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8484:	bd08      	pop	{r3, pc}

000d8486 <_ZN9USBSerial9availableEv>:
{
   d8486:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8488:	7c00      	ldrb	r0, [r0, #16]
   d848a:	f7fd fb79 	bl	d5b80 <HAL_USB_USART_Available_Data>
}
   d848e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8492:	bd08      	pop	{r3, pc}

000d8494 <_ZN9USBSerial5writeEh>:
{
   d8494:	b513      	push	{r0, r1, r4, lr}
   d8496:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8498:	7c00      	ldrb	r0, [r0, #16]
{
   d849a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d849c:	f7fd fb78 	bl	d5b90 <HAL_USB_USART_Available_Data_For_Write>
   d84a0:	2800      	cmp	r0, #0
   d84a2:	9901      	ldr	r1, [sp, #4]
   d84a4:	dc01      	bgt.n	d84aa <_ZN9USBSerial5writeEh+0x16>
   d84a6:	7c60      	ldrb	r0, [r4, #17]
   d84a8:	b120      	cbz	r0, d84b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d84aa:	7c20      	ldrb	r0, [r4, #16]
   d84ac:	f7fd fb80 	bl	d5bb0 <HAL_USB_USART_Send_Data>
   d84b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d84b4:	b002      	add	sp, #8
   d84b6:	bd10      	pop	{r4, pc}

000d84b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d84b8:	7c00      	ldrb	r0, [r0, #16]
   d84ba:	f7fd bb81 	b.w	d5bc0 <HAL_USB_USART_Flush_Data>

000d84be <_ZN9USBSerialD0Ev>:
   d84be:	b510      	push	{r4, lr}
   d84c0:	2114      	movs	r1, #20
   d84c2:	4604      	mov	r4, r0
   d84c4:	f000 f9f6 	bl	d88b4 <_ZdlPvj>
   d84c8:	4620      	mov	r0, r4
   d84ca:	bd10      	pop	{r4, pc}

000d84cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d84cc:	b510      	push	{r4, lr}
   d84ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84d2:	4604      	mov	r4, r0
   d84d4:	4608      	mov	r0, r1
   d84d6:	2100      	movs	r1, #0
   d84d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d84dc:	4b04      	ldr	r3, [pc, #16]	; (d84f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d84de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d84e0:	2301      	movs	r3, #1
  _serial = serial;
   d84e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d84e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d84e6:	4611      	mov	r1, r2
   d84e8:	f7fd fb32 	bl	d5b50 <HAL_USB_USART_Init>
}
   d84ec:	4620      	mov	r0, r4
   d84ee:	bd10      	pop	{r4, pc}
   d84f0:	000d9864 	.word	0x000d9864

000d84f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d84f4:	7c00      	ldrb	r0, [r0, #16]
   d84f6:	2200      	movs	r2, #0
   d84f8:	f7fd bb32 	b.w	d5b60 <HAL_USB_USART_Begin>

000d84fc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d84fc:	7c00      	ldrb	r0, [r0, #16]
   d84fe:	f7fd bb37 	b.w	d5b70 <HAL_USB_USART_End>

000d8502 <_Z19acquireSerialBufferv>:
{
   d8502:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8504:	2214      	movs	r2, #20
{
   d8506:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8508:	2100      	movs	r1, #0
   d850a:	f000 fe05 	bl	d9118 <memset>
}
   d850e:	4620      	mov	r0, r4
   d8510:	bd10      	pop	{r4, pc}
	...

000d8514 <_Z16_fetch_usbserialv>:
{
   d8514:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8516:	4c0f      	ldr	r4, [pc, #60]	; (d8554 <_Z16_fetch_usbserialv+0x40>)
{
   d8518:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d851a:	a803      	add	r0, sp, #12
   d851c:	f7ff fff1 	bl	d8502 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8520:	7821      	ldrb	r1, [r4, #0]
   d8522:	f3bf 8f5b 	dmb	ish
   d8526:	f011 0101 	ands.w	r1, r1, #1
   d852a:	d10f      	bne.n	d854c <_Z16_fetch_usbserialv+0x38>
   d852c:	4620      	mov	r0, r4
   d852e:	9101      	str	r1, [sp, #4]
   d8530:	f7fb fdc2 	bl	d40b8 <__cxa_guard_acquire>
   d8534:	9901      	ldr	r1, [sp, #4]
   d8536:	b148      	cbz	r0, d854c <_Z16_fetch_usbserialv+0x38>
   d8538:	aa03      	add	r2, sp, #12
   d853a:	4807      	ldr	r0, [pc, #28]	; (d8558 <_Z16_fetch_usbserialv+0x44>)
   d853c:	f7ff ffc6 	bl	d84cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8540:	4620      	mov	r0, r4
   d8542:	f7fb fdbe 	bl	d40c2 <__cxa_guard_release>
   d8546:	4805      	ldr	r0, [pc, #20]	; (d855c <_Z16_fetch_usbserialv+0x48>)
   d8548:	f000 fdb4 	bl	d90b4 <atexit>
	return _usbserial;
}
   d854c:	4802      	ldr	r0, [pc, #8]	; (d8558 <_Z16_fetch_usbserialv+0x44>)
   d854e:	b008      	add	sp, #32
   d8550:	bd10      	pop	{r4, pc}
   d8552:	bf00      	nop
   d8554:	2003e704 	.word	0x2003e704
   d8558:	2003e708 	.word	0x2003e708
   d855c:	000d8455 	.word	0x000d8455

000d8560 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8560:	4b01      	ldr	r3, [pc, #4]	; (d8568 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8562:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8564:	4770      	bx	lr
   d8566:	bf00      	nop
   d8568:	2003e33c 	.word	0x2003e33c

000d856c <serialEventRun>:
{
   d856c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d856e:	4b0b      	ldr	r3, [pc, #44]	; (d859c <serialEventRun+0x30>)
   d8570:	b143      	cbz	r3, d8584 <serialEventRun+0x18>
   d8572:	f7ff ffcf 	bl	d8514 <_Z16_fetch_usbserialv>
   d8576:	6803      	ldr	r3, [r0, #0]
   d8578:	691b      	ldr	r3, [r3, #16]
   d857a:	4798      	blx	r3
   d857c:	2800      	cmp	r0, #0
   d857e:	dd01      	ble.n	d8584 <serialEventRun+0x18>
        serialEvent();
   d8580:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8584:	4b06      	ldr	r3, [pc, #24]	; (d85a0 <serialEventRun+0x34>)
   d8586:	b143      	cbz	r3, d859a <serialEventRun+0x2e>
   d8588:	f7ff ff3c 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d858c:	6803      	ldr	r3, [r0, #0]
   d858e:	691b      	ldr	r3, [r3, #16]
   d8590:	4798      	blx	r3
   d8592:	2800      	cmp	r0, #0
   d8594:	dd01      	ble.n	d859a <serialEventRun+0x2e>
        serialEvent1();
   d8596:	f3af 8000 	nop.w
}
   d859a:	bd08      	pop	{r3, pc}
	...

000d85a4 <_post_loop>:
{
   d85a4:	b508      	push	{r3, lr}
	serialEventRun();
   d85a6:	f7ff ffe1 	bl	d856c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d85aa:	f7fd f999 	bl	d58e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d85ae:	4b01      	ldr	r3, [pc, #4]	; (d85b4 <_post_loop+0x10>)
   d85b0:	6018      	str	r0, [r3, #0]
}
   d85b2:	bd08      	pop	{r3, pc}
   d85b4:	2003e724 	.word	0x2003e724

000d85b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85b8:	4805      	ldr	r0, [pc, #20]	; (d85d0 <_Z33system_initialize_user_backup_ramv+0x18>)
   d85ba:	4a06      	ldr	r2, [pc, #24]	; (d85d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d85bc:	4906      	ldr	r1, [pc, #24]	; (d85d8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d85be:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85c0:	1a12      	subs	r2, r2, r0
   d85c2:	f000 fd81 	bl	d90c8 <memcpy>
    __backup_sram_signature = signature;
   d85c6:	4b05      	ldr	r3, [pc, #20]	; (d85dc <_Z33system_initialize_user_backup_ramv+0x24>)
   d85c8:	4a05      	ldr	r2, [pc, #20]	; (d85e0 <_Z33system_initialize_user_backup_ramv+0x28>)
   d85ca:	601a      	str	r2, [r3, #0]
}
   d85cc:	bd08      	pop	{r3, pc}
   d85ce:	bf00      	nop
   d85d0:	2003f400 	.word	0x2003f400
   d85d4:	2003f404 	.word	0x2003f404
   d85d8:	000d99c0 	.word	0x000d99c0
   d85dc:	2003f400 	.word	0x2003f400
   d85e0:	9a271c1e 	.word	0x9a271c1e

000d85e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d85e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85e6:	2300      	movs	r3, #0
   d85e8:	9300      	str	r3, [sp, #0]
   d85ea:	461a      	mov	r2, r3
   d85ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85f0:	f7fd fb3a 	bl	d5c68 <system_ctrl_set_result>
}
   d85f4:	b003      	add	sp, #12
   d85f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d85fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85fe:	8843      	ldrh	r3, [r0, #2]
   d8600:	2b0a      	cmp	r3, #10
   d8602:	d008      	beq.n	d8616 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8604:	2b50      	cmp	r3, #80	; 0x50
   d8606:	d10b      	bne.n	d8620 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8608:	4b09      	ldr	r3, [pc, #36]	; (d8630 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d860a:	681b      	ldr	r3, [r3, #0]
   d860c:	b14b      	cbz	r3, d8622 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d860e:	b003      	add	sp, #12
   d8610:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8614:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8616:	f7ff ffe5 	bl	d85e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d861a:	b003      	add	sp, #12
   d861c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8620:	2300      	movs	r3, #0
   d8622:	9300      	str	r3, [sp, #0]
   d8624:	461a      	mov	r2, r3
   d8626:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d862a:	f7fd fb1d 	bl	d5c68 <system_ctrl_set_result>
}
   d862e:	e7f4      	b.n	d861a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8630:	2003e720 	.word	0x2003e720

000d8634 <module_user_init_hook>:
{
   d8634:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8636:	4812      	ldr	r0, [pc, #72]	; (d8680 <module_user_init_hook+0x4c>)
   d8638:	2100      	movs	r1, #0
   d863a:	f7fd fbcf 	bl	d5ddc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d863e:	4b11      	ldr	r3, [pc, #68]	; (d8684 <module_user_init_hook+0x50>)
   d8640:	681a      	ldr	r2, [r3, #0]
   d8642:	4b11      	ldr	r3, [pc, #68]	; (d8688 <module_user_init_hook+0x54>)
   d8644:	429a      	cmp	r2, r3
   d8646:	4b11      	ldr	r3, [pc, #68]	; (d868c <module_user_init_hook+0x58>)
   d8648:	bf0c      	ite	eq
   d864a:	2201      	moveq	r2, #1
   d864c:	2200      	movne	r2, #0
   d864e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8650:	d001      	beq.n	d8656 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8652:	f7ff ffb1 	bl	d85b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8656:	f7fd f933 	bl	d58c0 <HAL_RNG_GetRandomNumber>
   d865a:	4604      	mov	r4, r0
    srand(seed);
   d865c:	f000 fd64 	bl	d9128 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8660:	4b0b      	ldr	r3, [pc, #44]	; (d8690 <module_user_init_hook+0x5c>)
   d8662:	b113      	cbz	r3, d866a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8664:	4620      	mov	r0, r4
   d8666:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d866a:	2100      	movs	r1, #0
   d866c:	4808      	ldr	r0, [pc, #32]	; (d8690 <module_user_init_hook+0x5c>)
   d866e:	f7fd fb1d 	bl	d5cac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8676:	4807      	ldr	r0, [pc, #28]	; (d8694 <module_user_init_hook+0x60>)
   d8678:	2100      	movs	r1, #0
   d867a:	f7fd baeb 	b.w	d5c54 <system_ctrl_set_app_request_handler>
   d867e:	bf00      	nop
   d8680:	000d8561 	.word	0x000d8561
   d8684:	2003f400 	.word	0x2003f400
   d8688:	9a271c1e 	.word	0x9a271c1e
   d868c:	2003e71c 	.word	0x2003e71c
   d8690:	00000000 	.word	0x00000000
   d8694:	000d85fd 	.word	0x000d85fd

000d8698 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8698:	b508      	push	{r3, lr}
   d869a:	4b02      	ldr	r3, [pc, #8]	; (d86a4 <spark_protocol_instance+0xc>)
   d869c:	681b      	ldr	r3, [r3, #0]
   d869e:	681b      	ldr	r3, [r3, #0]
   d86a0:	9301      	str	r3, [sp, #4]
   d86a2:	bd08      	pop	{r3, pc}
   d86a4:	0003025c 	.word	0x0003025c

000d86a8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d86a8:	b508      	push	{r3, lr}
   d86aa:	4b02      	ldr	r3, [pc, #8]	; (d86b4 <spark_protocol_set_product_id+0xc>)
   d86ac:	681b      	ldr	r3, [r3, #0]
   d86ae:	685b      	ldr	r3, [r3, #4]
   d86b0:	9301      	str	r3, [sp, #4]
   d86b2:	bd08      	pop	{r3, pc}
   d86b4:	0003025c 	.word	0x0003025c

000d86b8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d86b8:	b508      	push	{r3, lr}
   d86ba:	4b02      	ldr	r3, [pc, #8]	; (d86c4 <spark_protocol_set_product_firmware_version+0xc>)
   d86bc:	681b      	ldr	r3, [r3, #0]
   d86be:	689b      	ldr	r3, [r3, #8]
   d86c0:	9301      	str	r3, [sp, #4]
   d86c2:	bd08      	pop	{r3, pc}
   d86c4:	0003025c 	.word	0x0003025c

000d86c8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d86c8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d86ca:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d86cc:	d902      	bls.n	d86d4 <pinAvailable+0xc>
    return false;
   d86ce:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d86d0:	b002      	add	sp, #8
   d86d2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d86d4:	f1a0 030b 	sub.w	r3, r0, #11
   d86d8:	2b02      	cmp	r3, #2
   d86da:	d81a      	bhi.n	d8712 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d86dc:	4c17      	ldr	r4, [pc, #92]	; (d873c <pinAvailable+0x74>)
   d86de:	7821      	ldrb	r1, [r4, #0]
   d86e0:	f3bf 8f5b 	dmb	ish
   d86e4:	f011 0101 	ands.w	r1, r1, #1
   d86e8:	d10b      	bne.n	d8702 <pinAvailable+0x3a>
   d86ea:	4620      	mov	r0, r4
   d86ec:	9101      	str	r1, [sp, #4]
   d86ee:	f7fb fce3 	bl	d40b8 <__cxa_guard_acquire>
   d86f2:	9901      	ldr	r1, [sp, #4]
   d86f4:	b128      	cbz	r0, d8702 <pinAvailable+0x3a>
   d86f6:	4812      	ldr	r0, [pc, #72]	; (d8740 <pinAvailable+0x78>)
   d86f8:	f7ff fc6e 	bl	d7fd8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d86fc:	4620      	mov	r0, r4
   d86fe:	f7fb fce0 	bl	d40c2 <__cxa_guard_release>
   d8702:	4b0f      	ldr	r3, [pc, #60]	; (d8740 <pinAvailable+0x78>)
   d8704:	7818      	ldrb	r0, [r3, #0]
   d8706:	f7fd f9ab 	bl	d5a60 <hal_spi_is_enabled>
   d870a:	2800      	cmp	r0, #0
   d870c:	d1df      	bne.n	d86ce <pinAvailable+0x6>
  return true; // 'pin' is available
   d870e:	2001      	movs	r0, #1
   d8710:	e7de      	b.n	d86d0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8712:	2801      	cmp	r0, #1
   d8714:	d809      	bhi.n	d872a <pinAvailable+0x62>
   d8716:	f000 f885 	bl	d8824 <_Z19__fetch_global_Wirev>
   d871a:	2100      	movs	r1, #0
   d871c:	7c00      	ldrb	r0, [r0, #16]
   d871e:	f7fd f947 	bl	d59b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8722:	f080 0001 	eor.w	r0, r0, #1
   d8726:	b2c0      	uxtb	r0, r0
   d8728:	e7d2      	b.n	d86d0 <pinAvailable+0x8>
   d872a:	3809      	subs	r0, #9
   d872c:	2801      	cmp	r0, #1
   d872e:	d8ee      	bhi.n	d870e <pinAvailable+0x46>
   d8730:	f7ff fe68 	bl	d8404 <_Z22__fetch_global_Serial1v>
   d8734:	7c00      	ldrb	r0, [r0, #16]
   d8736:	f7fd f9f3 	bl	d5b20 <hal_usart_is_enabled>
   d873a:	e7f2      	b.n	d8722 <pinAvailable+0x5a>
   d873c:	2003e538 	.word	0x2003e538
   d8740:	2003e53c 	.word	0x2003e53c

000d8744 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8744:	2823      	cmp	r0, #35	; 0x23
{
   d8746:	b538      	push	{r3, r4, r5, lr}
   d8748:	4604      	mov	r4, r0
   d874a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d874c:	d80a      	bhi.n	d8764 <pinMode+0x20>
   d874e:	29ff      	cmp	r1, #255	; 0xff
   d8750:	d008      	beq.n	d8764 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8752:	f7ff ffb9 	bl	d86c8 <pinAvailable>
   d8756:	b128      	cbz	r0, d8764 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8758:	4629      	mov	r1, r5
   d875a:	4620      	mov	r0, r4
}
   d875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8760:	f7fd b8c6 	b.w	d58f0 <HAL_Pin_Mode>
}
   d8764:	bd38      	pop	{r3, r4, r5, pc}

000d8766 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8766:	b538      	push	{r3, r4, r5, lr}
   d8768:	4604      	mov	r4, r0
   d876a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d876c:	f7fd f8c8 	bl	d5900 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8770:	28ff      	cmp	r0, #255	; 0xff
   d8772:	d010      	beq.n	d8796 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8774:	2806      	cmp	r0, #6
   d8776:	d804      	bhi.n	d8782 <digitalWrite+0x1c>
   d8778:	234d      	movs	r3, #77	; 0x4d
   d877a:	fa23 f000 	lsr.w	r0, r3, r0
   d877e:	07c3      	lsls	r3, r0, #31
   d8780:	d409      	bmi.n	d8796 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8782:	4620      	mov	r0, r4
   d8784:	f7ff ffa0 	bl	d86c8 <pinAvailable>
   d8788:	b128      	cbz	r0, d8796 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d878a:	4629      	mov	r1, r5
   d878c:	4620      	mov	r0, r4
}
   d878e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8792:	f7fd b8bd 	b.w	d5910 <HAL_GPIO_Write>
}
   d8796:	bd38      	pop	{r3, r4, r5, pc}

000d8798 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8798:	b510      	push	{r4, lr}
   d879a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d879c:	f7fd f8b0 	bl	d5900 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d87a0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d87a2:	b2db      	uxtb	r3, r3
   d87a4:	2b01      	cmp	r3, #1
   d87a6:	d908      	bls.n	d87ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d87a8:	4620      	mov	r0, r4
   d87aa:	f7ff ff8d 	bl	d86c8 <pinAvailable>
   d87ae:	b120      	cbz	r0, d87ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d87b0:	4620      	mov	r0, r4
}
   d87b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d87b6:	f7fd b8b3 	b.w	d5920 <HAL_GPIO_Read>
}
   d87ba:	2000      	movs	r0, #0
   d87bc:	bd10      	pop	{r4, pc}

000d87be <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87be:	4770      	bx	lr

000d87c0 <__tcf_1>:
   d87c0:	4770      	bx	lr
	...

000d87c4 <_Z17acquireWireBufferv>:
{
   d87c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d87c6:	2300      	movs	r3, #0
   d87c8:	2520      	movs	r5, #32
   d87ca:	8043      	strh	r3, [r0, #2]
   d87cc:	2314      	movs	r3, #20
{
   d87ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d87d0:	8003      	strh	r3, [r0, #0]
   d87d2:	6085      	str	r5, [r0, #8]
   d87d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87d6:	4906      	ldr	r1, [pc, #24]	; (d87f0 <_Z17acquireWireBufferv+0x2c>)
   d87d8:	4628      	mov	r0, r5
   d87da:	f000 f86f 	bl	d88bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87de:	4904      	ldr	r1, [pc, #16]	; (d87f0 <_Z17acquireWireBufferv+0x2c>)
	};
   d87e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87e2:	4628      	mov	r0, r5
   d87e4:	f000 f86a 	bl	d88bc <_ZnajRKSt9nothrow_t>
	};
   d87e8:	60e0      	str	r0, [r4, #12]
}
   d87ea:	4620      	mov	r0, r4
   d87ec:	bd38      	pop	{r3, r4, r5, pc}
   d87ee:	bf00      	nop
   d87f0:	000d988c 	.word	0x000d988c

000d87f4 <_Z18acquireWire1Bufferv>:
   d87f4:	b538      	push	{r3, r4, r5, lr}
   d87f6:	2300      	movs	r3, #0
   d87f8:	2520      	movs	r5, #32
   d87fa:	8043      	strh	r3, [r0, #2]
   d87fc:	2314      	movs	r3, #20
   d87fe:	4604      	mov	r4, r0
   d8800:	8003      	strh	r3, [r0, #0]
   d8802:	6085      	str	r5, [r0, #8]
   d8804:	6105      	str	r5, [r0, #16]
   d8806:	4906      	ldr	r1, [pc, #24]	; (d8820 <_Z18acquireWire1Bufferv+0x2c>)
   d8808:	4628      	mov	r0, r5
   d880a:	f000 f857 	bl	d88bc <_ZnajRKSt9nothrow_t>
   d880e:	4904      	ldr	r1, [pc, #16]	; (d8820 <_Z18acquireWire1Bufferv+0x2c>)
   d8810:	6060      	str	r0, [r4, #4]
   d8812:	4628      	mov	r0, r5
   d8814:	f000 f852 	bl	d88bc <_ZnajRKSt9nothrow_t>
   d8818:	60e0      	str	r0, [r4, #12]
   d881a:	4620      	mov	r0, r4
   d881c:	bd38      	pop	{r3, r4, r5, pc}
   d881e:	bf00      	nop
   d8820:	000d988c 	.word	0x000d988c

000d8824 <_Z19__fetch_global_Wirev>:
{
   d8824:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8826:	4d0e      	ldr	r5, [pc, #56]	; (d8860 <_Z19__fetch_global_Wirev+0x3c>)
   d8828:	7829      	ldrb	r1, [r5, #0]
   d882a:	f3bf 8f5b 	dmb	ish
   d882e:	f011 0401 	ands.w	r4, r1, #1
{
   d8832:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8834:	d111      	bne.n	d885a <_Z19__fetch_global_Wirev+0x36>
   d8836:	4628      	mov	r0, r5
   d8838:	f7fb fc3e 	bl	d40b8 <__cxa_guard_acquire>
   d883c:	b168      	cbz	r0, d885a <_Z19__fetch_global_Wirev+0x36>
   d883e:	a801      	add	r0, sp, #4
   d8840:	f7ff ffc0 	bl	d87c4 <_Z17acquireWireBufferv>
   d8844:	aa01      	add	r2, sp, #4
   d8846:	4621      	mov	r1, r4
   d8848:	4806      	ldr	r0, [pc, #24]	; (d8864 <_Z19__fetch_global_Wirev+0x40>)
   d884a:	f7fd ffed 	bl	d6828 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d884e:	4628      	mov	r0, r5
   d8850:	f7fb fc37 	bl	d40c2 <__cxa_guard_release>
   d8854:	4804      	ldr	r0, [pc, #16]	; (d8868 <_Z19__fetch_global_Wirev+0x44>)
   d8856:	f000 fc2d 	bl	d90b4 <atexit>
	return wire;
}
   d885a:	4802      	ldr	r0, [pc, #8]	; (d8864 <_Z19__fetch_global_Wirev+0x40>)
   d885c:	b007      	add	sp, #28
   d885e:	bd30      	pop	{r4, r5, pc}
   d8860:	2003e728 	.word	0x2003e728
   d8864:	2003e730 	.word	0x2003e730
   d8868:	000d87bf 	.word	0x000d87bf

000d886c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d886c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d886e:	4c0e      	ldr	r4, [pc, #56]	; (d88a8 <_Z20__fetch_global_Wire1v+0x3c>)
   d8870:	7823      	ldrb	r3, [r4, #0]
   d8872:	f3bf 8f5b 	dmb	ish
   d8876:	07db      	lsls	r3, r3, #31
{
   d8878:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d887a:	d411      	bmi.n	d88a0 <_Z20__fetch_global_Wire1v+0x34>
   d887c:	4620      	mov	r0, r4
   d887e:	f7fb fc1b 	bl	d40b8 <__cxa_guard_acquire>
   d8882:	b168      	cbz	r0, d88a0 <_Z20__fetch_global_Wire1v+0x34>
   d8884:	a801      	add	r0, sp, #4
   d8886:	f7ff ffb5 	bl	d87f4 <_Z18acquireWire1Bufferv>
   d888a:	aa01      	add	r2, sp, #4
   d888c:	2101      	movs	r1, #1
   d888e:	4807      	ldr	r0, [pc, #28]	; (d88ac <_Z20__fetch_global_Wire1v+0x40>)
   d8890:	f7fd ffca 	bl	d6828 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8894:	4620      	mov	r0, r4
   d8896:	f7fb fc14 	bl	d40c2 <__cxa_guard_release>
   d889a:	4805      	ldr	r0, [pc, #20]	; (d88b0 <_Z20__fetch_global_Wire1v+0x44>)
   d889c:	f000 fc0a 	bl	d90b4 <atexit>
	return wire;
}
   d88a0:	4802      	ldr	r0, [pc, #8]	; (d88ac <_Z20__fetch_global_Wire1v+0x40>)
   d88a2:	b006      	add	sp, #24
   d88a4:	bd10      	pop	{r4, pc}
   d88a6:	bf00      	nop
   d88a8:	2003e72c 	.word	0x2003e72c
   d88ac:	2003e744 	.word	0x2003e744
   d88b0:	000d87c1 	.word	0x000d87c1

000d88b4 <_ZdlPvj>:
   d88b4:	f7fb bbf3 	b.w	d409e <_ZdlPv>

000d88b8 <_ZnwjRKSt9nothrow_t>:
   d88b8:	f7fb bbed 	b.w	d4096 <_Znwj>

000d88bc <_ZnajRKSt9nothrow_t>:
   d88bc:	f7fb bbed 	b.w	d409a <_Znaj>

000d88c0 <_ZSt25__throw_bad_function_callv>:
   d88c0:	b508      	push	{r3, lr}
   d88c2:	f7fd fa7b 	bl	d5dbc <abort>
	...

000d88c8 <__aeabi_drsub>:
   d88c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d88cc:	e002      	b.n	d88d4 <__adddf3>
   d88ce:	bf00      	nop

000d88d0 <__aeabi_dsub>:
   d88d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d88d4 <__adddf3>:
   d88d4:	b530      	push	{r4, r5, lr}
   d88d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d88da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d88de:	ea94 0f05 	teq	r4, r5
   d88e2:	bf08      	it	eq
   d88e4:	ea90 0f02 	teqeq	r0, r2
   d88e8:	bf1f      	itttt	ne
   d88ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d88ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d88f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d88f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88fa:	f000 80e2 	beq.w	d8ac2 <__adddf3+0x1ee>
   d88fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8902:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8906:	bfb8      	it	lt
   d8908:	426d      	neglt	r5, r5
   d890a:	dd0c      	ble.n	d8926 <__adddf3+0x52>
   d890c:	442c      	add	r4, r5
   d890e:	ea80 0202 	eor.w	r2, r0, r2
   d8912:	ea81 0303 	eor.w	r3, r1, r3
   d8916:	ea82 0000 	eor.w	r0, r2, r0
   d891a:	ea83 0101 	eor.w	r1, r3, r1
   d891e:	ea80 0202 	eor.w	r2, r0, r2
   d8922:	ea81 0303 	eor.w	r3, r1, r3
   d8926:	2d36      	cmp	r5, #54	; 0x36
   d8928:	bf88      	it	hi
   d892a:	bd30      	pophi	{r4, r5, pc}
   d892c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8930:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8934:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8938:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d893c:	d002      	beq.n	d8944 <__adddf3+0x70>
   d893e:	4240      	negs	r0, r0
   d8940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8944:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8948:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d894c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8950:	d002      	beq.n	d8958 <__adddf3+0x84>
   d8952:	4252      	negs	r2, r2
   d8954:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8958:	ea94 0f05 	teq	r4, r5
   d895c:	f000 80a7 	beq.w	d8aae <__adddf3+0x1da>
   d8960:	f1a4 0401 	sub.w	r4, r4, #1
   d8964:	f1d5 0e20 	rsbs	lr, r5, #32
   d8968:	db0d      	blt.n	d8986 <__adddf3+0xb2>
   d896a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d896e:	fa22 f205 	lsr.w	r2, r2, r5
   d8972:	1880      	adds	r0, r0, r2
   d8974:	f141 0100 	adc.w	r1, r1, #0
   d8978:	fa03 f20e 	lsl.w	r2, r3, lr
   d897c:	1880      	adds	r0, r0, r2
   d897e:	fa43 f305 	asr.w	r3, r3, r5
   d8982:	4159      	adcs	r1, r3
   d8984:	e00e      	b.n	d89a4 <__adddf3+0xd0>
   d8986:	f1a5 0520 	sub.w	r5, r5, #32
   d898a:	f10e 0e20 	add.w	lr, lr, #32
   d898e:	2a01      	cmp	r2, #1
   d8990:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8994:	bf28      	it	cs
   d8996:	f04c 0c02 	orrcs.w	ip, ip, #2
   d899a:	fa43 f305 	asr.w	r3, r3, r5
   d899e:	18c0      	adds	r0, r0, r3
   d89a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d89a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89a8:	d507      	bpl.n	d89ba <__adddf3+0xe6>
   d89aa:	f04f 0e00 	mov.w	lr, #0
   d89ae:	f1dc 0c00 	rsbs	ip, ip, #0
   d89b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d89b6:	eb6e 0101 	sbc.w	r1, lr, r1
   d89ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d89be:	d31b      	bcc.n	d89f8 <__adddf3+0x124>
   d89c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d89c4:	d30c      	bcc.n	d89e0 <__adddf3+0x10c>
   d89c6:	0849      	lsrs	r1, r1, #1
   d89c8:	ea5f 0030 	movs.w	r0, r0, rrx
   d89cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d89d0:	f104 0401 	add.w	r4, r4, #1
   d89d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d89d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d89dc:	f080 809a 	bcs.w	d8b14 <__adddf3+0x240>
   d89e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d89e4:	bf08      	it	eq
   d89e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d89ea:	f150 0000 	adcs.w	r0, r0, #0
   d89ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d89f2:	ea41 0105 	orr.w	r1, r1, r5
   d89f6:	bd30      	pop	{r4, r5, pc}
   d89f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d89fc:	4140      	adcs	r0, r0
   d89fe:	eb41 0101 	adc.w	r1, r1, r1
   d8a02:	3c01      	subs	r4, #1
   d8a04:	bf28      	it	cs
   d8a06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8a0a:	d2e9      	bcs.n	d89e0 <__adddf3+0x10c>
   d8a0c:	f091 0f00 	teq	r1, #0
   d8a10:	bf04      	itt	eq
   d8a12:	4601      	moveq	r1, r0
   d8a14:	2000      	moveq	r0, #0
   d8a16:	fab1 f381 	clz	r3, r1
   d8a1a:	bf08      	it	eq
   d8a1c:	3320      	addeq	r3, #32
   d8a1e:	f1a3 030b 	sub.w	r3, r3, #11
   d8a22:	f1b3 0220 	subs.w	r2, r3, #32
   d8a26:	da0c      	bge.n	d8a42 <__adddf3+0x16e>
   d8a28:	320c      	adds	r2, #12
   d8a2a:	dd08      	ble.n	d8a3e <__adddf3+0x16a>
   d8a2c:	f102 0c14 	add.w	ip, r2, #20
   d8a30:	f1c2 020c 	rsb	r2, r2, #12
   d8a34:	fa01 f00c 	lsl.w	r0, r1, ip
   d8a38:	fa21 f102 	lsr.w	r1, r1, r2
   d8a3c:	e00c      	b.n	d8a58 <__adddf3+0x184>
   d8a3e:	f102 0214 	add.w	r2, r2, #20
   d8a42:	bfd8      	it	le
   d8a44:	f1c2 0c20 	rsble	ip, r2, #32
   d8a48:	fa01 f102 	lsl.w	r1, r1, r2
   d8a4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8a50:	bfdc      	itt	le
   d8a52:	ea41 010c 	orrle.w	r1, r1, ip
   d8a56:	4090      	lslle	r0, r2
   d8a58:	1ae4      	subs	r4, r4, r3
   d8a5a:	bfa2      	ittt	ge
   d8a5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8a60:	4329      	orrge	r1, r5
   d8a62:	bd30      	popge	{r4, r5, pc}
   d8a64:	ea6f 0404 	mvn.w	r4, r4
   d8a68:	3c1f      	subs	r4, #31
   d8a6a:	da1c      	bge.n	d8aa6 <__adddf3+0x1d2>
   d8a6c:	340c      	adds	r4, #12
   d8a6e:	dc0e      	bgt.n	d8a8e <__adddf3+0x1ba>
   d8a70:	f104 0414 	add.w	r4, r4, #20
   d8a74:	f1c4 0220 	rsb	r2, r4, #32
   d8a78:	fa20 f004 	lsr.w	r0, r0, r4
   d8a7c:	fa01 f302 	lsl.w	r3, r1, r2
   d8a80:	ea40 0003 	orr.w	r0, r0, r3
   d8a84:	fa21 f304 	lsr.w	r3, r1, r4
   d8a88:	ea45 0103 	orr.w	r1, r5, r3
   d8a8c:	bd30      	pop	{r4, r5, pc}
   d8a8e:	f1c4 040c 	rsb	r4, r4, #12
   d8a92:	f1c4 0220 	rsb	r2, r4, #32
   d8a96:	fa20 f002 	lsr.w	r0, r0, r2
   d8a9a:	fa01 f304 	lsl.w	r3, r1, r4
   d8a9e:	ea40 0003 	orr.w	r0, r0, r3
   d8aa2:	4629      	mov	r1, r5
   d8aa4:	bd30      	pop	{r4, r5, pc}
   d8aa6:	fa21 f004 	lsr.w	r0, r1, r4
   d8aaa:	4629      	mov	r1, r5
   d8aac:	bd30      	pop	{r4, r5, pc}
   d8aae:	f094 0f00 	teq	r4, #0
   d8ab2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8ab6:	bf06      	itte	eq
   d8ab8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8abc:	3401      	addeq	r4, #1
   d8abe:	3d01      	subne	r5, #1
   d8ac0:	e74e      	b.n	d8960 <__adddf3+0x8c>
   d8ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ac6:	bf18      	it	ne
   d8ac8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8acc:	d029      	beq.n	d8b22 <__adddf3+0x24e>
   d8ace:	ea94 0f05 	teq	r4, r5
   d8ad2:	bf08      	it	eq
   d8ad4:	ea90 0f02 	teqeq	r0, r2
   d8ad8:	d005      	beq.n	d8ae6 <__adddf3+0x212>
   d8ada:	ea54 0c00 	orrs.w	ip, r4, r0
   d8ade:	bf04      	itt	eq
   d8ae0:	4619      	moveq	r1, r3
   d8ae2:	4610      	moveq	r0, r2
   d8ae4:	bd30      	pop	{r4, r5, pc}
   d8ae6:	ea91 0f03 	teq	r1, r3
   d8aea:	bf1e      	ittt	ne
   d8aec:	2100      	movne	r1, #0
   d8aee:	2000      	movne	r0, #0
   d8af0:	bd30      	popne	{r4, r5, pc}
   d8af2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8af6:	d105      	bne.n	d8b04 <__adddf3+0x230>
   d8af8:	0040      	lsls	r0, r0, #1
   d8afa:	4149      	adcs	r1, r1
   d8afc:	bf28      	it	cs
   d8afe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8b02:	bd30      	pop	{r4, r5, pc}
   d8b04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8b08:	bf3c      	itt	cc
   d8b0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8b0e:	bd30      	popcc	{r4, r5, pc}
   d8b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8b1c:	f04f 0000 	mov.w	r0, #0
   d8b20:	bd30      	pop	{r4, r5, pc}
   d8b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b26:	bf1a      	itte	ne
   d8b28:	4619      	movne	r1, r3
   d8b2a:	4610      	movne	r0, r2
   d8b2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8b30:	bf1c      	itt	ne
   d8b32:	460b      	movne	r3, r1
   d8b34:	4602      	movne	r2, r0
   d8b36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b3a:	bf06      	itte	eq
   d8b3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8b40:	ea91 0f03 	teqeq	r1, r3
   d8b44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8b48:	bd30      	pop	{r4, r5, pc}
   d8b4a:	bf00      	nop

000d8b4c <__aeabi_ui2d>:
   d8b4c:	f090 0f00 	teq	r0, #0
   d8b50:	bf04      	itt	eq
   d8b52:	2100      	moveq	r1, #0
   d8b54:	4770      	bxeq	lr
   d8b56:	b530      	push	{r4, r5, lr}
   d8b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b60:	f04f 0500 	mov.w	r5, #0
   d8b64:	f04f 0100 	mov.w	r1, #0
   d8b68:	e750      	b.n	d8a0c <__adddf3+0x138>
   d8b6a:	bf00      	nop

000d8b6c <__aeabi_i2d>:
   d8b6c:	f090 0f00 	teq	r0, #0
   d8b70:	bf04      	itt	eq
   d8b72:	2100      	moveq	r1, #0
   d8b74:	4770      	bxeq	lr
   d8b76:	b530      	push	{r4, r5, lr}
   d8b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8b84:	bf48      	it	mi
   d8b86:	4240      	negmi	r0, r0
   d8b88:	f04f 0100 	mov.w	r1, #0
   d8b8c:	e73e      	b.n	d8a0c <__adddf3+0x138>
   d8b8e:	bf00      	nop

000d8b90 <__aeabi_f2d>:
   d8b90:	0042      	lsls	r2, r0, #1
   d8b92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8b96:	ea4f 0131 	mov.w	r1, r1, rrx
   d8b9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8b9e:	bf1f      	itttt	ne
   d8ba0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8ba4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8ba8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8bac:	4770      	bxne	lr
   d8bae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8bb2:	bf08      	it	eq
   d8bb4:	4770      	bxeq	lr
   d8bb6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8bba:	bf04      	itt	eq
   d8bbc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8bc0:	4770      	bxeq	lr
   d8bc2:	b530      	push	{r4, r5, lr}
   d8bc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8bd0:	e71c      	b.n	d8a0c <__adddf3+0x138>
   d8bd2:	bf00      	nop

000d8bd4 <__aeabi_ul2d>:
   d8bd4:	ea50 0201 	orrs.w	r2, r0, r1
   d8bd8:	bf08      	it	eq
   d8bda:	4770      	bxeq	lr
   d8bdc:	b530      	push	{r4, r5, lr}
   d8bde:	f04f 0500 	mov.w	r5, #0
   d8be2:	e00a      	b.n	d8bfa <__aeabi_l2d+0x16>

000d8be4 <__aeabi_l2d>:
   d8be4:	ea50 0201 	orrs.w	r2, r0, r1
   d8be8:	bf08      	it	eq
   d8bea:	4770      	bxeq	lr
   d8bec:	b530      	push	{r4, r5, lr}
   d8bee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8bf2:	d502      	bpl.n	d8bfa <__aeabi_l2d+0x16>
   d8bf4:	4240      	negs	r0, r0
   d8bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8bfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8c06:	f43f aed8 	beq.w	d89ba <__adddf3+0xe6>
   d8c0a:	f04f 0203 	mov.w	r2, #3
   d8c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c12:	bf18      	it	ne
   d8c14:	3203      	addne	r2, #3
   d8c16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c1a:	bf18      	it	ne
   d8c1c:	3203      	addne	r2, #3
   d8c1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8c22:	f1c2 0320 	rsb	r3, r2, #32
   d8c26:	fa00 fc03 	lsl.w	ip, r0, r3
   d8c2a:	fa20 f002 	lsr.w	r0, r0, r2
   d8c2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8c32:	ea40 000e 	orr.w	r0, r0, lr
   d8c36:	fa21 f102 	lsr.w	r1, r1, r2
   d8c3a:	4414      	add	r4, r2
   d8c3c:	e6bd      	b.n	d89ba <__adddf3+0xe6>
   d8c3e:	bf00      	nop

000d8c40 <__aeabi_dmul>:
   d8c40:	b570      	push	{r4, r5, r6, lr}
   d8c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c4e:	bf1d      	ittte	ne
   d8c50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c54:	ea94 0f0c 	teqne	r4, ip
   d8c58:	ea95 0f0c 	teqne	r5, ip
   d8c5c:	f000 f8de 	bleq	d8e1c <__aeabi_dmul+0x1dc>
   d8c60:	442c      	add	r4, r5
   d8c62:	ea81 0603 	eor.w	r6, r1, r3
   d8c66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8c6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8c6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8c72:	bf18      	it	ne
   d8c74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c80:	d038      	beq.n	d8cf4 <__aeabi_dmul+0xb4>
   d8c82:	fba0 ce02 	umull	ip, lr, r0, r2
   d8c86:	f04f 0500 	mov.w	r5, #0
   d8c8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8c8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8c92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8c96:	f04f 0600 	mov.w	r6, #0
   d8c9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8c9e:	f09c 0f00 	teq	ip, #0
   d8ca2:	bf18      	it	ne
   d8ca4:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ca8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8cac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8cb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8cb4:	d204      	bcs.n	d8cc0 <__aeabi_dmul+0x80>
   d8cb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8cba:	416d      	adcs	r5, r5
   d8cbc:	eb46 0606 	adc.w	r6, r6, r6
   d8cc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8cc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8cc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ccc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8cd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8cd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8cd8:	bf88      	it	hi
   d8cda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8cde:	d81e      	bhi.n	d8d1e <__aeabi_dmul+0xde>
   d8ce0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ce4:	bf08      	it	eq
   d8ce6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8cea:	f150 0000 	adcs.w	r0, r0, #0
   d8cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8cf2:	bd70      	pop	{r4, r5, r6, pc}
   d8cf4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8cf8:	ea46 0101 	orr.w	r1, r6, r1
   d8cfc:	ea40 0002 	orr.w	r0, r0, r2
   d8d00:	ea81 0103 	eor.w	r1, r1, r3
   d8d04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8d08:	bfc2      	ittt	gt
   d8d0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d12:	bd70      	popgt	{r4, r5, r6, pc}
   d8d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d18:	f04f 0e00 	mov.w	lr, #0
   d8d1c:	3c01      	subs	r4, #1
   d8d1e:	f300 80ab 	bgt.w	d8e78 <__aeabi_dmul+0x238>
   d8d22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8d26:	bfde      	ittt	le
   d8d28:	2000      	movle	r0, #0
   d8d2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8d2e:	bd70      	pople	{r4, r5, r6, pc}
   d8d30:	f1c4 0400 	rsb	r4, r4, #0
   d8d34:	3c20      	subs	r4, #32
   d8d36:	da35      	bge.n	d8da4 <__aeabi_dmul+0x164>
   d8d38:	340c      	adds	r4, #12
   d8d3a:	dc1b      	bgt.n	d8d74 <__aeabi_dmul+0x134>
   d8d3c:	f104 0414 	add.w	r4, r4, #20
   d8d40:	f1c4 0520 	rsb	r5, r4, #32
   d8d44:	fa00 f305 	lsl.w	r3, r0, r5
   d8d48:	fa20 f004 	lsr.w	r0, r0, r4
   d8d4c:	fa01 f205 	lsl.w	r2, r1, r5
   d8d50:	ea40 0002 	orr.w	r0, r0, r2
   d8d54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8d58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d60:	fa21 f604 	lsr.w	r6, r1, r4
   d8d64:	eb42 0106 	adc.w	r1, r2, r6
   d8d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d6c:	bf08      	it	eq
   d8d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d72:	bd70      	pop	{r4, r5, r6, pc}
   d8d74:	f1c4 040c 	rsb	r4, r4, #12
   d8d78:	f1c4 0520 	rsb	r5, r4, #32
   d8d7c:	fa00 f304 	lsl.w	r3, r0, r4
   d8d80:	fa20 f005 	lsr.w	r0, r0, r5
   d8d84:	fa01 f204 	lsl.w	r2, r1, r4
   d8d88:	ea40 0002 	orr.w	r0, r0, r2
   d8d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d94:	f141 0100 	adc.w	r1, r1, #0
   d8d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d9c:	bf08      	it	eq
   d8d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8da2:	bd70      	pop	{r4, r5, r6, pc}
   d8da4:	f1c4 0520 	rsb	r5, r4, #32
   d8da8:	fa00 f205 	lsl.w	r2, r0, r5
   d8dac:	ea4e 0e02 	orr.w	lr, lr, r2
   d8db0:	fa20 f304 	lsr.w	r3, r0, r4
   d8db4:	fa01 f205 	lsl.w	r2, r1, r5
   d8db8:	ea43 0302 	orr.w	r3, r3, r2
   d8dbc:	fa21 f004 	lsr.w	r0, r1, r4
   d8dc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dc4:	fa21 f204 	lsr.w	r2, r1, r4
   d8dc8:	ea20 0002 	bic.w	r0, r0, r2
   d8dcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8dd4:	bf08      	it	eq
   d8dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8dda:	bd70      	pop	{r4, r5, r6, pc}
   d8ddc:	f094 0f00 	teq	r4, #0
   d8de0:	d10f      	bne.n	d8e02 <__aeabi_dmul+0x1c2>
   d8de2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8de6:	0040      	lsls	r0, r0, #1
   d8de8:	eb41 0101 	adc.w	r1, r1, r1
   d8dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8df0:	bf08      	it	eq
   d8df2:	3c01      	subeq	r4, #1
   d8df4:	d0f7      	beq.n	d8de6 <__aeabi_dmul+0x1a6>
   d8df6:	ea41 0106 	orr.w	r1, r1, r6
   d8dfa:	f095 0f00 	teq	r5, #0
   d8dfe:	bf18      	it	ne
   d8e00:	4770      	bxne	lr
   d8e02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8e06:	0052      	lsls	r2, r2, #1
   d8e08:	eb43 0303 	adc.w	r3, r3, r3
   d8e0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8e10:	bf08      	it	eq
   d8e12:	3d01      	subeq	r5, #1
   d8e14:	d0f7      	beq.n	d8e06 <__aeabi_dmul+0x1c6>
   d8e16:	ea43 0306 	orr.w	r3, r3, r6
   d8e1a:	4770      	bx	lr
   d8e1c:	ea94 0f0c 	teq	r4, ip
   d8e20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e24:	bf18      	it	ne
   d8e26:	ea95 0f0c 	teqne	r5, ip
   d8e2a:	d00c      	beq.n	d8e46 <__aeabi_dmul+0x206>
   d8e2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e30:	bf18      	it	ne
   d8e32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e36:	d1d1      	bne.n	d8ddc <__aeabi_dmul+0x19c>
   d8e38:	ea81 0103 	eor.w	r1, r1, r3
   d8e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e40:	f04f 0000 	mov.w	r0, #0
   d8e44:	bd70      	pop	{r4, r5, r6, pc}
   d8e46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e4a:	bf06      	itte	eq
   d8e4c:	4610      	moveq	r0, r2
   d8e4e:	4619      	moveq	r1, r3
   d8e50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e54:	d019      	beq.n	d8e8a <__aeabi_dmul+0x24a>
   d8e56:	ea94 0f0c 	teq	r4, ip
   d8e5a:	d102      	bne.n	d8e62 <__aeabi_dmul+0x222>
   d8e5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8e60:	d113      	bne.n	d8e8a <__aeabi_dmul+0x24a>
   d8e62:	ea95 0f0c 	teq	r5, ip
   d8e66:	d105      	bne.n	d8e74 <__aeabi_dmul+0x234>
   d8e68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8e6c:	bf1c      	itt	ne
   d8e6e:	4610      	movne	r0, r2
   d8e70:	4619      	movne	r1, r3
   d8e72:	d10a      	bne.n	d8e8a <__aeabi_dmul+0x24a>
   d8e74:	ea81 0103 	eor.w	r1, r1, r3
   d8e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8e84:	f04f 0000 	mov.w	r0, #0
   d8e88:	bd70      	pop	{r4, r5, r6, pc}
   d8e8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8e92:	bd70      	pop	{r4, r5, r6, pc}

000d8e94 <__aeabi_ddiv>:
   d8e94:	b570      	push	{r4, r5, r6, lr}
   d8e96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ea2:	bf1d      	ittte	ne
   d8ea4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ea8:	ea94 0f0c 	teqne	r4, ip
   d8eac:	ea95 0f0c 	teqne	r5, ip
   d8eb0:	f000 f8a7 	bleq	d9002 <__aeabi_ddiv+0x16e>
   d8eb4:	eba4 0405 	sub.w	r4, r4, r5
   d8eb8:	ea81 0e03 	eor.w	lr, r1, r3
   d8ebc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ec0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ec4:	f000 8088 	beq.w	d8fd8 <__aeabi_ddiv+0x144>
   d8ec8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ecc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8ed0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8ed4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8ed8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8edc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8ee0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8ee4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8ee8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8eec:	429d      	cmp	r5, r3
   d8eee:	bf08      	it	eq
   d8ef0:	4296      	cmpeq	r6, r2
   d8ef2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8ef6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8efa:	d202      	bcs.n	d8f02 <__aeabi_ddiv+0x6e>
   d8efc:	085b      	lsrs	r3, r3, #1
   d8efe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f02:	1ab6      	subs	r6, r6, r2
   d8f04:	eb65 0503 	sbc.w	r5, r5, r3
   d8f08:	085b      	lsrs	r3, r3, #1
   d8f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8f12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8f16:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f1e:	bf22      	ittt	cs
   d8f20:	1ab6      	subcs	r6, r6, r2
   d8f22:	4675      	movcs	r5, lr
   d8f24:	ea40 000c 	orrcs.w	r0, r0, ip
   d8f28:	085b      	lsrs	r3, r3, #1
   d8f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f36:	bf22      	ittt	cs
   d8f38:	1ab6      	subcs	r6, r6, r2
   d8f3a:	4675      	movcs	r5, lr
   d8f3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8f40:	085b      	lsrs	r3, r3, #1
   d8f42:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f46:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f4e:	bf22      	ittt	cs
   d8f50:	1ab6      	subcs	r6, r6, r2
   d8f52:	4675      	movcs	r5, lr
   d8f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8f58:	085b      	lsrs	r3, r3, #1
   d8f5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f66:	bf22      	ittt	cs
   d8f68:	1ab6      	subcs	r6, r6, r2
   d8f6a:	4675      	movcs	r5, lr
   d8f6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8f70:	ea55 0e06 	orrs.w	lr, r5, r6
   d8f74:	d018      	beq.n	d8fa8 <__aeabi_ddiv+0x114>
   d8f76:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8f7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8f7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8f82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8f86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8f8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8f8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8f92:	d1c0      	bne.n	d8f16 <__aeabi_ddiv+0x82>
   d8f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f98:	d10b      	bne.n	d8fb2 <__aeabi_ddiv+0x11e>
   d8f9a:	ea41 0100 	orr.w	r1, r1, r0
   d8f9e:	f04f 0000 	mov.w	r0, #0
   d8fa2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8fa6:	e7b6      	b.n	d8f16 <__aeabi_ddiv+0x82>
   d8fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fac:	bf04      	itt	eq
   d8fae:	4301      	orreq	r1, r0
   d8fb0:	2000      	moveq	r0, #0
   d8fb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8fb6:	bf88      	it	hi
   d8fb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8fbc:	f63f aeaf 	bhi.w	d8d1e <__aeabi_dmul+0xde>
   d8fc0:	ebb5 0c03 	subs.w	ip, r5, r3
   d8fc4:	bf04      	itt	eq
   d8fc6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8fca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8fce:	f150 0000 	adcs.w	r0, r0, #0
   d8fd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8fd6:	bd70      	pop	{r4, r5, r6, pc}
   d8fd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8fdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8fe0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8fe4:	bfc2      	ittt	gt
   d8fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8fee:	bd70      	popgt	{r4, r5, r6, pc}
   d8ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ff4:	f04f 0e00 	mov.w	lr, #0
   d8ff8:	3c01      	subs	r4, #1
   d8ffa:	e690      	b.n	d8d1e <__aeabi_dmul+0xde>
   d8ffc:	ea45 0e06 	orr.w	lr, r5, r6
   d9000:	e68d      	b.n	d8d1e <__aeabi_dmul+0xde>
   d9002:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9006:	ea94 0f0c 	teq	r4, ip
   d900a:	bf08      	it	eq
   d900c:	ea95 0f0c 	teqeq	r5, ip
   d9010:	f43f af3b 	beq.w	d8e8a <__aeabi_dmul+0x24a>
   d9014:	ea94 0f0c 	teq	r4, ip
   d9018:	d10a      	bne.n	d9030 <__aeabi_ddiv+0x19c>
   d901a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d901e:	f47f af34 	bne.w	d8e8a <__aeabi_dmul+0x24a>
   d9022:	ea95 0f0c 	teq	r5, ip
   d9026:	f47f af25 	bne.w	d8e74 <__aeabi_dmul+0x234>
   d902a:	4610      	mov	r0, r2
   d902c:	4619      	mov	r1, r3
   d902e:	e72c      	b.n	d8e8a <__aeabi_dmul+0x24a>
   d9030:	ea95 0f0c 	teq	r5, ip
   d9034:	d106      	bne.n	d9044 <__aeabi_ddiv+0x1b0>
   d9036:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d903a:	f43f aefd 	beq.w	d8e38 <__aeabi_dmul+0x1f8>
   d903e:	4610      	mov	r0, r2
   d9040:	4619      	mov	r1, r3
   d9042:	e722      	b.n	d8e8a <__aeabi_dmul+0x24a>
   d9044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9048:	bf18      	it	ne
   d904a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d904e:	f47f aec5 	bne.w	d8ddc <__aeabi_dmul+0x19c>
   d9052:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9056:	f47f af0d 	bne.w	d8e74 <__aeabi_dmul+0x234>
   d905a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d905e:	f47f aeeb 	bne.w	d8e38 <__aeabi_dmul+0x1f8>
   d9062:	e712      	b.n	d8e8a <__aeabi_dmul+0x24a>

000d9064 <__aeabi_d2iz>:
   d9064:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9068:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d906c:	d215      	bcs.n	d909a <__aeabi_d2iz+0x36>
   d906e:	d511      	bpl.n	d9094 <__aeabi_d2iz+0x30>
   d9070:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9074:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9078:	d912      	bls.n	d90a0 <__aeabi_d2iz+0x3c>
   d907a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d907e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9082:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9086:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d908a:	fa23 f002 	lsr.w	r0, r3, r2
   d908e:	bf18      	it	ne
   d9090:	4240      	negne	r0, r0
   d9092:	4770      	bx	lr
   d9094:	f04f 0000 	mov.w	r0, #0
   d9098:	4770      	bx	lr
   d909a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d909e:	d105      	bne.n	d90ac <__aeabi_d2iz+0x48>
   d90a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d90a4:	bf08      	it	eq
   d90a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d90aa:	4770      	bx	lr
   d90ac:	f04f 0000 	mov.w	r0, #0
   d90b0:	4770      	bx	lr
   d90b2:	bf00      	nop

000d90b4 <atexit>:
   d90b4:	2300      	movs	r3, #0
   d90b6:	4601      	mov	r1, r0
   d90b8:	461a      	mov	r2, r3
   d90ba:	4618      	mov	r0, r3
   d90bc:	f000 b964 	b.w	d9388 <__register_exitproc>

000d90c0 <atol>:
   d90c0:	220a      	movs	r2, #10
   d90c2:	2100      	movs	r1, #0
   d90c4:	f000 b956 	b.w	d9374 <strtol>

000d90c8 <memcpy>:
   d90c8:	440a      	add	r2, r1
   d90ca:	4291      	cmp	r1, r2
   d90cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d90d0:	d100      	bne.n	d90d4 <memcpy+0xc>
   d90d2:	4770      	bx	lr
   d90d4:	b510      	push	{r4, lr}
   d90d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90da:	f803 4f01 	strb.w	r4, [r3, #1]!
   d90de:	4291      	cmp	r1, r2
   d90e0:	d1f9      	bne.n	d90d6 <memcpy+0xe>
   d90e2:	bd10      	pop	{r4, pc}

000d90e4 <memmove>:
   d90e4:	4288      	cmp	r0, r1
   d90e6:	b510      	push	{r4, lr}
   d90e8:	eb01 0402 	add.w	r4, r1, r2
   d90ec:	d902      	bls.n	d90f4 <memmove+0x10>
   d90ee:	4284      	cmp	r4, r0
   d90f0:	4623      	mov	r3, r4
   d90f2:	d807      	bhi.n	d9104 <memmove+0x20>
   d90f4:	1e43      	subs	r3, r0, #1
   d90f6:	42a1      	cmp	r1, r4
   d90f8:	d008      	beq.n	d910c <memmove+0x28>
   d90fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d90fe:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9102:	e7f8      	b.n	d90f6 <memmove+0x12>
   d9104:	4402      	add	r2, r0
   d9106:	4601      	mov	r1, r0
   d9108:	428a      	cmp	r2, r1
   d910a:	d100      	bne.n	d910e <memmove+0x2a>
   d910c:	bd10      	pop	{r4, pc}
   d910e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9112:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9116:	e7f7      	b.n	d9108 <memmove+0x24>

000d9118 <memset>:
   d9118:	4402      	add	r2, r0
   d911a:	4603      	mov	r3, r0
   d911c:	4293      	cmp	r3, r2
   d911e:	d100      	bne.n	d9122 <memset+0xa>
   d9120:	4770      	bx	lr
   d9122:	f803 1b01 	strb.w	r1, [r3], #1
   d9126:	e7f9      	b.n	d911c <memset+0x4>

000d9128 <srand>:
   d9128:	b538      	push	{r3, r4, r5, lr}
   d912a:	4b0d      	ldr	r3, [pc, #52]	; (d9160 <srand+0x38>)
   d912c:	681d      	ldr	r5, [r3, #0]
   d912e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9130:	4604      	mov	r4, r0
   d9132:	b97b      	cbnz	r3, d9154 <srand+0x2c>
   d9134:	2018      	movs	r0, #24
   d9136:	f7fc fe21 	bl	d5d7c <malloc>
   d913a:	4a0a      	ldr	r2, [pc, #40]	; (d9164 <srand+0x3c>)
   d913c:	4b0a      	ldr	r3, [pc, #40]	; (d9168 <srand+0x40>)
   d913e:	63a8      	str	r0, [r5, #56]	; 0x38
   d9140:	e9c0 2300 	strd	r2, r3, [r0]
   d9144:	4b09      	ldr	r3, [pc, #36]	; (d916c <srand+0x44>)
   d9146:	6083      	str	r3, [r0, #8]
   d9148:	230b      	movs	r3, #11
   d914a:	8183      	strh	r3, [r0, #12]
   d914c:	2201      	movs	r2, #1
   d914e:	2300      	movs	r3, #0
   d9150:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9154:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9156:	2200      	movs	r2, #0
   d9158:	611c      	str	r4, [r3, #16]
   d915a:	615a      	str	r2, [r3, #20]
   d915c:	bd38      	pop	{r3, r4, r5, pc}
   d915e:	bf00      	nop
   d9160:	2003e33c 	.word	0x2003e33c
   d9164:	abcd330e 	.word	0xabcd330e
   d9168:	e66d1234 	.word	0xe66d1234
   d916c:	0005deec 	.word	0x0005deec

000d9170 <strchr>:
   d9170:	b2c9      	uxtb	r1, r1
   d9172:	4603      	mov	r3, r0
   d9174:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9178:	b11a      	cbz	r2, d9182 <strchr+0x12>
   d917a:	428a      	cmp	r2, r1
   d917c:	d1f9      	bne.n	d9172 <strchr+0x2>
   d917e:	4618      	mov	r0, r3
   d9180:	4770      	bx	lr
   d9182:	2900      	cmp	r1, #0
   d9184:	bf18      	it	ne
   d9186:	2300      	movne	r3, #0
   d9188:	e7f9      	b.n	d917e <strchr+0xe>

000d918a <strchrnul>:
   d918a:	b510      	push	{r4, lr}
   d918c:	4604      	mov	r4, r0
   d918e:	f7ff ffef 	bl	d9170 <strchr>
   d9192:	b918      	cbnz	r0, d919c <strchrnul+0x12>
   d9194:	4620      	mov	r0, r4
   d9196:	f000 f832 	bl	d91fe <strlen>
   d919a:	4420      	add	r0, r4
   d919c:	bd10      	pop	{r4, pc}

000d919e <strcmp>:
   d919e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d91a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   d91a6:	2a01      	cmp	r2, #1
   d91a8:	bf28      	it	cs
   d91aa:	429a      	cmpcs	r2, r3
   d91ac:	d0f7      	beq.n	d919e <strcmp>
   d91ae:	1ad0      	subs	r0, r2, r3
   d91b0:	4770      	bx	lr

000d91b2 <strcpy>:
   d91b2:	4603      	mov	r3, r0
   d91b4:	f811 2b01 	ldrb.w	r2, [r1], #1
   d91b8:	f803 2b01 	strb.w	r2, [r3], #1
   d91bc:	2a00      	cmp	r2, #0
   d91be:	d1f9      	bne.n	d91b4 <strcpy+0x2>
   d91c0:	4770      	bx	lr
	...

000d91c4 <strdup>:
   d91c4:	4b02      	ldr	r3, [pc, #8]	; (d91d0 <strdup+0xc>)
   d91c6:	4601      	mov	r1, r0
   d91c8:	6818      	ldr	r0, [r3, #0]
   d91ca:	f000 b803 	b.w	d91d4 <_strdup_r>
   d91ce:	bf00      	nop
   d91d0:	2003e33c 	.word	0x2003e33c

000d91d4 <_strdup_r>:
   d91d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d91d6:	4604      	mov	r4, r0
   d91d8:	4608      	mov	r0, r1
   d91da:	460d      	mov	r5, r1
   d91dc:	f000 f80f 	bl	d91fe <strlen>
   d91e0:	1c42      	adds	r2, r0, #1
   d91e2:	4611      	mov	r1, r2
   d91e4:	4620      	mov	r0, r4
   d91e6:	9201      	str	r2, [sp, #4]
   d91e8:	f7fc fdf0 	bl	d5dcc <_malloc_r>
   d91ec:	4604      	mov	r4, r0
   d91ee:	b118      	cbz	r0, d91f8 <_strdup_r+0x24>
   d91f0:	9a01      	ldr	r2, [sp, #4]
   d91f2:	4629      	mov	r1, r5
   d91f4:	f7ff ff68 	bl	d90c8 <memcpy>
   d91f8:	4620      	mov	r0, r4
   d91fa:	b003      	add	sp, #12
   d91fc:	bd30      	pop	{r4, r5, pc}

000d91fe <strlen>:
   d91fe:	4603      	mov	r3, r0
   d9200:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9204:	2a00      	cmp	r2, #0
   d9206:	d1fb      	bne.n	d9200 <strlen+0x2>
   d9208:	1a18      	subs	r0, r3, r0
   d920a:	3801      	subs	r0, #1
   d920c:	4770      	bx	lr

000d920e <strncmp>:
   d920e:	b510      	push	{r4, lr}
   d9210:	b16a      	cbz	r2, d922e <strncmp+0x20>
   d9212:	3901      	subs	r1, #1
   d9214:	1884      	adds	r4, r0, r2
   d9216:	f810 3b01 	ldrb.w	r3, [r0], #1
   d921a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d921e:	4293      	cmp	r3, r2
   d9220:	d103      	bne.n	d922a <strncmp+0x1c>
   d9222:	42a0      	cmp	r0, r4
   d9224:	d001      	beq.n	d922a <strncmp+0x1c>
   d9226:	2b00      	cmp	r3, #0
   d9228:	d1f5      	bne.n	d9216 <strncmp+0x8>
   d922a:	1a98      	subs	r0, r3, r2
   d922c:	bd10      	pop	{r4, pc}
   d922e:	4610      	mov	r0, r2
   d9230:	e7fc      	b.n	d922c <strncmp+0x1e>

000d9232 <strncpy>:
   d9232:	b510      	push	{r4, lr}
   d9234:	3901      	subs	r1, #1
   d9236:	4603      	mov	r3, r0
   d9238:	b132      	cbz	r2, d9248 <strncpy+0x16>
   d923a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d923e:	f803 4b01 	strb.w	r4, [r3], #1
   d9242:	3a01      	subs	r2, #1
   d9244:	2c00      	cmp	r4, #0
   d9246:	d1f7      	bne.n	d9238 <strncpy+0x6>
   d9248:	441a      	add	r2, r3
   d924a:	2100      	movs	r1, #0
   d924c:	4293      	cmp	r3, r2
   d924e:	d100      	bne.n	d9252 <strncpy+0x20>
   d9250:	bd10      	pop	{r4, pc}
   d9252:	f803 1b01 	strb.w	r1, [r3], #1
   d9256:	e7f9      	b.n	d924c <strncpy+0x1a>

000d9258 <strrchr>:
   d9258:	b538      	push	{r3, r4, r5, lr}
   d925a:	4603      	mov	r3, r0
   d925c:	460c      	mov	r4, r1
   d925e:	b969      	cbnz	r1, d927c <strrchr+0x24>
   d9260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9264:	f7ff bf84 	b.w	d9170 <strchr>
   d9268:	1c43      	adds	r3, r0, #1
   d926a:	4605      	mov	r5, r0
   d926c:	4621      	mov	r1, r4
   d926e:	4618      	mov	r0, r3
   d9270:	f7ff ff7e 	bl	d9170 <strchr>
   d9274:	2800      	cmp	r0, #0
   d9276:	d1f7      	bne.n	d9268 <strrchr+0x10>
   d9278:	4628      	mov	r0, r5
   d927a:	bd38      	pop	{r3, r4, r5, pc}
   d927c:	2500      	movs	r5, #0
   d927e:	e7f5      	b.n	d926c <strrchr+0x14>

000d9280 <_strtol_l.isra.0>:
   d9280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9284:	4e3a      	ldr	r6, [pc, #232]	; (d9370 <_strtol_l.isra.0+0xf0>)
   d9286:	4686      	mov	lr, r0
   d9288:	468c      	mov	ip, r1
   d928a:	4660      	mov	r0, ip
   d928c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9290:	5da5      	ldrb	r5, [r4, r6]
   d9292:	f015 0508 	ands.w	r5, r5, #8
   d9296:	d1f8      	bne.n	d928a <_strtol_l.isra.0+0xa>
   d9298:	2c2d      	cmp	r4, #45	; 0x2d
   d929a:	d133      	bne.n	d9304 <_strtol_l.isra.0+0x84>
   d929c:	f89c 4000 	ldrb.w	r4, [ip]
   d92a0:	f04f 0801 	mov.w	r8, #1
   d92a4:	f100 0c02 	add.w	ip, r0, #2
   d92a8:	2b00      	cmp	r3, #0
   d92aa:	d05c      	beq.n	d9366 <_strtol_l.isra.0+0xe6>
   d92ac:	2b10      	cmp	r3, #16
   d92ae:	d10c      	bne.n	d92ca <_strtol_l.isra.0+0x4a>
   d92b0:	2c30      	cmp	r4, #48	; 0x30
   d92b2:	d10a      	bne.n	d92ca <_strtol_l.isra.0+0x4a>
   d92b4:	f89c 0000 	ldrb.w	r0, [ip]
   d92b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d92bc:	2858      	cmp	r0, #88	; 0x58
   d92be:	d14d      	bne.n	d935c <_strtol_l.isra.0+0xdc>
   d92c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d92c4:	2310      	movs	r3, #16
   d92c6:	f10c 0c02 	add.w	ip, ip, #2
   d92ca:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d92ce:	3f01      	subs	r7, #1
   d92d0:	2600      	movs	r6, #0
   d92d2:	fbb7 f9f3 	udiv	r9, r7, r3
   d92d6:	4630      	mov	r0, r6
   d92d8:	fb03 7a19 	mls	sl, r3, r9, r7
   d92dc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d92e0:	2d09      	cmp	r5, #9
   d92e2:	d818      	bhi.n	d9316 <_strtol_l.isra.0+0x96>
   d92e4:	462c      	mov	r4, r5
   d92e6:	42a3      	cmp	r3, r4
   d92e8:	dd24      	ble.n	d9334 <_strtol_l.isra.0+0xb4>
   d92ea:	1c75      	adds	r5, r6, #1
   d92ec:	d007      	beq.n	d92fe <_strtol_l.isra.0+0x7e>
   d92ee:	4581      	cmp	r9, r0
   d92f0:	d31d      	bcc.n	d932e <_strtol_l.isra.0+0xae>
   d92f2:	d101      	bne.n	d92f8 <_strtol_l.isra.0+0x78>
   d92f4:	45a2      	cmp	sl, r4
   d92f6:	db1a      	blt.n	d932e <_strtol_l.isra.0+0xae>
   d92f8:	fb00 4003 	mla	r0, r0, r3, r4
   d92fc:	2601      	movs	r6, #1
   d92fe:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9302:	e7eb      	b.n	d92dc <_strtol_l.isra.0+0x5c>
   d9304:	2c2b      	cmp	r4, #43	; 0x2b
   d9306:	bf08      	it	eq
   d9308:	f89c 4000 	ldrbeq.w	r4, [ip]
   d930c:	46a8      	mov	r8, r5
   d930e:	bf08      	it	eq
   d9310:	f100 0c02 	addeq.w	ip, r0, #2
   d9314:	e7c8      	b.n	d92a8 <_strtol_l.isra.0+0x28>
   d9316:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d931a:	2d19      	cmp	r5, #25
   d931c:	d801      	bhi.n	d9322 <_strtol_l.isra.0+0xa2>
   d931e:	3c37      	subs	r4, #55	; 0x37
   d9320:	e7e1      	b.n	d92e6 <_strtol_l.isra.0+0x66>
   d9322:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9326:	2d19      	cmp	r5, #25
   d9328:	d804      	bhi.n	d9334 <_strtol_l.isra.0+0xb4>
   d932a:	3c57      	subs	r4, #87	; 0x57
   d932c:	e7db      	b.n	d92e6 <_strtol_l.isra.0+0x66>
   d932e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9332:	e7e4      	b.n	d92fe <_strtol_l.isra.0+0x7e>
   d9334:	1c73      	adds	r3, r6, #1
   d9336:	d106      	bne.n	d9346 <_strtol_l.isra.0+0xc6>
   d9338:	2322      	movs	r3, #34	; 0x22
   d933a:	f8ce 3000 	str.w	r3, [lr]
   d933e:	4638      	mov	r0, r7
   d9340:	b942      	cbnz	r2, d9354 <_strtol_l.isra.0+0xd4>
   d9342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9346:	f1b8 0f00 	cmp.w	r8, #0
   d934a:	d000      	beq.n	d934e <_strtol_l.isra.0+0xce>
   d934c:	4240      	negs	r0, r0
   d934e:	2a00      	cmp	r2, #0
   d9350:	d0f7      	beq.n	d9342 <_strtol_l.isra.0+0xc2>
   d9352:	b10e      	cbz	r6, d9358 <_strtol_l.isra.0+0xd8>
   d9354:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9358:	6011      	str	r1, [r2, #0]
   d935a:	e7f2      	b.n	d9342 <_strtol_l.isra.0+0xc2>
   d935c:	2430      	movs	r4, #48	; 0x30
   d935e:	2b00      	cmp	r3, #0
   d9360:	d1b3      	bne.n	d92ca <_strtol_l.isra.0+0x4a>
   d9362:	2308      	movs	r3, #8
   d9364:	e7b1      	b.n	d92ca <_strtol_l.isra.0+0x4a>
   d9366:	2c30      	cmp	r4, #48	; 0x30
   d9368:	d0a4      	beq.n	d92b4 <_strtol_l.isra.0+0x34>
   d936a:	230a      	movs	r3, #10
   d936c:	e7ad      	b.n	d92ca <_strtol_l.isra.0+0x4a>
   d936e:	bf00      	nop
   d9370:	000d988e 	.word	0x000d988e

000d9374 <strtol>:
   d9374:	4613      	mov	r3, r2
   d9376:	460a      	mov	r2, r1
   d9378:	4601      	mov	r1, r0
   d937a:	4802      	ldr	r0, [pc, #8]	; (d9384 <strtol+0x10>)
   d937c:	6800      	ldr	r0, [r0, #0]
   d937e:	f7ff bf7f 	b.w	d9280 <_strtol_l.isra.0>
   d9382:	bf00      	nop
   d9384:	2003e33c 	.word	0x2003e33c

000d9388 <__register_exitproc>:
   d9388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d938c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d9448 <__register_exitproc+0xc0>
   d9390:	4606      	mov	r6, r0
   d9392:	f8d8 0000 	ldr.w	r0, [r8]
   d9396:	461f      	mov	r7, r3
   d9398:	460d      	mov	r5, r1
   d939a:	4691      	mov	r9, r2
   d939c:	f000 f856 	bl	d944c <__retarget_lock_acquire_recursive>
   d93a0:	4b25      	ldr	r3, [pc, #148]	; (d9438 <__register_exitproc+0xb0>)
   d93a2:	681c      	ldr	r4, [r3, #0]
   d93a4:	b934      	cbnz	r4, d93b4 <__register_exitproc+0x2c>
   d93a6:	4c25      	ldr	r4, [pc, #148]	; (d943c <__register_exitproc+0xb4>)
   d93a8:	601c      	str	r4, [r3, #0]
   d93aa:	4b25      	ldr	r3, [pc, #148]	; (d9440 <__register_exitproc+0xb8>)
   d93ac:	b113      	cbz	r3, d93b4 <__register_exitproc+0x2c>
   d93ae:	681b      	ldr	r3, [r3, #0]
   d93b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d93b4:	6863      	ldr	r3, [r4, #4]
   d93b6:	2b1f      	cmp	r3, #31
   d93b8:	dd07      	ble.n	d93ca <__register_exitproc+0x42>
   d93ba:	f8d8 0000 	ldr.w	r0, [r8]
   d93be:	f000 f847 	bl	d9450 <__retarget_lock_release_recursive>
   d93c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d93c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d93ca:	b34e      	cbz	r6, d9420 <__register_exitproc+0x98>
   d93cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d93d0:	b988      	cbnz	r0, d93f6 <__register_exitproc+0x6e>
   d93d2:	4b1c      	ldr	r3, [pc, #112]	; (d9444 <__register_exitproc+0xbc>)
   d93d4:	b923      	cbnz	r3, d93e0 <__register_exitproc+0x58>
   d93d6:	f8d8 0000 	ldr.w	r0, [r8]
   d93da:	f000 f838 	bl	d944e <__retarget_lock_release>
   d93de:	e7f0      	b.n	d93c2 <__register_exitproc+0x3a>
   d93e0:	f44f 7084 	mov.w	r0, #264	; 0x108
   d93e4:	f7fc fcca 	bl	d5d7c <malloc>
   d93e8:	2800      	cmp	r0, #0
   d93ea:	d0f4      	beq.n	d93d6 <__register_exitproc+0x4e>
   d93ec:	2300      	movs	r3, #0
   d93ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d93f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d93f6:	6863      	ldr	r3, [r4, #4]
   d93f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d93fc:	2201      	movs	r2, #1
   d93fe:	409a      	lsls	r2, r3
   d9400:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d9404:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d9408:	4313      	orrs	r3, r2
   d940a:	2e02      	cmp	r6, #2
   d940c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d9410:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d9414:	bf02      	ittt	eq
   d9416:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d941a:	431a      	orreq	r2, r3
   d941c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d9420:	6863      	ldr	r3, [r4, #4]
   d9422:	f8d8 0000 	ldr.w	r0, [r8]
   d9426:	1c5a      	adds	r2, r3, #1
   d9428:	3302      	adds	r3, #2
   d942a:	6062      	str	r2, [r4, #4]
   d942c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d9430:	f000 f80e 	bl	d9450 <__retarget_lock_release_recursive>
   d9434:	2000      	movs	r0, #0
   d9436:	e7c6      	b.n	d93c6 <__register_exitproc+0x3e>
   d9438:	2003e7e4 	.word	0x2003e7e4
   d943c:	2003e758 	.word	0x2003e758
   d9440:	00000000 	.word	0x00000000
   d9444:	000d5d7d 	.word	0x000d5d7d
   d9448:	2003e3a0 	.word	0x2003e3a0

000d944c <__retarget_lock_acquire_recursive>:
   d944c:	4770      	bx	lr

000d944e <__retarget_lock_release>:
   d944e:	4770      	bx	lr

000d9450 <__retarget_lock_release_recursive>:
   d9450:	4770      	bx	lr

000d9452 <link_code_end>:
	...

000d9454 <dynalib_user>:
   d9454:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9464:	0000 0000 6574 706d 665f 6800 6d75 6469     ....temp_f.humid
   d9474:	7469 0079 6973 6e67 6c61 735f 7274 6e65     ity.signal_stren
   d9484:	7467 0068 6973 6e67 6c61 715f 6175 696c     gth.signal_quali
   d9494:	7974 7000 7265 6563 746e 635f 6168 6772     ty.percent_charg
   d94a4:	0065 6f6c 676e 7469 6475 0065 616c 6974     e.longitude.lati
   d94b4:	7574 6564 6100 746c 7469 6475 0065 6425     tude.altitude.%d
   d94c4:	7400 6d65 5f70 0063 6f76 746c 6761 0065     .temp_c.voltage.
   d94d4:	7165 6975 6d70 6e65 5f74 6572 6461 6e69     equipment_readin
   d94e4:	7367 0000                                   gs..

000d94e8 <_ZTVN5spark10LogHandlerE>:
	...
   d94f8:	40a5 000d 40c9 000d                         .@...@..

000d9500 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9508:	4101 000d 4135 000d 7a21 000d 40cb 000d     .A..5A..!z...@..

000d9518 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d9520:	40d5 000d 40e9 000d 5047 4d52 0043 4e47     .@...@..GPRMC.GN
   d9530:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   d9540:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9550:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9560:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9570:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   d9580:	7525 003e                                   %u>.

000d9584 <_ZTVN8particle11SPISettingsE>:
	...
   d958c:	4e59 000d 4e2b 000d 4e2d 000d 755c 3025     YN..+N..-N..\u%0
   d959c:	5834 2500 2a2e 666c 2500 666c 0000 0000     4X.%.*lf.%lf....

000d95ac <_ZTV10JsonBuffer>:
	...
   d95b4:	55ad 000d 55c9 000d                         .U...U..

000d95bc <_ZTV10JsonWriter>:
	...
   d95c4:	55dd 000d 55f1 000d                         .U...U..

000d95cc <_ZTVN5spark13CellularClassE>:
	...
   d95d4:	5ecf 000d 5ec5 000d 5ebb 000d 5e71 000d     .^...^...^..q^..
   d95e4:	5eaf 000d 5ea3 000d 7d79 000d 7d81 000d     .^...^..y}...}..
   d95f4:	5e97 000d 5e8f 000d 5e85 000d 5e7b 000d     .^...^...^..{^..
   d9604:	7db1 000d                                   .}..

000d9608 <_ZTV14CellularSignal>:
	...
   d9610:	5f7d 000d 5fa5 000d 5f7f 000d 5fb5 000d     }_..._..._..._..
   d9620:	5fe9 000d 6015 000d 6049 000d 6099 000d     ._...`..I`...`..
   d9630:	5f83 000d 5f9f 000d fffc ffff 0000 0000     ._..._..........
   d9640:	60bf 000d                                   .`..

000d9644 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d964c:	60df 000d 60e5 000d 6135 000d 60f3 000d     .`...`..5a...`..
   d965c:	60e1 000d                                   .`..

000d9660 <_ZTVN5spark13EthernetClassE>:
	...
   d9668:	66ab 000d 66a1 000d 6697 000d 668d 000d     .f...f...f...f..
   d9678:	6681 000d 6675 000d 7d79 000d 7d81 000d     .f..uf..y}...}..
   d9688:	6669 000d 6661 000d 6657 000d 664d 000d     if..af..Wf..Mf..
   d9698:	7db1 000d                                   .}..

000d969c <_ZTV7TwoWire>:
	...
   d96a4:	67d1 000d 681b 000d 67f3 000d 67d3 000d     .g...h...g...g..
   d96b4:	67fb 000d 6803 000d 680b 000d 6813 000d     .g...h...h...h..

000d96c4 <_ZTV9IPAddress>:
	...
   d96cc:	692b 000d 691b 000d 691d 000d 7525 7500     +i...i...i..%u.u
   d96dc:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   d96ec:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   d96fc:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d970c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   d971c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d972c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d973c:	006d 6e6c 6600 006e 0074 6f63 6564 6400     m.ln.fn.t.code.d
   d974c:	7465 6961 006c 0000                         etail...

000d9754 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d975c:	6de9 000d 6e0f 000d 6dcd 000d 6a2d 000d     .m...n...m..-j..

000d976c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9774:	723d 000d 7255 000d 7a21 000d 40cb 000d     =r..Ur..!z...@..

000d9784 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d978c:	7269 000d 727d 000d 7bc5 000d 6dd5 000d     ir..}r...{...m..

000d979c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d97a4:	6de7 000d 6e1d 000d 795d 000d 6dd7 000d     .m...n..]y...m..

000d97b4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d97bc:	6de5 000d 6e2b 000d 7185 000d 6e49 000d     .m..+n...q..In..

000d97cc <_ZTVN5spark12NetworkClassE>:
	...
   d97d4:	7d39 000d 7d43 000d 7d4d 000d 7d57 000d     9}..C}..M}..W}..
   d97e4:	7d61 000d 7d6d 000d 7d79 000d 7d81 000d     a}..m}..y}...}..
   d97f4:	7d89 000d 7d95 000d 7d9d 000d 7da7 000d     .}...}...}...}..
   d9804:	7db1 000d                                   .}..

000d9808 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9808:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d9818:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9828:	6d69 0065                                   ime.

000d982c <_ZTV11USARTSerial>:
	...
   d9834:	8349 000d 83b7 000d 838f 000d 7e99 000d     I............~..
   d9844:	835f 000d 837b 000d 836d 000d 8389 000d     _...{...m.......
   d9854:	834b 000d 8351 000d                         K...Q...

000d985c <_ZTV9USBSerial>:
	...
   d9864:	8457 000d 84bf 000d 8495 000d 7e99 000d     W............~..
   d9874:	8487 000d 8459 000d 8469 000d 84b9 000d     ....Y...i.......
   d9884:	8479 000d 8451 000d                         y...Q...

000d988c <_ZSt7nothrow>:
	...

000d988d <_ctype_>:
   d988d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d989d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d98ad:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d98bd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d98cd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d98dd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d98ed:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d98fd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d990d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d998e <link_const_variable_data_end>:
	...

000d9990 <link_constructors_location>:
   d9990:	000d4799 	.word	0x000d4799
   d9994:	000d5e61 	.word	0x000d5e61
   d9998:	000d5f4d 	.word	0x000d5f4d
   d999c:	000d66b5 	.word	0x000d66b5
   d99a0:	000d7a11 	.word	0x000d7a11
   d99a4:	000d7e85 	.word	0x000d7e85
   d99a8:	000d7fc1 	.word	0x000d7fc1
   d99ac:	000d8311 	.word	0x000d8311
   d99b0:	000d8335 	.word	0x000d8335

000d99b4 <link_constructors_end>:
	...
