
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/2.2.0/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ca0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7cc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e400  000d7cc4  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000037c  2003e474  2003e474  0002e474  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7d38  000d7d38  00027d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7d60  000d7d60  00027d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001125a7  00000000  00000000  00027d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000123df  00000000  00000000  0013a30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027505  00000000  00000000  0014c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002328  00000000  00000000  00173bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006958  00000000  00000000  00175f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033c87  00000000  00000000  0017c86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f591  00000000  00000000  001b04f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106488  00000000  00000000  001dfa87  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006510  00000000  00000000  002e5f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 faa1 	bl	d7578 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fac3 	bl	d75c8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e400 	.word	0x2003e400
   d404c:	000d7cc4 	.word	0x000d7cc4
   d4050:	2003e474 	.word	0x2003e474
   d4054:	2003e474 	.word	0x2003e474
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fd95 	bl	d6b90 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7c90 	.word	0x000d7c90
   d4080:	000d7cb4 	.word	0x000d7cb4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b848 	b.w	d4118 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f855 	bl	d4138 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bd35 	b.w	d6b00 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bde9 	b.w	d4c6c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bdef 	b.w	d4c7c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fd3c 	bl	d4b24 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d49c5 	.word	0x000d49c5

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f001 fa40 	bl	d555c <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f001 fc3e 	bl	d595e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e2:	f002 fcc5 	bl	d6a70 <_Z16_fetch_usbserialv>
   d40e6:	f002 fcb7 	bl	d6a58 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f001 fb21 	bl	d5738 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d7918 	.word	0x000d7918
   d4100:	000d7900 	.word	0x000d7900

000d4104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark16SerialLogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f002 fd70 	bl	d6bf4 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <setup>:

SerialLogHandler logHandler;

TinyGPSPlus gps;

void setup() {
   d4118:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d411a:	f002 fca9 	bl	d6a70 <_Z16_fetch_usbserialv>
   d411e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4122:	f002 fc95 	bl	d6a50 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d4126:	f002 fc1b 	bl	d6960 <_Z22__fetch_global_Serial1v>
}
   d412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.begin(9600);
   d412e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4132:	f002 bc0f 	b.w	d6954 <_ZN11USARTSerial5beginEm>
	...

000d4138 <loop>:

void loop() {
   d4138:	b5f0      	push	{r4, r5, r6, r7, lr}

    while(Serial1.available())
    {
        if(gps.encode(Serial1.read()))
   d413a:	4c3b      	ldr	r4, [pc, #236]	; (d4228 <loop+0xf0>)
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   d413c:	4f3b      	ldr	r7, [pc, #236]	; (d422c <loop+0xf4>)
void loop() {
   d413e:	b085      	sub	sp, #20
   d4140:	2600      	movs	r6, #0
    while(Serial1.available())
   d4142:	f002 fc0d 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d4146:	6803      	ldr	r3, [r0, #0]
   d4148:	691b      	ldr	r3, [r3, #16]
   d414a:	4798      	blx	r3
   d414c:	2800      	cmp	r0, #0
   d414e:	d069      	beq.n	d4224 <loop+0xec>
        if(gps.encode(Serial1.read()))
   d4150:	f002 fc06 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d4154:	6803      	ldr	r3, [r0, #0]
   d4156:	695b      	ldr	r3, [r3, #20]
   d4158:	4798      	blx	r3
   d415a:	b2c1      	uxtb	r1, r0
   d415c:	4620      	mov	r0, r4
   d415e:	f000 fbb5 	bl	d48cc <_ZN11TinyGPSPlus6encodeEc>
   d4162:	2800      	cmp	r0, #0
   d4164:	d0ed      	beq.n	d4142 <loop+0xa>
        {
            String msg = Serial1.readStringUntil('\r');
   d4166:	f002 fbfb 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d416a:	220d      	movs	r2, #13
   d416c:	4601      	mov	r1, r0
   d416e:	4668      	mov	r0, sp
   d4170:	f002 fa9e 	bl	d66b0 <_ZN6Stream15readStringUntilEc>
            Serial.println(msg);
   d4174:	f002 fc7c 	bl	d6a70 <_Z16_fetch_usbserialv>
   d4178:	9900      	ldr	r1, [sp, #0]
   d417a:	f002 f950 	bl	d641e <_ZN5Print7printlnEPKc>

            if (gps.sentencesWithFix() > 0) {
   d417e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4182:	2b00      	cmp	r3, #0
   d4184:	d04a      	beq.n	d421c <loop+0xe4>
                Serial.print("HAS FIX="); Serial.println(gps.sentencesWithFix());
   d4186:	f002 fc73 	bl	d6a70 <_Z16_fetch_usbserialv>
   d418a:	4929      	ldr	r1, [pc, #164]	; (d4230 <loop+0xf8>)
   d418c:	f002 f934 	bl	d63f8 <_ZN5Print5printEPKc>
   d4190:	f002 fc6e 	bl	d6a70 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4194:	220a      	movs	r2, #10
   d4196:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
   d419a:	4605      	mov	r5, r0
   d419c:	f002 f949 	bl	d6432 <_ZN5Print11printNumberEmh>
        n += println();
   d41a0:	4628      	mov	r0, r5
   d41a2:	f002 f930 	bl	d6406 <_ZN5Print7printlnEv>
                Serial.print("LAT="); Serial.println(gps.location.lat());
   d41a6:	f002 fc63 	bl	d6a70 <_Z16_fetch_usbserialv>
   d41aa:	4922      	ldr	r1, [pc, #136]	; (d4234 <loop+0xfc>)
   d41ac:	f002 f924 	bl	d63f8 <_ZN5Print5printEPKc>
   d41b0:	f002 fc5e 	bl	d6a70 <_Z16_fetch_usbserialv>
   d41b4:	4605      	mov	r5, r0
   d41b6:	4620      	mov	r0, r4
   d41b8:	f000 f9ba 	bl	d4530 <_ZN15TinyGPSLocation3latEv>
   d41bc:	2102      	movs	r1, #2
   d41be:	4628      	mov	r0, r5
   d41c0:	f002 fa1e 	bl	d6600 <_ZN5Print7printlnEdi>
                Serial.print("LONG="); Serial.println(gps.location.lng(), 6);
   d41c4:	f002 fc54 	bl	d6a70 <_Z16_fetch_usbserialv>
   d41c8:	491b      	ldr	r1, [pc, #108]	; (d4238 <loop+0x100>)
   d41ca:	f002 f915 	bl	d63f8 <_ZN5Print5printEPKc>
   d41ce:	f002 fc4f 	bl	d6a70 <_Z16_fetch_usbserialv>
   d41d2:	4605      	mov	r5, r0
   d41d4:	4620      	mov	r0, r4
   d41d6:	f000 f9cf 	bl	d4578 <_ZN15TinyGPSLocation3lngEv>
   d41da:	2106      	movs	r1, #6
   d41dc:	4628      	mov	r0, r5
   d41de:	f002 fa0f 	bl	d6600 <_ZN5Print7printlnEdi>
                Serial.print("ALT="); Serial.println(gps.altitude.meters(), 6);
   d41e2:	f002 fc45 	bl	d6a70 <_Z16_fetch_usbserialv>
   d41e6:	4915      	ldr	r1, [pc, #84]	; (d423c <loop+0x104>)
   d41e8:	f002 f906 	bl	d63f8 <_ZN5Print5printEPKc>
   d41ec:	f002 fc40 	bl	d6a70 <_Z16_fetch_usbserialv>
   int32_t value()         { updated = false; return val; }
   d41f0:	2300      	movs	r3, #0
   d41f2:	4605      	mov	r5, r0
   d41f4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   double meters()       { return value() / 100.0; }
   d41f8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d41fc:	f002 fe50 	bl	d6ea0 <__aeabi_i2d>
   d4200:	4632      	mov	r2, r6
   d4202:	463b      	mov	r3, r7
   d4204:	f002 ffe0 	bl	d71c8 <__aeabi_ddiv>
   d4208:	ec41 0b10 	vmov	d0, r0, r1
   d420c:	2106      	movs	r1, #6
   d420e:	4628      	mov	r0, r5
   d4210:	f002 f9f6 	bl	d6600 <_ZN5Print7printlnEdi>
                delay(4*1000);
   d4214:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d4218:	f000 fd50 	bl	d4cbc <delay>
            String msg = Serial1.readStringUntil('\r');
   d421c:	4668      	mov	r0, sp
   d421e:	f002 fa5f 	bl	d66e0 <_ZN6StringD1Ev>
   d4222:	e78e      	b.n	d4142 <loop+0xa>

            }

        }
    }  
}
   d4224:	b005      	add	sp, #20
   d4226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4228:	2003e474 	.word	0x2003e474
   d422c:	40590000 	.word	0x40590000
   d4230:	000d78dc 	.word	0x000d78dc
   d4234:	000d78e5 	.word	0x000d78e5
   d4238:	000d78ea 	.word	0x000d78ea
   d423c:	000d78f0 	.word	0x000d78f0

000d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4240:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4242:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4246:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4248:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d424a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d424e:	42ae      	cmp	r6, r5
   d4250:	d004      	beq.n	d425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4252:	4628      	mov	r0, r5
   d4254:	f002 fa44 	bl	d66e0 <_ZN6StringD1Ev>
   d4258:	3514      	adds	r5, #20
   d425a:	e7f8      	b.n	d424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d425c:	6820      	ldr	r0, [r4, #0]
   d425e:	f000 fd0d 	bl	d4c7c <free>
    AllocatorT::free(data_);
}
   d4262:	4620      	mov	r0, r4
   d4264:	bd70      	pop	{r4, r5, r6, pc}

000d4266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4266:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d426a:	4604      	mov	r4, r0
   d426c:	460d      	mov	r5, r1
   d426e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4270:	d916      	bls.n	d42a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4272:	4290      	cmp	r0, r2
   d4274:	d215      	bcs.n	d42a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4276:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d427a:	1a75      	subs	r5, r6, r1
   d427c:	f1a1 0714 	sub.w	r7, r1, #20
   d4280:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4282:	42b7      	cmp	r7, r6
   d4284:	d01c      	beq.n	d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4286:	b12c      	cbz	r4, d4294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4288:	4631      	mov	r1, r6
   d428a:	4620      	mov	r0, r4
   d428c:	f002 faa4 	bl	d67d8 <_ZN6StringC1EOS_>
   d4290:	7c33      	ldrb	r3, [r6, #16]
   d4292:	7423      	strb	r3, [r4, #16]
   d4294:	4630      	mov	r0, r6
   d4296:	f002 fa23 	bl	d66e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d429a:	3e14      	subs	r6, #20
   d429c:	3c14      	subs	r4, #20
   d429e:	e7f0      	b.n	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d42a0:	d00e      	beq.n	d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d42a2:	42b5      	cmp	r5, r6
   d42a4:	d00c      	beq.n	d42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d42a6:	b12c      	cbz	r4, d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d42a8:	4629      	mov	r1, r5
   d42aa:	4620      	mov	r0, r4
   d42ac:	f002 fa94 	bl	d67d8 <_ZN6StringC1EOS_>
   d42b0:	7c2b      	ldrb	r3, [r5, #16]
   d42b2:	7423      	strb	r3, [r4, #16]
   d42b4:	4628      	mov	r0, r5
   d42b6:	f002 fa13 	bl	d66e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d42ba:	3514      	adds	r5, #20
   d42bc:	3414      	adds	r4, #20
   d42be:	e7f0      	b.n	d42a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d42c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d42c6:	2300      	movs	r3, #0
   d42c8:	e9c0 3300 	strd	r3, r3, [r0]
   d42cc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42ce:	684f      	ldr	r7, [r1, #4]
   d42d0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42d2:	4604      	mov	r4, r0
   d42d4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42d6:	dd23      	ble.n	d4320 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d42d8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d42dc:	fb08 f007 	mul.w	r0, r8, r7
   d42e0:	f000 fcc4 	bl	d4c6c <malloc>
            if (!d) {
   d42e4:	4605      	mov	r5, r0
   d42e6:	b1d8      	cbz	r0, d4320 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d42e8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d42ec:	fb08 1202 	mla	r2, r8, r2, r1
   d42f0:	f7ff ffb9 	bl	d4266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d42f4:	6820      	ldr	r0, [r4, #0]
   d42f6:	f000 fcc1 	bl	d4c7c <free>
        data_ = d;
   d42fa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d42fc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d42fe:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4302:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4306:	45b8      	cmp	r8, r7
   d4308:	d008      	beq.n	d431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d430a:	4639      	mov	r1, r7
   d430c:	4628      	mov	r0, r5
   d430e:	f002 fa7d 	bl	d680c <_ZN6StringC1ERKS_>
   d4312:	7c3b      	ldrb	r3, [r7, #16]
   d4314:	742b      	strb	r3, [r5, #16]
   d4316:	3714      	adds	r7, #20
   d4318:	3514      	adds	r5, #20
   d431a:	e7f4      	b.n	d4306 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d431c:	6873      	ldr	r3, [r6, #4]
   d431e:	6063      	str	r3, [r4, #4]
}
   d4320:	4620      	mov	r0, r4
   d4322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4328 <_GLOBAL__sub_I_logHandler>:
   d4328:	b570      	push	{r4, r5, r6, lr}
   d432a:	b08c      	sub	sp, #48	; 0x30
        capacity_(0) {
   d432c:	2300      	movs	r3, #0
   d432e:	e9cd 3300 	strd	r3, r3, [sp]
   d4332:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4334:	f002 fb9c 	bl	d6a70 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4338:	4c1b      	ldr	r4, [pc, #108]	; (d43a8 <_GLOBAL__sub_I_logHandler+0x80>)
   d433a:	4605      	mov	r5, r0
   d433c:	4669      	mov	r1, sp
   d433e:	a803      	add	r0, sp, #12
   d4340:	f7ff ffbf 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4344:	4626      	mov	r6, r4
        stream_(&stream) {
   d4346:	a903      	add	r1, sp, #12
   d4348:	a806      	add	r0, sp, #24
   d434a:	f7ff ffba 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d434e:	4b17      	ldr	r3, [pc, #92]	; (d43ac <_GLOBAL__sub_I_logHandler+0x84>)
   d4350:	f846 3b04 	str.w	r3, [r6], #4
   d4354:	a906      	add	r1, sp, #24
   d4356:	a809      	add	r0, sp, #36	; 0x24
   d4358:	f7ff ffb3 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d435c:	aa09      	add	r2, sp, #36	; 0x24
   d435e:	211e      	movs	r1, #30
   d4360:	4630      	mov	r0, r6
   d4362:	f001 fc56 	bl	d5c12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4366:	a809      	add	r0, sp, #36	; 0x24
   d4368:	f7ff ff6a 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d436c:	a806      	add	r0, sp, #24
   d436e:	f7ff ff67 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4372:	4b0f      	ldr	r3, [pc, #60]	; (d43b0 <_GLOBAL__sub_I_logHandler+0x88>)
   d4374:	6023      	str	r3, [r4, #0]
   d4376:	a803      	add	r0, sp, #12
   d4378:	6225      	str	r5, [r4, #32]
   d437a:	f7ff ff61 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d437e:	4b0d      	ldr	r3, [pc, #52]	; (d43b4 <_GLOBAL__sub_I_logHandler+0x8c>)
   d4380:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4382:	f002 fb75 	bl	d6a70 <_Z16_fetch_usbserialv>
   d4386:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d438a:	f002 fb61 	bl	d6a50 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d438e:	f001 f8e5 	bl	d555c <_ZN5spark10LogManager8instanceEv>
   d4392:	4621      	mov	r1, r4
   d4394:	f001 fbcf 	bl	d5b36 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4398:	4668      	mov	r0, sp
   d439a:	f7ff ff51 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   d439e:	4806      	ldr	r0, [pc, #24]	; (d43b8 <_GLOBAL__sub_I_logHandler+0x90>)
   d43a0:	f000 f80c 	bl	d43bc <_ZN11TinyGPSPlusC1Ev>
}
   d43a4:	b00c      	add	sp, #48	; 0x30
   d43a6:	bd70      	pop	{r4, r5, r6, pc}
   d43a8:	2003e54c 	.word	0x2003e54c
   d43ac:	000d7900 	.word	0x000d7900
   d43b0:	000d7a6c 	.word	0x000d7a6c
   d43b4:	000d7918 	.word	0x000d7918
   d43b8:	2003e474 	.word	0x2003e474

000d43bc <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   d43bc:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d43be:	2102      	movs	r1, #2
   d43c0:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d43c4:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d43c6:	8082      	strh	r2, [r0, #4]
   d43c8:	6082      	str	r2, [r0, #8]
   d43ca:	7302      	strb	r2, [r0, #12]
   d43cc:	8202      	strh	r2, [r0, #16]
   d43ce:	6142      	str	r2, [r0, #20]
   d43d0:	7602      	strb	r2, [r0, #24]
   d43d2:	8382      	strh	r2, [r0, #28]
   d43d4:	6202      	str	r2, [r0, #32]
   d43d6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d43da:	8502      	strh	r2, [r0, #40]	; 0x28
   d43dc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d43de:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   d43e2:	8702      	strh	r2, [r0, #56]	; 0x38
   d43e4:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   d43e6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d43ea:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d43ec:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d43f0:	6602      	str	r2, [r0, #96]	; 0x60
   d43f2:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d43f6:	6702      	str	r2, [r0, #112]	; 0x70
   d43f8:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d43fc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   d4400:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d4404:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4408:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d440c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d4410:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4414:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d4418:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d441c:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d4420:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d4424:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d4428:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d442c:	4770      	bx	lr

000d442e <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d442e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4432:	2b05      	cmp	r3, #5
   d4434:	d802      	bhi.n	d443c <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4436:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d443a:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d443c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d4440:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d4442:	bf94      	ite	ls
   d4444:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4448:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d444c:	4770      	bx	lr

000d444e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d444e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d4450:	7805      	ldrb	r5, [r0, #0]
{
   d4452:	4604      	mov	r4, r0
  if (negative) ++term;
   d4454:	2d2d      	cmp	r5, #45	; 0x2d
   d4456:	bf08      	it	eq
   d4458:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d445a:	4620      	mov	r0, r4
   d445c:	f003 f888 	bl	d7570 <atol>
   d4460:	2364      	movs	r3, #100	; 0x64
   d4462:	4358      	muls	r0, r3
   d4464:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4466:	f814 3b01 	ldrb.w	r3, [r4], #1
   d446a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d446e:	2909      	cmp	r1, #9
   d4470:	d9f8      	bls.n	d4464 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d4472:	2b2e      	cmp	r3, #46	; 0x2e
   d4474:	d10b      	bne.n	d448e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d4476:	7853      	ldrb	r3, [r2, #1]
   d4478:	3b30      	subs	r3, #48	; 0x30
   d447a:	2b09      	cmp	r3, #9
   d447c:	d807      	bhi.n	d448e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d447e:	210a      	movs	r1, #10
   d4480:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d4484:	7893      	ldrb	r3, [r2, #2]
   d4486:	3b30      	subs	r3, #48	; 0x30
   d4488:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d448a:	bf98      	it	ls
   d448c:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d448e:	2d2d      	cmp	r5, #45	; 0x2d
   d4490:	bf08      	it	eq
   d4492:	4240      	negeq	r0, r0
}
   d4494:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4498 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d4498:	b538      	push	{r3, r4, r5, lr}
   d449a:	460d      	mov	r5, r1
   d449c:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d449e:	f003 f867 	bl	d7570 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d44a2:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d44a4:	4b13      	ldr	r3, [pc, #76]	; (d44f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d44a6:	fbb0 f1f2 	udiv	r1, r0, r2
   d44aa:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d44ae:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d44b0:	8029      	strh	r1, [r5, #0]
   d44b2:	4620      	mov	r0, r4

  while (isdigit(*term))
   d44b4:	7802      	ldrb	r2, [r0, #0]
   d44b6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d44ba:	2c09      	cmp	r4, #9
   d44bc:	4601      	mov	r1, r0
   d44be:	f100 0001 	add.w	r0, r0, #1
   d44c2:	d9f7      	bls.n	d44b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d44c4:	2a2e      	cmp	r2, #46	; 0x2e
   d44c6:	d10b      	bne.n	d44e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d44c8:	480a      	ldr	r0, [pc, #40]	; (d44f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d44ca:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d44cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d44d0:	3a30      	subs	r2, #48	; 0x30
   d44d2:	2a09      	cmp	r2, #9
   d44d4:	d804      	bhi.n	d44e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d44d6:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d44da:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d44de:	e7f5      	b.n	d44cc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d44e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d44e4:	3301      	adds	r3, #1
   d44e6:	2203      	movs	r2, #3
   d44e8:	fbb3 f3f2 	udiv	r3, r3, r2
   d44ec:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d44ee:	2300      	movs	r3, #0
   d44f0:	722b      	strb	r3, [r5, #8]
}
   d44f2:	bd38      	pop	{r3, r4, r5, pc}
   d44f4:	00989680 	.word	0x00989680

000d44f8 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d44f8:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d44fa:	4603      	mov	r3, r0
{
   d44fc:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d44fe:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d4502:	6042      	str	r2, [r0, #4]
   d4504:	685a      	ldr	r2, [r3, #4]
   d4506:	6082      	str	r2, [r0, #8]
   d4508:	7a1b      	ldrb	r3, [r3, #8]
   d450a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d450c:	4603      	mov	r3, r0
   d450e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d4512:	6102      	str	r2, [r0, #16]
   d4514:	685a      	ldr	r2, [r3, #4]
   d4516:	6142      	str	r2, [r0, #20]
   d4518:	7a1b      	ldrb	r3, [r3, #8]
   d451a:	7603      	strb	r3, [r0, #24]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d451c:	f000 fa5a 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4520:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4524:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4526:	8023      	strh	r3, [r4, #0]
}
   d4528:	bd10      	pop	{r4, pc}
   d452a:	0000      	movs	r0, r0
   d452c:	0000      	movs	r0, r0
	...

000d4530 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4530:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4532:	2300      	movs	r3, #0
{
   d4534:	4604      	mov	r4, r0
   updated = false;
   d4536:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4538:	6880      	ldr	r0, [r0, #8]
   d453a:	f002 fca1 	bl	d6e80 <__aeabi_ui2d>
   d453e:	a30c      	add	r3, pc, #48	; (adr r3, d4570 <_ZN15TinyGPSLocation3latEv+0x40>)
   d4540:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4544:	f002 fe40 	bl	d71c8 <__aeabi_ddiv>
   d4548:	4606      	mov	r6, r0
   d454a:	88a0      	ldrh	r0, [r4, #4]
   d454c:	460f      	mov	r7, r1
   d454e:	f002 fca7 	bl	d6ea0 <__aeabi_i2d>
   d4552:	460b      	mov	r3, r1
   d4554:	4602      	mov	r2, r0
   d4556:	4639      	mov	r1, r7
   d4558:	4630      	mov	r0, r6
   d455a:	f002 fb55 	bl	d6c08 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d455e:	7b23      	ldrb	r3, [r4, #12]
   d4560:	b113      	cbz	r3, d4568 <_ZN15TinyGPSLocation3latEv+0x38>
   d4562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4566:	4619      	mov	r1, r3
}
   d4568:	ec41 0b10 	vmov	d0, r0, r1
   d456c:	bdd0      	pop	{r4, r6, r7, pc}
   d456e:	bf00      	nop
   d4570:	00000000 	.word	0x00000000
   d4574:	41cdcd65 	.word	0x41cdcd65

000d4578 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d4578:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d457a:	2300      	movs	r3, #0
{
   d457c:	4604      	mov	r4, r0
   updated = false;
   d457e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d4580:	6940      	ldr	r0, [r0, #20]
   d4582:	f002 fc7d 	bl	d6e80 <__aeabi_ui2d>
   d4586:	a30c      	add	r3, pc, #48	; (adr r3, d45b8 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d4588:	e9d3 2300 	ldrd	r2, r3, [r3]
   d458c:	f002 fe1c 	bl	d71c8 <__aeabi_ddiv>
   d4590:	4606      	mov	r6, r0
   d4592:	8a20      	ldrh	r0, [r4, #16]
   d4594:	460f      	mov	r7, r1
   d4596:	f002 fc83 	bl	d6ea0 <__aeabi_i2d>
   d459a:	460b      	mov	r3, r1
   d459c:	4602      	mov	r2, r0
   d459e:	4639      	mov	r1, r7
   d45a0:	4630      	mov	r0, r6
   d45a2:	f002 fb31 	bl	d6c08 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d45a6:	7e23      	ldrb	r3, [r4, #24]
   d45a8:	b113      	cbz	r3, d45b0 <_ZN15TinyGPSLocation3lngEv+0x38>
   d45aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d45ae:	4619      	mov	r1, r3
}
   d45b0:	ec41 0b10 	vmov	d0, r0, r1
   d45b4:	bdd0      	pop	{r4, r6, r7, pc}
   d45b6:	bf00      	nop
   d45b8:	00000000 	.word	0x00000000
   d45bc:	41cdcd65 	.word	0x41cdcd65

000d45c0 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d45c0:	b510      	push	{r4, lr}
   date = newDate;
   d45c2:	6883      	ldr	r3, [r0, #8]
   d45c4:	6043      	str	r3, [r0, #4]
{
   d45c6:	4604      	mov	r4, r0
   d45c8:	f000 fa04 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d45cc:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d45d0:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d45d2:	8023      	strh	r3, [r4, #0]
}
   d45d4:	bd10      	pop	{r4, pc}

000d45d6 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d45d6:	b510      	push	{r4, lr}
   time = newTime;
   d45d8:	6883      	ldr	r3, [r0, #8]
   d45da:	6043      	str	r3, [r0, #4]
{
   d45dc:	4604      	mov	r4, r0
   d45de:	f000 f9f9 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d45e2:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d45e6:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d45e8:	8023      	strh	r3, [r4, #0]
}
   d45ea:	bd10      	pop	{r4, pc}

000d45ec <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d45ec:	b510      	push	{r4, lr}
   d45ee:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d45f0:	4608      	mov	r0, r1
   d45f2:	f7ff ff2c 	bl	d444e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d45f6:	60a0      	str	r0, [r4, #8]
}
   d45f8:	bd10      	pop	{r4, pc}

000d45fa <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d45fa:	b510      	push	{r4, lr}
   d45fc:	4604      	mov	r4, r0
   newDate = atol(term);
   d45fe:	4608      	mov	r0, r1
   d4600:	f002 ffb6 	bl	d7570 <atol>
   d4604:	60a0      	str	r0, [r4, #8]
}
   d4606:	bd10      	pop	{r4, pc}

000d4608 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4608:	b510      	push	{r4, lr}
   val = newval;
   d460a:	68c3      	ldr	r3, [r0, #12]
   d460c:	6083      	str	r3, [r0, #8]
{
   d460e:	4604      	mov	r4, r0
   d4610:	f000 f9e0 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4614:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4618:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d461a:	8023      	strh	r3, [r4, #0]
}
   d461c:	bd10      	pop	{r4, pc}

000d461e <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d461e:	b510      	push	{r4, lr}
   d4620:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d4622:	4608      	mov	r0, r1
   d4624:	f7ff ff13 	bl	d444e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4628:	60e0      	str	r0, [r4, #12]
}
   d462a:	bd10      	pop	{r4, pc}

000d462c <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d462c:	b510      	push	{r4, lr}
   val = newval;
   d462e:	68c3      	ldr	r3, [r0, #12]
   d4630:	6083      	str	r3, [r0, #8]
{
   d4632:	4604      	mov	r4, r0
   d4634:	f000 f9ce 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4638:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d463c:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d463e:	8023      	strh	r3, [r4, #0]
}
   d4640:	bd10      	pop	{r4, pc}

000d4642 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d4642:	b510      	push	{r4, lr}
   d4644:	4604      	mov	r4, r0
   newval = atol(term);
   d4646:	4608      	mov	r0, r1
   d4648:	f002 ff92 	bl	d7570 <atol>
   d464c:	60e0      	str	r0, [r4, #12]
}
   d464e:	bd10      	pop	{r4, pc}

000d4650 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4650:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d4652:	4601      	mov	r1, r0
{
   d4654:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d4656:	3010      	adds	r0, #16
   d4658:	f003 f803 	bl	d7662 <strcpy>
   d465c:	f000 f9ba 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4660:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4664:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d4666:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4668:	bd10      	pop	{r4, pc}

000d466a <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d466a:	2210      	movs	r2, #16
   d466c:	f003 b81b 	b.w	d76a6 <strncpy>

000d4670 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d4672:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d4676:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d4678:	2d00      	cmp	r5, #0
   d467a:	d064      	beq.n	d4746 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d467c:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d4680:	f7ff fed5 	bl	d442e <_ZN11TinyGPSPlus7fromHexEc>
   d4684:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4688:	4602      	mov	r2, r0
   d468a:	4620      	mov	r0, r4
   d468c:	f7ff fecf 	bl	d442e <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d4690:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4694:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d4698:	b2c0      	uxtb	r0, r0
   d469a:	4283      	cmp	r3, r0
   d469c:	d14b      	bne.n	d4736 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d469e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d46a2:	3301      	adds	r3, #1
   d46a4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d46a8:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d46ac:	b123      	cbz	r3, d46b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d46ae:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d46b2:	3301      	adds	r3, #1
   d46b4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d46b8:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d46bc:	b333      	cbz	r3, d470c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d46be:	2b01      	cmp	r3, #1
   d46c0:	d115      	bne.n	d46ee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d46c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d46c6:	f7ff ff7b 	bl	d45c0 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d46ca:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d46ce:	f7ff ff82 	bl	d45d6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d46d2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d46d6:	b153      	cbz	r3, d46ee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ff0d 	bl	d44f8 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d46de:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d46e2:	f7ff ff91 	bl	d4608 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d46e6:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d46ea:	f7ff ff8d 	bl	d4608 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d46ee:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d46f2:	b336      	cbz	r6, d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d46f4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d46f8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d46fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d46fc:	f002 ffa7 	bl	d764e <strcmp>
   d4700:	b9f8      	cbnz	r0, d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d4702:	4630      	mov	r0, r6
   d4704:	f7ff ffa4 	bl	d4650 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4708:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d470a:	e7f2      	b.n	d46f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d470c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4710:	f7ff ff61 	bl	d45d6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4714:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4718:	b133      	cbz	r3, d4728 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d471a:	4620      	mov	r0, r4
   d471c:	f7ff feec 	bl	d44f8 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4720:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4724:	f7ff ff70 	bl	d4608 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4728:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d472c:	f7ff ff7e 	bl	d462c <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4730:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4734:	e7d9      	b.n	d46ea <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d4736:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d473a:	3301      	adds	r3, #1
   d473c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4740:	2500      	movs	r5, #0
}
   d4742:	4628      	mov	r0, r5
   d4744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d4746:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d474a:	bb6a      	cbnz	r2, d47a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   d474c:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   d4750:	495a      	ldr	r1, [pc, #360]	; (d48bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   d4752:	4630      	mov	r0, r6
   d4754:	f002 ff7b 	bl	d764e <strcmp>
   d4758:	b120      	cbz	r0, d4764 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   d475a:	4959      	ldr	r1, [pc, #356]	; (d48c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   d475c:	4630      	mov	r0, r6
   d475e:	f002 ff76 	bl	d764e <strcmp>
   d4762:	b998      	cbnz	r0, d478c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d4764:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d4766:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d476a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d476e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4772:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   d4776:	2f00      	cmp	r7, #0
   d4778:	d0e3      	beq.n	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d477c:	4631      	mov	r1, r6
   d477e:	f002 ff66 	bl	d764e <strcmp>
   d4782:	2800      	cmp	r0, #0
   d4784:	f280 8094 	bge.w	d48b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   d4788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d478a:	e7f0      	b.n	d476e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   d478c:	494d      	ldr	r1, [pc, #308]	; (d48c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   d478e:	4630      	mov	r0, r6
   d4790:	f002 ff5d 	bl	d764e <strcmp>
   d4794:	b120      	cbz	r0, d47a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   d4796:	494c      	ldr	r1, [pc, #304]	; (d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   d4798:	4630      	mov	r0, r6
   d479a:	f002 ff58 	bl	d764e <strcmp>
   d479e:	b908      	cbnz	r0, d47a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d47a0:	2300      	movs	r3, #0
   d47a2:	e7e0      	b.n	d4766 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   d47a4:	2302      	movs	r3, #2
   d47a6:	e7de      	b.n	d4766 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d47a8:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d47ac:	2902      	cmp	r1, #2
   d47ae:	d023      	beq.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d47b0:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d47b4:	b303      	cbz	r3, d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   d47b6:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d47ba:	3a01      	subs	r2, #1
   d47bc:	2a28      	cmp	r2, #40	; 0x28
   d47be:	d81b      	bhi.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d47c0:	e8df f002 	tbb	[pc, r2]
   d47c4:	49423b15 	.word	0x49423b15
   d47c8:	6e68634c 	.word	0x6e68634c
   d47cc:	1a1a1a72 	.word	0x1a1a1a72
   d47d0:	1a1a1a1a 	.word	0x1a1a1a1a
   d47d4:	1a1a1a1a 	.word	0x1a1a1a1a
   d47d8:	1a1a1a1a 	.word	0x1a1a1a1a
   d47dc:	1a1a1a1a 	.word	0x1a1a1a1a
   d47e0:	1a1a1a1a 	.word	0x1a1a1a1a
   d47e4:	423b3415 	.word	0x423b3415
   d47e8:	59534c49 	.word	0x59534c49
   d47ec:	5d          	.byte	0x5d
   d47ed:	00          	.byte	0x00
      time.setTime(term);
   d47ee:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47f2:	3048      	adds	r0, #72	; 0x48
   d47f4:	f7ff fefa 	bl	d45ec <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d47f8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d47fc:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4800:	2e00      	cmp	r6, #0
   d4802:	d09e      	beq.n	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4804:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4808:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d480a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d480c:	f002 ff1f 	bl	d764e <strcmp>
   d4810:	2800      	cmp	r0, #0
   d4812:	d196      	bne.n	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4814:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d4816:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d481a:	429a      	cmp	r2, r3
   d481c:	dc91      	bgt.n	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d481e:	d103      	bne.n	d4828 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   d4820:	4639      	mov	r1, r7
   d4822:	4630      	mov	r0, r6
   d4824:	f7ff ff21 	bl	d466a <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4828:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d482a:	e7e9      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   d482c:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4830:	4243      	negs	r3, r0
   d4832:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d4834:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4838:	e7de      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d483a:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d483e:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d4842:	f7ff fe29 	bl	d4498 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d4846:	e7d7      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   d4848:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d484c:	424b      	negs	r3, r1
   d484e:	414b      	adcs	r3, r1
   d4850:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d4854:	e7d0      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4856:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d485a:	e7f0      	b.n	d483e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   d485c:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4860:	4253      	negs	r3, r2
   d4862:	4153      	adcs	r3, r2
   d4864:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4868:	e7c6      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   d486a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d486e:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4870:	f7ff fed5 	bl	d461e <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d4874:	e7c0      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   d4876:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d487a:	3068      	adds	r0, #104	; 0x68
   d487c:	e7f8      	b.n	d4870 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   d487e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4882:	3038      	adds	r0, #56	; 0x38
   d4884:	f7ff feb9 	bl	d45fa <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4888:	e7b6      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   d488a:	2b30      	cmp	r3, #48	; 0x30
   d488c:	bf94      	ite	ls
   d488e:	2300      	movls	r3, #0
   d4890:	2301      	movhi	r3, #1
   d4892:	e7cf      	b.n	d4834 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   d4894:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4898:	3088      	adds	r0, #136	; 0x88
   d489a:	f7ff fed2 	bl	d4642 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d489e:	e7ab      	b.n	d47f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   d48a0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d48a4:	3098      	adds	r0, #152	; 0x98
   d48a6:	e7e3      	b.n	d4870 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   d48a8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d48ac:	3078      	adds	r0, #120	; 0x78
   d48ae:	e7df      	b.n	d4870 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d48b0:	f43f af47 	beq.w	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d48b4:	2300      	movs	r3, #0
   d48b6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d48ba:	e742      	b.n	d4742 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d48bc:	000d7928 	.word	0x000d7928
   d48c0:	000d792e 	.word	0x000d792e
   d48c4:	000d7934 	.word	0x000d7934
   d48c8:	000d793a 	.word	0x000d793a

000d48cc <_ZN11TinyGPSPlus6encodeEc>:
{
   d48cc:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d48ce:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d48d2:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d48d4:	f103 0301 	add.w	r3, r3, #1
{
   d48d8:	4604      	mov	r4, r0
   d48da:	460d      	mov	r5, r1
  ++encodedCharCount;
   d48dc:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d48e0:	d03a      	beq.n	d4958 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d48e2:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d48e6:	d814      	bhi.n	d4912 <_ZN11TinyGPSPlus6encodeEc+0x46>
   d48e8:	290a      	cmp	r1, #10
   d48ea:	d01c      	beq.n	d4926 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d48ec:	290d      	cmp	r1, #13
   d48ee:	d01a      	beq.n	d4926 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d48f0:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d48f2:	bf9f      	itttt	ls
   d48f4:	1c5a      	addls	r2, r3, #1
   d48f6:	191b      	addls	r3, r3, r4
   d48f8:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d48fc:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4900:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d4904:	bb98      	cbnz	r0, d496e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d4906:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d490a:	404d      	eors	r5, r1
   d490c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4910:	e021      	b.n	d4956 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d4912:	292a      	cmp	r1, #42	; 0x2a
   d4914:	d007      	beq.n	d4926 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4916:	292c      	cmp	r1, #44	; 0x2c
   d4918:	d1ea      	bne.n	d48f0 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d491a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d491e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4922:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d4926:	2b0e      	cmp	r3, #14
   d4928:	f04f 0000 	mov.w	r0, #0
   d492c:	d805      	bhi.n	d493a <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d492e:	4423      	add	r3, r4
   d4930:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d4934:	4620      	mov	r0, r4
   d4936:	f7ff fe9b 	bl	d4670 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d493a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d493e:	3301      	adds	r3, #1
   d4940:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d4944:	2300      	movs	r3, #0
   d4946:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d494a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d494e:	425d      	negs	r5, r3
   d4950:	415d      	adcs	r5, r3
   d4952:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d4956:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4958:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d495a:	2302      	movs	r3, #2
    parity = 0;
   d495c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4960:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d4964:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4968:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d496c:	e7f3      	b.n	d4956 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d496e:	2000      	movs	r0, #0
   d4970:	e7f1      	b.n	d4956 <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000d4974 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <os_mutex_recursive_create+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030248 	.word	0x00030248

000d4984 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <os_mutex_recursive_destroy+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030248 	.word	0x00030248

000d4994 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <os_mutex_recursive_lock+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030248 	.word	0x00030248

000d49a4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <os_mutex_recursive_unlock+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030248 	.word	0x00030248

000d49b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_RNG_GetRandomNumber+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	685b      	ldr	r3, [r3, #4]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030218 	.word	0x00030218

000d49c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_Delay_Microseconds+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	68db      	ldr	r3, [r3, #12]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030218 	.word	0x00030218

000d49d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	695b      	ldr	r3, [r3, #20]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030218 	.word	0x00030218

000d49e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <inet_inet_ntop+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	695b      	ldr	r3, [r3, #20]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030264 	.word	0x00030264

000d49f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <netdb_freeaddrinfo+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	689b      	ldr	r3, [r3, #8]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030268 	.word	0x00030268

000d4a04 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <netdb_getaddrinfo+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	68db      	ldr	r3, [r3, #12]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030268 	.word	0x00030268

000d4a14 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <hal_usart_init+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	681b      	ldr	r3, [r3, #0]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003023c 	.word	0x0003023c

000d4a24 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <hal_usart_end+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003023c 	.word	0x0003023c

000d4a34 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <hal_usart_write+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	68db      	ldr	r3, [r3, #12]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003023c 	.word	0x0003023c

000d4a44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <hal_usart_available+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	691b      	ldr	r3, [r3, #16]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003023c 	.word	0x0003023c

000d4a54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <hal_usart_read+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	695b      	ldr	r3, [r3, #20]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003023c 	.word	0x0003023c

000d4a64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <hal_usart_peek+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	699b      	ldr	r3, [r3, #24]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003023c 	.word	0x0003023c

000d4a74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <hal_usart_flush+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	69db      	ldr	r3, [r3, #28]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003023c 	.word	0x0003023c

000d4a84 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <hal_usart_available_data_for_write+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003023c 	.word	0x0003023c

000d4a94 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <hal_usart_begin_config+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003023c 	.word	0x0003023c

000d4aa4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USB_USART_Init+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	681b      	ldr	r3, [r3, #0]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003024c 	.word	0x0003024c

000d4ab4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USB_USART_Begin+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	685b      	ldr	r3, [r3, #4]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003024c 	.word	0x0003024c

000d4ac4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_USB_USART_End+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	689b      	ldr	r3, [r3, #8]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003024c 	.word	0x0003024c

000d4ad4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_USB_USART_Available_Data+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	691b      	ldr	r3, [r3, #16]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003024c 	.word	0x0003024c

000d4ae4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	695b      	ldr	r3, [r3, #20]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003024c 	.word	0x0003024c

000d4af4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_USB_USART_Receive_Data+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	699b      	ldr	r3, [r3, #24]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003024c 	.word	0x0003024c

000d4b04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USB_USART_Send_Data+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	69db      	ldr	r3, [r3, #28]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003024c 	.word	0x0003024c

000d4b14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USB_USART_Flush_Data+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6a1b      	ldr	r3, [r3, #32]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003024c 	.word	0x0003024c

000d4b24 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <panic_+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030260 	.word	0x00030260

000d4b34 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <log_level_name+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030260 	.word	0x00030260

000d4b44 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <log_set_callbacks+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030260 	.word	0x00030260

000d4b54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <set_system_mode+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	685b      	ldr	r3, [r3, #4]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030220 	.word	0x00030220

000d4b64 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <system_delay_ms+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	695b      	ldr	r3, [r3, #20]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030220 	.word	0x00030220

000d4b74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b03      	ldr	r3, [pc, #12]	; (d4b84 <system_ctrl_set_app_request_handler+0x10>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b7e:	9301      	str	r3, [sp, #4]
   d4b80:	bd08      	pop	{r3, pc}
   d4b82:	0000      	.short	0x0000
   d4b84:	00030220 	.word	0x00030220

000d4b88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b03      	ldr	r3, [pc, #12]	; (d4b98 <system_ctrl_set_result+0x10>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b92:	9301      	str	r3, [sp, #4]
   d4b94:	bd08      	pop	{r3, pc}
   d4b96:	0000      	.short	0x0000
   d4b98:	00030220 	.word	0x00030220

000d4b9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030244 	.word	0x00030244

000d4bac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <network_connect+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	685b      	ldr	r3, [r3, #4]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030240 	.word	0x00030240

000d4bbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <network_connecting+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	689b      	ldr	r3, [r3, #8]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030240 	.word	0x00030240

000d4bcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <network_disconnect+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	68db      	ldr	r3, [r3, #12]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030240 	.word	0x00030240

000d4bdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <network_ready+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	691b      	ldr	r3, [r3, #16]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030240 	.word	0x00030240

000d4bec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <network_on+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030240 	.word	0x00030240

000d4bfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_off+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	699b      	ldr	r3, [r3, #24]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_listen+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	69db      	ldr	r3, [r3, #28]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_listening+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a1b      	ldr	r3, [r3, #32]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <network_set_listen_timeout+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030240 	.word	0x00030240

000d4c3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_get_listen_timeout+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <network_is_on+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030240 	.word	0x00030240

000d4c5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_is_off+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <malloc+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	681b      	ldr	r3, [r3, #0]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003021c 	.word	0x0003021c

000d4c7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <free+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	685b      	ldr	r3, [r3, #4]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003021c 	.word	0x0003021c

000d4c8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <realloc+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	689b      	ldr	r3, [r3, #8]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003021c 	.word	0x0003021c

000d4c9c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <vsnprintf+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003021c 	.word	0x0003021c

000d4cac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <newlib_impure_ptr_callback+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003021c 	.word	0x0003021c

000d4cbc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cbc:	2100      	movs	r1, #0
   d4cbe:	f7ff bf51 	b.w	d4b64 <system_delay_ms>

000d4cc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cc2:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4cc4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cc6:	4604      	mov	r4, r0
          _M_dispose();
   d4cc8:	689b      	ldr	r3, [r3, #8]
   d4cca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ccc:	68a3      	ldr	r3, [r4, #8]
   d4cce:	3b01      	subs	r3, #1
   d4cd0:	60a3      	str	r3, [r4, #8]
   d4cd2:	b92b      	cbnz	r3, d4ce0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4cd4:	6823      	ldr	r3, [r4, #0]
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4cde:	4718      	bx	r3
    }
   d4ce0:	bd10      	pop	{r4, pc}

000d4ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ce2:	680b      	ldr	r3, [r1, #0]
   d4ce4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ce6:	b113      	cbz	r3, d4cee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4ce8:	685a      	ldr	r2, [r3, #4]
   d4cea:	3201      	adds	r2, #1
   d4cec:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4cee:	4770      	bx	lr

000d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4cf0:	b510      	push	{r4, lr}
   d4cf2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4cf4:	6800      	ldr	r0, [r0, #0]
   d4cf6:	b128      	cbz	r0, d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4cf8:	6843      	ldr	r3, [r0, #4]
   d4cfa:	3b01      	subs	r3, #1
   d4cfc:	6043      	str	r3, [r0, #4]
   d4cfe:	b90b      	cbnz	r3, d4d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d00:	f7ff ffdf 	bl	d4cc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4d04:	4620      	mov	r0, r4
   d4d06:	bd10      	pop	{r4, pc}

000d4d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d08:	4802      	ldr	r0, [pc, #8]	; (d4d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4d0a:	2300      	movs	r3, #0
   d4d0c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d0e:	f7ff be31 	b.w	d4974 <os_mutex_recursive_create>
   d4d12:	bf00      	nop
   d4d14:	2003e570 	.word	0x2003e570

000d4d18 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d18:	2200      	movs	r2, #0
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	4611      	mov	r1, r2
   d4d1e:	f7ff bf5d 	b.w	d4bdc <network_ready>

000d4d22 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	4611      	mov	r1, r2
   d4d28:	f7ff bf78 	b.w	d4c1c <network_listening>

000d4d2c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	4611      	mov	r1, r2
   d4d32:	f7ff bf83 	b.w	d4c3c <network_get_listen_timeout>

000d4d36 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d36:	6840      	ldr	r0, [r0, #4]
   d4d38:	2200      	movs	r2, #0
   d4d3a:	f7ff bf77 	b.w	d4c2c <network_set_listen_timeout>

000d4d3e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d3e:	6840      	ldr	r0, [r0, #4]
   d4d40:	2200      	movs	r2, #0
   d4d42:	f081 0101 	eor.w	r1, r1, #1
   d4d46:	f7ff bf61 	b.w	d4c0c <network_listen>

000d4d4a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	6840      	ldr	r0, [r0, #4]
   d4d4e:	461a      	mov	r2, r3
   d4d50:	4619      	mov	r1, r3
   d4d52:	f7ff bf53 	b.w	d4bfc <network_off>

000d4d56 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d56:	2300      	movs	r3, #0
   d4d58:	6840      	ldr	r0, [r0, #4]
   d4d5a:	461a      	mov	r2, r3
   d4d5c:	4619      	mov	r1, r3
   d4d5e:	f7ff bf45 	b.w	d4bec <network_on>

000d4d62 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d62:	2200      	movs	r2, #0
   d4d64:	6840      	ldr	r0, [r0, #4]
   d4d66:	4611      	mov	r1, r2
   d4d68:	f7ff bf28 	b.w	d4bbc <network_connecting>

000d4d6c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d6c:	6840      	ldr	r0, [r0, #4]
   d4d6e:	2200      	movs	r2, #0
   d4d70:	2102      	movs	r1, #2
   d4d72:	f7ff bf2b 	b.w	d4bcc <network_disconnect>

000d4d76 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d76:	2300      	movs	r3, #0
   d4d78:	6840      	ldr	r0, [r0, #4]
   d4d7a:	461a      	mov	r2, r3
   d4d7c:	f7ff bf16 	b.w	d4bac <network_connect>

000d4d80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d80:	4b08      	ldr	r3, [pc, #32]	; (d4da4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d82:	b510      	push	{r4, lr}
   d4d84:	2428      	movs	r4, #40	; 0x28
   d4d86:	4622      	mov	r2, r4
   d4d88:	4618      	mov	r0, r3
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	f002 fc1c 	bl	d75c8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d90:	4b05      	ldr	r3, [pc, #20]	; (d4da8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4d92:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4d98:	6042      	str	r2, [r0, #4]
   d4d9a:	2204      	movs	r2, #4
   d4d9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4d9e:	4a03      	ldr	r2, [pc, #12]	; (d4dac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4da0:	601a      	str	r2, [r3, #0]
   d4da2:	bd10      	pop	{r4, pc}
   d4da4:	2003e57c 	.word	0x2003e57c
   d4da8:	2003e574 	.word	0x2003e574
   d4dac:	000d7948 	.word	0x000d7948

000d4db0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4db0:	2200      	movs	r2, #0
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	4611      	mov	r1, r2
   d4db6:	f7ff bf31 	b.w	d4c1c <network_listening>

000d4dba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4dba:	2200      	movs	r2, #0
   d4dbc:	6840      	ldr	r0, [r0, #4]
   d4dbe:	4611      	mov	r1, r2
   d4dc0:	f7ff bf3c 	b.w	d4c3c <network_get_listen_timeout>

000d4dc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	f7ff bf30 	b.w	d4c2c <network_set_listen_timeout>

000d4dcc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f081 0101 	eor.w	r1, r1, #1
   d4dd4:	f7ff bf1a 	b.w	d4c0c <network_listen>

000d4dd8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4dd8:	2300      	movs	r3, #0
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	461a      	mov	r2, r3
   d4dde:	4619      	mov	r1, r3
   d4de0:	f7ff bf0c 	b.w	d4bfc <network_off>

000d4de4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4de4:	2300      	movs	r3, #0
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	461a      	mov	r2, r3
   d4dea:	4619      	mov	r1, r3
   d4dec:	f7ff befe 	b.w	d4bec <network_on>

000d4df0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4df0:	2200      	movs	r2, #0
   d4df2:	6840      	ldr	r0, [r0, #4]
   d4df4:	4611      	mov	r1, r2
   d4df6:	f7ff bef1 	b.w	d4bdc <network_ready>

000d4dfa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	6840      	ldr	r0, [r0, #4]
   d4dfe:	4611      	mov	r1, r2
   d4e00:	f7ff bedc 	b.w	d4bbc <network_connecting>

000d4e04 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	2200      	movs	r2, #0
   d4e08:	2102      	movs	r1, #2
   d4e0a:	f7ff bedf 	b.w	d4bcc <network_disconnect>

000d4e0e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4e0e:	2300      	movs	r3, #0
   d4e10:	6840      	ldr	r0, [r0, #4]
   d4e12:	461a      	mov	r2, r3
   d4e14:	f7ff beca 	b.w	d4bac <network_connect>

000d4e18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4e18:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e1a:	2203      	movs	r2, #3
   d4e1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e1e:	4a02      	ldr	r2, [pc, #8]	; (d4e28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e20:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e22:	4770      	bx	lr
   d4e24:	2003e5a4 	.word	0x2003e5a4
   d4e28:	000d7984 	.word	0x000d7984

000d4e2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e2c:	4770      	bx	lr

000d4e2e <_ZN9IPAddressD0Ev>:
   d4e2e:	b510      	push	{r4, lr}
   d4e30:	2118      	movs	r1, #24
   d4e32:	4604      	mov	r4, r0
   d4e34:	f001 fede 	bl	d6bf4 <_ZdlPvj>
   d4e38:	4620      	mov	r0, r4
   d4e3a:	bd10      	pop	{r4, pc}

000d4e3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e3e:	7d03      	ldrb	r3, [r0, #20]
   d4e40:	2b06      	cmp	r3, #6
{
   d4e42:	b08d      	sub	sp, #52	; 0x34
   d4e44:	460e      	mov	r6, r1
   d4e46:	f100 0704 	add.w	r7, r0, #4
   d4e4a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e4e:	d012      	beq.n	d4e76 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e50:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e58:	220a      	movs	r2, #10
   d4e5a:	4630      	mov	r0, r6
   d4e5c:	f001 fae9 	bl	d6432 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e60:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e62:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e64:	d019      	beq.n	d4e9a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e66:	2c00      	cmp	r4, #0
   d4e68:	d0f4      	beq.n	d4e54 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e6a:	212e      	movs	r1, #46	; 0x2e
   d4e6c:	4630      	mov	r0, r6
   d4e6e:	f001 fac7 	bl	d6400 <_ZN5Print5printEc>
   d4e72:	4404      	add	r4, r0
   d4e74:	e7ee      	b.n	d4e54 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e76:	232f      	movs	r3, #47	; 0x2f
   d4e78:	466a      	mov	r2, sp
   d4e7a:	4639      	mov	r1, r7
   d4e7c:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e7e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e82:	f7ff fdaf 	bl	d49e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e86:	4668      	mov	r0, sp
   d4e88:	f002 fbf3 	bl	d7672 <strlen>
   d4e8c:	6833      	ldr	r3, [r6, #0]
   d4e8e:	4602      	mov	r2, r0
   d4e90:	68db      	ldr	r3, [r3, #12]
   d4e92:	4669      	mov	r1, sp
   d4e94:	4630      	mov	r0, r6
   d4e96:	4798      	blx	r3
   d4e98:	4604      	mov	r4, r0
    }
    return n;
}
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	b00d      	add	sp, #52	; 0x34
   d4e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ea0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4ea0:	b510      	push	{r4, lr}
   d4ea2:	4b05      	ldr	r3, [pc, #20]	; (d4eb8 <_ZN9IPAddressC1Ev+0x18>)
   d4ea4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ea6:	2211      	movs	r2, #17
   d4ea8:	f840 3b04 	str.w	r3, [r0], #4
   d4eac:	2100      	movs	r1, #0
   d4eae:	f002 fb8b 	bl	d75c8 <memset>
}
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	bd10      	pop	{r4, pc}
   d4eb6:	bf00      	nop
   d4eb8:	000d79c0 	.word	0x000d79c0

000d4ebc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ebc:	4603      	mov	r3, r0
   d4ebe:	4a07      	ldr	r2, [pc, #28]	; (d4edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ec0:	b510      	push	{r4, lr}
   d4ec2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4ec6:	f101 0210 	add.w	r2, r1, #16
   d4eca:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ece:	f843 4b04 	str.w	r4, [r3], #4
   d4ed2:	4291      	cmp	r1, r2
   d4ed4:	d1f9      	bne.n	d4eca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ed6:	780a      	ldrb	r2, [r1, #0]
   d4ed8:	701a      	strb	r2, [r3, #0]
}
   d4eda:	bd10      	pop	{r4, pc}
   d4edc:	000d79c0 	.word	0x000d79c0

000d4ee0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ee0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ee2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ee6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4eea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4eee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ef2:	2304      	movs	r3, #4
   d4ef4:	6041      	str	r1, [r0, #4]
   d4ef6:	7503      	strb	r3, [r0, #20]
}
   d4ef8:	bd10      	pop	{r4, pc}

000d4efa <_ZN9IPAddressaSEPKh>:
{
   d4efa:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4efc:	78cb      	ldrb	r3, [r1, #3]
   d4efe:	9300      	str	r3, [sp, #0]
   d4f00:	788b      	ldrb	r3, [r1, #2]
   d4f02:	784a      	ldrb	r2, [r1, #1]
   d4f04:	7809      	ldrb	r1, [r1, #0]
   d4f06:	f7ff ffeb 	bl	d4ee0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f0a:	b002      	add	sp, #8
   d4f0c:	bd10      	pop	{r4, pc}

000d4f0e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d4f0e:	f100 0310 	add.w	r3, r0, #16
   d4f12:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d4f14:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d4f18:	2901      	cmp	r1, #1
   d4f1a:	4618      	mov	r0, r3
   d4f1c:	d108      	bne.n	d4f30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d4f1e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d4f22:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d4f26:	3a01      	subs	r2, #1
   d4f28:	f103 0310 	add.w	r3, r3, #16
   d4f2c:	d1f2      	bne.n	d4f14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d4f2e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d4f30:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d4f32:	bf04      	itt	eq
   d4f34:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d4f38:	1852      	addeq	r2, r2, r1
   d4f3a:	e7f4      	b.n	d4f26 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d4f3c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f3c:	b40e      	push	{r1, r2, r3}
   d4f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f40:	b088      	sub	sp, #32
   d4f42:	af00      	add	r7, sp, #0
   d4f44:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f48:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f4a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f4e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4f50:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f52:	462b      	mov	r3, r5
   d4f54:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d4f56:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f58:	f7ff fea0 	bl	d4c9c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d4f5c:	280f      	cmp	r0, #15
   d4f5e:	687a      	ldr	r2, [r7, #4]
   d4f60:	d91a      	bls.n	d4f98 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d4f62:	f100 0308 	add.w	r3, r0, #8
   d4f66:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d4f6a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d4f6c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f70:	1c41      	adds	r1, r0, #1
   d4f72:	462b      	mov	r3, r5
   d4f74:	4668      	mov	r0, sp
        va_start(args, fmt);
   d4f76:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4f78:	f7ff fe90 	bl	d4c9c <vsnprintf>
        if (n > 0) {
   d4f7c:	1e02      	subs	r2, r0, #0
   d4f7e:	dd04      	ble.n	d4f8a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d4f80:	6823      	ldr	r3, [r4, #0]
   d4f82:	4669      	mov	r1, sp
   d4f84:	689b      	ldr	r3, [r3, #8]
   d4f86:	4620      	mov	r0, r4
   d4f88:	4798      	blx	r3
   d4f8a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d4f8c:	3720      	adds	r7, #32
   d4f8e:	46bd      	mov	sp, r7
   d4f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d4f94:	b003      	add	sp, #12
   d4f96:	4770      	bx	lr
    } else if (n > 0) {
   d4f98:	2800      	cmp	r0, #0
   d4f9a:	d0f7      	beq.n	d4f8c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d4f9c:	6823      	ldr	r3, [r4, #0]
   d4f9e:	4602      	mov	r2, r0
   d4fa0:	689b      	ldr	r3, [r3, #8]
   d4fa2:	f107 0110 	add.w	r1, r7, #16
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	4798      	blx	r3
}
   d4faa:	e7ef      	b.n	d4f8c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d4fac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fac:	b510      	push	{r4, lr}
          _M_dispose();
   d4fae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fb0:	4604      	mov	r4, r0
          _M_dispose();
   d4fb2:	689b      	ldr	r3, [r3, #8]
   d4fb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fb6:	68a3      	ldr	r3, [r4, #8]
   d4fb8:	3b01      	subs	r3, #1
   d4fba:	60a3      	str	r3, [r4, #8]
   d4fbc:	b92b      	cbnz	r3, d4fca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4fbe:	6823      	ldr	r3, [r4, #0]
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	68db      	ldr	r3, [r3, #12]
    }
   d4fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4fc8:	4718      	bx	r3
    }
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d4fcc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4fce:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d4fd0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4fd4:	689b      	ldr	r3, [r3, #8]
   d4fd6:	2201      	movs	r2, #1
   d4fd8:	f10d 0107 	add.w	r1, sp, #7
   d4fdc:	4798      	blx	r3
}
   d4fde:	b003      	add	sp, #12
   d4fe0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fe4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d4fe4:	b538      	push	{r3, r4, r5, lr}
   d4fe6:	680b      	ldr	r3, [r1, #0]
   d4fe8:	6003      	str	r3, [r0, #0]
   d4fea:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d4fec:	6843      	ldr	r3, [r0, #4]
   d4fee:	429d      	cmp	r5, r3
    class __shared_ptr
   d4ff0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d4ff2:	d00c      	beq.n	d500e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d4ff4:	b115      	cbz	r5, d4ffc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d4ff6:	686b      	ldr	r3, [r5, #4]
   d4ff8:	3301      	adds	r3, #1
   d4ffa:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d4ffc:	6860      	ldr	r0, [r4, #4]
   d4ffe:	b128      	cbz	r0, d500c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5000:	6843      	ldr	r3, [r0, #4]
   d5002:	3b01      	subs	r3, #1
   d5004:	6043      	str	r3, [r0, #4]
   d5006:	b90b      	cbnz	r3, d500c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5008:	f7ff ffd0 	bl	d4fac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d500c:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d500e:	4620      	mov	r0, r4
   d5010:	bd38      	pop	{r3, r4, r5, pc}

000d5012 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5012:	460b      	mov	r3, r1
   d5014:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5016:	2200      	movs	r2, #0
   d5018:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d501a:	e9c0 2200 	strd	r2, r2, [r0]
   d501e:	4604      	mov	r4, r0
        t_ = t;
   d5020:	6083      	str	r3, [r0, #8]
    if (t) {
   d5022:	b90b      	cbnz	r3, d5028 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d5024:	4620      	mov	r0, r4
   d5026:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5028:	f7ff ffdc 	bl	d4fe4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d502c:	e7fa      	b.n	d5024 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d502e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d502e:	6883      	ldr	r3, [r0, #8]
   d5030:	b1eb      	cbz	r3, d506e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d5032:	781a      	ldrb	r2, [r3, #0]
   d5034:	2a03      	cmp	r2, #3
   d5036:	d81a      	bhi.n	d506e <_ZNK5spark9JSONValue4typeEv+0x40>
   d5038:	e8df f002 	tbb	[pc, r2]
   d503c:	1b021704 	.word	0x1b021704
   d5040:	2005      	movs	r0, #5
   d5042:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d5044:	6802      	ldr	r2, [r0, #0]
   d5046:	685b      	ldr	r3, [r3, #4]
   d5048:	6852      	ldr	r2, [r2, #4]
   d504a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d504c:	282d      	cmp	r0, #45	; 0x2d
   d504e:	d012      	beq.n	d5076 <_ZNK5spark9JSONValue4typeEv+0x48>
   d5050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5054:	2b09      	cmp	r3, #9
   d5056:	d90e      	bls.n	d5076 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5058:	2874      	cmp	r0, #116	; 0x74
   d505a:	d00e      	beq.n	d507a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d505c:	2866      	cmp	r0, #102	; 0x66
   d505e:	d00c      	beq.n	d507a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5060:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5064:	4258      	negs	r0, r3
   d5066:	4158      	adcs	r0, r3
   d5068:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d506a:	2006      	movs	r0, #6
   d506c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d506e:	2000      	movs	r0, #0
   d5070:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5072:	2004      	movs	r0, #4
   d5074:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d5076:	2003      	movs	r0, #3
   d5078:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d507a:	2002      	movs	r0, #2
}
   d507c:	4770      	bx	lr

000d507e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d507e:	b510      	push	{r4, lr}
   d5080:	4604      	mov	r4, r0
    switch (type()) {
   d5082:	f7ff ffd4 	bl	d502e <_ZNK5spark9JSONValue4typeEv>
   d5086:	2802      	cmp	r0, #2
   d5088:	d00e      	beq.n	d50a8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d508a:	1ec3      	subs	r3, r0, #3
   d508c:	b2db      	uxtb	r3, r3
   d508e:	2b01      	cmp	r3, #1
   d5090:	d814      	bhi.n	d50bc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d5092:	6822      	ldr	r2, [r4, #0]
   d5094:	68a3      	ldr	r3, [r4, #8]
   d5096:	6850      	ldr	r0, [r2, #4]
   d5098:	685b      	ldr	r3, [r3, #4]
}
   d509a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d509e:	220a      	movs	r2, #10
   d50a0:	2100      	movs	r1, #0
   d50a2:	4418      	add	r0, r3
   d50a4:	f002 bba0 	b.w	d77e8 <strtol>
        const char* const s = d_->json + t_->start;
   d50a8:	6822      	ldr	r2, [r4, #0]
   d50aa:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d50ac:	6852      	ldr	r2, [r2, #4]
   d50ae:	685b      	ldr	r3, [r3, #4]
   d50b0:	5cd0      	ldrb	r0, [r2, r3]
   d50b2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d50b6:	4258      	negs	r0, r3
   d50b8:	4158      	adcs	r0, r3
}
   d50ba:	bd10      	pop	{r4, pc}
    switch (type()) {
   d50bc:	2000      	movs	r0, #0
   d50be:	e7fc      	b.n	d50ba <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d50c0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d50c0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d50c2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d50c4:	e9c0 3300 	strd	r3, r3, [r0]
   d50c8:	4604      	mov	r4, r0
        n_(0) {
   d50ca:	480e      	ldr	r0, [pc, #56]	; (d5104 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d50cc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d50d0:	b1a9      	cbz	r1, d50fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d50d2:	780b      	ldrb	r3, [r1, #0]
   d50d4:	2b03      	cmp	r3, #3
   d50d6:	d006      	beq.n	d50e6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d50d8:	b98b      	cbnz	r3, d50fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d50da:	6813      	ldr	r3, [r2, #0]
   d50dc:	6858      	ldr	r0, [r3, #4]
   d50de:	684b      	ldr	r3, [r1, #4]
   d50e0:	5cc3      	ldrb	r3, [r0, r3]
   d50e2:	2b6e      	cmp	r3, #110	; 0x6e
   d50e4:	d007      	beq.n	d50f6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d50e6:	6813      	ldr	r3, [r2, #0]
   d50e8:	684d      	ldr	r5, [r1, #4]
   d50ea:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d50ec:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d50ee:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d50f0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d50f2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d50f4:	60e3      	str	r3, [r4, #12]
   d50f6:	4611      	mov	r1, r2
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7ff ff73 	bl	d4fe4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d50fe:	4620      	mov	r0, r4
   d5100:	bd38      	pop	{r3, r4, r5, pc}
   d5102:	bf00      	nop
   d5104:	000d7a32 	.word	0x000d7a32

000d5108 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5108:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d510a:	2500      	movs	r5, #0
   d510c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d510e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d5112:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5116:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d511a:	4604      	mov	r4, r0
   d511c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d511e:	b14b      	cbz	r3, d5134 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5120:	781a      	ldrb	r2, [r3, #0]
   d5122:	2a01      	cmp	r2, #1
   d5124:	d106      	bne.n	d5134 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5126:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d512a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d512c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d512e:	6143      	str	r3, [r0, #20]
   d5130:	f7ff ff58 	bl	d4fe4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d5134:	4620      	mov	r0, r4
   d5136:	bd38      	pop	{r3, r4, r5, pc}

000d5138 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d5138:	b510      	push	{r4, lr}
    if (!n_) {
   d513a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d513c:	4604      	mov	r4, r0
    if (!n_) {
   d513e:	b163      	cbz	r3, d515a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d5140:	6880      	ldr	r0, [r0, #8]
   d5142:	60e0      	str	r0, [r4, #12]
    --n_;
   d5144:	3b01      	subs	r3, #1
    ++t_;
   d5146:	3010      	adds	r0, #16
   d5148:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d514a:	6120      	str	r0, [r4, #16]
    --n_;
   d514c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d514e:	b113      	cbz	r3, d5156 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5150:	f7ff fedd 	bl	d4f0e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5154:	60a0      	str	r0, [r4, #8]
    return true;
   d5156:	2001      	movs	r0, #1
   d5158:	e000      	b.n	d515c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d515a:	4618      	mov	r0, r3
}
   d515c:	bd10      	pop	{r4, pc}

000d515e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d515e:	b510      	push	{r4, lr}
    write('}');
   d5160:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5162:	4604      	mov	r4, r0
    write('}');
   d5164:	f7ff ff32 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5168:	2301      	movs	r3, #1
   d516a:	7123      	strb	r3, [r4, #4]
}
   d516c:	4620      	mov	r0, r4
   d516e:	bd10      	pop	{r4, pc}

000d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d5170:	b508      	push	{r3, lr}
    switch (state_) {
   d5172:	7903      	ldrb	r3, [r0, #4]
   d5174:	2b01      	cmp	r3, #1
   d5176:	d002      	beq.n	d517e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5178:	2b02      	cmp	r3, #2
   d517a:	d004      	beq.n	d5186 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d517c:	bd08      	pop	{r3, pc}
        write(',');
   d517e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d5180:	f7ff ff24 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
}
   d5184:	e7fa      	b.n	d517c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d5186:	213a      	movs	r1, #58	; 0x3a
   d5188:	e7fa      	b.n	d5180 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d518a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d518a:	b510      	push	{r4, lr}
   d518c:	4604      	mov	r4, r0
    writeSeparator();
   d518e:	f7ff ffef 	bl	d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5192:	4620      	mov	r0, r4
   d5194:	217b      	movs	r1, #123	; 0x7b
   d5196:	f7ff ff19 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d519a:	2300      	movs	r3, #0
   d519c:	7123      	strb	r3, [r4, #4]
}
   d519e:	4620      	mov	r0, r4
   d51a0:	bd10      	pop	{r4, pc}
	...

000d51a4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d51a4:	b513      	push	{r0, r1, r4, lr}
   d51a6:	4604      	mov	r4, r0
   d51a8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d51aa:	f7ff ffe1 	bl	d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d51ae:	6823      	ldr	r3, [r4, #0]
   d51b0:	9a01      	ldr	r2, [sp, #4]
   d51b2:	68db      	ldr	r3, [r3, #12]
   d51b4:	4903      	ldr	r1, [pc, #12]	; (d51c4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d51b6:	4620      	mov	r0, r4
   d51b8:	4798      	blx	r3
    state_ = NEXT;
   d51ba:	2301      	movs	r3, #1
}
   d51bc:	4620      	mov	r0, r4
    state_ = NEXT;
   d51be:	7123      	strb	r3, [r4, #4]
}
   d51c0:	b002      	add	sp, #8
   d51c2:	bd10      	pop	{r4, pc}
   d51c4:	000d79cc 	.word	0x000d79cc

000d51c8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d51c8:	b513      	push	{r0, r1, r4, lr}
   d51ca:	4604      	mov	r4, r0
   d51cc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d51ce:	f7ff ffcf 	bl	d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d51d2:	6823      	ldr	r3, [r4, #0]
   d51d4:	9a01      	ldr	r2, [sp, #4]
   d51d6:	68db      	ldr	r3, [r3, #12]
   d51d8:	4903      	ldr	r1, [pc, #12]	; (d51e8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d51da:	4620      	mov	r0, r4
   d51dc:	4798      	blx	r3
    state_ = NEXT;
   d51de:	2301      	movs	r3, #1
}
   d51e0:	4620      	mov	r0, r4
    state_ = NEXT;
   d51e2:	7123      	strb	r3, [r4, #4]
}
   d51e4:	b002      	add	sp, #8
   d51e6:	bd10      	pop	{r4, pc}
   d51e8:	000d79cf 	.word	0x000d79cf

000d51ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d51ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51f0:	460d      	mov	r5, r1
   d51f2:	4617      	mov	r7, r2
    write('"');
   d51f4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d51f6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d5298 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d51fa:	4604      	mov	r4, r0
    const char* const end = str + size;
   d51fc:	442f      	add	r7, r5
    write('"');
   d51fe:	f7ff fee5 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d5202:	4629      	mov	r1, r5
    while (s != end) {
   d5204:	42bd      	cmp	r5, r7
   d5206:	462a      	mov	r2, r5
   d5208:	d038      	beq.n	d527c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d520a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d520e:	2e22      	cmp	r6, #34	; 0x22
   d5210:	d003      	beq.n	d521a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5212:	2e5c      	cmp	r6, #92	; 0x5c
   d5214:	d001      	beq.n	d521a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5216:	2e1f      	cmp	r6, #31
   d5218:	d8f4      	bhi.n	d5204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d521a:	6823      	ldr	r3, [r4, #0]
   d521c:	1a52      	subs	r2, r2, r1
   d521e:	689b      	ldr	r3, [r3, #8]
   d5220:	4620      	mov	r0, r4
   d5222:	4798      	blx	r3
            write('\\');
   d5224:	215c      	movs	r1, #92	; 0x5c
   d5226:	4620      	mov	r0, r4
   d5228:	f7ff fed0 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d522c:	2e0d      	cmp	r6, #13
   d522e:	d80a      	bhi.n	d5246 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d5230:	2e07      	cmp	r6, #7
   d5232:	d91c      	bls.n	d526e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d5234:	f1a6 0308 	sub.w	r3, r6, #8
   d5238:	2b05      	cmp	r3, #5
   d523a:	d818      	bhi.n	d526e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d523c:	e8df f003 	tbb	[pc, r3]
   d5240:	17110f0d 	.word	0x17110f0d
   d5244:	1513      	.short	0x1513
   d5246:	2e22      	cmp	r6, #34	; 0x22
   d5248:	d001      	beq.n	d524e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d524a:	2e5c      	cmp	r6, #92	; 0x5c
   d524c:	d10f      	bne.n	d526e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d524e:	4631      	mov	r1, r6
                write('b');
   d5250:	4620      	mov	r0, r4
   d5252:	f7ff febb 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d5256:	4629      	mov	r1, r5
    while (s != end) {
   d5258:	e7d4      	b.n	d5204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d525a:	2162      	movs	r1, #98	; 0x62
   d525c:	e7f8      	b.n	d5250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d525e:	2174      	movs	r1, #116	; 0x74
   d5260:	e7f6      	b.n	d5250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d5262:	216e      	movs	r1, #110	; 0x6e
   d5264:	e7f4      	b.n	d5250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d5266:	2166      	movs	r1, #102	; 0x66
   d5268:	e7f2      	b.n	d5250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d526a:	2172      	movs	r1, #114	; 0x72
   d526c:	e7f0      	b.n	d5250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d526e:	6823      	ldr	r3, [r4, #0]
   d5270:	4632      	mov	r2, r6
   d5272:	68db      	ldr	r3, [r3, #12]
   d5274:	4641      	mov	r1, r8
   d5276:	4620      	mov	r0, r4
   d5278:	4798      	blx	r3
                break;
   d527a:	e7ec      	b.n	d5256 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d527c:	428d      	cmp	r5, r1
   d527e:	d004      	beq.n	d528a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d5280:	6823      	ldr	r3, [r4, #0]
   d5282:	1a6a      	subs	r2, r5, r1
   d5284:	689b      	ldr	r3, [r3, #8]
   d5286:	4620      	mov	r0, r4
   d5288:	4798      	blx	r3
    }
    write('"');
   d528a:	2122      	movs	r1, #34	; 0x22
   d528c:	4620      	mov	r0, r4
   d528e:	f7ff fe9d 	bl	d4fcc <_ZN5spark10JSONWriter5writeEc>
}
   d5292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5296:	bf00      	nop
   d5298:	000d79d2 	.word	0x000d79d2

000d529c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d529c:	b513      	push	{r0, r1, r4, lr}
   d529e:	4604      	mov	r4, r0
   d52a0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d52a4:	f7ff ff64 	bl	d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d52a8:	4620      	mov	r0, r4
   d52aa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d52ae:	f7ff ff9d 	bl	d51ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d52b2:	2302      	movs	r3, #2
}
   d52b4:	4620      	mov	r0, r4
    state_ = VALUE;
   d52b6:	7123      	strb	r3, [r4, #4]
}
   d52b8:	b002      	add	sp, #8
   d52ba:	bd10      	pop	{r4, pc}

000d52bc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d52bc:	b513      	push	{r0, r1, r4, lr}
   d52be:	4604      	mov	r4, r0
   d52c0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d52c4:	f7ff ff54 	bl	d5170 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d52c8:	4620      	mov	r0, r4
   d52ca:	e9dd 2100 	ldrd	r2, r1, [sp]
   d52ce:	f7ff ff8d 	bl	d51ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d52d2:	2301      	movs	r3, #1
}
   d52d4:	4620      	mov	r0, r4
    state_ = NEXT;
   d52d6:	7123      	strb	r3, [r4, #4]
}
   d52d8:	b002      	add	sp, #8
   d52da:	bd10      	pop	{r4, pc}

000d52dc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d52dc:	6880      	ldr	r0, [r0, #8]
   d52de:	6803      	ldr	r3, [r0, #0]
   d52e0:	68db      	ldr	r3, [r3, #12]
   d52e2:	4718      	bx	r3

000d52e4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d52e4:	4770      	bx	lr

000d52e6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d52e6:	4608      	mov	r0, r1
   d52e8:	b111      	cbz	r1, d52f0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d52ea:	680b      	ldr	r3, [r1, #0]
   d52ec:	685b      	ldr	r3, [r3, #4]
   d52ee:	4718      	bx	r3
}
   d52f0:	4770      	bx	lr

000d52f2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d52f2:	4770      	bx	lr

000d52f4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d52f4:	4770      	bx	lr

000d52f6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d52f6:	4770      	bx	lr

000d52f8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d52f8:	4770      	bx	lr

000d52fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d52fa:	b538      	push	{r3, r4, r5, lr}
   d52fc:	4604      	mov	r4, r0
   d52fe:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5300:	6800      	ldr	r0, [r0, #0]
   d5302:	212e      	movs	r1, #46	; 0x2e
   d5304:	f002 f999 	bl	d763a <strchrnul>
    size = s - category;
   d5308:	6823      	ldr	r3, [r4, #0]
   d530a:	1ac3      	subs	r3, r0, r3
   d530c:	602b      	str	r3, [r5, #0]
    if (size) {
   d530e:	b123      	cbz	r3, d531a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5310:	7803      	ldrb	r3, [r0, #0]
   d5312:	b103      	cbz	r3, d5316 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5314:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5316:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5318:	6020      	str	r0, [r4, #0]
}
   d531a:	4618      	mov	r0, r3
   d531c:	bd38      	pop	{r3, r4, r5, pc}

000d531e <_ZN5spark16JSONStreamWriterD0Ev>:
   d531e:	b510      	push	{r4, lr}
   d5320:	210c      	movs	r1, #12
   d5322:	4604      	mov	r4, r0
   d5324:	f001 fc66 	bl	d6bf4 <_ZdlPvj>
   d5328:	4620      	mov	r0, r4
   d532a:	bd10      	pop	{r4, pc}

000d532c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d532c:	b510      	push	{r4, lr}
   d532e:	2104      	movs	r1, #4
   d5330:	4604      	mov	r4, r0
   d5332:	f001 fc5f 	bl	d6bf4 <_ZdlPvj>
   d5336:	4620      	mov	r0, r4
   d5338:	bd10      	pop	{r4, pc}

000d533a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d533a:	b510      	push	{r4, lr}
   d533c:	2104      	movs	r1, #4
   d533e:	4604      	mov	r4, r0
   d5340:	f001 fc58 	bl	d6bf4 <_ZdlPvj>
   d5344:	4620      	mov	r0, r4
   d5346:	bd10      	pop	{r4, pc}

000d5348 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d5348:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d534a:	f002 f980 	bl	d764e <strcmp>
}
   d534e:	fab0 f080 	clz	r0, r0
   d5352:	0940      	lsrs	r0, r0, #5
   d5354:	bd08      	pop	{r3, pc}

000d5356 <__tcf_1>:
   d5356:	4770      	bx	lr

000d5358 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5358:	b510      	push	{r4, lr}
   d535a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d535c:	f001 fb88 	bl	d6a70 <_Z16_fetch_usbserialv>
   d5360:	4284      	cmp	r4, r0
   d5362:	d010      	beq.n	d5386 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5364:	f001 fafc 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d5368:	4284      	cmp	r4, r0
   d536a:	d105      	bne.n	d5378 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d536c:	f001 faf8 	bl	d6960 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d5374:	f001 baf1 	b.w	d695a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5378:	b12c      	cbz	r4, d5386 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d537a:	6823      	ldr	r3, [r4, #0]
   d537c:	4620      	mov	r0, r4
   d537e:	685b      	ldr	r3, [r3, #4]
}
   d5380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5384:	4718      	bx	r3
   d5386:	bd10      	pop	{r4, pc}

000d5388 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5388:	b513      	push	{r0, r1, r4, lr}
   d538a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d538c:	4608      	mov	r0, r1
   d538e:	9101      	str	r1, [sp, #4]
   d5390:	f002 f96f 	bl	d7672 <strlen>
   d5394:	9901      	ldr	r1, [sp, #4]
   d5396:	4602      	mov	r2, r0
   d5398:	4620      	mov	r0, r4
}
   d539a:	b002      	add	sp, #8
   d539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d53a0:	f7ff bf8c 	b.w	d52bc <_ZN5spark10JSONWriter5valueEPKcj>

000d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d53a4:	b513      	push	{r0, r1, r4, lr}
   d53a6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d53a8:	4608      	mov	r0, r1
   d53aa:	9101      	str	r1, [sp, #4]
   d53ac:	f002 f961 	bl	d7672 <strlen>
   d53b0:	6823      	ldr	r3, [r4, #0]
   d53b2:	9901      	ldr	r1, [sp, #4]
   d53b4:	68db      	ldr	r3, [r3, #12]
   d53b6:	4602      	mov	r2, r0
   d53b8:	4620      	mov	r0, r4
}
   d53ba:	b002      	add	sp, #8
   d53bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d53c0:	4718      	bx	r3

000d53c2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d53c2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d53c4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d53c6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d53ca:	68db      	ldr	r3, [r3, #12]
   d53cc:	2201      	movs	r2, #1
   d53ce:	f10d 0107 	add.w	r1, sp, #7
   d53d2:	4798      	blx	r3
}
   d53d4:	b003      	add	sp, #12
   d53d6:	f85d fb04 	ldr.w	pc, [sp], #4

000d53da <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d53da:	b40e      	push	{r1, r2, r3}
   d53dc:	b503      	push	{r0, r1, lr}
   d53de:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d53e0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d53e2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d53e6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d53e8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d53ea:	f001 f914 	bl	d6616 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d53ee:	b002      	add	sp, #8
   d53f0:	f85d eb04 	ldr.w	lr, [sp], #4
   d53f4:	b003      	add	sp, #12
   d53f6:	4770      	bx	lr

000d53f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d53f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d53fc:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5400:	f04f 0814 	mov.w	r8, #20
   d5404:	fb08 f505 	mul.w	r5, r8, r5
   d5408:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d540a:	10ab      	asrs	r3, r5, #2
   d540c:	4d18      	ldr	r5, [pc, #96]	; (d5470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d540e:	4617      	mov	r7, r2
   d5410:	435d      	muls	r5, r3
   d5412:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5414:	2d00      	cmp	r5, #0
   d5416:	dd23      	ble.n	d5460 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5418:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d541a:	fb08 f006 	mul.w	r0, r8, r6
   d541e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5422:	463a      	mov	r2, r7
   d5424:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5428:	5820      	ldr	r0, [r4, r0]
   d542a:	9101      	str	r1, [sp, #4]
   d542c:	455f      	cmp	r7, fp
   d542e:	bf28      	it	cs
   d5430:	465a      	movcs	r2, fp
   d5432:	f002 f926 	bl	d7682 <strncmp>
                if (cmp == 0) {
   d5436:	9901      	ldr	r1, [sp, #4]
   d5438:	2301      	movs	r3, #1
   d543a:	b978      	cbnz	r0, d545c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d543c:	455f      	cmp	r7, fp
   d543e:	d103      	bne.n	d5448 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5440:	9a00      	ldr	r2, [sp, #0]
   d5442:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5444:	4635      	mov	r5, r6
   d5446:	e7e5      	b.n	d5414 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5448:	bf8c      	ite	hi
   d544a:	2001      	movhi	r0, #1
   d544c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d544e:	2800      	cmp	r0, #0
   d5450:	d0f8      	beq.n	d5444 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5452:	1bae      	subs	r6, r5, r6
	      ++__first;
   d5454:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5458:	3e01      	subs	r6, #1
   d545a:	e7f3      	b.n	d5444 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d545c:	0fc0      	lsrs	r0, r0, #31
   d545e:	e7f6      	b.n	d544e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5460:	eba4 0409 	sub.w	r4, r4, r9
}
   d5464:	4802      	ldr	r0, [pc, #8]	; (d5470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5466:	10a4      	asrs	r4, r4, #2
   d5468:	4360      	muls	r0, r4
   d546a:	b003      	add	sp, #12
   d546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5470:	cccccccd 	.word	0xcccccccd

000d5474 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d5476:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5478:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d547a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d547c:	b30b      	cbz	r3, d54c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d547e:	b301      	cbz	r1, d54c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d5480:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5482:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d5486:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5488:	a903      	add	r1, sp, #12
   d548a:	a801      	add	r0, sp, #4
   d548c:	f7ff ff35 	bl	d52fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5490:	4601      	mov	r1, r0
   d5492:	b1b0      	cbz	r0, d54c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5494:	f10d 030b 	add.w	r3, sp, #11
   d5498:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d549a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d549e:	4620      	mov	r0, r4
   d54a0:	f7ff ffaa 	bl	d53f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d54a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54a8:	b15b      	cbz	r3, d54c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d54aa:	6824      	ldr	r4, [r4, #0]
   d54ac:	2314      	movs	r3, #20
   d54ae:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d54b2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d54b6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d54ba:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d54bc:	bfa8      	it	ge
   d54be:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d54c0:	e7e2      	b.n	d5488 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d54c2:	4630      	mov	r0, r6
   d54c4:	b004      	add	sp, #16
   d54c6:	bd70      	pop	{r4, r5, r6, pc}

000d54c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d54c8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d54ca:	4c09      	ldr	r4, [pc, #36]	; (d54f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d54cc:	7823      	ldrb	r3, [r4, #0]
   d54ce:	f3bf 8f5b 	dmb	ish
   d54d2:	07db      	lsls	r3, r3, #31
   d54d4:	d409      	bmi.n	d54ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d54d6:	4620      	mov	r0, r4
   d54d8:	f7fe fdec 	bl	d40b4 <__cxa_guard_acquire>
   d54dc:	b128      	cbz	r0, d54ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d54de:	4620      	mov	r0, r4
   d54e0:	f7fe fded 	bl	d40be <__cxa_guard_release>
   d54e4:	4803      	ldr	r0, [pc, #12]	; (d54f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d54e6:	f002 f83d 	bl	d7564 <atexit>
}
   d54ea:	4803      	ldr	r0, [pc, #12]	; (d54f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d54ec:	bd10      	pop	{r4, pc}
   d54ee:	bf00      	nop
   d54f0:	2003e5b0 	.word	0x2003e5b0
   d54f4:	000d52f3 	.word	0x000d52f3
   d54f8:	2003e400 	.word	0x2003e400

000d54fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d54fc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d54fe:	4c09      	ldr	r4, [pc, #36]	; (d5524 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5500:	7823      	ldrb	r3, [r4, #0]
   d5502:	f3bf 8f5b 	dmb	ish
   d5506:	07db      	lsls	r3, r3, #31
   d5508:	d409      	bmi.n	d551e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d550a:	4620      	mov	r0, r4
   d550c:	f7fe fdd2 	bl	d40b4 <__cxa_guard_acquire>
   d5510:	b128      	cbz	r0, d551e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5512:	4620      	mov	r0, r4
   d5514:	f7fe fdd3 	bl	d40be <__cxa_guard_release>
   d5518:	4803      	ldr	r0, [pc, #12]	; (d5528 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d551a:	f002 f823 	bl	d7564 <atexit>
    return &factory;
}
   d551e:	4803      	ldr	r0, [pc, #12]	; (d552c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5520:	bd10      	pop	{r4, pc}
   d5522:	bf00      	nop
   d5524:	2003e5b4 	.word	0x2003e5b4
   d5528:	000d5357 	.word	0x000d5357
   d552c:	2003e404 	.word	0x2003e404

000d5530 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5530:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d5532:	2500      	movs	r5, #0
   d5534:	4604      	mov	r4, r0
   d5536:	e9c0 5500 	strd	r5, r5, [r0]
   d553a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d553e:	6085      	str	r5, [r0, #8]
   d5540:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d5542:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d5546:	f7ff fa15 	bl	d4974 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d554a:	f7ff ffbd 	bl	d54c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d554e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5550:	f7ff ffd4 	bl	d54fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5554:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5556:	6220      	str	r0, [r4, #32]
}
   d5558:	4620      	mov	r0, r4
   d555a:	bd38      	pop	{r3, r4, r5, pc}

000d555c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d555c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d555e:	4c0a      	ldr	r4, [pc, #40]	; (d5588 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5560:	7823      	ldrb	r3, [r4, #0]
   d5562:	f3bf 8f5b 	dmb	ish
   d5566:	07db      	lsls	r3, r3, #31
   d5568:	d40c      	bmi.n	d5584 <_ZN5spark10LogManager8instanceEv+0x28>
   d556a:	4620      	mov	r0, r4
   d556c:	f7fe fda2 	bl	d40b4 <__cxa_guard_acquire>
   d5570:	b140      	cbz	r0, d5584 <_ZN5spark10LogManager8instanceEv+0x28>
   d5572:	4806      	ldr	r0, [pc, #24]	; (d558c <_ZN5spark10LogManager8instanceEv+0x30>)
   d5574:	f7ff ffdc 	bl	d5530 <_ZN5spark10LogManagerC1Ev>
   d5578:	4620      	mov	r0, r4
   d557a:	f7fe fda0 	bl	d40be <__cxa_guard_release>
   d557e:	4804      	ldr	r0, [pc, #16]	; (d5590 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5580:	f001 fff0 	bl	d7564 <atexit>
    return &mgr;
}
   d5584:	4801      	ldr	r0, [pc, #4]	; (d558c <_ZN5spark10LogManager8instanceEv+0x30>)
   d5586:	bd10      	pop	{r4, pc}
   d5588:	2003e5ac 	.word	0x2003e5ac
   d558c:	2003e5bc 	.word	0x2003e5bc
   d5590:	000d5a3d 	.word	0x000d5a3d

000d5594 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5594:	4a02      	ldr	r2, [pc, #8]	; (d55a0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5596:	4903      	ldr	r1, [pc, #12]	; (d55a4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5598:	4803      	ldr	r0, [pc, #12]	; (d55a8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d559a:	2300      	movs	r3, #0
   d559c:	f7ff bad2 	b.w	d4b44 <log_set_callbacks>
   d55a0:	000d58c5 	.word	0x000d58c5
   d55a4:	000d5851 	.word	0x000d5851
   d55a8:	000d57d1 	.word	0x000d57d1

000d55ac <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d55ac:	2300      	movs	r3, #0
   d55ae:	461a      	mov	r2, r3
   d55b0:	4619      	mov	r1, r3
   d55b2:	4618      	mov	r0, r3
   d55b4:	f7ff bac6 	b.w	d4b44 <log_set_callbacks>

000d55b8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d55b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d55ba:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d55c0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d55c2:	4604      	mov	r4, r0
   d55c4:	a801      	add	r0, sp, #4
   d55c6:	f7ff fb8c 	bl	d4ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d55ca:	466a      	mov	r2, sp
   d55cc:	4629      	mov	r1, r5
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff fd1f 	bl	d5012 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55d4:	a801      	add	r0, sp, #4
   d55d6:	f7ff fb8b 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d55da:	4620      	mov	r0, r4
   d55dc:	b003      	add	sp, #12
   d55de:	bd30      	pop	{r4, r5, pc}

000d55e0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d55e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d55e2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d55e8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d55ea:	4604      	mov	r4, r0
   d55ec:	a801      	add	r0, sp, #4
   d55ee:	f7ff fb78 	bl	d4ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d55f2:	466a      	mov	r2, sp
   d55f4:	4629      	mov	r1, r5
   d55f6:	4620      	mov	r0, r4
   d55f8:	f7ff fd86 	bl	d5108 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d55fc:	a801      	add	r0, sp, #4
   d55fe:	f7ff fb77 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5602:	4620      	mov	r0, r4
   d5604:	b003      	add	sp, #12
   d5606:	bd30      	pop	{r4, r5, pc}

000d5608 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5608:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d560a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d560c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5610:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5612:	4604      	mov	r4, r0
   d5614:	a801      	add	r0, sp, #4
   d5616:	f7ff fb64 	bl	d4ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d561a:	466a      	mov	r2, sp
   d561c:	4629      	mov	r1, r5
   d561e:	4620      	mov	r0, r4
   d5620:	f7ff fd4e 	bl	d50c0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5624:	a801      	add	r0, sp, #4
   d5626:	f7ff fb63 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d562a:	4620      	mov	r0, r4
   d562c:	b003      	add	sp, #12
   d562e:	bd30      	pop	{r4, r5, pc}

000d5630 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5630:	b570      	push	{r4, r5, r6, lr}
   d5632:	b08a      	sub	sp, #40	; 0x28
   d5634:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5636:	4601      	mov	r1, r0
   d5638:	a804      	add	r0, sp, #16
   d563a:	f7ff ffd1 	bl	d55e0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d563e:	4e14      	ldr	r6, [pc, #80]	; (d5690 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5640:	a804      	add	r0, sp, #16
   d5642:	f7ff fd79 	bl	d5138 <_ZN5spark18JSONObjectIterator4nextEv>
   d5646:	b1e8      	cbz	r0, d5684 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5648:	a904      	add	r1, sp, #16
   d564a:	4668      	mov	r0, sp
   d564c:	f7ff ffdc 	bl	d5608 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5650:	9802      	ldr	r0, [sp, #8]
   d5652:	4631      	mov	r1, r6
   d5654:	f7ff fe78 	bl	d5348 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5658:	4604      	mov	r4, r0
   d565a:	b110      	cbz	r0, d5662 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d565c:	1e2c      	subs	r4, r5, #0
   d565e:	bf18      	it	ne
   d5660:	2401      	movne	r4, #1
   d5662:	a801      	add	r0, sp, #4
   d5664:	f7ff fb44 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5668:	2c00      	cmp	r4, #0
   d566a:	d0e9      	beq.n	d5640 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d566c:	a904      	add	r1, sp, #16
   d566e:	4668      	mov	r0, sp
   d5670:	f7ff ffa2 	bl	d55b8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5674:	4668      	mov	r0, sp
   d5676:	f7ff fd02 	bl	d507e <_ZNK5spark9JSONValue5toIntEv>
   d567a:	6028      	str	r0, [r5, #0]
   d567c:	a801      	add	r0, sp, #4
   d567e:	f7ff fb37 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5682:	e7dd      	b.n	d5640 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5684:	a805      	add	r0, sp, #20
   d5686:	f7ff fb33 	bl	d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d568a:	b00a      	add	sp, #40	; 0x28
   d568c:	bd70      	pop	{r4, r5, r6, pc}
   d568e:	bf00      	nop
   d5690:	000d79d8 	.word	0x000d79d8

000d5694 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5694:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5696:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5698:	4620      	mov	r0, r4
   d569a:	4912      	ldr	r1, [pc, #72]	; (d56e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d569c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d569e:	f001 ffd6 	bl	d764e <strcmp>
   d56a2:	b948      	cbnz	r0, d56b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d56a4:	f001 f9e4 	bl	d6a70 <_Z16_fetch_usbserialv>
   d56a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d56ac:	f001 f9d0 	bl	d6a50 <_ZN9USBSerial5beginEl>
        return &Serial;
   d56b0:	f001 f9de 	bl	d6a70 <_Z16_fetch_usbserialv>
}
   d56b4:	b003      	add	sp, #12
   d56b6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d56b8:	490b      	ldr	r1, [pc, #44]	; (d56e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d56ba:	4620      	mov	r0, r4
   d56bc:	f001 ffc7 	bl	d764e <strcmp>
   d56c0:	b970      	cbnz	r0, d56e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d56c2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d56c6:	a901      	add	r1, sp, #4
   d56c8:	4628      	mov	r0, r5
        int baud = 9600;
   d56ca:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d56cc:	f7ff ffb0 	bl	d5630 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d56d0:	f001 f946 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d56d4:	9901      	ldr	r1, [sp, #4]
   d56d6:	f001 f93d 	bl	d6954 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d56da:	f001 f941 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d56de:	e7e9      	b.n	d56b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d56e0:	2000      	movs	r0, #0
   d56e2:	e7e7      	b.n	d56b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d56e4:	000d79dd 	.word	0x000d79dd
   d56e8:	000d79e4 	.word	0x000d79e4

000d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d56ee:	e9d0 5300 	ldrd	r5, r3, [r0]
   d56f2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d56f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d56fa:	42ae      	cmp	r6, r5
   d56fc:	d005      	beq.n	d570a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d56fe:	f105 0008 	add.w	r0, r5, #8
   d5702:	f7ff fff3 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5706:	3514      	adds	r5, #20
   d5708:	e7f7      	b.n	d56fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d570a:	6820      	ldr	r0, [r4, #0]
   d570c:	f7ff fab6 	bl	d4c7c <free>
}
   d5710:	4620      	mov	r0, r4
   d5712:	bd70      	pop	{r4, r5, r6, pc}

000d5714 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5714:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5716:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d571a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d571c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5720:	42ae      	cmp	r6, r5
   d5722:	d004      	beq.n	d572e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5724:	4628      	mov	r0, r5
   d5726:	f000 ffdb 	bl	d66e0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d572a:	3510      	adds	r5, #16
   d572c:	e7f8      	b.n	d5720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d572e:	6820      	ldr	r0, [r4, #0]
   d5730:	f7ff faa4 	bl	d4c7c <free>
}
   d5734:	4620      	mov	r0, r4
   d5736:	bd70      	pop	{r4, r5, r6, pc}

000d5738 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5738:	b510      	push	{r4, lr}
   d573a:	4604      	mov	r4, r0
   d573c:	300c      	adds	r0, #12
   d573e:	f7ff ffd5 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5742:	4620      	mov	r0, r4
   d5744:	f7ff ffe6 	bl	d5714 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5748:	4620      	mov	r0, r4
   d574a:	bd10      	pop	{r4, pc}

000d574c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d574c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d574e:	4b04      	ldr	r3, [pc, #16]	; (d5760 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5750:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5752:	f840 3b04 	str.w	r3, [r0], #4
   d5756:	f7ff ffef 	bl	d5738 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d575a:	4620      	mov	r0, r4
   d575c:	bd10      	pop	{r4, pc}
   d575e:	bf00      	nop
   d5760:	000d7900 	.word	0x000d7900

000d5764 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5764:	b510      	push	{r4, lr}
   d5766:	4604      	mov	r4, r0
   d5768:	f7ff fff0 	bl	d574c <_ZN5spark16StreamLogHandlerD1Ev>
   d576c:	4620      	mov	r0, r4
   d576e:	2124      	movs	r1, #36	; 0x24
   d5770:	f001 fa40 	bl	d6bf4 <_ZdlPvj>
   d5774:	4620      	mov	r0, r4
   d5776:	bd10      	pop	{r4, pc}

000d5778 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5778:	b510      	push	{r4, lr}
   d577a:	4b03      	ldr	r3, [pc, #12]	; (d5788 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d577c:	6003      	str	r3, [r0, #0]
   d577e:	4604      	mov	r4, r0
   d5780:	f7ff ffe4 	bl	d574c <_ZN5spark16StreamLogHandlerD1Ev>
   d5784:	4620      	mov	r0, r4
   d5786:	bd10      	pop	{r4, pc}
   d5788:	000d7a84 	.word	0x000d7a84

000d578c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d578c:	b510      	push	{r4, lr}
   d578e:	4604      	mov	r4, r0
   d5790:	f7ff fff2 	bl	d5778 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5794:	4620      	mov	r0, r4
   d5796:	2124      	movs	r1, #36	; 0x24
   d5798:	f001 fa2c 	bl	d6bf4 <_ZdlPvj>
   d579c:	4620      	mov	r0, r4
   d579e:	bd10      	pop	{r4, pc}

000d57a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d57a0:	2200      	movs	r2, #0
   d57a2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d57a6:	b510      	push	{r4, lr}
        capacity_(0) {
   d57a8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d57aa:	680c      	ldr	r4, [r1, #0]
   d57ac:	6004      	str	r4, [r0, #0]
   d57ae:	684c      	ldr	r4, [r1, #4]
   d57b0:	6044      	str	r4, [r0, #4]
   d57b2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57b4:	600a      	str	r2, [r1, #0]
   d57b6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57b8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ba:	608a      	str	r2, [r1, #8]
}
   d57bc:	bd10      	pop	{r4, pc}

000d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d57be:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d57c0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d57c2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d57c4:	6818      	ldr	r0, [r3, #0]
   d57c6:	f7ff f8ed 	bl	d49a4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d57ca:	4620      	mov	r0, r4
   d57cc:	bd10      	pop	{r4, pc}
	...

000d57d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d57d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57d4:	b087      	sub	sp, #28
   d57d6:	4680      	mov	r8, r0
   d57d8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d57da:	4b1c      	ldr	r3, [pc, #112]	; (d584c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d57dc:	685b      	ldr	r3, [r3, #4]
   d57de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d57e2:	4689      	mov	r9, r1
   d57e4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d57e6:	b96b      	cbnz	r3, d5804 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d57e8:	f7ff feb8 	bl	d555c <_ZN5spark10LogManager8instanceEv>
   d57ec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d57ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d57f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d57f4:	9305      	str	r3, [sp, #20]
   d57f6:	f7ff f8cd 	bl	d4994 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d57fa:	7b23      	ldrb	r3, [r4, #12]
   d57fc:	b12b      	cbz	r3, d580a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d57fe:	a805      	add	r0, sp, #20
   d5800:	f7ff ffdd 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5804:	b007      	add	sp, #28
   d5806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d580a:	2301      	movs	r3, #1
   d580c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d580e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5812:	fa5f f989 	uxtb.w	r9, r9
   d5816:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d581a:	45aa      	cmp	sl, r5
   d581c:	d012      	beq.n	d5844 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d581e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5822:	4631      	mov	r1, r6
   d5824:	1d38      	adds	r0, r7, #4
   d5826:	f7ff fe25 	bl	d5474 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d582a:	4581      	cmp	r9, r0
   d582c:	d3f5      	bcc.n	d581a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d582e:	683b      	ldr	r3, [r7, #0]
   d5830:	9a03      	ldr	r2, [sp, #12]
   d5832:	9200      	str	r2, [sp, #0]
   d5834:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5838:	464a      	mov	r2, r9
   d583a:	4633      	mov	r3, r6
   d583c:	4641      	mov	r1, r8
   d583e:	4638      	mov	r0, r7
   d5840:	47d8      	blx	fp
   d5842:	e7ea      	b.n	d581a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5844:	2300      	movs	r3, #0
   d5846:	7323      	strb	r3, [r4, #12]
   d5848:	e7d9      	b.n	d57fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d584a:	bf00      	nop
   d584c:	e000ed00 	.word	0xe000ed00

000d5850 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5854:	469b      	mov	fp, r3
   d5856:	4b1a      	ldr	r3, [pc, #104]	; (d58c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5858:	685b      	ldr	r3, [r3, #4]
   d585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d585e:	4680      	mov	r8, r0
   d5860:	4689      	mov	r9, r1
   d5862:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5864:	b96b      	cbnz	r3, d5882 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5866:	f7ff fe79 	bl	d555c <_ZN5spark10LogManager8instanceEv>
   d586a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d586c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5870:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5872:	9301      	str	r3, [sp, #4]
   d5874:	f7ff f88e 	bl	d4994 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5878:	7b23      	ldrb	r3, [r4, #12]
   d587a:	b12b      	cbz	r3, d5888 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d587c:	a801      	add	r0, sp, #4
   d587e:	f7ff ff9e 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5882:	b003      	add	sp, #12
   d5884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5888:	2301      	movs	r3, #1
   d588a:	7323      	strb	r3, [r4, #12]
   d588c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5890:	b2f6      	uxtb	r6, r6
   d5892:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5896:	4555      	cmp	r5, sl
   d5898:	d00e      	beq.n	d58b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d589a:	f855 7b04 	ldr.w	r7, [r5], #4
   d589e:	4659      	mov	r1, fp
   d58a0:	1d38      	adds	r0, r7, #4
   d58a2:	f7ff fde7 	bl	d5474 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d58a6:	4286      	cmp	r6, r0
   d58a8:	d3f5      	bcc.n	d5896 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d58aa:	683b      	ldr	r3, [r7, #0]
   d58ac:	464a      	mov	r2, r9
   d58ae:	68db      	ldr	r3, [r3, #12]
   d58b0:	4641      	mov	r1, r8
   d58b2:	4638      	mov	r0, r7
   d58b4:	4798      	blx	r3
   d58b6:	e7ee      	b.n	d5896 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d58b8:	2300      	movs	r3, #0
   d58ba:	7323      	strb	r3, [r4, #12]
   d58bc:	e7de      	b.n	d587c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d58be:	bf00      	nop
   d58c0:	e000ed00 	.word	0xe000ed00

000d58c4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d58c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d58c8:	4b16      	ldr	r3, [pc, #88]	; (d5924 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d58ca:	685b      	ldr	r3, [r3, #4]
   d58cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d58d0:	4605      	mov	r5, r0
   d58d2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d58d4:	bb1b      	cbnz	r3, d591e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d58d6:	f7ff fe41 	bl	d555c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d58da:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d58de:	4604      	mov	r4, r0
   d58e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d58e2:	9301      	str	r3, [sp, #4]
   d58e4:	f7ff f856 	bl	d4994 <os_mutex_recursive_lock>
   d58e8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d58ec:	2446      	movs	r4, #70	; 0x46
   d58ee:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d58f2:	45b0      	cmp	r8, r6
   d58f4:	d109      	bne.n	d590a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d58f6:	a801      	add	r0, sp, #4
   d58f8:	f7ff ff61 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d58fc:	42a5      	cmp	r5, r4
   d58fe:	bfb4      	ite	lt
   d5900:	2000      	movlt	r0, #0
   d5902:	2001      	movge	r0, #1
}
   d5904:	b002      	add	sp, #8
   d5906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d590a:	f856 0b04 	ldr.w	r0, [r6], #4
   d590e:	4639      	mov	r1, r7
   d5910:	3004      	adds	r0, #4
   d5912:	f7ff fdaf 	bl	d5474 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d5916:	4284      	cmp	r4, r0
   d5918:	bfa8      	it	ge
   d591a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d591c:	e7e9      	b.n	d58f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d591e:	2000      	movs	r0, #0
   d5920:	e7f0      	b.n	d5904 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5922:	bf00      	nop
   d5924:	e000ed00 	.word	0xe000ed00

000d5928 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5928:	b570      	push	{r4, r5, r6, lr}
   d592a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d592c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5930:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5932:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d5936:	4282      	cmp	r2, r0
   d5938:	d007      	beq.n	d594a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d593a:	4601      	mov	r1, r0
            if (*p == value) {
   d593c:	681d      	ldr	r5, [r3, #0]
   d593e:	f851 6b04 	ldr.w	r6, [r1], #4
   d5942:	42ae      	cmp	r6, r5
   d5944:	d003      	beq.n	d594e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d5946:	4608      	mov	r0, r1
   d5948:	e7f5      	b.n	d5936 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d594a:	2000      	movs	r0, #0
}
   d594c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d594e:	1a52      	subs	r2, r2, r1
   d5950:	f001 fe20 	bl	d7594 <memmove>
    --size_;
   d5954:	6863      	ldr	r3, [r4, #4]
   d5956:	3b01      	subs	r3, #1
   d5958:	6063      	str	r3, [r4, #4]
    return true;
   d595a:	2001      	movs	r0, #1
   d595c:	e7f6      	b.n	d594c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d595e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d595e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5960:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5964:	4604      	mov	r4, r0
   d5966:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5968:	9101      	str	r1, [sp, #4]
   d596a:	9303      	str	r3, [sp, #12]
   d596c:	f7ff f812 	bl	d4994 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5970:	a901      	add	r1, sp, #4
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff ffd8 	bl	d5928 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5978:	b118      	cbz	r0, d5982 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d597a:	6863      	ldr	r3, [r4, #4]
   d597c:	b90b      	cbnz	r3, d5982 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d597e:	f7ff fe15 	bl	d55ac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5982:	a803      	add	r0, sp, #12
   d5984:	f7ff ff1b 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5988:	b004      	add	sp, #16
   d598a:	bd10      	pop	{r4, pc}

000d598c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d598c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d598e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d5992:	2318      	movs	r3, #24
   d5994:	4604      	mov	r4, r0
   d5996:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d599a:	42ae      	cmp	r6, r5
   d599c:	d015      	beq.n	d59ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d599e:	f105 0110 	add.w	r1, r5, #16
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff ffc0 	bl	d5928 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d59a8:	6863      	ldr	r3, [r4, #4]
   d59aa:	b90b      	cbnz	r3, d59b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d59ac:	f7ff fdfe 	bl	d55ac <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d59b0:	69e0      	ldr	r0, [r4, #28]
   d59b2:	6929      	ldr	r1, [r5, #16]
   d59b4:	6803      	ldr	r3, [r0, #0]
   d59b6:	68db      	ldr	r3, [r3, #12]
   d59b8:	4798      	blx	r3
        if (h.stream) {
   d59ba:	6969      	ldr	r1, [r5, #20]
   d59bc:	b119      	cbz	r1, d59c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d59be:	6a20      	ldr	r0, [r4, #32]
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	68db      	ldr	r3, [r3, #12]
   d59c4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d59c6:	3518      	adds	r5, #24
   d59c8:	e7e7      	b.n	d599a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d59ca:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d59ce:	2618      	movs	r6, #24
   d59d0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d59d4:	42ae      	cmp	r6, r5
   d59d6:	d004      	beq.n	d59e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d59d8:	4628      	mov	r0, r5
   d59da:	f000 fe81 	bl	d66e0 <_ZN6StringD1Ev>
   d59de:	3518      	adds	r5, #24
   d59e0:	e7f8      	b.n	d59d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d59e2:	2300      	movs	r3, #0
   d59e4:	6163      	str	r3, [r4, #20]
}
   d59e6:	bd70      	pop	{r4, r5, r6, pc}

000d59e8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d59e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59ea:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d59ec:	f7ff fdde 	bl	d55ac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d59f0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d59f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d59f6:	9301      	str	r3, [sp, #4]
   d59f8:	f7fe ffcc 	bl	d4994 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d59fc:	4620      	mov	r0, r4
   d59fe:	f7ff ffc5 	bl	d598c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5a02:	a801      	add	r0, sp, #4
   d5a04:	f7ff fedb 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5a08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5a0a:	b108      	cbz	r0, d5a10 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5a0c:	f7fe ffba 	bl	d4984 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5a10:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5a14:	2618      	movs	r6, #24
   d5a16:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5a1a:	42ae      	cmp	r6, r5
   d5a1c:	d004      	beq.n	d5a28 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5a1e:	4628      	mov	r0, r5
   d5a20:	f000 fe5e 	bl	d66e0 <_ZN6StringD1Ev>
   d5a24:	3518      	adds	r5, #24
   d5a26:	e7f8      	b.n	d5a1a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5a28:	6920      	ldr	r0, [r4, #16]
   d5a2a:	f7ff f927 	bl	d4c7c <free>
   d5a2e:	6820      	ldr	r0, [r4, #0]
   d5a30:	f7ff f924 	bl	d4c7c <free>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	b002      	add	sp, #8
   d5a38:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a3c <__tcf_2>:
    static LogManager mgr;
   d5a3c:	4801      	ldr	r0, [pc, #4]	; (d5a44 <__tcf_2+0x8>)
   d5a3e:	f7ff bfd3 	b.w	d59e8 <_ZN5spark10LogManagerD1Ev>
   d5a42:	bf00      	nop
   d5a44:	2003e5bc 	.word	0x2003e5bc

000d5a48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d5a48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a4c:	4606      	mov	r6, r0
   d5a4e:	460c      	mov	r4, r1
   d5a50:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5a52:	d927      	bls.n	d5aa4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d5a54:	4290      	cmp	r0, r2
   d5a56:	d226      	bcs.n	d5aa6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d5a58:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d5a5c:	1a6c      	subs	r4, r5, r1
   d5a5e:	f1a1 0714 	sub.w	r7, r1, #20
   d5a62:	4404      	add	r4, r0
        capacity_(0) {
   d5a64:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5a66:	42af      	cmp	r7, r5
   d5a68:	d03d      	beq.n	d5ae6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d5a6a:	b1a4      	cbz	r4, d5a96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d5a6c:	682b      	ldr	r3, [r5, #0]
   d5a6e:	6023      	str	r3, [r4, #0]
   d5a70:	88ab      	ldrh	r3, [r5, #4]
   d5a72:	80a3      	strh	r3, [r4, #4]
   d5a74:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d5a78:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d5a7a:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5a7e:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a80:	68ab      	ldr	r3, [r5, #8]
   d5a82:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a84:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a86:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a88:	68ea      	ldr	r2, [r5, #12]
   d5a8a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a8c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a8e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a90:	692a      	ldr	r2, [r5, #16]
   d5a92:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a94:	612b      	str	r3, [r5, #16]
   d5a96:	f105 0008 	add.w	r0, r5, #8
   d5a9a:	f7ff fe27 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5a9e:	3d14      	subs	r5, #20
   d5aa0:	3c14      	subs	r4, #20
   d5aa2:	e7e0      	b.n	d5a66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5aa4:	d01f      	beq.n	d5ae6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5aa6:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d5aa8:	42ac      	cmp	r4, r5
   d5aaa:	d01c      	beq.n	d5ae6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d5aac:	b1a6      	cbz	r6, d5ad8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5aae:	6823      	ldr	r3, [r4, #0]
   d5ab0:	6033      	str	r3, [r6, #0]
   d5ab2:	88a3      	ldrh	r3, [r4, #4]
   d5ab4:	80b3      	strh	r3, [r6, #4]
   d5ab6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5aba:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5abc:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5ac0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5ac2:	68a3      	ldr	r3, [r4, #8]
   d5ac4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ac6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ac8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5aca:	68e2      	ldr	r2, [r4, #12]
   d5acc:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ace:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ad0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5ad2:	6922      	ldr	r2, [r4, #16]
   d5ad4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad6:	6123      	str	r3, [r4, #16]
   d5ad8:	f104 0008 	add.w	r0, r4, #8
   d5adc:	f7ff fe06 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5ae0:	3414      	adds	r4, #20
   d5ae2:	3614      	adds	r6, #20
   d5ae4:	e7e0      	b.n	d5aa8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ae8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5aea:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5aee:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5af0:	4604      	mov	r4, r0
   d5af2:	460e      	mov	r6, r1
   d5af4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5af6:	db0d      	blt.n	d5b14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d5af8:	3501      	adds	r5, #1
        if (n > 0) {
   d5afa:	2d00      	cmp	r5, #0
   d5afc:	6800      	ldr	r0, [r0, #0]
   d5afe:	dd04      	ble.n	d5b0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5b00:	00a9      	lsls	r1, r5, #2
   d5b02:	f7ff f8c3 	bl	d4c8c <realloc>
            if (!d) {
   d5b06:	b918      	cbnz	r0, d5b10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d5b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5b0a:	f7ff f8b7 	bl	d4c7c <free>
        T* d = nullptr;
   d5b0e:	2000      	movs	r0, #0
        data_ = d;
   d5b10:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5b12:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d5b14:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5b16:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5b18:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5b1c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5b1e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5b22:	1d08      	adds	r0, r1, #4
   d5b24:	f001 fd36 	bl	d7594 <memmove>
    new(p) T(std::move(value));
   d5b28:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5b2c:	6863      	ldr	r3, [r4, #4]
   d5b2e:	3301      	adds	r3, #1
   d5b30:	6063      	str	r3, [r4, #4]
    return true;
   d5b32:	2001      	movs	r0, #1
   d5b34:	e7e8      	b.n	d5b08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5b36 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5b36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d5b38:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5b3c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5b3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	460d      	mov	r5, r1
   d5b44:	f7fe ff26 	bl	d4994 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d5b48:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5b4c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5b50:	4283      	cmp	r3, r0
   d5b52:	461a      	mov	r2, r3
   d5b54:	d00b      	beq.n	d5b6e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d5b56:	6812      	ldr	r2, [r2, #0]
   d5b58:	42aa      	cmp	r2, r5
   d5b5a:	f103 0304 	add.w	r3, r3, #4
   d5b5e:	d1f7      	bne.n	d5b50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5b60:	a801      	add	r0, sp, #4
   d5b62:	f7ff fe2c 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5b66:	2500      	movs	r5, #0
}
   d5b68:	4628      	mov	r0, r5
   d5b6a:	b003      	add	sp, #12
   d5b6c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d5b6e:	462a      	mov	r2, r5
   d5b70:	4620      	mov	r0, r4
   d5b72:	f7ff ffb9 	bl	d5ae8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5b76:	4605      	mov	r5, r0
   d5b78:	2800      	cmp	r0, #0
   d5b7a:	d0f1      	beq.n	d5b60 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d5b7c:	6863      	ldr	r3, [r4, #4]
   d5b7e:	2b01      	cmp	r3, #1
   d5b80:	d101      	bne.n	d5b86 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5b82:	f7ff fd07 	bl	d5594 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5b86:	a801      	add	r0, sp, #4
   d5b88:	f7ff fe19 	bl	d57be <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5b8c:	e7ec      	b.n	d5b68 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5b8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5b8e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b92:	4604      	mov	r4, r0
   d5b94:	460d      	mov	r5, r1
   d5b96:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5b98:	d914      	bls.n	d5bc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5b9a:	4290      	cmp	r0, r2
   d5b9c:	d213      	bcs.n	d5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5b9e:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5ba2:	1a75      	subs	r5, r6, r1
   d5ba4:	f1a1 0710 	sub.w	r7, r1, #16
   d5ba8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5baa:	42b7      	cmp	r7, r6
   d5bac:	d018      	beq.n	d5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5bae:	b11c      	cbz	r4, d5bb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5bb0:	4631      	mov	r1, r6
   d5bb2:	4620      	mov	r0, r4
   d5bb4:	f000 fe10 	bl	d67d8 <_ZN6StringC1EOS_>
                end->~T();
   d5bb8:	4630      	mov	r0, r6
   d5bba:	f000 fd91 	bl	d66e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5bbe:	3e10      	subs	r6, #16
   d5bc0:	3c10      	subs	r4, #16
   d5bc2:	e7f2      	b.n	d5baa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5bc4:	d00c      	beq.n	d5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5bc6:	42b5      	cmp	r5, r6
   d5bc8:	d00a      	beq.n	d5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5bca:	b11c      	cbz	r4, d5bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5bcc:	4629      	mov	r1, r5
   d5bce:	4620      	mov	r0, r4
   d5bd0:	f000 fe02 	bl	d67d8 <_ZN6StringC1EOS_>
                p->~T();
   d5bd4:	4628      	mov	r0, r5
   d5bd6:	f000 fd83 	bl	d66e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5bda:	3510      	adds	r5, #16
   d5bdc:	3410      	adds	r4, #16
   d5bde:	e7f2      	b.n	d5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5be2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5be4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5be6:	4605      	mov	r5, r0
        if (n > 0) {
   d5be8:	dd11      	ble.n	d5c0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5bea:	0130      	lsls	r0, r6, #4
   d5bec:	f7ff f83e 	bl	d4c6c <malloc>
            if (!d) {
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	b158      	cbz	r0, d5c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5bf4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5bf8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5bfc:	f7ff ffc7 	bl	d5b8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5c00:	6828      	ldr	r0, [r5, #0]
   d5c02:	f7ff f83b 	bl	d4c7c <free>
        data_ = d;
   d5c06:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5c08:	60ae      	str	r6, [r5, #8]
        return true;
   d5c0a:	2001      	movs	r0, #1
    }
   d5c0c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5c0e:	2400      	movs	r4, #0
   d5c10:	e7f6      	b.n	d5c00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5c12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c16:	4691      	mov	r9, r2
   d5c18:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5c1a:	2300      	movs	r3, #0
   d5c1c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5c1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5c22:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5c24:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5c26:	4299      	cmp	r1, r3
        capacity_(0) {
   d5c28:	e9c0 3300 	strd	r3, r3, [r0]
   d5c2c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5c30:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5c34:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5c38:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5c3a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5c3c:	dc23      	bgt.n	d5c86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5c3e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5c42:	2314      	movs	r3, #20
   d5c44:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d5c48:	42af      	cmp	r7, r5
   d5c4a:	d03b      	beq.n	d5cc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5c4c:	4629      	mov	r1, r5
   d5c4e:	a80d      	add	r0, sp, #52	; 0x34
   d5c50:	f000 fdc2 	bl	d67d8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5c54:	a90d      	add	r1, sp, #52	; 0x34
   d5c56:	a811      	add	r0, sp, #68	; 0x44
   d5c58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5c5a:	f000 fdbd 	bl	d67d8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c5e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5c62:	4299      	cmp	r1, r3
   d5c64:	da1b      	bge.n	d5c9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5c6a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5c6e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5c72:	4631      	mov	r1, r6
   d5c74:	f106 0010 	add.w	r0, r6, #16
   d5c78:	f7ff ff89 	bl	d5b8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5c7c:	b9ee      	cbnz	r6, d5cba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5c80:	3301      	adds	r3, #1
   d5c82:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5c84:	e011      	b.n	d5caa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5c86:	a80a      	add	r0, sp, #40	; 0x28
   d5c88:	f7ff ffab 	bl	d5be2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5c8c:	2800      	cmp	r0, #0
   d5c8e:	d1d6      	bne.n	d5c3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5c90:	a80a      	add	r0, sp, #40	; 0x28
   d5c92:	f7ff fd3f 	bl	d5714 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5c96:	4620      	mov	r0, r4
   d5c98:	b017      	add	sp, #92	; 0x5c
   d5c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c9e:	3101      	adds	r1, #1
   d5ca0:	a80a      	add	r0, sp, #40	; 0x28
   d5ca2:	f7ff ff9e 	bl	d5be2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5ca6:	2800      	cmp	r0, #0
   d5ca8:	d1dd      	bne.n	d5c66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5caa:	a811      	add	r0, sp, #68	; 0x44
   d5cac:	f000 fd18 	bl	d66e0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5cb0:	a80d      	add	r0, sp, #52	; 0x34
   d5cb2:	f000 fd15 	bl	d66e0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5cb6:	3514      	adds	r5, #20
   d5cb8:	e7c6      	b.n	d5c48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5cba:	a911      	add	r1, sp, #68	; 0x44
   d5cbc:	4630      	mov	r0, r6
   d5cbe:	f000 fd8b 	bl	d67d8 <_ZN6StringC1EOS_>
   d5cc2:	e7dc      	b.n	d5c7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5cc4:	2600      	movs	r6, #0
   d5cc6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5cca:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5ccc:	4637      	mov	r7, r6
   d5cce:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5cd6:	429e      	cmp	r6, r3
   d5cd8:	f280 8097 	bge.w	d5e0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5cdc:	0133      	lsls	r3, r6, #4
   d5cde:	58d3      	ldr	r3, [r2, r3]
   d5ce0:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5ce2:	b90b      	cbnz	r3, d5ce8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5ce4:	3601      	adds	r6, #1
   d5ce6:	e7f4      	b.n	d5cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5ce8:	fb0a f306 	mul.w	r3, sl, r6
   d5cec:	9709      	str	r7, [sp, #36]	; 0x24
   d5cee:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5cf0:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5cf2:	a909      	add	r1, sp, #36	; 0x24
   d5cf4:	a808      	add	r0, sp, #32
   d5cf6:	f7ff fb00 	bl	d52fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5cfa:	4683      	mov	fp, r0
   d5cfc:	2800      	cmp	r0, #0
   d5cfe:	d0f1      	beq.n	d5ce4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d00:	4601      	mov	r1, r0
   d5d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5d04:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d08:	f10d 031f 	add.w	r3, sp, #31
   d5d0c:	4628      	mov	r0, r5
   d5d0e:	f7ff fb73 	bl	d53f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5d12:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5d16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5d18:	f1b8 0f00 	cmp.w	r8, #0
   d5d1c:	d166      	bne.n	d5dec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5d1e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5d22:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5d26:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d2e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5d32:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5d36:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d3a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5d3e:	4293      	cmp	r3, r2
   d5d40:	db1a      	blt.n	d5d78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5d42:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5d46:	f1bb 0f00 	cmp.w	fp, #0
   d5d4a:	dd4a      	ble.n	d5de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5d4c:	fb0a f00b 	mul.w	r0, sl, fp
   d5d50:	f7fe ff8c 	bl	d4c6c <malloc>
            if (!d) {
   d5d54:	9004      	str	r0, [sp, #16]
   d5d56:	2800      	cmp	r0, #0
   d5d58:	d045      	beq.n	d5de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5d5a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5d5e:	fb0a 1202 	mla	r2, sl, r2, r1
   d5d62:	f7ff fe71 	bl	d5a48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5d66:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5d68:	6828      	ldr	r0, [r5, #0]
   d5d6a:	9304      	str	r3, [sp, #16]
   d5d6c:	f7fe ff86 	bl	d4c7c <free>
        data_ = d;
   d5d70:	9b04      	ldr	r3, [sp, #16]
   d5d72:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5d74:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5d78:	9b01      	ldr	r3, [sp, #4]
   d5d7a:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5d7e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5d80:	fb0a f303 	mul.w	r3, sl, r3
   d5d84:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5d88:	f101 0014 	add.w	r0, r1, #20
   d5d8c:	fb0a b202 	mla	r2, sl, r2, fp
   d5d90:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5d92:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5d94:	f7ff fe58 	bl	d5a48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5d98:	9904      	ldr	r1, [sp, #16]
   d5d9a:	b1a9      	cbz	r1, d5dc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5d9c:	9b05      	ldr	r3, [sp, #20]
   d5d9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5da0:	f84b 2003 	str.w	r2, [fp, r3]
   d5da4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5da8:	808b      	strh	r3, [r1, #4]
   d5daa:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5dae:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5db0:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5db4:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5db8:	608b      	str	r3, [r1, #8]
   d5dba:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5dbc:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5dbe:	60cb      	str	r3, [r1, #12]
   d5dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5dc2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5dc4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dc6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5dc8:	686b      	ldr	r3, [r5, #4]
   d5dca:	3301      	adds	r3, #1
   d5dcc:	606b      	str	r3, [r5, #4]
   d5dce:	a813      	add	r0, sp, #76	; 0x4c
   d5dd0:	f7ff fc8c 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5dd4:	f1b8 0f00 	cmp.w	r8, #0
   d5dd8:	d008      	beq.n	d5dec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5dda:	a80d      	add	r0, sp, #52	; 0x34
   d5ddc:	f7ff fc86 	bl	d56ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5de0:	e756      	b.n	d5c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5de2:	4643      	mov	r3, r8
   d5de4:	e7c0      	b.n	d5d68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5de6:	f04f 0801 	mov.w	r8, #1
   d5dea:	e7f0      	b.n	d5dce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5dec:	9b01      	ldr	r3, [sp, #4]
   d5dee:	682d      	ldr	r5, [r5, #0]
   d5df0:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5df4:	9b08      	ldr	r3, [sp, #32]
   d5df6:	781b      	ldrb	r3, [r3, #0]
   d5df8:	b92b      	cbnz	r3, d5e06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5dfa:	f8d9 3000 	ldr.w	r3, [r9]
   d5dfe:	9a02      	ldr	r2, [sp, #8]
   d5e00:	4413      	add	r3, r2
   d5e02:	7c1b      	ldrb	r3, [r3, #16]
   d5e04:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5e06:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5e08:	e773      	b.n	d5cf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e0a:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e0c:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e0e:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5e10:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e12:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e14:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5e18:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e1a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5e1c:	60a2      	str	r2, [r4, #8]
   d5e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5e20:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e22:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5e24:	60e2      	str	r2, [r4, #12]
   d5e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5e28:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e2a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5e2c:	6122      	str	r2, [r4, #16]
   d5e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5e30:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5e32:	9b03      	ldr	r3, [sp, #12]
   d5e34:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5e36:	6162      	str	r2, [r4, #20]
   d5e38:	7623      	strb	r3, [r4, #24]
   d5e3a:	e7ce      	b.n	d5dda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d5e3c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5e3e:	4605      	mov	r5, r0
   d5e40:	4b09      	ldr	r3, [pc, #36]	; (d5e68 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5e42:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5e46:	4604      	mov	r4, r0
   d5e48:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5e4a:	a801      	add	r0, sp, #4
   d5e4c:	4611      	mov	r1, r2
   d5e4e:	f7fe fa38 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5e52:	aa01      	add	r2, sp, #4
   d5e54:	4631      	mov	r1, r6
   d5e56:	4628      	mov	r0, r5
   d5e58:	f7ff fedb 	bl	d5c12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5e5c:	a801      	add	r0, sp, #4
   d5e5e:	f7fe f9ef 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5e62:	4620      	mov	r0, r4
   d5e64:	b004      	add	sp, #16
   d5e66:	bd70      	pop	{r4, r5, r6, pc}
   d5e68:	000d7900 	.word	0x000d7900

000d5e6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e6e:	460f      	mov	r7, r1
   d5e70:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e72:	4926      	ldr	r1, [pc, #152]	; (d5f0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5e74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e76:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5e78:	4616      	mov	r6, r2
   d5e7a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5e7c:	f001 fbe7 	bl	d764e <strcmp>
   d5e80:	bb00      	cbnz	r0, d5ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5e82:	b1e4      	cbz	r4, d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5e84:	4629      	mov	r1, r5
   d5e86:	4668      	mov	r0, sp
   d5e88:	f7ff fc8a 	bl	d57a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5e8c:	4920      	ldr	r1, [pc, #128]	; (d5f10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5e8e:	2024      	movs	r0, #36	; 0x24
   d5e90:	f000 feb2 	bl	d6bf8 <_ZnwjRKSt9nothrow_t>
   d5e94:	4605      	mov	r5, r0
   d5e96:	b170      	cbz	r0, d5eb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5e98:	4669      	mov	r1, sp
   d5e9a:	a803      	add	r0, sp, #12
   d5e9c:	f7fe fa11 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ea0:	aa03      	add	r2, sp, #12
   d5ea2:	4631      	mov	r1, r6
   d5ea4:	4628      	mov	r0, r5
   d5ea6:	f7ff ffc9 	bl	d5e3c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5eaa:	a803      	add	r0, sp, #12
   d5eac:	f7fe f9c8 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5eb0:	4b18      	ldr	r3, [pc, #96]	; (d5f14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5eb2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5eb4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5eb6:	4668      	mov	r0, sp
   d5eb8:	f7fe f9c2 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5ebc:	462c      	mov	r4, r5
}
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	b007      	add	sp, #28
   d5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5ec4:	4914      	ldr	r1, [pc, #80]	; (d5f18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5ec6:	4638      	mov	r0, r7
   d5ec8:	f001 fbc1 	bl	d764e <strcmp>
   d5ecc:	b9e0      	cbnz	r0, d5f08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5ece:	2c00      	cmp	r4, #0
   d5ed0:	d0f5      	beq.n	d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5ed2:	4629      	mov	r1, r5
   d5ed4:	4668      	mov	r0, sp
   d5ed6:	f7ff fc63 	bl	d57a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5eda:	490d      	ldr	r1, [pc, #52]	; (d5f10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5edc:	2024      	movs	r0, #36	; 0x24
   d5ede:	f000 fe8b 	bl	d6bf8 <_ZnwjRKSt9nothrow_t>
   d5ee2:	4605      	mov	r5, r0
   d5ee4:	2800      	cmp	r0, #0
   d5ee6:	d0e6      	beq.n	d5eb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5ee8:	4669      	mov	r1, sp
   d5eea:	a803      	add	r0, sp, #12
   d5eec:	f7fe f9e9 	bl	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ef0:	aa03      	add	r2, sp, #12
   d5ef2:	4631      	mov	r1, r6
   d5ef4:	4628      	mov	r0, r5
   d5ef6:	f7ff ffa1 	bl	d5e3c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5efa:	a803      	add	r0, sp, #12
   d5efc:	f7fe f9a0 	bl	d4240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5f00:	4b06      	ldr	r3, [pc, #24]	; (d5f1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5f02:	602b      	str	r3, [r5, #0]
   d5f04:	622c      	str	r4, [r5, #32]
}
   d5f06:	e7d6      	b.n	d5eb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5f08:	2400      	movs	r4, #0
   d5f0a:	e7d8      	b.n	d5ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5f0c:	000d79ec 	.word	0x000d79ec
   d5f10:	000d7b8c 	.word	0x000d7b8c
   d5f14:	000d7a84 	.word	0x000d7a84
   d5f18:	000d79f0 	.word	0x000d79f0
   d5f1c:	000d7a6c 	.word	0x000d7a6c

000d5f20 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5f20:	4b01      	ldr	r3, [pc, #4]	; (d5f28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f22:	4a02      	ldr	r2, [pc, #8]	; (d5f2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f24:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5f26:	4770      	bx	lr
   d5f28:	2003e5b8 	.word	0x2003e5b8
   d5f2c:	000d7a01 	.word	0x000d7a01

000d5f30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f34:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5f36:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f3a:	4604      	mov	r4, r0
   d5f3c:	460e      	mov	r6, r1
   d5f3e:	4617      	mov	r7, r2
   d5f40:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5f42:	f000 fd95 	bl	d6a70 <_Z16_fetch_usbserialv>
   d5f46:	4581      	cmp	r9, r0
   d5f48:	d04c      	beq.n	d5fe4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5f4a:	792b      	ldrb	r3, [r5, #4]
   d5f4c:	0719      	lsls	r1, r3, #28
   d5f4e:	d504      	bpl.n	d5f5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5f50:	696a      	ldr	r2, [r5, #20]
   d5f52:	4954      	ldr	r1, [pc, #336]	; (d60a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5f54:	4620      	mov	r0, r4
   d5f56:	f7ff fa40 	bl	d53da <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5f5a:	f1b8 0f00 	cmp.w	r8, #0
   d5f5e:	d00d      	beq.n	d5f7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5f60:	215b      	movs	r1, #91	; 0x5b
   d5f62:	4620      	mov	r0, r4
   d5f64:	f7ff fa2d 	bl	d53c2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5f68:	4641      	mov	r1, r8
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7ff fa1a 	bl	d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5f70:	6823      	ldr	r3, [r4, #0]
   d5f72:	494d      	ldr	r1, [pc, #308]	; (d60a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5f74:	68db      	ldr	r3, [r3, #12]
   d5f76:	2202      	movs	r2, #2
   d5f78:	4620      	mov	r0, r4
   d5f7a:	4798      	blx	r3
    if (attr.has_file) {
   d5f7c:	792b      	ldrb	r3, [r5, #4]
   d5f7e:	07da      	lsls	r2, r3, #31
   d5f80:	d523      	bpl.n	d5fca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5f82:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5f86:	212f      	movs	r1, #47	; 0x2f
   d5f88:	4640      	mov	r0, r8
   d5f8a:	f001 fb9f 	bl	d76cc <strrchr>
    if (s1) {
   d5f8e:	b108      	cbz	r0, d5f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5f90:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5f94:	4641      	mov	r1, r8
   d5f96:	4620      	mov	r0, r4
   d5f98:	f7ff fa04 	bl	d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5f9c:	792b      	ldrb	r3, [r5, #4]
   d5f9e:	079b      	lsls	r3, r3, #30
   d5fa0:	d508      	bpl.n	d5fb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5fa2:	213a      	movs	r1, #58	; 0x3a
   d5fa4:	4620      	mov	r0, r4
   d5fa6:	f7ff fa0c 	bl	d53c2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5faa:	68ea      	ldr	r2, [r5, #12]
   d5fac:	493f      	ldr	r1, [pc, #252]	; (d60ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5fae:	4620      	mov	r0, r4
   d5fb0:	f7ff fa13 	bl	d53da <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5fb4:	792a      	ldrb	r2, [r5, #4]
   d5fb6:	6823      	ldr	r3, [r4, #0]
   d5fb8:	f012 0f04 	tst.w	r2, #4
   d5fbc:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5fbe:	bf14      	ite	ne
   d5fc0:	493b      	ldrne	r1, [pc, #236]	; (d60b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5fc2:	493c      	ldreq	r1, [pc, #240]	; (d60b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5fc4:	2202      	movs	r2, #2
            write(": ", 2);
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	4798      	blx	r3
    if (attr.has_function) {
   d5fca:	792b      	ldrb	r3, [r5, #4]
   d5fcc:	0758      	lsls	r0, r3, #29
   d5fce:	d51d      	bpl.n	d600c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5fd0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5fd2:	460b      	mov	r3, r1
   d5fd4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5fd6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5fda:	b160      	cbz	r0, d5ff6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5fdc:	2820      	cmp	r0, #32
   d5fde:	d108      	bne.n	d5ff2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5fe0:	4619      	mov	r1, r3
   d5fe2:	e7f7      	b.n	d5fd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5fe4:	4834      	ldr	r0, [pc, #208]	; (d60b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5fe6:	f000 f966 	bl	d62b6 <_ZN5spark12NetworkClass9listeningEv>
   d5fea:	2800      	cmp	r0, #0
   d5fec:	d0ad      	beq.n	d5f4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5ff2:	2828      	cmp	r0, #40	; 0x28
   d5ff4:	d1ee      	bne.n	d5fd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5ff6:	6823      	ldr	r3, [r4, #0]
   d5ff8:	1a52      	subs	r2, r2, r1
   d5ffa:	68db      	ldr	r3, [r3, #12]
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	4798      	blx	r3
        write("(): ", 4);
   d6000:	6823      	ldr	r3, [r4, #0]
   d6002:	492e      	ldr	r1, [pc, #184]	; (d60bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6004:	68db      	ldr	r3, [r3, #12]
   d6006:	2204      	movs	r2, #4
   d6008:	4620      	mov	r0, r4
   d600a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d600c:	2100      	movs	r1, #0
   d600e:	4638      	mov	r0, r7
   d6010:	f7fe fd90 	bl	d4b34 <log_level_name>
   d6014:	4601      	mov	r1, r0
    write(s);
   d6016:	4620      	mov	r0, r4
   d6018:	f7ff f9c4 	bl	d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d601c:	6823      	ldr	r3, [r4, #0]
   d601e:	4925      	ldr	r1, [pc, #148]	; (d60b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6020:	68db      	ldr	r3, [r3, #12]
   d6022:	2202      	movs	r2, #2
   d6024:	4620      	mov	r0, r4
   d6026:	4798      	blx	r3
    if (msg) {
   d6028:	b11e      	cbz	r6, d6032 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d602a:	4631      	mov	r1, r6
   d602c:	4620      	mov	r0, r4
   d602e:	f7ff f9b9 	bl	d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d6032:	792b      	ldrb	r3, [r5, #4]
   d6034:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6038:	d02c      	beq.n	d6094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d603a:	6823      	ldr	r3, [r4, #0]
   d603c:	4920      	ldr	r1, [pc, #128]	; (d60c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d603e:	68db      	ldr	r3, [r3, #12]
   d6040:	2202      	movs	r2, #2
   d6042:	4620      	mov	r0, r4
   d6044:	4798      	blx	r3
        if (attr.has_code) {
   d6046:	792b      	ldrb	r3, [r5, #4]
   d6048:	06d9      	lsls	r1, r3, #27
   d604a:	d50a      	bpl.n	d6062 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d604c:	6823      	ldr	r3, [r4, #0]
   d604e:	491d      	ldr	r1, [pc, #116]	; (d60c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6050:	68db      	ldr	r3, [r3, #12]
   d6052:	2207      	movs	r2, #7
   d6054:	4620      	mov	r0, r4
   d6056:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d6058:	69aa      	ldr	r2, [r5, #24]
   d605a:	491b      	ldr	r1, [pc, #108]	; (d60c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d605c:	4620      	mov	r0, r4
   d605e:	f7ff f9bc 	bl	d53da <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d6062:	792b      	ldrb	r3, [r5, #4]
   d6064:	069a      	lsls	r2, r3, #26
   d6066:	d511      	bpl.n	d608c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d6068:	06db      	lsls	r3, r3, #27
   d606a:	d505      	bpl.n	d6078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d606c:	6823      	ldr	r3, [r4, #0]
   d606e:	4910      	ldr	r1, [pc, #64]	; (d60b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d6070:	68db      	ldr	r3, [r3, #12]
   d6072:	2202      	movs	r2, #2
   d6074:	4620      	mov	r0, r4
   d6076:	4798      	blx	r3
            write("details = ", 10);
   d6078:	6823      	ldr	r3, [r4, #0]
   d607a:	4914      	ldr	r1, [pc, #80]	; (d60cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d607c:	68db      	ldr	r3, [r3, #12]
   d607e:	4620      	mov	r0, r4
   d6080:	220a      	movs	r2, #10
   d6082:	4798      	blx	r3
            write(attr.details);
   d6084:	69e9      	ldr	r1, [r5, #28]
   d6086:	4620      	mov	r0, r4
   d6088:	f7ff f98c 	bl	d53a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d608c:	215d      	movs	r1, #93	; 0x5d
   d608e:	4620      	mov	r0, r4
   d6090:	f7ff f997 	bl	d53c2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d6094:	6823      	ldr	r3, [r4, #0]
   d6096:	490e      	ldr	r1, [pc, #56]	; (d60d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6098:	68db      	ldr	r3, [r3, #12]
   d609a:	4620      	mov	r0, r4
   d609c:	2202      	movs	r2, #2
}
   d609e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d60a2:	4718      	bx	r3
   d60a4:	000d7a05 	.word	0x000d7a05
   d60a8:	000d7a0c 	.word	0x000d7a0c
   d60ac:	000d79cc 	.word	0x000d79cc
   d60b0:	000d7a0f 	.word	0x000d7a0f
   d60b4:	000d7a14 	.word	0x000d7a14
   d60b8:	2003e5e4 	.word	0x2003e5e4
   d60bc:	000d7a12 	.word	0x000d7a12
   d60c0:	000d7a17 	.word	0x000d7a17
   d60c4:	000d7a1a 	.word	0x000d7a1a
   d60c8:	000d7a22 	.word	0x000d7a22
   d60cc:	000d7a25 	.word	0x000d7a25
   d60d0:	000d7a30 	.word	0x000d7a30

000d60d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d60d8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d60da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d60e0:	4605      	mov	r5, r0
   d60e2:	460f      	mov	r7, r1
   d60e4:	4690      	mov	r8, r2
   d60e6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d60e8:	f000 fcc2 	bl	d6a70 <_Z16_fetch_usbserialv>
   d60ec:	4581      	cmp	r9, r0
   d60ee:	d105      	bne.n	d60fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d60f0:	4849      	ldr	r0, [pc, #292]	; (d6218 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d60f2:	f000 f8e0 	bl	d62b6 <_ZN5spark12NetworkClass9listeningEv>
   d60f6:	2800      	cmp	r0, #0
   d60f8:	f040 808a 	bne.w	d6210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d60fc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d60fe:	4a47      	ldr	r2, [pc, #284]	; (d621c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6100:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d6102:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d6106:	a801      	add	r0, sp, #4
        strm_(stream) {
   d6108:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d610a:	f88d 9008 	strb.w	r9, [sp, #8]
   d610e:	f7ff f83c 	bl	d518a <_ZN5spark10JSONWriter11beginObjectEv>
   d6112:	4649      	mov	r1, r9
   d6114:	4640      	mov	r0, r8
   d6116:	f7fe fd0d 	bl	d4b34 <log_level_name>
    json.name("l", 1).value(s);
   d611a:	4941      	ldr	r1, [pc, #260]	; (d6220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d611c:	4680      	mov	r8, r0
   d611e:	2201      	movs	r2, #1
   d6120:	a801      	add	r0, sp, #4
   d6122:	f7ff f8bb 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d6126:	4641      	mov	r1, r8
   d6128:	f7ff f92e 	bl	d5388 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d612c:	b13f      	cbz	r7, d613e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d612e:	493d      	ldr	r1, [pc, #244]	; (d6224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6130:	2201      	movs	r2, #1
   d6132:	a801      	add	r0, sp, #4
   d6134:	f7ff f8b2 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d6138:	4639      	mov	r1, r7
   d613a:	f7ff f925 	bl	d5388 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d613e:	b13e      	cbz	r6, d6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6140:	4939      	ldr	r1, [pc, #228]	; (d6228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6142:	2201      	movs	r2, #1
   d6144:	a801      	add	r0, sp, #4
   d6146:	f7ff f8a9 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d614a:	4631      	mov	r1, r6
   d614c:	f7ff f91c 	bl	d5388 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d6150:	7923      	ldrb	r3, [r4, #4]
   d6152:	07df      	lsls	r7, r3, #31
   d6154:	d50e      	bpl.n	d6174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d6156:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d6158:	212f      	movs	r1, #47	; 0x2f
   d615a:	4630      	mov	r0, r6
   d615c:	f001 fab6 	bl	d76cc <strrchr>
    if (s1) {
   d6160:	b100      	cbz	r0, d6164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6162:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d6164:	4931      	ldr	r1, [pc, #196]	; (d622c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6166:	2201      	movs	r2, #1
   d6168:	a801      	add	r0, sp, #4
   d616a:	f7ff f897 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d616e:	4631      	mov	r1, r6
   d6170:	f7ff f90a 	bl	d5388 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d6174:	7923      	ldrb	r3, [r4, #4]
   d6176:	079e      	lsls	r6, r3, #30
   d6178:	d507      	bpl.n	d618a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d617a:	492d      	ldr	r1, [pc, #180]	; (d6230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d617c:	2202      	movs	r2, #2
   d617e:	a801      	add	r0, sp, #4
   d6180:	f7ff f88c 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d6184:	68e1      	ldr	r1, [r4, #12]
   d6186:	f7ff f80d 	bl	d51a4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d618a:	7923      	ldrb	r3, [r4, #4]
   d618c:	0758      	lsls	r0, r3, #29
   d618e:	d514      	bpl.n	d61ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6190:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d6192:	4633      	mov	r3, r6
   d6194:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d6196:	f813 2b01 	ldrb.w	r2, [r3], #1
   d619a:	b12a      	cbz	r2, d61a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d619c:	2a20      	cmp	r2, #32
   d619e:	d101      	bne.n	d61a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d61a0:	461e      	mov	r6, r3
   d61a2:	e7f7      	b.n	d6194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d61a4:	2a28      	cmp	r2, #40	; 0x28
   d61a6:	d1f5      	bne.n	d6194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d61a8:	4922      	ldr	r1, [pc, #136]	; (d6234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d61aa:	2202      	movs	r2, #2
   d61ac:	a801      	add	r0, sp, #4
   d61ae:	f7ff f875 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d61b2:	1bba      	subs	r2, r7, r6
   d61b4:	4631      	mov	r1, r6
   d61b6:	f7ff f881 	bl	d52bc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d61ba:	7923      	ldrb	r3, [r4, #4]
   d61bc:	0719      	lsls	r1, r3, #28
   d61be:	d507      	bpl.n	d61d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d61c0:	491d      	ldr	r1, [pc, #116]	; (d6238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d61c2:	2201      	movs	r2, #1
   d61c4:	a801      	add	r0, sp, #4
   d61c6:	f7ff f869 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d61ca:	6961      	ldr	r1, [r4, #20]
   d61cc:	f7fe fffc 	bl	d51c8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d61d0:	7923      	ldrb	r3, [r4, #4]
   d61d2:	06da      	lsls	r2, r3, #27
   d61d4:	d508      	bpl.n	d61e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d61d6:	2204      	movs	r2, #4
   d61d8:	4918      	ldr	r1, [pc, #96]	; (d623c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d61da:	eb0d 0002 	add.w	r0, sp, r2
   d61de:	f7ff f85d 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d61e2:	69a1      	ldr	r1, [r4, #24]
   d61e4:	f7fe ffde 	bl	d51a4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d61e8:	7923      	ldrb	r3, [r4, #4]
   d61ea:	069b      	lsls	r3, r3, #26
   d61ec:	d507      	bpl.n	d61fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d61ee:	4914      	ldr	r1, [pc, #80]	; (d6240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d61f0:	2206      	movs	r2, #6
   d61f2:	a801      	add	r0, sp, #4
   d61f4:	f7ff f852 	bl	d529c <_ZN5spark10JSONWriter4nameEPKcj>
   d61f8:	69e1      	ldr	r1, [r4, #28]
   d61fa:	f7ff f8c5 	bl	d5388 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d61fe:	a801      	add	r0, sp, #4
   d6200:	f7fe ffad 	bl	d515e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6204:	6a28      	ldr	r0, [r5, #32]
   d6206:	490f      	ldr	r1, [pc, #60]	; (d6244 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6208:	6803      	ldr	r3, [r0, #0]
   d620a:	2202      	movs	r2, #2
   d620c:	68db      	ldr	r3, [r3, #12]
   d620e:	4798      	blx	r3
}
   d6210:	b005      	add	sp, #20
   d6212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6216:	bf00      	nop
   d6218:	2003e5e4 	.word	0x2003e5e4
   d621c:	000d7a54 	.word	0x000d7a54
   d6220:	000d79e2 	.word	0x000d79e2
   d6224:	000d7a33 	.word	0x000d7a33
   d6228:	000d7a35 	.word	0x000d7a35
   d622c:	000d7b06 	.word	0x000d7b06
   d6230:	000d7a37 	.word	0x000d7a37
   d6234:	000d7a3a 	.word	0x000d7a3a
   d6238:	000d7a3d 	.word	0x000d7a3d
   d623c:	000d7a3f 	.word	0x000d7a3f
   d6240:	000d7a44 	.word	0x000d7a44
   d6244:	000d7a30 	.word	0x000d7a30

000d6248 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6248:	2300      	movs	r3, #0
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	461a      	mov	r2, r3
   d624e:	f7fe bcad 	b.w	d4bac <network_connect>

000d6252 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	2200      	movs	r2, #0
   d6256:	2102      	movs	r1, #2
   d6258:	f7fe bcb8 	b.w	d4bcc <network_disconnect>

000d625c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d625c:	2200      	movs	r2, #0
   d625e:	6840      	ldr	r0, [r0, #4]
   d6260:	4611      	mov	r1, r2
   d6262:	f7fe bcab 	b.w	d4bbc <network_connecting>

000d6266 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6266:	2200      	movs	r2, #0
   d6268:	6840      	ldr	r0, [r0, #4]
   d626a:	4611      	mov	r1, r2
   d626c:	f7fe bcb6 	b.w	d4bdc <network_ready>

000d6270 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6270:	2300      	movs	r3, #0
   d6272:	6840      	ldr	r0, [r0, #4]
   d6274:	461a      	mov	r2, r3
   d6276:	4619      	mov	r1, r3
   d6278:	f7fe bcb8 	b.w	d4bec <network_on>

000d627c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d627c:	2300      	movs	r3, #0
   d627e:	6840      	ldr	r0, [r0, #4]
   d6280:	461a      	mov	r2, r3
   d6282:	4619      	mov	r1, r3
   d6284:	f7fe bcba 	b.w	d4bfc <network_off>

000d6288 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6288:	6840      	ldr	r0, [r0, #4]
   d628a:	2100      	movs	r1, #0
   d628c:	f7fe bcde 	b.w	d4c4c <network_is_on>

000d6290 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6290:	6840      	ldr	r0, [r0, #4]
   d6292:	2100      	movs	r1, #0
   d6294:	f7fe bce2 	b.w	d4c5c <network_is_off>

000d6298 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6298:	6840      	ldr	r0, [r0, #4]
   d629a:	2200      	movs	r2, #0
   d629c:	f081 0101 	eor.w	r1, r1, #1
   d62a0:	f7fe bcb4 	b.w	d4c0c <network_listen>

000d62a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d62a4:	6840      	ldr	r0, [r0, #4]
   d62a6:	2200      	movs	r2, #0
   d62a8:	f7fe bcc0 	b.w	d4c2c <network_set_listen_timeout>

000d62ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d62ac:	2200      	movs	r2, #0
   d62ae:	6840      	ldr	r0, [r0, #4]
   d62b0:	4611      	mov	r1, r2
   d62b2:	f7fe bcc3 	b.w	d4c3c <network_get_listen_timeout>

000d62b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d62b6:	2200      	movs	r2, #0
   d62b8:	6840      	ldr	r0, [r0, #4]
   d62ba:	4611      	mov	r1, r2
   d62bc:	f7fe bcae 	b.w	d4c1c <network_listening>

000d62c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d62c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62c4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d62c6:	b095      	sub	sp, #84	; 0x54
   d62c8:	4616      	mov	r6, r2
   d62ca:	460d      	mov	r5, r1
   d62cc:	4607      	mov	r7, r0
    IPAddress addr;
   d62ce:	f7fe fde7 	bl	d4ea0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d62d2:	4621      	mov	r1, r4
   d62d4:	2218      	movs	r2, #24
   d62d6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d62d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d62da:	f001 f975 	bl	d75c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d62de:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d62e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d62e4:	4621      	mov	r1, r4
   d62e6:	466b      	mov	r3, sp
   d62e8:	aa0c      	add	r2, sp, #48	; 0x30
   d62ea:	4630      	mov	r0, r6
   d62ec:	f7fe fb8a 	bl	d4a04 <netdb_getaddrinfo>
    if (!r) {
   d62f0:	4604      	mov	r4, r0
   d62f2:	2800      	cmp	r0, #0
   d62f4:	d146      	bne.n	d6384 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62f6:	4602      	mov	r2, r0
   d62f8:	2101      	movs	r1, #1
   d62fa:	6868      	ldr	r0, [r5, #4]
   d62fc:	f7fe fc6e 	bl	d4bdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6300:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6302:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6304:	4622      	mov	r2, r4
   d6306:	6868      	ldr	r0, [r5, #4]
   d6308:	f7fe fc68 	bl	d4bdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d630c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d630e:	4681      	mov	r9, r0
        bool ok = false;
   d6310:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6312:	2e00      	cmp	r6, #0
   d6314:	d036      	beq.n	d6384 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6316:	2900      	cmp	r1, #0
   d6318:	d134      	bne.n	d6384 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d631a:	6873      	ldr	r3, [r6, #4]
   d631c:	2b02      	cmp	r3, #2
   d631e:	d003      	beq.n	d6328 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6320:	2b0a      	cmp	r3, #10
   d6322:	d00b      	beq.n	d633c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6324:	69f6      	ldr	r6, [r6, #28]
   d6326:	e7f4      	b.n	d6312 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6328:	f1b8 0f00 	cmp.w	r8, #0
   d632c:	d004      	beq.n	d6338 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d632e:	6971      	ldr	r1, [r6, #20]
   d6330:	4638      	mov	r0, r7
   d6332:	3104      	adds	r1, #4
   d6334:	f7fe fde1 	bl	d4efa <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6338:	4641      	mov	r1, r8
   d633a:	e7f3      	b.n	d6324 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d633c:	f1b9 0f00 	cmp.w	r9, #0
   d6340:	d101      	bne.n	d6346 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6342:	4649      	mov	r1, r9
   d6344:	e7ee      	b.n	d6324 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6346:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6348:	2210      	movs	r2, #16
   d634a:	a801      	add	r0, sp, #4
   d634c:	f001 f93c 	bl	d75c8 <memset>
                    a.v = 6;
   d6350:	2306      	movs	r3, #6
   d6352:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6356:	ad01      	add	r5, sp, #4
   d6358:	f104 0308 	add.w	r3, r4, #8
   d635c:	3418      	adds	r4, #24
   d635e:	6818      	ldr	r0, [r3, #0]
   d6360:	6859      	ldr	r1, [r3, #4]
   d6362:	462a      	mov	r2, r5
   d6364:	c203      	stmia	r2!, {r0, r1}
   d6366:	3308      	adds	r3, #8
   d6368:	42a3      	cmp	r3, r4
   d636a:	4615      	mov	r5, r2
   d636c:	d1f7      	bne.n	d635e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d636e:	a901      	add	r1, sp, #4
   d6370:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6372:	ad07      	add	r5, sp, #28
   d6374:	f7fe fda2 	bl	d4ebc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d637a:	1d3c      	adds	r4, r7, #4
   d637c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d637e:	682b      	ldr	r3, [r5, #0]
   d6380:	7023      	strb	r3, [r4, #0]
   d6382:	e7de      	b.n	d6342 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6384:	9800      	ldr	r0, [sp, #0]
   d6386:	f7fe fb35 	bl	d49f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d638a:	4638      	mov	r0, r7
   d638c:	b015      	add	sp, #84	; 0x54
   d638e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6394 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6394:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6396:	4a03      	ldr	r2, [pc, #12]	; (d63a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6398:	601a      	str	r2, [r3, #0]
   d639a:	2200      	movs	r2, #0
   d639c:	605a      	str	r2, [r3, #4]

} // spark
   d639e:	4770      	bx	lr
   d63a0:	2003e5e4 	.word	0x2003e5e4
   d63a4:	000d7acc 	.word	0x000d7acc

000d63a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d63a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63aa:	4606      	mov	r6, r0
   d63ac:	460d      	mov	r5, r1
  size_t n = 0;
   d63ae:	188f      	adds	r7, r1, r2
   d63b0:	2400      	movs	r4, #0
  while (size--) {
   d63b2:	42bd      	cmp	r5, r7
   d63b4:	d00c      	beq.n	d63d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d63b6:	6833      	ldr	r3, [r6, #0]
   d63b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63bc:	689b      	ldr	r3, [r3, #8]
   d63be:	4630      	mov	r0, r6
   d63c0:	4798      	blx	r3
     if (chunk>=0)
   d63c2:	1e03      	subs	r3, r0, #0
   d63c4:	db01      	blt.n	d63ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d63c6:	441c      	add	r4, r3
  while (size--) {
   d63c8:	e7f3      	b.n	d63b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d63ca:	2c00      	cmp	r4, #0
   d63cc:	bf08      	it	eq
   d63ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d63d0:	4620      	mov	r0, r4
   d63d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d63d4:	b513      	push	{r0, r1, r4, lr}
   d63d6:	4604      	mov	r4, r0
    }
   d63d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d63da:	b159      	cbz	r1, d63f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d63dc:	9101      	str	r1, [sp, #4]
   d63de:	f001 f948 	bl	d7672 <strlen>
   d63e2:	6823      	ldr	r3, [r4, #0]
   d63e4:	9901      	ldr	r1, [sp, #4]
   d63e6:	68db      	ldr	r3, [r3, #12]
   d63e8:	4602      	mov	r2, r0
   d63ea:	4620      	mov	r0, r4
    }
   d63ec:	b002      	add	sp, #8
   d63ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d63f2:	4718      	bx	r3
    }
   d63f4:	b002      	add	sp, #8
   d63f6:	bd10      	pop	{r4, pc}

000d63f8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d63f8:	b508      	push	{r3, lr}
  return write(str);
   d63fa:	f7ff ffeb 	bl	d63d4 <_ZN5Print5writeEPKc>
}
   d63fe:	bd08      	pop	{r3, pc}

000d6400 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6400:	6803      	ldr	r3, [r0, #0]
   d6402:	689b      	ldr	r3, [r3, #8]
   d6404:	4718      	bx	r3

000d6406 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6406:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6408:	210d      	movs	r1, #13
{
   d640a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d640c:	f7ff fff8 	bl	d6400 <_ZN5Print5printEc>
  n += print('\n');
   d6410:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6412:	4604      	mov	r4, r0
  n += print('\n');
   d6414:	4628      	mov	r0, r5
   d6416:	f7ff fff3 	bl	d6400 <_ZN5Print5printEc>
  return n;
}
   d641a:	4420      	add	r0, r4
   d641c:	bd38      	pop	{r3, r4, r5, pc}

000d641e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d641e:	b538      	push	{r3, r4, r5, lr}
   d6420:	4605      	mov	r5, r0
  return write(str);
   d6422:	f7ff ffd7 	bl	d63d4 <_ZN5Print5writeEPKc>
   d6426:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6428:	4628      	mov	r0, r5
   d642a:	f7ff ffec 	bl	d6406 <_ZN5Print7printlnEv>
  return n;
}
   d642e:	4420      	add	r0, r4
   d6430:	bd38      	pop	{r3, r4, r5, pc}

000d6432 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6432:	b530      	push	{r4, r5, lr}
   d6434:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6436:	2300      	movs	r3, #0
   d6438:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d643c:	2a01      	cmp	r2, #1
   d643e:	bf98      	it	ls
   d6440:	220a      	movls	r2, #10
   d6442:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6444:	460d      	mov	r5, r1
   d6446:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d644a:	fb01 5312 	mls	r3, r1, r2, r5
   d644e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6452:	2b09      	cmp	r3, #9
   d6454:	bf94      	ite	ls
   d6456:	3330      	addls	r3, #48	; 0x30
   d6458:	3337      	addhi	r3, #55	; 0x37
   d645a:	b2db      	uxtb	r3, r3
  } while(n);
   d645c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d645e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6462:	d9ef      	bls.n	d6444 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6464:	4621      	mov	r1, r4
   d6466:	f7ff ffb5 	bl	d63d4 <_ZN5Print5writeEPKc>
}
   d646a:	b00b      	add	sp, #44	; 0x2c
   d646c:	bd30      	pop	{r4, r5, pc}
	...

000d6470 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6474:	ec55 4b10 	vmov	r4, r5, d0
   d6478:	4606      	mov	r6, r0
   d647a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d647c:	ee10 2a10 	vmov	r2, s0
   d6480:	ee10 0a10 	vmov	r0, s0
   d6484:	462b      	mov	r3, r5
   d6486:	4629      	mov	r1, r5
   d6488:	f001 f80e 	bl	d74a8 <__aeabi_dcmpun>
   d648c:	b140      	cbz	r0, d64a0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d648e:	4953      	ldr	r1, [pc, #332]	; (d65dc <_ZN5Print10printFloatEdh+0x16c>)
   d6490:	4630      	mov	r0, r6
   d6492:	f7ff ff9f 	bl	d63d4 <_ZN5Print5writeEPKc>
   d6496:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d6498:	4650      	mov	r0, sl
   d649a:	b003      	add	sp, #12
   d649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d64a0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d64a4:	4b4e      	ldr	r3, [pc, #312]	; (d65e0 <_ZN5Print10printFloatEdh+0x170>)
   d64a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64aa:	4620      	mov	r0, r4
   d64ac:	4649      	mov	r1, r9
   d64ae:	f000 fffb 	bl	d74a8 <__aeabi_dcmpun>
   d64b2:	b948      	cbnz	r0, d64c8 <_ZN5Print10printFloatEdh+0x58>
   d64b4:	4b4a      	ldr	r3, [pc, #296]	; (d65e0 <_ZN5Print10printFloatEdh+0x170>)
   d64b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64ba:	4620      	mov	r0, r4
   d64bc:	4649      	mov	r1, r9
   d64be:	f000 ffd5 	bl	d746c <__aeabi_dcmple>
   d64c2:	b908      	cbnz	r0, d64c8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d64c4:	4947      	ldr	r1, [pc, #284]	; (d65e4 <_ZN5Print10printFloatEdh+0x174>)
   d64c6:	e7e3      	b.n	d6490 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d64c8:	4b47      	ldr	r3, [pc, #284]	; (d65e8 <_ZN5Print10printFloatEdh+0x178>)
   d64ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64ce:	4620      	mov	r0, r4
   d64d0:	4629      	mov	r1, r5
   d64d2:	f000 ffdf 	bl	d7494 <__aeabi_dcmpgt>
   d64d6:	b108      	cbz	r0, d64dc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d64d8:	4944      	ldr	r1, [pc, #272]	; (d65ec <_ZN5Print10printFloatEdh+0x17c>)
   d64da:	e7d9      	b.n	d6490 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d64dc:	4b44      	ldr	r3, [pc, #272]	; (d65f0 <_ZN5Print10printFloatEdh+0x180>)
   d64de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64e2:	4620      	mov	r0, r4
   d64e4:	4629      	mov	r1, r5
   d64e6:	f000 ffb7 	bl	d7458 <__aeabi_dcmplt>
   d64ea:	2800      	cmp	r0, #0
   d64ec:	d1f4      	bne.n	d64d8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d64ee:	2200      	movs	r2, #0
   d64f0:	2300      	movs	r3, #0
   d64f2:	4620      	mov	r0, r4
   d64f4:	4629      	mov	r1, r5
   d64f6:	f000 ffaf 	bl	d7458 <__aeabi_dcmplt>
   d64fa:	b1d0      	cbz	r0, d6532 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d64fc:	212d      	movs	r1, #45	; 0x2d
   d64fe:	4630      	mov	r0, r6
   d6500:	f7ff ff7e 	bl	d6400 <_ZN5Print5printEc>
     number = -number;
   d6504:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d6508:	4682      	mov	sl, r0
     number = -number;
   d650a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d650c:	4939      	ldr	r1, [pc, #228]	; (d65f4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d650e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d65fc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d6512:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d6516:	2000      	movs	r0, #0
    rounding /= 10.0;
   d6518:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d651c:	fa5f f38b 	uxtb.w	r3, fp
   d6520:	429f      	cmp	r7, r3
   d6522:	d908      	bls.n	d6536 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d6524:	4642      	mov	r2, r8
   d6526:	464b      	mov	r3, r9
   d6528:	f000 fe4e 	bl	d71c8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d652c:	f10b 0b01 	add.w	fp, fp, #1
   d6530:	e7f4      	b.n	d651c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d6532:	4682      	mov	sl, r0
   d6534:	e7ea      	b.n	d650c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d6536:	4622      	mov	r2, r4
   d6538:	462b      	mov	r3, r5
   d653a:	f000 fb65 	bl	d6c08 <__adddf3>
   d653e:	460d      	mov	r5, r1
   d6540:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d6542:	f000 ffef 	bl	d7524 <__aeabi_d2uiz>
   d6546:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d6548:	f000 fc9a 	bl	d6e80 <__aeabi_ui2d>
   d654c:	4602      	mov	r2, r0
   d654e:	460b      	mov	r3, r1
   d6550:	4620      	mov	r0, r4
   d6552:	4629      	mov	r1, r5
   d6554:	f000 fb56 	bl	d6c04 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d6558:	220a      	movs	r2, #10
   d655a:	4604      	mov	r4, r0
   d655c:	460d      	mov	r5, r1
   d655e:	4630      	mov	r0, r6
   d6560:	4641      	mov	r1, r8
   d6562:	f7ff ff66 	bl	d6432 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d6566:	4482      	add	sl, r0
  if (digits > 0) {
   d6568:	b127      	cbz	r7, d6574 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d656a:	4923      	ldr	r1, [pc, #140]	; (d65f8 <_ZN5Print10printFloatEdh+0x188>)
   d656c:	4630      	mov	r0, r6
   d656e:	f7ff ff31 	bl	d63d4 <_ZN5Print5writeEPKc>
    n += print(".");
   d6572:	4482      	add	sl, r0
    remainder *= 10.0;
   d6574:	f8df 9084 	ldr.w	r9, [pc, #132]	; d65fc <_ZN5Print10printFloatEdh+0x18c>
   d6578:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d657c:	3f01      	subs	r7, #1
   d657e:	b2ff      	uxtb	r7, r7
   d6580:	2fff      	cmp	r7, #255	; 0xff
   d6582:	d089      	beq.n	d6498 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d6584:	4642      	mov	r2, r8
   d6586:	464b      	mov	r3, r9
   d6588:	4620      	mov	r0, r4
   d658a:	4629      	mov	r1, r5
   d658c:	f000 fcf2 	bl	d6f74 <__aeabi_dmul>
   d6590:	4604      	mov	r4, r0
   d6592:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d6594:	f000 ff9e 	bl	d74d4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d6598:	f1b0 0b00 	subs.w	fp, r0, #0
   d659c:	da1a      	bge.n	d65d4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d659e:	212d      	movs	r1, #45	; 0x2d
   d65a0:	4630      	mov	r0, r6
   d65a2:	f7ff ff2d 	bl	d6400 <_ZN5Print5printEc>
            val = -n;
   d65a6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d65aa:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d65ac:	220a      	movs	r2, #10
   d65ae:	4630      	mov	r0, r6
   d65b0:	9301      	str	r3, [sp, #4]
   d65b2:	f7ff ff3e 	bl	d6432 <_ZN5Print11printNumberEmh>
   d65b6:	9b01      	ldr	r3, [sp, #4]
   d65b8:	4418      	add	r0, r3
    n += print(toPrint);
   d65ba:	4482      	add	sl, r0
    remainder -= toPrint;
   d65bc:	4658      	mov	r0, fp
   d65be:	f000 fc6f 	bl	d6ea0 <__aeabi_i2d>
   d65c2:	4602      	mov	r2, r0
   d65c4:	460b      	mov	r3, r1
   d65c6:	4620      	mov	r0, r4
   d65c8:	4629      	mov	r1, r5
   d65ca:	f000 fb1b 	bl	d6c04 <__aeabi_dsub>
   d65ce:	4604      	mov	r4, r0
   d65d0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d65d2:	e7d3      	b.n	d657c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d65d4:	4659      	mov	r1, fp
        size_t t = 0;
   d65d6:	2300      	movs	r3, #0
   d65d8:	e7e8      	b.n	d65ac <_ZN5Print10printFloatEdh+0x13c>
   d65da:	bf00      	nop
   d65dc:	000d7b00 	.word	0x000d7b00
   d65e0:	7fefffff 	.word	0x7fefffff
   d65e4:	000d7b04 	.word	0x000d7b04
   d65e8:	41efffff 	.word	0x41efffff
   d65ec:	000d7b08 	.word	0x000d7b08
   d65f0:	c1efffff 	.word	0xc1efffff
   d65f4:	3fe00000 	.word	0x3fe00000
   d65f8:	000d7b0c 	.word	0x000d7b0c
   d65fc:	40240000 	.word	0x40240000

000d6600 <_ZN5Print7printlnEdi>:
{
   d6600:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d6602:	b2c9      	uxtb	r1, r1
{
   d6604:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d6606:	f7ff ff33 	bl	d6470 <_ZN5Print10printFloatEdh>
   d660a:	4604      	mov	r4, r0
  n += println();
   d660c:	4628      	mov	r0, r5
   d660e:	f7ff fefa 	bl	d6406 <_ZN5Print7printlnEv>
}
   d6612:	4420      	add	r0, r4
   d6614:	bd38      	pop	{r3, r4, r5, pc}

000d6616 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d661a:	b086      	sub	sp, #24
   d661c:	af00      	add	r7, sp, #0
   d661e:	4605      	mov	r5, r0
   d6620:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6622:	1d38      	adds	r0, r7, #4
   d6624:	2114      	movs	r1, #20
{
   d6626:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6628:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d662a:	f7fe fb37 	bl	d4c9c <vsnprintf>

    if (n<bufsize)
   d662e:	2813      	cmp	r0, #19
   d6630:	d80e      	bhi.n	d6650 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6632:	1d39      	adds	r1, r7, #4
   d6634:	4628      	mov	r0, r5
   d6636:	f7ff fecd 	bl	d63d4 <_ZN5Print5writeEPKc>
   d663a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d663c:	b11e      	cbz	r6, d6646 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d663e:	4628      	mov	r0, r5
   d6640:	f7ff fee1 	bl	d6406 <_ZN5Print7printlnEv>
   d6644:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6646:	4620      	mov	r0, r4
   d6648:	3718      	adds	r7, #24
   d664a:	46bd      	mov	sp, r7
   d664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6650:	f100 0308 	add.w	r3, r0, #8
   d6654:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6658:	46e8      	mov	r8, sp
        char bigger[n+1];
   d665a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d665e:	4622      	mov	r2, r4
   d6660:	1c41      	adds	r1, r0, #1
   d6662:	683b      	ldr	r3, [r7, #0]
   d6664:	4668      	mov	r0, sp
   d6666:	f7fe fb19 	bl	d4c9c <vsnprintf>
  return write(str);
   d666a:	4669      	mov	r1, sp
   d666c:	4628      	mov	r0, r5
   d666e:	f7ff feb1 	bl	d63d4 <_ZN5Print5writeEPKc>
   d6672:	4604      	mov	r4, r0
   d6674:	46c5      	mov	sp, r8
   d6676:	e7e1      	b.n	d663c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6678 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d6678:	4b01      	ldr	r3, [pc, #4]	; (d6680 <_GLOBAL__sub_I_RGB+0x8>)
   d667a:	2200      	movs	r2, #0
   d667c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d667e:	4770      	bx	lr
   d6680:	2003e5ec 	.word	0x2003e5ec

000d6684 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6684:	b510      	push	{r4, lr}
   d6686:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6688:	f7fe f9a4 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d668c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d668e:	6823      	ldr	r3, [r4, #0]
   d6690:	4620      	mov	r0, r4
   d6692:	695b      	ldr	r3, [r3, #20]
   d6694:	4798      	blx	r3
    if (c >= 0) return c;
   d6696:	2800      	cmp	r0, #0
   d6698:	da08      	bge.n	d66ac <_ZN6Stream9timedReadEv+0x28>
   d669a:	f7fe f99b 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d669e:	68e3      	ldr	r3, [r4, #12]
   d66a0:	1ac0      	subs	r0, r0, r3
   d66a2:	68a3      	ldr	r3, [r4, #8]
   d66a4:	4298      	cmp	r0, r3
   d66a6:	d3f2      	bcc.n	d668e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d66a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66ac:	bd10      	pop	{r4, pc}
	...

000d66b0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d66b0:	b570      	push	{r4, r5, r6, lr}
   d66b2:	460d      	mov	r5, r1
  String ret;
   d66b4:	4909      	ldr	r1, [pc, #36]	; (d66dc <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d66b6:	4604      	mov	r4, r0
   d66b8:	4616      	mov	r6, r2
  String ret;
   d66ba:	f000 f85c 	bl	d6776 <_ZN6StringC1EPKc>
  int c = timedRead();
   d66be:	4628      	mov	r0, r5
   d66c0:	f7ff ffe0 	bl	d6684 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d66c4:	2800      	cmp	r0, #0
   d66c6:	db06      	blt.n	d66d6 <_ZN6Stream15readStringUntilEc+0x26>
   d66c8:	4286      	cmp	r6, r0
   d66ca:	d004      	beq.n	d66d6 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d66cc:	b2c1      	uxtb	r1, r0
   d66ce:	4620      	mov	r0, r4
   d66d0:	f000 f8be 	bl	d6850 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d66d4:	e7f3      	b.n	d66be <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d66d6:	4620      	mov	r0, r4
   d66d8:	bd70      	pop	{r4, r5, r6, pc}
   d66da:	bf00      	nop
   d66dc:	000d7a32 	.word	0x000d7a32

000d66e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d66e0:	b510      	push	{r4, lr}
   d66e2:	4604      	mov	r4, r0
{
	free(buffer);
   d66e4:	6800      	ldr	r0, [r0, #0]
   d66e6:	f7fe fac9 	bl	d4c7c <free>
}
   d66ea:	4620      	mov	r0, r4
   d66ec:	bd10      	pop	{r4, pc}

000d66ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d66ee:	b510      	push	{r4, lr}
   d66f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d66f2:	6800      	ldr	r0, [r0, #0]
   d66f4:	b108      	cbz	r0, d66fa <_ZN6String10invalidateEv+0xc>
   d66f6:	f7fe fac1 	bl	d4c7c <free>
	buffer = NULL;
   d66fa:	2300      	movs	r3, #0
	capacity = len = 0;
   d66fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6700:	6023      	str	r3, [r4, #0]
}
   d6702:	bd10      	pop	{r4, pc}

000d6704 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6704:	b538      	push	{r3, r4, r5, lr}
   d6706:	4604      	mov	r4, r0
   d6708:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d670a:	6800      	ldr	r0, [r0, #0]
   d670c:	3101      	adds	r1, #1
   d670e:	f7fe fabd 	bl	d4c8c <realloc>
	if (newbuffer) {
   d6712:	b110      	cbz	r0, d671a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6714:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6718:	2001      	movs	r0, #1
	}
	return 0;
}
   d671a:	bd38      	pop	{r3, r4, r5, pc}

000d671c <_ZN6String7reserveEj>:
{
   d671c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d671e:	6803      	ldr	r3, [r0, #0]
{
   d6720:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6722:	b123      	cbz	r3, d672e <_ZN6String7reserveEj+0x12>
   d6724:	6843      	ldr	r3, [r0, #4]
   d6726:	428b      	cmp	r3, r1
   d6728:	d301      	bcc.n	d672e <_ZN6String7reserveEj+0x12>
   d672a:	2001      	movs	r0, #1
}
   d672c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d672e:	4620      	mov	r0, r4
   d6730:	f7ff ffe8 	bl	d6704 <_ZN6String12changeBufferEj>
   d6734:	2800      	cmp	r0, #0
   d6736:	d0f9      	beq.n	d672c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6738:	68a3      	ldr	r3, [r4, #8]
   d673a:	2b00      	cmp	r3, #0
   d673c:	d1f5      	bne.n	d672a <_ZN6String7reserveEj+0xe>
   d673e:	6822      	ldr	r2, [r4, #0]
   d6740:	7013      	strb	r3, [r2, #0]
   d6742:	e7f2      	b.n	d672a <_ZN6String7reserveEj+0xe>

000d6744 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6744:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6746:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6748:	4611      	mov	r1, r2
   d674a:	9201      	str	r2, [sp, #4]
{
   d674c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d674e:	f7ff ffe5 	bl	d671c <_ZN6String7reserveEj>
   d6752:	9a01      	ldr	r2, [sp, #4]
   d6754:	b928      	cbnz	r0, d6762 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff ffc9 	bl	d66ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d675c:	4620      	mov	r0, r4
   d675e:	b003      	add	sp, #12
   d6760:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6762:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6764:	4629      	mov	r1, r5
   d6766:	6820      	ldr	r0, [r4, #0]
   d6768:	f000 ff06 	bl	d7578 <memcpy>
	buffer[len] = 0;
   d676c:	6822      	ldr	r2, [r4, #0]
   d676e:	68a3      	ldr	r3, [r4, #8]
   d6770:	2100      	movs	r1, #0
   d6772:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6774:	e7f2      	b.n	d675c <_ZN6String4copyEPKcj+0x18>

000d6776 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6776:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6778:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d677a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d677e:	4604      	mov	r4, r0
	len = 0;
   d6780:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6782:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6784:	b141      	cbz	r1, d6798 <_ZN6StringC1EPKc+0x22>
   d6786:	4608      	mov	r0, r1
   d6788:	9101      	str	r1, [sp, #4]
   d678a:	f000 ff72 	bl	d7672 <strlen>
   d678e:	9901      	ldr	r1, [sp, #4]
   d6790:	4602      	mov	r2, r0
   d6792:	4620      	mov	r0, r4
   d6794:	f7ff ffd6 	bl	d6744 <_ZN6String4copyEPKcj>
}
   d6798:	4620      	mov	r0, r4
   d679a:	b002      	add	sp, #8
   d679c:	bd10      	pop	{r4, pc}

000d679e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d679e:	b538      	push	{r3, r4, r5, lr}
   d67a0:	4605      	mov	r5, r0
	if (buffer) {
   d67a2:	6800      	ldr	r0, [r0, #0]
{
   d67a4:	460c      	mov	r4, r1
	if (buffer) {
   d67a6:	b168      	cbz	r0, d67c4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d67a8:	686a      	ldr	r2, [r5, #4]
   d67aa:	688b      	ldr	r3, [r1, #8]
   d67ac:	429a      	cmp	r2, r3
   d67ae:	d307      	bcc.n	d67c0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d67b0:	6809      	ldr	r1, [r1, #0]
   d67b2:	f000 ff56 	bl	d7662 <strcpy>
			len = rhs.len;
   d67b6:	68a3      	ldr	r3, [r4, #8]
   d67b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d67ba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d67bc:	60a3      	str	r3, [r4, #8]
}
   d67be:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d67c0:	f7fe fa5c 	bl	d4c7c <free>
	buffer = rhs.buffer;
   d67c4:	6823      	ldr	r3, [r4, #0]
   d67c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d67c8:	6863      	ldr	r3, [r4, #4]
   d67ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d67cc:	68a3      	ldr	r3, [r4, #8]
   d67ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d67d0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d67d2:	e9c4 3300 	strd	r3, r3, [r4]
   d67d6:	e7f1      	b.n	d67bc <_ZN6String4moveERS_+0x1e>

000d67d8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d67d8:	b510      	push	{r4, lr}
	buffer = NULL;
   d67da:	2300      	movs	r3, #0
	capacity = 0;
   d67dc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d67e0:	4604      	mov	r4, r0
	len = 0;
   d67e2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d67e4:	7303      	strb	r3, [r0, #12]
	move(rval);
   d67e6:	f7ff ffda 	bl	d679e <_ZN6String4moveERS_>
}
   d67ea:	4620      	mov	r0, r4
   d67ec:	bd10      	pop	{r4, pc}

000d67ee <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d67ee:	4288      	cmp	r0, r1
{
   d67f0:	b510      	push	{r4, lr}
   d67f2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d67f4:	d005      	beq.n	d6802 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d67f6:	680b      	ldr	r3, [r1, #0]
   d67f8:	b12b      	cbz	r3, d6806 <_ZN6StringaSERKS_+0x18>
   d67fa:	688a      	ldr	r2, [r1, #8]
   d67fc:	4619      	mov	r1, r3
   d67fe:	f7ff ffa1 	bl	d6744 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6802:	4620      	mov	r0, r4
   d6804:	bd10      	pop	{r4, pc}
	else invalidate();
   d6806:	f7ff ff72 	bl	d66ee <_ZN6String10invalidateEv>
   d680a:	e7fa      	b.n	d6802 <_ZN6StringaSERKS_+0x14>

000d680c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d680c:	b510      	push	{r4, lr}
	buffer = NULL;
   d680e:	2300      	movs	r3, #0
String::String(const String &value)
   d6810:	4604      	mov	r4, r0
	capacity = 0;
   d6812:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6816:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6818:	7303      	strb	r3, [r0, #12]
	*this = value;
   d681a:	f7ff ffe8 	bl	d67ee <_ZN6StringaSERKS_>
}
   d681e:	4620      	mov	r0, r4
   d6820:	bd10      	pop	{r4, pc}

000d6822 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6822:	b570      	push	{r4, r5, r6, lr}
   d6824:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6826:	460e      	mov	r6, r1
   d6828:	b909      	cbnz	r1, d682e <_ZN6String6concatEPKcj+0xc>
   d682a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d682c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d682e:	b16a      	cbz	r2, d684c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6830:	6884      	ldr	r4, [r0, #8]
   d6832:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6834:	4621      	mov	r1, r4
   d6836:	f7ff ff71 	bl	d671c <_ZN6String7reserveEj>
   d683a:	2800      	cmp	r0, #0
   d683c:	d0f5      	beq.n	d682a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d683e:	6828      	ldr	r0, [r5, #0]
   d6840:	68ab      	ldr	r3, [r5, #8]
   d6842:	4631      	mov	r1, r6
   d6844:	4418      	add	r0, r3
   d6846:	f000 ff0c 	bl	d7662 <strcpy>
	len = newlen;
   d684a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d684c:	2001      	movs	r0, #1
   d684e:	e7ed      	b.n	d682c <_ZN6String6concatEPKcj+0xa>

000d6850 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6850:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6852:	2300      	movs	r3, #0
	buf[0] = c;
   d6854:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6858:	2201      	movs	r2, #1
   d685a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d685c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6860:	f7ff ffdf 	bl	d6822 <_ZN6String6concatEPKcj>
}
   d6864:	b003      	add	sp, #12
   d6866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d686c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d686c:	4b05      	ldr	r3, [pc, #20]	; (d6884 <_GLOBAL__sub_I_System+0x18>)
   d686e:	2202      	movs	r2, #2
   d6870:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6872:	4b05      	ldr	r3, [pc, #20]	; (d6888 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d6874:	4a05      	ldr	r2, [pc, #20]	; (d688c <_GLOBAL__sub_I_System+0x20>)
   d6876:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6878:	2000      	movs	r0, #0
   d687a:	6018      	str	r0, [r3, #0]
   d687c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d687e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6880:	f7fe b968 	b.w	d4b54 <set_system_mode>
   d6884:	2003e608 	.word	0x2003e608
   d6888:	2003e5fc 	.word	0x2003e5fc
   d688c:	ffff0000 	.word	0xffff0000

000d6890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6890:	4b02      	ldr	r3, [pc, #8]	; (d689c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6892:	681a      	ldr	r2, [r3, #0]
   d6894:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6896:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6898:	4770      	bx	lr
   d689a:	bf00      	nop
   d689c:	2003e408 	.word	0x2003e408
   d68a0:	2003e60c 	.word	0x2003e60c

000d68a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d68a4:	4770      	bx	lr

000d68a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d68a6:	7441      	strb	r1, [r0, #17]
}
   d68a8:	4770      	bx	lr

000d68aa <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d68aa:	4770      	bx	lr

000d68ac <_ZN11USARTSerial17availableForWriteEv>:
{
   d68ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d68ae:	7c00      	ldrb	r0, [r0, #16]
   d68b0:	f7fe f8e8 	bl	d4a84 <hal_usart_available_data_for_write>
}
   d68b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68b8:	bd08      	pop	{r3, pc}

000d68ba <_ZN11USARTSerial9availableEv>:
{
   d68ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d68bc:	7c00      	ldrb	r0, [r0, #16]
   d68be:	f7fe f8c1 	bl	d4a44 <hal_usart_available>
}
   d68c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68c6:	bd08      	pop	{r3, pc}

000d68c8 <_ZN11USARTSerial4peekEv>:
{
   d68c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d68ca:	7c00      	ldrb	r0, [r0, #16]
   d68cc:	f7fe f8ca 	bl	d4a64 <hal_usart_peek>
}
   d68d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68d4:	bd08      	pop	{r3, pc}

000d68d6 <_ZN11USARTSerial4readEv>:
{
   d68d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d68d8:	7c00      	ldrb	r0, [r0, #16]
   d68da:	f7fe f8bb 	bl	d4a54 <hal_usart_read>
}
   d68de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68e2:	bd08      	pop	{r3, pc}

000d68e4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d68e4:	7c00      	ldrb	r0, [r0, #16]
   d68e6:	f7fe b8c5 	b.w	d4a74 <hal_usart_flush>

000d68ea <_ZN11USARTSerial5writeEh>:
{
   d68ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68ec:	7c45      	ldrb	r5, [r0, #17]
{
   d68ee:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68f0:	b12d      	cbz	r5, d68fe <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d68f2:	7c20      	ldrb	r0, [r4, #16]
}
   d68f4:	b003      	add	sp, #12
   d68f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d68fa:	f7fe b89b 	b.w	d4a34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68fe:	7c00      	ldrb	r0, [r0, #16]
   d6900:	9101      	str	r1, [sp, #4]
   d6902:	f7fe f8bf 	bl	d4a84 <hal_usart_available_data_for_write>
   d6906:	2800      	cmp	r0, #0
   d6908:	9901      	ldr	r1, [sp, #4]
   d690a:	dcf2      	bgt.n	d68f2 <_ZN11USARTSerial5writeEh+0x8>
}
   d690c:	4628      	mov	r0, r5
   d690e:	b003      	add	sp, #12
   d6910:	bd30      	pop	{r4, r5, pc}

000d6912 <_ZN11USARTSerialD0Ev>:
   d6912:	b510      	push	{r4, lr}
   d6914:	2114      	movs	r1, #20
   d6916:	4604      	mov	r4, r0
   d6918:	f000 f96c 	bl	d6bf4 <_ZdlPvj>
   d691c:	4620      	mov	r0, r4
   d691e:	bd10      	pop	{r4, pc}

000d6920 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6920:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6922:	f04f 0c00 	mov.w	ip, #0
   d6926:	4604      	mov	r4, r0
   d6928:	4608      	mov	r0, r1
   d692a:	4611      	mov	r1, r2
   d692c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6930:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6934:	4a04      	ldr	r2, [pc, #16]	; (d6948 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6936:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6938:	2201      	movs	r2, #1
  _serial = serial;
   d693a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d693c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d693e:	461a      	mov	r2, r3
   d6940:	f7fe f868 	bl	d4a14 <hal_usart_init>
}
   d6944:	4620      	mov	r0, r4
   d6946:	bd10      	pop	{r4, pc}
   d6948:	000d7b34 	.word	0x000d7b34

000d694c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d694c:	7c00      	ldrb	r0, [r0, #16]
   d694e:	2300      	movs	r3, #0
   d6950:	f7fe b8a0 	b.w	d4a94 <hal_usart_begin_config>

000d6954 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6954:	2200      	movs	r2, #0
   d6956:	f7ff bff9 	b.w	d694c <_ZN11USARTSerial5beginEmm>

000d695a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d695a:	7c00      	ldrb	r0, [r0, #16]
   d695c:	f7fe b862 	b.w	d4a24 <hal_usart_end>

000d6960 <_Z22__fetch_global_Serial1v>:
{
   d6960:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6962:	4c0d      	ldr	r4, [pc, #52]	; (d6998 <_Z22__fetch_global_Serial1v+0x38>)
   d6964:	7821      	ldrb	r1, [r4, #0]
   d6966:	f3bf 8f5b 	dmb	ish
   d696a:	f011 0101 	ands.w	r1, r1, #1
   d696e:	d110      	bne.n	d6992 <_Z22__fetch_global_Serial1v+0x32>
   d6970:	4620      	mov	r0, r4
   d6972:	9101      	str	r1, [sp, #4]
   d6974:	f7fd fb9e 	bl	d40b4 <__cxa_guard_acquire>
   d6978:	9901      	ldr	r1, [sp, #4]
   d697a:	b150      	cbz	r0, d6992 <_Z22__fetch_global_Serial1v+0x32>
   d697c:	4b07      	ldr	r3, [pc, #28]	; (d699c <_Z22__fetch_global_Serial1v+0x3c>)
   d697e:	4a08      	ldr	r2, [pc, #32]	; (d69a0 <_Z22__fetch_global_Serial1v+0x40>)
   d6980:	4808      	ldr	r0, [pc, #32]	; (d69a4 <_Z22__fetch_global_Serial1v+0x44>)
   d6982:	f7ff ffcd 	bl	d6920 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6986:	4620      	mov	r0, r4
   d6988:	f7fd fb99 	bl	d40be <__cxa_guard_release>
   d698c:	4806      	ldr	r0, [pc, #24]	; (d69a8 <_Z22__fetch_global_Serial1v+0x48>)
   d698e:	f000 fde9 	bl	d7564 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6992:	4804      	ldr	r0, [pc, #16]	; (d69a4 <_Z22__fetch_global_Serial1v+0x44>)
   d6994:	b002      	add	sp, #8
   d6996:	bd10      	pop	{r4, pc}
   d6998:	2003e610 	.word	0x2003e610
   d699c:	2003e698 	.word	0x2003e698
   d69a0:	2003e614 	.word	0x2003e614
   d69a4:	2003e71c 	.word	0x2003e71c
   d69a8:	000d68ab 	.word	0x000d68ab

000d69ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69ac:	7441      	strb	r1, [r0, #17]
}
   d69ae:	4770      	bx	lr

000d69b0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69b0:	4770      	bx	lr

000d69b2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69b2:	4770      	bx	lr

000d69b4 <_ZN9USBSerial4readEv>:
{
   d69b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d69b6:	2100      	movs	r1, #0
   d69b8:	7c00      	ldrb	r0, [r0, #16]
   d69ba:	f7fe f89b 	bl	d4af4 <HAL_USB_USART_Receive_Data>
}
   d69be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69c2:	bd08      	pop	{r3, pc}

000d69c4 <_ZN9USBSerial4peekEv>:
{
   d69c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d69c6:	2101      	movs	r1, #1
   d69c8:	7c00      	ldrb	r0, [r0, #16]
   d69ca:	f7fe f893 	bl	d4af4 <HAL_USB_USART_Receive_Data>
}
   d69ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69d2:	bd08      	pop	{r3, pc}

000d69d4 <_ZN9USBSerial17availableForWriteEv>:
{
   d69d4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69d6:	7c00      	ldrb	r0, [r0, #16]
   d69d8:	f7fe f884 	bl	d4ae4 <HAL_USB_USART_Available_Data_For_Write>
}
   d69dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69e0:	bd08      	pop	{r3, pc}

000d69e2 <_ZN9USBSerial9availableEv>:
{
   d69e2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69e4:	7c00      	ldrb	r0, [r0, #16]
   d69e6:	f7fe f875 	bl	d4ad4 <HAL_USB_USART_Available_Data>
}
   d69ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69ee:	bd08      	pop	{r3, pc}

000d69f0 <_ZN9USBSerial5writeEh>:
{
   d69f0:	b513      	push	{r0, r1, r4, lr}
   d69f2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69f4:	7c00      	ldrb	r0, [r0, #16]
{
   d69f6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69f8:	f7fe f874 	bl	d4ae4 <HAL_USB_USART_Available_Data_For_Write>
   d69fc:	2800      	cmp	r0, #0
   d69fe:	9901      	ldr	r1, [sp, #4]
   d6a00:	dc01      	bgt.n	d6a06 <_ZN9USBSerial5writeEh+0x16>
   d6a02:	7c60      	ldrb	r0, [r4, #17]
   d6a04:	b120      	cbz	r0, d6a10 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a06:	7c20      	ldrb	r0, [r4, #16]
   d6a08:	f7fe f87c 	bl	d4b04 <HAL_USB_USART_Send_Data>
   d6a0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6a10:	b002      	add	sp, #8
   d6a12:	bd10      	pop	{r4, pc}

000d6a14 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6a14:	7c00      	ldrb	r0, [r0, #16]
   d6a16:	f7fe b87d 	b.w	d4b14 <HAL_USB_USART_Flush_Data>

000d6a1a <_ZN9USBSerialD0Ev>:
   d6a1a:	b510      	push	{r4, lr}
   d6a1c:	2114      	movs	r1, #20
   d6a1e:	4604      	mov	r4, r0
   d6a20:	f000 f8e8 	bl	d6bf4 <_ZdlPvj>
   d6a24:	4620      	mov	r0, r4
   d6a26:	bd10      	pop	{r4, pc}

000d6a28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a28:	b510      	push	{r4, lr}
   d6a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a2e:	4604      	mov	r4, r0
   d6a30:	4608      	mov	r0, r1
   d6a32:	2100      	movs	r1, #0
   d6a34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a38:	4b04      	ldr	r3, [pc, #16]	; (d6a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6a3c:	2301      	movs	r3, #1
  _serial = serial;
   d6a3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6a42:	4611      	mov	r1, r2
   d6a44:	f7fe f82e 	bl	d4aa4 <HAL_USB_USART_Init>
}
   d6a48:	4620      	mov	r0, r4
   d6a4a:	bd10      	pop	{r4, pc}
   d6a4c:	000d7b64 	.word	0x000d7b64

000d6a50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a50:	7c00      	ldrb	r0, [r0, #16]
   d6a52:	2200      	movs	r2, #0
   d6a54:	f7fe b82e 	b.w	d4ab4 <HAL_USB_USART_Begin>

000d6a58 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d6a58:	7c00      	ldrb	r0, [r0, #16]
   d6a5a:	f7fe b833 	b.w	d4ac4 <HAL_USB_USART_End>

000d6a5e <_Z19acquireSerialBufferv>:
{
   d6a5e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a60:	2214      	movs	r2, #20
{
   d6a62:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a64:	2100      	movs	r1, #0
   d6a66:	f000 fdaf 	bl	d75c8 <memset>
}
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	bd10      	pop	{r4, pc}
	...

000d6a70 <_Z16_fetch_usbserialv>:
{
   d6a70:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a72:	4c0f      	ldr	r4, [pc, #60]	; (d6ab0 <_Z16_fetch_usbserialv+0x40>)
{
   d6a74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a76:	a803      	add	r0, sp, #12
   d6a78:	f7ff fff1 	bl	d6a5e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a7c:	7821      	ldrb	r1, [r4, #0]
   d6a7e:	f3bf 8f5b 	dmb	ish
   d6a82:	f011 0101 	ands.w	r1, r1, #1
   d6a86:	d10f      	bne.n	d6aa8 <_Z16_fetch_usbserialv+0x38>
   d6a88:	4620      	mov	r0, r4
   d6a8a:	9101      	str	r1, [sp, #4]
   d6a8c:	f7fd fb12 	bl	d40b4 <__cxa_guard_acquire>
   d6a90:	9901      	ldr	r1, [sp, #4]
   d6a92:	b148      	cbz	r0, d6aa8 <_Z16_fetch_usbserialv+0x38>
   d6a94:	aa03      	add	r2, sp, #12
   d6a96:	4807      	ldr	r0, [pc, #28]	; (d6ab4 <_Z16_fetch_usbserialv+0x44>)
   d6a98:	f7ff ffc6 	bl	d6a28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	f7fd fb0e 	bl	d40be <__cxa_guard_release>
   d6aa2:	4805      	ldr	r0, [pc, #20]	; (d6ab8 <_Z16_fetch_usbserialv+0x48>)
   d6aa4:	f000 fd5e 	bl	d7564 <atexit>
	return _usbserial;
}
   d6aa8:	4802      	ldr	r0, [pc, #8]	; (d6ab4 <_Z16_fetch_usbserialv+0x44>)
   d6aaa:	b008      	add	sp, #32
   d6aac:	bd10      	pop	{r4, pc}
   d6aae:	bf00      	nop
   d6ab0:	2003e730 	.word	0x2003e730
   d6ab4:	2003e734 	.word	0x2003e734
   d6ab8:	000d69b1 	.word	0x000d69b1

000d6abc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6abc:	4b01      	ldr	r3, [pc, #4]	; (d6ac4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6abe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6ac0:	4770      	bx	lr
   d6ac2:	bf00      	nop
   d6ac4:	2003e40c 	.word	0x2003e40c

000d6ac8 <serialEventRun>:
{
   d6ac8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6aca:	4b0b      	ldr	r3, [pc, #44]	; (d6af8 <serialEventRun+0x30>)
   d6acc:	b143      	cbz	r3, d6ae0 <serialEventRun+0x18>
   d6ace:	f7ff ffcf 	bl	d6a70 <_Z16_fetch_usbserialv>
   d6ad2:	6803      	ldr	r3, [r0, #0]
   d6ad4:	691b      	ldr	r3, [r3, #16]
   d6ad6:	4798      	blx	r3
   d6ad8:	2800      	cmp	r0, #0
   d6ada:	dd01      	ble.n	d6ae0 <serialEventRun+0x18>
        serialEvent();
   d6adc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6ae0:	4b06      	ldr	r3, [pc, #24]	; (d6afc <serialEventRun+0x34>)
   d6ae2:	b143      	cbz	r3, d6af6 <serialEventRun+0x2e>
   d6ae4:	f7ff ff3c 	bl	d6960 <_Z22__fetch_global_Serial1v>
   d6ae8:	6803      	ldr	r3, [r0, #0]
   d6aea:	691b      	ldr	r3, [r3, #16]
   d6aec:	4798      	blx	r3
   d6aee:	2800      	cmp	r0, #0
   d6af0:	dd01      	ble.n	d6af6 <serialEventRun+0x2e>
        serialEvent1();
   d6af2:	f3af 8000 	nop.w
}
   d6af6:	bd08      	pop	{r3, pc}
	...

000d6b00 <_post_loop>:
{
   d6b00:	b508      	push	{r3, lr}
	serialEventRun();
   d6b02:	f7ff ffe1 	bl	d6ac8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6b06:	f7fd ff65 	bl	d49d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6b0a:	4b01      	ldr	r3, [pc, #4]	; (d6b10 <_post_loop+0x10>)
   d6b0c:	6018      	str	r0, [r3, #0]
}
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	2003e750 	.word	0x2003e750

000d6b14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6b14:	4805      	ldr	r0, [pc, #20]	; (d6b2c <_Z33system_initialize_user_backup_ramv+0x18>)
   d6b16:	4a06      	ldr	r2, [pc, #24]	; (d6b30 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6b18:	4906      	ldr	r1, [pc, #24]	; (d6b34 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d6b1a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6b1c:	1a12      	subs	r2, r2, r0
   d6b1e:	f000 fd2b 	bl	d7578 <memcpy>
    __backup_sram_signature = signature;
   d6b22:	4b05      	ldr	r3, [pc, #20]	; (d6b38 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6b24:	4a05      	ldr	r2, [pc, #20]	; (d6b3c <_Z33system_initialize_user_backup_ramv+0x28>)
   d6b26:	601a      	str	r2, [r3, #0]
}
   d6b28:	bd08      	pop	{r3, pc}
   d6b2a:	bf00      	nop
   d6b2c:	2003f400 	.word	0x2003f400
   d6b30:	2003f404 	.word	0x2003f404
   d6b34:	000d7cc0 	.word	0x000d7cc0
   d6b38:	2003f400 	.word	0x2003f400
   d6b3c:	9a271c1e 	.word	0x9a271c1e

000d6b40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6b40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b42:	2300      	movs	r3, #0
   d6b44:	9300      	str	r3, [sp, #0]
   d6b46:	461a      	mov	r2, r3
   d6b48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b4c:	f7fe f81c 	bl	d4b88 <system_ctrl_set_result>
}
   d6b50:	b003      	add	sp, #12
   d6b52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6b58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6b5a:	8843      	ldrh	r3, [r0, #2]
   d6b5c:	2b0a      	cmp	r3, #10
   d6b5e:	d008      	beq.n	d6b72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b60:	2b50      	cmp	r3, #80	; 0x50
   d6b62:	d10b      	bne.n	d6b7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6b64:	4b09      	ldr	r3, [pc, #36]	; (d6b8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b66:	681b      	ldr	r3, [r3, #0]
   d6b68:	b14b      	cbz	r3, d6b7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6b6a:	b003      	add	sp, #12
   d6b6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6b70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6b72:	f7ff ffe5 	bl	d6b40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6b76:	b003      	add	sp, #12
   d6b78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b7c:	2300      	movs	r3, #0
   d6b7e:	9300      	str	r3, [sp, #0]
   d6b80:	461a      	mov	r2, r3
   d6b82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b86:	f7fd ffff 	bl	d4b88 <system_ctrl_set_result>
}
   d6b8a:	e7f4      	b.n	d6b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6b8c:	2003e74c 	.word	0x2003e74c

000d6b90 <module_user_init_hook>:
{
   d6b90:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6b92:	4812      	ldr	r0, [pc, #72]	; (d6bdc <module_user_init_hook+0x4c>)
   d6b94:	2100      	movs	r1, #0
   d6b96:	f7fe f889 	bl	d4cac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6b9a:	4b11      	ldr	r3, [pc, #68]	; (d6be0 <module_user_init_hook+0x50>)
   d6b9c:	681a      	ldr	r2, [r3, #0]
   d6b9e:	4b11      	ldr	r3, [pc, #68]	; (d6be4 <module_user_init_hook+0x54>)
   d6ba0:	429a      	cmp	r2, r3
   d6ba2:	4b11      	ldr	r3, [pc, #68]	; (d6be8 <module_user_init_hook+0x58>)
   d6ba4:	bf0c      	ite	eq
   d6ba6:	2201      	moveq	r2, #1
   d6ba8:	2200      	movne	r2, #0
   d6baa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6bac:	d001      	beq.n	d6bb2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6bae:	f7ff ffb1 	bl	d6b14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6bb2:	f7fd feff 	bl	d49b4 <HAL_RNG_GetRandomNumber>
   d6bb6:	4604      	mov	r4, r0
    srand(seed);
   d6bb8:	f000 fd0e 	bl	d75d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6bbc:	4b0b      	ldr	r3, [pc, #44]	; (d6bec <module_user_init_hook+0x5c>)
   d6bbe:	b113      	cbz	r3, d6bc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6bc6:	2100      	movs	r1, #0
   d6bc8:	4808      	ldr	r0, [pc, #32]	; (d6bec <module_user_init_hook+0x5c>)
   d6bca:	f7fd ffe7 	bl	d4b9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bd2:	4807      	ldr	r0, [pc, #28]	; (d6bf0 <module_user_init_hook+0x60>)
   d6bd4:	2100      	movs	r1, #0
   d6bd6:	f7fd bfcd 	b.w	d4b74 <system_ctrl_set_app_request_handler>
   d6bda:	bf00      	nop
   d6bdc:	000d6abd 	.word	0x000d6abd
   d6be0:	2003f400 	.word	0x2003f400
   d6be4:	9a271c1e 	.word	0x9a271c1e
   d6be8:	2003e748 	.word	0x2003e748
   d6bec:	00000000 	.word	0x00000000
   d6bf0:	000d6b59 	.word	0x000d6b59

000d6bf4 <_ZdlPvj>:
   d6bf4:	f7fd ba51 	b.w	d409a <_ZdlPv>

000d6bf8 <_ZnwjRKSt9nothrow_t>:
   d6bf8:	f7fd ba4d 	b.w	d4096 <_Znwj>

000d6bfc <__aeabi_drsub>:
   d6bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6c00:	e002      	b.n	d6c08 <__adddf3>
   d6c02:	bf00      	nop

000d6c04 <__aeabi_dsub>:
   d6c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c08 <__adddf3>:
   d6c08:	b530      	push	{r4, r5, lr}
   d6c0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c12:	ea94 0f05 	teq	r4, r5
   d6c16:	bf08      	it	eq
   d6c18:	ea90 0f02 	teqeq	r0, r2
   d6c1c:	bf1f      	itttt	ne
   d6c1e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c22:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c2e:	f000 80e2 	beq.w	d6df6 <__adddf3+0x1ee>
   d6c32:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c3a:	bfb8      	it	lt
   d6c3c:	426d      	neglt	r5, r5
   d6c3e:	dd0c      	ble.n	d6c5a <__adddf3+0x52>
   d6c40:	442c      	add	r4, r5
   d6c42:	ea80 0202 	eor.w	r2, r0, r2
   d6c46:	ea81 0303 	eor.w	r3, r1, r3
   d6c4a:	ea82 0000 	eor.w	r0, r2, r0
   d6c4e:	ea83 0101 	eor.w	r1, r3, r1
   d6c52:	ea80 0202 	eor.w	r2, r0, r2
   d6c56:	ea81 0303 	eor.w	r3, r1, r3
   d6c5a:	2d36      	cmp	r5, #54	; 0x36
   d6c5c:	bf88      	it	hi
   d6c5e:	bd30      	pophi	{r4, r5, pc}
   d6c60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c70:	d002      	beq.n	d6c78 <__adddf3+0x70>
   d6c72:	4240      	negs	r0, r0
   d6c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c84:	d002      	beq.n	d6c8c <__adddf3+0x84>
   d6c86:	4252      	negs	r2, r2
   d6c88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c8c:	ea94 0f05 	teq	r4, r5
   d6c90:	f000 80a7 	beq.w	d6de2 <__adddf3+0x1da>
   d6c94:	f1a4 0401 	sub.w	r4, r4, #1
   d6c98:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c9c:	db0d      	blt.n	d6cba <__adddf3+0xb2>
   d6c9e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6ca2:	fa22 f205 	lsr.w	r2, r2, r5
   d6ca6:	1880      	adds	r0, r0, r2
   d6ca8:	f141 0100 	adc.w	r1, r1, #0
   d6cac:	fa03 f20e 	lsl.w	r2, r3, lr
   d6cb0:	1880      	adds	r0, r0, r2
   d6cb2:	fa43 f305 	asr.w	r3, r3, r5
   d6cb6:	4159      	adcs	r1, r3
   d6cb8:	e00e      	b.n	d6cd8 <__adddf3+0xd0>
   d6cba:	f1a5 0520 	sub.w	r5, r5, #32
   d6cbe:	f10e 0e20 	add.w	lr, lr, #32
   d6cc2:	2a01      	cmp	r2, #1
   d6cc4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6cc8:	bf28      	it	cs
   d6cca:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6cce:	fa43 f305 	asr.w	r3, r3, r5
   d6cd2:	18c0      	adds	r0, r0, r3
   d6cd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6cdc:	d507      	bpl.n	d6cee <__adddf3+0xe6>
   d6cde:	f04f 0e00 	mov.w	lr, #0
   d6ce2:	f1dc 0c00 	rsbs	ip, ip, #0
   d6ce6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cea:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cf2:	d31b      	bcc.n	d6d2c <__adddf3+0x124>
   d6cf4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6cf8:	d30c      	bcc.n	d6d14 <__adddf3+0x10c>
   d6cfa:	0849      	lsrs	r1, r1, #1
   d6cfc:	ea5f 0030 	movs.w	r0, r0, rrx
   d6d00:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6d04:	f104 0401 	add.w	r4, r4, #1
   d6d08:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d10:	f080 809a 	bcs.w	d6e48 <__adddf3+0x240>
   d6d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d18:	bf08      	it	eq
   d6d1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d1e:	f150 0000 	adcs.w	r0, r0, #0
   d6d22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d26:	ea41 0105 	orr.w	r1, r1, r5
   d6d2a:	bd30      	pop	{r4, r5, pc}
   d6d2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d30:	4140      	adcs	r0, r0
   d6d32:	eb41 0101 	adc.w	r1, r1, r1
   d6d36:	3c01      	subs	r4, #1
   d6d38:	bf28      	it	cs
   d6d3a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6d3e:	d2e9      	bcs.n	d6d14 <__adddf3+0x10c>
   d6d40:	f091 0f00 	teq	r1, #0
   d6d44:	bf04      	itt	eq
   d6d46:	4601      	moveq	r1, r0
   d6d48:	2000      	moveq	r0, #0
   d6d4a:	fab1 f381 	clz	r3, r1
   d6d4e:	bf08      	it	eq
   d6d50:	3320      	addeq	r3, #32
   d6d52:	f1a3 030b 	sub.w	r3, r3, #11
   d6d56:	f1b3 0220 	subs.w	r2, r3, #32
   d6d5a:	da0c      	bge.n	d6d76 <__adddf3+0x16e>
   d6d5c:	320c      	adds	r2, #12
   d6d5e:	dd08      	ble.n	d6d72 <__adddf3+0x16a>
   d6d60:	f102 0c14 	add.w	ip, r2, #20
   d6d64:	f1c2 020c 	rsb	r2, r2, #12
   d6d68:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d6c:	fa21 f102 	lsr.w	r1, r1, r2
   d6d70:	e00c      	b.n	d6d8c <__adddf3+0x184>
   d6d72:	f102 0214 	add.w	r2, r2, #20
   d6d76:	bfd8      	it	le
   d6d78:	f1c2 0c20 	rsble	ip, r2, #32
   d6d7c:	fa01 f102 	lsl.w	r1, r1, r2
   d6d80:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d84:	bfdc      	itt	le
   d6d86:	ea41 010c 	orrle.w	r1, r1, ip
   d6d8a:	4090      	lslle	r0, r2
   d6d8c:	1ae4      	subs	r4, r4, r3
   d6d8e:	bfa2      	ittt	ge
   d6d90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d94:	4329      	orrge	r1, r5
   d6d96:	bd30      	popge	{r4, r5, pc}
   d6d98:	ea6f 0404 	mvn.w	r4, r4
   d6d9c:	3c1f      	subs	r4, #31
   d6d9e:	da1c      	bge.n	d6dda <__adddf3+0x1d2>
   d6da0:	340c      	adds	r4, #12
   d6da2:	dc0e      	bgt.n	d6dc2 <__adddf3+0x1ba>
   d6da4:	f104 0414 	add.w	r4, r4, #20
   d6da8:	f1c4 0220 	rsb	r2, r4, #32
   d6dac:	fa20 f004 	lsr.w	r0, r0, r4
   d6db0:	fa01 f302 	lsl.w	r3, r1, r2
   d6db4:	ea40 0003 	orr.w	r0, r0, r3
   d6db8:	fa21 f304 	lsr.w	r3, r1, r4
   d6dbc:	ea45 0103 	orr.w	r1, r5, r3
   d6dc0:	bd30      	pop	{r4, r5, pc}
   d6dc2:	f1c4 040c 	rsb	r4, r4, #12
   d6dc6:	f1c4 0220 	rsb	r2, r4, #32
   d6dca:	fa20 f002 	lsr.w	r0, r0, r2
   d6dce:	fa01 f304 	lsl.w	r3, r1, r4
   d6dd2:	ea40 0003 	orr.w	r0, r0, r3
   d6dd6:	4629      	mov	r1, r5
   d6dd8:	bd30      	pop	{r4, r5, pc}
   d6dda:	fa21 f004 	lsr.w	r0, r1, r4
   d6dde:	4629      	mov	r1, r5
   d6de0:	bd30      	pop	{r4, r5, pc}
   d6de2:	f094 0f00 	teq	r4, #0
   d6de6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6dea:	bf06      	itte	eq
   d6dec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6df0:	3401      	addeq	r4, #1
   d6df2:	3d01      	subne	r5, #1
   d6df4:	e74e      	b.n	d6c94 <__adddf3+0x8c>
   d6df6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dfa:	bf18      	it	ne
   d6dfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e00:	d029      	beq.n	d6e56 <__adddf3+0x24e>
   d6e02:	ea94 0f05 	teq	r4, r5
   d6e06:	bf08      	it	eq
   d6e08:	ea90 0f02 	teqeq	r0, r2
   d6e0c:	d005      	beq.n	d6e1a <__adddf3+0x212>
   d6e0e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e12:	bf04      	itt	eq
   d6e14:	4619      	moveq	r1, r3
   d6e16:	4610      	moveq	r0, r2
   d6e18:	bd30      	pop	{r4, r5, pc}
   d6e1a:	ea91 0f03 	teq	r1, r3
   d6e1e:	bf1e      	ittt	ne
   d6e20:	2100      	movne	r1, #0
   d6e22:	2000      	movne	r0, #0
   d6e24:	bd30      	popne	{r4, r5, pc}
   d6e26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e2a:	d105      	bne.n	d6e38 <__adddf3+0x230>
   d6e2c:	0040      	lsls	r0, r0, #1
   d6e2e:	4149      	adcs	r1, r1
   d6e30:	bf28      	it	cs
   d6e32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e36:	bd30      	pop	{r4, r5, pc}
   d6e38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e3c:	bf3c      	itt	cc
   d6e3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e42:	bd30      	popcc	{r4, r5, pc}
   d6e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e50:	f04f 0000 	mov.w	r0, #0
   d6e54:	bd30      	pop	{r4, r5, pc}
   d6e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e5a:	bf1a      	itte	ne
   d6e5c:	4619      	movne	r1, r3
   d6e5e:	4610      	movne	r0, r2
   d6e60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e64:	bf1c      	itt	ne
   d6e66:	460b      	movne	r3, r1
   d6e68:	4602      	movne	r2, r0
   d6e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e6e:	bf06      	itte	eq
   d6e70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e74:	ea91 0f03 	teqeq	r1, r3
   d6e78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e7c:	bd30      	pop	{r4, r5, pc}
   d6e7e:	bf00      	nop

000d6e80 <__aeabi_ui2d>:
   d6e80:	f090 0f00 	teq	r0, #0
   d6e84:	bf04      	itt	eq
   d6e86:	2100      	moveq	r1, #0
   d6e88:	4770      	bxeq	lr
   d6e8a:	b530      	push	{r4, r5, lr}
   d6e8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e94:	f04f 0500 	mov.w	r5, #0
   d6e98:	f04f 0100 	mov.w	r1, #0
   d6e9c:	e750      	b.n	d6d40 <__adddf3+0x138>
   d6e9e:	bf00      	nop

000d6ea0 <__aeabi_i2d>:
   d6ea0:	f090 0f00 	teq	r0, #0
   d6ea4:	bf04      	itt	eq
   d6ea6:	2100      	moveq	r1, #0
   d6ea8:	4770      	bxeq	lr
   d6eaa:	b530      	push	{r4, r5, lr}
   d6eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6eb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6eb8:	bf48      	it	mi
   d6eba:	4240      	negmi	r0, r0
   d6ebc:	f04f 0100 	mov.w	r1, #0
   d6ec0:	e73e      	b.n	d6d40 <__adddf3+0x138>
   d6ec2:	bf00      	nop

000d6ec4 <__aeabi_f2d>:
   d6ec4:	0042      	lsls	r2, r0, #1
   d6ec6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6eca:	ea4f 0131 	mov.w	r1, r1, rrx
   d6ece:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6ed2:	bf1f      	itttt	ne
   d6ed4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ed8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6edc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ee0:	4770      	bxne	lr
   d6ee2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6ee6:	bf08      	it	eq
   d6ee8:	4770      	bxeq	lr
   d6eea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6eee:	bf04      	itt	eq
   d6ef0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6ef4:	4770      	bxeq	lr
   d6ef6:	b530      	push	{r4, r5, lr}
   d6ef8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f04:	e71c      	b.n	d6d40 <__adddf3+0x138>
   d6f06:	bf00      	nop

000d6f08 <__aeabi_ul2d>:
   d6f08:	ea50 0201 	orrs.w	r2, r0, r1
   d6f0c:	bf08      	it	eq
   d6f0e:	4770      	bxeq	lr
   d6f10:	b530      	push	{r4, r5, lr}
   d6f12:	f04f 0500 	mov.w	r5, #0
   d6f16:	e00a      	b.n	d6f2e <__aeabi_l2d+0x16>

000d6f18 <__aeabi_l2d>:
   d6f18:	ea50 0201 	orrs.w	r2, r0, r1
   d6f1c:	bf08      	it	eq
   d6f1e:	4770      	bxeq	lr
   d6f20:	b530      	push	{r4, r5, lr}
   d6f22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f26:	d502      	bpl.n	d6f2e <__aeabi_l2d+0x16>
   d6f28:	4240      	negs	r0, r0
   d6f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f3a:	f43f aed8 	beq.w	d6cee <__adddf3+0xe6>
   d6f3e:	f04f 0203 	mov.w	r2, #3
   d6f42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f46:	bf18      	it	ne
   d6f48:	3203      	addne	r2, #3
   d6f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f4e:	bf18      	it	ne
   d6f50:	3203      	addne	r2, #3
   d6f52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f56:	f1c2 0320 	rsb	r3, r2, #32
   d6f5a:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f5e:	fa20 f002 	lsr.w	r0, r0, r2
   d6f62:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f66:	ea40 000e 	orr.w	r0, r0, lr
   d6f6a:	fa21 f102 	lsr.w	r1, r1, r2
   d6f6e:	4414      	add	r4, r2
   d6f70:	e6bd      	b.n	d6cee <__adddf3+0xe6>
   d6f72:	bf00      	nop

000d6f74 <__aeabi_dmul>:
   d6f74:	b570      	push	{r4, r5, r6, lr}
   d6f76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f82:	bf1d      	ittte	ne
   d6f84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f88:	ea94 0f0c 	teqne	r4, ip
   d6f8c:	ea95 0f0c 	teqne	r5, ip
   d6f90:	f000 f8de 	bleq	d7150 <__aeabi_dmul+0x1dc>
   d6f94:	442c      	add	r4, r5
   d6f96:	ea81 0603 	eor.w	r6, r1, r3
   d6f9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6fa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6fa6:	bf18      	it	ne
   d6fa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6fb4:	d038      	beq.n	d7028 <__aeabi_dmul+0xb4>
   d6fb6:	fba0 ce02 	umull	ip, lr, r0, r2
   d6fba:	f04f 0500 	mov.w	r5, #0
   d6fbe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6fc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6fc6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6fca:	f04f 0600 	mov.w	r6, #0
   d6fce:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6fd2:	f09c 0f00 	teq	ip, #0
   d6fd6:	bf18      	it	ne
   d6fd8:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fdc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fe0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fe4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fe8:	d204      	bcs.n	d6ff4 <__aeabi_dmul+0x80>
   d6fea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fee:	416d      	adcs	r5, r5
   d6ff0:	eb46 0606 	adc.w	r6, r6, r6
   d6ff4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6ff8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6ffc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7000:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7004:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7008:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d700c:	bf88      	it	hi
   d700e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7012:	d81e      	bhi.n	d7052 <__aeabi_dmul+0xde>
   d7014:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7018:	bf08      	it	eq
   d701a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d701e:	f150 0000 	adcs.w	r0, r0, #0
   d7022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7026:	bd70      	pop	{r4, r5, r6, pc}
   d7028:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d702c:	ea46 0101 	orr.w	r1, r6, r1
   d7030:	ea40 0002 	orr.w	r0, r0, r2
   d7034:	ea81 0103 	eor.w	r1, r1, r3
   d7038:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d703c:	bfc2      	ittt	gt
   d703e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7046:	bd70      	popgt	{r4, r5, r6, pc}
   d7048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d704c:	f04f 0e00 	mov.w	lr, #0
   d7050:	3c01      	subs	r4, #1
   d7052:	f300 80ab 	bgt.w	d71ac <__aeabi_dmul+0x238>
   d7056:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d705a:	bfde      	ittt	le
   d705c:	2000      	movle	r0, #0
   d705e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7062:	bd70      	pople	{r4, r5, r6, pc}
   d7064:	f1c4 0400 	rsb	r4, r4, #0
   d7068:	3c20      	subs	r4, #32
   d706a:	da35      	bge.n	d70d8 <__aeabi_dmul+0x164>
   d706c:	340c      	adds	r4, #12
   d706e:	dc1b      	bgt.n	d70a8 <__aeabi_dmul+0x134>
   d7070:	f104 0414 	add.w	r4, r4, #20
   d7074:	f1c4 0520 	rsb	r5, r4, #32
   d7078:	fa00 f305 	lsl.w	r3, r0, r5
   d707c:	fa20 f004 	lsr.w	r0, r0, r4
   d7080:	fa01 f205 	lsl.w	r2, r1, r5
   d7084:	ea40 0002 	orr.w	r0, r0, r2
   d7088:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d708c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7094:	fa21 f604 	lsr.w	r6, r1, r4
   d7098:	eb42 0106 	adc.w	r1, r2, r6
   d709c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70a0:	bf08      	it	eq
   d70a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70a6:	bd70      	pop	{r4, r5, r6, pc}
   d70a8:	f1c4 040c 	rsb	r4, r4, #12
   d70ac:	f1c4 0520 	rsb	r5, r4, #32
   d70b0:	fa00 f304 	lsl.w	r3, r0, r4
   d70b4:	fa20 f005 	lsr.w	r0, r0, r5
   d70b8:	fa01 f204 	lsl.w	r2, r1, r4
   d70bc:	ea40 0002 	orr.w	r0, r0, r2
   d70c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70c8:	f141 0100 	adc.w	r1, r1, #0
   d70cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70d0:	bf08      	it	eq
   d70d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70d6:	bd70      	pop	{r4, r5, r6, pc}
   d70d8:	f1c4 0520 	rsb	r5, r4, #32
   d70dc:	fa00 f205 	lsl.w	r2, r0, r5
   d70e0:	ea4e 0e02 	orr.w	lr, lr, r2
   d70e4:	fa20 f304 	lsr.w	r3, r0, r4
   d70e8:	fa01 f205 	lsl.w	r2, r1, r5
   d70ec:	ea43 0302 	orr.w	r3, r3, r2
   d70f0:	fa21 f004 	lsr.w	r0, r1, r4
   d70f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70f8:	fa21 f204 	lsr.w	r2, r1, r4
   d70fc:	ea20 0002 	bic.w	r0, r0, r2
   d7100:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7108:	bf08      	it	eq
   d710a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d710e:	bd70      	pop	{r4, r5, r6, pc}
   d7110:	f094 0f00 	teq	r4, #0
   d7114:	d10f      	bne.n	d7136 <__aeabi_dmul+0x1c2>
   d7116:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d711a:	0040      	lsls	r0, r0, #1
   d711c:	eb41 0101 	adc.w	r1, r1, r1
   d7120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7124:	bf08      	it	eq
   d7126:	3c01      	subeq	r4, #1
   d7128:	d0f7      	beq.n	d711a <__aeabi_dmul+0x1a6>
   d712a:	ea41 0106 	orr.w	r1, r1, r6
   d712e:	f095 0f00 	teq	r5, #0
   d7132:	bf18      	it	ne
   d7134:	4770      	bxne	lr
   d7136:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d713a:	0052      	lsls	r2, r2, #1
   d713c:	eb43 0303 	adc.w	r3, r3, r3
   d7140:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7144:	bf08      	it	eq
   d7146:	3d01      	subeq	r5, #1
   d7148:	d0f7      	beq.n	d713a <__aeabi_dmul+0x1c6>
   d714a:	ea43 0306 	orr.w	r3, r3, r6
   d714e:	4770      	bx	lr
   d7150:	ea94 0f0c 	teq	r4, ip
   d7154:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7158:	bf18      	it	ne
   d715a:	ea95 0f0c 	teqne	r5, ip
   d715e:	d00c      	beq.n	d717a <__aeabi_dmul+0x206>
   d7160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7164:	bf18      	it	ne
   d7166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d716a:	d1d1      	bne.n	d7110 <__aeabi_dmul+0x19c>
   d716c:	ea81 0103 	eor.w	r1, r1, r3
   d7170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7174:	f04f 0000 	mov.w	r0, #0
   d7178:	bd70      	pop	{r4, r5, r6, pc}
   d717a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d717e:	bf06      	itte	eq
   d7180:	4610      	moveq	r0, r2
   d7182:	4619      	moveq	r1, r3
   d7184:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7188:	d019      	beq.n	d71be <__aeabi_dmul+0x24a>
   d718a:	ea94 0f0c 	teq	r4, ip
   d718e:	d102      	bne.n	d7196 <__aeabi_dmul+0x222>
   d7190:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7194:	d113      	bne.n	d71be <__aeabi_dmul+0x24a>
   d7196:	ea95 0f0c 	teq	r5, ip
   d719a:	d105      	bne.n	d71a8 <__aeabi_dmul+0x234>
   d719c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d71a0:	bf1c      	itt	ne
   d71a2:	4610      	movne	r0, r2
   d71a4:	4619      	movne	r1, r3
   d71a6:	d10a      	bne.n	d71be <__aeabi_dmul+0x24a>
   d71a8:	ea81 0103 	eor.w	r1, r1, r3
   d71ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d71b8:	f04f 0000 	mov.w	r0, #0
   d71bc:	bd70      	pop	{r4, r5, r6, pc}
   d71be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71c6:	bd70      	pop	{r4, r5, r6, pc}

000d71c8 <__aeabi_ddiv>:
   d71c8:	b570      	push	{r4, r5, r6, lr}
   d71ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71d6:	bf1d      	ittte	ne
   d71d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71dc:	ea94 0f0c 	teqne	r4, ip
   d71e0:	ea95 0f0c 	teqne	r5, ip
   d71e4:	f000 f8a7 	bleq	d7336 <__aeabi_ddiv+0x16e>
   d71e8:	eba4 0405 	sub.w	r4, r4, r5
   d71ec:	ea81 0e03 	eor.w	lr, r1, r3
   d71f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71f8:	f000 8088 	beq.w	d730c <__aeabi_ddiv+0x144>
   d71fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7200:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7204:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7208:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d720c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7210:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7214:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7218:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d721c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7220:	429d      	cmp	r5, r3
   d7222:	bf08      	it	eq
   d7224:	4296      	cmpeq	r6, r2
   d7226:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d722a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d722e:	d202      	bcs.n	d7236 <__aeabi_ddiv+0x6e>
   d7230:	085b      	lsrs	r3, r3, #1
   d7232:	ea4f 0232 	mov.w	r2, r2, rrx
   d7236:	1ab6      	subs	r6, r6, r2
   d7238:	eb65 0503 	sbc.w	r5, r5, r3
   d723c:	085b      	lsrs	r3, r3, #1
   d723e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7242:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7246:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d724a:	ebb6 0e02 	subs.w	lr, r6, r2
   d724e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7252:	bf22      	ittt	cs
   d7254:	1ab6      	subcs	r6, r6, r2
   d7256:	4675      	movcs	r5, lr
   d7258:	ea40 000c 	orrcs.w	r0, r0, ip
   d725c:	085b      	lsrs	r3, r3, #1
   d725e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7262:	ebb6 0e02 	subs.w	lr, r6, r2
   d7266:	eb75 0e03 	sbcs.w	lr, r5, r3
   d726a:	bf22      	ittt	cs
   d726c:	1ab6      	subcs	r6, r6, r2
   d726e:	4675      	movcs	r5, lr
   d7270:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7274:	085b      	lsrs	r3, r3, #1
   d7276:	ea4f 0232 	mov.w	r2, r2, rrx
   d727a:	ebb6 0e02 	subs.w	lr, r6, r2
   d727e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7282:	bf22      	ittt	cs
   d7284:	1ab6      	subcs	r6, r6, r2
   d7286:	4675      	movcs	r5, lr
   d7288:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d728c:	085b      	lsrs	r3, r3, #1
   d728e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7292:	ebb6 0e02 	subs.w	lr, r6, r2
   d7296:	eb75 0e03 	sbcs.w	lr, r5, r3
   d729a:	bf22      	ittt	cs
   d729c:	1ab6      	subcs	r6, r6, r2
   d729e:	4675      	movcs	r5, lr
   d72a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d72a4:	ea55 0e06 	orrs.w	lr, r5, r6
   d72a8:	d018      	beq.n	d72dc <__aeabi_ddiv+0x114>
   d72aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d72ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d72b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d72b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d72ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72c6:	d1c0      	bne.n	d724a <__aeabi_ddiv+0x82>
   d72c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72cc:	d10b      	bne.n	d72e6 <__aeabi_ddiv+0x11e>
   d72ce:	ea41 0100 	orr.w	r1, r1, r0
   d72d2:	f04f 0000 	mov.w	r0, #0
   d72d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72da:	e7b6      	b.n	d724a <__aeabi_ddiv+0x82>
   d72dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72e0:	bf04      	itt	eq
   d72e2:	4301      	orreq	r1, r0
   d72e4:	2000      	moveq	r0, #0
   d72e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72ea:	bf88      	it	hi
   d72ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72f0:	f63f aeaf 	bhi.w	d7052 <__aeabi_dmul+0xde>
   d72f4:	ebb5 0c03 	subs.w	ip, r5, r3
   d72f8:	bf04      	itt	eq
   d72fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7302:	f150 0000 	adcs.w	r0, r0, #0
   d7306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d730a:	bd70      	pop	{r4, r5, r6, pc}
   d730c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7310:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7314:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7318:	bfc2      	ittt	gt
   d731a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d731e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7322:	bd70      	popgt	{r4, r5, r6, pc}
   d7324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7328:	f04f 0e00 	mov.w	lr, #0
   d732c:	3c01      	subs	r4, #1
   d732e:	e690      	b.n	d7052 <__aeabi_dmul+0xde>
   d7330:	ea45 0e06 	orr.w	lr, r5, r6
   d7334:	e68d      	b.n	d7052 <__aeabi_dmul+0xde>
   d7336:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d733a:	ea94 0f0c 	teq	r4, ip
   d733e:	bf08      	it	eq
   d7340:	ea95 0f0c 	teqeq	r5, ip
   d7344:	f43f af3b 	beq.w	d71be <__aeabi_dmul+0x24a>
   d7348:	ea94 0f0c 	teq	r4, ip
   d734c:	d10a      	bne.n	d7364 <__aeabi_ddiv+0x19c>
   d734e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7352:	f47f af34 	bne.w	d71be <__aeabi_dmul+0x24a>
   d7356:	ea95 0f0c 	teq	r5, ip
   d735a:	f47f af25 	bne.w	d71a8 <__aeabi_dmul+0x234>
   d735e:	4610      	mov	r0, r2
   d7360:	4619      	mov	r1, r3
   d7362:	e72c      	b.n	d71be <__aeabi_dmul+0x24a>
   d7364:	ea95 0f0c 	teq	r5, ip
   d7368:	d106      	bne.n	d7378 <__aeabi_ddiv+0x1b0>
   d736a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d736e:	f43f aefd 	beq.w	d716c <__aeabi_dmul+0x1f8>
   d7372:	4610      	mov	r0, r2
   d7374:	4619      	mov	r1, r3
   d7376:	e722      	b.n	d71be <__aeabi_dmul+0x24a>
   d7378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d737c:	bf18      	it	ne
   d737e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7382:	f47f aec5 	bne.w	d7110 <__aeabi_dmul+0x19c>
   d7386:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d738a:	f47f af0d 	bne.w	d71a8 <__aeabi_dmul+0x234>
   d738e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7392:	f47f aeeb 	bne.w	d716c <__aeabi_dmul+0x1f8>
   d7396:	e712      	b.n	d71be <__aeabi_dmul+0x24a>

000d7398 <__gedf2>:
   d7398:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d739c:	e006      	b.n	d73ac <__cmpdf2+0x4>
   d739e:	bf00      	nop

000d73a0 <__ledf2>:
   d73a0:	f04f 0c01 	mov.w	ip, #1
   d73a4:	e002      	b.n	d73ac <__cmpdf2+0x4>
   d73a6:	bf00      	nop

000d73a8 <__cmpdf2>:
   d73a8:	f04f 0c01 	mov.w	ip, #1
   d73ac:	f84d cd04 	str.w	ip, [sp, #-4]!
   d73b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73bc:	bf18      	it	ne
   d73be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73c2:	d01b      	beq.n	d73fc <__cmpdf2+0x54>
   d73c4:	b001      	add	sp, #4
   d73c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d73ca:	bf0c      	ite	eq
   d73cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d73d0:	ea91 0f03 	teqne	r1, r3
   d73d4:	bf02      	ittt	eq
   d73d6:	ea90 0f02 	teqeq	r0, r2
   d73da:	2000      	moveq	r0, #0
   d73dc:	4770      	bxeq	lr
   d73de:	f110 0f00 	cmn.w	r0, #0
   d73e2:	ea91 0f03 	teq	r1, r3
   d73e6:	bf58      	it	pl
   d73e8:	4299      	cmppl	r1, r3
   d73ea:	bf08      	it	eq
   d73ec:	4290      	cmpeq	r0, r2
   d73ee:	bf2c      	ite	cs
   d73f0:	17d8      	asrcs	r0, r3, #31
   d73f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73f6:	f040 0001 	orr.w	r0, r0, #1
   d73fa:	4770      	bx	lr
   d73fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7404:	d102      	bne.n	d740c <__cmpdf2+0x64>
   d7406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d740a:	d107      	bne.n	d741c <__cmpdf2+0x74>
   d740c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7414:	d1d6      	bne.n	d73c4 <__cmpdf2+0x1c>
   d7416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d741a:	d0d3      	beq.n	d73c4 <__cmpdf2+0x1c>
   d741c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7420:	4770      	bx	lr
   d7422:	bf00      	nop

000d7424 <__aeabi_cdrcmple>:
   d7424:	4684      	mov	ip, r0
   d7426:	4610      	mov	r0, r2
   d7428:	4662      	mov	r2, ip
   d742a:	468c      	mov	ip, r1
   d742c:	4619      	mov	r1, r3
   d742e:	4663      	mov	r3, ip
   d7430:	e000      	b.n	d7434 <__aeabi_cdcmpeq>
   d7432:	bf00      	nop

000d7434 <__aeabi_cdcmpeq>:
   d7434:	b501      	push	{r0, lr}
   d7436:	f7ff ffb7 	bl	d73a8 <__cmpdf2>
   d743a:	2800      	cmp	r0, #0
   d743c:	bf48      	it	mi
   d743e:	f110 0f00 	cmnmi.w	r0, #0
   d7442:	bd01      	pop	{r0, pc}

000d7444 <__aeabi_dcmpeq>:
   d7444:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7448:	f7ff fff4 	bl	d7434 <__aeabi_cdcmpeq>
   d744c:	bf0c      	ite	eq
   d744e:	2001      	moveq	r0, #1
   d7450:	2000      	movne	r0, #0
   d7452:	f85d fb08 	ldr.w	pc, [sp], #8
   d7456:	bf00      	nop

000d7458 <__aeabi_dcmplt>:
   d7458:	f84d ed08 	str.w	lr, [sp, #-8]!
   d745c:	f7ff ffea 	bl	d7434 <__aeabi_cdcmpeq>
   d7460:	bf34      	ite	cc
   d7462:	2001      	movcc	r0, #1
   d7464:	2000      	movcs	r0, #0
   d7466:	f85d fb08 	ldr.w	pc, [sp], #8
   d746a:	bf00      	nop

000d746c <__aeabi_dcmple>:
   d746c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7470:	f7ff ffe0 	bl	d7434 <__aeabi_cdcmpeq>
   d7474:	bf94      	ite	ls
   d7476:	2001      	movls	r0, #1
   d7478:	2000      	movhi	r0, #0
   d747a:	f85d fb08 	ldr.w	pc, [sp], #8
   d747e:	bf00      	nop

000d7480 <__aeabi_dcmpge>:
   d7480:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7484:	f7ff ffce 	bl	d7424 <__aeabi_cdrcmple>
   d7488:	bf94      	ite	ls
   d748a:	2001      	movls	r0, #1
   d748c:	2000      	movhi	r0, #0
   d748e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7492:	bf00      	nop

000d7494 <__aeabi_dcmpgt>:
   d7494:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7498:	f7ff ffc4 	bl	d7424 <__aeabi_cdrcmple>
   d749c:	bf34      	ite	cc
   d749e:	2001      	movcc	r0, #1
   d74a0:	2000      	movcs	r0, #0
   d74a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d74a6:	bf00      	nop

000d74a8 <__aeabi_dcmpun>:
   d74a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74b0:	d102      	bne.n	d74b8 <__aeabi_dcmpun+0x10>
   d74b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d74b6:	d10a      	bne.n	d74ce <__aeabi_dcmpun+0x26>
   d74b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d74bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74c0:	d102      	bne.n	d74c8 <__aeabi_dcmpun+0x20>
   d74c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d74c6:	d102      	bne.n	d74ce <__aeabi_dcmpun+0x26>
   d74c8:	f04f 0000 	mov.w	r0, #0
   d74cc:	4770      	bx	lr
   d74ce:	f04f 0001 	mov.w	r0, #1
   d74d2:	4770      	bx	lr

000d74d4 <__aeabi_d2iz>:
   d74d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74dc:	d215      	bcs.n	d750a <__aeabi_d2iz+0x36>
   d74de:	d511      	bpl.n	d7504 <__aeabi_d2iz+0x30>
   d74e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74e8:	d912      	bls.n	d7510 <__aeabi_d2iz+0x3c>
   d74ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74fa:	fa23 f002 	lsr.w	r0, r3, r2
   d74fe:	bf18      	it	ne
   d7500:	4240      	negne	r0, r0
   d7502:	4770      	bx	lr
   d7504:	f04f 0000 	mov.w	r0, #0
   d7508:	4770      	bx	lr
   d750a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d750e:	d105      	bne.n	d751c <__aeabi_d2iz+0x48>
   d7510:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7514:	bf08      	it	eq
   d7516:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d751a:	4770      	bx	lr
   d751c:	f04f 0000 	mov.w	r0, #0
   d7520:	4770      	bx	lr
   d7522:	bf00      	nop

000d7524 <__aeabi_d2uiz>:
   d7524:	004a      	lsls	r2, r1, #1
   d7526:	d211      	bcs.n	d754c <__aeabi_d2uiz+0x28>
   d7528:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d752c:	d211      	bcs.n	d7552 <__aeabi_d2uiz+0x2e>
   d752e:	d50d      	bpl.n	d754c <__aeabi_d2uiz+0x28>
   d7530:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7534:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7538:	d40e      	bmi.n	d7558 <__aeabi_d2uiz+0x34>
   d753a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d753e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7542:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7546:	fa23 f002 	lsr.w	r0, r3, r2
   d754a:	4770      	bx	lr
   d754c:	f04f 0000 	mov.w	r0, #0
   d7550:	4770      	bx	lr
   d7552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7556:	d102      	bne.n	d755e <__aeabi_d2uiz+0x3a>
   d7558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d755c:	4770      	bx	lr
   d755e:	f04f 0000 	mov.w	r0, #0
   d7562:	4770      	bx	lr

000d7564 <atexit>:
   d7564:	2300      	movs	r3, #0
   d7566:	4601      	mov	r1, r0
   d7568:	461a      	mov	r2, r3
   d756a:	4618      	mov	r0, r3
   d756c:	f000 b946 	b.w	d77fc <__register_exitproc>

000d7570 <atol>:
   d7570:	220a      	movs	r2, #10
   d7572:	2100      	movs	r1, #0
   d7574:	f000 b938 	b.w	d77e8 <strtol>

000d7578 <memcpy>:
   d7578:	440a      	add	r2, r1
   d757a:	4291      	cmp	r1, r2
   d757c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7580:	d100      	bne.n	d7584 <memcpy+0xc>
   d7582:	4770      	bx	lr
   d7584:	b510      	push	{r4, lr}
   d7586:	f811 4b01 	ldrb.w	r4, [r1], #1
   d758a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d758e:	4291      	cmp	r1, r2
   d7590:	d1f9      	bne.n	d7586 <memcpy+0xe>
   d7592:	bd10      	pop	{r4, pc}

000d7594 <memmove>:
   d7594:	4288      	cmp	r0, r1
   d7596:	b510      	push	{r4, lr}
   d7598:	eb01 0402 	add.w	r4, r1, r2
   d759c:	d902      	bls.n	d75a4 <memmove+0x10>
   d759e:	4284      	cmp	r4, r0
   d75a0:	4623      	mov	r3, r4
   d75a2:	d807      	bhi.n	d75b4 <memmove+0x20>
   d75a4:	1e43      	subs	r3, r0, #1
   d75a6:	42a1      	cmp	r1, r4
   d75a8:	d008      	beq.n	d75bc <memmove+0x28>
   d75aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d75ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   d75b2:	e7f8      	b.n	d75a6 <memmove+0x12>
   d75b4:	4402      	add	r2, r0
   d75b6:	4601      	mov	r1, r0
   d75b8:	428a      	cmp	r2, r1
   d75ba:	d100      	bne.n	d75be <memmove+0x2a>
   d75bc:	bd10      	pop	{r4, pc}
   d75be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d75c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d75c6:	e7f7      	b.n	d75b8 <memmove+0x24>

000d75c8 <memset>:
   d75c8:	4402      	add	r2, r0
   d75ca:	4603      	mov	r3, r0
   d75cc:	4293      	cmp	r3, r2
   d75ce:	d100      	bne.n	d75d2 <memset+0xa>
   d75d0:	4770      	bx	lr
   d75d2:	f803 1b01 	strb.w	r1, [r3], #1
   d75d6:	e7f9      	b.n	d75cc <memset+0x4>

000d75d8 <srand>:
   d75d8:	b538      	push	{r3, r4, r5, lr}
   d75da:	4b0d      	ldr	r3, [pc, #52]	; (d7610 <srand+0x38>)
   d75dc:	681d      	ldr	r5, [r3, #0]
   d75de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d75e0:	4604      	mov	r4, r0
   d75e2:	b97b      	cbnz	r3, d7604 <srand+0x2c>
   d75e4:	2018      	movs	r0, #24
   d75e6:	f7fd fb41 	bl	d4c6c <malloc>
   d75ea:	4a0a      	ldr	r2, [pc, #40]	; (d7614 <srand+0x3c>)
   d75ec:	4b0a      	ldr	r3, [pc, #40]	; (d7618 <srand+0x40>)
   d75ee:	63a8      	str	r0, [r5, #56]	; 0x38
   d75f0:	e9c0 2300 	strd	r2, r3, [r0]
   d75f4:	4b09      	ldr	r3, [pc, #36]	; (d761c <srand+0x44>)
   d75f6:	6083      	str	r3, [r0, #8]
   d75f8:	230b      	movs	r3, #11
   d75fa:	8183      	strh	r3, [r0, #12]
   d75fc:	2201      	movs	r2, #1
   d75fe:	2300      	movs	r3, #0
   d7600:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7604:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7606:	2200      	movs	r2, #0
   d7608:	611c      	str	r4, [r3, #16]
   d760a:	615a      	str	r2, [r3, #20]
   d760c:	bd38      	pop	{r3, r4, r5, pc}
   d760e:	bf00      	nop
   d7610:	2003e40c 	.word	0x2003e40c
   d7614:	abcd330e 	.word	0xabcd330e
   d7618:	e66d1234 	.word	0xe66d1234
   d761c:	0005deec 	.word	0x0005deec

000d7620 <strchr>:
   d7620:	b2c9      	uxtb	r1, r1
   d7622:	4603      	mov	r3, r0
   d7624:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7628:	b11a      	cbz	r2, d7632 <strchr+0x12>
   d762a:	428a      	cmp	r2, r1
   d762c:	d1f9      	bne.n	d7622 <strchr+0x2>
   d762e:	4618      	mov	r0, r3
   d7630:	4770      	bx	lr
   d7632:	2900      	cmp	r1, #0
   d7634:	bf18      	it	ne
   d7636:	2300      	movne	r3, #0
   d7638:	e7f9      	b.n	d762e <strchr+0xe>

000d763a <strchrnul>:
   d763a:	b510      	push	{r4, lr}
   d763c:	4604      	mov	r4, r0
   d763e:	f7ff ffef 	bl	d7620 <strchr>
   d7642:	b918      	cbnz	r0, d764c <strchrnul+0x12>
   d7644:	4620      	mov	r0, r4
   d7646:	f000 f814 	bl	d7672 <strlen>
   d764a:	4420      	add	r0, r4
   d764c:	bd10      	pop	{r4, pc}

000d764e <strcmp>:
   d764e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7652:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7656:	2a01      	cmp	r2, #1
   d7658:	bf28      	it	cs
   d765a:	429a      	cmpcs	r2, r3
   d765c:	d0f7      	beq.n	d764e <strcmp>
   d765e:	1ad0      	subs	r0, r2, r3
   d7660:	4770      	bx	lr

000d7662 <strcpy>:
   d7662:	4603      	mov	r3, r0
   d7664:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7668:	f803 2b01 	strb.w	r2, [r3], #1
   d766c:	2a00      	cmp	r2, #0
   d766e:	d1f9      	bne.n	d7664 <strcpy+0x2>
   d7670:	4770      	bx	lr

000d7672 <strlen>:
   d7672:	4603      	mov	r3, r0
   d7674:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7678:	2a00      	cmp	r2, #0
   d767a:	d1fb      	bne.n	d7674 <strlen+0x2>
   d767c:	1a18      	subs	r0, r3, r0
   d767e:	3801      	subs	r0, #1
   d7680:	4770      	bx	lr

000d7682 <strncmp>:
   d7682:	b510      	push	{r4, lr}
   d7684:	b16a      	cbz	r2, d76a2 <strncmp+0x20>
   d7686:	3901      	subs	r1, #1
   d7688:	1884      	adds	r4, r0, r2
   d768a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d768e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7692:	4293      	cmp	r3, r2
   d7694:	d103      	bne.n	d769e <strncmp+0x1c>
   d7696:	42a0      	cmp	r0, r4
   d7698:	d001      	beq.n	d769e <strncmp+0x1c>
   d769a:	2b00      	cmp	r3, #0
   d769c:	d1f5      	bne.n	d768a <strncmp+0x8>
   d769e:	1a98      	subs	r0, r3, r2
   d76a0:	bd10      	pop	{r4, pc}
   d76a2:	4610      	mov	r0, r2
   d76a4:	e7fc      	b.n	d76a0 <strncmp+0x1e>

000d76a6 <strncpy>:
   d76a6:	b510      	push	{r4, lr}
   d76a8:	3901      	subs	r1, #1
   d76aa:	4603      	mov	r3, r0
   d76ac:	b132      	cbz	r2, d76bc <strncpy+0x16>
   d76ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d76b2:	f803 4b01 	strb.w	r4, [r3], #1
   d76b6:	3a01      	subs	r2, #1
   d76b8:	2c00      	cmp	r4, #0
   d76ba:	d1f7      	bne.n	d76ac <strncpy+0x6>
   d76bc:	441a      	add	r2, r3
   d76be:	2100      	movs	r1, #0
   d76c0:	4293      	cmp	r3, r2
   d76c2:	d100      	bne.n	d76c6 <strncpy+0x20>
   d76c4:	bd10      	pop	{r4, pc}
   d76c6:	f803 1b01 	strb.w	r1, [r3], #1
   d76ca:	e7f9      	b.n	d76c0 <strncpy+0x1a>

000d76cc <strrchr>:
   d76cc:	b538      	push	{r3, r4, r5, lr}
   d76ce:	4603      	mov	r3, r0
   d76d0:	460c      	mov	r4, r1
   d76d2:	b969      	cbnz	r1, d76f0 <strrchr+0x24>
   d76d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d76d8:	f7ff bfa2 	b.w	d7620 <strchr>
   d76dc:	1c43      	adds	r3, r0, #1
   d76de:	4605      	mov	r5, r0
   d76e0:	4621      	mov	r1, r4
   d76e2:	4618      	mov	r0, r3
   d76e4:	f7ff ff9c 	bl	d7620 <strchr>
   d76e8:	2800      	cmp	r0, #0
   d76ea:	d1f7      	bne.n	d76dc <strrchr+0x10>
   d76ec:	4628      	mov	r0, r5
   d76ee:	bd38      	pop	{r3, r4, r5, pc}
   d76f0:	2500      	movs	r5, #0
   d76f2:	e7f5      	b.n	d76e0 <strrchr+0x14>

000d76f4 <_strtol_l.isra.0>:
   d76f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76f8:	4e3a      	ldr	r6, [pc, #232]	; (d77e4 <_strtol_l.isra.0+0xf0>)
   d76fa:	4686      	mov	lr, r0
   d76fc:	468c      	mov	ip, r1
   d76fe:	4660      	mov	r0, ip
   d7700:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7704:	5da5      	ldrb	r5, [r4, r6]
   d7706:	f015 0508 	ands.w	r5, r5, #8
   d770a:	d1f8      	bne.n	d76fe <_strtol_l.isra.0+0xa>
   d770c:	2c2d      	cmp	r4, #45	; 0x2d
   d770e:	d133      	bne.n	d7778 <_strtol_l.isra.0+0x84>
   d7710:	f89c 4000 	ldrb.w	r4, [ip]
   d7714:	f04f 0801 	mov.w	r8, #1
   d7718:	f100 0c02 	add.w	ip, r0, #2
   d771c:	2b00      	cmp	r3, #0
   d771e:	d05c      	beq.n	d77da <_strtol_l.isra.0+0xe6>
   d7720:	2b10      	cmp	r3, #16
   d7722:	d10c      	bne.n	d773e <_strtol_l.isra.0+0x4a>
   d7724:	2c30      	cmp	r4, #48	; 0x30
   d7726:	d10a      	bne.n	d773e <_strtol_l.isra.0+0x4a>
   d7728:	f89c 0000 	ldrb.w	r0, [ip]
   d772c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7730:	2858      	cmp	r0, #88	; 0x58
   d7732:	d14d      	bne.n	d77d0 <_strtol_l.isra.0+0xdc>
   d7734:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7738:	2310      	movs	r3, #16
   d773a:	f10c 0c02 	add.w	ip, ip, #2
   d773e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7742:	3f01      	subs	r7, #1
   d7744:	2600      	movs	r6, #0
   d7746:	fbb7 f9f3 	udiv	r9, r7, r3
   d774a:	4630      	mov	r0, r6
   d774c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7750:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7754:	2d09      	cmp	r5, #9
   d7756:	d818      	bhi.n	d778a <_strtol_l.isra.0+0x96>
   d7758:	462c      	mov	r4, r5
   d775a:	42a3      	cmp	r3, r4
   d775c:	dd24      	ble.n	d77a8 <_strtol_l.isra.0+0xb4>
   d775e:	1c75      	adds	r5, r6, #1
   d7760:	d007      	beq.n	d7772 <_strtol_l.isra.0+0x7e>
   d7762:	4581      	cmp	r9, r0
   d7764:	d31d      	bcc.n	d77a2 <_strtol_l.isra.0+0xae>
   d7766:	d101      	bne.n	d776c <_strtol_l.isra.0+0x78>
   d7768:	45a2      	cmp	sl, r4
   d776a:	db1a      	blt.n	d77a2 <_strtol_l.isra.0+0xae>
   d776c:	fb00 4003 	mla	r0, r0, r3, r4
   d7770:	2601      	movs	r6, #1
   d7772:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7776:	e7eb      	b.n	d7750 <_strtol_l.isra.0+0x5c>
   d7778:	2c2b      	cmp	r4, #43	; 0x2b
   d777a:	bf08      	it	eq
   d777c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7780:	46a8      	mov	r8, r5
   d7782:	bf08      	it	eq
   d7784:	f100 0c02 	addeq.w	ip, r0, #2
   d7788:	e7c8      	b.n	d771c <_strtol_l.isra.0+0x28>
   d778a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d778e:	2d19      	cmp	r5, #25
   d7790:	d801      	bhi.n	d7796 <_strtol_l.isra.0+0xa2>
   d7792:	3c37      	subs	r4, #55	; 0x37
   d7794:	e7e1      	b.n	d775a <_strtol_l.isra.0+0x66>
   d7796:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d779a:	2d19      	cmp	r5, #25
   d779c:	d804      	bhi.n	d77a8 <_strtol_l.isra.0+0xb4>
   d779e:	3c57      	subs	r4, #87	; 0x57
   d77a0:	e7db      	b.n	d775a <_strtol_l.isra.0+0x66>
   d77a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d77a6:	e7e4      	b.n	d7772 <_strtol_l.isra.0+0x7e>
   d77a8:	1c73      	adds	r3, r6, #1
   d77aa:	d106      	bne.n	d77ba <_strtol_l.isra.0+0xc6>
   d77ac:	2322      	movs	r3, #34	; 0x22
   d77ae:	f8ce 3000 	str.w	r3, [lr]
   d77b2:	4638      	mov	r0, r7
   d77b4:	b942      	cbnz	r2, d77c8 <_strtol_l.isra.0+0xd4>
   d77b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77ba:	f1b8 0f00 	cmp.w	r8, #0
   d77be:	d000      	beq.n	d77c2 <_strtol_l.isra.0+0xce>
   d77c0:	4240      	negs	r0, r0
   d77c2:	2a00      	cmp	r2, #0
   d77c4:	d0f7      	beq.n	d77b6 <_strtol_l.isra.0+0xc2>
   d77c6:	b10e      	cbz	r6, d77cc <_strtol_l.isra.0+0xd8>
   d77c8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d77cc:	6011      	str	r1, [r2, #0]
   d77ce:	e7f2      	b.n	d77b6 <_strtol_l.isra.0+0xc2>
   d77d0:	2430      	movs	r4, #48	; 0x30
   d77d2:	2b00      	cmp	r3, #0
   d77d4:	d1b3      	bne.n	d773e <_strtol_l.isra.0+0x4a>
   d77d6:	2308      	movs	r3, #8
   d77d8:	e7b1      	b.n	d773e <_strtol_l.isra.0+0x4a>
   d77da:	2c30      	cmp	r4, #48	; 0x30
   d77dc:	d0a4      	beq.n	d7728 <_strtol_l.isra.0+0x34>
   d77de:	230a      	movs	r3, #10
   d77e0:	e7ad      	b.n	d773e <_strtol_l.isra.0+0x4a>
   d77e2:	bf00      	nop
   d77e4:	000d7b8e 	.word	0x000d7b8e

000d77e8 <strtol>:
   d77e8:	4613      	mov	r3, r2
   d77ea:	460a      	mov	r2, r1
   d77ec:	4601      	mov	r1, r0
   d77ee:	4802      	ldr	r0, [pc, #8]	; (d77f8 <strtol+0x10>)
   d77f0:	6800      	ldr	r0, [r0, #0]
   d77f2:	f7ff bf7f 	b.w	d76f4 <_strtol_l.isra.0>
   d77f6:	bf00      	nop
   d77f8:	2003e40c 	.word	0x2003e40c

000d77fc <__register_exitproc>:
   d77fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7800:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d78bc <__register_exitproc+0xc0>
   d7804:	4606      	mov	r6, r0
   d7806:	f8d8 0000 	ldr.w	r0, [r8]
   d780a:	461f      	mov	r7, r3
   d780c:	460d      	mov	r5, r1
   d780e:	4691      	mov	r9, r2
   d7810:	f000 f856 	bl	d78c0 <__retarget_lock_acquire_recursive>
   d7814:	4b25      	ldr	r3, [pc, #148]	; (d78ac <__register_exitproc+0xb0>)
   d7816:	681c      	ldr	r4, [r3, #0]
   d7818:	b934      	cbnz	r4, d7828 <__register_exitproc+0x2c>
   d781a:	4c25      	ldr	r4, [pc, #148]	; (d78b0 <__register_exitproc+0xb4>)
   d781c:	601c      	str	r4, [r3, #0]
   d781e:	4b25      	ldr	r3, [pc, #148]	; (d78b4 <__register_exitproc+0xb8>)
   d7820:	b113      	cbz	r3, d7828 <__register_exitproc+0x2c>
   d7822:	681b      	ldr	r3, [r3, #0]
   d7824:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7828:	6863      	ldr	r3, [r4, #4]
   d782a:	2b1f      	cmp	r3, #31
   d782c:	dd07      	ble.n	d783e <__register_exitproc+0x42>
   d782e:	f8d8 0000 	ldr.w	r0, [r8]
   d7832:	f000 f847 	bl	d78c4 <__retarget_lock_release_recursive>
   d7836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d783e:	b34e      	cbz	r6, d7894 <__register_exitproc+0x98>
   d7840:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d7844:	b988      	cbnz	r0, d786a <__register_exitproc+0x6e>
   d7846:	4b1c      	ldr	r3, [pc, #112]	; (d78b8 <__register_exitproc+0xbc>)
   d7848:	b923      	cbnz	r3, d7854 <__register_exitproc+0x58>
   d784a:	f8d8 0000 	ldr.w	r0, [r8]
   d784e:	f000 f838 	bl	d78c2 <__retarget_lock_release>
   d7852:	e7f0      	b.n	d7836 <__register_exitproc+0x3a>
   d7854:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7858:	f7fd fa08 	bl	d4c6c <malloc>
   d785c:	2800      	cmp	r0, #0
   d785e:	d0f4      	beq.n	d784a <__register_exitproc+0x4e>
   d7860:	2300      	movs	r3, #0
   d7862:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d7866:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d786a:	6863      	ldr	r3, [r4, #4]
   d786c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7870:	2201      	movs	r2, #1
   d7872:	409a      	lsls	r2, r3
   d7874:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7878:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d787c:	4313      	orrs	r3, r2
   d787e:	2e02      	cmp	r6, #2
   d7880:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d7884:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7888:	bf02      	ittt	eq
   d788a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d788e:	431a      	orreq	r2, r3
   d7890:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d7894:	6863      	ldr	r3, [r4, #4]
   d7896:	f8d8 0000 	ldr.w	r0, [r8]
   d789a:	1c5a      	adds	r2, r3, #1
   d789c:	3302      	adds	r3, #2
   d789e:	6062      	str	r2, [r4, #4]
   d78a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d78a4:	f000 f80e 	bl	d78c4 <__retarget_lock_release_recursive>
   d78a8:	2000      	movs	r0, #0
   d78aa:	e7c6      	b.n	d783a <__register_exitproc+0x3e>
   d78ac:	2003e7e0 	.word	0x2003e7e0
   d78b0:	2003e754 	.word	0x2003e754
   d78b4:	00000000 	.word	0x00000000
   d78b8:	000d4c6d 	.word	0x000d4c6d
   d78bc:	2003e470 	.word	0x2003e470

000d78c0 <__retarget_lock_acquire_recursive>:
   d78c0:	4770      	bx	lr

000d78c2 <__retarget_lock_release>:
   d78c2:	4770      	bx	lr

000d78c4 <__retarget_lock_release_recursive>:
   d78c4:	4770      	bx	lr

000d78c6 <link_code_end>:
	...

000d78c8 <dynalib_user>:
   d78c8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d78d8:	0000 0000 4148 2053 4946 3d58 4c00 5441     ....HAS FIX=.LAT
   d78e8:	003d 4f4c 474e 003d 4c41 3d54 0000 0000     =.LONG=.ALT=....

000d78f8 <_ZTVN5spark10LogHandlerE>:
	...
   d7908:	40a1 000d 40c5 000d                         .@...@..

000d7910 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7918:	40d1 000d 4105 000d 5f31 000d 40c7 000d     .@...A..1_...@..
   d7928:	5047 4d52 0043 4e47 4d52 0043 5047 4747     GPRMC.GNRMC.GPGG
   d7938:	0041 4e47 4747 0041                         A.GNGGA.

000d7940 <_ZTVN5spark13CellularClassE>:
	...
   d7948:	4d77 000d 4d6d 000d 4d63 000d 4d19 000d     wM..mM..cM...M..
   d7958:	4d57 000d 4d4b 000d 6289 000d 6291 000d     WM..KM...b...b..
   d7968:	4d3f 000d 4d37 000d 4d2d 000d 4d23 000d     ?M..7M..-M..#M..
   d7978:	62c1 000d                                   .b..

000d797c <_ZTVN5spark13EthernetClassE>:
	...
   d7984:	4e0f 000d 4e05 000d 4dfb 000d 4df1 000d     .N...N...M...M..
   d7994:	4de5 000d 4dd9 000d 6289 000d 6291 000d     .M...M...b...b..
   d79a4:	4dcd 000d 4dc5 000d 4dbb 000d 4db1 000d     .M...M...M...M..
   d79b4:	62c1 000d                                   .b..

000d79b8 <_ZTV9IPAddress>:
	...
   d79c0:	4e3d 000d 4e2d 000d 4e2f 000d 6425 2500     =N..-N../N..%d.%
   d79d0:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   d79e0:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   d79f0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d7a00:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   d7a10:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d7a20:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d7a30:	0a0d 6d00 6300 6c00 006e 6e66 7400 6300     ...m.c.ln.fn.t.c
   d7a40:	646f 0065 6564 6174 6c69 0000               ode.detail..

000d7a4c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7a54:	52f9 000d 531f 000d 52dd 000d 4f3d 000d     .R...S...R..=O..

000d7a64 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7a6c:	574d 000d 5765 000d 5f31 000d 40c7 000d     MW..eW..1_...@..

000d7a7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7a84:	5779 000d 578d 000d 60d5 000d 52e5 000d     yW...W...`...R..

000d7a94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7a9c:	52f7 000d 532d 000d 5e6d 000d 52e7 000d     .R..-S..m^...R..

000d7aac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7ab4:	52f5 000d 533b 000d 5695 000d 5359 000d     .R..;S...V..YS..

000d7ac4 <_ZTVN5spark12NetworkClassE>:
	...
   d7acc:	6249 000d 6253 000d 625d 000d 6267 000d     Ib..Sb..]b..gb..
   d7adc:	6271 000d 627d 000d 6289 000d 6291 000d     qb..}b...b...b..
   d7aec:	6299 000d 62a5 000d 62ad 000d 62b7 000d     .b...b...b...b..
   d7afc:	62c1 000d 616e 006e 6e69 0066 766f 0066     .b..nan.inf.ovf.
   d7b0c:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d7b1c:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7b2c <_ZTV11USARTSerial>:
	...
   d7b34:	68a5 000d 6913 000d 68eb 000d 63a9 000d     .h...i...h...c..
   d7b44:	68bb 000d 68d7 000d 68c9 000d 68e5 000d     .h...h...h...h..
   d7b54:	68a7 000d 68ad 000d                         .h...h..

000d7b5c <_ZTV9USBSerial>:
	...
   d7b64:	69b3 000d 6a1b 000d 69f1 000d 63a9 000d     .i...j...i...c..
   d7b74:	69e3 000d 69b5 000d 69c5 000d 6a15 000d     .i...i...i...j..
   d7b84:	69d5 000d 69ad 000d                         .i...i..

000d7b8c <_ZSt7nothrow>:
	...

000d7b8d <_ctype_>:
   d7b8d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7b9d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7bad:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7bbd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7bcd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7bdd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7bed:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7bfd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7c0d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7c8e <link_const_variable_data_end>:
	...

000d7c90 <link_constructors_location>:
   d7c90:	000d4329 	.word	0x000d4329
   d7c94:	000d4d09 	.word	0x000d4d09
   d7c98:	000d4d81 	.word	0x000d4d81
   d7c9c:	000d4e19 	.word	0x000d4e19
   d7ca0:	000d5f21 	.word	0x000d5f21
   d7ca4:	000d6395 	.word	0x000d6395
   d7ca8:	000d6679 	.word	0x000d6679
   d7cac:	000d686d 	.word	0x000d686d
   d7cb0:	000d6891 	.word	0x000d6891

000d7cb4 <link_constructors_end>:
	...
