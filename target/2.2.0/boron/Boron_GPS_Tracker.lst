
/Users/mikesoniat/Documents/Particle/Boron_GPS_Tracker/target/2.2.0/boron/Boron_GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005a60  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9a80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e318  000d9a84  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000044c  2003e3a8  2003e3a8  0002e3a8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9b10  000d9b10  00029b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9b38  000d9b38  00029b38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b192a  00000000  00000000  00029b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bd84  00000000  00000000  001db466  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000360e2  00000000  00000000  001f71ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003128  00000000  00000000  0022d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008d58  00000000  00000000  002303f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e3d8  00000000  00000000  0023914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046a5e  00000000  00000000  00277524  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00115396  00000000  00000000  002bdf82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008c48  00000000  00000000  003d3318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f8a9 	bl	d9188 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f8cb 	bl	d91d8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e318 	.word	0x2003e318
   d404c:	000d9a84 	.word	0x000d9a84
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e3a8 	.word	0x2003e3a8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fad7 	bl	d8614 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9a50 	.word	0x000d9a50
   d4080:	000d9a74 	.word	0x000d9a74

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b860 	b.w	d4148 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9fd 	bl	d4488 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 ba77 	b.w	d8584 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 be61 	b.w	d5d5c <malloc>

000d409a <_Znaj>:
   d409a:	f001 be5f 	b.w	d5d5c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 be65 	b.w	d5d6c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fd80 	bl	d5bb0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d58b1 	.word	0x000d58b1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 fa6e 	bl	d55bc <_ZN10JsonWriterD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000d95e0 	.word	0x000d95e0

000d40e8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40f6:	f004 fbb5 	bl	d8864 <_ZdlPvj>
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
	...

000d4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
   d4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4108:	f002 ff90 	bl	d702c <_ZN5spark10LogManager8instanceEv>
   d410c:	4621      	mov	r1, r4
   d410e:	f003 f98e 	bl	d742e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4112:	f004 f9ef 	bl	d84f4 <_Z16_fetch_usbserialv>
   d4116:	f004 f9e1 	bl	d84dc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411a:	4620      	mov	r0, r4
   d411c:	4b04      	ldr	r3, [pc, #16]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411e:	f840 3b04 	str.w	r3, [r0], #4
   d4122:	f003 f871 	bl	d7208 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	000d95c8 	.word	0x000d95c8
   d4130:	000d95b0 	.word	0x000d95b0

000d4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
    }
   d4138:	f7ff ffe2 	bl	d4100 <_ZN5spark16SerialLogHandlerD1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2124      	movs	r1, #36	; 0x24
   d4140:	f004 fb90 	bl	d8864 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <setup>:
//loop vars
bool first_loop = true;
unsigned long delay_millis = 300000;
unsigned long lastCheck = 0;

void setup() {
   d4148:	b510      	push	{r4, lr}
    //setup serial port
    Serial.begin(9600);
   d414a:	f004 f9d3 	bl	d84f4 <_Z16_fetch_usbserialv>
   d414e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4152:	f004 f9bf 	bl	d84d4 <_ZN9USBSerial5beginEl>
  
    //setup GPS port
    Serial1.begin(9600);
   d4156:	f004 f945 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415e:	f004 f93b 	bl	d83d8 <_ZN11USARTSerial5beginEm>

    //setup BME sensor
    bme.begin();
   d4162:	481a      	ldr	r0, [pc, #104]	; (d41cc <setup+0x84>)
   d4164:	f001 f9ff 	bl	d5566 <_ZN15Adafruit_BME2805beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4168:	4919      	ldr	r1, [pc, #100]	; (d41d0 <setup+0x88>)
   d416a:	481a      	ldr	r0, [pc, #104]	; (d41d4 <setup+0x8c>)
   d416c:	2300      	movs	r3, #0
   d416e:	2202      	movs	r2, #2
   d4170:	f001 fd74 	bl	d5c5c <spark_variable>
   d4174:	4918      	ldr	r1, [pc, #96]	; (d41d8 <setup+0x90>)
   d4176:	4819      	ldr	r0, [pc, #100]	; (d41dc <setup+0x94>)
   d4178:	2300      	movs	r3, #0
   d417a:	2202      	movs	r2, #2
   d417c:	f001 fd6e 	bl	d5c5c <spark_variable>
   d4180:	4917      	ldr	r1, [pc, #92]	; (d41e0 <setup+0x98>)
   d4182:	4818      	ldr	r0, [pc, #96]	; (d41e4 <setup+0x9c>)
   d4184:	2300      	movs	r3, #0
   d4186:	2202      	movs	r2, #2
   d4188:	f001 fd68 	bl	d5c5c <spark_variable>
   d418c:	4916      	ldr	r1, [pc, #88]	; (d41e8 <setup+0xa0>)
   d418e:	4817      	ldr	r0, [pc, #92]	; (d41ec <setup+0xa4>)
   d4190:	2300      	movs	r3, #0
   d4192:	2202      	movs	r2, #2
   d4194:	f001 fd62 	bl	d5c5c <spark_variable>
   d4198:	4915      	ldr	r1, [pc, #84]	; (d41f0 <setup+0xa8>)
   d419a:	4816      	ldr	r0, [pc, #88]	; (d41f4 <setup+0xac>)
   d419c:	2300      	movs	r3, #0
   d419e:	2202      	movs	r2, #2
   d41a0:	f001 fd5c 	bl	d5c5c <spark_variable>
   d41a4:	4914      	ldr	r1, [pc, #80]	; (d41f8 <setup+0xb0>)
   d41a6:	4815      	ldr	r0, [pc, #84]	; (d41fc <setup+0xb4>)
   d41a8:	2300      	movs	r3, #0
   d41aa:	2209      	movs	r2, #9
   d41ac:	f001 fd56 	bl	d5c5c <spark_variable>
   d41b0:	4913      	ldr	r1, [pc, #76]	; (d4200 <setup+0xb8>)
   d41b2:	4814      	ldr	r0, [pc, #80]	; (d4204 <setup+0xbc>)
   d41b4:	2300      	movs	r3, #0
   d41b6:	2209      	movs	r2, #9
   d41b8:	f001 fd50 	bl	d5c5c <spark_variable>
    Particle.variable("percent_charge", percent_charge);    
    Particle.variable("longitude", &longitude, DOUBLE);
    Particle.variable("latitude", &latitude, DOUBLE);
    Particle.variable("altitude", &altitude, DOUBLE);

}
   d41bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41c0:	4911      	ldr	r1, [pc, #68]	; (d4208 <setup+0xc0>)
   d41c2:	4812      	ldr	r0, [pc, #72]	; (d420c <setup+0xc4>)
   d41c4:	2300      	movs	r3, #0
   d41c6:	2209      	movs	r2, #9
   d41c8:	f001 bd48 	b.w	d5c5c <spark_variable>
   d41cc:	2003e3b8 	.word	0x2003e3b8
   d41d0:	2003e530 	.word	0x2003e530
   d41d4:	000d9528 	.word	0x000d9528
   d41d8:	2003e4dc 	.word	0x2003e4dc
   d41dc:	000d952f 	.word	0x000d952f
   d41e0:	2003e528 	.word	0x2003e528
   d41e4:	000d9538 	.word	0x000d9538
   d41e8:	2003e524 	.word	0x2003e524
   d41ec:	000d9548 	.word	0x000d9548
   d41f0:	2003e520 	.word	0x2003e520
   d41f4:	000d9557 	.word	0x000d9557
   d41f8:	2003e518 	.word	0x2003e518
   d41fc:	000d9566 	.word	0x000d9566
   d4200:	2003e4e8 	.word	0x2003e4e8
   d4204:	000d9570 	.word	0x000d9570
   d4208:	2003e3b0 	.word	0x2003e3b0
   d420c:	000d9579 	.word	0x000d9579

000d4210 <_Z6getGPSv>:
        last_latitude = latitude;
        last_longitude = longitude;
    }
}

void getGPS() {
   d4210:	e92d 43df 	stmdb	sp!, {r0, r1, r2, r3, r4, r6, r7, r8, r9, lr}
struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4214:	a72a      	add	r7, pc, #168	; (adr r7, d42c0 <_Z6getGPSv+0xb0>)
   d4216:	e9d7 6700 	ldrd	r6, r7, [r7]
    while(Serial1.available())
    {
        if(gps.encode(Serial1.read()))
   d421a:	4c25      	ldr	r4, [pc, #148]	; (d42b0 <_Z6getGPSv+0xa0>)
   d421c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d42c8 <_Z6getGPSv+0xb8>
   d4220:	f04f 0800 	mov.w	r8, #0
    while(Serial1.available())
   d4224:	f004 f8de 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d4228:	6803      	ldr	r3, [r0, #0]
   d422a:	691b      	ldr	r3, [r3, #16]
   d422c:	4798      	blx	r3
   d422e:	2800      	cmp	r0, #0
   d4230:	d03b      	beq.n	d42aa <_Z6getGPSv+0x9a>
        if(gps.encode(Serial1.read()))
   d4232:	f004 f8d7 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d4236:	6803      	ldr	r3, [r0, #0]
   d4238:	695b      	ldr	r3, [r3, #20]
   d423a:	4798      	blx	r3
   d423c:	b2c1      	uxtb	r1, r0
   d423e:	481c      	ldr	r0, [pc, #112]	; (d42b0 <_Z6getGPSv+0xa0>)
   d4240:	f000 fd90 	bl	d4d64 <_ZN11TinyGPSPlus6encodeEc>
   d4244:	2800      	cmp	r0, #0
   d4246:	d0ed      	beq.n	d4224 <_Z6getGPSv+0x14>
        {
            String msg = Serial1.readStringUntil('\r');
   d4248:	f004 f8cc 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d424c:	220d      	movs	r2, #13
   d424e:	4601      	mov	r1, r0
   d4250:	4668      	mov	r0, sp
   d4252:	f003 ff6f 	bl	d8134 <_ZN6Stream15readStringUntilEc>
            Serial.println(msg);
   d4256:	f004 f94d 	bl	d84f4 <_Z16_fetch_usbserialv>
   d425a:	9900      	ldr	r1, [sp, #0]
   d425c:	f003 fe47 	bl	d7eee <_ZN5Print7printlnEPKc>

            if (gps.sentencesWithFix() > 0) {
   d4260:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4264:	b1eb      	cbz	r3, d42a2 <_Z6getGPSv+0x92>
                latitude = gps.location.lat();
   d4266:	4620      	mov	r0, r4
   d4268:	f000 fbae 	bl	d49c8 <_ZN15TinyGPSLocation3latEv>
   d426c:	4b11      	ldr	r3, [pc, #68]	; (d42b4 <_Z6getGPSv+0xa4>)
                longitude = gps.location.lng();
   d426e:	4620      	mov	r0, r4
                latitude = gps.location.lat();
   d4270:	ed83 0b00 	vstr	d0, [r3]
                longitude = gps.location.lng();
   d4274:	f000 fbcc 	bl	d4a10 <_ZN15TinyGPSLocation3lngEv>
   d4278:	4b0f      	ldr	r3, [pc, #60]	; (d42b8 <_Z6getGPSv+0xa8>)
   d427a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d427e:	ed83 0b00 	vstr	d0, [r3]
   int32_t value()         { updated = false; return val; }
   d4282:	2300      	movs	r3, #0
   d4284:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
   d4288:	f004 fc48 	bl	d8b1c <__aeabi_i2d>
   d428c:	4632      	mov	r2, r6
   d428e:	463b      	mov	r3, r7
   d4290:	f004 fcae 	bl	d8bf0 <__aeabi_dmul>
   d4294:	464b      	mov	r3, r9
   d4296:	4642      	mov	r2, r8
   d4298:	f004 fdd4 	bl	d8e44 <__aeabi_ddiv>
                altitude = gps.altitude.feet();
   d429c:	4b07      	ldr	r3, [pc, #28]	; (d42bc <_Z6getGPSv+0xac>)
   d429e:	e9c3 0100 	strd	r0, r1, [r3]
            String msg = Serial1.readStringUntil('\r');
   d42a2:	4668      	mov	r0, sp
   d42a4:	f003 ff5e 	bl	d8164 <_ZN6StringD1Ev>
   d42a8:	e7bc      	b.n	d4224 <_Z6getGPSv+0x14>
            }

        }
    }  

}
   d42aa:	b004      	add	sp, #16
   d42ac:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d42b0:	2003e404 	.word	0x2003e404
   d42b4:	2003e4e8 	.word	0x2003e4e8
   d42b8:	2003e518 	.word	0x2003e518
   d42bc:	2003e3b0 	.word	0x2003e3b0
   d42c0:	fd4f4b98 	.word	0xfd4f4b98
   d42c4:	400a3f28 	.word	0x400a3f28
   d42c8:	40590000 	.word	0x40590000

000d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d42ce:	e9d0 5300 	ldrd	r5, r3, [r0]
   d42d2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d42d6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d42da:	42ae      	cmp	r6, r5
   d42dc:	d004      	beq.n	d42e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d42de:	4628      	mov	r0, r5
   d42e0:	f003 ff40 	bl	d8164 <_ZN6StringD1Ev>
   d42e4:	3514      	adds	r5, #20
   d42e6:	e7f8      	b.n	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d42e8:	6820      	ldr	r0, [r4, #0]
   d42ea:	f001 fd3f 	bl	d5d6c <free>
    AllocatorT::free(data_);
}
   d42ee:	4620      	mov	r0, r4
   d42f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d42f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	4615      	mov	r5, r2
   d42fa:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   d42fc:	f001 fa6a 	bl	d57d4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d4300:	9901      	ldr	r1, [sp, #4]
   d4302:	2201      	movs	r2, #1
   d4304:	4620      	mov	r0, r4
   d4306:	f001 f9d3 	bl	d56b0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d430a:	4620      	mov	r0, r4
   d430c:	213a      	movs	r1, #58	; 0x3a
   d430e:	f001 f983 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   d4312:	4904      	ldr	r1, [pc, #16]	; (d4324 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   d4314:	462a      	mov	r2, r5
   d4316:	4620      	mov	r0, r4
	}
   d4318:	b003      	add	sp, #12
   d431a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   d431e:	f001 b9ba 	b.w	d5696 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4322:	bf00      	nop
   d4324:	000d9582 	.word	0x000d9582

000d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   d4328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d432a:	4604      	mov	r4, r0
   d432c:	ed8d 0b00 	vstr	d0, [sp]
   d4330:	9103      	str	r1, [sp, #12]
		insertCheckSeparator();
   d4332:	f001 fa4f 	bl	d57d4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   d4336:	9903      	ldr	r1, [sp, #12]
   d4338:	2201      	movs	r2, #1
   d433a:	4620      	mov	r0, r4
   d433c:	f001 f9b8 	bl	d56b0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   d4340:	4620      	mov	r0, r4
   d4342:	213a      	movs	r1, #58	; 0x3a
   d4344:	f001 f968 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4348:	ed9d 0b00 	vldr	d0, [sp]
   d434c:	4620      	mov	r0, r4
	}
   d434e:	b004      	add	sp, #16
   d4350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   d4354:	f001 ba62 	b.w	d581c <_ZN10JsonWriter11insertValueEd>

000d4358 <_Z18createEventPayloadiiiiiiiddd>:

void createEventPayload(int temp_c, int temp_f, int humidity, int voltage, int percent_charge, int signal_strength , int signal_quality, double longitude, double latitude, double altitude)
{
   d4358:	b5f0      	push	{r4, r5, r6, r7, lr}
   d435a:	ed2d 8b04 	vpush	{d8-d9}
   d435e:	eeb0 9a41 	vmov.f32	s18, s2
   d4362:	eef0 9a61 	vmov.f32	s19, s3
   d4366:	eeb0 8a42 	vmov.f32	s16, s4
   d436a:	eef0 8a62 	vmov.f32	s17, s5
   d436e:	b0d3      	sub	sp, #332	; 0x14c
   d4370:	4607      	mov	r7, r0
   d4372:	460e      	mov	r6, r1
   d4374:	4615      	mov	r5, r2
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d4376:	a912      	add	r1, sp, #72	; 0x48
   d4378:	f44f 7280 	mov.w	r2, #256	; 0x100
   d437c:	a806      	add	r0, sp, #24
   d437e:	ed8d 0b02 	vstr	d0, [sp, #8]
   d4382:	461c      	mov	r4, r3
   d4384:	f001 f936 	bl	d55f4 <_ZN10JsonWriterC1EPcj>
   d4388:	4b32      	ldr	r3, [pc, #200]	; (d4454 <_Z18createEventPayloadiiiiiiiddd+0xfc>)
   d438a:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   d438c:	227d      	movs	r2, #125	; 0x7d
   d438e:	217b      	movs	r1, #123	; 0x7b
   d4390:	a806      	add	r0, sp, #24
   d4392:	f001 fa2a 	bl	d57ea <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;

  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp_c", temp_c);
   d4396:	4930      	ldr	r1, [pc, #192]	; (d4458 <_Z18createEventPayloadiiiiiiiddd+0x100>)
   d4398:	463a      	mov	r2, r7
   d439a:	a806      	add	r0, sp, #24
   d439c:	f7ff ffaa 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("temp_f", temp_f);
   d43a0:	492e      	ldr	r1, [pc, #184]	; (d445c <_Z18createEventPayloadiiiiiiiddd+0x104>)
   d43a2:	4632      	mov	r2, r6
   d43a4:	a806      	add	r0, sp, #24
   d43a6:	f7ff ffa5 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d43aa:	492d      	ldr	r1, [pc, #180]	; (d4460 <_Z18createEventPayloadiiiiiiiddd+0x108>)
   d43ac:	462a      	mov	r2, r5
   d43ae:	a806      	add	r0, sp, #24
   d43b0:	f7ff ffa0 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("voltage", voltage);
   d43b4:	4622      	mov	r2, r4
   d43b6:	492b      	ldr	r1, [pc, #172]	; (d4464 <_Z18createEventPayloadiiiiiiiddd+0x10c>)
   d43b8:	a806      	add	r0, sp, #24
   d43ba:	f7ff ff9b 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("percent_charge", percent_charge);
   d43be:	9a5c      	ldr	r2, [sp, #368]	; 0x170
   d43c0:	4929      	ldr	r1, [pc, #164]	; (d4468 <_Z18createEventPayloadiiiiiiiddd+0x110>)
   d43c2:	a806      	add	r0, sp, #24
   d43c4:	f7ff ff96 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_strength", signal_strength );
   d43c8:	9a5d      	ldr	r2, [sp, #372]	; 0x174
   d43ca:	4928      	ldr	r1, [pc, #160]	; (d446c <_Z18createEventPayloadiiiiiiiddd+0x114>)
   d43cc:	a806      	add	r0, sp, #24
   d43ce:	f7ff ff91 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("signal_quality", signal_quality);
   d43d2:	9a5e      	ldr	r2, [sp, #376]	; 0x178
   d43d4:	4926      	ldr	r1, [pc, #152]	; (d4470 <_Z18createEventPayloadiiiiiiiddd+0x118>)
   d43d6:	a806      	add	r0, sp, #24
   d43d8:	f7ff ff8c 	bl	d42f4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("longitude", longitude);
   d43dc:	ed9d 0b02 	vldr	d0, [sp, #8]
   d43e0:	4924      	ldr	r1, [pc, #144]	; (d4474 <_Z18createEventPayloadiiiiiiiddd+0x11c>)
   d43e2:	a806      	add	r0, sp, #24
   d43e4:	f7ff ffa0 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("latitude", latitude);
   d43e8:	eeb0 0a49 	vmov.f32	s0, s18
   d43ec:	eef0 0a69 	vmov.f32	s1, s19
   d43f0:	4921      	ldr	r1, [pc, #132]	; (d4478 <_Z18createEventPayloadiiiiiiiddd+0x120>)
   d43f2:	a806      	add	r0, sp, #24
   d43f4:	f7ff ff98 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("altitude", altitude);
   d43f8:	eeb0 0a48 	vmov.f32	s0, s16
   d43fc:	eef0 0a68 	vmov.f32	s1, s17
   d4400:	491e      	ldr	r1, [pc, #120]	; (d447c <_Z18createEventPayloadiiiiiiiddd+0x124>)
   d4402:	a806      	add	r0, sp, #24
   d4404:	f7ff ff90 	bl	d4328 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4408:	a806      	add	r0, sp, #24
   d440a:	f001 f913 	bl	d5634 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d440e:	4b1c      	ldr	r3, [pc, #112]	; (d4480 <_Z18createEventPayloadiiiiiiiddd+0x128>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4410:	9a07      	ldr	r2, [sp, #28]
   d4412:	781b      	ldrb	r3, [r3, #0]
   d4414:	f88d 3000 	strb.w	r3, [sp]
   d4418:	491a      	ldr	r1, [pc, #104]	; (d4484 <_Z18createEventPayloadiiiiiiiddd+0x12c>)
   d441a:	233c      	movs	r3, #60	; 0x3c
   d441c:	a804      	add	r0, sp, #16
   d441e:	f001 ff8f 	bl	d6340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4422:	9c05      	ldr	r4, [sp, #20]
   d4424:	b17c      	cbz	r4, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
      if (--_M_use_count == 0)
   d4426:	6863      	ldr	r3, [r4, #4]
   d4428:	3b01      	subs	r3, #1
   d442a:	6063      	str	r3, [r4, #4]
   d442c:	b95b      	cbnz	r3, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
          _M_dispose();
   d442e:	6823      	ldr	r3, [r4, #0]
   d4430:	4620      	mov	r0, r4
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4436:	68a3      	ldr	r3, [r4, #8]
   d4438:	3b01      	subs	r3, #1
   d443a:	60a3      	str	r3, [r4, #8]
   d443c:	b91b      	cbnz	r3, d4446 <_Z18createEventPayloadiiiiiiiddd+0xee>
            _M_destroy();
   d443e:	6823      	ldr	r3, [r4, #0]
   d4440:	4620      	mov	r0, r4
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	4798      	blx	r3
  JsonWriterStatic<256> jw;
   d4446:	a806      	add	r0, sp, #24
   d4448:	f7ff fe44 	bl	d40d4 <_ZN16JsonWriterStaticILj256EED1Ev>

  }

  Particle.publish("equipment_readings", jw.getBuffer(), PRIVATE);

}
   d444c:	b053      	add	sp, #332	; 0x14c
   d444e:	ecbd 8b04 	vpop	{d8-d9}
   d4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4454:	000d95e0 	.word	0x000d95e0
   d4458:	000d9585 	.word	0x000d9585
   d445c:	000d9528 	.word	0x000d9528
   d4460:	000d952f 	.word	0x000d952f
   d4464:	000d958c 	.word	0x000d958c
   d4468:	000d9557 	.word	0x000d9557
   d446c:	000d9538 	.word	0x000d9538
   d4470:	000d9548 	.word	0x000d9548
   d4474:	000d9566 	.word	0x000d9566
   d4478:	000d9570 	.word	0x000d9570
   d447c:	000d9579 	.word	0x000d9579
   d4480:	2003e3a8 	.word	0x2003e3a8
   d4484:	000d9594 	.word	0x000d9594

000d4488 <loop>:
void loop() {
   d4488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d448c:	ed2d 8b04 	vpush	{d8-d9}
   d4490:	b092      	sub	sp, #72	; 0x48

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4492:	f001 fa15 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
    if((currentMillis - lastCheck > delay_millis) | first_loop) //after first loop, wait delay_millis to check again
   d4496:	4b7c      	ldr	r3, [pc, #496]	; (d4688 <loop+0x200>)
   d4498:	497c      	ldr	r1, [pc, #496]	; (d468c <loop+0x204>)
   d449a:	681a      	ldr	r2, [r3, #0]
   d449c:	6809      	ldr	r1, [r1, #0]
   d449e:	4d7c      	ldr	r5, [pc, #496]	; (d4690 <loop+0x208>)
   d44a0:	4e7c      	ldr	r6, [pc, #496]	; (d4694 <loop+0x20c>)
   d44a2:	4f7d      	ldr	r7, [pc, #500]	; (d4698 <loop+0x210>)
   d44a4:	1a82      	subs	r2, r0, r2
   d44a6:	428a      	cmp	r2, r1
   d44a8:	d803      	bhi.n	d44b2 <loop+0x2a>
   d44aa:	782a      	ldrb	r2, [r5, #0]
   d44ac:	2a00      	cmp	r2, #0
   d44ae:	f000 8083 	beq.w	d45b8 <loop+0x130>
        lastCheck = currentMillis;
   d44b2:	6018      	str	r0, [r3, #0]
        temp_c = (int8_t)bme.readTemperature();
   d44b4:	4879      	ldr	r0, [pc, #484]	; (d469c <loop+0x214>)
   d44b6:	f000 fdbb 	bl	d5030 <_ZN15Adafruit_BME28015readTemperatureEv>
   d44ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d44be:	edcd 7a05 	vstr	s15, [sp, #20]
   d44c2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
   d44c6:	6030      	str	r0, [r6, #0]
        temp_f = (temp_c * 1.8) + 32;
   d44c8:	f004 fb28 	bl	d8b1c <__aeabi_i2d>
   d44cc:	a36c      	add	r3, pc, #432	; (adr r3, d4680 <loop+0x1f8>)
   d44ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44d2:	f004 fb8d 	bl	d8bf0 <__aeabi_dmul>
   d44d6:	2200      	movs	r2, #0
   d44d8:	4b71      	ldr	r3, [pc, #452]	; (d46a0 <loop+0x218>)
   d44da:	f004 f9d3 	bl	d8884 <__adddf3>
   d44de:	f004 fe21 	bl	d9124 <__aeabi_d2iz>
   d44e2:	4b70      	ldr	r3, [pc, #448]	; (d46a4 <loop+0x21c>)
   d44e4:	6018      	str	r0, [r3, #0]
        humidity = (uint8_t)bme.readHumidity();
   d44e6:	486d      	ldr	r0, [pc, #436]	; (d469c <loop+0x214>)
   d44e8:	f000 fe38 	bl	d515c <_ZN15Adafruit_BME28012readHumidityEv>
   d44ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
        voltage = (uint8_t)fuel.getVCell();
   d44f0:	486d      	ldr	r0, [pc, #436]	; (d46a8 <loop+0x220>)
        humidity = (uint8_t)bme.readHumidity();
   d44f2:	edcd 7a05 	vstr	s15, [sp, #20]
   d44f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d44fa:	603b      	str	r3, [r7, #0]
        voltage = (uint8_t)fuel.getVCell();
   d44fc:	f002 f93c 	bl	d6778 <_ZN9FuelGauge8getVCellEv>
   d4500:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4504:	4a69      	ldr	r2, [pc, #420]	; (d46ac <loop+0x224>)
   d4506:	edcd 7a05 	vstr	s15, [sp, #20]
   d450a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d450e:	6013      	str	r3, [r2, #0]
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d4510:	a907      	add	r1, sp, #28
    const diag_source* src = nullptr;
   d4512:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4514:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d4516:	9207      	str	r2, [sp, #28]
    const int ret = diag_get_source(id, &src, nullptr);
   d4518:	f001 fb62 	bl	d5be0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d451c:	2800      	cmp	r0, #0
   d451e:	f040 80aa 	bne.w	d4676 <loop+0x1ee>
        return ret;
    }
    return get(src, val);
   d4522:	9c07      	ldr	r4, [sp, #28]
    SPARK_ASSERT(src && src->callback);
   d4524:	b10c      	cbz	r4, d452a <loop+0xa2>
   d4526:	6923      	ldr	r3, [r4, #16]
   d4528:	b923      	cbnz	r3, d4534 <loop+0xac>
   d452a:	4a61      	ldr	r2, [pc, #388]	; (d46b0 <loop+0x228>)
   d452c:	2100      	movs	r1, #0
   d452e:	200a      	movs	r0, #10
   d4530:	f001 fb3e 	bl	d5bb0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4534:	2300      	movs	r3, #0
   d4536:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   d453a:	230c      	movs	r3, #12
   d453c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d4540:	ab06      	add	r3, sp, #24
   d4542:	9309      	str	r3, [sp, #36]	; 0x24
   d4544:	2304      	movs	r3, #4
   d4546:	930a      	str	r3, [sp, #40]	; 0x28
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4548:	6923      	ldr	r3, [r4, #16]
   d454a:	aa08      	add	r2, sp, #32
   d454c:	2101      	movs	r1, #1
   d454e:	4620      	mov	r0, r4
   d4550:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4552:	2800      	cmp	r0, #0
   d4554:	f040 808f 	bne.w	d4676 <loop+0x1ee>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4558:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d455c:	ee07 3a90 	vmov	s15, r3
   d4560:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        percent_charge = (uint8_t)System.batteryCharge();
   d4564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4568:	4a52      	ldr	r2, [pc, #328]	; (d46b4 <loop+0x22c>)
   d456a:	edcd 7a05 	vstr	s15, [sp, #20]
   d456e:	f89d 3014 	ldrb.w	r3, [sp, #20]
        CellularSignal sig = Cellular.RSSI();
   d4572:	4951      	ldr	r1, [pc, #324]	; (d46b8 <loop+0x230>)
        percent_charge = (uint8_t)System.batteryCharge();
   d4574:	6013      	str	r3, [r2, #0]
        CellularSignal sig = Cellular.RSSI();
   d4576:	a808      	add	r0, sp, #32
   d4578:	f001 fc9e 	bl	d5eb8 <_ZN5spark13CellularClass4RSSIEv>
        signal_strength  = (uint8_t)sig.getStrength();
   d457c:	a808      	add	r0, sp, #32
   d457e:	f001 fd09 	bl	d5f94 <_ZNK14CellularSignal11getStrengthEv>
   d4582:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4586:	4a4d      	ldr	r2, [pc, #308]	; (d46bc <loop+0x234>)
   d4588:	edcd 7a05 	vstr	s15, [sp, #20]
   d458c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4590:	6013      	str	r3, [r2, #0]
        signal_quality = (uint8_t)sig.getQuality();
   d4592:	a808      	add	r0, sp, #32
   d4594:	f001 fd2e 	bl	d5ff4 <_ZNK14CellularSignal10getQualityEv>
   d4598:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d459c:	4a48      	ldr	r2, [pc, #288]	; (d46c0 <loop+0x238>)
   d459e:	edcd 7a05 	vstr	s15, [sp, #20]
   d45a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d45a6:	6013      	str	r3, [r2, #0]
        getGPS();
   d45a8:	f7ff fe32 	bl	d4210 <_Z6getGPSv>
        first_loop = false;
   d45ac:	2300      	movs	r3, #0
        delay(5000);
   d45ae:	f241 3088 	movw	r0, #5000	; 0x1388
        first_loop = false;
   d45b2:	702b      	strb	r3, [r5, #0]
        delay(5000);
   d45b4:	f001 fc0a 	bl	d5dcc <delay>
    if((last_temp_c != temp_c) | (last_humidity != humidity) | (last_latitude != latitude) | (last_longitude != longitude))
   d45b8:	4b42      	ldr	r3, [pc, #264]	; (d46c4 <loop+0x23c>)
   d45ba:	f8df 8120 	ldr.w	r8, [pc, #288]	; d46dc <loop+0x254>
   d45be:	681c      	ldr	r4, [r3, #0]
   d45c0:	4b41      	ldr	r3, [pc, #260]	; (d46c8 <loop+0x240>)
   d45c2:	f8d6 9000 	ldr.w	r9, [r6]
   d45c6:	6818      	ldr	r0, [r3, #0]
   d45c8:	f8d7 a000 	ldr.w	sl, [r7]
   d45cc:	4b3f      	ldr	r3, [pc, #252]	; (d46cc <loop+0x244>)
   d45ce:	4d40      	ldr	r5, [pc, #256]	; (d46d0 <loop+0x248>)
   d45d0:	ed98 9b00 	vldr	d9, [r8]
   d45d4:	4550      	cmp	r0, sl
   d45d6:	bf08      	it	eq
   d45d8:	454c      	cmpeq	r4, r9
   d45da:	6818      	ldr	r0, [r3, #0]
   d45dc:	bf14      	ite	ne
   d45de:	2401      	movne	r4, #1
   d45e0:	2400      	moveq	r4, #0
   d45e2:	f004 fa9b 	bl	d8b1c <__aeabi_i2d>
   d45e6:	ec53 2b19 	vmov	r2, r3, d9
   d45ea:	f004 fd69 	bl	d90c0 <__aeabi_dcmpeq>
   d45ee:	2800      	cmp	r0, #0
   d45f0:	bf14      	ite	ne
   d45f2:	4620      	movne	r0, r4
   d45f4:	2001      	moveq	r0, #1
   d45f6:	ed95 8b00 	vldr	d8, [r5]
   d45fa:	b948      	cbnz	r0, d4610 <loop+0x188>
   d45fc:	4b35      	ldr	r3, [pc, #212]	; (d46d4 <loop+0x24c>)
   d45fe:	6818      	ldr	r0, [r3, #0]
   d4600:	f004 fa8c 	bl	d8b1c <__aeabi_i2d>
   d4604:	ec53 2b18 	vmov	r2, r3, d8
   d4608:	f004 fd5a 	bl	d90c0 <__aeabi_dcmpeq>
   d460c:	2800      	cmp	r0, #0
   d460e:	d12d      	bne.n	d466c <loop+0x1e4>
        createEventPayload(temp_c, temp_f, humidity, voltage, percent_charge, signal_strength , signal_quality, longitude, latitude, altitude);
   d4610:	eeb0 1a49 	vmov.f32	s2, s18
   d4614:	eef0 1a69 	vmov.f32	s3, s19
   d4618:	eeb0 0a48 	vmov.f32	s0, s16
   d461c:	eef0 0a68 	vmov.f32	s1, s17
   d4620:	4b27      	ldr	r3, [pc, #156]	; (d46c0 <loop+0x238>)
   d4622:	4920      	ldr	r1, [pc, #128]	; (d46a4 <loop+0x21c>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	9302      	str	r3, [sp, #8]
   d4628:	4b24      	ldr	r3, [pc, #144]	; (d46bc <loop+0x234>)
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	4b21      	ldr	r3, [pc, #132]	; (d46b4 <loop+0x22c>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	9300      	str	r3, [sp, #0]
   d4634:	4b28      	ldr	r3, [pc, #160]	; (d46d8 <loop+0x250>)
   d4636:	6809      	ldr	r1, [r1, #0]
   d4638:	ed93 2b00 	vldr	d2, [r3]
   d463c:	4b1b      	ldr	r3, [pc, #108]	; (d46ac <loop+0x224>)
   d463e:	4652      	mov	r2, sl
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	4648      	mov	r0, r9
   d4644:	f7ff fe88 	bl	d4358 <_Z18createEventPayloadiiiiiiiddd>
        last_temp_c = temp_c;
   d4648:	4b1e      	ldr	r3, [pc, #120]	; (d46c4 <loop+0x23c>)
   d464a:	6832      	ldr	r2, [r6, #0]
   d464c:	601a      	str	r2, [r3, #0]
        last_humidity = humidity;
   d464e:	4b1e      	ldr	r3, [pc, #120]	; (d46c8 <loop+0x240>)
   d4650:	683a      	ldr	r2, [r7, #0]
   d4652:	601a      	str	r2, [r3, #0]
        last_latitude = latitude;
   d4654:	e9d8 0100 	ldrd	r0, r1, [r8]
   d4658:	f004 fd64 	bl	d9124 <__aeabi_d2iz>
   d465c:	4b1b      	ldr	r3, [pc, #108]	; (d46cc <loop+0x244>)
   d465e:	6018      	str	r0, [r3, #0]
        last_longitude = longitude;
   d4660:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4664:	f004 fd5e 	bl	d9124 <__aeabi_d2iz>
   d4668:	4b1a      	ldr	r3, [pc, #104]	; (d46d4 <loop+0x24c>)
   d466a:	6018      	str	r0, [r3, #0]
}
   d466c:	b012      	add	sp, #72	; 0x48
   d466e:	ecbd 8b04 	vpop	{d8-d9}
   d4672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return -1.0f;
   d4676:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d467a:	e773      	b.n	d4564 <loop+0xdc>
   d467c:	f3af 8000 	nop.w
   d4680:	cccccccd 	.word	0xcccccccd
   d4684:	3ffccccc 	.word	0x3ffccccc
   d4688:	2003e4e0 	.word	0x2003e4e0
   d468c:	2003e318 	.word	0x2003e318
   d4690:	2003e31c 	.word	0x2003e31c
   d4694:	2003e52c 	.word	0x2003e52c
   d4698:	2003e4dc 	.word	0x2003e4dc
   d469c:	2003e3b8 	.word	0x2003e3b8
   d46a0:	40400000 	.word	0x40400000
   d46a4:	2003e530 	.word	0x2003e530
   d46a8:	2003e3fc 	.word	0x2003e3fc
   d46ac:	2003e534 	.word	0x2003e534
   d46b0:	000d58b1 	.word	0x000d58b1
   d46b4:	2003e520 	.word	0x2003e520
   d46b8:	2003e548 	.word	0x2003e548
   d46bc:	2003e528 	.word	0x2003e528
   d46c0:	2003e524 	.word	0x2003e524
   d46c4:	2003e32c 	.word	0x2003e32c
   d46c8:	2003e320 	.word	0x2003e320
   d46cc:	2003e324 	.word	0x2003e324
   d46d0:	2003e518 	.word	0x2003e518
   d46d4:	2003e328 	.word	0x2003e328
   d46d8:	2003e3b0 	.word	0x2003e3b0
   d46dc:	2003e4e8 	.word	0x2003e4e8

000d46e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d46e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d46e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46e4:	4604      	mov	r4, r0
   d46e6:	460d      	mov	r5, r1
   d46e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d46ea:	d916      	bls.n	d471a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46ec:	4290      	cmp	r0, r2
   d46ee:	d215      	bcs.n	d471c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d46f0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d46f4:	1a75      	subs	r5, r6, r1
   d46f6:	f1a1 0714 	sub.w	r7, r1, #20
   d46fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d46fc:	42b7      	cmp	r7, r6
   d46fe:	d01c      	beq.n	d473a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4700:	b12c      	cbz	r4, d470e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4702:	4631      	mov	r1, r6
   d4704:	4620      	mov	r0, r4
   d4706:	f003 fda9 	bl	d825c <_ZN6StringC1EOS_>
   d470a:	7c33      	ldrb	r3, [r6, #16]
   d470c:	7423      	strb	r3, [r4, #16]
   d470e:	4630      	mov	r0, r6
   d4710:	f003 fd28 	bl	d8164 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4714:	3e14      	subs	r6, #20
   d4716:	3c14      	subs	r4, #20
   d4718:	e7f0      	b.n	d46fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d471a:	d00e      	beq.n	d473a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d471c:	42b5      	cmp	r5, r6
   d471e:	d00c      	beq.n	d473a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4720:	b12c      	cbz	r4, d472e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4722:	4629      	mov	r1, r5
   d4724:	4620      	mov	r0, r4
   d4726:	f003 fd99 	bl	d825c <_ZN6StringC1EOS_>
   d472a:	7c2b      	ldrb	r3, [r5, #16]
   d472c:	7423      	strb	r3, [r4, #16]
   d472e:	4628      	mov	r0, r5
   d4730:	f003 fd18 	bl	d8164 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4734:	3514      	adds	r5, #20
   d4736:	3414      	adds	r4, #20
   d4738:	e7f0      	b.n	d471c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4740:	2300      	movs	r3, #0
   d4742:	e9c0 3300 	strd	r3, r3, [r0]
   d4746:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4748:	684f      	ldr	r7, [r1, #4]
   d474a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d474c:	4604      	mov	r4, r0
   d474e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4750:	dd23      	ble.n	d479a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4752:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4756:	fb08 f007 	mul.w	r0, r8, r7
   d475a:	f001 faff 	bl	d5d5c <malloc>
            if (!d) {
   d475e:	4605      	mov	r5, r0
   d4760:	b1d8      	cbz	r0, d479a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4762:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4766:	fb08 1202 	mla	r2, r8, r2, r1
   d476a:	f7ff ffb9 	bl	d46e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d476e:	6820      	ldr	r0, [r4, #0]
   d4770:	f001 fafc 	bl	d5d6c <free>
        data_ = d;
   d4774:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4776:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4778:	e9d6 7300 	ldrd	r7, r3, [r6]
   d477c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4780:	45b8      	cmp	r8, r7
   d4782:	d008      	beq.n	d4796 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4784:	4639      	mov	r1, r7
   d4786:	4628      	mov	r0, r5
   d4788:	f003 fd82 	bl	d8290 <_ZN6StringC1ERKS_>
   d478c:	7c3b      	ldrb	r3, [r7, #16]
   d478e:	742b      	strb	r3, [r5, #16]
   d4790:	3714      	adds	r7, #20
   d4792:	3514      	adds	r5, #20
   d4794:	e7f4      	b.n	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4796:	6873      	ldr	r3, [r6, #4]
   d4798:	6063      	str	r3, [r4, #4]
}
   d479a:	4620      	mov	r0, r4
   d479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47a0 <_GLOBAL__sub_I_logHandler>:
}
   d47a0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d47a2:	4b24      	ldr	r3, [pc, #144]	; (d4834 <_GLOBAL__sub_I_logHandler+0x94>)
        filter_(level, filters) {
   d47a4:	4c24      	ldr	r4, [pc, #144]	; (d4838 <_GLOBAL__sub_I_logHandler+0x98>)
   d47a6:	b08d      	sub	sp, #52	; 0x34
   d47a8:	2201      	movs	r2, #1
   d47aa:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   d47ac:	2500      	movs	r5, #0
   d47ae:	e9cd 5500 	strd	r5, r5, [sp]
   d47b2:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d47b4:	f003 fe9e 	bl	d84f4 <_Z16_fetch_usbserialv>
   d47b8:	4669      	mov	r1, sp
   d47ba:	4606      	mov	r6, r0
   d47bc:	a803      	add	r0, sp, #12
   d47be:	f7ff ffbd 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47c2:	4627      	mov	r7, r4
        stream_(&stream) {
   d47c4:	a903      	add	r1, sp, #12
   d47c6:	a806      	add	r0, sp, #24
   d47c8:	f7ff ffb8 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d47cc:	4b1b      	ldr	r3, [pc, #108]	; (d483c <_GLOBAL__sub_I_logHandler+0x9c>)
   d47ce:	f847 3b04 	str.w	r3, [r7], #4
   d47d2:	a906      	add	r1, sp, #24
   d47d4:	a809      	add	r0, sp, #36	; 0x24
   d47d6:	f7ff ffb1 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47da:	aa09      	add	r2, sp, #36	; 0x24
   d47dc:	211e      	movs	r1, #30
   d47de:	4638      	mov	r0, r7
   d47e0:	f002 ff7f 	bl	d76e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47e4:	a809      	add	r0, sp, #36	; 0x24
   d47e6:	f7ff fd71 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d47ea:	a806      	add	r0, sp, #24
   d47ec:	f7ff fd6e 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47f0:	4b13      	ldr	r3, [pc, #76]	; (d4840 <_GLOBAL__sub_I_logHandler+0xa0>)
   d47f2:	6023      	str	r3, [r4, #0]
   d47f4:	a803      	add	r0, sp, #12
   d47f6:	6226      	str	r6, [r4, #32]
   d47f8:	f7ff fd68 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47fc:	4b11      	ldr	r3, [pc, #68]	; (d4844 <_GLOBAL__sub_I_logHandler+0xa4>)
   d47fe:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4800:	f003 fe78 	bl	d84f4 <_Z16_fetch_usbserialv>
   d4804:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4808:	f003 fe64 	bl	d84d4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d480c:	f002 fc0e 	bl	d702c <_ZN5spark10LogManager8instanceEv>
   d4810:	4621      	mov	r1, r4
   d4812:	f002 fef8 	bl	d7606 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4816:	4668      	mov	r0, sp
   d4818:	f7ff fd58 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
TinyGPSPlus gps;
   d481c:	480a      	ldr	r0, [pc, #40]	; (d4848 <_GLOBAL__sub_I_logHandler+0xa8>)
   d481e:	f000 f819 	bl	d4854 <_ZN11TinyGPSPlusC1Ev>
Adafruit_BME280 bme;
   d4822:	480a      	ldr	r0, [pc, #40]	; (d484c <_GLOBAL__sub_I_logHandler+0xac>)
   d4824:	f000 fb32 	bl	d4e8c <_ZN15Adafruit_BME280C1Ev>
FuelGauge fuel;
   d4828:	4629      	mov	r1, r5
   d482a:	4809      	ldr	r0, [pc, #36]	; (d4850 <_GLOBAL__sub_I_logHandler+0xb0>)
   d482c:	f001 ff56 	bl	d66dc <_ZN9FuelGaugeC1Eb>
}
   d4830:	b00d      	add	sp, #52	; 0x34
   d4832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4834:	2003e3a8 	.word	0x2003e3a8
   d4838:	2003e4f0 	.word	0x2003e4f0
   d483c:	000d95b0 	.word	0x000d95b0
   d4840:	000d9834 	.word	0x000d9834
   d4844:	000d95c8 	.word	0x000d95c8
   d4848:	2003e404 	.word	0x2003e404
   d484c:	2003e3b8 	.word	0x2003e3b8
   d4850:	2003e3fc 	.word	0x2003e3fc

000d4854 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
   d4854:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d4856:	2102      	movs	r1, #2
   d4858:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d485c:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d485e:	8082      	strh	r2, [r0, #4]
   d4860:	6082      	str	r2, [r0, #8]
   d4862:	7302      	strb	r2, [r0, #12]
   d4864:	8202      	strh	r2, [r0, #16]
   d4866:	6142      	str	r2, [r0, #20]
   d4868:	7602      	strb	r2, [r0, #24]
   d486a:	8382      	strh	r2, [r0, #28]
   d486c:	6202      	str	r2, [r0, #32]
   d486e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d4872:	8502      	strh	r2, [r0, #40]	; 0x28
   d4874:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4876:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   d487a:	8702      	strh	r2, [r0, #56]	; 0x38
   d487c:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   d487e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d4882:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d4884:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d4888:	6602      	str	r2, [r0, #96]	; 0x60
   d488a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d488e:	6702      	str	r2, [r0, #112]	; 0x70
   d4890:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d4894:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   d4898:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d489c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d48a0:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d48a4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d48a8:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d48ac:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d48b0:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d48b4:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d48b8:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d48bc:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d48c0:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d48c4:	4770      	bx	lr

000d48c6 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d48c6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d48ca:	2b05      	cmp	r3, #5
   d48cc:	d802      	bhi.n	d48d4 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d48ce:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d48d2:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d48d4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d48d8:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d48da:	bf94      	ite	ls
   d48dc:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d48e0:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d48e4:	4770      	bx	lr

000d48e6 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d48e6:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d48e8:	7805      	ldrb	r5, [r0, #0]
{
   d48ea:	4604      	mov	r4, r0
  if (negative) ++term;
   d48ec:	2d2d      	cmp	r5, #45	; 0x2d
   d48ee:	bf08      	it	eq
   d48f0:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d48f2:	4620      	mov	r0, r4
   d48f4:	f004 fc44 	bl	d9180 <atol>
   d48f8:	2364      	movs	r3, #100	; 0x64
   d48fa:	4358      	muls	r0, r3
   d48fc:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d48fe:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4902:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d4906:	2909      	cmp	r1, #9
   d4908:	d9f8      	bls.n	d48fc <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d490a:	2b2e      	cmp	r3, #46	; 0x2e
   d490c:	d10b      	bne.n	d4926 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d490e:	7853      	ldrb	r3, [r2, #1]
   d4910:	3b30      	subs	r3, #48	; 0x30
   d4912:	2b09      	cmp	r3, #9
   d4914:	d807      	bhi.n	d4926 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d4916:	210a      	movs	r1, #10
   d4918:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d491c:	7893      	ldrb	r3, [r2, #2]
   d491e:	3b30      	subs	r3, #48	; 0x30
   d4920:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d4922:	bf98      	it	ls
   d4924:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d4926:	2d2d      	cmp	r5, #45	; 0x2d
   d4928:	bf08      	it	eq
   d492a:	4240      	negeq	r0, r0
}
   d492c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4930 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d4930:	b538      	push	{r3, r4, r5, lr}
   d4932:	460d      	mov	r5, r1
   d4934:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d4936:	f004 fc23 	bl	d9180 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d493a:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d493c:	4b13      	ldr	r3, [pc, #76]	; (d498c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d493e:	fbb0 f1f2 	udiv	r1, r0, r2
   d4942:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4946:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d4948:	8029      	strh	r1, [r5, #0]
   d494a:	4620      	mov	r0, r4

  while (isdigit(*term))
   d494c:	7802      	ldrb	r2, [r0, #0]
   d494e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d4952:	2c09      	cmp	r4, #9
   d4954:	4601      	mov	r1, r0
   d4956:	f100 0001 	add.w	r0, r0, #1
   d495a:	d9f7      	bls.n	d494c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d495c:	2a2e      	cmp	r2, #46	; 0x2e
   d495e:	d10b      	bne.n	d4978 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d4960:	480a      	ldr	r0, [pc, #40]	; (d498c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d4962:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d4964:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d4968:	3a30      	subs	r2, #48	; 0x30
   d496a:	2a09      	cmp	r2, #9
   d496c:	d804      	bhi.n	d4978 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d496e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d4972:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d4976:	e7f5      	b.n	d4964 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d497c:	3301      	adds	r3, #1
   d497e:	2203      	movs	r2, #3
   d4980:	fbb3 f3f2 	udiv	r3, r3, r2
   d4984:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d4986:	2300      	movs	r3, #0
   d4988:	722b      	strb	r3, [r5, #8]
}
   d498a:	bd38      	pop	{r3, r4, r5, pc}
   d498c:	00989680 	.word	0x00989680

000d4990 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4990:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d4992:	4603      	mov	r3, r0
{
   d4994:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d4996:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d499a:	6042      	str	r2, [r0, #4]
   d499c:	685a      	ldr	r2, [r3, #4]
   d499e:	6082      	str	r2, [r0, #8]
   d49a0:	7a1b      	ldrb	r3, [r3, #8]
   d49a2:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d49a4:	4603      	mov	r3, r0
   d49a6:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d49aa:	6102      	str	r2, [r0, #16]
   d49ac:	685a      	ldr	r2, [r3, #4]
   d49ae:	6142      	str	r2, [r0, #20]
   d49b0:	7a1b      	ldrb	r3, [r3, #8]
   d49b2:	7603      	strb	r3, [r0, #24]
   d49b4:	f000 ff84 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d49b8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d49bc:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d49be:	8023      	strh	r3, [r4, #0]
}
   d49c0:	bd10      	pop	{r4, pc}
   d49c2:	0000      	movs	r0, r0
   d49c4:	0000      	movs	r0, r0
	...

000d49c8 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d49c8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d49ca:	2300      	movs	r3, #0
{
   d49cc:	4604      	mov	r4, r0
   updated = false;
   d49ce:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d49d0:	6880      	ldr	r0, [r0, #8]
   d49d2:	f004 f893 	bl	d8afc <__aeabi_ui2d>
   d49d6:	a30c      	add	r3, pc, #48	; (adr r3, d4a08 <_ZN15TinyGPSLocation3latEv+0x40>)
   d49d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49dc:	f004 fa32 	bl	d8e44 <__aeabi_ddiv>
   d49e0:	4606      	mov	r6, r0
   d49e2:	88a0      	ldrh	r0, [r4, #4]
   d49e4:	460f      	mov	r7, r1
   d49e6:	f004 f899 	bl	d8b1c <__aeabi_i2d>
   d49ea:	460b      	mov	r3, r1
   d49ec:	4602      	mov	r2, r0
   d49ee:	4639      	mov	r1, r7
   d49f0:	4630      	mov	r0, r6
   d49f2:	f003 ff47 	bl	d8884 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d49f6:	7b23      	ldrb	r3, [r4, #12]
   d49f8:	b113      	cbz	r3, d4a00 <_ZN15TinyGPSLocation3latEv+0x38>
   d49fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d49fe:	4619      	mov	r1, r3
}
   d4a00:	ec41 0b10 	vmov	d0, r0, r1
   d4a04:	bdd0      	pop	{r4, r6, r7, pc}
   d4a06:	bf00      	nop
   d4a08:	00000000 	.word	0x00000000
   d4a0c:	41cdcd65 	.word	0x41cdcd65

000d4a10 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d4a10:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4a12:	2300      	movs	r3, #0
{
   d4a14:	4604      	mov	r4, r0
   updated = false;
   d4a16:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d4a18:	6940      	ldr	r0, [r0, #20]
   d4a1a:	f004 f86f 	bl	d8afc <__aeabi_ui2d>
   d4a1e:	a30c      	add	r3, pc, #48	; (adr r3, d4a50 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d4a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a24:	f004 fa0e 	bl	d8e44 <__aeabi_ddiv>
   d4a28:	4606      	mov	r6, r0
   d4a2a:	8a20      	ldrh	r0, [r4, #16]
   d4a2c:	460f      	mov	r7, r1
   d4a2e:	f004 f875 	bl	d8b1c <__aeabi_i2d>
   d4a32:	460b      	mov	r3, r1
   d4a34:	4602      	mov	r2, r0
   d4a36:	4639      	mov	r1, r7
   d4a38:	4630      	mov	r0, r6
   d4a3a:	f003 ff23 	bl	d8884 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d4a3e:	7e23      	ldrb	r3, [r4, #24]
   d4a40:	b113      	cbz	r3, d4a48 <_ZN15TinyGPSLocation3lngEv+0x38>
   d4a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4a46:	4619      	mov	r1, r3
}
   d4a48:	ec41 0b10 	vmov	d0, r0, r1
   d4a4c:	bdd0      	pop	{r4, r6, r7, pc}
   d4a4e:	bf00      	nop
   d4a50:	00000000 	.word	0x00000000
   d4a54:	41cdcd65 	.word	0x41cdcd65

000d4a58 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d4a58:	b510      	push	{r4, lr}
   date = newDate;
   d4a5a:	6883      	ldr	r3, [r0, #8]
   d4a5c:	6043      	str	r3, [r0, #4]
{
   d4a5e:	4604      	mov	r4, r0
   d4a60:	f000 ff2e 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4a64:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4a68:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4a6a:	8023      	strh	r3, [r4, #0]
}
   d4a6c:	bd10      	pop	{r4, pc}

000d4a6e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d4a6e:	b510      	push	{r4, lr}
   time = newTime;
   d4a70:	6883      	ldr	r3, [r0, #8]
   d4a72:	6043      	str	r3, [r0, #4]
{
   d4a74:	4604      	mov	r4, r0
   d4a76:	f000 ff23 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4a7a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4a7e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4a80:	8023      	strh	r3, [r4, #0]
}
   d4a82:	bd10      	pop	{r4, pc}

000d4a84 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d4a84:	b510      	push	{r4, lr}
   d4a86:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4a88:	4608      	mov	r0, r1
   d4a8a:	f7ff ff2c 	bl	d48e6 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4a8e:	60a0      	str	r0, [r4, #8]
}
   d4a90:	bd10      	pop	{r4, pc}

000d4a92 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d4a92:	b510      	push	{r4, lr}
   d4a94:	4604      	mov	r4, r0
   newDate = atol(term);
   d4a96:	4608      	mov	r0, r1
   d4a98:	f004 fb72 	bl	d9180 <atol>
   d4a9c:	60a0      	str	r0, [r4, #8]
}
   d4a9e:	bd10      	pop	{r4, pc}

000d4aa0 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4aa0:	b510      	push	{r4, lr}
   val = newval;
   d4aa2:	68c3      	ldr	r3, [r0, #12]
   d4aa4:	6083      	str	r3, [r0, #8]
{
   d4aa6:	4604      	mov	r4, r0
   d4aa8:	f000 ff0a 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4aac:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4ab0:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4ab2:	8023      	strh	r3, [r4, #0]
}
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d4ab6:	b510      	push	{r4, lr}
   d4ab8:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d4aba:	4608      	mov	r0, r1
   d4abc:	f7ff ff13 	bl	d48e6 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4ac0:	60e0      	str	r0, [r4, #12]
}
   d4ac2:	bd10      	pop	{r4, pc}

000d4ac4 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d4ac4:	b510      	push	{r4, lr}
   val = newval;
   d4ac6:	68c3      	ldr	r3, [r0, #12]
   d4ac8:	6083      	str	r3, [r0, #8]
{
   d4aca:	4604      	mov	r4, r0
   d4acc:	f000 fef8 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4ad0:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4ad4:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d4ad6:	8023      	strh	r3, [r4, #0]
}
   d4ad8:	bd10      	pop	{r4, pc}

000d4ada <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d4ada:	b510      	push	{r4, lr}
   d4adc:	4604      	mov	r4, r0
   newval = atol(term);
   d4ade:	4608      	mov	r0, r1
   d4ae0:	f004 fb4e 	bl	d9180 <atol>
   d4ae4:	60e0      	str	r0, [r4, #12]
}
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d4ae8:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d4aea:	4601      	mov	r1, r0
{
   d4aec:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d4aee:	3010      	adds	r0, #16
   d4af0:	f004 fbbf 	bl	d9272 <strcpy>
   d4af4:	f000 fee4 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4af8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d4afc:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d4afe:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4b02:	2210      	movs	r2, #16
   d4b04:	f004 bbf5 	b.w	d92f2 <strncpy>

000d4b08 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d4b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d4b0a:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d4b0e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d4b10:	2d00      	cmp	r5, #0
   d4b12:	d064      	beq.n	d4bde <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4b14:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d4b18:	f7ff fed5 	bl	d48c6 <_ZN11TinyGPSPlus7fromHexEc>
   d4b1c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4b20:	4602      	mov	r2, r0
   d4b22:	4620      	mov	r0, r4
   d4b24:	f7ff fecf 	bl	d48c6 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d4b28:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4b2c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d4b30:	b2c0      	uxtb	r0, r0
   d4b32:	4283      	cmp	r3, r0
   d4b34:	d14b      	bne.n	d4bce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d4b36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d4b3a:	3301      	adds	r3, #1
   d4b3c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d4b40:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4b44:	b123      	cbz	r3, d4b50 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d4b46:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d4b4a:	3301      	adds	r3, #1
   d4b4c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d4b50:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d4b54:	b333      	cbz	r3, d4ba4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d4b56:	2b01      	cmp	r3, #1
   d4b58:	d115      	bne.n	d4b86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d4b5a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4b5e:	f7ff ff7b 	bl	d4a58 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d4b62:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4b66:	f7ff ff82 	bl	d4a6e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4b6a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4b6e:	b153      	cbz	r3, d4b86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d4b70:	4620      	mov	r0, r4
   d4b72:	f7ff ff0d 	bl	d4990 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d4b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b7a:	f7ff ff91 	bl	d4aa0 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d4b7e:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d4b82:	f7ff ff8d 	bl	d4aa0 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4b86:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4b8a:	b336      	cbz	r6, d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4b8c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4b90:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4b92:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4b94:	f004 fb63 	bl	d925e <strcmp>
   d4b98:	b9f8      	cbnz	r0, d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	f7ff ffa4 	bl	d4ae8 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d4ba0:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4ba2:	e7f2      	b.n	d4b8a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d4ba4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4ba8:	f7ff ff61 	bl	d4a6e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4bac:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4bb0:	b133      	cbz	r3, d4bc0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	f7ff feec 	bl	d4990 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d4bb8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4bbc:	f7ff ff70 	bl	d4aa0 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d4bc0:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4bc4:	f7ff ff7e 	bl	d4ac4 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d4bc8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4bcc:	e7d9      	b.n	d4b82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d4bce:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d4bd2:	3301      	adds	r3, #1
   d4bd4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d4bd8:	2500      	movs	r5, #0
}
   d4bda:	4628      	mov	r0, r5
   d4bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d4bde:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d4be2:	bb6a      	cbnz	r2, d4c40 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x138>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   d4be4:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
   d4be8:	495a      	ldr	r1, [pc, #360]	; (d4d54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>)
   d4bea:	4630      	mov	r0, r6
   d4bec:	f004 fb37 	bl	d925e <strcmp>
   d4bf0:	b120      	cbz	r0, d4bfc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
   d4bf2:	4959      	ldr	r1, [pc, #356]	; (d4d58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x250>)
   d4bf4:	4630      	mov	r0, r6
   d4bf6:	f004 fb32 	bl	d925e <strcmp>
   d4bfa:	b998      	cbnz	r0, d4c24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11c>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d4bfc:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d4bfe:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4c02:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d4c06:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4c0a:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
   d4c0e:	2f00      	cmp	r7, #0
   d4c10:	d0e3      	beq.n	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d4c14:	4631      	mov	r1, r6
   d4c16:	f004 fb22 	bl	d925e <strcmp>
   d4c1a:	2800      	cmp	r0, #0
   d4c1c:	f280 8094 	bge.w	d4d48 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   d4c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d4c22:	e7f0      	b.n	d4c06 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xfe>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   d4c24:	494d      	ldr	r1, [pc, #308]	; (d4d5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>)
   d4c26:	4630      	mov	r0, r6
   d4c28:	f004 fb19 	bl	d925e <strcmp>
   d4c2c:	b120      	cbz	r0, d4c38 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x130>
   d4c2e:	494c      	ldr	r1, [pc, #304]	; (d4d60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x258>)
   d4c30:	4630      	mov	r0, r6
   d4c32:	f004 fb14 	bl	d925e <strcmp>
   d4c36:	b908      	cbnz	r0, d4c3c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x134>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d4c38:	2300      	movs	r3, #0
   d4c3a:	e7e0      	b.n	d4bfe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
      curSentenceType = GPS_SENTENCE_OTHER;
   d4c3c:	2302      	movs	r3, #2
   d4c3e:	e7de      	b.n	d4bfe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d4c40:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d4c44:	2902      	cmp	r1, #2
   d4c46:	d023      	beq.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4c48:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d4c4c:	b303      	cbz	r3, d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    switch(COMBINE(curSentenceType, curTermNumber))
   d4c4e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d4c52:	3a01      	subs	r2, #1
   d4c54:	2a28      	cmp	r2, #40	; 0x28
   d4c56:	d81b      	bhi.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   d4c58:	e8df f002 	tbb	[pc, r2]
   d4c5c:	49423b15 	.word	0x49423b15
   d4c60:	6e68634c 	.word	0x6e68634c
   d4c64:	1a1a1a72 	.word	0x1a1a1a72
   d4c68:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c6c:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c70:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c74:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c78:	1a1a1a1a 	.word	0x1a1a1a1a
   d4c7c:	423b3415 	.word	0x423b3415
   d4c80:	59534c49 	.word	0x59534c49
   d4c84:	5d          	.byte	0x5d
   d4c85:	00          	.byte	0x00
      time.setTime(term);
   d4c86:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4c8a:	3048      	adds	r0, #72	; 0x48
   d4c8c:	f7ff fefa 	bl	d4a84 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4c90:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d4c94:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4c98:	2e00      	cmp	r6, #0
   d4c9a:	d09e      	beq.n	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4c9c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d4ca0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4ca2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4ca4:	f004 fadb 	bl	d925e <strcmp>
   d4ca8:	2800      	cmp	r0, #0
   d4caa:	d196      	bne.n	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4cac:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d4cae:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4cb2:	429a      	cmp	r2, r3
   d4cb4:	dc91      	bgt.n	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d4cb6:	d103      	bne.n	d4cc0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b8>
         p->set(term);
   d4cb8:	4639      	mov	r1, r7
   d4cba:	4630      	mov	r0, r6
   d4cbc:	f7ff ff21 	bl	d4b02 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4cc0:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4cc2:	e7e9      	b.n	d4c98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x190>
      sentenceHasFix = term[0] == 'A';
   d4cc4:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4cc8:	4243      	negs	r3, r0
   d4cca:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d4ccc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d4cd0:	e7de      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4cd2:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4cd6:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d4cda:	f7ff fe29 	bl	d4930 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d4cde:	e7d7      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      location.rawNewLatData.negative = term[0] == 'S';
   d4ce0:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4ce4:	424b      	negs	r3, r1
   d4ce6:	414b      	adcs	r3, r1
   d4ce8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d4cec:	e7d0      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4cee:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d4cf2:	e7f0      	b.n	d4cd6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      location.rawNewLngData.negative = term[0] == 'W';
   d4cf4:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4cf8:	4253      	negs	r3, r2
   d4cfa:	4153      	adcs	r3, r2
   d4cfc:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d4d00:	e7c6      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      speed.set(term);
   d4d02:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d06:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d4d08:	f7ff fed5 	bl	d4ab6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d4d0c:	e7c0      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      course.set(term);
   d4d0e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d12:	3068      	adds	r0, #104	; 0x68
   d4d14:	e7f8      	b.n	d4d08 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      date.setDate(term);
   d4d16:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d1a:	3038      	adds	r0, #56	; 0x38
   d4d1c:	f7ff feb9 	bl	d4a92 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4d20:	e7b6      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      sentenceHasFix = term[0] > '0';
   d4d22:	2b30      	cmp	r3, #48	; 0x30
   d4d24:	bf94      	ite	ls
   d4d26:	2300      	movls	r3, #0
   d4d28:	2301      	movhi	r3, #1
   d4d2a:	e7cf      	b.n	d4ccc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c4>
      satellites.set(term);
   d4d2c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d30:	3088      	adds	r0, #136	; 0x88
   d4d32:	f7ff fed2 	bl	d4ada <_ZN14TinyGPSInteger3setEPKc>
      break;
   d4d36:	e7ab      	b.n	d4c90 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
      hdop.set(term);
   d4d38:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d3c:	3098      	adds	r0, #152	; 0x98
   d4d3e:	e7e3      	b.n	d4d08 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      altitude.set(term);
   d4d40:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4d44:	3078      	adds	r0, #120	; 0x78
   d4d46:	e7df      	b.n	d4d08 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d4d48:	f43f af47 	beq.w	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d4d4c:	2300      	movs	r3, #0
   d4d4e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d4d52:	e742      	b.n	d4bda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d4d54:	000d95e8 	.word	0x000d95e8
   d4d58:	000d95ee 	.word	0x000d95ee
   d4d5c:	000d95f4 	.word	0x000d95f4
   d4d60:	000d95fa 	.word	0x000d95fa

000d4d64 <_ZN11TinyGPSPlus6encodeEc>:
{
   d4d64:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d4d66:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4d6a:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d4d6c:	f103 0301 	add.w	r3, r3, #1
{
   d4d70:	4604      	mov	r4, r0
   d4d72:	460d      	mov	r5, r1
  ++encodedCharCount;
   d4d74:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d4d78:	d03a      	beq.n	d4df0 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d4d7a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d4d7e:	d814      	bhi.n	d4daa <_ZN11TinyGPSPlus6encodeEc+0x46>
   d4d80:	290a      	cmp	r1, #10
   d4d82:	d01c      	beq.n	d4dbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4d84:	290d      	cmp	r1, #13
   d4d86:	d01a      	beq.n	d4dbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d4d88:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d4d8a:	bf9f      	itttt	ls
   d4d8c:	1c5a      	addls	r2, r3, #1
   d4d8e:	191b      	addls	r3, r3, r4
   d4d90:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d4d94:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d4d98:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d4d9c:	bb98      	cbnz	r0, d4e06 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d4d9e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d4da2:	404d      	eors	r5, r1
   d4da4:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d4da8:	e021      	b.n	d4dee <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d4daa:	292a      	cmp	r1, #42	; 0x2a
   d4dac:	d007      	beq.n	d4dbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d4dae:	292c      	cmp	r1, #44	; 0x2c
   d4db0:	d1ea      	bne.n	d4d88 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d4db2:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4db6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4dba:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d4dbe:	2b0e      	cmp	r3, #14
   d4dc0:	f04f 0000 	mov.w	r0, #0
   d4dc4:	d805      	bhi.n	d4dd2 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d4dc6:	4423      	add	r3, r4
   d4dc8:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d4dcc:	4620      	mov	r0, r4
   d4dce:	f7ff fe9b 	bl	d4b08 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d4dd2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4dd6:	3301      	adds	r3, #1
   d4dd8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d4ddc:	2300      	movs	r3, #0
   d4dde:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d4de2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d4de6:	425d      	negs	r5, r3
   d4de8:	415d      	adcs	r5, r3
   d4dea:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d4dee:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d4df0:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d4df2:	2302      	movs	r3, #2
    parity = 0;
   d4df4:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d4df8:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d4dfc:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d4e00:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d4e04:	e7f3      	b.n	d4dee <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d4e06:	2000      	movs	r0, #0
   d4e08:	e7f1      	b.n	d4dee <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d4e0a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4e0a:	4770      	bx	lr

000d4e0c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4e0c:	b510      	push	{r4, lr}
  }
   d4e0e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4e10:	4604      	mov	r4, r0
  }
   d4e12:	f003 fd27 	bl	d8864 <_ZdlPvj>
   d4e16:	4620      	mov	r0, r4
   d4e18:	bd10      	pop	{r4, pc}

000d4e1a <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4e1a:	b40e      	push	{r1, r2, r3}
   d4e1c:	b503      	push	{r0, r1, lr}
   d4e1e:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4e20:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4e22:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4e26:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4e28:	f003 f889 	bl	d7f3e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4e2c:	b002      	add	sp, #8
   d4e2e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4e32:	b003      	add	sp, #12
   d4e34:	4770      	bx	lr
	...

000d4e38 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4e3e:	7922      	ldrb	r2, [r4, #4]
   d4e40:	68a3      	ldr	r3, [r4, #8]
   d4e42:	b132      	cbz	r2, d4e52 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4e44:	b9a3      	cbnz	r3, d4e70 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4e46:	490b      	ldr	r1, [pc, #44]	; (d4e74 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4e48:	b002      	add	sp, #8
   d4e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4e4e:	f003 b83b 	b.w	d7ec8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4e52:	4a09      	ldr	r2, [pc, #36]	; (d4e78 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4e54:	7b26      	ldrb	r6, [r4, #12]
   d4e56:	4d09      	ldr	r5, [pc, #36]	; (d4e7c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4e58:	4909      	ldr	r1, [pc, #36]	; (d4e80 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4e5a:	7b64      	ldrb	r4, [r4, #13]
   d4e5c:	2e01      	cmp	r6, #1
   d4e5e:	bf18      	it	ne
   d4e60:	4629      	movne	r1, r5
   d4e62:	e9cd 1400 	strd	r1, r4, [sp]
   d4e66:	4907      	ldr	r1, [pc, #28]	; (d4e84 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4e68:	f7ff ffd7 	bl	d4e1a <_ZN5Print6printfEPKcz>
  }
   d4e6c:	b002      	add	sp, #8
   d4e6e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4e70:	4a05      	ldr	r2, [pc, #20]	; (d4e88 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4e72:	e7ef      	b.n	d4e54 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4e74:	000d9611 	.word	0x000d9611
   d4e78:	000d97fb 	.word	0x000d97fb
   d4e7c:	000d960d 	.word	0x000d960d
   d4e80:	000d9609 	.word	0x000d9609
   d4e84:	000d9627 	.word	0x000d9627
   d4e88:	000d9600 	.word	0x000d9600

000d4e8c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4e90:	6103      	str	r3, [r0, #16]
{ }
   d4e92:	4770      	bx	lr

000d4e94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4e94:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4e96:	4c0b      	ldr	r4, [pc, #44]	; (d4ec4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4e98:	7821      	ldrb	r1, [r4, #0]
   d4e9a:	f3bf 8f5b 	dmb	ish
   d4e9e:	f011 0101 	ands.w	r1, r1, #1
   d4ea2:	d10b      	bne.n	d4ebc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	9101      	str	r1, [sp, #4]
   d4ea8:	f7ff f906 	bl	d40b8 <__cxa_guard_acquire>
   d4eac:	9901      	ldr	r1, [sp, #4]
   d4eae:	b128      	cbz	r0, d4ebc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4eb0:	4805      	ldr	r0, [pc, #20]	; (d4ec8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4eb2:	f003 f881 	bl	d7fb8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f7ff f903 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4ebc:	4802      	ldr	r0, [pc, #8]	; (d4ec8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4ebe:	b002      	add	sp, #8
   d4ec0:	bd10      	pop	{r4, pc}
   d4ec2:	bf00      	nop
   d4ec4:	2003e538 	.word	0x2003e538
   d4ec8:	2003e53c 	.word	0x2003e53c

000d4ecc <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4ed0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ed4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ed6:	4605      	mov	r5, r0
   d4ed8:	460f      	mov	r7, r1
    if (_sck == -1)
   d4eda:	d106      	bne.n	d4eea <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4edc:	f7ff ffda 	bl	d4e94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ee0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ee6:	f003 b909 	b.w	d80fc <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4eea:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4eec:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4eee:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4ef2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ef6:	2100      	movs	r1, #0
   d4ef8:	b280      	uxth	r0, r0
   d4efa:	f003 fc0c 	bl	d8716 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4efe:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4f02:	fa08 f106 	lsl.w	r1, r8, r6
   d4f06:	4039      	ands	r1, r7
   d4f08:	b280      	uxth	r0, r0
   d4f0a:	f003 fc04 	bl	d8716 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4f0e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4f12:	2101      	movs	r1, #1
   d4f14:	b280      	uxth	r0, r0
   d4f16:	f003 fbfe 	bl	d8716 <digitalWrite>
        if (digitalRead(_miso))
   d4f1a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4f1e:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4f20:	b280      	uxth	r0, r0
        reply <<= 1;
   d4f22:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4f24:	f003 fc10 	bl	d8748 <digitalRead>
   d4f28:	b108      	cbz	r0, d4f2e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4f2a:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4f2e:	3e01      	subs	r6, #1
   d4f30:	d2df      	bcs.n	d4ef2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4f32:	4620      	mov	r0, r4
   d4f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4f38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4f38:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4f3a:	f7ff ffab 	bl	d4e94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4f42:	f003 b854 	b.w	d7fee <_ZN8SPIClass14endTransactionEv>

000d4f46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4f46:	b507      	push	{r0, r1, r2, lr}
   d4f48:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4f4a:	f7ff ffa3 	bl	d4e94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f4e:	9901      	ldr	r1, [sp, #4]
    }
   d4f50:	b003      	add	sp, #12
   d4f52:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4f56:	f003 b863 	b.w	d8020 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4f5c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4f5c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4f5e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f62:	3301      	adds	r3, #1
{
   d4f64:	b085      	sub	sp, #20
   d4f66:	4604      	mov	r4, r0
   d4f68:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4f6a:	d123      	bne.n	d4fb4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4f6c:	7901      	ldrb	r1, [r0, #4]
   d4f6e:	6800      	ldr	r0, [r0, #0]
   d4f70:	f001 fc8e 	bl	d6890 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4f74:	6820      	ldr	r0, [r4, #0]
   d4f76:	6803      	ldr	r3, [r0, #0]
   d4f78:	4629      	mov	r1, r5
   d4f7a:	689b      	ldr	r3, [r3, #8]
   d4f7c:	4798      	blx	r3
        _wire -> endTransmission();
   d4f7e:	6820      	ldr	r0, [r4, #0]
   d4f80:	f001 fca6 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4f84:	7921      	ldrb	r1, [r4, #4]
   d4f86:	6820      	ldr	r0, [r4, #0]
   d4f88:	2203      	movs	r2, #3
   d4f8a:	f001 fc7e 	bl	d688a <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4f8e:	6820      	ldr	r0, [r4, #0]
   d4f90:	6803      	ldr	r3, [r0, #0]
   d4f92:	695b      	ldr	r3, [r3, #20]
   d4f94:	4798      	blx	r3
        value <<= 8;
   d4f96:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4f98:	6820      	ldr	r0, [r4, #0]
   d4f9a:	6803      	ldr	r3, [r0, #0]
   d4f9c:	695b      	ldr	r3, [r3, #20]
   d4f9e:	4798      	blx	r3
   d4fa0:	4328      	orrs	r0, r5
        value <<= 8;
   d4fa2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4fa4:	6820      	ldr	r0, [r4, #0]
   d4fa6:	6803      	ldr	r3, [r0, #0]
   d4fa8:	695b      	ldr	r3, [r3, #20]
   d4faa:	4798      	blx	r3
   d4fac:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4fae:	4628      	mov	r0, r5
   d4fb0:	b005      	add	sp, #20
   d4fb2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4fb4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fb8:	3301      	adds	r3, #1
   d4fba:	d10c      	bne.n	d4fd6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4fbc:	4b1a      	ldr	r3, [pc, #104]	; (d5028 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4fbe:	9300      	str	r3, [sp, #0]
   d4fc0:	2300      	movs	r3, #0
   d4fc2:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fc6:	4b19      	ldr	r3, [pc, #100]	; (d502c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4fc8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fca:	4668      	mov	r0, sp
   d4fcc:	2301      	movs	r3, #1
   d4fce:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4fd2:	f7ff ffb8 	bl	d4f46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4fd6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4fda:	2100      	movs	r1, #0
   d4fdc:	b280      	uxth	r0, r0
   d4fde:	f003 fb9a 	bl	d8716 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4fe2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	f7ff ff70 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4fec:	2100      	movs	r1, #0
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff ff6c 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d4ff4:	2100      	movs	r1, #0
        value <<= 8;
   d4ff6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	f7ff ff67 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
   d4ffe:	4328      	orrs	r0, r5
        value <<= 8;
   d5000:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5002:	2100      	movs	r1, #0
   d5004:	4620      	mov	r0, r4
   d5006:	f7ff ff61 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
   d500a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d500c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5010:	2101      	movs	r1, #1
   d5012:	b280      	uxth	r0, r0
   d5014:	f003 fb7f 	bl	d8716 <digitalWrite>
        if (_sck == -1)
   d5018:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d501c:	3301      	adds	r3, #1
   d501e:	d1c6      	bne.n	d4fae <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5020:	f7ff ff8a 	bl	d4f38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5024:	e7c3      	b.n	d4fae <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5026:	bf00      	nop
   d5028:	000d964c 	.word	0x000d964c
   d502c:	0007a120 	.word	0x0007a120

000d5030 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5030:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5032:	21fa      	movs	r1, #250	; 0xfa
{
   d5034:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5036:	f7ff ff91 	bl	d4f5c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d503a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d503e:	d01e      	beq.n	d507e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5040:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5042:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5084 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5046:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5048:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d504c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5050:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5054:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5056:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5058:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d505c:	1312      	asrs	r2, r2, #12
   d505e:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5060:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5062:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5066:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d506c:	3380      	adds	r3, #128	; 0x80
   d506e:	121b      	asrs	r3, r3, #8
   d5070:	ee07 3a90 	vmov	s15, r3
   d5074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5078:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d507c:	bd10      	pop	{r4, pc}
        return NAN;
   d507e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5088 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5082:	e7fb      	b.n	d507c <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5084:	42c80000 	.word	0x42c80000
   d5088:	7fc00000 	.word	0x7fc00000

000d508c <_ZN15Adafruit_BME2806read16Eh>:
{
   d508c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d508e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5092:	3301      	adds	r3, #1
{
   d5094:	b085      	sub	sp, #20
   d5096:	4604      	mov	r4, r0
   d5098:	460d      	mov	r5, r1
    if (_cs == -1) {
   d509a:	d11f      	bne.n	d50dc <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d509c:	7901      	ldrb	r1, [r0, #4]
   d509e:	6800      	ldr	r0, [r0, #0]
   d50a0:	f001 fbf6 	bl	d6890 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50a4:	6820      	ldr	r0, [r4, #0]
   d50a6:	6803      	ldr	r3, [r0, #0]
   d50a8:	4629      	mov	r1, r5
   d50aa:	689b      	ldr	r3, [r3, #8]
   d50ac:	4798      	blx	r3
        _wire -> endTransmission();
   d50ae:	6820      	ldr	r0, [r4, #0]
   d50b0:	f001 fc0e 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d50b4:	7921      	ldrb	r1, [r4, #4]
   d50b6:	6820      	ldr	r0, [r4, #0]
   d50b8:	2202      	movs	r2, #2
   d50ba:	f001 fbe6 	bl	d688a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d50be:	6820      	ldr	r0, [r4, #0]
   d50c0:	6803      	ldr	r3, [r0, #0]
   d50c2:	695b      	ldr	r3, [r3, #20]
   d50c4:	4798      	blx	r3
   d50c6:	4605      	mov	r5, r0
   d50c8:	6820      	ldr	r0, [r4, #0]
   d50ca:	6803      	ldr	r3, [r0, #0]
   d50cc:	695b      	ldr	r3, [r3, #20]
   d50ce:	4798      	blx	r3
   d50d0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d50d4:	b285      	uxth	r5, r0
}
   d50d6:	4628      	mov	r0, r5
   d50d8:	b005      	add	sp, #20
   d50da:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d50dc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d50e0:	3301      	adds	r3, #1
   d50e2:	d10c      	bne.n	d50fe <_ZN15Adafruit_BME2806read16Eh+0x72>
   d50e4:	4b18      	ldr	r3, [pc, #96]	; (d5148 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d50e6:	9300      	str	r3, [sp, #0]
   d50e8:	2300      	movs	r3, #0
   d50ea:	f88d 3004 	strb.w	r3, [sp, #4]
   d50ee:	4b17      	ldr	r3, [pc, #92]	; (d514c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d50f0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d50f2:	4668      	mov	r0, sp
   d50f4:	2301      	movs	r3, #1
   d50f6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d50fa:	f7ff ff24 	bl	d4f46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d50fe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5102:	2100      	movs	r1, #0
   d5104:	b280      	uxth	r0, r0
   d5106:	f003 fb06 	bl	d8716 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d510a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d510e:	4620      	mov	r0, r4
   d5110:	f7ff fedc 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5114:	2100      	movs	r1, #0
   d5116:	4620      	mov	r0, r4
   d5118:	f7ff fed8 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
   d511c:	2100      	movs	r1, #0
   d511e:	4605      	mov	r5, r0
   d5120:	4620      	mov	r0, r4
   d5122:	f7ff fed3 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
   d5126:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d512a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d512c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5130:	2101      	movs	r1, #1
   d5132:	b280      	uxth	r0, r0
   d5134:	f003 faef 	bl	d8716 <digitalWrite>
        if (_sck == -1)
   d5138:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d513c:	3301      	adds	r3, #1
   d513e:	d1ca      	bne.n	d50d6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5140:	f7ff fefa 	bl	d4f38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5144:	e7c7      	b.n	d50d6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d5146:	bf00      	nop
   d5148:	000d964c 	.word	0x000d964c
   d514c:	0007a120 	.word	0x0007a120

000d5150 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5150:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5152:	f7ff ff9b 	bl	d508c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5156:	ba40      	rev16	r0, r0
}
   d5158:	b280      	uxth	r0, r0
   d515a:	bd08      	pop	{r3, pc}

000d515c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d515c:	b538      	push	{r3, r4, r5, lr}
   d515e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5160:	f7ff ff66 	bl	d5030 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5164:	21fd      	movs	r1, #253	; 0xfd
   d5166:	4620      	mov	r0, r4
   d5168:	f7ff ff90 	bl	d508c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d516c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5170:	d038      	beq.n	d51e4 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5172:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5176:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d5178:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d517c:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d517e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5182:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d5186:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d518a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d518e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5190:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5194:	4353      	muls	r3, r2
   d5196:	12db      	asrs	r3, r3, #11
   d5198:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d519c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d51a0:	4353      	muls	r3, r2
   d51a2:	129b      	asrs	r3, r3, #10
   d51a4:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d51a6:	129b      	asrs	r3, r3, #10
   d51a8:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d51ac:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d51b0:	4353      	muls	r3, r2
   d51b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d51b6:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d51b8:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d51ba:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d51bc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d51c0:	4352      	muls	r2, r2
   d51c2:	11d2      	asrs	r2, r2, #7
   d51c4:	434a      	muls	r2, r1
   d51c6:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d51ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d51ce:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d51d2:	bfa8      	it	ge
   d51d4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d51d8:	131b      	asrs	r3, r3, #12
   d51da:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d51de:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d51e2:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d51e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d51ec <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d51e8:	e7fb      	b.n	d51e2 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d51ea:	bf00      	nop
   d51ec:	7fc00000 	.word	0x7fc00000

000d51f0 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d51f0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d51f2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d51f6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d51f8:	b085      	sub	sp, #20
   d51fa:	4604      	mov	r4, r0
   d51fc:	460d      	mov	r5, r1
    if (_cs == -1) {
   d51fe:	d118      	bne.n	d5232 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5200:	7901      	ldrb	r1, [r0, #4]
   d5202:	6800      	ldr	r0, [r0, #0]
   d5204:	f001 fb44 	bl	d6890 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5208:	6820      	ldr	r0, [r4, #0]
   d520a:	6803      	ldr	r3, [r0, #0]
   d520c:	4629      	mov	r1, r5
   d520e:	689b      	ldr	r3, [r3, #8]
   d5210:	4798      	blx	r3
        _wire -> endTransmission();
   d5212:	6820      	ldr	r0, [r4, #0]
   d5214:	f001 fb5c 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5218:	7921      	ldrb	r1, [r4, #4]
   d521a:	6820      	ldr	r0, [r4, #0]
   d521c:	2201      	movs	r2, #1
   d521e:	f001 fb34 	bl	d688a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5222:	6820      	ldr	r0, [r4, #0]
   d5224:	6803      	ldr	r3, [r0, #0]
   d5226:	695b      	ldr	r3, [r3, #20]
   d5228:	4798      	blx	r3
   d522a:	b2c5      	uxtb	r5, r0
}
   d522c:	4628      	mov	r0, r5
   d522e:	b005      	add	sp, #20
   d5230:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5232:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5236:	3301      	adds	r3, #1
   d5238:	d10c      	bne.n	d5254 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d523a:	4b15      	ldr	r3, [pc, #84]	; (d5290 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d523c:	9300      	str	r3, [sp, #0]
   d523e:	2300      	movs	r3, #0
   d5240:	f88d 3004 	strb.w	r3, [sp, #4]
   d5244:	4b13      	ldr	r3, [pc, #76]	; (d5294 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d5246:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5248:	4668      	mov	r0, sp
   d524a:	2301      	movs	r3, #1
   d524c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5250:	f7ff fe79 	bl	d4f46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5254:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5258:	2100      	movs	r1, #0
   d525a:	b280      	uxth	r0, r0
   d525c:	f003 fa5b 	bl	d8716 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5260:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5264:	4620      	mov	r0, r4
   d5266:	f7ff fe31 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d526a:	2100      	movs	r1, #0
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff fe2d 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
   d5272:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5274:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5278:	2101      	movs	r1, #1
   d527a:	b280      	uxth	r0, r0
   d527c:	f003 fa4b 	bl	d8716 <digitalWrite>
        if (_sck == -1)
   d5280:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5284:	3301      	adds	r3, #1
   d5286:	d1d1      	bne.n	d522c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5288:	f7ff fe56 	bl	d4f38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d528c:	e7ce      	b.n	d522c <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d528e:	bf00      	nop
   d5290:	000d964c 	.word	0x000d964c
   d5294:	0007a120 	.word	0x0007a120

000d5298 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5298:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d529a:	21f3      	movs	r1, #243	; 0xf3
   d529c:	f7ff ffa8 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
}
   d52a0:	f000 0001 	and.w	r0, r0, #1
   d52a4:	bd08      	pop	{r3, pc}

000d52a6 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d52a6:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52a8:	2188      	movs	r1, #136	; 0x88
{
   d52aa:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52ac:	f7ff ff50 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d52b0:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d52b2:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d52b4:	4620      	mov	r0, r4
   d52b6:	f7ff ff4b 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d52ba:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d52bc:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff ff46 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52c4:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d52c6:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52c8:	4620      	mov	r0, r4
   d52ca:	f7ff ff41 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d52ce:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d52d0:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ff3c 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d52d8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d52da:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d52dc:	4620      	mov	r0, r4
   d52de:	f7ff ff37 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d52e2:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d52e4:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff ff32 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d52ec:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d52ee:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d52f0:	4620      	mov	r0, r4
   d52f2:	f7ff ff2d 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d52f6:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d52f8:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d52fa:	4620      	mov	r0, r4
   d52fc:	f7ff ff28 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d5300:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5302:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5304:	4620      	mov	r0, r4
   d5306:	f7ff ff23 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d530a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d530c:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d530e:	4620      	mov	r0, r4
   d5310:	f7ff ff1e 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
   d5314:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5316:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff ff19 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d531e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5320:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5322:	4620      	mov	r0, r4
   d5324:	f7ff ff64 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5328:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d532a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d532e:	4620      	mov	r0, r4
   d5330:	f7ff ff0e 	bl	d5150 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5334:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5336:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5338:	4620      	mov	r0, r4
   d533a:	f7ff ff59 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d533e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5340:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5344:	4620      	mov	r0, r4
   d5346:	f7ff ff53 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
   d534a:	21e5      	movs	r1, #229	; 0xe5
   d534c:	4605      	mov	r5, r0
   d534e:	4620      	mov	r0, r4
   d5350:	f7ff ff4e 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
   d5354:	f000 030f 	and.w	r3, r0, #15
   d5358:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d535c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d535e:	21e6      	movs	r1, #230	; 0xe6
   d5360:	4620      	mov	r0, r4
   d5362:	f7ff ff45 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
   d5366:	21e5      	movs	r1, #229	; 0xe5
   d5368:	4605      	mov	r5, r0
   d536a:	4620      	mov	r0, r4
   d536c:	f7ff ff40 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
   d5370:	1103      	asrs	r3, r0, #4
   d5372:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5376:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5378:	21e7      	movs	r1, #231	; 0xe7
   d537a:	4620      	mov	r0, r4
   d537c:	f7ff ff38 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
   d5380:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5384:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5388 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d538a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d538e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5390:	4604      	mov	r4, r0
   d5392:	460e      	mov	r6, r1
   d5394:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5396:	d112      	bne.n	d53be <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5398:	7901      	ldrb	r1, [r0, #4]
   d539a:	6800      	ldr	r0, [r0, #0]
   d539c:	f001 fa78 	bl	d6890 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d53a0:	6820      	ldr	r0, [r4, #0]
   d53a2:	6803      	ldr	r3, [r0, #0]
   d53a4:	4631      	mov	r1, r6
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d53aa:	6820      	ldr	r0, [r4, #0]
   d53ac:	6803      	ldr	r3, [r0, #0]
   d53ae:	4629      	mov	r1, r5
   d53b0:	689b      	ldr	r3, [r3, #8]
   d53b2:	4798      	blx	r3
        _wire -> endTransmission();
   d53b4:	6820      	ldr	r0, [r4, #0]
   d53b6:	f001 fa8b 	bl	d68d0 <_ZN7TwoWire15endTransmissionEv>
}
   d53ba:	b004      	add	sp, #16
   d53bc:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d53be:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d53c2:	3301      	adds	r3, #1
   d53c4:	d10c      	bne.n	d53e0 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d53c6:	4b14      	ldr	r3, [pc, #80]	; (d5418 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d53c8:	9300      	str	r3, [sp, #0]
   d53ca:	2300      	movs	r3, #0
   d53cc:	f88d 3004 	strb.w	r3, [sp, #4]
   d53d0:	4b12      	ldr	r3, [pc, #72]	; (d541c <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d53d2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d53d4:	4668      	mov	r0, sp
   d53d6:	2301      	movs	r3, #1
   d53d8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d53dc:	f7ff fdb3 	bl	d4f46 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d53e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d53e4:	2100      	movs	r1, #0
   d53e6:	b280      	uxth	r0, r0
   d53e8:	f003 f995 	bl	d8716 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d53ec:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d53f0:	4620      	mov	r0, r4
   d53f2:	f7ff fd6b 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d53f6:	4629      	mov	r1, r5
   d53f8:	4620      	mov	r0, r4
   d53fa:	f7ff fd67 	bl	d4ecc <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d53fe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5402:	2101      	movs	r1, #1
   d5404:	b280      	uxth	r0, r0
   d5406:	f003 f986 	bl	d8716 <digitalWrite>
    if (_sck == -1)
   d540a:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d540e:	3301      	adds	r3, #1
   d5410:	d1d3      	bne.n	d53ba <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5412:	f7ff fd91 	bl	d4f38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5416:	e7d0      	b.n	d53ba <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5418:	000d964c 	.word	0x000d964c
   d541c:	0007a120 	.word	0x0007a120

000d5420 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5422:	00db      	lsls	r3, r3, #3
   d5424:	f002 0207 	and.w	r2, r2, #7
   d5428:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d542c:	4313      	orrs	r3, r2
   d542e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5432:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5436:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d543a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d543e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5442:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d5446:	f366 1347 	bfi	r3, r6, #5, #3
   d544a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d544e:	00ed      	lsls	r5, r5, #3
   d5450:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5454:	f007 0707 	and.w	r7, r7, #7
   d5458:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d545c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5460:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5462:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5464:	431d      	orrs	r5, r3
   d5466:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d546a:	f006 0207 	and.w	r2, r6, #7
   d546e:	21f2      	movs	r1, #242	; 0xf2
   d5470:	f7ff ff8a 	bl	d5388 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5474:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5478:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d547c:	f002 0107 	and.w	r1, r2, #7
   d5480:	009b      	lsls	r3, r3, #2
   d5482:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5486:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d548a:	4620      	mov	r0, r4
   d548c:	21f5      	movs	r1, #245	; 0xf5
   d548e:	f7ff ff7b 	bl	d5388 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5492:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5496:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d549a:	f002 0107 	and.w	r1, r2, #7
   d549e:	009b      	lsls	r3, r3, #2
   d54a0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d54a4:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d54a8:	4620      	mov	r0, r4
   d54aa:	21f4      	movs	r1, #244	; 0xf4
}
   d54ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d54b0:	f7ff bf6a 	b.w	d5388 <_ZN15Adafruit_BME2806write8Ehh>

000d54b4 <_ZN15Adafruit_BME2804initEv>:
{
   d54b4:	b530      	push	{r4, r5, lr}
   d54b6:	4604      	mov	r4, r0
    if (_cs == -1) {
   d54b8:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d54bc:	1c42      	adds	r2, r0, #1
{
   d54be:	b085      	sub	sp, #20
    if (_cs == -1) {
   d54c0:	d119      	bne.n	d54f6 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d54c2:	6820      	ldr	r0, [r4, #0]
   d54c4:	f001 f9b2 	bl	d682c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d54c8:	21d0      	movs	r1, #208	; 0xd0
   d54ca:	4620      	mov	r0, r4
   d54cc:	f7ff fe90 	bl	d51f0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d54d0:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d54d2:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d54d4:	d145      	bne.n	d5562 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d54d6:	4620      	mov	r0, r4
   d54d8:	22b6      	movs	r2, #182	; 0xb6
   d54da:	21e0      	movs	r1, #224	; 0xe0
   d54dc:	f7ff ff54 	bl	d5388 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d54e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d54e4:	f000 fc72 	bl	d5dcc <delay>
    while (isReadingCalibration())
   d54e8:	4620      	mov	r0, r4
   d54ea:	f7ff fed5 	bl	d5298 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d54ee:	4605      	mov	r5, r0
   d54f0:	b328      	cbz	r0, d553e <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d54f2:	2064      	movs	r0, #100	; 0x64
   d54f4:	e7f6      	b.n	d54e4 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d54f6:	2101      	movs	r1, #1
   d54f8:	b280      	uxth	r0, r0
   d54fa:	f003 f90c 	bl	d8716 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d54fe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5502:	2101      	movs	r1, #1
   d5504:	b280      	uxth	r0, r0
   d5506:	f003 f8f5 	bl	d86f4 <pinMode>
        if (_sck == -1) {
   d550a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d550e:	1c43      	adds	r3, r0, #1
   d5510:	d104      	bne.n	d551c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d5512:	f7ff fcbf 	bl	d4e94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5516:	f002 fd59 	bl	d7fcc <_ZN8SPIClass5beginEv>
    }
   d551a:	e7d5      	b.n	d54c8 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d551c:	2101      	movs	r1, #1
   d551e:	b280      	uxth	r0, r0
   d5520:	f003 f8e8 	bl	d86f4 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5524:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5528:	2101      	movs	r1, #1
   d552a:	b280      	uxth	r0, r0
   d552c:	f003 f8e2 	bl	d86f4 <pinMode>
            pinMode(_miso, INPUT);
   d5530:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5534:	2100      	movs	r1, #0
   d5536:	b280      	uxth	r0, r0
   d5538:	f003 f8dc 	bl	d86f4 <pinMode>
   d553c:	e7c4      	b.n	d54c8 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d553e:	4620      	mov	r0, r4
   d5540:	f7ff feb1 	bl	d52a6 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5544:	2305      	movs	r3, #5
   d5546:	9300      	str	r3, [sp, #0]
   d5548:	461a      	mov	r2, r3
   d554a:	2103      	movs	r1, #3
   d554c:	4620      	mov	r0, r4
   d554e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5552:	f7ff ff65 	bl	d5420 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d5556:	2064      	movs	r0, #100	; 0x64
   d5558:	f000 fc38 	bl	d5dcc <delay>
   d555c:	2001      	movs	r0, #1
}
   d555e:	b005      	add	sp, #20
   d5560:	bd30      	pop	{r4, r5, pc}
        return false;
   d5562:	2000      	movs	r0, #0
   d5564:	e7fb      	b.n	d555e <_ZN15Adafruit_BME2804initEv+0xaa>

000d5566 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d5566:	2377      	movs	r3, #119	; 0x77
{
   d5568:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d556a:	7103      	strb	r3, [r0, #4]
{
   d556c:	4604      	mov	r4, r0
	_wire = &Wire;
   d556e:	f003 f931 	bl	d87d4 <_Z19__fetch_global_Wirev>
   d5572:	6020      	str	r0, [r4, #0]
	status = init();
   d5574:	4620      	mov	r0, r4
   d5576:	f7ff ff9d 	bl	d54b4 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d557a:	b930      	cbnz	r0, d558a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d557c:	2376      	movs	r3, #118	; 0x76
   d557e:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5580:	4620      	mov	r0, r4
}
   d5582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d5586:	f7ff bf95 	b.w	d54b4 <_ZN15Adafruit_BME2804initEv>
}
   d558a:	bd10      	pop	{r4, pc}

000d558c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d558c:	b510      	push	{r4, lr}
   d558e:	4b05      	ldr	r3, [pc, #20]	; (d55a4 <_ZN10JsonBufferD1Ev+0x18>)
   d5590:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5592:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d5594:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5596:	b91b      	cbnz	r3, d55a0 <_ZN10JsonBufferD1Ev+0x14>
   d5598:	6840      	ldr	r0, [r0, #4]
   d559a:	b108      	cbz	r0, d55a0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d559c:	f000 fbe6 	bl	d5d6c <free>
	}
}
   d55a0:	4620      	mov	r0, r4
   d55a2:	bd10      	pop	{r4, pc}
   d55a4:	000d9674 	.word	0x000d9674

000d55a8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4604      	mov	r4, r0
}
   d55ac:	f7ff ffee 	bl	d558c <_ZN10JsonBufferD1Ev>
   d55b0:	4620      	mov	r0, r4
   d55b2:	2114      	movs	r1, #20
   d55b4:	f003 f956 	bl	d8864 <_ZdlPvj>
   d55b8:	4620      	mov	r0, r4
   d55ba:	bd10      	pop	{r4, pc}

000d55bc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d55bc:	b510      	push	{r4, lr}
   d55be:	4b03      	ldr	r3, [pc, #12]	; (d55cc <_ZN10JsonWriterD1Ev+0x10>)
   d55c0:	6003      	str	r3, [r0, #0]
   d55c2:	4604      	mov	r4, r0
   d55c4:	f7ff ffe2 	bl	d558c <_ZN10JsonBufferD1Ev>

}
   d55c8:	4620      	mov	r0, r4
   d55ca:	bd10      	pop	{r4, pc}
   d55cc:	000d9684 	.word	0x000d9684

000d55d0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   d55d0:	b510      	push	{r4, lr}
   d55d2:	4604      	mov	r4, r0
}
   d55d4:	f7ff fff2 	bl	d55bc <_ZN10JsonWriterD1Ev>
   d55d8:	4620      	mov	r0, r4
   d55da:	2130      	movs	r1, #48	; 0x30
   d55dc:	f003 f942 	bl	d8864 <_ZdlPvj>
   d55e0:	4620      	mov	r0, r4
   d55e2:	bd10      	pop	{r4, pc}

000d55e4 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d55e4:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d55e6:	2201      	movs	r2, #1
	offset = 0;
   d55e8:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   d55ea:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d55ec:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   d55ee:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   d55f2:	4770      	bx	lr

000d55f4 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d55f4:	2300      	movs	r3, #0
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55f6:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d55f8:	60c3      	str	r3, [r0, #12]
   d55fa:	2301      	movs	r3, #1
   d55fc:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d55fe:	4b05      	ldr	r3, [pc, #20]	; (d5614 <_ZN10JsonWriterC1EPcj+0x20>)
   d5600:	6003      	str	r3, [r0, #0]
   d5602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5606:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d560a:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d560c:	f7ff ffea 	bl	d55e4 <_ZN10JsonWriter4initEv>
}
   d5610:	bd10      	pop	{r4, pc}
   d5612:	bf00      	nop
   d5614:	000d9684 	.word	0x000d9684

000d5618 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5618:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   d561c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d561e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5620:	bf3f      	itttt	cc
   d5622:	6842      	ldrcc	r2, [r0, #4]
   d5624:	1c5c      	addcc	r4, r3, #1
   d5626:	60c4      	strcc	r4, [r0, #12]
   d5628:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d562a:	bf24      	itt	cs
   d562c:	2301      	movcs	r3, #1
   d562e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   d5632:	bd10      	pop	{r4, pc}

000d5634 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   d5634:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5636:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   d5638:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d563a:	b143      	cbz	r3, d564e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d563c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5640:	7e59      	ldrb	r1, [r3, #25]
   d5642:	b109      	cbz	r1, d5648 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5644:	f7ff ffe8 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   d5648:	6963      	ldr	r3, [r4, #20]
   d564a:	3b01      	subs	r3, #1
   d564c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   d564e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   d5652:	6863      	ldr	r3, [r4, #4]
   d5654:	4288      	cmp	r0, r1
   d5656:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   d565a:	bf2a      	itet	cs
   d565c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   d565e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   d5660:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   d5664:	bd10      	pop	{r4, pc}

000d5666 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5666:	b570      	push	{r4, r5, r6, lr}
   d5668:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d566a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d566e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   d5670:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5672:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5674:	4430      	add	r0, r6
   d5676:	460a      	mov	r2, r1
   d5678:	4629      	mov	r1, r5
   d567a:	f000 fb87 	bl	d5d8c <vsnprintf>
	if (count <= spaceAvailable) {
   d567e:	4285      	cmp	r5, r0
		offset += count;
   d5680:	bf2d      	iteet	cs
   d5682:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5684:	68a3      	ldrcc	r3, [r4, #8]
   d5686:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   d5688:	18c0      	addcs	r0, r0, r3
		truncated = true;
   d568a:	bf36      	itet	cc
   d568c:	2301      	movcc	r3, #1
		offset += count;
   d568e:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   d5690:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   d5694:	bd70      	pop	{r4, r5, r6, pc}

000d5696 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5696:	b40e      	push	{r1, r2, r3}
   d5698:	b503      	push	{r0, r1, lr}
   d569a:	aa03      	add	r2, sp, #12
   d569c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   d56a0:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d56a2:	f7ff ffe0 	bl	d5666 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   d56a6:	b002      	add	sp, #8
   d56a8:	f85d eb04 	ldr.w	lr, [sp], #4
   d56ac:	b003      	add	sp, #12
   d56ae:	4770      	bx	lr

000d56b0 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   d56b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56b4:	4604      	mov	r4, r0
   d56b6:	460e      	mov	r6, r1
	if (quoted) {
   d56b8:	4617      	mov	r7, r2
   d56ba:	b112      	cbz	r2, d56c2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d56bc:	2122      	movs	r1, #34	; 0x22
   d56be:	f7ff ffab 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   d56c2:	f8df 810c 	ldr.w	r8, [pc, #268]	; d57d0 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   d56c6:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d56c8:	5d71      	ldrb	r1, [r6, r5]
   d56ca:	eb06 0905 	add.w	r9, r6, r5
   d56ce:	2900      	cmp	r1, #0
   d56d0:	d074      	beq.n	d57bc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   d56d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d56d6:	429a      	cmp	r2, r3
   d56d8:	d270      	bcs.n	d57bc <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   d56da:	060b      	lsls	r3, r1, #24
   d56dc:	d534      	bpl.n	d5748 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d56de:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d56e2:	2be0      	cmp	r3, #224	; 0xe0
   d56e4:	f105 0901 	add.w	r9, r5, #1
   d56e8:	d11d      	bne.n	d5726 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   d56ea:	f816 2009 	ldrb.w	r2, [r6, r9]
   d56ee:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   d56f2:	2b80      	cmp	r3, #128	; 0x80
   d56f4:	d139      	bne.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d56f6:	f105 0902 	add.w	r9, r5, #2
   d56fa:	f816 3009 	ldrb.w	r3, [r6, r9]
   d56fe:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   d5702:	2880      	cmp	r0, #128	; 0x80
   d5704:	d131      	bne.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   d5706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d570a:	0192      	lsls	r2, r2, #6
   d570c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   d5710:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   d5714:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   d5716:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   d5718:	4641      	mov	r1, r8
   d571a:	4620      	mov	r0, r4
   d571c:	f7ff ffbb 	bl	d5696 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5720:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5722:	3501      	adds	r5, #1
   d5724:	e7d0      	b.n	d56c8 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5726:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d572a:	2bc0      	cmp	r3, #192	; 0xc0
   d572c:	d11d      	bne.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d572e:	f816 3009 	ldrb.w	r3, [r6, r9]
   d5732:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5736:	2a80      	cmp	r2, #128	; 0x80
   d5738:	d117      	bne.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   d573a:	0189      	lsls	r1, r1, #6
   d573c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   d5744:	431a      	orrs	r2, r3
   d5746:	e7e7      	b.n	d5718 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   d5748:	290d      	cmp	r1, #13
   d574a:	d80a      	bhi.n	d5762 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   d574c:	2907      	cmp	r1, #7
   d574e:	d90c      	bls.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5750:	f1a1 0308 	sub.w	r3, r1, #8
   d5754:	2b05      	cmp	r3, #5
   d5756:	d808      	bhi.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   d5758:	e8df f003 	tbb	[pc, r3]
   d575c:	0717230b 	.word	0x0717230b
   d5760:	1d11      	.short	0x1d11
   d5762:	2922      	cmp	r1, #34	; 0x22
   d5764:	d023      	beq.n	d57ae <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   d5766:	295c      	cmp	r1, #92	; 0x5c
   d5768:	d021      	beq.n	d57ae <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   d576a:	4620      	mov	r0, r4
   d576c:	f7ff ff54 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				break;
   d5770:	e7d7      	b.n	d5722 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   d5772:	215c      	movs	r1, #92	; 0x5c
   d5774:	4620      	mov	r0, r4
   d5776:	f7ff ff4f 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d577a:	2162      	movs	r1, #98	; 0x62
   d577c:	e7f5      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d577e:	215c      	movs	r1, #92	; 0x5c
   d5780:	4620      	mov	r0, r4
   d5782:	f7ff ff49 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5786:	2166      	movs	r1, #102	; 0x66
   d5788:	e7ef      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d578a:	215c      	movs	r1, #92	; 0x5c
   d578c:	4620      	mov	r0, r4
   d578e:	f7ff ff43 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5792:	216e      	movs	r1, #110	; 0x6e
   d5794:	e7e9      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d5796:	215c      	movs	r1, #92	; 0x5c
   d5798:	4620      	mov	r0, r4
   d579a:	f7ff ff3d 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d579e:	2172      	movs	r1, #114	; 0x72
   d57a0:	e7e3      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57a2:	215c      	movs	r1, #92	; 0x5c
   d57a4:	4620      	mov	r0, r4
   d57a6:	f7ff ff37 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d57aa:	2174      	movs	r1, #116	; 0x74
   d57ac:	e7dd      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
   d57ae:	215c      	movs	r1, #92	; 0x5c
   d57b0:	4620      	mov	r0, r4
   d57b2:	f7ff ff31 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d57b6:	f899 1000 	ldrb.w	r1, [r9]
   d57ba:	e7d6      	b.n	d576a <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
   d57bc:	b12f      	cbz	r7, d57ca <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   d57be:	4620      	mov	r0, r4
   d57c0:	2122      	movs	r1, #34	; 0x22
}
   d57c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   d57c6:	f7ff bf27 	b.w	d5618 <_ZN10JsonWriter10insertCharEc>
}
   d57ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d57ce:	bf00      	nop
   d57d0:	000d9658 	.word	0x000d9658

000d57d4 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   d57d4:	6942      	ldr	r2, [r0, #20]
   d57d6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   d57da:	7e1a      	ldrb	r2, [r3, #24]
   d57dc:	b112      	cbz	r2, d57e4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d57de:	2200      	movs	r2, #0
   d57e0:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   d57e2:	4770      	bx	lr
		insertChar(',');
   d57e4:	212c      	movs	r1, #44	; 0x2c
   d57e6:	f7ff bf17 	b.w	d5618 <_ZN10JsonWriter10insertCharEc>

000d57ea <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d57ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d57ec:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d57ee:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d57f0:	3301      	adds	r3, #1
   d57f2:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d57f4:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d57f6:	d80f      	bhi.n	d5818 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   d57f8:	f7ff ffec 	bl	d57d4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   d57fc:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   d57fe:	9901      	ldr	r1, [sp, #4]
	contextIndex++;
   d5800:	1c5a      	adds	r2, r3, #1
   d5802:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	context[contextIndex].isFirst = true;
   d5806:	2501      	movs	r5, #1
	contextIndex++;
   d5808:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   d580a:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
   d580c:	76de      	strb	r6, [r3, #27]
	insertChar(startChar);
   d580e:	f7ff ff03 	bl	d5618 <_ZN10JsonWriter10insertCharEc>
   d5812:	4628      	mov	r0, r5
}
   d5814:	b002      	add	sp, #8
   d5816:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   d5818:	2000      	movs	r0, #0
   d581a:	e7fb      	b.n	d5814 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000d581c <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d581c:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d581e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   d5820:	2900      	cmp	r1, #0
void JsonWriter::insertValue(double value) {
   d5822:	ec53 2b10 	vmov	r2, r3, d0
	if (floatPlaces >= 0) {
   d5826:	db08      	blt.n	d583a <_ZN10JsonWriter11insertValueEd+0x1e>
		insertsprintf("%.*lf", floatPlaces, value);
   d5828:	460a      	mov	r2, r1
   d582a:	ed8d 0b00 	vstr	d0, [sp]
   d582e:	4906      	ldr	r1, [pc, #24]	; (d5848 <_ZN10JsonWriter11insertValueEd+0x2c>)
   d5830:	f7ff ff31 	bl	d5696 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d5834:	b003      	add	sp, #12
   d5836:	f85d fb04 	ldr.w	pc, [sp], #4
		insertsprintf("%lf", value);
   d583a:	4904      	ldr	r1, [pc, #16]	; (d584c <_ZN10JsonWriter11insertValueEd+0x30>)
}
   d583c:	b003      	add	sp, #12
   d583e:	f85d eb04 	ldr.w	lr, [sp], #4
		insertsprintf("%lf", value);
   d5842:	f7ff bf28 	b.w	d5696 <_ZN10JsonWriter13insertsprintfEPKcz>
   d5846:	bf00      	nop
   d5848:	000d965f 	.word	0x000d965f
   d584c:	000d9665 	.word	0x000d9665

000d5850 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <cellular_signal+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030274 	.word	0x00030274

000d5860 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <os_mutex_recursive_create+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030248 	.word	0x00030248

000d5870 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <os_mutex_recursive_destroy+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030248 	.word	0x00030248

000d5880 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <os_mutex_recursive_lock+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030248 	.word	0x00030248

000d5890 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <os_mutex_recursive_unlock+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030248 	.word	0x00030248

000d58a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_RNG_GetRandomNumber+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	685b      	ldr	r3, [r3, #4]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030218 	.word	0x00030218

000d58b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <HAL_Delay_Microseconds+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	68db      	ldr	r3, [r3, #12]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030218 	.word	0x00030218

000d58c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	695b      	ldr	r3, [r3, #20]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030218 	.word	0x00030218

000d58d0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_Pin_Mode+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	689b      	ldr	r3, [r3, #8]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003022c 	.word	0x0003022c

000d58e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_Get_Pin_Mode+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	68db      	ldr	r3, [r3, #12]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003022c 	.word	0x0003022c

000d58f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_GPIO_Write+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	691b      	ldr	r3, [r3, #16]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003022c 	.word	0x0003022c

000d5900 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_GPIO_Read+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	695b      	ldr	r3, [r3, #20]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003022c 	.word	0x0003022c

000d5910 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <hal_i2c_begin+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	68db      	ldr	r3, [r3, #12]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030228 	.word	0x00030228

000d5920 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <hal_i2c_begin_transmission+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	699b      	ldr	r3, [r3, #24]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030228 	.word	0x00030228

000d5930 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <hal_i2c_end_transmission+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	69db      	ldr	r3, [r3, #28]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030228 	.word	0x00030228

000d5940 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <hal_i2c_write+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	6a1b      	ldr	r3, [r3, #32]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030228 	.word	0x00030228

000d5950 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <hal_i2c_available+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030228 	.word	0x00030228

000d5960 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <hal_i2c_read+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030228 	.word	0x00030228

000d5970 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <hal_i2c_peek+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030228 	.word	0x00030228

000d5980 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <hal_i2c_flush+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030228 	.word	0x00030228

000d5990 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <hal_i2c_is_enabled+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030228 	.word	0x00030228

000d59a0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <hal_i2c_init+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030228 	.word	0x00030228

000d59b0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <hal_i2c_lock+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030228 	.word	0x00030228

000d59c0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <hal_i2c_unlock+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030228 	.word	0x00030228

000d59d0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <hal_i2c_request_ex+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030228 	.word	0x00030228

000d59e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <inet_inet_ntop+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	695b      	ldr	r3, [r3, #20]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030264 	.word	0x00030264

000d59f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <netdb_freeaddrinfo+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	689b      	ldr	r3, [r3, #8]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030268 	.word	0x00030268

000d5a00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <netdb_getaddrinfo+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	68db      	ldr	r3, [r3, #12]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030268 	.word	0x00030268

000d5a10 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <hal_spi_begin+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	681b      	ldr	r3, [r3, #0]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030230 	.word	0x00030230

000d5a20 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <hal_spi_transfer+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	695b      	ldr	r3, [r3, #20]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030230 	.word	0x00030230

000d5a30 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <hal_spi_init+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	69db      	ldr	r3, [r3, #28]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030230 	.word	0x00030230

000d5a40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <hal_spi_is_enabled+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	6a1b      	ldr	r3, [r3, #32]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030230 	.word	0x00030230

000d5a50 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <hal_spi_info+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030230 	.word	0x00030230

000d5a60 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <hal_spi_set_settings+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030230 	.word	0x00030230

000d5a70 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <hal_spi_acquire+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030230 	.word	0x00030230

000d5a80 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <hal_spi_release+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030230 	.word	0x00030230

000d5a90 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <hal_usart_init+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	681b      	ldr	r3, [r3, #0]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	0003023c 	.word	0x0003023c

000d5aa0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <hal_usart_end+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	689b      	ldr	r3, [r3, #8]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003023c 	.word	0x0003023c

000d5ab0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <hal_usart_write+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	68db      	ldr	r3, [r3, #12]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003023c 	.word	0x0003023c

000d5ac0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <hal_usart_available+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	691b      	ldr	r3, [r3, #16]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003023c 	.word	0x0003023c

000d5ad0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <hal_usart_read+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	695b      	ldr	r3, [r3, #20]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003023c 	.word	0x0003023c

000d5ae0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <hal_usart_peek+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	699b      	ldr	r3, [r3, #24]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003023c 	.word	0x0003023c

000d5af0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <hal_usart_flush+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	69db      	ldr	r3, [r3, #28]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003023c 	.word	0x0003023c

000d5b00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <hal_usart_is_enabled+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6a1b      	ldr	r3, [r3, #32]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003023c 	.word	0x0003023c

000d5b10 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <hal_usart_available_data_for_write+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003023c 	.word	0x0003023c

000d5b20 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <hal_usart_begin_config+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003023c 	.word	0x0003023c

000d5b30 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_USB_USART_Init+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	681b      	ldr	r3, [r3, #0]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003024c 	.word	0x0003024c

000d5b40 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_USB_USART_Begin+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	685b      	ldr	r3, [r3, #4]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003024c 	.word	0x0003024c

000d5b50 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_USB_USART_End+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	689b      	ldr	r3, [r3, #8]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	0003024c 	.word	0x0003024c

000d5b60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_USB_USART_Available_Data+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	691b      	ldr	r3, [r3, #16]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	0003024c 	.word	0x0003024c

000d5b70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	695b      	ldr	r3, [r3, #20]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	0003024c 	.word	0x0003024c

000d5b80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_USB_USART_Receive_Data+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	699b      	ldr	r3, [r3, #24]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	0003024c 	.word	0x0003024c

000d5b90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_USB_USART_Send_Data+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	69db      	ldr	r3, [r3, #28]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	0003024c 	.word	0x0003024c

000d5ba0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_USB_USART_Flush_Data+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6a1b      	ldr	r3, [r3, #32]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	0003024c 	.word	0x0003024c

000d5bb0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <panic_+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030260 	.word	0x00030260

000d5bc0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <log_level_name+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030260 	.word	0x00030260

000d5bd0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <log_set_callbacks+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030260 	.word	0x00030260

000d5be0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b03      	ldr	r3, [pc, #12]	; (d5bf0 <diag_get_source+0x10>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5bea:	9301      	str	r3, [sp, #4]
   d5bec:	bd08      	pop	{r3, pc}
   d5bee:	0000      	.short	0x0000
   d5bf0:	00030260 	.word	0x00030260

000d5bf4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <set_system_mode+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	685b      	ldr	r3, [r3, #4]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030220 	.word	0x00030220

000d5c04 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <system_delay_ms+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	695b      	ldr	r3, [r3, #20]
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030220 	.word	0x00030220

000d5c14 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <application_thread_current+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030220 	.word	0x00030220

000d5c24 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <application_thread_invoke+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030220 	.word	0x00030220

000d5c34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b03      	ldr	r3, [pc, #12]	; (d5c44 <system_ctrl_set_app_request_handler+0x10>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5c3e:	9301      	str	r3, [sp, #4]
   d5c40:	bd08      	pop	{r3, pc}
   d5c42:	0000      	.short	0x0000
   d5c44:	00030220 	.word	0x00030220

000d5c48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b03      	ldr	r3, [pc, #12]	; (d5c58 <system_ctrl_set_result+0x10>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5c52:	9301      	str	r3, [sp, #4]
   d5c54:	bd08      	pop	{r3, pc}
   d5c56:	0000      	.short	0x0000
   d5c58:	00030220 	.word	0x00030220

000d5c5c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <spark_variable+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	681b      	ldr	r3, [r3, #0]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030244 	.word	0x00030244

000d5c6c <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <spark_cloud_flag_connected+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	695b      	ldr	r3, [r3, #20]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030244 	.word	0x00030244

000d5c7c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <spark_send_event+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6a1b      	ldr	r3, [r3, #32]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030244 	.word	0x00030244

000d5c8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030244 	.word	0x00030244

000d5c9c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <network_connect+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	685b      	ldr	r3, [r3, #4]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030240 	.word	0x00030240

000d5cac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <network_connecting+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	689b      	ldr	r3, [r3, #8]
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030240 	.word	0x00030240

000d5cbc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <network_disconnect+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	68db      	ldr	r3, [r3, #12]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030240 	.word	0x00030240

000d5ccc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <network_ready+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	691b      	ldr	r3, [r3, #16]
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	00030240 	.word	0x00030240

000d5cdc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <network_on+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	695b      	ldr	r3, [r3, #20]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	00030240 	.word	0x00030240

000d5cec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <network_off+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	699b      	ldr	r3, [r3, #24]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030240 	.word	0x00030240

000d5cfc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <network_listen+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	69db      	ldr	r3, [r3, #28]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030240 	.word	0x00030240

000d5d0c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <network_listening+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	6a1b      	ldr	r3, [r3, #32]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	00030240 	.word	0x00030240

000d5d1c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <network_set_listen_timeout+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030240 	.word	0x00030240

000d5d2c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <network_get_listen_timeout+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030240 	.word	0x00030240

000d5d3c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <network_is_on+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030240 	.word	0x00030240

000d5d4c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <network_is_off+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030240 	.word	0x00030240

000d5d5c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <malloc+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	681b      	ldr	r3, [r3, #0]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	0003021c 	.word	0x0003021c

000d5d6c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <free+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	685b      	ldr	r3, [r3, #4]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	0003021c 	.word	0x0003021c

000d5d7c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <realloc+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	689b      	ldr	r3, [r3, #8]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	0003021c 	.word	0x0003021c

000d5d8c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <vsnprintf+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	0003021c 	.word	0x0003021c

000d5d9c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <abort+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	0003021c 	.word	0x0003021c

000d5dac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <_malloc_r+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	0003021c 	.word	0x0003021c

000d5dbc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <newlib_impure_ptr_callback+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	0003021c 	.word	0x0003021c

000d5dcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5dcc:	2100      	movs	r1, #0
   d5dce:	f7ff bf19 	b.w	d5c04 <system_delay_ms>

000d5dd2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5dd2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5dd4:	6883      	ldr	r3, [r0, #8]
   d5dd6:	4604      	mov	r4, r0
   d5dd8:	b90b      	cbnz	r3, d5dde <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5dda:	f002 fd49 	bl	d8870 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5dde:	68c3      	ldr	r3, [r0, #12]
   d5de0:	4798      	blx	r3
      if (_M_manager)
   d5de2:	68a3      	ldr	r3, [r4, #8]
   d5de4:	b11b      	cbz	r3, d5dee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5de6:	2203      	movs	r2, #3
   d5de8:	4621      	mov	r1, r4
   d5dea:	4620      	mov	r0, r4
   d5dec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5dee:	4620      	mov	r0, r4
   d5df0:	2110      	movs	r1, #16
}
   d5df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5df6:	f002 bd35 	b.w	d8864 <_ZdlPvj>

000d5dfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5dfa:	b510      	push	{r4, lr}
          _M_dispose();
   d5dfc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5dfe:	4604      	mov	r4, r0
          _M_dispose();
   d5e00:	689b      	ldr	r3, [r3, #8]
   d5e02:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e04:	68a3      	ldr	r3, [r4, #8]
   d5e06:	3b01      	subs	r3, #1
   d5e08:	60a3      	str	r3, [r4, #8]
   d5e0a:	b92b      	cbnz	r3, d5e18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5e0c:	6823      	ldr	r3, [r4, #0]
   d5e0e:	4620      	mov	r0, r4
   d5e10:	68db      	ldr	r3, [r3, #12]
    }
   d5e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5e16:	4718      	bx	r3
    }
   d5e18:	bd10      	pop	{r4, pc}

000d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5e1a:	680b      	ldr	r3, [r1, #0]
   d5e1c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5e1e:	b113      	cbz	r3, d5e26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5e20:	685a      	ldr	r2, [r3, #4]
   d5e22:	3201      	adds	r2, #1
   d5e24:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5e26:	4770      	bx	lr

000d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5e2c:	6800      	ldr	r0, [r0, #0]
   d5e2e:	b128      	cbz	r0, d5e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5e30:	6843      	ldr	r3, [r0, #4]
   d5e32:	3b01      	subs	r3, #1
   d5e34:	6043      	str	r3, [r0, #4]
   d5e36:	b90b      	cbnz	r3, d5e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5e38:	f7ff ffdf 	bl	d5dfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	bd10      	pop	{r4, pc}

000d5e40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e40:	4802      	ldr	r0, [pc, #8]	; (d5e4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5e42:	2300      	movs	r3, #0
   d5e44:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5e46:	f7ff bd0b 	b.w	d5860 <os_mutex_recursive_create>
   d5e4a:	bf00      	nop
   d5e4c:	2003e544 	.word	0x2003e544

000d5e50 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5e50:	2200      	movs	r2, #0
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	4611      	mov	r1, r2
   d5e56:	f7ff bf39 	b.w	d5ccc <network_ready>

000d5e5a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5e5a:	2200      	movs	r2, #0
   d5e5c:	6840      	ldr	r0, [r0, #4]
   d5e5e:	4611      	mov	r1, r2
   d5e60:	f7ff bf54 	b.w	d5d0c <network_listening>

000d5e64 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5e64:	2200      	movs	r2, #0
   d5e66:	6840      	ldr	r0, [r0, #4]
   d5e68:	4611      	mov	r1, r2
   d5e6a:	f7ff bf5f 	b.w	d5d2c <network_get_listen_timeout>

000d5e6e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5e6e:	6840      	ldr	r0, [r0, #4]
   d5e70:	2200      	movs	r2, #0
   d5e72:	f7ff bf53 	b.w	d5d1c <network_set_listen_timeout>

000d5e76 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	2200      	movs	r2, #0
   d5e7a:	f081 0101 	eor.w	r1, r1, #1
   d5e7e:	f7ff bf3d 	b.w	d5cfc <network_listen>

000d5e82 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5e82:	2300      	movs	r3, #0
   d5e84:	6840      	ldr	r0, [r0, #4]
   d5e86:	461a      	mov	r2, r3
   d5e88:	4619      	mov	r1, r3
   d5e8a:	f7ff bf2f 	b.w	d5cec <network_off>

000d5e8e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5e8e:	2300      	movs	r3, #0
   d5e90:	6840      	ldr	r0, [r0, #4]
   d5e92:	461a      	mov	r2, r3
   d5e94:	4619      	mov	r1, r3
   d5e96:	f7ff bf21 	b.w	d5cdc <network_on>

000d5e9a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	4611      	mov	r1, r2
   d5ea0:	f7ff bf04 	b.w	d5cac <network_connecting>

000d5ea4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ea4:	6840      	ldr	r0, [r0, #4]
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	2102      	movs	r1, #2
   d5eaa:	f7ff bf07 	b.w	d5cbc <network_disconnect>

000d5eae <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5eae:	2300      	movs	r3, #0
   d5eb0:	6840      	ldr	r0, [r0, #4]
   d5eb2:	461a      	mov	r2, r3
   d5eb4:	f7ff bef2 	b.w	d5c9c <network_connect>

000d5eb8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d5eba:	4b1b      	ldr	r3, [pc, #108]	; (d5f28 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5ebc:	6003      	str	r3, [r0, #0]
   d5ebe:	2500      	movs	r5, #0
   d5ec0:	460f      	mov	r7, r1
   d5ec2:	3330      	adds	r3, #48	; 0x30
   d5ec4:	2618      	movs	r6, #24
   d5ec6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5eca:	b089      	sub	sp, #36	; 0x24
   d5ecc:	6043      	str	r3, [r0, #4]
   d5ece:	4632      	mov	r2, r6
   d5ed0:	4629      	mov	r1, r5
   d5ed2:	4604      	mov	r4, r0
   d5ed4:	3010      	adds	r0, #16
   d5ed6:	f003 f97f 	bl	d91d8 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5eda:	6878      	ldr	r0, [r7, #4]
   d5edc:	462a      	mov	r2, r5
   d5ede:	4629      	mov	r1, r5
   d5ee0:	f7ff fef4 	bl	d5ccc <network_ready>
   d5ee4:	b918      	cbnz	r0, d5eee <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d5ee6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d5ee8:	4620      	mov	r0, r4
   d5eea:	b009      	add	sp, #36	; 0x24
   d5eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d5eee:	4629      	mov	r1, r5
   d5ef0:	4632      	mov	r2, r6
   d5ef2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d5ef4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d5ef8:	f003 f96e 	bl	d91d8 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5efc:	a902      	add	r1, sp, #8
   d5efe:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d5f00:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5f04:	f7ff fca4 	bl	d5850 <cellular_signal>
   d5f08:	b110      	cbz	r0, d5f10 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d5f0a:	2301      	movs	r3, #1
   d5f0c:	60a3      	str	r3, [r4, #8]
            return sig;
   d5f0e:	e7eb      	b.n	d5ee8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d5f10:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5f12:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d5f14:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5f16:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5f18:	b90b      	cbnz	r3, d5f1e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d5f1a:	2302      	movs	r3, #2
   d5f1c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d5f1e:	a902      	add	r1, sp, #8
   d5f20:	4620      	mov	r0, r4
   d5f22:	f000 f8c0 	bl	d60a6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d5f26:	e7df      	b.n	d5ee8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d5f28:	000d96d0 	.word	0x000d96d0

000d5f2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5f2c:	4b08      	ldr	r3, [pc, #32]	; (d5f50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5f2e:	b510      	push	{r4, lr}
   d5f30:	2428      	movs	r4, #40	; 0x28
   d5f32:	4622      	mov	r2, r4
   d5f34:	4618      	mov	r0, r3
   d5f36:	2100      	movs	r1, #0
   d5f38:	f003 f94e 	bl	d91d8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f3c:	4b05      	ldr	r3, [pc, #20]	; (d5f54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5f3e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5f44:	6042      	str	r2, [r0, #4]
   d5f46:	2204      	movs	r2, #4
   d5f48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5f4a:	4a03      	ldr	r2, [pc, #12]	; (d5f58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5f4c:	601a      	str	r2, [r3, #0]
   d5f4e:	bd10      	pop	{r4, pc}
   d5f50:	2003e550 	.word	0x2003e550
   d5f54:	2003e548 	.word	0x2003e548
   d5f58:	000d9694 	.word	0x000d9694

000d5f5c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5f5c:	4770      	bx	lr

000d5f5e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5f5e:	7d00      	ldrb	r0, [r0, #20]
   d5f60:	4770      	bx	lr

000d5f62 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d5f62:	7d03      	ldrb	r3, [r0, #20]
   d5f64:	b14b      	cbz	r3, d5f7a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d5f66:	6983      	ldr	r3, [r0, #24]
   d5f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5f6c:	d005      	beq.n	d5f7a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d5f6e:	6a00      	ldr	r0, [r0, #32]
   d5f70:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d5f74:	bf18      	it	ne
   d5f76:	2001      	movne	r0, #1
   d5f78:	4770      	bx	lr
   d5f7a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d5f7c:	4770      	bx	lr

000d5f7e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d5f7e:	6803      	ldr	r3, [r0, #0]
   d5f80:	6a1b      	ldr	r3, [r3, #32]
   d5f82:	4718      	bx	r3

000d5f84 <_ZN14CellularSignalD0Ev>:
   d5f84:	b510      	push	{r4, lr}
   d5f86:	2128      	movs	r1, #40	; 0x28
   d5f88:	4604      	mov	r4, r0
   d5f8a:	f002 fc6b 	bl	d8864 <_ZdlPvj>
   d5f8e:	4620      	mov	r0, r4
   d5f90:	bd10      	pop	{r4, pc}
	...

000d5f94 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5f94:	7d03      	ldrb	r3, [r0, #20]
   d5f96:	b17b      	cbz	r3, d5fb8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5f98:	69c3      	ldr	r3, [r0, #28]
   d5f9a:	2b00      	cmp	r3, #0
   d5f9c:	db0c      	blt.n	d5fb8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5f9e:	ee07 3a90 	vmov	s15, r3
   d5fa2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5fc0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5faa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5fae:	eddf 7a05 	vldr	s15, [pc, #20]	; d5fc4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5fb2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5fb6:	4770      	bx	lr
    return -1.0f;
   d5fb8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5fbc:	4770      	bx	lr
   d5fbe:	bf00      	nop
   d5fc0:	477fff00 	.word	0x477fff00
   d5fc4:	42c80000 	.word	0x42c80000

000d5fc8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5fc8:	7d03      	ldrb	r3, [r0, #20]
   d5fca:	b163      	cbz	r3, d5fe6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d5fcc:	6983      	ldr	r3, [r0, #24]
   d5fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5fd2:	d008      	beq.n	d5fe6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d5fd4:	ee07 3a90 	vmov	s15, r3
   d5fd8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5fec <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5fe0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5fe4:	4770      	bx	lr
    return 0.0f;
   d5fe6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5ff0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d5fea:	4770      	bx	lr
   d5fec:	42c80000 	.word	0x42c80000
   d5ff0:	00000000 	.word	0x00000000

000d5ff4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5ff4:	7d03      	ldrb	r3, [r0, #20]
   d5ff6:	b17b      	cbz	r3, d6018 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5ffa:	2b00      	cmp	r3, #0
   d5ffc:	db0c      	blt.n	d6018 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5ffe:	ee07 3a90 	vmov	s15, r3
   d6002:	ed9f 7a07 	vldr	s14, [pc, #28]	; d6020 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d600a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d600e:	eddf 7a05 	vldr	s15, [pc, #20]	; d6024 <_ZNK14CellularSignal10getQualityEv+0x30>
   d6012:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6016:	4770      	bx	lr
    return -1.0f;
   d6018:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d601c:	4770      	bx	lr
   d601e:	bf00      	nop
   d6020:	477fff00 	.word	0x477fff00
   d6024:	42c80000 	.word	0x42c80000

000d6028 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6028:	7d03      	ldrb	r3, [r0, #20]
   d602a:	b163      	cbz	r3, d6046 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d602c:	6a03      	ldr	r3, [r0, #32]
   d602e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6032:	d008      	beq.n	d6046 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d6034:	ee07 3a90 	vmov	s15, r3
   d6038:	ed9f 7a04 	vldr	s14, [pc, #16]	; d604c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d603c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6040:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6044:	4770      	bx	lr
    return 0.0f;
   d6046:	ed9f 0a02 	vldr	s0, [pc, #8]	; d6050 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d604a:	4770      	bx	lr
   d604c:	42c80000 	.word	0x42c80000
   d6050:	00000000 	.word	0x00000000

000d6054 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d6054:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d6056:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d6058:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d605a:	da0a      	bge.n	d6072 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d605c:	212d      	movs	r1, #45	; 0x2d
   d605e:	f001 ff37 	bl	d7ed0 <_ZN5Print5printEc>
            val = -n;
   d6062:	4261      	negs	r1, r4
            t = print('-');
   d6064:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6066:	220a      	movs	r2, #10
   d6068:	4630      	mov	r0, r6
   d606a:	f001 ff4a 	bl	d7f02 <_ZN5Print11printNumberEmh>
    }
}
   d606e:	4428      	add	r0, r5
   d6070:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d6072:	4621      	mov	r1, r4
        size_t t = 0;
   d6074:	2500      	movs	r5, #0
   d6076:	e7f6      	b.n	d6066 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d6078 <_ZNK14CellularSignal7printToER5Print>:
{
   d6078:	b570      	push	{r4, r5, r6, lr}
   d607a:	460c      	mov	r4, r1
   d607c:	4605      	mov	r5, r0
   d607e:	6881      	ldr	r1, [r0, #8]
   d6080:	4620      	mov	r0, r4
   d6082:	f7ff ffe7 	bl	d6054 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d6086:	212c      	movs	r1, #44	; 0x2c
   d6088:	4606      	mov	r6, r0
   d608a:	4620      	mov	r0, r4
   d608c:	f001 ff20 	bl	d7ed0 <_ZN5Print5printEc>
   d6090:	68e9      	ldr	r1, [r5, #12]
   d6092:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d6094:	4620      	mov	r0, r4
   d6096:	f7ff ffdd 	bl	d6054 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d609a:	4430      	add	r0, r6
   d609c:	bd70      	pop	{r4, r5, r6, pc}

000d609e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d609e:	f1a0 0004 	sub.w	r0, r0, #4
   d60a2:	f7ff bfe9 	b.w	d6078 <_ZNK14CellularSignal7printToER5Print>

000d60a6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d60a6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d60a8:	460d      	mov	r5, r1
   d60aa:	f100 0410 	add.w	r4, r0, #16
   d60ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60b2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d60b6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d60ba:	2001      	movs	r0, #1
   d60bc:	bd30      	pop	{r4, r5, pc}

000d60be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d60be:	4770      	bx	lr

000d60c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d60c0:	2000      	movs	r0, #0
   d60c2:	4770      	bx	lr

000d60c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d60c4:	b510      	push	{r4, lr}
   d60c6:	2110      	movs	r1, #16
   d60c8:	4604      	mov	r4, r0
   d60ca:	f002 fbcb 	bl	d8864 <_ZdlPvj>
   d60ce:	4620      	mov	r0, r4
   d60d0:	bd10      	pop	{r4, pc}

000d60d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d60d2:	b508      	push	{r3, lr}
      { delete this; }
   d60d4:	f7ff fff6 	bl	d60c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d60d8:	bd08      	pop	{r3, pc}

000d60da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d60da:	b510      	push	{r4, lr}
      if (_M_manager)
   d60dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d60de:	4604      	mov	r4, r0
      if (_M_manager)
   d60e0:	b113      	cbz	r3, d60e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60e2:	2203      	movs	r2, #3
   d60e4:	4601      	mov	r1, r0
   d60e6:	4798      	blx	r3
    }
   d60e8:	4620      	mov	r0, r4
   d60ea:	bd10      	pop	{r4, pc}

000d60ec <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d60ec:	b530      	push	{r4, r5, lr}
        type_(type) {
   d60ee:	2200      	movs	r2, #0
   d60f0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d60f4:	6002      	str	r2, [r0, #0]
   d60f6:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d60f8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d60fa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d60fc:	680c      	ldr	r4, [r1, #0]
   d60fe:	8085      	strh	r5, [r0, #4]
   d6100:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6102:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6104:	bd30      	pop	{r4, r5, pc}

000d6106 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6106:	b510      	push	{r4, lr}
   d6108:	4604      	mov	r4, r0
    free((void*)msg_);
   d610a:	6800      	ldr	r0, [r0, #0]
   d610c:	f7ff fe2e 	bl	d5d6c <free>
}
   d6110:	4620      	mov	r0, r4
   d6112:	bd10      	pop	{r4, pc}

000d6114 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6114:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6116:	68c4      	ldr	r4, [r0, #12]
   d6118:	b1f4      	cbz	r4, d6158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d611a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d611c:	2b02      	cmp	r3, #2
   d611e:	d103      	bne.n	d6128 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6120:	f104 000c 	add.w	r0, r4, #12
   d6124:	f7ff ffef 	bl	d6106 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6128:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d612a:	b135      	cbz	r5, d613a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d612c:	4628      	mov	r0, r5
   d612e:	f7ff ffd4 	bl	d60da <_ZNSt14_Function_baseD1Ev>
   d6132:	2110      	movs	r1, #16
   d6134:	4628      	mov	r0, r5
   d6136:	f002 fb95 	bl	d8864 <_ZdlPvj>
   d613a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d613c:	b135      	cbz	r5, d614c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d613e:	4628      	mov	r0, r5
   d6140:	f7ff ffcb 	bl	d60da <_ZNSt14_Function_baseD1Ev>
   d6144:	2110      	movs	r1, #16
   d6146:	4628      	mov	r0, r5
   d6148:	f002 fb8c 	bl	d8864 <_ZdlPvj>
   d614c:	4620      	mov	r0, r4
   d614e:	2114      	movs	r1, #20
   d6150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6154:	f002 bb86 	b.w	d8864 <_ZdlPvj>
   d6158:	bd38      	pop	{r3, r4, r5, pc}

000d615a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d615a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d615c:	460e      	mov	r6, r1
   d615e:	4604      	mov	r4, r0
   d6160:	f856 3b04 	ldr.w	r3, [r6], #4
   d6164:	9300      	str	r3, [sp, #0]
   d6166:	460d      	mov	r5, r1
   d6168:	a801      	add	r0, sp, #4
   d616a:	4631      	mov	r1, r6
   d616c:	f7ff fe55 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6170:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6172:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6174:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6176:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6178:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d617a:	2300      	movs	r3, #0
   d617c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d617e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6180:	f7ff fe52 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6184:	4630      	mov	r0, r6
   d6186:	f7ff fe4f 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d618a:	4628      	mov	r0, r5
   d618c:	2108      	movs	r1, #8
   d618e:	f002 fb69 	bl	d8864 <_ZdlPvj>
        return p;
    }
   d6192:	4620      	mov	r0, r4
   d6194:	b002      	add	sp, #8
   d6196:	bd70      	pop	{r4, r5, r6, pc}

000d6198 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6198:	b513      	push	{r0, r1, r4, lr}
   d619a:	460b      	mov	r3, r1
   d619c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d619e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d61a2:	466c      	mov	r4, sp
   d61a4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61ac:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61b0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d61b4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61b8:	b002      	add	sp, #8
   d61ba:	bd10      	pop	{r4, pc}

000d61bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d61bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61be:	b510      	push	{r4, lr}
      if (_M_empty())
   d61c0:	b90a      	cbnz	r2, d61c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d61c2:	f002 fb55 	bl	d8870 <_ZSt25__throw_bad_function_callv>
    }
   d61c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61ca:	68c3      	ldr	r3, [r0, #12]
   d61cc:	4718      	bx	r3

000d61ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d61d0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d61d2:	f100 0110 	add.w	r1, r0, #16
   d61d6:	f7ff fff1 	bl	d61bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d61da:	bd08      	pop	{r3, pc}

000d61dc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d61dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61de:	b510      	push	{r4, lr}
      if (_M_empty())
   d61e0:	b90a      	cbnz	r2, d61e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d61e2:	f002 fb45 	bl	d8870 <_ZSt25__throw_bad_function_callv>
    }
   d61e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61ea:	68c3      	ldr	r3, [r0, #12]
   d61ec:	4718      	bx	r3

000d61ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d61f0:	6800      	ldr	r0, [r0, #0]
   d61f2:	f100 0110 	add.w	r1, r0, #16
   d61f6:	f7ff fff1 	bl	d61dc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d61fa:	bd08      	pop	{r3, pc}

000d61fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d61fc:	b538      	push	{r3, r4, r5, lr}
   d61fe:	2300      	movs	r3, #0
   d6200:	4604      	mov	r4, r0
   d6202:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6204:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6206:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6208:	f7fd ff45 	bl	d4096 <_Znwj>
   d620c:	b128      	cbz	r0, d621a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d620e:	2301      	movs	r3, #1
   d6210:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6214:	4b02      	ldr	r3, [pc, #8]	; (d6220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6216:	6003      	str	r3, [r0, #0]
   d6218:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d621a:	6020      	str	r0, [r4, #0]
	}
   d621c:	4620      	mov	r0, r4
   d621e:	bd38      	pop	{r3, r4, r5, pc}
   d6220:	000d970c 	.word	0x000d970c

000d6224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6224:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6226:	2300      	movs	r3, #0
   d6228:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d622a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d622c:	4604      	mov	r4, r0
   d622e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6230:	b12b      	cbz	r3, d623e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6232:	2202      	movs	r2, #2
   d6234:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6236:	68eb      	ldr	r3, [r5, #12]
   d6238:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d623a:	68ab      	ldr	r3, [r5, #8]
   d623c:	60a3      	str	r3, [r4, #8]
    }
   d623e:	4620      	mov	r0, r4
   d6240:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6244:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6246:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6248:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d624a:	4668      	mov	r0, sp
   d624c:	f7ff ff4e 	bl	d60ec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6250:	f04f 0302 	mov.w	r3, #2
   d6254:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6258:	2a00      	cmp	r2, #0
   d625a:	d103      	bne.n	d6264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d625c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6260:	2900      	cmp	r1, #0
   d6262:	d1f7      	bne.n	d6254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6264:	d125      	bne.n	d62b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6266:	f104 050c 	add.w	r5, r4, #12
   d626a:	4669      	mov	r1, sp
   d626c:	4628      	mov	r0, r5
   d626e:	f7ff ff3d 	bl	d60ec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6272:	f3bf 8f5b 	dmb	ish
   d6276:	2301      	movs	r3, #1
   d6278:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d627a:	2000      	movs	r0, #0
   d627c:	f104 0308 	add.w	r3, r4, #8
   d6280:	f3bf 8f5b 	dmb	ish
   d6284:	e853 6f00 	ldrex	r6, [r3]
   d6288:	e843 0200 	strex	r2, r0, [r3]
   d628c:	2a00      	cmp	r2, #0
   d628e:	d1f9      	bne.n	d6284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6290:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6294:	b16e      	cbz	r6, d62b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6296:	f7ff fcbd 	bl	d5c14 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d629a:	b178      	cbz	r0, d62bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d629c:	4629      	mov	r1, r5
   d629e:	4630      	mov	r0, r6
   d62a0:	f7ff ff8c 	bl	d61bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d62a4:	4630      	mov	r0, r6
   d62a6:	f7ff ff18 	bl	d60da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d62aa:	2110      	movs	r1, #16
   d62ac:	4630      	mov	r0, r6
   d62ae:	f002 fad9 	bl	d8864 <_ZdlPvj>
        p_->setError(std::move(error));
   d62b2:	4668      	mov	r0, sp
   d62b4:	f7ff ff27 	bl	d6106 <_ZN8particle5ErrorD1Ev>
    }
   d62b8:	b009      	add	sp, #36	; 0x24
   d62ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d62bc:	4631      	mov	r1, r6
   d62be:	a802      	add	r0, sp, #8
   d62c0:	f7ff ffb0 	bl	d6224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d62c4:	68e0      	ldr	r0, [r4, #12]
   d62c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d62ca:	b108      	cbz	r0, d62d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d62cc:	f002 ffda 	bl	d9284 <strdup>
        type_(type) {
   d62d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d62d2:	2010      	movs	r0, #16
   d62d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d62d8:	f7fd fedd 	bl	d4096 <_Znwj>
   d62dc:	4605      	mov	r5, r0
   d62de:	b1e8      	cbz	r0, d631c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d62e0:	2700      	movs	r7, #0
   d62e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62e4:	2018      	movs	r0, #24
   d62e6:	f7fd fed6 	bl	d4096 <_Znwj>
   d62ea:	4604      	mov	r4, r0
   d62ec:	b188      	cbz	r0, d6312 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d62ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d62f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d62f2:	a802      	add	r0, sp, #8
   d62f4:	f7ff ff50 	bl	d6198 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d62fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d62fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6300:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6302:	a906      	add	r1, sp, #24
   d6304:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6306:	60e3      	str	r3, [r4, #12]
   d6308:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d630c:	9205      	str	r2, [sp, #20]
   d630e:	f7ff feed 	bl	d60ec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6312:	4b08      	ldr	r3, [pc, #32]	; (d6334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6314:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6316:	4b08      	ldr	r3, [pc, #32]	; (d6338 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6318:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d631a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d631c:	a806      	add	r0, sp, #24
   d631e:	f7ff fef2 	bl	d6106 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6322:	a802      	add	r0, sp, #8
   d6324:	f7ff fed9 	bl	d60da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6328:	2200      	movs	r2, #0
   d632a:	4629      	mov	r1, r5
   d632c:	4803      	ldr	r0, [pc, #12]	; (d633c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d632e:	f7ff fc79 	bl	d5c24 <application_thread_invoke>
   d6332:	e7b7      	b.n	d62a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6334:	000d61cf 	.word	0x000d61cf
   d6338:	000d6465 	.word	0x000d6465
   d633c:	000d5dd3 	.word	0x000d5dd3

000d6340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6344:	b08a      	sub	sp, #40	; 0x28
   d6346:	4605      	mov	r5, r0
   d6348:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d634c:	460c      	mov	r4, r1
   d634e:	4617      	mov	r7, r2
   d6350:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6352:	f7ff fc8b 	bl	d5c6c <spark_cloud_flag_connected>
   d6356:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6358:	4682      	mov	sl, r0
   d635a:	bb38      	cbnz	r0, d63ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d635c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6360:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6362:	a905      	add	r1, sp, #20
   d6364:	4630      	mov	r0, r6
   d6366:	f8ad 3018 	strh.w	r3, [sp, #24]
   d636a:	f7ff febf 	bl	d60ec <_ZN8particle5ErrorC1EOS0_>
   d636e:	2014      	movs	r0, #20
   d6370:	f7fd fe91 	bl	d4096 <_Znwj>
   d6374:	4604      	mov	r4, r0
   d6376:	b148      	cbz	r0, d638c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6378:	2302      	movs	r3, #2
   d637a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d637c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d637e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6382:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6384:	4631      	mov	r1, r6
   d6386:	300c      	adds	r0, #12
   d6388:	f7ff feb0 	bl	d60ec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d638c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d638e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6390:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6394:	f7ff ff32 	bl	d61fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6398:	4630      	mov	r0, r6
   d639a:	f7ff feb4 	bl	d6106 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d639e:	a805      	add	r0, sp, #20
   d63a0:	f7ff feb1 	bl	d6106 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d63a4:	4628      	mov	r0, r5
   d63a6:	b00a      	add	sp, #40	; 0x28
   d63a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d63ac:	230c      	movs	r3, #12
   d63ae:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d63b2:	2014      	movs	r0, #20
   d63b4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d63b8:	9307      	str	r3, [sp, #28]
   d63ba:	f7fd fe6c 	bl	d4096 <_Znwj>
   d63be:	4601      	mov	r1, r0
   d63c0:	b128      	cbz	r0, d63ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d63c2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d63c6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63ca:	f880 a001 	strb.w	sl, [r0, #1]
   d63ce:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63d0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d63d2:	f7ff ff13 	bl	d61fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d63d6:	4b22      	ldr	r3, [pc, #136]	; (d6460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d63d8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d63da:	2008      	movs	r0, #8
   d63dc:	f7fd fe5b 	bl	d4096 <_Znwj>
   d63e0:	4682      	mov	sl, r0
   d63e2:	b128      	cbz	r0, d63f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63e4:	9b03      	ldr	r3, [sp, #12]
   d63e6:	f840 3b04 	str.w	r3, [r0], #4
   d63ea:	a904      	add	r1, sp, #16
   d63ec:	f7ff fd15 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d63f0:	9600      	str	r6, [sp, #0]
   d63f2:	fa5f f389 	uxtb.w	r3, r9
   d63f6:	4642      	mov	r2, r8
   d63f8:	4639      	mov	r1, r7
   d63fa:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d63fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6400:	f7ff fc3c 	bl	d5c7c <spark_send_event>
   d6404:	b9b8      	cbnz	r0, d6436 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6406:	9b03      	ldr	r3, [sp, #12]
   d6408:	785b      	ldrb	r3, [r3, #1]
   d640a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d640e:	b993      	cbnz	r3, d6436 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6410:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6414:	a905      	add	r1, sp, #20
   d6416:	a803      	add	r0, sp, #12
   d6418:	9205      	str	r2, [sp, #20]
   d641a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d641e:	f7ff ff11 	bl	d6244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6422:	a805      	add	r0, sp, #20
   d6424:	f7ff fe6f 	bl	d6106 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6428:	a805      	add	r0, sp, #20
   d642a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d642c:	f7ff fe95 	bl	d615a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6430:	a806      	add	r0, sp, #24
   d6432:	f7ff fcf9 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6436:	9b03      	ldr	r3, [sp, #12]
   d6438:	9305      	str	r3, [sp, #20]
   d643a:	a904      	add	r1, sp, #16
   d643c:	a806      	add	r0, sp, #24
   d643e:	f7ff fcec 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6442:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6444:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6446:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6448:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d644a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d644c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d644e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6450:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6452:	f7ff fce9 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6456:	a804      	add	r0, sp, #16
   d6458:	f7ff fce6 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d645c:	e7a2      	b.n	d63a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d645e:	bf00      	nop
   d6460:	000d6529 	.word	0x000d6529

000d6464 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6464:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6468:	4605      	mov	r5, r0
	  switch (__op)
   d646a:	d007      	beq.n	d647c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d646c:	2a03      	cmp	r2, #3
   d646e:	d018      	beq.n	d64a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6470:	2a01      	cmp	r2, #1
   d6472:	d101      	bne.n	d6478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6474:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6476:	6003      	str	r3, [r0, #0]
	}
   d6478:	2000      	movs	r0, #0
   d647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d647c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d647e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6480:	f7fd fe09 	bl	d4096 <_Znwj>
   d6484:	4604      	mov	r4, r0
   d6486:	b150      	cbz	r0, d649e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6488:	4631      	mov	r1, r6
   d648a:	f7ff fecb 	bl	d6224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d648e:	6930      	ldr	r0, [r6, #16]
   d6490:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6494:	b108      	cbz	r0, d649a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6496:	f002 fef5 	bl	d9284 <strdup>
        type_(type) {
   d649a:	6120      	str	r0, [r4, #16]
   d649c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d649e:	602c      	str	r4, [r5, #0]
	}
   d64a0:	e7ea      	b.n	d6478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d64a2:	6804      	ldr	r4, [r0, #0]
   d64a4:	2c00      	cmp	r4, #0
   d64a6:	d0e7      	beq.n	d6478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d64a8:	f104 0010 	add.w	r0, r4, #16
   d64ac:	f7ff fe2b 	bl	d6106 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d64b0:	4620      	mov	r0, r4
   d64b2:	f7ff fe12 	bl	d60da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d64b6:	2118      	movs	r1, #24
   d64b8:	4620      	mov	r0, r4
   d64ba:	f002 f9d3 	bl	d8864 <_ZdlPvj>
   d64be:	e7db      	b.n	d6478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d64c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d64c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d64c2:	2300      	movs	r3, #0
   d64c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d64c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d64c8:	4604      	mov	r4, r0
   d64ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d64cc:	b12b      	cbz	r3, d64da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64ce:	2202      	movs	r2, #2
   d64d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64d2:	68eb      	ldr	r3, [r5, #12]
   d64d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64d6:	68ab      	ldr	r3, [r5, #8]
   d64d8:	60a3      	str	r3, [r4, #8]
    }
   d64da:	4620      	mov	r0, r4
   d64dc:	bd38      	pop	{r3, r4, r5, pc}

000d64de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d64de:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d64e0:	b570      	push	{r4, r5, r6, lr}
   d64e2:	4604      	mov	r4, r0
	  switch (__op)
   d64e4:	d007      	beq.n	d64f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d64e6:	2a03      	cmp	r2, #3
   d64e8:	d012      	beq.n	d6510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d64ea:	2a01      	cmp	r2, #1
   d64ec:	d101      	bne.n	d64f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d64ee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d64f0:	6003      	str	r3, [r0, #0]
	}
   d64f2:	2000      	movs	r0, #0
   d64f4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d64f6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d64f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d64fa:	f7fd fdcc 	bl	d4096 <_Znwj>
   d64fe:	4605      	mov	r5, r0
   d6500:	b120      	cbz	r0, d650c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6502:	4631      	mov	r1, r6
   d6504:	f7ff ffdc 	bl	d64c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6508:	7c33      	ldrb	r3, [r6, #16]
   d650a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d650c:	6025      	str	r5, [r4, #0]
	}
   d650e:	e7f0      	b.n	d64f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6510:	6804      	ldr	r4, [r0, #0]
   d6512:	2c00      	cmp	r4, #0
   d6514:	d0ed      	beq.n	d64f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6516:	4620      	mov	r0, r4
   d6518:	f7ff fddf 	bl	d60da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d651c:	2114      	movs	r1, #20
   d651e:	4620      	mov	r0, r4
   d6520:	f002 f9a0 	bl	d8864 <_ZdlPvj>
   d6524:	e7e5      	b.n	d64f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6528 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6528:	b5f0      	push	{r4, r5, r6, r7, lr}
   d652a:	b089      	sub	sp, #36	; 0x24
   d652c:	4604      	mov	r4, r0
   d652e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6530:	a801      	add	r0, sp, #4
   d6532:	4611      	mov	r1, r2
   d6534:	f7ff fe11 	bl	d615a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6538:	b1a4      	cbz	r4, d6564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d653a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d653c:	b11d      	cbz	r5, d6546 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d653e:	4628      	mov	r0, r5
   d6540:	f002 fea0 	bl	d9284 <strdup>
   d6544:	4605      	mov	r5, r0
   d6546:	a801      	add	r0, sp, #4
   d6548:	a903      	add	r1, sp, #12
        type_(type) {
   d654a:	9503      	str	r5, [sp, #12]
   d654c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6550:	f7ff fe78 	bl	d6244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6554:	a803      	add	r0, sp, #12
   d6556:	f7ff fdd6 	bl	d6106 <_ZN8particle5ErrorD1Ev>
   d655a:	a802      	add	r0, sp, #8
   d655c:	f7ff fc64 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6560:	b009      	add	sp, #36	; 0x24
   d6562:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6564:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6566:	2301      	movs	r3, #1
   d6568:	e8d5 2f4f 	ldrexb	r2, [r5]
   d656c:	2a00      	cmp	r2, #0
   d656e:	d103      	bne.n	d6578 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6570:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6574:	2900      	cmp	r1, #0
   d6576:	d1f7      	bne.n	d6568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6578:	d1ef      	bne.n	d655a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d657a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d657c:	f3bf 8f5b 	dmb	ish
   d6580:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6582:	1d2b      	adds	r3, r5, #4
   d6584:	f3bf 8f5b 	dmb	ish
   d6588:	e853 6f00 	ldrex	r6, [r3]
   d658c:	e843 4200 	strex	r2, r4, [r3]
   d6590:	2a00      	cmp	r2, #0
   d6592:	d1f9      	bne.n	d6588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6594:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6598:	2e00      	cmp	r6, #0
   d659a:	d0de      	beq.n	d655a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d659c:	4620      	mov	r0, r4
   d659e:	f7ff fb39 	bl	d5c14 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d65a2:	4607      	mov	r7, r0
   d65a4:	b160      	cbz	r0, d65c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65a6:	f105 010c 	add.w	r1, r5, #12
   d65aa:	4630      	mov	r0, r6
   d65ac:	f7ff fe16 	bl	d61dc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d65b0:	4630      	mov	r0, r6
   d65b2:	f7ff fd92 	bl	d60da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65b6:	2110      	movs	r1, #16
   d65b8:	4630      	mov	r0, r6
   d65ba:	f002 f953 	bl	d8864 <_ZdlPvj>
   d65be:	e7cc      	b.n	d655a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65c0:	4631      	mov	r1, r6
   d65c2:	a803      	add	r0, sp, #12
   d65c4:	f7ff ff7c 	bl	d64c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65c8:	7b2b      	ldrb	r3, [r5, #12]
   d65ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65ce:	2010      	movs	r0, #16
   d65d0:	f7fd fd61 	bl	d4096 <_Znwj>
   d65d4:	4605      	mov	r5, r0
   d65d6:	b1d0      	cbz	r0, d660e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d65d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65da:	2014      	movs	r0, #20
   d65dc:	f7fd fd5b 	bl	d4096 <_Znwj>
   d65e0:	4604      	mov	r4, r0
   d65e2:	b178      	cbz	r0, d6604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d65e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d65e6:	4601      	mov	r1, r0
   d65e8:	a803      	add	r0, sp, #12
   d65ea:	f7ff fdd5 	bl	d6198 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d65f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d65f6:	9205      	str	r2, [sp, #20]
   d65f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d65fa:	60e3      	str	r3, [r4, #12]
   d65fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6600:	9206      	str	r2, [sp, #24]
   d6602:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6604:	4b06      	ldr	r3, [pc, #24]	; (d6620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6606:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6608:	4b06      	ldr	r3, [pc, #24]	; (d6624 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d660a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d660c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d660e:	a803      	add	r0, sp, #12
   d6610:	f7ff fd63 	bl	d60da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6614:	2200      	movs	r2, #0
   d6616:	4629      	mov	r1, r5
   d6618:	4803      	ldr	r0, [pc, #12]	; (d6628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d661a:	f7ff fb03 	bl	d5c24 <application_thread_invoke>
   d661e:	e7c7      	b.n	d65b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6620:	000d61ef 	.word	0x000d61ef
   d6624:	000d64df 	.word	0x000d64df
   d6628:	000d5dd3 	.word	0x000d5dd3

000d662c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d662c:	2200      	movs	r2, #0
   d662e:	6840      	ldr	r0, [r0, #4]
   d6630:	4611      	mov	r1, r2
   d6632:	f7ff bb6b 	b.w	d5d0c <network_listening>

000d6636 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6636:	2200      	movs	r2, #0
   d6638:	6840      	ldr	r0, [r0, #4]
   d663a:	4611      	mov	r1, r2
   d663c:	f7ff bb76 	b.w	d5d2c <network_get_listen_timeout>

000d6640 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6640:	6840      	ldr	r0, [r0, #4]
   d6642:	2200      	movs	r2, #0
   d6644:	f7ff bb6a 	b.w	d5d1c <network_set_listen_timeout>

000d6648 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6648:	6840      	ldr	r0, [r0, #4]
   d664a:	2200      	movs	r2, #0
   d664c:	f081 0101 	eor.w	r1, r1, #1
   d6650:	f7ff bb54 	b.w	d5cfc <network_listen>

000d6654 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6654:	2300      	movs	r3, #0
   d6656:	6840      	ldr	r0, [r0, #4]
   d6658:	461a      	mov	r2, r3
   d665a:	4619      	mov	r1, r3
   d665c:	f7ff bb46 	b.w	d5cec <network_off>

000d6660 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6660:	2300      	movs	r3, #0
   d6662:	6840      	ldr	r0, [r0, #4]
   d6664:	461a      	mov	r2, r3
   d6666:	4619      	mov	r1, r3
   d6668:	f7ff bb38 	b.w	d5cdc <network_on>

000d666c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d666c:	2200      	movs	r2, #0
   d666e:	6840      	ldr	r0, [r0, #4]
   d6670:	4611      	mov	r1, r2
   d6672:	f7ff bb2b 	b.w	d5ccc <network_ready>

000d6676 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6676:	2200      	movs	r2, #0
   d6678:	6840      	ldr	r0, [r0, #4]
   d667a:	4611      	mov	r1, r2
   d667c:	f7ff bb16 	b.w	d5cac <network_connecting>

000d6680 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6680:	6840      	ldr	r0, [r0, #4]
   d6682:	2200      	movs	r2, #0
   d6684:	2102      	movs	r1, #2
   d6686:	f7ff bb19 	b.w	d5cbc <network_disconnect>

000d668a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d668a:	2300      	movs	r3, #0
   d668c:	6840      	ldr	r0, [r0, #4]
   d668e:	461a      	mov	r2, r3
   d6690:	f7ff bb04 	b.w	d5c9c <network_connect>

000d6694 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6694:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6696:	2203      	movs	r2, #3
   d6698:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d669a:	4a02      	ldr	r2, [pc, #8]	; (d66a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d669c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d669e:	4770      	bx	lr
   d66a0:	2003e578 	.word	0x2003e578
   d66a4:	000d9728 	.word	0x000d9728

000d66a8 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d66a8:	0909      	lsrs	r1, r1, #4
   d66aa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d66ae:	ee07 1a90 	vmov	s15, r1
   d66b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d66b6:	eddf 7a02 	vldr	s15, [pc, #8]	; d66c0 <_ZN8particle6detail9_getVCellEhh+0x18>
   d66ba:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d66be:	4770      	bx	lr
   d66c0:	44480000 	.word	0x44480000

000d66c4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d66c4:	6800      	ldr	r0, [r0, #0]
   d66c6:	f000 b906 	b.w	d68d6 <_ZN7TwoWire4lockEv>

000d66ca <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d66ca:	b510      	push	{r4, lr}
   d66cc:	4604      	mov	r4, r0
      lock_(_lock) {
   d66ce:	6001      	str	r1, [r0, #0]
   d66d0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d66d2:	b10a      	cbz	r2, d66d8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d66d4:	f7ff fff6 	bl	d66c4 <_ZN9FuelGauge4lockEv>
}
   d66d8:	4620      	mov	r0, r4
   d66da:	bd10      	pop	{r4, pc}

000d66dc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d66dc:	b513      	push	{r0, r1, r4, lr}
   d66de:	4604      	mov	r4, r0
   d66e0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d66e2:	f002 f89b 	bl	d881c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d66e6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d66e8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7ff ffed 	bl	d66ca <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d66f0:	4620      	mov	r0, r4
   d66f2:	b002      	add	sp, #8
   d66f4:	bd10      	pop	{r4, pc}

000d66f6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d66f6:	6800      	ldr	r0, [r0, #0]
   d66f8:	f000 b8f6 	b.w	d68e8 <_ZN7TwoWire6unlockEv>

000d66fc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d66fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6700:	4604      	mov	r4, r0
   d6702:	460d      	mov	r5, r1
   d6704:	4617      	mov	r7, r2
   d6706:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6708:	f7ff ffdc 	bl	d66c4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d670c:	2336      	movs	r3, #54	; 0x36
   d670e:	f88d 3000 	strb.w	r3, [sp]
   d6712:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d6714:	6820      	ldr	r0, [r4, #0]
   d6716:	9301      	str	r3, [sp, #4]
   d6718:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d671c:	230a      	movs	r3, #10
   d671e:	4669      	mov	r1, sp
   d6720:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6722:	f88d 8008 	strb.w	r8, [sp, #8]
   d6726:	f000 f8b7 	bl	d6898 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d672a:	6820      	ldr	r0, [r4, #0]
   d672c:	6803      	ldr	r3, [r0, #0]
   d672e:	4629      	mov	r1, r5
   d6730:	689b      	ldr	r3, [r3, #8]
   d6732:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d6734:	6820      	ldr	r0, [r4, #0]
   d6736:	4641      	mov	r1, r8
   d6738:	f000 f8c6 	bl	d68c8 <_ZN7TwoWire15endTransmissionEh>
   d673c:	4605      	mov	r5, r0
   d673e:	b140      	cbz	r0, d6752 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d6740:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6744:	4620      	mov	r0, r4
   d6746:	f7ff ffd6 	bl	d66f6 <_ZN9FuelGauge6unlockEv>
}
   d674a:	4628      	mov	r0, r5
   d674c:	b004      	add	sp, #16
   d674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d6752:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d6754:	6820      	ldr	r0, [r4, #0]
   d6756:	9301      	str	r3, [sp, #4]
   d6758:	4669      	mov	r1, sp
   d675a:	f000 f86d 	bl	d6838 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d675e:	2802      	cmp	r0, #2
   d6760:	d1ee      	bne.n	d6740 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d6762:	6820      	ldr	r0, [r4, #0]
   d6764:	6803      	ldr	r3, [r0, #0]
   d6766:	695b      	ldr	r3, [r3, #20]
   d6768:	4798      	blx	r3
   d676a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d676c:	6820      	ldr	r0, [r4, #0]
   d676e:	6803      	ldr	r3, [r0, #0]
   d6770:	695b      	ldr	r3, [r3, #20]
   d6772:	4798      	blx	r3
   d6774:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d6776:	e7e5      	b.n	d6744 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d6778 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d6778:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d677a:	2300      	movs	r3, #0
   d677c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d6780:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d6784:	f10d 0206 	add.w	r2, sp, #6
   d6788:	f10d 0307 	add.w	r3, sp, #7
   d678c:	2102      	movs	r1, #2
   d678e:	f7ff ffb5 	bl	d66fc <_ZN9FuelGauge12readRegisterEhRhS0_>
   d6792:	b940      	cbnz	r0, d67a6 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d6794:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6798:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d679c:	b003      	add	sp, #12
   d679e:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d67a2:	f7ff bf81 	b.w	d66a8 <_ZN8particle6detail9_getVCellEhh>
}
   d67a6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d67aa:	b003      	add	sp, #12
   d67ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d67b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d67b0:	4770      	bx	lr

000d67b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67b4:	4606      	mov	r6, r0
   d67b6:	4615      	mov	r5, r2
   d67b8:	460c      	mov	r4, r1
   d67ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67bc:	42bc      	cmp	r4, r7
   d67be:	d006      	beq.n	d67ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67c0:	6833      	ldr	r3, [r6, #0]
   d67c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67c6:	689b      	ldr	r3, [r3, #8]
   d67c8:	4630      	mov	r0, r6
   d67ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d67cc:	e7f6      	b.n	d67bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d67ce:	4628      	mov	r0, r5
   d67d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d67d2:	7c00      	ldrb	r0, [r0, #16]
   d67d4:	2200      	movs	r2, #0
   d67d6:	f7ff b8b3 	b.w	d5940 <hal_i2c_write>

000d67da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d67da:	7c00      	ldrb	r0, [r0, #16]
   d67dc:	2100      	movs	r1, #0
   d67de:	f7ff b8b7 	b.w	d5950 <hal_i2c_available>

000d67e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d67e2:	7c00      	ldrb	r0, [r0, #16]
   d67e4:	2100      	movs	r1, #0
   d67e6:	f7ff b8bb 	b.w	d5960 <hal_i2c_read>

000d67ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d67ea:	7c00      	ldrb	r0, [r0, #16]
   d67ec:	2100      	movs	r1, #0
   d67ee:	f7ff b8bf 	b.w	d5970 <hal_i2c_peek>

000d67f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d67f2:	7c00      	ldrb	r0, [r0, #16]
   d67f4:	2100      	movs	r1, #0
   d67f6:	f7ff b8c3 	b.w	d5980 <hal_i2c_flush>

000d67fa <_ZN7TwoWireD0Ev>:
   d67fa:	b510      	push	{r4, lr}
   d67fc:	2114      	movs	r1, #20
   d67fe:	4604      	mov	r4, r0
   d6800:	f002 f830 	bl	d8864 <_ZdlPvj>
   d6804:	4620      	mov	r0, r4
   d6806:	bd10      	pop	{r4, pc}

000d6808 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6808:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d680a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d680e:	4604      	mov	r4, r0
   d6810:	4608      	mov	r0, r1
   d6812:	2100      	movs	r1, #0
   d6814:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6818:	4b03      	ldr	r3, [pc, #12]	; (d6828 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d681a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d681c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d681e:	4611      	mov	r1, r2
   d6820:	f7ff f8be 	bl	d59a0 <hal_i2c_init>
}
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}
   d6828:	000d9764 	.word	0x000d9764

000d682c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d682c:	2300      	movs	r3, #0
   d682e:	7c00      	ldrb	r0, [r0, #16]
   d6830:	461a      	mov	r2, r3
   d6832:	4619      	mov	r1, r3
   d6834:	f7ff b86c 	b.w	d5910 <hal_i2c_begin>

000d6838 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d683a:	2200      	movs	r2, #0
   d683c:	2314      	movs	r3, #20
   d683e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6842:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6846:	780b      	ldrb	r3, [r1, #0]
   d6848:	f88d 3008 	strb.w	r3, [sp, #8]
   d684c:	684b      	ldr	r3, [r1, #4]
   d684e:	9303      	str	r3, [sp, #12]
   d6850:	68cb      	ldr	r3, [r1, #12]
   d6852:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6854:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6856:	7a0b      	ldrb	r3, [r1, #8]
   d6858:	9305      	str	r3, [sp, #20]
   d685a:	a901      	add	r1, sp, #4
   d685c:	f7ff f8b8 	bl	d59d0 <hal_i2c_request_ex>
}
   d6860:	b007      	add	sp, #28
   d6862:	f85d fb04 	ldr.w	pc, [sp], #4

000d6866 <_ZN7TwoWire11requestFromEhjh>:
{
   d6866:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6868:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d686a:	f88d 1000 	strb.w	r1, [sp]
   d686e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6872:	9103      	str	r1, [sp, #12]
   d6874:	bf18      	it	ne
   d6876:	2301      	movne	r3, #1
   d6878:	4669      	mov	r1, sp
    size_ = size;
   d687a:	9201      	str	r2, [sp, #4]
   d687c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6880:	f7ff ffda 	bl	d6838 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6884:	b005      	add	sp, #20
   d6886:	f85d fb04 	ldr.w	pc, [sp], #4

000d688a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d688a:	2301      	movs	r3, #1
   d688c:	f7ff bfeb 	b.w	d6866 <_ZN7TwoWire11requestFromEhjh>

000d6890 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6890:	7c00      	ldrb	r0, [r0, #16]
   d6892:	2200      	movs	r2, #0
   d6894:	f7ff b844 	b.w	d5920 <hal_i2c_begin_transmission>

000d6898 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d6898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d689a:	2300      	movs	r3, #0
   d689c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d68a0:	684a      	ldr	r2, [r1, #4]
   d68a2:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d68a4:	2314      	movs	r3, #20
    };
   d68a6:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d68a8:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d68ac:	780b      	ldrb	r3, [r1, #0]
    };
   d68ae:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d68b0:	7a0a      	ldrb	r2, [r1, #8]
   d68b2:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d68b4:	7c00      	ldrb	r0, [r0, #16]
    };
   d68b6:	f88d 3008 	strb.w	r3, [sp, #8]
   d68ba:	aa01      	add	r2, sp, #4
   d68bc:	4619      	mov	r1, r3
   d68be:	f7ff f82f 	bl	d5920 <hal_i2c_begin_transmission>
}
   d68c2:	b007      	add	sp, #28
   d68c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d68c8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d68c8:	7c00      	ldrb	r0, [r0, #16]
   d68ca:	2200      	movs	r2, #0
   d68cc:	f7ff b830 	b.w	d5930 <hal_i2c_end_transmission>

000d68d0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d68d0:	2101      	movs	r1, #1
   d68d2:	f7ff bff9 	b.w	d68c8 <_ZN7TwoWire15endTransmissionEh>

000d68d6 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d68d6:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d68d8:	2100      	movs	r1, #0
   d68da:	7c00      	ldrb	r0, [r0, #16]
   d68dc:	f7ff f868 	bl	d59b0 <hal_i2c_lock>
}
   d68e0:	fab0 f080 	clz	r0, r0
   d68e4:	0940      	lsrs	r0, r0, #5
   d68e6:	bd08      	pop	{r3, pc}

000d68e8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d68e8:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d68ea:	2100      	movs	r1, #0
   d68ec:	7c00      	ldrb	r0, [r0, #16]
   d68ee:	f7ff f867 	bl	d59c0 <hal_i2c_unlock>
}
   d68f2:	fab0 f080 	clz	r0, r0
   d68f6:	0940      	lsrs	r0, r0, #5
   d68f8:	bd08      	pop	{r3, pc}

000d68fa <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d68fa:	4770      	bx	lr

000d68fc <_ZN9IPAddressD0Ev>:
   d68fc:	b510      	push	{r4, lr}
   d68fe:	2118      	movs	r1, #24
   d6900:	4604      	mov	r4, r0
   d6902:	f001 ffaf 	bl	d8864 <_ZdlPvj>
   d6906:	4620      	mov	r0, r4
   d6908:	bd10      	pop	{r4, pc}

000d690a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d690a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d690c:	7d03      	ldrb	r3, [r0, #20]
   d690e:	2b06      	cmp	r3, #6
{
   d6910:	b08d      	sub	sp, #52	; 0x34
   d6912:	460e      	mov	r6, r1
   d6914:	f100 0704 	add.w	r7, r0, #4
   d6918:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d691c:	d012      	beq.n	d6944 <_ZNK9IPAddress7printToER5Print+0x3a>
   d691e:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d6922:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6926:	220a      	movs	r2, #10
   d6928:	4630      	mov	r0, r6
   d692a:	f001 faea 	bl	d7f02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d692e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6930:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6932:	d019      	beq.n	d6968 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6934:	2c00      	cmp	r4, #0
   d6936:	d0f4      	beq.n	d6922 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6938:	212e      	movs	r1, #46	; 0x2e
   d693a:	4630      	mov	r0, r6
   d693c:	f001 fac8 	bl	d7ed0 <_ZN5Print5printEc>
   d6940:	4404      	add	r4, r0
   d6942:	e7ee      	b.n	d6922 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6944:	232f      	movs	r3, #47	; 0x2f
   d6946:	466a      	mov	r2, sp
   d6948:	4639      	mov	r1, r7
   d694a:	200a      	movs	r0, #10
		buf[0] = 0;
   d694c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6950:	f7ff f846 	bl	d59e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6954:	4668      	mov	r0, sp
   d6956:	f002 fcb2 	bl	d92be <strlen>
   d695a:	6833      	ldr	r3, [r6, #0]
   d695c:	4602      	mov	r2, r0
   d695e:	68db      	ldr	r3, [r3, #12]
   d6960:	4669      	mov	r1, sp
   d6962:	4630      	mov	r0, r6
   d6964:	4798      	blx	r3
   d6966:	4604      	mov	r4, r0
    }
    return n;
}
   d6968:	4620      	mov	r0, r4
   d696a:	b00d      	add	sp, #52	; 0x34
   d696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6970 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6970:	b510      	push	{r4, lr}
   d6972:	4b05      	ldr	r3, [pc, #20]	; (d6988 <_ZN9IPAddressC1Ev+0x18>)
   d6974:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6976:	2211      	movs	r2, #17
   d6978:	f840 3b04 	str.w	r3, [r0], #4
   d697c:	2100      	movs	r1, #0
   d697e:	f002 fc2b 	bl	d91d8 <memset>
}
   d6982:	4620      	mov	r0, r4
   d6984:	bd10      	pop	{r4, pc}
   d6986:	bf00      	nop
   d6988:	000d978c 	.word	0x000d978c

000d698c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d698c:	4603      	mov	r3, r0
   d698e:	4a07      	ldr	r2, [pc, #28]	; (d69ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6990:	b510      	push	{r4, lr}
   d6992:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6996:	f101 0210 	add.w	r2, r1, #16
   d699a:	f851 4b04 	ldr.w	r4, [r1], #4
   d699e:	f843 4b04 	str.w	r4, [r3], #4
   d69a2:	4291      	cmp	r1, r2
   d69a4:	d1f9      	bne.n	d699a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d69a6:	780a      	ldrb	r2, [r1, #0]
   d69a8:	701a      	strb	r2, [r3, #0]
}
   d69aa:	bd10      	pop	{r4, pc}
   d69ac:	000d978c 	.word	0x000d978c

000d69b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d69b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d69b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d69b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d69ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d69be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d69c2:	2304      	movs	r3, #4
   d69c4:	6041      	str	r1, [r0, #4]
   d69c6:	7503      	strb	r3, [r0, #20]
}
   d69c8:	bd10      	pop	{r4, pc}

000d69ca <_ZN9IPAddressaSEPKh>:
{
   d69ca:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d69cc:	78cb      	ldrb	r3, [r1, #3]
   d69ce:	9300      	str	r3, [sp, #0]
   d69d0:	788b      	ldrb	r3, [r1, #2]
   d69d2:	784a      	ldrb	r2, [r1, #1]
   d69d4:	7809      	ldrb	r1, [r1, #0]
   d69d6:	f7ff ffeb 	bl	d69b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d69da:	b002      	add	sp, #8
   d69dc:	bd10      	pop	{r4, pc}

000d69de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d69de:	f100 0310 	add.w	r3, r0, #16
   d69e2:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d69e4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d69e8:	2901      	cmp	r1, #1
   d69ea:	4618      	mov	r0, r3
   d69ec:	d108      	bne.n	d6a00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d69ee:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d69f2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d69f6:	3a01      	subs	r2, #1
   d69f8:	f103 0310 	add.w	r3, r3, #16
   d69fc:	d1f2      	bne.n	d69e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d69fe:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6a00:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6a02:	bf04      	itt	eq
   d6a04:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6a08:	1852      	addeq	r2, r2, r1
   d6a0a:	e7f4      	b.n	d69f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6a0c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a0c:	b40e      	push	{r1, r2, r3}
   d6a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a10:	b088      	sub	sp, #32
   d6a12:	af00      	add	r7, sp, #0
   d6a14:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a18:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a1a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a1e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a20:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a22:	462b      	mov	r3, r5
   d6a24:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6a26:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a28:	f7ff f9b0 	bl	d5d8c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6a2c:	280f      	cmp	r0, #15
   d6a2e:	687a      	ldr	r2, [r7, #4]
   d6a30:	d91a      	bls.n	d6a68 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6a32:	f100 0308 	add.w	r3, r0, #8
   d6a36:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6a3a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6a3c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a40:	1c41      	adds	r1, r0, #1
   d6a42:	462b      	mov	r3, r5
   d6a44:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6a46:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a48:	f7ff f9a0 	bl	d5d8c <vsnprintf>
        if (n > 0) {
   d6a4c:	1e02      	subs	r2, r0, #0
   d6a4e:	dd04      	ble.n	d6a5a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6a50:	6823      	ldr	r3, [r4, #0]
   d6a52:	4669      	mov	r1, sp
   d6a54:	689b      	ldr	r3, [r3, #8]
   d6a56:	4620      	mov	r0, r4
   d6a58:	4798      	blx	r3
   d6a5a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6a5c:	3720      	adds	r7, #32
   d6a5e:	46bd      	mov	sp, r7
   d6a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6a64:	b003      	add	sp, #12
   d6a66:	4770      	bx	lr
    } else if (n > 0) {
   d6a68:	2800      	cmp	r0, #0
   d6a6a:	d0f7      	beq.n	d6a5c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6a6c:	6823      	ldr	r3, [r4, #0]
   d6a6e:	4602      	mov	r2, r0
   d6a70:	689b      	ldr	r3, [r3, #8]
   d6a72:	f107 0110 	add.w	r1, r7, #16
   d6a76:	4620      	mov	r0, r4
   d6a78:	4798      	blx	r3
}
   d6a7a:	e7ef      	b.n	d6a5c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6a7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6a7c:	b510      	push	{r4, lr}
          _M_dispose();
   d6a7e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6a80:	4604      	mov	r4, r0
          _M_dispose();
   d6a82:	689b      	ldr	r3, [r3, #8]
   d6a84:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6a86:	68a3      	ldr	r3, [r4, #8]
   d6a88:	3b01      	subs	r3, #1
   d6a8a:	60a3      	str	r3, [r4, #8]
   d6a8c:	b92b      	cbnz	r3, d6a9a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6a8e:	6823      	ldr	r3, [r4, #0]
   d6a90:	4620      	mov	r0, r4
   d6a92:	68db      	ldr	r3, [r3, #12]
    }
   d6a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6a98:	4718      	bx	r3
    }
   d6a9a:	bd10      	pop	{r4, pc}

000d6a9c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6a9c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6a9e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6aa0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6aa4:	689b      	ldr	r3, [r3, #8]
   d6aa6:	2201      	movs	r2, #1
   d6aa8:	f10d 0107 	add.w	r1, sp, #7
   d6aac:	4798      	blx	r3
}
   d6aae:	b003      	add	sp, #12
   d6ab0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ab4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6ab4:	b538      	push	{r3, r4, r5, lr}
   d6ab6:	680b      	ldr	r3, [r1, #0]
   d6ab8:	6003      	str	r3, [r0, #0]
   d6aba:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6abc:	6843      	ldr	r3, [r0, #4]
   d6abe:	429d      	cmp	r5, r3
    class __shared_ptr
   d6ac0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6ac2:	d00c      	beq.n	d6ade <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6ac4:	b115      	cbz	r5, d6acc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6ac6:	686b      	ldr	r3, [r5, #4]
   d6ac8:	3301      	adds	r3, #1
   d6aca:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6acc:	6860      	ldr	r0, [r4, #4]
   d6ace:	b128      	cbz	r0, d6adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6ad0:	6843      	ldr	r3, [r0, #4]
   d6ad2:	3b01      	subs	r3, #1
   d6ad4:	6043      	str	r3, [r0, #4]
   d6ad6:	b90b      	cbnz	r3, d6adc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6ad8:	f7ff ffd0 	bl	d6a7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6adc:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6ade:	4620      	mov	r0, r4
   d6ae0:	bd38      	pop	{r3, r4, r5, pc}

000d6ae2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6ae2:	460b      	mov	r3, r1
   d6ae4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6ae6:	2200      	movs	r2, #0
   d6ae8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6aea:	e9c0 2200 	strd	r2, r2, [r0]
   d6aee:	4604      	mov	r4, r0
        t_ = t;
   d6af0:	6083      	str	r3, [r0, #8]
    if (t) {
   d6af2:	b90b      	cbnz	r3, d6af8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6af4:	4620      	mov	r0, r4
   d6af6:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6af8:	f7ff ffdc 	bl	d6ab4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6afc:	e7fa      	b.n	d6af4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6afe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6afe:	6883      	ldr	r3, [r0, #8]
   d6b00:	b1eb      	cbz	r3, d6b3e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6b02:	781a      	ldrb	r2, [r3, #0]
   d6b04:	2a03      	cmp	r2, #3
   d6b06:	d81a      	bhi.n	d6b3e <_ZNK5spark9JSONValue4typeEv+0x40>
   d6b08:	e8df f002 	tbb	[pc, r2]
   d6b0c:	1b021704 	.word	0x1b021704
   d6b10:	2005      	movs	r0, #5
   d6b12:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6b14:	6802      	ldr	r2, [r0, #0]
   d6b16:	685b      	ldr	r3, [r3, #4]
   d6b18:	6852      	ldr	r2, [r2, #4]
   d6b1a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6b1c:	282d      	cmp	r0, #45	; 0x2d
   d6b1e:	d012      	beq.n	d6b46 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6b20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6b24:	2b09      	cmp	r3, #9
   d6b26:	d90e      	bls.n	d6b46 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6b28:	2874      	cmp	r0, #116	; 0x74
   d6b2a:	d00e      	beq.n	d6b4a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6b2c:	2866      	cmp	r0, #102	; 0x66
   d6b2e:	d00c      	beq.n	d6b4a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6b30:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6b34:	4258      	negs	r0, r3
   d6b36:	4158      	adcs	r0, r3
   d6b38:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6b3a:	2006      	movs	r0, #6
   d6b3c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6b3e:	2000      	movs	r0, #0
   d6b40:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6b42:	2004      	movs	r0, #4
   d6b44:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6b46:	2003      	movs	r0, #3
   d6b48:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6b4a:	2002      	movs	r0, #2
}
   d6b4c:	4770      	bx	lr

000d6b4e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6b4e:	b510      	push	{r4, lr}
   d6b50:	4604      	mov	r4, r0
    switch (type()) {
   d6b52:	f7ff ffd4 	bl	d6afe <_ZNK5spark9JSONValue4typeEv>
   d6b56:	2802      	cmp	r0, #2
   d6b58:	d00e      	beq.n	d6b78 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6b5a:	1ec3      	subs	r3, r0, #3
   d6b5c:	b2db      	uxtb	r3, r3
   d6b5e:	2b01      	cmp	r3, #1
   d6b60:	d814      	bhi.n	d6b8c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6b62:	6822      	ldr	r2, [r4, #0]
   d6b64:	68a3      	ldr	r3, [r4, #8]
   d6b66:	6850      	ldr	r0, [r2, #4]
   d6b68:	685b      	ldr	r3, [r3, #4]
}
   d6b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6b6e:	220a      	movs	r2, #10
   d6b70:	2100      	movs	r1, #0
   d6b72:	4418      	add	r0, r3
   d6b74:	f002 bc5e 	b.w	d9434 <strtol>
        const char* const s = d_->json + t_->start;
   d6b78:	6822      	ldr	r2, [r4, #0]
   d6b7a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6b7c:	6852      	ldr	r2, [r2, #4]
   d6b7e:	685b      	ldr	r3, [r3, #4]
   d6b80:	5cd0      	ldrb	r0, [r2, r3]
   d6b82:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6b86:	4258      	negs	r0, r3
   d6b88:	4158      	adcs	r0, r3
}
   d6b8a:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6b8c:	2000      	movs	r0, #0
   d6b8e:	e7fc      	b.n	d6b8a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d6b90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6b90:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6b92:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b94:	e9c0 3300 	strd	r3, r3, [r0]
   d6b98:	4604      	mov	r4, r0
        n_(0) {
   d6b9a:	480e      	ldr	r0, [pc, #56]	; (d6bd4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6b9c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6ba0:	b1a9      	cbz	r1, d6bce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6ba2:	780b      	ldrb	r3, [r1, #0]
   d6ba4:	2b03      	cmp	r3, #3
   d6ba6:	d006      	beq.n	d6bb6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6ba8:	b98b      	cbnz	r3, d6bce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6baa:	6813      	ldr	r3, [r2, #0]
   d6bac:	6858      	ldr	r0, [r3, #4]
   d6bae:	684b      	ldr	r3, [r1, #4]
   d6bb0:	5cc3      	ldrb	r3, [r0, r3]
   d6bb2:	2b6e      	cmp	r3, #110	; 0x6e
   d6bb4:	d007      	beq.n	d6bc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6bb6:	6813      	ldr	r3, [r2, #0]
   d6bb8:	684d      	ldr	r5, [r1, #4]
   d6bba:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6bbc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6bbe:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6bc0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6bc2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6bc4:	60e3      	str	r3, [r4, #12]
   d6bc6:	4611      	mov	r1, r2
   d6bc8:	4620      	mov	r0, r4
   d6bca:	f7ff ff73 	bl	d6ab4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6bce:	4620      	mov	r0, r4
   d6bd0:	bd38      	pop	{r3, r4, r5, pc}
   d6bd2:	bf00      	nop
   d6bd4:	000d97fb 	.word	0x000d97fb

000d6bd8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6bd8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6bda:	2500      	movs	r5, #0
   d6bdc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bde:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6be2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6be6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6bea:	4604      	mov	r4, r0
   d6bec:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6bee:	b14b      	cbz	r3, d6c04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6bf0:	781a      	ldrb	r2, [r3, #0]
   d6bf2:	2a01      	cmp	r2, #1
   d6bf4:	d106      	bne.n	d6c04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6bf6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6bfa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6bfc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6bfe:	6143      	str	r3, [r0, #20]
   d6c00:	f7ff ff58 	bl	d6ab4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c04:	4620      	mov	r0, r4
   d6c06:	bd38      	pop	{r3, r4, r5, pc}

000d6c08 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6c08:	b510      	push	{r4, lr}
    if (!n_) {
   d6c0a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6c0c:	4604      	mov	r4, r0
    if (!n_) {
   d6c0e:	b163      	cbz	r3, d6c2a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6c10:	6880      	ldr	r0, [r0, #8]
   d6c12:	60e0      	str	r0, [r4, #12]
    --n_;
   d6c14:	3b01      	subs	r3, #1
    ++t_;
   d6c16:	3010      	adds	r0, #16
   d6c18:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6c1a:	6120      	str	r0, [r4, #16]
    --n_;
   d6c1c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6c1e:	b113      	cbz	r3, d6c26 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6c20:	f7ff fedd 	bl	d69de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6c24:	60a0      	str	r0, [r4, #8]
    return true;
   d6c26:	2001      	movs	r0, #1
   d6c28:	e000      	b.n	d6c2c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6c2a:	4618      	mov	r0, r3
}
   d6c2c:	bd10      	pop	{r4, pc}

000d6c2e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6c2e:	b510      	push	{r4, lr}
    write('}');
   d6c30:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6c32:	4604      	mov	r4, r0
    write('}');
   d6c34:	f7ff ff32 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6c38:	2301      	movs	r3, #1
   d6c3a:	7123      	strb	r3, [r4, #4]
}
   d6c3c:	4620      	mov	r0, r4
   d6c3e:	bd10      	pop	{r4, pc}

000d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6c40:	b508      	push	{r3, lr}
    switch (state_) {
   d6c42:	7903      	ldrb	r3, [r0, #4]
   d6c44:	2b01      	cmp	r3, #1
   d6c46:	d002      	beq.n	d6c4e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6c48:	2b02      	cmp	r3, #2
   d6c4a:	d004      	beq.n	d6c56 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6c4c:	bd08      	pop	{r3, pc}
        write(',');
   d6c4e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6c50:	f7ff ff24 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
}
   d6c54:	e7fa      	b.n	d6c4c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6c56:	213a      	movs	r1, #58	; 0x3a
   d6c58:	e7fa      	b.n	d6c50 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6c5a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6c5a:	b510      	push	{r4, lr}
   d6c5c:	4604      	mov	r4, r0
    writeSeparator();
   d6c5e:	f7ff ffef 	bl	d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6c62:	4620      	mov	r0, r4
   d6c64:	217b      	movs	r1, #123	; 0x7b
   d6c66:	f7ff ff19 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6c6a:	2300      	movs	r3, #0
   d6c6c:	7123      	strb	r3, [r4, #4]
}
   d6c6e:	4620      	mov	r0, r4
   d6c70:	bd10      	pop	{r4, pc}
	...

000d6c74 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6c74:	b513      	push	{r0, r1, r4, lr}
   d6c76:	4604      	mov	r4, r0
   d6c78:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6c7a:	f7ff ffe1 	bl	d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6c7e:	6823      	ldr	r3, [r4, #0]
   d6c80:	9a01      	ldr	r2, [sp, #4]
   d6c82:	68db      	ldr	r3, [r3, #12]
   d6c84:	4903      	ldr	r1, [pc, #12]	; (d6c94 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6c86:	4620      	mov	r0, r4
   d6c88:	4798      	blx	r3
    state_ = NEXT;
   d6c8a:	2301      	movs	r3, #1
}
   d6c8c:	4620      	mov	r0, r4
    state_ = NEXT;
   d6c8e:	7123      	strb	r3, [r4, #4]
}
   d6c90:	b002      	add	sp, #8
   d6c92:	bd10      	pop	{r4, pc}
   d6c94:	000d9582 	.word	0x000d9582

000d6c98 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6c98:	b513      	push	{r0, r1, r4, lr}
   d6c9a:	4604      	mov	r4, r0
   d6c9c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6c9e:	f7ff ffcf 	bl	d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6ca2:	6823      	ldr	r3, [r4, #0]
   d6ca4:	9a01      	ldr	r2, [sp, #4]
   d6ca6:	68db      	ldr	r3, [r3, #12]
   d6ca8:	4903      	ldr	r1, [pc, #12]	; (d6cb8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6caa:	4620      	mov	r0, r4
   d6cac:	4798      	blx	r3
    state_ = NEXT;
   d6cae:	2301      	movs	r3, #1
}
   d6cb0:	4620      	mov	r0, r4
    state_ = NEXT;
   d6cb2:	7123      	strb	r3, [r4, #4]
}
   d6cb4:	b002      	add	sp, #8
   d6cb6:	bd10      	pop	{r4, pc}
   d6cb8:	000d9798 	.word	0x000d9798

000d6cbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cc0:	460d      	mov	r5, r1
   d6cc2:	4617      	mov	r7, r2
    write('"');
   d6cc4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6cc6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6d68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6cca:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6ccc:	442f      	add	r7, r5
    write('"');
   d6cce:	f7ff fee5 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6cd2:	4629      	mov	r1, r5
    while (s != end) {
   d6cd4:	42bd      	cmp	r5, r7
   d6cd6:	462a      	mov	r2, r5
   d6cd8:	d038      	beq.n	d6d4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6cda:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6cde:	2e22      	cmp	r6, #34	; 0x22
   d6ce0:	d003      	beq.n	d6cea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6ce2:	2e5c      	cmp	r6, #92	; 0x5c
   d6ce4:	d001      	beq.n	d6cea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6ce6:	2e1f      	cmp	r6, #31
   d6ce8:	d8f4      	bhi.n	d6cd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6cea:	6823      	ldr	r3, [r4, #0]
   d6cec:	1a52      	subs	r2, r2, r1
   d6cee:	689b      	ldr	r3, [r3, #8]
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	4798      	blx	r3
            write('\\');
   d6cf4:	215c      	movs	r1, #92	; 0x5c
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	f7ff fed0 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6cfc:	2e0d      	cmp	r6, #13
   d6cfe:	d80a      	bhi.n	d6d16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6d00:	2e07      	cmp	r6, #7
   d6d02:	d91c      	bls.n	d6d3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d04:	f1a6 0308 	sub.w	r3, r6, #8
   d6d08:	2b05      	cmp	r3, #5
   d6d0a:	d818      	bhi.n	d6d3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d0c:	e8df f003 	tbb	[pc, r3]
   d6d10:	17110f0d 	.word	0x17110f0d
   d6d14:	1513      	.short	0x1513
   d6d16:	2e22      	cmp	r6, #34	; 0x22
   d6d18:	d001      	beq.n	d6d1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6d1a:	2e5c      	cmp	r6, #92	; 0x5c
   d6d1c:	d10f      	bne.n	d6d3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6d1e:	4631      	mov	r1, r6
                write('b');
   d6d20:	4620      	mov	r0, r4
   d6d22:	f7ff febb 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6d26:	4629      	mov	r1, r5
    while (s != end) {
   d6d28:	e7d4      	b.n	d6cd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6d2a:	2162      	movs	r1, #98	; 0x62
   d6d2c:	e7f8      	b.n	d6d20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6d2e:	2174      	movs	r1, #116	; 0x74
   d6d30:	e7f6      	b.n	d6d20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6d32:	216e      	movs	r1, #110	; 0x6e
   d6d34:	e7f4      	b.n	d6d20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6d36:	2166      	movs	r1, #102	; 0x66
   d6d38:	e7f2      	b.n	d6d20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6d3a:	2172      	movs	r1, #114	; 0x72
   d6d3c:	e7f0      	b.n	d6d20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6d3e:	6823      	ldr	r3, [r4, #0]
   d6d40:	4632      	mov	r2, r6
   d6d42:	68db      	ldr	r3, [r3, #12]
   d6d44:	4641      	mov	r1, r8
   d6d46:	4620      	mov	r0, r4
   d6d48:	4798      	blx	r3
                break;
   d6d4a:	e7ec      	b.n	d6d26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6d4c:	428d      	cmp	r5, r1
   d6d4e:	d004      	beq.n	d6d5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6d50:	6823      	ldr	r3, [r4, #0]
   d6d52:	1a6a      	subs	r2, r5, r1
   d6d54:	689b      	ldr	r3, [r3, #8]
   d6d56:	4620      	mov	r0, r4
   d6d58:	4798      	blx	r3
    }
    write('"');
   d6d5a:	2122      	movs	r1, #34	; 0x22
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	f7ff fe9d 	bl	d6a9c <_ZN5spark10JSONWriter5writeEc>
}
   d6d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d66:	bf00      	nop
   d6d68:	000d979b 	.word	0x000d979b

000d6d6c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6d6c:	b513      	push	{r0, r1, r4, lr}
   d6d6e:	4604      	mov	r4, r0
   d6d70:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6d74:	f7ff ff64 	bl	d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6d78:	4620      	mov	r0, r4
   d6d7a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6d7e:	f7ff ff9d 	bl	d6cbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6d82:	2302      	movs	r3, #2
}
   d6d84:	4620      	mov	r0, r4
    state_ = VALUE;
   d6d86:	7123      	strb	r3, [r4, #4]
}
   d6d88:	b002      	add	sp, #8
   d6d8a:	bd10      	pop	{r4, pc}

000d6d8c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6d8c:	b513      	push	{r0, r1, r4, lr}
   d6d8e:	4604      	mov	r4, r0
   d6d90:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6d94:	f7ff ff54 	bl	d6c40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6d98:	4620      	mov	r0, r4
   d6d9a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6d9e:	f7ff ff8d 	bl	d6cbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6da2:	2301      	movs	r3, #1
}
   d6da4:	4620      	mov	r0, r4
    state_ = NEXT;
   d6da6:	7123      	strb	r3, [r4, #4]
}
   d6da8:	b002      	add	sp, #8
   d6daa:	bd10      	pop	{r4, pc}

000d6dac <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6dac:	6880      	ldr	r0, [r0, #8]
   d6dae:	6803      	ldr	r3, [r0, #0]
   d6db0:	68db      	ldr	r3, [r3, #12]
   d6db2:	4718      	bx	r3

000d6db4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d6db4:	4770      	bx	lr

000d6db6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6db6:	4608      	mov	r0, r1
   d6db8:	b111      	cbz	r1, d6dc0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6dba:	680b      	ldr	r3, [r1, #0]
   d6dbc:	685b      	ldr	r3, [r3, #4]
   d6dbe:	4718      	bx	r3
}
   d6dc0:	4770      	bx	lr

000d6dc2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d6dc2:	4770      	bx	lr

000d6dc4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6dc4:	4770      	bx	lr

000d6dc6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6dc6:	4770      	bx	lr

000d6dc8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d6dc8:	4770      	bx	lr

000d6dca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6dca:	b538      	push	{r3, r4, r5, lr}
   d6dcc:	4604      	mov	r4, r0
   d6dce:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6dd0:	6800      	ldr	r0, [r0, #0]
   d6dd2:	212e      	movs	r1, #46	; 0x2e
   d6dd4:	f002 fa39 	bl	d924a <strchrnul>
    size = s - category;
   d6dd8:	6823      	ldr	r3, [r4, #0]
   d6dda:	1ac3      	subs	r3, r0, r3
   d6ddc:	602b      	str	r3, [r5, #0]
    if (size) {
   d6dde:	b123      	cbz	r3, d6dea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6de0:	7803      	ldrb	r3, [r0, #0]
   d6de2:	b103      	cbz	r3, d6de6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6de4:	3001      	adds	r0, #1
   d6de6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6de8:	6020      	str	r0, [r4, #0]
}
   d6dea:	4618      	mov	r0, r3
   d6dec:	bd38      	pop	{r3, r4, r5, pc}

000d6dee <_ZN5spark16JSONStreamWriterD0Ev>:
   d6dee:	b510      	push	{r4, lr}
   d6df0:	210c      	movs	r1, #12
   d6df2:	4604      	mov	r4, r0
   d6df4:	f001 fd36 	bl	d8864 <_ZdlPvj>
   d6df8:	4620      	mov	r0, r4
   d6dfa:	bd10      	pop	{r4, pc}

000d6dfc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6dfc:	b510      	push	{r4, lr}
   d6dfe:	2104      	movs	r1, #4
   d6e00:	4604      	mov	r4, r0
   d6e02:	f001 fd2f 	bl	d8864 <_ZdlPvj>
   d6e06:	4620      	mov	r0, r4
   d6e08:	bd10      	pop	{r4, pc}

000d6e0a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e0a:	b510      	push	{r4, lr}
   d6e0c:	2104      	movs	r1, #4
   d6e0e:	4604      	mov	r4, r0
   d6e10:	f001 fd28 	bl	d8864 <_ZdlPvj>
   d6e14:	4620      	mov	r0, r4
   d6e16:	bd10      	pop	{r4, pc}

000d6e18 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6e18:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6e1a:	f002 fa20 	bl	d925e <strcmp>
}
   d6e1e:	fab0 f080 	clz	r0, r0
   d6e22:	0940      	lsrs	r0, r0, #5
   d6e24:	bd08      	pop	{r3, pc}

000d6e26 <__tcf_1>:
   d6e26:	4770      	bx	lr

000d6e28 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6e28:	b510      	push	{r4, lr}
   d6e2a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6e2c:	f001 fb62 	bl	d84f4 <_Z16_fetch_usbserialv>
   d6e30:	4284      	cmp	r4, r0
   d6e32:	d010      	beq.n	d6e56 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6e34:	f001 fad6 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d6e38:	4284      	cmp	r4, r0
   d6e3a:	d105      	bne.n	d6e48 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d6e3c:	f001 fad2 	bl	d83e4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d6e44:	f001 bacb 	b.w	d83de <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6e48:	b12c      	cbz	r4, d6e56 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d6e4a:	6823      	ldr	r3, [r4, #0]
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	685b      	ldr	r3, [r3, #4]
}
   d6e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6e54:	4718      	bx	r3
   d6e56:	bd10      	pop	{r4, pc}

000d6e58 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6e58:	b513      	push	{r0, r1, r4, lr}
   d6e5a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d6e5c:	4608      	mov	r0, r1
   d6e5e:	9101      	str	r1, [sp, #4]
   d6e60:	f002 fa2d 	bl	d92be <strlen>
   d6e64:	9901      	ldr	r1, [sp, #4]
   d6e66:	4602      	mov	r2, r0
   d6e68:	4620      	mov	r0, r4
}
   d6e6a:	b002      	add	sp, #8
   d6e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d6e70:	f7ff bf8c 	b.w	d6d8c <_ZN5spark10JSONWriter5valueEPKcj>

000d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d6e74:	b513      	push	{r0, r1, r4, lr}
   d6e76:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6e78:	4608      	mov	r0, r1
   d6e7a:	9101      	str	r1, [sp, #4]
   d6e7c:	f002 fa1f 	bl	d92be <strlen>
   d6e80:	6823      	ldr	r3, [r4, #0]
   d6e82:	9901      	ldr	r1, [sp, #4]
   d6e84:	68db      	ldr	r3, [r3, #12]
   d6e86:	4602      	mov	r2, r0
   d6e88:	4620      	mov	r0, r4
}
   d6e8a:	b002      	add	sp, #8
   d6e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d6e90:	4718      	bx	r3

000d6e92 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d6e92:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6e94:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d6e96:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6e9a:	68db      	ldr	r3, [r3, #12]
   d6e9c:	2201      	movs	r2, #1
   d6e9e:	f10d 0107 	add.w	r1, sp, #7
   d6ea2:	4798      	blx	r3
}
   d6ea4:	b003      	add	sp, #12
   d6ea6:	f85d fb04 	ldr.w	pc, [sp], #4

000d6eaa <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6eaa:	b40e      	push	{r1, r2, r3}
   d6eac:	b503      	push	{r0, r1, lr}
   d6eae:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d6eb0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6eb2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d6eb6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d6eb8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d6eba:	f001 f840 	bl	d7f3e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d6ebe:	b002      	add	sp, #8
   d6ec0:	f85d eb04 	ldr.w	lr, [sp], #4
   d6ec4:	b003      	add	sp, #12
   d6ec6:	4770      	bx	lr

000d6ec8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d6ecc:	e9d0 9500 	ldrd	r9, r5, [r0]
   d6ed0:	f04f 0814 	mov.w	r8, #20
   d6ed4:	fb08 f505 	mul.w	r5, r8, r5
   d6ed8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6eda:	10ab      	asrs	r3, r5, #2
   d6edc:	4d18      	ldr	r5, [pc, #96]	; (d6f40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6ede:	4617      	mov	r7, r2
   d6ee0:	435d      	muls	r5, r3
   d6ee2:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6ee4:	2d00      	cmp	r5, #0
   d6ee6:	dd23      	ble.n	d6f30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d6ee8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d6eea:	fb08 f006 	mul.w	r0, r8, r6
   d6eee:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6ef2:	463a      	mov	r2, r7
   d6ef4:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d6ef8:	5820      	ldr	r0, [r4, r0]
   d6efa:	9101      	str	r1, [sp, #4]
   d6efc:	455f      	cmp	r7, fp
   d6efe:	bf28      	it	cs
   d6f00:	465a      	movcs	r2, fp
   d6f02:	f002 f9e4 	bl	d92ce <strncmp>
                if (cmp == 0) {
   d6f06:	9901      	ldr	r1, [sp, #4]
   d6f08:	2301      	movs	r3, #1
   d6f0a:	b978      	cbnz	r0, d6f2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d6f0c:	455f      	cmp	r7, fp
   d6f0e:	d103      	bne.n	d6f18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6f10:	9a00      	ldr	r2, [sp, #0]
   d6f12:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6f14:	4635      	mov	r5, r6
   d6f16:	e7e5      	b.n	d6ee4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d6f18:	bf8c      	ite	hi
   d6f1a:	2001      	movhi	r0, #1
   d6f1c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6f1e:	2800      	cmp	r0, #0
   d6f20:	d0f8      	beq.n	d6f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6f22:	1bae      	subs	r6, r5, r6
	      ++__first;
   d6f24:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d6f28:	3e01      	subs	r6, #1
   d6f2a:	e7f3      	b.n	d6f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d6f2c:	0fc0      	lsrs	r0, r0, #31
   d6f2e:	e7f6      	b.n	d6f1e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d6f30:	eba4 0409 	sub.w	r4, r4, r9
}
   d6f34:	4802      	ldr	r0, [pc, #8]	; (d6f40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6f36:	10a4      	asrs	r4, r4, #2
   d6f38:	4360      	muls	r0, r4
   d6f3a:	b003      	add	sp, #12
   d6f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f40:	cccccccd 	.word	0xcccccccd

000d6f44 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d6f46:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d6f48:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f4a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d6f4c:	b30b      	cbz	r3, d6f92 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d6f4e:	b301      	cbz	r1, d6f92 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d6f50:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6f52:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d6f56:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d6f58:	a903      	add	r1, sp, #12
   d6f5a:	a801      	add	r0, sp, #4
   d6f5c:	f7ff ff35 	bl	d6dca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6f60:	4601      	mov	r1, r0
   d6f62:	b1b0      	cbz	r0, d6f92 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f64:	f10d 030b 	add.w	r3, sp, #11
   d6f68:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d6f6a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f6e:	4620      	mov	r0, r4
   d6f70:	f7ff ffaa 	bl	d6ec8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6f74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6f78:	b15b      	cbz	r3, d6f92 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d6f7a:	6824      	ldr	r4, [r4, #0]
   d6f7c:	2314      	movs	r3, #20
   d6f7e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d6f82:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d6f86:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d6f8a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6f8c:	bfa8      	it	ge
   d6f8e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d6f90:	e7e2      	b.n	d6f58 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d6f92:	4630      	mov	r0, r6
   d6f94:	b004      	add	sp, #16
   d6f96:	bd70      	pop	{r4, r5, r6, pc}

000d6f98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6f98:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6f9a:	4c09      	ldr	r4, [pc, #36]	; (d6fc0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6f9c:	7823      	ldrb	r3, [r4, #0]
   d6f9e:	f3bf 8f5b 	dmb	ish
   d6fa2:	07db      	lsls	r3, r3, #31
   d6fa4:	d409      	bmi.n	d6fba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fa6:	4620      	mov	r0, r4
   d6fa8:	f7fd f886 	bl	d40b8 <__cxa_guard_acquire>
   d6fac:	b128      	cbz	r0, d6fba <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fae:	4620      	mov	r0, r4
   d6fb0:	f7fd f887 	bl	d40c2 <__cxa_guard_release>
   d6fb4:	4803      	ldr	r0, [pc, #12]	; (d6fc4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6fb6:	f002 f8dd 	bl	d9174 <atexit>
}
   d6fba:	4803      	ldr	r0, [pc, #12]	; (d6fc8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6fbc:	bd10      	pop	{r4, pc}
   d6fbe:	bf00      	nop
   d6fc0:	2003e584 	.word	0x2003e584
   d6fc4:	000d6dc3 	.word	0x000d6dc3
   d6fc8:	2003e330 	.word	0x2003e330

000d6fcc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6fcc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6fce:	4c09      	ldr	r4, [pc, #36]	; (d6ff4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6fd0:	7823      	ldrb	r3, [r4, #0]
   d6fd2:	f3bf 8f5b 	dmb	ish
   d6fd6:	07db      	lsls	r3, r3, #31
   d6fd8:	d409      	bmi.n	d6fee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6fda:	4620      	mov	r0, r4
   d6fdc:	f7fd f86c 	bl	d40b8 <__cxa_guard_acquire>
   d6fe0:	b128      	cbz	r0, d6fee <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	f7fd f86d 	bl	d40c2 <__cxa_guard_release>
   d6fe8:	4803      	ldr	r0, [pc, #12]	; (d6ff8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6fea:	f002 f8c3 	bl	d9174 <atexit>
    return &factory;
}
   d6fee:	4803      	ldr	r0, [pc, #12]	; (d6ffc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6ff0:	bd10      	pop	{r4, pc}
   d6ff2:	bf00      	nop
   d6ff4:	2003e588 	.word	0x2003e588
   d6ff8:	000d6e27 	.word	0x000d6e27
   d6ffc:	2003e334 	.word	0x2003e334

000d7000 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7000:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d7002:	2500      	movs	r5, #0
   d7004:	4604      	mov	r4, r0
   d7006:	e9c0 5500 	strd	r5, r5, [r0]
   d700a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d700e:	6085      	str	r5, [r0, #8]
   d7010:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d7012:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d7016:	f7fe fc23 	bl	d5860 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d701a:	f7ff ffbd 	bl	d6f98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d701e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7020:	f7ff ffd4 	bl	d6fcc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7024:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7026:	6220      	str	r0, [r4, #32]
}
   d7028:	4620      	mov	r0, r4
   d702a:	bd38      	pop	{r3, r4, r5, pc}

000d702c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d702c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d702e:	4c0a      	ldr	r4, [pc, #40]	; (d7058 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d7030:	7823      	ldrb	r3, [r4, #0]
   d7032:	f3bf 8f5b 	dmb	ish
   d7036:	07db      	lsls	r3, r3, #31
   d7038:	d40c      	bmi.n	d7054 <_ZN5spark10LogManager8instanceEv+0x28>
   d703a:	4620      	mov	r0, r4
   d703c:	f7fd f83c 	bl	d40b8 <__cxa_guard_acquire>
   d7040:	b140      	cbz	r0, d7054 <_ZN5spark10LogManager8instanceEv+0x28>
   d7042:	4806      	ldr	r0, [pc, #24]	; (d705c <_ZN5spark10LogManager8instanceEv+0x30>)
   d7044:	f7ff ffdc 	bl	d7000 <_ZN5spark10LogManagerC1Ev>
   d7048:	4620      	mov	r0, r4
   d704a:	f7fd f83a 	bl	d40c2 <__cxa_guard_release>
   d704e:	4804      	ldr	r0, [pc, #16]	; (d7060 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7050:	f002 f890 	bl	d9174 <atexit>
    return &mgr;
}
   d7054:	4801      	ldr	r0, [pc, #4]	; (d705c <_ZN5spark10LogManager8instanceEv+0x30>)
   d7056:	bd10      	pop	{r4, pc}
   d7058:	2003e580 	.word	0x2003e580
   d705c:	2003e590 	.word	0x2003e590
   d7060:	000d750d 	.word	0x000d750d

000d7064 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7064:	4a02      	ldr	r2, [pc, #8]	; (d7070 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7066:	4903      	ldr	r1, [pc, #12]	; (d7074 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7068:	4803      	ldr	r0, [pc, #12]	; (d7078 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d706a:	2300      	movs	r3, #0
   d706c:	f7fe bdb0 	b.w	d5bd0 <log_set_callbacks>
   d7070:	000d7395 	.word	0x000d7395
   d7074:	000d7321 	.word	0x000d7321
   d7078:	000d72a1 	.word	0x000d72a1

000d707c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d707c:	2300      	movs	r3, #0
   d707e:	461a      	mov	r2, r3
   d7080:	4619      	mov	r1, r3
   d7082:	4618      	mov	r0, r3
   d7084:	f7fe bda4 	b.w	d5bd0 <log_set_callbacks>

000d7088 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7088:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d708a:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d708c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7090:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7092:	4604      	mov	r4, r0
   d7094:	a801      	add	r0, sp, #4
   d7096:	f7fe fec0 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d709a:	466a      	mov	r2, sp
   d709c:	4629      	mov	r1, r5
   d709e:	4620      	mov	r0, r4
   d70a0:	f7ff fd1f 	bl	d6ae2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d70a4:	a801      	add	r0, sp, #4
   d70a6:	f7fe febf 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70aa:	4620      	mov	r0, r4
   d70ac:	b003      	add	sp, #12
   d70ae:	bd30      	pop	{r4, r5, pc}

000d70b0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d70b2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70b4:	f851 3b04 	ldr.w	r3, [r1], #4
   d70b8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70ba:	4604      	mov	r4, r0
   d70bc:	a801      	add	r0, sp, #4
   d70be:	f7fe feac 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d70c2:	466a      	mov	r2, sp
   d70c4:	4629      	mov	r1, r5
   d70c6:	4620      	mov	r0, r4
   d70c8:	f7ff fd86 	bl	d6bd8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d70cc:	a801      	add	r0, sp, #4
   d70ce:	f7fe feab 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70d2:	4620      	mov	r0, r4
   d70d4:	b003      	add	sp, #12
   d70d6:	bd30      	pop	{r4, r5, pc}

000d70d8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d70d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d70da:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70dc:	f851 3b04 	ldr.w	r3, [r1], #4
   d70e0:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d70e2:	4604      	mov	r4, r0
   d70e4:	a801      	add	r0, sp, #4
   d70e6:	f7fe fe98 	bl	d5e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d70ea:	466a      	mov	r2, sp
   d70ec:	4629      	mov	r1, r5
   d70ee:	4620      	mov	r0, r4
   d70f0:	f7ff fd4e 	bl	d6b90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d70f4:	a801      	add	r0, sp, #4
   d70f6:	f7fe fe97 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70fa:	4620      	mov	r0, r4
   d70fc:	b003      	add	sp, #12
   d70fe:	bd30      	pop	{r4, r5, pc}

000d7100 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7100:	b570      	push	{r4, r5, r6, lr}
   d7102:	b08a      	sub	sp, #40	; 0x28
   d7104:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7106:	4601      	mov	r1, r0
   d7108:	a804      	add	r0, sp, #16
   d710a:	f7ff ffd1 	bl	d70b0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d710e:	4e14      	ldr	r6, [pc, #80]	; (d7160 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d7110:	a804      	add	r0, sp, #16
   d7112:	f7ff fd79 	bl	d6c08 <_ZN5spark18JSONObjectIterator4nextEv>
   d7116:	b1e8      	cbz	r0, d7154 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d7118:	a904      	add	r1, sp, #16
   d711a:	4668      	mov	r0, sp
   d711c:	f7ff ffdc 	bl	d70d8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7120:	9802      	ldr	r0, [sp, #8]
   d7122:	4631      	mov	r1, r6
   d7124:	f7ff fe78 	bl	d6e18 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d7128:	4604      	mov	r4, r0
   d712a:	b110      	cbz	r0, d7132 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d712c:	1e2c      	subs	r4, r5, #0
   d712e:	bf18      	it	ne
   d7130:	2401      	movne	r4, #1
   d7132:	a801      	add	r0, sp, #4
   d7134:	f7fe fe78 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7138:	2c00      	cmp	r4, #0
   d713a:	d0e9      	beq.n	d7110 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d713c:	a904      	add	r1, sp, #16
   d713e:	4668      	mov	r0, sp
   d7140:	f7ff ffa2 	bl	d7088 <_ZNK5spark18JSONObjectIterator5valueEv>
   d7144:	4668      	mov	r0, sp
   d7146:	f7ff fd02 	bl	d6b4e <_ZNK5spark9JSONValue5toIntEv>
   d714a:	6028      	str	r0, [r5, #0]
   d714c:	a801      	add	r0, sp, #4
   d714e:	f7fe fe6b 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7152:	e7dd      	b.n	d7110 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7154:	a805      	add	r0, sp, #20
   d7156:	f7fe fe67 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d715a:	b00a      	add	sp, #40	; 0x28
   d715c:	bd70      	pop	{r4, r5, r6, pc}
   d715e:	bf00      	nop
   d7160:	000d97a1 	.word	0x000d97a1

000d7164 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7164:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7166:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7168:	4620      	mov	r0, r4
   d716a:	4912      	ldr	r1, [pc, #72]	; (d71b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d716c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d716e:	f002 f876 	bl	d925e <strcmp>
   d7172:	b948      	cbnz	r0, d7188 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d7174:	f001 f9be 	bl	d84f4 <_Z16_fetch_usbserialv>
   d7178:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d717c:	f001 f9aa 	bl	d84d4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7180:	f001 f9b8 	bl	d84f4 <_Z16_fetch_usbserialv>
}
   d7184:	b003      	add	sp, #12
   d7186:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7188:	490b      	ldr	r1, [pc, #44]	; (d71b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d718a:	4620      	mov	r0, r4
   d718c:	f002 f867 	bl	d925e <strcmp>
   d7190:	b970      	cbnz	r0, d71b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d7192:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d7196:	a901      	add	r1, sp, #4
   d7198:	4628      	mov	r0, r5
        int baud = 9600;
   d719a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d719c:	f7ff ffb0 	bl	d7100 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d71a0:	f001 f920 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d71a4:	9901      	ldr	r1, [sp, #4]
   d71a6:	f001 f917 	bl	d83d8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d71aa:	f001 f91b 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d71ae:	e7e9      	b.n	d7184 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d71b0:	2000      	movs	r0, #0
   d71b2:	e7e7      	b.n	d7184 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d71b4:	000d97a6 	.word	0x000d97a6
   d71b8:	000d97ad 	.word	0x000d97ad

000d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d71be:	e9d0 5300 	ldrd	r5, r3, [r0]
   d71c2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d71c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d71ca:	42ae      	cmp	r6, r5
   d71cc:	d005      	beq.n	d71da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d71ce:	f105 0008 	add.w	r0, r5, #8
   d71d2:	f7ff fff3 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d71d6:	3514      	adds	r5, #20
   d71d8:	e7f7      	b.n	d71ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d71da:	6820      	ldr	r0, [r4, #0]
   d71dc:	f7fe fdc6 	bl	d5d6c <free>
}
   d71e0:	4620      	mov	r0, r4
   d71e2:	bd70      	pop	{r4, r5, r6, pc}

000d71e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d71e6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d71ea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d71ec:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d71f0:	42ae      	cmp	r6, r5
   d71f2:	d004      	beq.n	d71fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d71f4:	4628      	mov	r0, r5
   d71f6:	f000 ffb5 	bl	d8164 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d71fa:	3510      	adds	r5, #16
   d71fc:	e7f8      	b.n	d71f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d71fe:	6820      	ldr	r0, [r4, #0]
   d7200:	f7fe fdb4 	bl	d5d6c <free>
}
   d7204:	4620      	mov	r0, r4
   d7206:	bd70      	pop	{r4, r5, r6, pc}

000d7208 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d7208:	b510      	push	{r4, lr}
   d720a:	4604      	mov	r4, r0
   d720c:	300c      	adds	r0, #12
   d720e:	f7ff ffd5 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7212:	4620      	mov	r0, r4
   d7214:	f7ff ffe6 	bl	d71e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7218:	4620      	mov	r0, r4
   d721a:	bd10      	pop	{r4, pc}

000d721c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d721c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d721e:	4b04      	ldr	r3, [pc, #16]	; (d7230 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7220:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d7222:	f840 3b04 	str.w	r3, [r0], #4
   d7226:	f7ff ffef 	bl	d7208 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d722a:	4620      	mov	r0, r4
   d722c:	bd10      	pop	{r4, pc}
   d722e:	bf00      	nop
   d7230:	000d95b0 	.word	0x000d95b0

000d7234 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7234:	b510      	push	{r4, lr}
   d7236:	4604      	mov	r4, r0
   d7238:	f7ff fff0 	bl	d721c <_ZN5spark16StreamLogHandlerD1Ev>
   d723c:	4620      	mov	r0, r4
   d723e:	2124      	movs	r1, #36	; 0x24
   d7240:	f001 fb10 	bl	d8864 <_ZdlPvj>
   d7244:	4620      	mov	r0, r4
   d7246:	bd10      	pop	{r4, pc}

000d7248 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7248:	b510      	push	{r4, lr}
   d724a:	4b03      	ldr	r3, [pc, #12]	; (d7258 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d724c:	6003      	str	r3, [r0, #0]
   d724e:	4604      	mov	r4, r0
   d7250:	f7ff ffe4 	bl	d721c <_ZN5spark16StreamLogHandlerD1Ev>
   d7254:	4620      	mov	r0, r4
   d7256:	bd10      	pop	{r4, pc}
   d7258:	000d984c 	.word	0x000d984c

000d725c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d725c:	b510      	push	{r4, lr}
   d725e:	4604      	mov	r4, r0
   d7260:	f7ff fff2 	bl	d7248 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7264:	4620      	mov	r0, r4
   d7266:	2124      	movs	r1, #36	; 0x24
   d7268:	f001 fafc 	bl	d8864 <_ZdlPvj>
   d726c:	4620      	mov	r0, r4
   d726e:	bd10      	pop	{r4, pc}

000d7270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d7270:	2200      	movs	r2, #0
   d7272:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7276:	b510      	push	{r4, lr}
        capacity_(0) {
   d7278:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d727a:	680c      	ldr	r4, [r1, #0]
   d727c:	6004      	str	r4, [r0, #0]
   d727e:	684c      	ldr	r4, [r1, #4]
   d7280:	6044      	str	r4, [r0, #4]
   d7282:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7284:	600a      	str	r2, [r1, #0]
   d7286:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7288:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d728a:	608a      	str	r2, [r1, #8]
}
   d728c:	bd10      	pop	{r4, pc}

000d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d728e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7290:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d7292:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7294:	6818      	ldr	r0, [r3, #0]
   d7296:	f7fe fafb 	bl	d5890 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d729a:	4620      	mov	r0, r4
   d729c:	bd10      	pop	{r4, pc}
	...

000d72a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72a4:	b087      	sub	sp, #28
   d72a6:	4680      	mov	r8, r0
   d72a8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d72aa:	4b1c      	ldr	r3, [pc, #112]	; (d731c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d72ac:	685b      	ldr	r3, [r3, #4]
   d72ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d72b2:	4689      	mov	r9, r1
   d72b4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72b6:	b96b      	cbnz	r3, d72d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d72b8:	f7ff feb8 	bl	d702c <_ZN5spark10LogManager8instanceEv>
   d72bc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d72be:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d72c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72c4:	9305      	str	r3, [sp, #20]
   d72c6:	f7fe fadb 	bl	d5880 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d72ca:	7b23      	ldrb	r3, [r4, #12]
   d72cc:	b12b      	cbz	r3, d72da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d72ce:	a805      	add	r0, sp, #20
   d72d0:	f7ff ffdd 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d72d4:	b007      	add	sp, #28
   d72d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d72da:	2301      	movs	r3, #1
   d72dc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d72de:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d72e2:	fa5f f989 	uxtb.w	r9, r9
   d72e6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d72ea:	45aa      	cmp	sl, r5
   d72ec:	d012      	beq.n	d7314 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d72ee:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d72f2:	4631      	mov	r1, r6
   d72f4:	1d38      	adds	r0, r7, #4
   d72f6:	f7ff fe25 	bl	d6f44 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d72fa:	4581      	cmp	r9, r0
   d72fc:	d3f5      	bcc.n	d72ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d72fe:	683b      	ldr	r3, [r7, #0]
   d7300:	9a03      	ldr	r2, [sp, #12]
   d7302:	9200      	str	r2, [sp, #0]
   d7304:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d7308:	464a      	mov	r2, r9
   d730a:	4633      	mov	r3, r6
   d730c:	4641      	mov	r1, r8
   d730e:	4638      	mov	r0, r7
   d7310:	47d8      	blx	fp
   d7312:	e7ea      	b.n	d72ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d7314:	2300      	movs	r3, #0
   d7316:	7323      	strb	r3, [r4, #12]
   d7318:	e7d9      	b.n	d72ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d731a:	bf00      	nop
   d731c:	e000ed00 	.word	0xe000ed00

000d7320 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7324:	469b      	mov	fp, r3
   d7326:	4b1a      	ldr	r3, [pc, #104]	; (d7390 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d7328:	685b      	ldr	r3, [r3, #4]
   d732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d732e:	4680      	mov	r8, r0
   d7330:	4689      	mov	r9, r1
   d7332:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d7334:	b96b      	cbnz	r3, d7352 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d7336:	f7ff fe79 	bl	d702c <_ZN5spark10LogManager8instanceEv>
   d733a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d733c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7340:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7342:	9301      	str	r3, [sp, #4]
   d7344:	f7fe fa9c 	bl	d5880 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7348:	7b23      	ldrb	r3, [r4, #12]
   d734a:	b12b      	cbz	r3, d7358 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d734c:	a801      	add	r0, sp, #4
   d734e:	f7ff ff9e 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7352:	b003      	add	sp, #12
   d7354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7358:	2301      	movs	r3, #1
   d735a:	7323      	strb	r3, [r4, #12]
   d735c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7360:	b2f6      	uxtb	r6, r6
   d7362:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7366:	4555      	cmp	r5, sl
   d7368:	d00e      	beq.n	d7388 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d736a:	f855 7b04 	ldr.w	r7, [r5], #4
   d736e:	4659      	mov	r1, fp
   d7370:	1d38      	adds	r0, r7, #4
   d7372:	f7ff fde7 	bl	d6f44 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7376:	4286      	cmp	r6, r0
   d7378:	d3f5      	bcc.n	d7366 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d737a:	683b      	ldr	r3, [r7, #0]
   d737c:	464a      	mov	r2, r9
   d737e:	68db      	ldr	r3, [r3, #12]
   d7380:	4641      	mov	r1, r8
   d7382:	4638      	mov	r0, r7
   d7384:	4798      	blx	r3
   d7386:	e7ee      	b.n	d7366 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7388:	2300      	movs	r3, #0
   d738a:	7323      	strb	r3, [r4, #12]
   d738c:	e7de      	b.n	d734c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d738e:	bf00      	nop
   d7390:	e000ed00 	.word	0xe000ed00

000d7394 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7398:	4b16      	ldr	r3, [pc, #88]	; (d73f4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d739a:	685b      	ldr	r3, [r3, #4]
   d739c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d73a0:	4605      	mov	r5, r0
   d73a2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d73a4:	bb1b      	cbnz	r3, d73ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d73a6:	f7ff fe41 	bl	d702c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d73aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d73ae:	4604      	mov	r4, r0
   d73b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d73b2:	9301      	str	r3, [sp, #4]
   d73b4:	f7fe fa64 	bl	d5880 <os_mutex_recursive_lock>
   d73b8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d73bc:	2446      	movs	r4, #70	; 0x46
   d73be:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d73c2:	45b0      	cmp	r8, r6
   d73c4:	d109      	bne.n	d73da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d73c6:	a801      	add	r0, sp, #4
   d73c8:	f7ff ff61 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d73cc:	42a5      	cmp	r5, r4
   d73ce:	bfb4      	ite	lt
   d73d0:	2000      	movlt	r0, #0
   d73d2:	2001      	movge	r0, #1
}
   d73d4:	b002      	add	sp, #8
   d73d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d73da:	f856 0b04 	ldr.w	r0, [r6], #4
   d73de:	4639      	mov	r1, r7
   d73e0:	3004      	adds	r0, #4
   d73e2:	f7ff fdaf 	bl	d6f44 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d73e6:	4284      	cmp	r4, r0
   d73e8:	bfa8      	it	ge
   d73ea:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d73ec:	e7e9      	b.n	d73c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d73ee:	2000      	movs	r0, #0
   d73f0:	e7f0      	b.n	d73d4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d73f2:	bf00      	nop
   d73f4:	e000ed00 	.word	0xe000ed00

000d73f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d73f8:	b570      	push	{r4, r5, r6, lr}
   d73fa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d73fc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7400:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d7402:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d7406:	4282      	cmp	r2, r0
   d7408:	d007      	beq.n	d741a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d740a:	4601      	mov	r1, r0
            if (*p == value) {
   d740c:	681d      	ldr	r5, [r3, #0]
   d740e:	f851 6b04 	ldr.w	r6, [r1], #4
   d7412:	42ae      	cmp	r6, r5
   d7414:	d003      	beq.n	d741e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d7416:	4608      	mov	r0, r1
   d7418:	e7f5      	b.n	d7406 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d741a:	2000      	movs	r0, #0
}
   d741c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d741e:	1a52      	subs	r2, r2, r1
   d7420:	f001 fec0 	bl	d91a4 <memmove>
    --size_;
   d7424:	6863      	ldr	r3, [r4, #4]
   d7426:	3b01      	subs	r3, #1
   d7428:	6063      	str	r3, [r4, #4]
    return true;
   d742a:	2001      	movs	r0, #1
   d742c:	e7f6      	b.n	d741c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d742e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d742e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d7430:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7434:	4604      	mov	r4, r0
   d7436:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7438:	9101      	str	r1, [sp, #4]
   d743a:	9303      	str	r3, [sp, #12]
   d743c:	f7fe fa20 	bl	d5880 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7440:	a901      	add	r1, sp, #4
   d7442:	4620      	mov	r0, r4
   d7444:	f7ff ffd8 	bl	d73f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7448:	b118      	cbz	r0, d7452 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d744a:	6863      	ldr	r3, [r4, #4]
   d744c:	b90b      	cbnz	r3, d7452 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d744e:	f7ff fe15 	bl	d707c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7452:	a803      	add	r0, sp, #12
   d7454:	f7ff ff1b 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7458:	b004      	add	sp, #16
   d745a:	bd10      	pop	{r4, pc}

000d745c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d745c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d745e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7462:	2318      	movs	r3, #24
   d7464:	4604      	mov	r4, r0
   d7466:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d746a:	42ae      	cmp	r6, r5
   d746c:	d015      	beq.n	d749a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d746e:	f105 0110 	add.w	r1, r5, #16
   d7472:	4620      	mov	r0, r4
   d7474:	f7ff ffc0 	bl	d73f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7478:	6863      	ldr	r3, [r4, #4]
   d747a:	b90b      	cbnz	r3, d7480 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d747c:	f7ff fdfe 	bl	d707c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7480:	69e0      	ldr	r0, [r4, #28]
   d7482:	6929      	ldr	r1, [r5, #16]
   d7484:	6803      	ldr	r3, [r0, #0]
   d7486:	68db      	ldr	r3, [r3, #12]
   d7488:	4798      	blx	r3
        if (h.stream) {
   d748a:	6969      	ldr	r1, [r5, #20]
   d748c:	b119      	cbz	r1, d7496 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d748e:	6a20      	ldr	r0, [r4, #32]
   d7490:	6803      	ldr	r3, [r0, #0]
   d7492:	68db      	ldr	r3, [r3, #12]
   d7494:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d7496:	3518      	adds	r5, #24
   d7498:	e7e7      	b.n	d746a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d749a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d749e:	2618      	movs	r6, #24
   d74a0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d74a4:	42ae      	cmp	r6, r5
   d74a6:	d004      	beq.n	d74b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d74a8:	4628      	mov	r0, r5
   d74aa:	f000 fe5b 	bl	d8164 <_ZN6StringD1Ev>
   d74ae:	3518      	adds	r5, #24
   d74b0:	e7f8      	b.n	d74a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d74b2:	2300      	movs	r3, #0
   d74b4:	6163      	str	r3, [r4, #20]
}
   d74b6:	bd70      	pop	{r4, r5, r6, pc}

000d74b8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d74b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74ba:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d74bc:	f7ff fdde 	bl	d707c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d74c0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d74c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d74c6:	9301      	str	r3, [sp, #4]
   d74c8:	f7fe f9da 	bl	d5880 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d74cc:	4620      	mov	r0, r4
   d74ce:	f7ff ffc5 	bl	d745c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d74d2:	a801      	add	r0, sp, #4
   d74d4:	f7ff fedb 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d74d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d74da:	b108      	cbz	r0, d74e0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d74dc:	f7fe f9c8 	bl	d5870 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d74e0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d74e4:	2618      	movs	r6, #24
   d74e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d74ea:	42ae      	cmp	r6, r5
   d74ec:	d004      	beq.n	d74f8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d74ee:	4628      	mov	r0, r5
   d74f0:	f000 fe38 	bl	d8164 <_ZN6StringD1Ev>
   d74f4:	3518      	adds	r5, #24
   d74f6:	e7f8      	b.n	d74ea <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d74f8:	6920      	ldr	r0, [r4, #16]
   d74fa:	f7fe fc37 	bl	d5d6c <free>
   d74fe:	6820      	ldr	r0, [r4, #0]
   d7500:	f7fe fc34 	bl	d5d6c <free>
}
   d7504:	4620      	mov	r0, r4
   d7506:	b002      	add	sp, #8
   d7508:	bd70      	pop	{r4, r5, r6, pc}
	...

000d750c <__tcf_2>:
    static LogManager mgr;
   d750c:	4801      	ldr	r0, [pc, #4]	; (d7514 <__tcf_2+0x8>)
   d750e:	f7ff bfd3 	b.w	d74b8 <_ZN5spark10LogManagerD1Ev>
   d7512:	bf00      	nop
   d7514:	2003e590 	.word	0x2003e590

000d7518 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7518:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d751c:	4606      	mov	r6, r0
   d751e:	460c      	mov	r4, r1
   d7520:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7522:	d927      	bls.n	d7574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7524:	4290      	cmp	r0, r2
   d7526:	d226      	bcs.n	d7576 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7528:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d752c:	1a6c      	subs	r4, r5, r1
   d752e:	f1a1 0714 	sub.w	r7, r1, #20
   d7532:	4404      	add	r4, r0
        capacity_(0) {
   d7534:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7536:	42af      	cmp	r7, r5
   d7538:	d03d      	beq.n	d75b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d753a:	b1a4      	cbz	r4, d7566 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d753c:	682b      	ldr	r3, [r5, #0]
   d753e:	6023      	str	r3, [r4, #0]
   d7540:	88ab      	ldrh	r3, [r5, #4]
   d7542:	80a3      	strh	r3, [r4, #4]
   d7544:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7548:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d754a:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d754e:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7550:	68ab      	ldr	r3, [r5, #8]
   d7552:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7554:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7556:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7558:	68ea      	ldr	r2, [r5, #12]
   d755a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d755c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d755e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7560:	692a      	ldr	r2, [r5, #16]
   d7562:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7564:	612b      	str	r3, [r5, #16]
   d7566:	f105 0008 	add.w	r0, r5, #8
   d756a:	f7ff fe27 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d756e:	3d14      	subs	r5, #20
   d7570:	3c14      	subs	r4, #20
   d7572:	e7e0      	b.n	d7536 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7574:	d01f      	beq.n	d75b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7576:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7578:	42ac      	cmp	r4, r5
   d757a:	d01c      	beq.n	d75b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d757c:	b1a6      	cbz	r6, d75a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d757e:	6823      	ldr	r3, [r4, #0]
   d7580:	6033      	str	r3, [r6, #0]
   d7582:	88a3      	ldrh	r3, [r4, #4]
   d7584:	80b3      	strh	r3, [r6, #4]
   d7586:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d758a:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d758c:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7590:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7592:	68a3      	ldr	r3, [r4, #8]
   d7594:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7596:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7598:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d759a:	68e2      	ldr	r2, [r4, #12]
   d759c:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d759e:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75a0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75a2:	6922      	ldr	r2, [r4, #16]
   d75a4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d75a6:	6123      	str	r3, [r4, #16]
   d75a8:	f104 0008 	add.w	r0, r4, #8
   d75ac:	f7ff fe06 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d75b0:	3414      	adds	r4, #20
   d75b2:	3614      	adds	r6, #20
   d75b4:	e7e0      	b.n	d7578 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d75b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75ba:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d75be:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75c0:	4604      	mov	r4, r0
   d75c2:	460e      	mov	r6, r1
   d75c4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75c6:	db0d      	blt.n	d75e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d75c8:	3501      	adds	r5, #1
        if (n > 0) {
   d75ca:	2d00      	cmp	r5, #0
   d75cc:	6800      	ldr	r0, [r0, #0]
   d75ce:	dd04      	ble.n	d75da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d75d0:	00a9      	lsls	r1, r5, #2
   d75d2:	f7fe fbd3 	bl	d5d7c <realloc>
            if (!d) {
   d75d6:	b918      	cbnz	r0, d75e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d75d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d75da:	f7fe fbc7 	bl	d5d6c <free>
        T* d = nullptr;
   d75de:	2000      	movs	r0, #0
        data_ = d;
   d75e0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d75e2:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d75e4:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d75e6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d75e8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d75ec:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d75ee:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d75f2:	1d08      	adds	r0, r1, #4
   d75f4:	f001 fdd6 	bl	d91a4 <memmove>
    new(p) T(std::move(value));
   d75f8:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d75fc:	6863      	ldr	r3, [r4, #4]
   d75fe:	3301      	adds	r3, #1
   d7600:	6063      	str	r3, [r4, #4]
    return true;
   d7602:	2001      	movs	r0, #1
   d7604:	e7e8      	b.n	d75d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7606 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7606:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7608:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d760c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d760e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	460d      	mov	r5, r1
   d7614:	f7fe f934 	bl	d5880 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7618:	e9d4 3100 	ldrd	r3, r1, [r4]
   d761c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7620:	4283      	cmp	r3, r0
   d7622:	461a      	mov	r2, r3
   d7624:	d00b      	beq.n	d763e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7626:	6812      	ldr	r2, [r2, #0]
   d7628:	42aa      	cmp	r2, r5
   d762a:	f103 0304 	add.w	r3, r3, #4
   d762e:	d1f7      	bne.n	d7620 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7630:	a801      	add	r0, sp, #4
   d7632:	f7ff fe2c 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7636:	2500      	movs	r5, #0
}
   d7638:	4628      	mov	r0, r5
   d763a:	b003      	add	sp, #12
   d763c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d763e:	462a      	mov	r2, r5
   d7640:	4620      	mov	r0, r4
   d7642:	f7ff ffb9 	bl	d75b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7646:	4605      	mov	r5, r0
   d7648:	2800      	cmp	r0, #0
   d764a:	d0f1      	beq.n	d7630 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d764c:	6863      	ldr	r3, [r4, #4]
   d764e:	2b01      	cmp	r3, #1
   d7650:	d101      	bne.n	d7656 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7652:	f7ff fd07 	bl	d7064 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7656:	a801      	add	r0, sp, #4
   d7658:	f7ff fe19 	bl	d728e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d765c:	e7ec      	b.n	d7638 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d765e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d765e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7662:	4604      	mov	r4, r0
   d7664:	460d      	mov	r5, r1
   d7666:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7668:	d914      	bls.n	d7694 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d766a:	4290      	cmp	r0, r2
   d766c:	d213      	bcs.n	d7696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d766e:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7672:	1a75      	subs	r5, r6, r1
   d7674:	f1a1 0710 	sub.w	r7, r1, #16
   d7678:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d767a:	42b7      	cmp	r7, r6
   d767c:	d018      	beq.n	d76b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d767e:	b11c      	cbz	r4, d7688 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7680:	4631      	mov	r1, r6
   d7682:	4620      	mov	r0, r4
   d7684:	f000 fdea 	bl	d825c <_ZN6StringC1EOS_>
                end->~T();
   d7688:	4630      	mov	r0, r6
   d768a:	f000 fd6b 	bl	d8164 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d768e:	3e10      	subs	r6, #16
   d7690:	3c10      	subs	r4, #16
   d7692:	e7f2      	b.n	d767a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d7694:	d00c      	beq.n	d76b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7696:	42b5      	cmp	r5, r6
   d7698:	d00a      	beq.n	d76b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d769a:	b11c      	cbz	r4, d76a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d769c:	4629      	mov	r1, r5
   d769e:	4620      	mov	r0, r4
   d76a0:	f000 fddc 	bl	d825c <_ZN6StringC1EOS_>
                p->~T();
   d76a4:	4628      	mov	r0, r5
   d76a6:	f000 fd5d 	bl	d8164 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d76aa:	3510      	adds	r5, #16
   d76ac:	3410      	adds	r4, #16
   d76ae:	e7f2      	b.n	d7696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d76b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d76b2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d76b4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d76b6:	4605      	mov	r5, r0
        if (n > 0) {
   d76b8:	dd11      	ble.n	d76de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d76ba:	0130      	lsls	r0, r6, #4
   d76bc:	f7fe fb4e 	bl	d5d5c <malloc>
            if (!d) {
   d76c0:	4604      	mov	r4, r0
   d76c2:	b158      	cbz	r0, d76dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d76c4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d76c8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d76cc:	f7ff ffc7 	bl	d765e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d76d0:	6828      	ldr	r0, [r5, #0]
   d76d2:	f7fe fb4b 	bl	d5d6c <free>
        data_ = d;
   d76d6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d76d8:	60ae      	str	r6, [r5, #8]
        return true;
   d76da:	2001      	movs	r0, #1
    }
   d76dc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d76de:	2400      	movs	r4, #0
   d76e0:	e7f6      	b.n	d76d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d76e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d76e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76e6:	4691      	mov	r9, r2
   d76e8:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d76ea:	2300      	movs	r3, #0
   d76ec:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d76ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d76f2:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d76f4:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d76f6:	4299      	cmp	r1, r3
        capacity_(0) {
   d76f8:	e9c0 3300 	strd	r3, r3, [r0]
   d76fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7700:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7704:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7708:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d770a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d770c:	dc23      	bgt.n	d7756 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d770e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d7712:	2314      	movs	r3, #20
   d7714:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7718:	42af      	cmp	r7, r5
   d771a:	d03b      	beq.n	d7794 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d771c:	4629      	mov	r1, r5
   d771e:	a80d      	add	r0, sp, #52	; 0x34
   d7720:	f000 fd9c 	bl	d825c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d7724:	a90d      	add	r1, sp, #52	; 0x34
   d7726:	a811      	add	r0, sp, #68	; 0x44
   d7728:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d772a:	f000 fd97 	bl	d825c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d772e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d7732:	4299      	cmp	r1, r3
   d7734:	da1b      	bge.n	d776e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d7736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d773a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d773e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7742:	4631      	mov	r1, r6
   d7744:	f106 0010 	add.w	r0, r6, #16
   d7748:	f7ff ff89 	bl	d765e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d774c:	b9ee      	cbnz	r6, d778a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7750:	3301      	adds	r3, #1
   d7752:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d7754:	e011      	b.n	d777a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d7756:	a80a      	add	r0, sp, #40	; 0x28
   d7758:	f7ff ffab 	bl	d76b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d775c:	2800      	cmp	r0, #0
   d775e:	d1d6      	bne.n	d770e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d7760:	a80a      	add	r0, sp, #40	; 0x28
   d7762:	f7ff fd3f 	bl	d71e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7766:	4620      	mov	r0, r4
   d7768:	b017      	add	sp, #92	; 0x5c
   d776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d776e:	3101      	adds	r1, #1
   d7770:	a80a      	add	r0, sp, #40	; 0x28
   d7772:	f7ff ff9e 	bl	d76b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7776:	2800      	cmp	r0, #0
   d7778:	d1dd      	bne.n	d7736 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d777a:	a811      	add	r0, sp, #68	; 0x44
   d777c:	f000 fcf2 	bl	d8164 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d7780:	a80d      	add	r0, sp, #52	; 0x34
   d7782:	f000 fcef 	bl	d8164 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d7786:	3514      	adds	r5, #20
   d7788:	e7c6      	b.n	d7718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d778a:	a911      	add	r1, sp, #68	; 0x44
   d778c:	4630      	mov	r0, r6
   d778e:	f000 fd65 	bl	d825c <_ZN6StringC1EOS_>
   d7792:	e7dc      	b.n	d774e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d7794:	2600      	movs	r6, #0
   d7796:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d779a:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d779c:	4637      	mov	r7, r6
   d779e:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d77a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d77a6:	429e      	cmp	r6, r3
   d77a8:	f280 8097 	bge.w	d78da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d77ac:	0133      	lsls	r3, r6, #4
   d77ae:	58d3      	ldr	r3, [r2, r3]
   d77b0:	9308      	str	r3, [sp, #32]
        if (!category) {
   d77b2:	b90b      	cbnz	r3, d77b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d77b4:	3601      	adds	r6, #1
   d77b6:	e7f4      	b.n	d77a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d77b8:	fb0a f306 	mul.w	r3, sl, r6
   d77bc:	9709      	str	r7, [sp, #36]	; 0x24
   d77be:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d77c0:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d77c2:	a909      	add	r1, sp, #36	; 0x24
   d77c4:	a808      	add	r0, sp, #32
   d77c6:	f7ff fb00 	bl	d6dca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d77ca:	4683      	mov	fp, r0
   d77cc:	2800      	cmp	r0, #0
   d77ce:	d0f1      	beq.n	d77b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d77d0:	4601      	mov	r1, r0
   d77d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d77d4:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d77d8:	f10d 031f 	add.w	r3, sp, #31
   d77dc:	4628      	mov	r0, r5
   d77de:	f7ff fb73 	bl	d6ec8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d77e2:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d77e6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d77e8:	f1b8 0f00 	cmp.w	r8, #0
   d77ec:	d166      	bne.n	d78bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d77ee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d77f2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d77f6:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d77fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d77fe:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d7802:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d7806:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d780a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d780e:	4293      	cmp	r3, r2
   d7810:	db1a      	blt.n	d7848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d7812:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d7816:	f1bb 0f00 	cmp.w	fp, #0
   d781a:	dd4a      	ble.n	d78b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d781c:	fb0a f00b 	mul.w	r0, sl, fp
   d7820:	f7fe fa9c 	bl	d5d5c <malloc>
            if (!d) {
   d7824:	9004      	str	r0, [sp, #16]
   d7826:	2800      	cmp	r0, #0
   d7828:	d045      	beq.n	d78b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d782a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d782e:	fb0a 1202 	mla	r2, sl, r2, r1
   d7832:	f7ff fe71 	bl	d7518 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7836:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d7838:	6828      	ldr	r0, [r5, #0]
   d783a:	9304      	str	r3, [sp, #16]
   d783c:	f7fe fa96 	bl	d5d6c <free>
        data_ = d;
   d7840:	9b04      	ldr	r3, [sp, #16]
   d7842:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d7844:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d7848:	9b01      	ldr	r3, [sp, #4]
   d784a:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d784e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d7850:	fb0a f303 	mul.w	r3, sl, r3
   d7854:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d7858:	f101 0014 	add.w	r0, r1, #20
   d785c:	fb0a b202 	mla	r2, sl, r2, fp
   d7860:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d7862:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d7864:	f7ff fe58 	bl	d7518 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7868:	9904      	ldr	r1, [sp, #16]
   d786a:	b1a9      	cbz	r1, d7898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d786c:	9b05      	ldr	r3, [sp, #20]
   d786e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7870:	f84b 2003 	str.w	r2, [fp, r3]
   d7874:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7878:	808b      	strh	r3, [r1, #4]
   d787a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d787e:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d7880:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d7884:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7888:	608b      	str	r3, [r1, #8]
   d788a:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d788c:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d788e:	60cb      	str	r3, [r1, #12]
   d7890:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d7892:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d7894:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7896:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d7898:	686b      	ldr	r3, [r5, #4]
   d789a:	3301      	adds	r3, #1
   d789c:	606b      	str	r3, [r5, #4]
   d789e:	a813      	add	r0, sp, #76	; 0x4c
   d78a0:	f7ff fc8c 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d78a4:	f1b8 0f00 	cmp.w	r8, #0
   d78a8:	d008      	beq.n	d78bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d78aa:	a80d      	add	r0, sp, #52	; 0x34
   d78ac:	f7ff fc86 	bl	d71bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d78b0:	e756      	b.n	d7760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d78b2:	4643      	mov	r3, r8
   d78b4:	e7c0      	b.n	d7838 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d78b6:	f04f 0801 	mov.w	r8, #1
   d78ba:	e7f0      	b.n	d789e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d78bc:	9b01      	ldr	r3, [sp, #4]
   d78be:	682d      	ldr	r5, [r5, #0]
   d78c0:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d78c4:	9b08      	ldr	r3, [sp, #32]
   d78c6:	781b      	ldrb	r3, [r3, #0]
   d78c8:	b92b      	cbnz	r3, d78d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d78ca:	f8d9 3000 	ldr.w	r3, [r9]
   d78ce:	9a02      	ldr	r2, [sp, #8]
   d78d0:	4413      	add	r3, r2
   d78d2:	7c1b      	ldrb	r3, [r3, #16]
   d78d4:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d78d6:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d78d8:	e773      	b.n	d77c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78da:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d78dc:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78de:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d78e0:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78e2:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78e4:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d78e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d78e8:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78ea:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78ec:	60a2      	str	r2, [r4, #8]
   d78ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d78f0:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78f2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78f4:	60e2      	str	r2, [r4, #12]
   d78f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d78f8:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78fa:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d78fc:	6122      	str	r2, [r4, #16]
   d78fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7900:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d7902:	9b03      	ldr	r3, [sp, #12]
   d7904:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d7906:	6162      	str	r2, [r4, #20]
   d7908:	7623      	strb	r3, [r4, #24]
   d790a:	e7ce      	b.n	d78aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d790c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d790c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d790e:	4605      	mov	r5, r0
   d7910:	4b09      	ldr	r3, [pc, #36]	; (d7938 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7912:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7916:	4604      	mov	r4, r0
   d7918:	460e      	mov	r6, r1
        filter_(level, filters) {
   d791a:	a801      	add	r0, sp, #4
   d791c:	4611      	mov	r1, r2
   d791e:	f7fc ff0d 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7922:	aa01      	add	r2, sp, #4
   d7924:	4631      	mov	r1, r6
   d7926:	4628      	mov	r0, r5
   d7928:	f7ff fedb 	bl	d76e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d792c:	a801      	add	r0, sp, #4
   d792e:	f7fc fccd 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7932:	4620      	mov	r0, r4
   d7934:	b004      	add	sp, #16
   d7936:	bd70      	pop	{r4, r5, r6, pc}
   d7938:	000d95b0 	.word	0x000d95b0

000d793c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d793c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d793e:	460f      	mov	r7, r1
   d7940:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7942:	4926      	ldr	r1, [pc, #152]	; (d79dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d7944:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7946:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d7948:	4616      	mov	r6, r2
   d794a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d794c:	f001 fc87 	bl	d925e <strcmp>
   d7950:	bb00      	cbnz	r0, d7994 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d7952:	b1e4      	cbz	r4, d798e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7954:	4629      	mov	r1, r5
   d7956:	4668      	mov	r0, sp
   d7958:	f7ff fc8a 	bl	d7270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d795c:	4920      	ldr	r1, [pc, #128]	; (d79e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d795e:	2024      	movs	r0, #36	; 0x24
   d7960:	f000 ff82 	bl	d8868 <_ZnwjRKSt9nothrow_t>
   d7964:	4605      	mov	r5, r0
   d7966:	b170      	cbz	r0, d7986 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7968:	4669      	mov	r1, sp
   d796a:	a803      	add	r0, sp, #12
   d796c:	f7fc fee6 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7970:	aa03      	add	r2, sp, #12
   d7972:	4631      	mov	r1, r6
   d7974:	4628      	mov	r0, r5
   d7976:	f7ff ffc9 	bl	d790c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d797a:	a803      	add	r0, sp, #12
   d797c:	f7fc fca6 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d7980:	4b18      	ldr	r3, [pc, #96]	; (d79e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d7982:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d7984:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7986:	4668      	mov	r0, sp
   d7988:	f7fc fca0 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d798c:	462c      	mov	r4, r5
}
   d798e:	4620      	mov	r0, r4
   d7990:	b007      	add	sp, #28
   d7992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7994:	4914      	ldr	r1, [pc, #80]	; (d79e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d7996:	4638      	mov	r0, r7
   d7998:	f001 fc61 	bl	d925e <strcmp>
   d799c:	b9e0      	cbnz	r0, d79d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d799e:	2c00      	cmp	r4, #0
   d79a0:	d0f5      	beq.n	d798e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d79a2:	4629      	mov	r1, r5
   d79a4:	4668      	mov	r0, sp
   d79a6:	f7ff fc63 	bl	d7270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d79aa:	490d      	ldr	r1, [pc, #52]	; (d79e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d79ac:	2024      	movs	r0, #36	; 0x24
   d79ae:	f000 ff5b 	bl	d8868 <_ZnwjRKSt9nothrow_t>
   d79b2:	4605      	mov	r5, r0
   d79b4:	2800      	cmp	r0, #0
   d79b6:	d0e6      	beq.n	d7986 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d79b8:	4669      	mov	r1, sp
   d79ba:	a803      	add	r0, sp, #12
   d79bc:	f7fc febe 	bl	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d79c0:	aa03      	add	r2, sp, #12
   d79c2:	4631      	mov	r1, r6
   d79c4:	4628      	mov	r0, r5
   d79c6:	f7ff ffa1 	bl	d790c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79ca:	a803      	add	r0, sp, #12
   d79cc:	f7fc fc7e 	bl	d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79d0:	4b06      	ldr	r3, [pc, #24]	; (d79ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d79d2:	602b      	str	r3, [r5, #0]
   d79d4:	622c      	str	r4, [r5, #32]
}
   d79d6:	e7d6      	b.n	d7986 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d79d8:	2400      	movs	r4, #0
   d79da:	e7d8      	b.n	d798e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d79dc:	000d97b5 	.word	0x000d97b5
   d79e0:	000d994c 	.word	0x000d994c
   d79e4:	000d984c 	.word	0x000d984c
   d79e8:	000d97b9 	.word	0x000d97b9
   d79ec:	000d9834 	.word	0x000d9834

000d79f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d79f0:	4b01      	ldr	r3, [pc, #4]	; (d79f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d79f2:	4a02      	ldr	r2, [pc, #8]	; (d79fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d79f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d79f6:	4770      	bx	lr
   d79f8:	2003e58c 	.word	0x2003e58c
   d79fc:	000d97ca 	.word	0x000d97ca

000d7a00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a04:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d7a06:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a0a:	4604      	mov	r4, r0
   d7a0c:	460e      	mov	r6, r1
   d7a0e:	4617      	mov	r7, r2
   d7a10:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d7a12:	f000 fd6f 	bl	d84f4 <_Z16_fetch_usbserialv>
   d7a16:	4581      	cmp	r9, r0
   d7a18:	d04c      	beq.n	d7ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d7a1a:	792b      	ldrb	r3, [r5, #4]
   d7a1c:	0719      	lsls	r1, r3, #28
   d7a1e:	d504      	bpl.n	d7a2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d7a20:	696a      	ldr	r2, [r5, #20]
   d7a22:	4954      	ldr	r1, [pc, #336]	; (d7b74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7a24:	4620      	mov	r0, r4
   d7a26:	f7ff fa40 	bl	d6eaa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d7a2a:	f1b8 0f00 	cmp.w	r8, #0
   d7a2e:	d00d      	beq.n	d7a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d7a30:	215b      	movs	r1, #91	; 0x5b
   d7a32:	4620      	mov	r0, r4
   d7a34:	f7ff fa2d 	bl	d6e92 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7a38:	4641      	mov	r1, r8
   d7a3a:	4620      	mov	r0, r4
   d7a3c:	f7ff fa1a 	bl	d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7a40:	6823      	ldr	r3, [r4, #0]
   d7a42:	494d      	ldr	r1, [pc, #308]	; (d7b78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d7a44:	68db      	ldr	r3, [r3, #12]
   d7a46:	2202      	movs	r2, #2
   d7a48:	4620      	mov	r0, r4
   d7a4a:	4798      	blx	r3
    if (attr.has_file) {
   d7a4c:	792b      	ldrb	r3, [r5, #4]
   d7a4e:	07da      	lsls	r2, r3, #31
   d7a50:	d523      	bpl.n	d7a9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d7a52:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d7a56:	212f      	movs	r1, #47	; 0x2f
   d7a58:	4640      	mov	r0, r8
   d7a5a:	f001 fc5d 	bl	d9318 <strrchr>
    if (s1) {
   d7a5e:	b108      	cbz	r0, d7a64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d7a60:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d7a64:	4641      	mov	r1, r8
   d7a66:	4620      	mov	r0, r4
   d7a68:	f7ff fa04 	bl	d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7a6c:	792b      	ldrb	r3, [r5, #4]
   d7a6e:	079b      	lsls	r3, r3, #30
   d7a70:	d508      	bpl.n	d7a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d7a72:	213a      	movs	r1, #58	; 0x3a
   d7a74:	4620      	mov	r0, r4
   d7a76:	f7ff fa0c 	bl	d6e92 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d7a7a:	68ea      	ldr	r2, [r5, #12]
   d7a7c:	493f      	ldr	r1, [pc, #252]	; (d7b7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d7a7e:	4620      	mov	r0, r4
   d7a80:	f7ff fa13 	bl	d6eaa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d7a84:	792a      	ldrb	r2, [r5, #4]
   d7a86:	6823      	ldr	r3, [r4, #0]
   d7a88:	f012 0f04 	tst.w	r2, #4
   d7a8c:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d7a8e:	bf14      	ite	ne
   d7a90:	493b      	ldrne	r1, [pc, #236]	; (d7b80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d7a92:	493c      	ldreq	r1, [pc, #240]	; (d7b84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d7a94:	2202      	movs	r2, #2
            write(": ", 2);
   d7a96:	4620      	mov	r0, r4
   d7a98:	4798      	blx	r3
    if (attr.has_function) {
   d7a9a:	792b      	ldrb	r3, [r5, #4]
   d7a9c:	0758      	lsls	r0, r3, #29
   d7a9e:	d51d      	bpl.n	d7adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7aa0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7aa2:	460b      	mov	r3, r1
   d7aa4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d7aa6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7aaa:	b160      	cbz	r0, d7ac6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d7aac:	2820      	cmp	r0, #32
   d7aae:	d108      	bne.n	d7ac2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d7ab0:	4619      	mov	r1, r3
   d7ab2:	e7f7      	b.n	d7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d7ab4:	4834      	ldr	r0, [pc, #208]	; (d7b88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7ab6:	f000 f966 	bl	d7d86 <_ZN5spark12NetworkClass9listeningEv>
   d7aba:	2800      	cmp	r0, #0
   d7abc:	d0ad      	beq.n	d7a1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d7abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d7ac2:	2828      	cmp	r0, #40	; 0x28
   d7ac4:	d1ee      	bne.n	d7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d7ac6:	6823      	ldr	r3, [r4, #0]
   d7ac8:	1a52      	subs	r2, r2, r1
   d7aca:	68db      	ldr	r3, [r3, #12]
   d7acc:	4620      	mov	r0, r4
   d7ace:	4798      	blx	r3
        write("(): ", 4);
   d7ad0:	6823      	ldr	r3, [r4, #0]
   d7ad2:	492e      	ldr	r1, [pc, #184]	; (d7b8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7ad4:	68db      	ldr	r3, [r3, #12]
   d7ad6:	2204      	movs	r2, #4
   d7ad8:	4620      	mov	r0, r4
   d7ada:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d7adc:	2100      	movs	r1, #0
   d7ade:	4638      	mov	r0, r7
   d7ae0:	f7fe f86e 	bl	d5bc0 <log_level_name>
   d7ae4:	4601      	mov	r1, r0
    write(s);
   d7ae6:	4620      	mov	r0, r4
   d7ae8:	f7ff f9c4 	bl	d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7aec:	6823      	ldr	r3, [r4, #0]
   d7aee:	4925      	ldr	r1, [pc, #148]	; (d7b84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7af0:	68db      	ldr	r3, [r3, #12]
   d7af2:	2202      	movs	r2, #2
   d7af4:	4620      	mov	r0, r4
   d7af6:	4798      	blx	r3
    if (msg) {
   d7af8:	b11e      	cbz	r6, d7b02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d7afa:	4631      	mov	r1, r6
   d7afc:	4620      	mov	r0, r4
   d7afe:	f7ff f9b9 	bl	d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d7b02:	792b      	ldrb	r3, [r5, #4]
   d7b04:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7b08:	d02c      	beq.n	d7b64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d7b0a:	6823      	ldr	r3, [r4, #0]
   d7b0c:	4920      	ldr	r1, [pc, #128]	; (d7b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7b0e:	68db      	ldr	r3, [r3, #12]
   d7b10:	2202      	movs	r2, #2
   d7b12:	4620      	mov	r0, r4
   d7b14:	4798      	blx	r3
        if (attr.has_code) {
   d7b16:	792b      	ldrb	r3, [r5, #4]
   d7b18:	06d9      	lsls	r1, r3, #27
   d7b1a:	d50a      	bpl.n	d7b32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d7b1c:	6823      	ldr	r3, [r4, #0]
   d7b1e:	491d      	ldr	r1, [pc, #116]	; (d7b94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7b20:	68db      	ldr	r3, [r3, #12]
   d7b22:	2207      	movs	r2, #7
   d7b24:	4620      	mov	r0, r4
   d7b26:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7b28:	69aa      	ldr	r2, [r5, #24]
   d7b2a:	491b      	ldr	r1, [pc, #108]	; (d7b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	f7ff f9bc 	bl	d6eaa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d7b32:	792b      	ldrb	r3, [r5, #4]
   d7b34:	069a      	lsls	r2, r3, #26
   d7b36:	d511      	bpl.n	d7b5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7b38:	06db      	lsls	r3, r3, #27
   d7b3a:	d505      	bpl.n	d7b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d7b3c:	6823      	ldr	r3, [r4, #0]
   d7b3e:	4910      	ldr	r1, [pc, #64]	; (d7b80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7b40:	68db      	ldr	r3, [r3, #12]
   d7b42:	2202      	movs	r2, #2
   d7b44:	4620      	mov	r0, r4
   d7b46:	4798      	blx	r3
            write("details = ", 10);
   d7b48:	6823      	ldr	r3, [r4, #0]
   d7b4a:	4914      	ldr	r1, [pc, #80]	; (d7b9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7b4c:	68db      	ldr	r3, [r3, #12]
   d7b4e:	4620      	mov	r0, r4
   d7b50:	220a      	movs	r2, #10
   d7b52:	4798      	blx	r3
            write(attr.details);
   d7b54:	69e9      	ldr	r1, [r5, #28]
   d7b56:	4620      	mov	r0, r4
   d7b58:	f7ff f98c 	bl	d6e74 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d7b5c:	215d      	movs	r1, #93	; 0x5d
   d7b5e:	4620      	mov	r0, r4
   d7b60:	f7ff f997 	bl	d6e92 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d7b64:	6823      	ldr	r3, [r4, #0]
   d7b66:	490e      	ldr	r1, [pc, #56]	; (d7ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7b68:	68db      	ldr	r3, [r3, #12]
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	2202      	movs	r2, #2
}
   d7b6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d7b72:	4718      	bx	r3
   d7b74:	000d97ce 	.word	0x000d97ce
   d7b78:	000d97d5 	.word	0x000d97d5
   d7b7c:	000d9582 	.word	0x000d9582
   d7b80:	000d97d8 	.word	0x000d97d8
   d7b84:	000d97dd 	.word	0x000d97dd
   d7b88:	2003e5b8 	.word	0x2003e5b8
   d7b8c:	000d97db 	.word	0x000d97db
   d7b90:	000d97e0 	.word	0x000d97e0
   d7b94:	000d97e3 	.word	0x000d97e3
   d7b98:	000d97eb 	.word	0x000d97eb
   d7b9c:	000d97ee 	.word	0x000d97ee
   d7ba0:	000d97f9 	.word	0x000d97f9

000d7ba4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ba8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d7baa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7bb0:	4605      	mov	r5, r0
   d7bb2:	460f      	mov	r7, r1
   d7bb4:	4690      	mov	r8, r2
   d7bb6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d7bb8:	f000 fc9c 	bl	d84f4 <_Z16_fetch_usbserialv>
   d7bbc:	4581      	cmp	r9, r0
   d7bbe:	d105      	bne.n	d7bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7bc0:	4849      	ldr	r0, [pc, #292]	; (d7ce8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d7bc2:	f000 f8e0 	bl	d7d86 <_ZN5spark12NetworkClass9listeningEv>
   d7bc6:	2800      	cmp	r0, #0
   d7bc8:	f040 808a 	bne.w	d7ce0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d7bcc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d7bce:	4a47      	ldr	r2, [pc, #284]	; (d7cec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7bd0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d7bd2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d7bd6:	a801      	add	r0, sp, #4
        strm_(stream) {
   d7bd8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d7bda:	f88d 9008 	strb.w	r9, [sp, #8]
   d7bde:	f7ff f83c 	bl	d6c5a <_ZN5spark10JSONWriter11beginObjectEv>
   d7be2:	4649      	mov	r1, r9
   d7be4:	4640      	mov	r0, r8
   d7be6:	f7fd ffeb 	bl	d5bc0 <log_level_name>
    json.name("l", 1).value(s);
   d7bea:	4941      	ldr	r1, [pc, #260]	; (d7cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7bec:	4680      	mov	r8, r0
   d7bee:	2201      	movs	r2, #1
   d7bf0:	a801      	add	r0, sp, #4
   d7bf2:	f7ff f8bb 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7bf6:	4641      	mov	r1, r8
   d7bf8:	f7ff f92e 	bl	d6e58 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d7bfc:	b13f      	cbz	r7, d7c0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7bfe:	493d      	ldr	r1, [pc, #244]	; (d7cf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7c00:	2201      	movs	r2, #1
   d7c02:	a801      	add	r0, sp, #4
   d7c04:	f7ff f8b2 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c08:	4639      	mov	r1, r7
   d7c0a:	f7ff f925 	bl	d6e58 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d7c0e:	b13e      	cbz	r6, d7c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7c10:	4939      	ldr	r1, [pc, #228]	; (d7cf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7c12:	2201      	movs	r2, #1
   d7c14:	a801      	add	r0, sp, #4
   d7c16:	f7ff f8a9 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c1a:	4631      	mov	r1, r6
   d7c1c:	f7ff f91c 	bl	d6e58 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7c20:	7923      	ldrb	r3, [r4, #4]
   d7c22:	07df      	lsls	r7, r3, #31
   d7c24:	d50e      	bpl.n	d7c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7c26:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7c28:	212f      	movs	r1, #47	; 0x2f
   d7c2a:	4630      	mov	r0, r6
   d7c2c:	f001 fb74 	bl	d9318 <strrchr>
    if (s1) {
   d7c30:	b100      	cbz	r0, d7c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7c32:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d7c34:	4931      	ldr	r1, [pc, #196]	; (d7cfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7c36:	2201      	movs	r2, #1
   d7c38:	a801      	add	r0, sp, #4
   d7c3a:	f7ff f897 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c3e:	4631      	mov	r1, r6
   d7c40:	f7ff f90a 	bl	d6e58 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d7c44:	7923      	ldrb	r3, [r4, #4]
   d7c46:	079e      	lsls	r6, r3, #30
   d7c48:	d507      	bpl.n	d7c5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7c4a:	492d      	ldr	r1, [pc, #180]	; (d7d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7c4c:	2202      	movs	r2, #2
   d7c4e:	a801      	add	r0, sp, #4
   d7c50:	f7ff f88c 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c54:	68e1      	ldr	r1, [r4, #12]
   d7c56:	f7ff f80d 	bl	d6c74 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d7c5a:	7923      	ldrb	r3, [r4, #4]
   d7c5c:	0758      	lsls	r0, r3, #29
   d7c5e:	d514      	bpl.n	d7c8a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7c60:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7c62:	4633      	mov	r3, r6
   d7c64:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d7c66:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7c6a:	b12a      	cbz	r2, d7c78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d7c6c:	2a20      	cmp	r2, #32
   d7c6e:	d101      	bne.n	d7c74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7c70:	461e      	mov	r6, r3
   d7c72:	e7f7      	b.n	d7c64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d7c74:	2a28      	cmp	r2, #40	; 0x28
   d7c76:	d1f5      	bne.n	d7c64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d7c78:	4922      	ldr	r1, [pc, #136]	; (d7d04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7c7a:	2202      	movs	r2, #2
   d7c7c:	a801      	add	r0, sp, #4
   d7c7e:	f7ff f875 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c82:	1bba      	subs	r2, r7, r6
   d7c84:	4631      	mov	r1, r6
   d7c86:	f7ff f881 	bl	d6d8c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d7c8a:	7923      	ldrb	r3, [r4, #4]
   d7c8c:	0719      	lsls	r1, r3, #28
   d7c8e:	d507      	bpl.n	d7ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d7c90:	491d      	ldr	r1, [pc, #116]	; (d7d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7c92:	2201      	movs	r2, #1
   d7c94:	a801      	add	r0, sp, #4
   d7c96:	f7ff f869 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7c9a:	6961      	ldr	r1, [r4, #20]
   d7c9c:	f7fe fffc 	bl	d6c98 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d7ca0:	7923      	ldrb	r3, [r4, #4]
   d7ca2:	06da      	lsls	r2, r3, #27
   d7ca4:	d508      	bpl.n	d7cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d7ca6:	2204      	movs	r2, #4
   d7ca8:	4918      	ldr	r1, [pc, #96]	; (d7d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7caa:	eb0d 0002 	add.w	r0, sp, r2
   d7cae:	f7ff f85d 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7cb2:	69a1      	ldr	r1, [r4, #24]
   d7cb4:	f7fe ffde 	bl	d6c74 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d7cb8:	7923      	ldrb	r3, [r4, #4]
   d7cba:	069b      	lsls	r3, r3, #26
   d7cbc:	d507      	bpl.n	d7cce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d7cbe:	4914      	ldr	r1, [pc, #80]	; (d7d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7cc0:	2206      	movs	r2, #6
   d7cc2:	a801      	add	r0, sp, #4
   d7cc4:	f7ff f852 	bl	d6d6c <_ZN5spark10JSONWriter4nameEPKcj>
   d7cc8:	69e1      	ldr	r1, [r4, #28]
   d7cca:	f7ff f8c5 	bl	d6e58 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d7cce:	a801      	add	r0, sp, #4
   d7cd0:	f7fe ffad 	bl	d6c2e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7cd4:	6a28      	ldr	r0, [r5, #32]
   d7cd6:	490f      	ldr	r1, [pc, #60]	; (d7d14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7cd8:	6803      	ldr	r3, [r0, #0]
   d7cda:	2202      	movs	r2, #2
   d7cdc:	68db      	ldr	r3, [r3, #12]
   d7cde:	4798      	blx	r3
}
   d7ce0:	b005      	add	sp, #20
   d7ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7ce6:	bf00      	nop
   d7ce8:	2003e5b8 	.word	0x2003e5b8
   d7cec:	000d981c 	.word	0x000d981c
   d7cf0:	000d97ab 	.word	0x000d97ab
   d7cf4:	000d97fc 	.word	0x000d97fc
   d7cf8:	000d958a 	.word	0x000d958a
   d7cfc:	000d952d 	.word	0x000d952d
   d7d00:	000d97fe 	.word	0x000d97fe
   d7d04:	000d9801 	.word	0x000d9801
   d7d08:	000d9804 	.word	0x000d9804
   d7d0c:	000d9806 	.word	0x000d9806
   d7d10:	000d980b 	.word	0x000d980b
   d7d14:	000d97f9 	.word	0x000d97f9

000d7d18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7d18:	2300      	movs	r3, #0
   d7d1a:	6840      	ldr	r0, [r0, #4]
   d7d1c:	461a      	mov	r2, r3
   d7d1e:	f7fd bfbd 	b.w	d5c9c <network_connect>

000d7d22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7d22:	6840      	ldr	r0, [r0, #4]
   d7d24:	2200      	movs	r2, #0
   d7d26:	2102      	movs	r1, #2
   d7d28:	f7fd bfc8 	b.w	d5cbc <network_disconnect>

000d7d2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7d2c:	2200      	movs	r2, #0
   d7d2e:	6840      	ldr	r0, [r0, #4]
   d7d30:	4611      	mov	r1, r2
   d7d32:	f7fd bfbb 	b.w	d5cac <network_connecting>

000d7d36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7d36:	2200      	movs	r2, #0
   d7d38:	6840      	ldr	r0, [r0, #4]
   d7d3a:	4611      	mov	r1, r2
   d7d3c:	f7fd bfc6 	b.w	d5ccc <network_ready>

000d7d40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7d40:	2300      	movs	r3, #0
   d7d42:	6840      	ldr	r0, [r0, #4]
   d7d44:	461a      	mov	r2, r3
   d7d46:	4619      	mov	r1, r3
   d7d48:	f7fd bfc8 	b.w	d5cdc <network_on>

000d7d4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7d4c:	2300      	movs	r3, #0
   d7d4e:	6840      	ldr	r0, [r0, #4]
   d7d50:	461a      	mov	r2, r3
   d7d52:	4619      	mov	r1, r3
   d7d54:	f7fd bfca 	b.w	d5cec <network_off>

000d7d58 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7d58:	6840      	ldr	r0, [r0, #4]
   d7d5a:	2100      	movs	r1, #0
   d7d5c:	f7fd bfee 	b.w	d5d3c <network_is_on>

000d7d60 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7d60:	6840      	ldr	r0, [r0, #4]
   d7d62:	2100      	movs	r1, #0
   d7d64:	f7fd bff2 	b.w	d5d4c <network_is_off>

000d7d68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7d68:	6840      	ldr	r0, [r0, #4]
   d7d6a:	2200      	movs	r2, #0
   d7d6c:	f081 0101 	eor.w	r1, r1, #1
   d7d70:	f7fd bfc4 	b.w	d5cfc <network_listen>

000d7d74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7d74:	6840      	ldr	r0, [r0, #4]
   d7d76:	2200      	movs	r2, #0
   d7d78:	f7fd bfd0 	b.w	d5d1c <network_set_listen_timeout>

000d7d7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7d7c:	2200      	movs	r2, #0
   d7d7e:	6840      	ldr	r0, [r0, #4]
   d7d80:	4611      	mov	r1, r2
   d7d82:	f7fd bfd3 	b.w	d5d2c <network_get_listen_timeout>

000d7d86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7d86:	2200      	movs	r2, #0
   d7d88:	6840      	ldr	r0, [r0, #4]
   d7d8a:	4611      	mov	r1, r2
   d7d8c:	f7fd bfbe 	b.w	d5d0c <network_listening>

000d7d90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7d94:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7d96:	b095      	sub	sp, #84	; 0x54
   d7d98:	4616      	mov	r6, r2
   d7d9a:	460d      	mov	r5, r1
   d7d9c:	4607      	mov	r7, r0
    IPAddress addr;
   d7d9e:	f7fe fde7 	bl	d6970 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7da2:	4621      	mov	r1, r4
   d7da4:	2218      	movs	r2, #24
   d7da6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7da8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7daa:	f001 fa15 	bl	d91d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7dae:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7db0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7db4:	4621      	mov	r1, r4
   d7db6:	466b      	mov	r3, sp
   d7db8:	aa0c      	add	r2, sp, #48	; 0x30
   d7dba:	4630      	mov	r0, r6
   d7dbc:	f7fd fe20 	bl	d5a00 <netdb_getaddrinfo>
    if (!r) {
   d7dc0:	4604      	mov	r4, r0
   d7dc2:	2800      	cmp	r0, #0
   d7dc4:	d146      	bne.n	d7e54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7dc6:	4602      	mov	r2, r0
   d7dc8:	2101      	movs	r1, #1
   d7dca:	6868      	ldr	r0, [r5, #4]
   d7dcc:	f7fd ff7e 	bl	d5ccc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7dd0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7dd2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7dd4:	4622      	mov	r2, r4
   d7dd6:	6868      	ldr	r0, [r5, #4]
   d7dd8:	f7fd ff78 	bl	d5ccc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ddc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7dde:	4681      	mov	r9, r0
        bool ok = false;
   d7de0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7de2:	2e00      	cmp	r6, #0
   d7de4:	d036      	beq.n	d7e54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7de6:	2900      	cmp	r1, #0
   d7de8:	d134      	bne.n	d7e54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7dea:	6873      	ldr	r3, [r6, #4]
   d7dec:	2b02      	cmp	r3, #2
   d7dee:	d003      	beq.n	d7df8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7df0:	2b0a      	cmp	r3, #10
   d7df2:	d00b      	beq.n	d7e0c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7df4:	69f6      	ldr	r6, [r6, #28]
   d7df6:	e7f4      	b.n	d7de2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7df8:	f1b8 0f00 	cmp.w	r8, #0
   d7dfc:	d004      	beq.n	d7e08 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7dfe:	6971      	ldr	r1, [r6, #20]
   d7e00:	4638      	mov	r0, r7
   d7e02:	3104      	adds	r1, #4
   d7e04:	f7fe fde1 	bl	d69ca <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7e08:	4641      	mov	r1, r8
   d7e0a:	e7f3      	b.n	d7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e0c:	f1b9 0f00 	cmp.w	r9, #0
   d7e10:	d101      	bne.n	d7e16 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7e12:	4649      	mov	r1, r9
   d7e14:	e7ee      	b.n	d7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7e16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7e18:	2210      	movs	r2, #16
   d7e1a:	a801      	add	r0, sp, #4
   d7e1c:	f001 f9dc 	bl	d91d8 <memset>
                    a.v = 6;
   d7e20:	2306      	movs	r3, #6
   d7e22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e26:	ad01      	add	r5, sp, #4
   d7e28:	f104 0308 	add.w	r3, r4, #8
   d7e2c:	3418      	adds	r4, #24
   d7e2e:	6818      	ldr	r0, [r3, #0]
   d7e30:	6859      	ldr	r1, [r3, #4]
   d7e32:	462a      	mov	r2, r5
   d7e34:	c203      	stmia	r2!, {r0, r1}
   d7e36:	3308      	adds	r3, #8
   d7e38:	42a3      	cmp	r3, r4
   d7e3a:	4615      	mov	r5, r2
   d7e3c:	d1f7      	bne.n	d7e2e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7e3e:	a901      	add	r1, sp, #4
   d7e40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7e42:	ad07      	add	r5, sp, #28
   d7e44:	f7fe fda2 	bl	d698c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e4a:	1d3c      	adds	r4, r7, #4
   d7e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e4e:	682b      	ldr	r3, [r5, #0]
   d7e50:	7023      	strb	r3, [r4, #0]
   d7e52:	e7de      	b.n	d7e12 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7e54:	9800      	ldr	r0, [sp, #0]
   d7e56:	f7fd fdcb 	bl	d59f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7e5a:	4638      	mov	r0, r7
   d7e5c:	b015      	add	sp, #84	; 0x54
   d7e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7e64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7e64:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7e66:	4a03      	ldr	r2, [pc, #12]	; (d7e74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7e68:	601a      	str	r2, [r3, #0]
   d7e6a:	2200      	movs	r2, #0
   d7e6c:	605a      	str	r2, [r3, #4]

} // spark
   d7e6e:	4770      	bx	lr
   d7e70:	2003e5b8 	.word	0x2003e5b8
   d7e74:	000d9894 	.word	0x000d9894

000d7e78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e7a:	4606      	mov	r6, r0
   d7e7c:	460d      	mov	r5, r1
  size_t n = 0;
   d7e7e:	188f      	adds	r7, r1, r2
   d7e80:	2400      	movs	r4, #0
  while (size--) {
   d7e82:	42bd      	cmp	r5, r7
   d7e84:	d00c      	beq.n	d7ea0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7e86:	6833      	ldr	r3, [r6, #0]
   d7e88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7e8c:	689b      	ldr	r3, [r3, #8]
   d7e8e:	4630      	mov	r0, r6
   d7e90:	4798      	blx	r3
     if (chunk>=0)
   d7e92:	1e03      	subs	r3, r0, #0
   d7e94:	db01      	blt.n	d7e9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7e96:	441c      	add	r4, r3
  while (size--) {
   d7e98:	e7f3      	b.n	d7e82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7e9a:	2c00      	cmp	r4, #0
   d7e9c:	bf08      	it	eq
   d7e9e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ea4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7ea4:	b513      	push	{r0, r1, r4, lr}
   d7ea6:	4604      	mov	r4, r0
    }
   d7ea8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7eaa:	b159      	cbz	r1, d7ec4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7eac:	9101      	str	r1, [sp, #4]
   d7eae:	f001 fa06 	bl	d92be <strlen>
   d7eb2:	6823      	ldr	r3, [r4, #0]
   d7eb4:	9901      	ldr	r1, [sp, #4]
   d7eb6:	68db      	ldr	r3, [r3, #12]
   d7eb8:	4602      	mov	r2, r0
   d7eba:	4620      	mov	r0, r4
    }
   d7ebc:	b002      	add	sp, #8
   d7ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7ec2:	4718      	bx	r3
    }
   d7ec4:	b002      	add	sp, #8
   d7ec6:	bd10      	pop	{r4, pc}

000d7ec8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7ec8:	b508      	push	{r3, lr}
  return write(str);
   d7eca:	f7ff ffeb 	bl	d7ea4 <_ZN5Print5writeEPKc>
}
   d7ece:	bd08      	pop	{r3, pc}

000d7ed0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7ed0:	6803      	ldr	r3, [r0, #0]
   d7ed2:	689b      	ldr	r3, [r3, #8]
   d7ed4:	4718      	bx	r3

000d7ed6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7ed6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7ed8:	210d      	movs	r1, #13
{
   d7eda:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7edc:	f7ff fff8 	bl	d7ed0 <_ZN5Print5printEc>
  n += print('\n');
   d7ee0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7ee2:	4604      	mov	r4, r0
  n += print('\n');
   d7ee4:	4628      	mov	r0, r5
   d7ee6:	f7ff fff3 	bl	d7ed0 <_ZN5Print5printEc>
  return n;
}
   d7eea:	4420      	add	r0, r4
   d7eec:	bd38      	pop	{r3, r4, r5, pc}

000d7eee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7eee:	b538      	push	{r3, r4, r5, lr}
   d7ef0:	4605      	mov	r5, r0
  return write(str);
   d7ef2:	f7ff ffd7 	bl	d7ea4 <_ZN5Print5writeEPKc>
   d7ef6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7ef8:	4628      	mov	r0, r5
   d7efa:	f7ff ffec 	bl	d7ed6 <_ZN5Print7printlnEv>
  return n;
}
   d7efe:	4420      	add	r0, r4
   d7f00:	bd38      	pop	{r3, r4, r5, pc}

000d7f02 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f02:	b530      	push	{r4, r5, lr}
   d7f04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f06:	2300      	movs	r3, #0
   d7f08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f0c:	2a01      	cmp	r2, #1
   d7f0e:	bf98      	it	ls
   d7f10:	220a      	movls	r2, #10
   d7f12:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7f14:	460d      	mov	r5, r1
   d7f16:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7f1a:	fb01 5312 	mls	r3, r1, r2, r5
   d7f1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f22:	2b09      	cmp	r3, #9
   d7f24:	bf94      	ite	ls
   d7f26:	3330      	addls	r3, #48	; 0x30
   d7f28:	3337      	addhi	r3, #55	; 0x37
   d7f2a:	b2db      	uxtb	r3, r3
  } while(n);
   d7f2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f2e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7f32:	d9ef      	bls.n	d7f14 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7f34:	4621      	mov	r1, r4
   d7f36:	f7ff ffb5 	bl	d7ea4 <_ZN5Print5writeEPKc>
}
   d7f3a:	b00b      	add	sp, #44	; 0x2c
   d7f3c:	bd30      	pop	{r4, r5, pc}

000d7f3e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f42:	b086      	sub	sp, #24
   d7f44:	af00      	add	r7, sp, #0
   d7f46:	4605      	mov	r5, r0
   d7f48:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f4a:	1d38      	adds	r0, r7, #4
   d7f4c:	2114      	movs	r1, #20
{
   d7f4e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7f50:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7f52:	f7fd ff1b 	bl	d5d8c <vsnprintf>

    if (n<bufsize)
   d7f56:	2813      	cmp	r0, #19
   d7f58:	d80e      	bhi.n	d7f78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7f5a:	1d39      	adds	r1, r7, #4
   d7f5c:	4628      	mov	r0, r5
   d7f5e:	f7ff ffa1 	bl	d7ea4 <_ZN5Print5writeEPKc>
   d7f62:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7f64:	b11e      	cbz	r6, d7f6e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7f66:	4628      	mov	r0, r5
   d7f68:	f7ff ffb5 	bl	d7ed6 <_ZN5Print7printlnEv>
   d7f6c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7f6e:	4620      	mov	r0, r4
   d7f70:	3718      	adds	r7, #24
   d7f72:	46bd      	mov	sp, r7
   d7f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7f78:	f100 0308 	add.w	r3, r0, #8
   d7f7c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7f80:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7f82:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7f86:	4622      	mov	r2, r4
   d7f88:	1c41      	adds	r1, r0, #1
   d7f8a:	683b      	ldr	r3, [r7, #0]
   d7f8c:	4668      	mov	r0, sp
   d7f8e:	f7fd fefd 	bl	d5d8c <vsnprintf>
  return write(str);
   d7f92:	4669      	mov	r1, sp
   d7f94:	4628      	mov	r0, r5
   d7f96:	f7ff ff85 	bl	d7ea4 <_ZN5Print5writeEPKc>
   d7f9a:	4604      	mov	r4, r0
   d7f9c:	46c5      	mov	sp, r8
   d7f9e:	e7e1      	b.n	d7f64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7fa0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7fa0:	4b01      	ldr	r3, [pc, #4]	; (d7fa8 <_GLOBAL__sub_I_RGB+0x8>)
   d7fa2:	2200      	movs	r2, #0
   d7fa4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7fa6:	4770      	bx	lr
   d7fa8:	2003e5c0 	.word	0x2003e5c0

000d7fac <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7fac:	2100      	movs	r1, #0
   d7fae:	f7fd bd5f 	b.w	d5a70 <hal_spi_acquire>

000d7fb2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7fb2:	2100      	movs	r1, #0
   d7fb4:	f7fd bd64 	b.w	d5a80 <hal_spi_release>

000d7fb8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	4604      	mov	r4, r0
   d7fbc:	4608      	mov	r0, r1
{
    _spi = spi;
   d7fbe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7fc0:	f7fd fd36 	bl	d5a30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7fc4:	2300      	movs	r3, #0
   d7fc6:	6063      	str	r3, [r4, #4]
}
   d7fc8:	4620      	mov	r0, r4
   d7fca:	bd10      	pop	{r4, pc}

000d7fcc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7fcc:	b510      	push	{r4, lr}
   d7fce:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7fd0:	7800      	ldrb	r0, [r0, #0]
   d7fd2:	f7ff ffeb 	bl	d7fac <_ZN8SPIClass4lockEv.isra.0>
   d7fd6:	b948      	cbnz	r0, d7fec <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7fd8:	7820      	ldrb	r0, [r4, #0]
   d7fda:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7fde:	f7fd fd17 	bl	d5a10 <hal_spi_begin>
        unlock();
   d7fe2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7fe8:	f7ff bfe3 	b.w	d7fb2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d7fec:	bd10      	pop	{r4, pc}

000d7fee <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7fee:	7800      	ldrb	r0, [r0, #0]
   d7ff0:	f7ff bfdf 	b.w	d7fb2 <_ZN8SPIClass6unlockEv.isra.0>

000d7ff4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7ff4:	0840      	lsrs	r0, r0, #1
{
   d7ff6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7ff8:	6018      	str	r0, [r3, #0]
   d7ffa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7ffc:	6818      	ldr	r0, [r3, #0]
   d7ffe:	4288      	cmp	r0, r1
   d8000:	b2e5      	uxtb	r5, r4
   d8002:	d906      	bls.n	d8012 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8004:	3401      	adds	r4, #1
   d8006:	2c08      	cmp	r4, #8
   d8008:	d002      	beq.n	d8010 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d800a:	0840      	lsrs	r0, r0, #1
   d800c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d800e:	e7f5      	b.n	d7ffc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8010:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8014:	5d5b      	ldrb	r3, [r3, r5]
   d8016:	7013      	strb	r3, [r2, #0]
}
   d8018:	bd30      	pop	{r4, r5, pc}
   d801a:	bf00      	nop
   d801c:	000d98c8 	.word	0x000d98c8

000d8020 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8024:	4606      	mov	r6, r0
   d8026:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8028:	7800      	ldrb	r0, [r0, #0]
{
   d802a:	460c      	mov	r4, r1
    CHECK(lock());
   d802c:	f7ff ffbe 	bl	d7fac <_ZN8SPIClass4lockEv.isra.0>
   d8030:	2800      	cmp	r0, #0
   d8032:	db1b      	blt.n	d806c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8034:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8036:	2214      	movs	r2, #20
   d8038:	2100      	movs	r1, #0
   d803a:	a809      	add	r0, sp, #36	; 0x24
   d803c:	f001 f8cc 	bl	d91d8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8040:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8042:	2200      	movs	r2, #0
   d8044:	a909      	add	r1, sp, #36	; 0x24
   d8046:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8048:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d804c:	f7fd fd00 	bl	d5a50 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8050:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8054:	b113      	cbz	r3, d805c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8056:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d805a:	b155      	cbz	r5, d8072 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d805c:	2700      	movs	r7, #0
   d805e:	46b9      	mov	r9, r7
   d8060:	46b8      	mov	r8, r7
   d8062:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8064:	7923      	ldrb	r3, [r4, #4]
   d8066:	b15d      	cbz	r5, d8080 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8068:	b1c3      	cbz	r3, d809c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d806a:	2000      	movs	r0, #0
}
   d806c:	b00f      	add	sp, #60	; 0x3c
   d806e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d8072:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8076:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d807a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d807e:	e7f1      	b.n	d8064 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8080:	2b00      	cmp	r3, #0
   d8082:	d135      	bne.n	d80f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8084:	68a3      	ldr	r3, [r4, #8]
   d8086:	4543      	cmp	r3, r8
   d8088:	d108      	bne.n	d809c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d808a:	f88d 9020 	strb.w	r9, [sp, #32]
   d808e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8092:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8096:	89a3      	ldrh	r3, [r4, #12]
   d8098:	429a      	cmp	r2, r3
   d809a:	d0e6      	beq.n	d806a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d809c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d809e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d80a0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d80a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d80a6:	ab04      	add	r3, sp, #16
   d80a8:	f10d 020f 	add.w	r2, sp, #15
   d80ac:	f7ff ffa2 	bl	d7ff4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d80b0:	7921      	ldrb	r1, [r4, #4]
   d80b2:	b985      	cbnz	r5, d80d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d80b4:	b989      	cbnz	r1, d80da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d80b6:	68a3      	ldr	r3, [r4, #8]
   d80b8:	4543      	cmp	r3, r8
   d80ba:	d30e      	bcc.n	d80da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d80bc:	f88d 9020 	strb.w	r9, [sp, #32]
   d80c0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d80c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d80c8:	89a3      	ldrh	r3, [r4, #12]
   d80ca:	429a      	cmp	r2, r3
   d80cc:	d105      	bne.n	d80da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d80ce:	9b04      	ldr	r3, [sp, #16]
   d80d0:	4543      	cmp	r3, r8
   d80d2:	d102      	bne.n	d80da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d80d4:	e7c9      	b.n	d806a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d80d6:	2900      	cmp	r1, #0
   d80d8:	d1f9      	bne.n	d80ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d80da:	2300      	movs	r3, #0
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	7b63      	ldrb	r3, [r4, #13]
   d80e0:	9300      	str	r3, [sp, #0]
   d80e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d80e6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d80e8:	7830      	ldrb	r0, [r6, #0]
   d80ea:	f7fd fcb9 	bl	d5a60 <hal_spi_set_settings>
   d80ee:	e7bc      	b.n	d806a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d80f0:	e9cd 5500 	strd	r5, r5, [sp]
   d80f4:	462b      	mov	r3, r5
   d80f6:	462a      	mov	r2, r5
   d80f8:	2101      	movs	r1, #1
   d80fa:	e7f5      	b.n	d80e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d80fc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d80fc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d80fe:	7800      	ldrb	r0, [r0, #0]
   d8100:	f7fd fc8e 	bl	d5a20 <hal_spi_transfer>
}
   d8104:	b2c0      	uxtb	r0, r0
   d8106:	bd08      	pop	{r3, pc}

000d8108 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8108:	b510      	push	{r4, lr}
   d810a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d810c:	f7fd fbd8 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8110:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8112:	6823      	ldr	r3, [r4, #0]
   d8114:	4620      	mov	r0, r4
   d8116:	695b      	ldr	r3, [r3, #20]
   d8118:	4798      	blx	r3
    if (c >= 0) return c;
   d811a:	2800      	cmp	r0, #0
   d811c:	da08      	bge.n	d8130 <_ZN6Stream9timedReadEv+0x28>
   d811e:	f7fd fbcf 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d8122:	68e3      	ldr	r3, [r4, #12]
   d8124:	1ac0      	subs	r0, r0, r3
   d8126:	68a3      	ldr	r3, [r4, #8]
   d8128:	4298      	cmp	r0, r3
   d812a:	d3f2      	bcc.n	d8112 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d812c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8130:	bd10      	pop	{r4, pc}
	...

000d8134 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d8134:	b570      	push	{r4, r5, r6, lr}
   d8136:	460d      	mov	r5, r1
  String ret;
   d8138:	4909      	ldr	r1, [pc, #36]	; (d8160 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   d813a:	4604      	mov	r4, r0
   d813c:	4616      	mov	r6, r2
  String ret;
   d813e:	f000 f85c 	bl	d81fa <_ZN6StringC1EPKc>
  int c = timedRead();
   d8142:	4628      	mov	r0, r5
   d8144:	f7ff ffe0 	bl	d8108 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d8148:	2800      	cmp	r0, #0
   d814a:	db06      	blt.n	d815a <_ZN6Stream15readStringUntilEc+0x26>
   d814c:	4286      	cmp	r6, r0
   d814e:	d004      	beq.n	d815a <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d8150:	b2c1      	uxtb	r1, r0
   d8152:	4620      	mov	r0, r4
   d8154:	f000 f8be 	bl	d82d4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d8158:	e7f3      	b.n	d8142 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   d815a:	4620      	mov	r0, r4
   d815c:	bd70      	pop	{r4, r5, r6, pc}
   d815e:	bf00      	nop
   d8160:	000d97fb 	.word	0x000d97fb

000d8164 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8164:	b510      	push	{r4, lr}
   d8166:	4604      	mov	r4, r0
{
	free(buffer);
   d8168:	6800      	ldr	r0, [r0, #0]
   d816a:	f7fd fdff 	bl	d5d6c <free>
}
   d816e:	4620      	mov	r0, r4
   d8170:	bd10      	pop	{r4, pc}

000d8172 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8172:	b510      	push	{r4, lr}
   d8174:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8176:	6800      	ldr	r0, [r0, #0]
   d8178:	b108      	cbz	r0, d817e <_ZN6String10invalidateEv+0xc>
   d817a:	f7fd fdf7 	bl	d5d6c <free>
	buffer = NULL;
   d817e:	2300      	movs	r3, #0
	capacity = len = 0;
   d8180:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8184:	6023      	str	r3, [r4, #0]
}
   d8186:	bd10      	pop	{r4, pc}

000d8188 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8188:	b538      	push	{r3, r4, r5, lr}
   d818a:	4604      	mov	r4, r0
   d818c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d818e:	6800      	ldr	r0, [r0, #0]
   d8190:	3101      	adds	r1, #1
   d8192:	f7fd fdf3 	bl	d5d7c <realloc>
	if (newbuffer) {
   d8196:	b110      	cbz	r0, d819e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8198:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d819c:	2001      	movs	r0, #1
	}
	return 0;
}
   d819e:	bd38      	pop	{r3, r4, r5, pc}

000d81a0 <_ZN6String7reserveEj>:
{
   d81a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d81a2:	6803      	ldr	r3, [r0, #0]
{
   d81a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d81a6:	b123      	cbz	r3, d81b2 <_ZN6String7reserveEj+0x12>
   d81a8:	6843      	ldr	r3, [r0, #4]
   d81aa:	428b      	cmp	r3, r1
   d81ac:	d301      	bcc.n	d81b2 <_ZN6String7reserveEj+0x12>
   d81ae:	2001      	movs	r0, #1
}
   d81b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d81b2:	4620      	mov	r0, r4
   d81b4:	f7ff ffe8 	bl	d8188 <_ZN6String12changeBufferEj>
   d81b8:	2800      	cmp	r0, #0
   d81ba:	d0f9      	beq.n	d81b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d81bc:	68a3      	ldr	r3, [r4, #8]
   d81be:	2b00      	cmp	r3, #0
   d81c0:	d1f5      	bne.n	d81ae <_ZN6String7reserveEj+0xe>
   d81c2:	6822      	ldr	r2, [r4, #0]
   d81c4:	7013      	strb	r3, [r2, #0]
   d81c6:	e7f2      	b.n	d81ae <_ZN6String7reserveEj+0xe>

000d81c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d81c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d81ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d81cc:	4611      	mov	r1, r2
   d81ce:	9201      	str	r2, [sp, #4]
{
   d81d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d81d2:	f7ff ffe5 	bl	d81a0 <_ZN6String7reserveEj>
   d81d6:	9a01      	ldr	r2, [sp, #4]
   d81d8:	b928      	cbnz	r0, d81e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d81da:	4620      	mov	r0, r4
   d81dc:	f7ff ffc9 	bl	d8172 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d81e0:	4620      	mov	r0, r4
   d81e2:	b003      	add	sp, #12
   d81e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d81e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d81e8:	4629      	mov	r1, r5
   d81ea:	6820      	ldr	r0, [r4, #0]
   d81ec:	f000 ffcc 	bl	d9188 <memcpy>
	buffer[len] = 0;
   d81f0:	6822      	ldr	r2, [r4, #0]
   d81f2:	68a3      	ldr	r3, [r4, #8]
   d81f4:	2100      	movs	r1, #0
   d81f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d81f8:	e7f2      	b.n	d81e0 <_ZN6String4copyEPKcj+0x18>

000d81fa <_ZN6StringC1EPKc>:
	buffer = NULL;
   d81fa:	2300      	movs	r3, #0
String::String(const char *cstr)
   d81fc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d81fe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8202:	4604      	mov	r4, r0
	len = 0;
   d8204:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8206:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8208:	b141      	cbz	r1, d821c <_ZN6StringC1EPKc+0x22>
   d820a:	4608      	mov	r0, r1
   d820c:	9101      	str	r1, [sp, #4]
   d820e:	f001 f856 	bl	d92be <strlen>
   d8212:	9901      	ldr	r1, [sp, #4]
   d8214:	4602      	mov	r2, r0
   d8216:	4620      	mov	r0, r4
   d8218:	f7ff ffd6 	bl	d81c8 <_ZN6String4copyEPKcj>
}
   d821c:	4620      	mov	r0, r4
   d821e:	b002      	add	sp, #8
   d8220:	bd10      	pop	{r4, pc}

000d8222 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8222:	b538      	push	{r3, r4, r5, lr}
   d8224:	4605      	mov	r5, r0
	if (buffer) {
   d8226:	6800      	ldr	r0, [r0, #0]
{
   d8228:	460c      	mov	r4, r1
	if (buffer) {
   d822a:	b168      	cbz	r0, d8248 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d822c:	686a      	ldr	r2, [r5, #4]
   d822e:	688b      	ldr	r3, [r1, #8]
   d8230:	429a      	cmp	r2, r3
   d8232:	d307      	bcc.n	d8244 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8234:	6809      	ldr	r1, [r1, #0]
   d8236:	f001 f81c 	bl	d9272 <strcpy>
			len = rhs.len;
   d823a:	68a3      	ldr	r3, [r4, #8]
   d823c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d823e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8240:	60a3      	str	r3, [r4, #8]
}
   d8242:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8244:	f7fd fd92 	bl	d5d6c <free>
	buffer = rhs.buffer;
   d8248:	6823      	ldr	r3, [r4, #0]
   d824a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d824c:	6863      	ldr	r3, [r4, #4]
   d824e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8250:	68a3      	ldr	r3, [r4, #8]
   d8252:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8254:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8256:	e9c4 3300 	strd	r3, r3, [r4]
   d825a:	e7f1      	b.n	d8240 <_ZN6String4moveERS_+0x1e>

000d825c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d825c:	b510      	push	{r4, lr}
	buffer = NULL;
   d825e:	2300      	movs	r3, #0
	capacity = 0;
   d8260:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d8264:	4604      	mov	r4, r0
	len = 0;
   d8266:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8268:	7303      	strb	r3, [r0, #12]
	move(rval);
   d826a:	f7ff ffda 	bl	d8222 <_ZN6String4moveERS_>
}
   d826e:	4620      	mov	r0, r4
   d8270:	bd10      	pop	{r4, pc}

000d8272 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8272:	4288      	cmp	r0, r1
{
   d8274:	b510      	push	{r4, lr}
   d8276:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8278:	d005      	beq.n	d8286 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d827a:	680b      	ldr	r3, [r1, #0]
   d827c:	b12b      	cbz	r3, d828a <_ZN6StringaSERKS_+0x18>
   d827e:	688a      	ldr	r2, [r1, #8]
   d8280:	4619      	mov	r1, r3
   d8282:	f7ff ffa1 	bl	d81c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8286:	4620      	mov	r0, r4
   d8288:	bd10      	pop	{r4, pc}
	else invalidate();
   d828a:	f7ff ff72 	bl	d8172 <_ZN6String10invalidateEv>
   d828e:	e7fa      	b.n	d8286 <_ZN6StringaSERKS_+0x14>

000d8290 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8290:	b510      	push	{r4, lr}
	buffer = NULL;
   d8292:	2300      	movs	r3, #0
String::String(const String &value)
   d8294:	4604      	mov	r4, r0
	capacity = 0;
   d8296:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d829a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d829c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d829e:	f7ff ffe8 	bl	d8272 <_ZN6StringaSERKS_>
}
   d82a2:	4620      	mov	r0, r4
   d82a4:	bd10      	pop	{r4, pc}

000d82a6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d82a6:	b570      	push	{r4, r5, r6, lr}
   d82a8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d82aa:	460e      	mov	r6, r1
   d82ac:	b909      	cbnz	r1, d82b2 <_ZN6String6concatEPKcj+0xc>
   d82ae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d82b0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d82b2:	b16a      	cbz	r2, d82d0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d82b4:	6884      	ldr	r4, [r0, #8]
   d82b6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d82b8:	4621      	mov	r1, r4
   d82ba:	f7ff ff71 	bl	d81a0 <_ZN6String7reserveEj>
   d82be:	2800      	cmp	r0, #0
   d82c0:	d0f5      	beq.n	d82ae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d82c2:	6828      	ldr	r0, [r5, #0]
   d82c4:	68ab      	ldr	r3, [r5, #8]
   d82c6:	4631      	mov	r1, r6
   d82c8:	4418      	add	r0, r3
   d82ca:	f000 ffd2 	bl	d9272 <strcpy>
	len = newlen;
   d82ce:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d82d0:	2001      	movs	r0, #1
   d82d2:	e7ed      	b.n	d82b0 <_ZN6String6concatEPKcj+0xa>

000d82d4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d82d4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d82d6:	2300      	movs	r3, #0
	buf[0] = c;
   d82d8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d82dc:	2201      	movs	r2, #1
   d82de:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d82e0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d82e4:	f7ff ffdf 	bl	d82a6 <_ZN6String6concatEPKcj>
}
   d82e8:	b003      	add	sp, #12
   d82ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d82f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d82f0:	4b05      	ldr	r3, [pc, #20]	; (d8308 <_GLOBAL__sub_I_System+0x18>)
   d82f2:	2202      	movs	r2, #2
   d82f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d82f6:	4b05      	ldr	r3, [pc, #20]	; (d830c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d82f8:	4a05      	ldr	r2, [pc, #20]	; (d8310 <_GLOBAL__sub_I_System+0x20>)
   d82fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d82fc:	2000      	movs	r0, #0
   d82fe:	6018      	str	r0, [r3, #0]
   d8300:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8302:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8304:	f7fd bc76 	b.w	d5bf4 <set_system_mode>
   d8308:	2003e5dc 	.word	0x2003e5dc
   d830c:	2003e5d0 	.word	0x2003e5d0
   d8310:	ffff0000 	.word	0xffff0000

000d8314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8314:	4b02      	ldr	r3, [pc, #8]	; (d8320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8316:	681a      	ldr	r2, [r3, #0]
   d8318:	4b02      	ldr	r3, [pc, #8]	; (d8324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d831a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d831c:	4770      	bx	lr
   d831e:	bf00      	nop
   d8320:	2003e338 	.word	0x2003e338
   d8324:	2003e5e0 	.word	0x2003e5e0

000d8328 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8328:	4770      	bx	lr

000d832a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d832a:	7441      	strb	r1, [r0, #17]
}
   d832c:	4770      	bx	lr

000d832e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d832e:	4770      	bx	lr

000d8330 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8330:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8332:	7c00      	ldrb	r0, [r0, #16]
   d8334:	f7fd fbec 	bl	d5b10 <hal_usart_available_data_for_write>
}
   d8338:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d833c:	bd08      	pop	{r3, pc}

000d833e <_ZN11USARTSerial9availableEv>:
{
   d833e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8340:	7c00      	ldrb	r0, [r0, #16]
   d8342:	f7fd fbbd 	bl	d5ac0 <hal_usart_available>
}
   d8346:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d834a:	bd08      	pop	{r3, pc}

000d834c <_ZN11USARTSerial4peekEv>:
{
   d834c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d834e:	7c00      	ldrb	r0, [r0, #16]
   d8350:	f7fd fbc6 	bl	d5ae0 <hal_usart_peek>
}
   d8354:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8358:	bd08      	pop	{r3, pc}

000d835a <_ZN11USARTSerial4readEv>:
{
   d835a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d835c:	7c00      	ldrb	r0, [r0, #16]
   d835e:	f7fd fbb7 	bl	d5ad0 <hal_usart_read>
}
   d8362:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8366:	bd08      	pop	{r3, pc}

000d8368 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d8368:	7c00      	ldrb	r0, [r0, #16]
   d836a:	f7fd bbc1 	b.w	d5af0 <hal_usart_flush>

000d836e <_ZN11USARTSerial5writeEh>:
{
   d836e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8370:	7c45      	ldrb	r5, [r0, #17]
{
   d8372:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8374:	b12d      	cbz	r5, d8382 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d8376:	7c20      	ldrb	r0, [r4, #16]
}
   d8378:	b003      	add	sp, #12
   d837a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d837e:	f7fd bb97 	b.w	d5ab0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8382:	7c00      	ldrb	r0, [r0, #16]
   d8384:	9101      	str	r1, [sp, #4]
   d8386:	f7fd fbc3 	bl	d5b10 <hal_usart_available_data_for_write>
   d838a:	2800      	cmp	r0, #0
   d838c:	9901      	ldr	r1, [sp, #4]
   d838e:	dcf2      	bgt.n	d8376 <_ZN11USARTSerial5writeEh+0x8>
}
   d8390:	4628      	mov	r0, r5
   d8392:	b003      	add	sp, #12
   d8394:	bd30      	pop	{r4, r5, pc}

000d8396 <_ZN11USARTSerialD0Ev>:
   d8396:	b510      	push	{r4, lr}
   d8398:	2114      	movs	r1, #20
   d839a:	4604      	mov	r4, r0
   d839c:	f000 fa62 	bl	d8864 <_ZdlPvj>
   d83a0:	4620      	mov	r0, r4
   d83a2:	bd10      	pop	{r4, pc}

000d83a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d83a4:	b510      	push	{r4, lr}
   d83a6:	f04f 0c00 	mov.w	ip, #0
   d83aa:	4604      	mov	r4, r0
   d83ac:	4608      	mov	r0, r1
   d83ae:	4611      	mov	r1, r2
   d83b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d83b4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d83b8:	4a04      	ldr	r2, [pc, #16]	; (d83cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d83ba:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d83bc:	2201      	movs	r2, #1
  _serial = serial;
   d83be:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d83c0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d83c2:	461a      	mov	r2, r3
   d83c4:	f7fd fb64 	bl	d5a90 <hal_usart_init>
}
   d83c8:	4620      	mov	r0, r4
   d83ca:	bd10      	pop	{r4, pc}
   d83cc:	000d98f4 	.word	0x000d98f4

000d83d0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d83d0:	7c00      	ldrb	r0, [r0, #16]
   d83d2:	2300      	movs	r3, #0
   d83d4:	f7fd bba4 	b.w	d5b20 <hal_usart_begin_config>

000d83d8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d83d8:	2200      	movs	r2, #0
   d83da:	f7ff bff9 	b.w	d83d0 <_ZN11USARTSerial5beginEmm>

000d83de <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d83de:	7c00      	ldrb	r0, [r0, #16]
   d83e0:	f7fd bb5e 	b.w	d5aa0 <hal_usart_end>

000d83e4 <_Z22__fetch_global_Serial1v>:
{
   d83e4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d83e6:	4c0d      	ldr	r4, [pc, #52]	; (d841c <_Z22__fetch_global_Serial1v+0x38>)
   d83e8:	7821      	ldrb	r1, [r4, #0]
   d83ea:	f3bf 8f5b 	dmb	ish
   d83ee:	f011 0101 	ands.w	r1, r1, #1
   d83f2:	d110      	bne.n	d8416 <_Z22__fetch_global_Serial1v+0x32>
   d83f4:	4620      	mov	r0, r4
   d83f6:	9101      	str	r1, [sp, #4]
   d83f8:	f7fb fe5e 	bl	d40b8 <__cxa_guard_acquire>
   d83fc:	9901      	ldr	r1, [sp, #4]
   d83fe:	b150      	cbz	r0, d8416 <_Z22__fetch_global_Serial1v+0x32>
   d8400:	4b07      	ldr	r3, [pc, #28]	; (d8420 <_Z22__fetch_global_Serial1v+0x3c>)
   d8402:	4a08      	ldr	r2, [pc, #32]	; (d8424 <_Z22__fetch_global_Serial1v+0x40>)
   d8404:	4808      	ldr	r0, [pc, #32]	; (d8428 <_Z22__fetch_global_Serial1v+0x44>)
   d8406:	f7ff ffcd 	bl	d83a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d840a:	4620      	mov	r0, r4
   d840c:	f7fb fe59 	bl	d40c2 <__cxa_guard_release>
   d8410:	4806      	ldr	r0, [pc, #24]	; (d842c <_Z22__fetch_global_Serial1v+0x48>)
   d8412:	f000 feaf 	bl	d9174 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8416:	4804      	ldr	r0, [pc, #16]	; (d8428 <_Z22__fetch_global_Serial1v+0x44>)
   d8418:	b002      	add	sp, #8
   d841a:	bd10      	pop	{r4, pc}
   d841c:	2003e5e4 	.word	0x2003e5e4
   d8420:	2003e66c 	.word	0x2003e66c
   d8424:	2003e5e8 	.word	0x2003e5e8
   d8428:	2003e6f0 	.word	0x2003e6f0
   d842c:	000d832f 	.word	0x000d832f

000d8430 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8430:	7441      	strb	r1, [r0, #17]
}
   d8432:	4770      	bx	lr

000d8434 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8434:	4770      	bx	lr

000d8436 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8436:	4770      	bx	lr

000d8438 <_ZN9USBSerial4readEv>:
{
   d8438:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d843a:	2100      	movs	r1, #0
   d843c:	7c00      	ldrb	r0, [r0, #16]
   d843e:	f7fd fb9f 	bl	d5b80 <HAL_USB_USART_Receive_Data>
}
   d8442:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8446:	bd08      	pop	{r3, pc}

000d8448 <_ZN9USBSerial4peekEv>:
{
   d8448:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d844a:	2101      	movs	r1, #1
   d844c:	7c00      	ldrb	r0, [r0, #16]
   d844e:	f7fd fb97 	bl	d5b80 <HAL_USB_USART_Receive_Data>
}
   d8452:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8456:	bd08      	pop	{r3, pc}

000d8458 <_ZN9USBSerial17availableForWriteEv>:
{
   d8458:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d845a:	7c00      	ldrb	r0, [r0, #16]
   d845c:	f7fd fb88 	bl	d5b70 <HAL_USB_USART_Available_Data_For_Write>
}
   d8460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8464:	bd08      	pop	{r3, pc}

000d8466 <_ZN9USBSerial9availableEv>:
{
   d8466:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8468:	7c00      	ldrb	r0, [r0, #16]
   d846a:	f7fd fb79 	bl	d5b60 <HAL_USB_USART_Available_Data>
}
   d846e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8472:	bd08      	pop	{r3, pc}

000d8474 <_ZN9USBSerial5writeEh>:
{
   d8474:	b513      	push	{r0, r1, r4, lr}
   d8476:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8478:	7c00      	ldrb	r0, [r0, #16]
{
   d847a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d847c:	f7fd fb78 	bl	d5b70 <HAL_USB_USART_Available_Data_For_Write>
   d8480:	2800      	cmp	r0, #0
   d8482:	9901      	ldr	r1, [sp, #4]
   d8484:	dc01      	bgt.n	d848a <_ZN9USBSerial5writeEh+0x16>
   d8486:	7c60      	ldrb	r0, [r4, #17]
   d8488:	b120      	cbz	r0, d8494 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d848a:	7c20      	ldrb	r0, [r4, #16]
   d848c:	f7fd fb80 	bl	d5b90 <HAL_USB_USART_Send_Data>
   d8490:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8494:	b002      	add	sp, #8
   d8496:	bd10      	pop	{r4, pc}

000d8498 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8498:	7c00      	ldrb	r0, [r0, #16]
   d849a:	f7fd bb81 	b.w	d5ba0 <HAL_USB_USART_Flush_Data>

000d849e <_ZN9USBSerialD0Ev>:
   d849e:	b510      	push	{r4, lr}
   d84a0:	2114      	movs	r1, #20
   d84a2:	4604      	mov	r4, r0
   d84a4:	f000 f9de 	bl	d8864 <_ZdlPvj>
   d84a8:	4620      	mov	r0, r4
   d84aa:	bd10      	pop	{r4, pc}

000d84ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d84ac:	b510      	push	{r4, lr}
   d84ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84b2:	4604      	mov	r4, r0
   d84b4:	4608      	mov	r0, r1
   d84b6:	2100      	movs	r1, #0
   d84b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d84bc:	4b04      	ldr	r3, [pc, #16]	; (d84d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d84be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d84c0:	2301      	movs	r3, #1
  _serial = serial;
   d84c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d84c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d84c6:	4611      	mov	r1, r2
   d84c8:	f7fd fb32 	bl	d5b30 <HAL_USB_USART_Init>
}
   d84cc:	4620      	mov	r0, r4
   d84ce:	bd10      	pop	{r4, pc}
   d84d0:	000d9924 	.word	0x000d9924

000d84d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d84d4:	7c00      	ldrb	r0, [r0, #16]
   d84d6:	2200      	movs	r2, #0
   d84d8:	f7fd bb32 	b.w	d5b40 <HAL_USB_USART_Begin>

000d84dc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d84dc:	7c00      	ldrb	r0, [r0, #16]
   d84de:	f7fd bb37 	b.w	d5b50 <HAL_USB_USART_End>

000d84e2 <_Z19acquireSerialBufferv>:
{
   d84e2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d84e4:	2214      	movs	r2, #20
{
   d84e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d84e8:	2100      	movs	r1, #0
   d84ea:	f000 fe75 	bl	d91d8 <memset>
}
   d84ee:	4620      	mov	r0, r4
   d84f0:	bd10      	pop	{r4, pc}
	...

000d84f4 <_Z16_fetch_usbserialv>:
{
   d84f4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84f6:	4c0f      	ldr	r4, [pc, #60]	; (d8534 <_Z16_fetch_usbserialv+0x40>)
{
   d84f8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d84fa:	a803      	add	r0, sp, #12
   d84fc:	f7ff fff1 	bl	d84e2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8500:	7821      	ldrb	r1, [r4, #0]
   d8502:	f3bf 8f5b 	dmb	ish
   d8506:	f011 0101 	ands.w	r1, r1, #1
   d850a:	d10f      	bne.n	d852c <_Z16_fetch_usbserialv+0x38>
   d850c:	4620      	mov	r0, r4
   d850e:	9101      	str	r1, [sp, #4]
   d8510:	f7fb fdd2 	bl	d40b8 <__cxa_guard_acquire>
   d8514:	9901      	ldr	r1, [sp, #4]
   d8516:	b148      	cbz	r0, d852c <_Z16_fetch_usbserialv+0x38>
   d8518:	aa03      	add	r2, sp, #12
   d851a:	4807      	ldr	r0, [pc, #28]	; (d8538 <_Z16_fetch_usbserialv+0x44>)
   d851c:	f7ff ffc6 	bl	d84ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8520:	4620      	mov	r0, r4
   d8522:	f7fb fdce 	bl	d40c2 <__cxa_guard_release>
   d8526:	4805      	ldr	r0, [pc, #20]	; (d853c <_Z16_fetch_usbserialv+0x48>)
   d8528:	f000 fe24 	bl	d9174 <atexit>
	return _usbserial;
}
   d852c:	4802      	ldr	r0, [pc, #8]	; (d8538 <_Z16_fetch_usbserialv+0x44>)
   d852e:	b008      	add	sp, #32
   d8530:	bd10      	pop	{r4, pc}
   d8532:	bf00      	nop
   d8534:	2003e704 	.word	0x2003e704
   d8538:	2003e708 	.word	0x2003e708
   d853c:	000d8435 	.word	0x000d8435

000d8540 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8540:	4b01      	ldr	r3, [pc, #4]	; (d8548 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8542:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8544:	4770      	bx	lr
   d8546:	bf00      	nop
   d8548:	2003e33c 	.word	0x2003e33c

000d854c <serialEventRun>:
{
   d854c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d854e:	4b0b      	ldr	r3, [pc, #44]	; (d857c <serialEventRun+0x30>)
   d8550:	b143      	cbz	r3, d8564 <serialEventRun+0x18>
   d8552:	f7ff ffcf 	bl	d84f4 <_Z16_fetch_usbserialv>
   d8556:	6803      	ldr	r3, [r0, #0]
   d8558:	691b      	ldr	r3, [r3, #16]
   d855a:	4798      	blx	r3
   d855c:	2800      	cmp	r0, #0
   d855e:	dd01      	ble.n	d8564 <serialEventRun+0x18>
        serialEvent();
   d8560:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8564:	4b06      	ldr	r3, [pc, #24]	; (d8580 <serialEventRun+0x34>)
   d8566:	b143      	cbz	r3, d857a <serialEventRun+0x2e>
   d8568:	f7ff ff3c 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d856c:	6803      	ldr	r3, [r0, #0]
   d856e:	691b      	ldr	r3, [r3, #16]
   d8570:	4798      	blx	r3
   d8572:	2800      	cmp	r0, #0
   d8574:	dd01      	ble.n	d857a <serialEventRun+0x2e>
        serialEvent1();
   d8576:	f3af 8000 	nop.w
}
   d857a:	bd08      	pop	{r3, pc}
	...

000d8584 <_post_loop>:
{
   d8584:	b508      	push	{r3, lr}
	serialEventRun();
   d8586:	f7ff ffe1 	bl	d854c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d858a:	f7fd f999 	bl	d58c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d858e:	4b01      	ldr	r3, [pc, #4]	; (d8594 <_post_loop+0x10>)
   d8590:	6018      	str	r0, [r3, #0]
}
   d8592:	bd08      	pop	{r3, pc}
   d8594:	2003e724 	.word	0x2003e724

000d8598 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8598:	4805      	ldr	r0, [pc, #20]	; (d85b0 <_Z33system_initialize_user_backup_ramv+0x18>)
   d859a:	4a06      	ldr	r2, [pc, #24]	; (d85b4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d859c:	4906      	ldr	r1, [pc, #24]	; (d85b8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d859e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85a0:	1a12      	subs	r2, r2, r0
   d85a2:	f000 fdf1 	bl	d9188 <memcpy>
    __backup_sram_signature = signature;
   d85a6:	4b05      	ldr	r3, [pc, #20]	; (d85bc <_Z33system_initialize_user_backup_ramv+0x24>)
   d85a8:	4a05      	ldr	r2, [pc, #20]	; (d85c0 <_Z33system_initialize_user_backup_ramv+0x28>)
   d85aa:	601a      	str	r2, [r3, #0]
}
   d85ac:	bd08      	pop	{r3, pc}
   d85ae:	bf00      	nop
   d85b0:	2003f400 	.word	0x2003f400
   d85b4:	2003f404 	.word	0x2003f404
   d85b8:	000d9a80 	.word	0x000d9a80
   d85bc:	2003f400 	.word	0x2003f400
   d85c0:	9a271c1e 	.word	0x9a271c1e

000d85c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d85c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85c6:	2300      	movs	r3, #0
   d85c8:	9300      	str	r3, [sp, #0]
   d85ca:	461a      	mov	r2, r3
   d85cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85d0:	f7fd fb3a 	bl	d5c48 <system_ctrl_set_result>
}
   d85d4:	b003      	add	sp, #12
   d85d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85dc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d85dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85de:	8843      	ldrh	r3, [r0, #2]
   d85e0:	2b0a      	cmp	r3, #10
   d85e2:	d008      	beq.n	d85f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d85e4:	2b50      	cmp	r3, #80	; 0x50
   d85e6:	d10b      	bne.n	d8600 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d85e8:	4b09      	ldr	r3, [pc, #36]	; (d8610 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d85ea:	681b      	ldr	r3, [r3, #0]
   d85ec:	b14b      	cbz	r3, d8602 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d85ee:	b003      	add	sp, #12
   d85f0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d85f4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d85f6:	f7ff ffe5 	bl	d85c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d85fa:	b003      	add	sp, #12
   d85fc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8600:	2300      	movs	r3, #0
   d8602:	9300      	str	r3, [sp, #0]
   d8604:	461a      	mov	r2, r3
   d8606:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d860a:	f7fd fb1d 	bl	d5c48 <system_ctrl_set_result>
}
   d860e:	e7f4      	b.n	d85fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8610:	2003e720 	.word	0x2003e720

000d8614 <module_user_init_hook>:
{
   d8614:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8616:	4812      	ldr	r0, [pc, #72]	; (d8660 <module_user_init_hook+0x4c>)
   d8618:	2100      	movs	r1, #0
   d861a:	f7fd fbcf 	bl	d5dbc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d861e:	4b11      	ldr	r3, [pc, #68]	; (d8664 <module_user_init_hook+0x50>)
   d8620:	681a      	ldr	r2, [r3, #0]
   d8622:	4b11      	ldr	r3, [pc, #68]	; (d8668 <module_user_init_hook+0x54>)
   d8624:	429a      	cmp	r2, r3
   d8626:	4b11      	ldr	r3, [pc, #68]	; (d866c <module_user_init_hook+0x58>)
   d8628:	bf0c      	ite	eq
   d862a:	2201      	moveq	r2, #1
   d862c:	2200      	movne	r2, #0
   d862e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8630:	d001      	beq.n	d8636 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8632:	f7ff ffb1 	bl	d8598 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8636:	f7fd f933 	bl	d58a0 <HAL_RNG_GetRandomNumber>
   d863a:	4604      	mov	r4, r0
    srand(seed);
   d863c:	f000 fdd4 	bl	d91e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8640:	4b0b      	ldr	r3, [pc, #44]	; (d8670 <module_user_init_hook+0x5c>)
   d8642:	b113      	cbz	r3, d864a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8644:	4620      	mov	r0, r4
   d8646:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d864a:	2100      	movs	r1, #0
   d864c:	4808      	ldr	r0, [pc, #32]	; (d8670 <module_user_init_hook+0x5c>)
   d864e:	f7fd fb1d 	bl	d5c8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8656:	4807      	ldr	r0, [pc, #28]	; (d8674 <module_user_init_hook+0x60>)
   d8658:	2100      	movs	r1, #0
   d865a:	f7fd baeb 	b.w	d5c34 <system_ctrl_set_app_request_handler>
   d865e:	bf00      	nop
   d8660:	000d8541 	.word	0x000d8541
   d8664:	2003f400 	.word	0x2003f400
   d8668:	9a271c1e 	.word	0x9a271c1e
   d866c:	2003e71c 	.word	0x2003e71c
   d8670:	00000000 	.word	0x00000000
   d8674:	000d85dd 	.word	0x000d85dd

000d8678 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8678:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d867a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d867c:	d902      	bls.n	d8684 <pinAvailable+0xc>
    return false;
   d867e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8680:	b002      	add	sp, #8
   d8682:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8684:	f1a0 030b 	sub.w	r3, r0, #11
   d8688:	2b02      	cmp	r3, #2
   d868a:	d81a      	bhi.n	d86c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d868c:	4c17      	ldr	r4, [pc, #92]	; (d86ec <pinAvailable+0x74>)
   d868e:	7821      	ldrb	r1, [r4, #0]
   d8690:	f3bf 8f5b 	dmb	ish
   d8694:	f011 0101 	ands.w	r1, r1, #1
   d8698:	d10b      	bne.n	d86b2 <pinAvailable+0x3a>
   d869a:	4620      	mov	r0, r4
   d869c:	9101      	str	r1, [sp, #4]
   d869e:	f7fb fd0b 	bl	d40b8 <__cxa_guard_acquire>
   d86a2:	9901      	ldr	r1, [sp, #4]
   d86a4:	b128      	cbz	r0, d86b2 <pinAvailable+0x3a>
   d86a6:	4812      	ldr	r0, [pc, #72]	; (d86f0 <pinAvailable+0x78>)
   d86a8:	f7ff fc86 	bl	d7fb8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d86ac:	4620      	mov	r0, r4
   d86ae:	f7fb fd08 	bl	d40c2 <__cxa_guard_release>
   d86b2:	4b0f      	ldr	r3, [pc, #60]	; (d86f0 <pinAvailable+0x78>)
   d86b4:	7818      	ldrb	r0, [r3, #0]
   d86b6:	f7fd f9c3 	bl	d5a40 <hal_spi_is_enabled>
   d86ba:	2800      	cmp	r0, #0
   d86bc:	d1df      	bne.n	d867e <pinAvailable+0x6>
  return true; // 'pin' is available
   d86be:	2001      	movs	r0, #1
   d86c0:	e7de      	b.n	d8680 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d86c2:	2801      	cmp	r0, #1
   d86c4:	d809      	bhi.n	d86da <pinAvailable+0x62>
   d86c6:	f000 f885 	bl	d87d4 <_Z19__fetch_global_Wirev>
   d86ca:	2100      	movs	r1, #0
   d86cc:	7c00      	ldrb	r0, [r0, #16]
   d86ce:	f7fd f95f 	bl	d5990 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d86d2:	f080 0001 	eor.w	r0, r0, #1
   d86d6:	b2c0      	uxtb	r0, r0
   d86d8:	e7d2      	b.n	d8680 <pinAvailable+0x8>
   d86da:	3809      	subs	r0, #9
   d86dc:	2801      	cmp	r0, #1
   d86de:	d8ee      	bhi.n	d86be <pinAvailable+0x46>
   d86e0:	f7ff fe80 	bl	d83e4 <_Z22__fetch_global_Serial1v>
   d86e4:	7c00      	ldrb	r0, [r0, #16]
   d86e6:	f7fd fa0b 	bl	d5b00 <hal_usart_is_enabled>
   d86ea:	e7f2      	b.n	d86d2 <pinAvailable+0x5a>
   d86ec:	2003e538 	.word	0x2003e538
   d86f0:	2003e53c 	.word	0x2003e53c

000d86f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86f4:	2823      	cmp	r0, #35	; 0x23
{
   d86f6:	b538      	push	{r3, r4, r5, lr}
   d86f8:	4604      	mov	r4, r0
   d86fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86fc:	d80a      	bhi.n	d8714 <pinMode+0x20>
   d86fe:	29ff      	cmp	r1, #255	; 0xff
   d8700:	d008      	beq.n	d8714 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8702:	f7ff ffb9 	bl	d8678 <pinAvailable>
   d8706:	b128      	cbz	r0, d8714 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8708:	4629      	mov	r1, r5
   d870a:	4620      	mov	r0, r4
}
   d870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8710:	f7fd b8de 	b.w	d58d0 <HAL_Pin_Mode>
}
   d8714:	bd38      	pop	{r3, r4, r5, pc}

000d8716 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8716:	b538      	push	{r3, r4, r5, lr}
   d8718:	4604      	mov	r4, r0
   d871a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d871c:	f7fd f8e0 	bl	d58e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8720:	28ff      	cmp	r0, #255	; 0xff
   d8722:	d010      	beq.n	d8746 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8724:	2806      	cmp	r0, #6
   d8726:	d804      	bhi.n	d8732 <digitalWrite+0x1c>
   d8728:	234d      	movs	r3, #77	; 0x4d
   d872a:	fa23 f000 	lsr.w	r0, r3, r0
   d872e:	07c3      	lsls	r3, r0, #31
   d8730:	d409      	bmi.n	d8746 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8732:	4620      	mov	r0, r4
   d8734:	f7ff ffa0 	bl	d8678 <pinAvailable>
   d8738:	b128      	cbz	r0, d8746 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d873a:	4629      	mov	r1, r5
   d873c:	4620      	mov	r0, r4
}
   d873e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8742:	f7fd b8d5 	b.w	d58f0 <HAL_GPIO_Write>
}
   d8746:	bd38      	pop	{r3, r4, r5, pc}

000d8748 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8748:	b510      	push	{r4, lr}
   d874a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d874c:	f7fd f8c8 	bl	d58e0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8750:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8752:	b2db      	uxtb	r3, r3
   d8754:	2b01      	cmp	r3, #1
   d8756:	d908      	bls.n	d876a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8758:	4620      	mov	r0, r4
   d875a:	f7ff ff8d 	bl	d8678 <pinAvailable>
   d875e:	b120      	cbz	r0, d876a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8760:	4620      	mov	r0, r4
}
   d8762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8766:	f7fd b8cb 	b.w	d5900 <HAL_GPIO_Read>
}
   d876a:	2000      	movs	r0, #0
   d876c:	bd10      	pop	{r4, pc}

000d876e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d876e:	4770      	bx	lr

000d8770 <__tcf_1>:
   d8770:	4770      	bx	lr
	...

000d8774 <_Z17acquireWireBufferv>:
{
   d8774:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8776:	2300      	movs	r3, #0
   d8778:	2520      	movs	r5, #32
   d877a:	8043      	strh	r3, [r0, #2]
   d877c:	2314      	movs	r3, #20
{
   d877e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8780:	8003      	strh	r3, [r0, #0]
   d8782:	6085      	str	r5, [r0, #8]
   d8784:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8786:	4906      	ldr	r1, [pc, #24]	; (d87a0 <_Z17acquireWireBufferv+0x2c>)
   d8788:	4628      	mov	r0, r5
   d878a:	f000 f86f 	bl	d886c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d878e:	4904      	ldr	r1, [pc, #16]	; (d87a0 <_Z17acquireWireBufferv+0x2c>)
	};
   d8790:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8792:	4628      	mov	r0, r5
   d8794:	f000 f86a 	bl	d886c <_ZnajRKSt9nothrow_t>
	};
   d8798:	60e0      	str	r0, [r4, #12]
}
   d879a:	4620      	mov	r0, r4
   d879c:	bd38      	pop	{r3, r4, r5, pc}
   d879e:	bf00      	nop
   d87a0:	000d994c 	.word	0x000d994c

000d87a4 <_Z18acquireWire1Bufferv>:
   d87a4:	b538      	push	{r3, r4, r5, lr}
   d87a6:	2300      	movs	r3, #0
   d87a8:	2520      	movs	r5, #32
   d87aa:	8043      	strh	r3, [r0, #2]
   d87ac:	2314      	movs	r3, #20
   d87ae:	4604      	mov	r4, r0
   d87b0:	8003      	strh	r3, [r0, #0]
   d87b2:	6085      	str	r5, [r0, #8]
   d87b4:	6105      	str	r5, [r0, #16]
   d87b6:	4906      	ldr	r1, [pc, #24]	; (d87d0 <_Z18acquireWire1Bufferv+0x2c>)
   d87b8:	4628      	mov	r0, r5
   d87ba:	f000 f857 	bl	d886c <_ZnajRKSt9nothrow_t>
   d87be:	4904      	ldr	r1, [pc, #16]	; (d87d0 <_Z18acquireWire1Bufferv+0x2c>)
   d87c0:	6060      	str	r0, [r4, #4]
   d87c2:	4628      	mov	r0, r5
   d87c4:	f000 f852 	bl	d886c <_ZnajRKSt9nothrow_t>
   d87c8:	60e0      	str	r0, [r4, #12]
   d87ca:	4620      	mov	r0, r4
   d87cc:	bd38      	pop	{r3, r4, r5, pc}
   d87ce:	bf00      	nop
   d87d0:	000d994c 	.word	0x000d994c

000d87d4 <_Z19__fetch_global_Wirev>:
{
   d87d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87d6:	4d0e      	ldr	r5, [pc, #56]	; (d8810 <_Z19__fetch_global_Wirev+0x3c>)
   d87d8:	7829      	ldrb	r1, [r5, #0]
   d87da:	f3bf 8f5b 	dmb	ish
   d87de:	f011 0401 	ands.w	r4, r1, #1
{
   d87e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87e4:	d111      	bne.n	d880a <_Z19__fetch_global_Wirev+0x36>
   d87e6:	4628      	mov	r0, r5
   d87e8:	f7fb fc66 	bl	d40b8 <__cxa_guard_acquire>
   d87ec:	b168      	cbz	r0, d880a <_Z19__fetch_global_Wirev+0x36>
   d87ee:	a801      	add	r0, sp, #4
   d87f0:	f7ff ffc0 	bl	d8774 <_Z17acquireWireBufferv>
   d87f4:	aa01      	add	r2, sp, #4
   d87f6:	4621      	mov	r1, r4
   d87f8:	4806      	ldr	r0, [pc, #24]	; (d8814 <_Z19__fetch_global_Wirev+0x40>)
   d87fa:	f7fe f805 	bl	d6808 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d87fe:	4628      	mov	r0, r5
   d8800:	f7fb fc5f 	bl	d40c2 <__cxa_guard_release>
   d8804:	4804      	ldr	r0, [pc, #16]	; (d8818 <_Z19__fetch_global_Wirev+0x44>)
   d8806:	f000 fcb5 	bl	d9174 <atexit>
	return wire;
}
   d880a:	4802      	ldr	r0, [pc, #8]	; (d8814 <_Z19__fetch_global_Wirev+0x40>)
   d880c:	b007      	add	sp, #28
   d880e:	bd30      	pop	{r4, r5, pc}
   d8810:	2003e728 	.word	0x2003e728
   d8814:	2003e730 	.word	0x2003e730
   d8818:	000d876f 	.word	0x000d876f

000d881c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d881c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d881e:	4c0e      	ldr	r4, [pc, #56]	; (d8858 <_Z20__fetch_global_Wire1v+0x3c>)
   d8820:	7823      	ldrb	r3, [r4, #0]
   d8822:	f3bf 8f5b 	dmb	ish
   d8826:	07db      	lsls	r3, r3, #31
{
   d8828:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d882a:	d411      	bmi.n	d8850 <_Z20__fetch_global_Wire1v+0x34>
   d882c:	4620      	mov	r0, r4
   d882e:	f7fb fc43 	bl	d40b8 <__cxa_guard_acquire>
   d8832:	b168      	cbz	r0, d8850 <_Z20__fetch_global_Wire1v+0x34>
   d8834:	a801      	add	r0, sp, #4
   d8836:	f7ff ffb5 	bl	d87a4 <_Z18acquireWire1Bufferv>
   d883a:	aa01      	add	r2, sp, #4
   d883c:	2101      	movs	r1, #1
   d883e:	4807      	ldr	r0, [pc, #28]	; (d885c <_Z20__fetch_global_Wire1v+0x40>)
   d8840:	f7fd ffe2 	bl	d6808 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8844:	4620      	mov	r0, r4
   d8846:	f7fb fc3c 	bl	d40c2 <__cxa_guard_release>
   d884a:	4805      	ldr	r0, [pc, #20]	; (d8860 <_Z20__fetch_global_Wire1v+0x44>)
   d884c:	f000 fc92 	bl	d9174 <atexit>
	return wire;
}
   d8850:	4802      	ldr	r0, [pc, #8]	; (d885c <_Z20__fetch_global_Wire1v+0x40>)
   d8852:	b006      	add	sp, #24
   d8854:	bd10      	pop	{r4, pc}
   d8856:	bf00      	nop
   d8858:	2003e72c 	.word	0x2003e72c
   d885c:	2003e744 	.word	0x2003e744
   d8860:	000d8771 	.word	0x000d8771

000d8864 <_ZdlPvj>:
   d8864:	f7fb bc1b 	b.w	d409e <_ZdlPv>

000d8868 <_ZnwjRKSt9nothrow_t>:
   d8868:	f7fb bc15 	b.w	d4096 <_Znwj>

000d886c <_ZnajRKSt9nothrow_t>:
   d886c:	f7fb bc15 	b.w	d409a <_Znaj>

000d8870 <_ZSt25__throw_bad_function_callv>:
   d8870:	b508      	push	{r3, lr}
   d8872:	f7fd fa93 	bl	d5d9c <abort>
	...

000d8878 <__aeabi_drsub>:
   d8878:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d887c:	e002      	b.n	d8884 <__adddf3>
   d887e:	bf00      	nop

000d8880 <__aeabi_dsub>:
   d8880:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8884 <__adddf3>:
   d8884:	b530      	push	{r4, r5, lr}
   d8886:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d888a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d888e:	ea94 0f05 	teq	r4, r5
   d8892:	bf08      	it	eq
   d8894:	ea90 0f02 	teqeq	r0, r2
   d8898:	bf1f      	itttt	ne
   d889a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d889e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d88a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d88a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88aa:	f000 80e2 	beq.w	d8a72 <__adddf3+0x1ee>
   d88ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d88b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d88b6:	bfb8      	it	lt
   d88b8:	426d      	neglt	r5, r5
   d88ba:	dd0c      	ble.n	d88d6 <__adddf3+0x52>
   d88bc:	442c      	add	r4, r5
   d88be:	ea80 0202 	eor.w	r2, r0, r2
   d88c2:	ea81 0303 	eor.w	r3, r1, r3
   d88c6:	ea82 0000 	eor.w	r0, r2, r0
   d88ca:	ea83 0101 	eor.w	r1, r3, r1
   d88ce:	ea80 0202 	eor.w	r2, r0, r2
   d88d2:	ea81 0303 	eor.w	r3, r1, r3
   d88d6:	2d36      	cmp	r5, #54	; 0x36
   d88d8:	bf88      	it	hi
   d88da:	bd30      	pophi	{r4, r5, pc}
   d88dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d88e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d88e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d88e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d88ec:	d002      	beq.n	d88f4 <__adddf3+0x70>
   d88ee:	4240      	negs	r0, r0
   d88f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d88f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d88f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d88fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8900:	d002      	beq.n	d8908 <__adddf3+0x84>
   d8902:	4252      	negs	r2, r2
   d8904:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8908:	ea94 0f05 	teq	r4, r5
   d890c:	f000 80a7 	beq.w	d8a5e <__adddf3+0x1da>
   d8910:	f1a4 0401 	sub.w	r4, r4, #1
   d8914:	f1d5 0e20 	rsbs	lr, r5, #32
   d8918:	db0d      	blt.n	d8936 <__adddf3+0xb2>
   d891a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d891e:	fa22 f205 	lsr.w	r2, r2, r5
   d8922:	1880      	adds	r0, r0, r2
   d8924:	f141 0100 	adc.w	r1, r1, #0
   d8928:	fa03 f20e 	lsl.w	r2, r3, lr
   d892c:	1880      	adds	r0, r0, r2
   d892e:	fa43 f305 	asr.w	r3, r3, r5
   d8932:	4159      	adcs	r1, r3
   d8934:	e00e      	b.n	d8954 <__adddf3+0xd0>
   d8936:	f1a5 0520 	sub.w	r5, r5, #32
   d893a:	f10e 0e20 	add.w	lr, lr, #32
   d893e:	2a01      	cmp	r2, #1
   d8940:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8944:	bf28      	it	cs
   d8946:	f04c 0c02 	orrcs.w	ip, ip, #2
   d894a:	fa43 f305 	asr.w	r3, r3, r5
   d894e:	18c0      	adds	r0, r0, r3
   d8950:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8958:	d507      	bpl.n	d896a <__adddf3+0xe6>
   d895a:	f04f 0e00 	mov.w	lr, #0
   d895e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8962:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8966:	eb6e 0101 	sbc.w	r1, lr, r1
   d896a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d896e:	d31b      	bcc.n	d89a8 <__adddf3+0x124>
   d8970:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8974:	d30c      	bcc.n	d8990 <__adddf3+0x10c>
   d8976:	0849      	lsrs	r1, r1, #1
   d8978:	ea5f 0030 	movs.w	r0, r0, rrx
   d897c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8980:	f104 0401 	add.w	r4, r4, #1
   d8984:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8988:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d898c:	f080 809a 	bcs.w	d8ac4 <__adddf3+0x240>
   d8990:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8994:	bf08      	it	eq
   d8996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d899a:	f150 0000 	adcs.w	r0, r0, #0
   d899e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d89a2:	ea41 0105 	orr.w	r1, r1, r5
   d89a6:	bd30      	pop	{r4, r5, pc}
   d89a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d89ac:	4140      	adcs	r0, r0
   d89ae:	eb41 0101 	adc.w	r1, r1, r1
   d89b2:	3c01      	subs	r4, #1
   d89b4:	bf28      	it	cs
   d89b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d89ba:	d2e9      	bcs.n	d8990 <__adddf3+0x10c>
   d89bc:	f091 0f00 	teq	r1, #0
   d89c0:	bf04      	itt	eq
   d89c2:	4601      	moveq	r1, r0
   d89c4:	2000      	moveq	r0, #0
   d89c6:	fab1 f381 	clz	r3, r1
   d89ca:	bf08      	it	eq
   d89cc:	3320      	addeq	r3, #32
   d89ce:	f1a3 030b 	sub.w	r3, r3, #11
   d89d2:	f1b3 0220 	subs.w	r2, r3, #32
   d89d6:	da0c      	bge.n	d89f2 <__adddf3+0x16e>
   d89d8:	320c      	adds	r2, #12
   d89da:	dd08      	ble.n	d89ee <__adddf3+0x16a>
   d89dc:	f102 0c14 	add.w	ip, r2, #20
   d89e0:	f1c2 020c 	rsb	r2, r2, #12
   d89e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d89e8:	fa21 f102 	lsr.w	r1, r1, r2
   d89ec:	e00c      	b.n	d8a08 <__adddf3+0x184>
   d89ee:	f102 0214 	add.w	r2, r2, #20
   d89f2:	bfd8      	it	le
   d89f4:	f1c2 0c20 	rsble	ip, r2, #32
   d89f8:	fa01 f102 	lsl.w	r1, r1, r2
   d89fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8a00:	bfdc      	itt	le
   d8a02:	ea41 010c 	orrle.w	r1, r1, ip
   d8a06:	4090      	lslle	r0, r2
   d8a08:	1ae4      	subs	r4, r4, r3
   d8a0a:	bfa2      	ittt	ge
   d8a0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8a10:	4329      	orrge	r1, r5
   d8a12:	bd30      	popge	{r4, r5, pc}
   d8a14:	ea6f 0404 	mvn.w	r4, r4
   d8a18:	3c1f      	subs	r4, #31
   d8a1a:	da1c      	bge.n	d8a56 <__adddf3+0x1d2>
   d8a1c:	340c      	adds	r4, #12
   d8a1e:	dc0e      	bgt.n	d8a3e <__adddf3+0x1ba>
   d8a20:	f104 0414 	add.w	r4, r4, #20
   d8a24:	f1c4 0220 	rsb	r2, r4, #32
   d8a28:	fa20 f004 	lsr.w	r0, r0, r4
   d8a2c:	fa01 f302 	lsl.w	r3, r1, r2
   d8a30:	ea40 0003 	orr.w	r0, r0, r3
   d8a34:	fa21 f304 	lsr.w	r3, r1, r4
   d8a38:	ea45 0103 	orr.w	r1, r5, r3
   d8a3c:	bd30      	pop	{r4, r5, pc}
   d8a3e:	f1c4 040c 	rsb	r4, r4, #12
   d8a42:	f1c4 0220 	rsb	r2, r4, #32
   d8a46:	fa20 f002 	lsr.w	r0, r0, r2
   d8a4a:	fa01 f304 	lsl.w	r3, r1, r4
   d8a4e:	ea40 0003 	orr.w	r0, r0, r3
   d8a52:	4629      	mov	r1, r5
   d8a54:	bd30      	pop	{r4, r5, pc}
   d8a56:	fa21 f004 	lsr.w	r0, r1, r4
   d8a5a:	4629      	mov	r1, r5
   d8a5c:	bd30      	pop	{r4, r5, pc}
   d8a5e:	f094 0f00 	teq	r4, #0
   d8a62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8a66:	bf06      	itte	eq
   d8a68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8a6c:	3401      	addeq	r4, #1
   d8a6e:	3d01      	subne	r5, #1
   d8a70:	e74e      	b.n	d8910 <__adddf3+0x8c>
   d8a72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a76:	bf18      	it	ne
   d8a78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a7c:	d029      	beq.n	d8ad2 <__adddf3+0x24e>
   d8a7e:	ea94 0f05 	teq	r4, r5
   d8a82:	bf08      	it	eq
   d8a84:	ea90 0f02 	teqeq	r0, r2
   d8a88:	d005      	beq.n	d8a96 <__adddf3+0x212>
   d8a8a:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a8e:	bf04      	itt	eq
   d8a90:	4619      	moveq	r1, r3
   d8a92:	4610      	moveq	r0, r2
   d8a94:	bd30      	pop	{r4, r5, pc}
   d8a96:	ea91 0f03 	teq	r1, r3
   d8a9a:	bf1e      	ittt	ne
   d8a9c:	2100      	movne	r1, #0
   d8a9e:	2000      	movne	r0, #0
   d8aa0:	bd30      	popne	{r4, r5, pc}
   d8aa2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8aa6:	d105      	bne.n	d8ab4 <__adddf3+0x230>
   d8aa8:	0040      	lsls	r0, r0, #1
   d8aaa:	4149      	adcs	r1, r1
   d8aac:	bf28      	it	cs
   d8aae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8ab2:	bd30      	pop	{r4, r5, pc}
   d8ab4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8ab8:	bf3c      	itt	cc
   d8aba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8abe:	bd30      	popcc	{r4, r5, pc}
   d8ac0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ac4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8ac8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8acc:	f04f 0000 	mov.w	r0, #0
   d8ad0:	bd30      	pop	{r4, r5, pc}
   d8ad2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ad6:	bf1a      	itte	ne
   d8ad8:	4619      	movne	r1, r3
   d8ada:	4610      	movne	r0, r2
   d8adc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8ae0:	bf1c      	itt	ne
   d8ae2:	460b      	movne	r3, r1
   d8ae4:	4602      	movne	r2, r0
   d8ae6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8aea:	bf06      	itte	eq
   d8aec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8af0:	ea91 0f03 	teqeq	r1, r3
   d8af4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8af8:	bd30      	pop	{r4, r5, pc}
   d8afa:	bf00      	nop

000d8afc <__aeabi_ui2d>:
   d8afc:	f090 0f00 	teq	r0, #0
   d8b00:	bf04      	itt	eq
   d8b02:	2100      	moveq	r1, #0
   d8b04:	4770      	bxeq	lr
   d8b06:	b530      	push	{r4, r5, lr}
   d8b08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b10:	f04f 0500 	mov.w	r5, #0
   d8b14:	f04f 0100 	mov.w	r1, #0
   d8b18:	e750      	b.n	d89bc <__adddf3+0x138>
   d8b1a:	bf00      	nop

000d8b1c <__aeabi_i2d>:
   d8b1c:	f090 0f00 	teq	r0, #0
   d8b20:	bf04      	itt	eq
   d8b22:	2100      	moveq	r1, #0
   d8b24:	4770      	bxeq	lr
   d8b26:	b530      	push	{r4, r5, lr}
   d8b28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8b34:	bf48      	it	mi
   d8b36:	4240      	negmi	r0, r0
   d8b38:	f04f 0100 	mov.w	r1, #0
   d8b3c:	e73e      	b.n	d89bc <__adddf3+0x138>
   d8b3e:	bf00      	nop

000d8b40 <__aeabi_f2d>:
   d8b40:	0042      	lsls	r2, r0, #1
   d8b42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8b46:	ea4f 0131 	mov.w	r1, r1, rrx
   d8b4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8b4e:	bf1f      	itttt	ne
   d8b50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8b54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8b5c:	4770      	bxne	lr
   d8b5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8b62:	bf08      	it	eq
   d8b64:	4770      	bxeq	lr
   d8b66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8b6a:	bf04      	itt	eq
   d8b6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8b70:	4770      	bxeq	lr
   d8b72:	b530      	push	{r4, r5, lr}
   d8b74:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8b78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b80:	e71c      	b.n	d89bc <__adddf3+0x138>
   d8b82:	bf00      	nop

000d8b84 <__aeabi_ul2d>:
   d8b84:	ea50 0201 	orrs.w	r2, r0, r1
   d8b88:	bf08      	it	eq
   d8b8a:	4770      	bxeq	lr
   d8b8c:	b530      	push	{r4, r5, lr}
   d8b8e:	f04f 0500 	mov.w	r5, #0
   d8b92:	e00a      	b.n	d8baa <__aeabi_l2d+0x16>

000d8b94 <__aeabi_l2d>:
   d8b94:	ea50 0201 	orrs.w	r2, r0, r1
   d8b98:	bf08      	it	eq
   d8b9a:	4770      	bxeq	lr
   d8b9c:	b530      	push	{r4, r5, lr}
   d8b9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8ba2:	d502      	bpl.n	d8baa <__aeabi_l2d+0x16>
   d8ba4:	4240      	negs	r0, r0
   d8ba6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8baa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bb2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8bb6:	f43f aed8 	beq.w	d896a <__adddf3+0xe6>
   d8bba:	f04f 0203 	mov.w	r2, #3
   d8bbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8bc2:	bf18      	it	ne
   d8bc4:	3203      	addne	r2, #3
   d8bc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8bca:	bf18      	it	ne
   d8bcc:	3203      	addne	r2, #3
   d8bce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8bd2:	f1c2 0320 	rsb	r3, r2, #32
   d8bd6:	fa00 fc03 	lsl.w	ip, r0, r3
   d8bda:	fa20 f002 	lsr.w	r0, r0, r2
   d8bde:	fa01 fe03 	lsl.w	lr, r1, r3
   d8be2:	ea40 000e 	orr.w	r0, r0, lr
   d8be6:	fa21 f102 	lsr.w	r1, r1, r2
   d8bea:	4414      	add	r4, r2
   d8bec:	e6bd      	b.n	d896a <__adddf3+0xe6>
   d8bee:	bf00      	nop

000d8bf0 <__aeabi_dmul>:
   d8bf0:	b570      	push	{r4, r5, r6, lr}
   d8bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8bfe:	bf1d      	ittte	ne
   d8c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c04:	ea94 0f0c 	teqne	r4, ip
   d8c08:	ea95 0f0c 	teqne	r5, ip
   d8c0c:	f000 f8de 	bleq	d8dcc <__aeabi_dmul+0x1dc>
   d8c10:	442c      	add	r4, r5
   d8c12:	ea81 0603 	eor.w	r6, r1, r3
   d8c16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8c1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8c1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8c22:	bf18      	it	ne
   d8c24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8c28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c30:	d038      	beq.n	d8ca4 <__aeabi_dmul+0xb4>
   d8c32:	fba0 ce02 	umull	ip, lr, r0, r2
   d8c36:	f04f 0500 	mov.w	r5, #0
   d8c3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8c3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8c42:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8c46:	f04f 0600 	mov.w	r6, #0
   d8c4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8c4e:	f09c 0f00 	teq	ip, #0
   d8c52:	bf18      	it	ne
   d8c54:	f04e 0e01 	orrne.w	lr, lr, #1
   d8c58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8c5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8c60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8c64:	d204      	bcs.n	d8c70 <__aeabi_dmul+0x80>
   d8c66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8c6a:	416d      	adcs	r5, r5
   d8c6c:	eb46 0606 	adc.w	r6, r6, r6
   d8c70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8c74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8c78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8c7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8c80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8c84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c88:	bf88      	it	hi
   d8c8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c8e:	d81e      	bhi.n	d8cce <__aeabi_dmul+0xde>
   d8c90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c94:	bf08      	it	eq
   d8c96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c9a:	f150 0000 	adcs.w	r0, r0, #0
   d8c9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ca2:	bd70      	pop	{r4, r5, r6, pc}
   d8ca4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8ca8:	ea46 0101 	orr.w	r1, r6, r1
   d8cac:	ea40 0002 	orr.w	r0, r0, r2
   d8cb0:	ea81 0103 	eor.w	r1, r1, r3
   d8cb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8cb8:	bfc2      	ittt	gt
   d8cba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8cbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8cc2:	bd70      	popgt	{r4, r5, r6, pc}
   d8cc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cc8:	f04f 0e00 	mov.w	lr, #0
   d8ccc:	3c01      	subs	r4, #1
   d8cce:	f300 80ab 	bgt.w	d8e28 <__aeabi_dmul+0x238>
   d8cd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8cd6:	bfde      	ittt	le
   d8cd8:	2000      	movle	r0, #0
   d8cda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8cde:	bd70      	pople	{r4, r5, r6, pc}
   d8ce0:	f1c4 0400 	rsb	r4, r4, #0
   d8ce4:	3c20      	subs	r4, #32
   d8ce6:	da35      	bge.n	d8d54 <__aeabi_dmul+0x164>
   d8ce8:	340c      	adds	r4, #12
   d8cea:	dc1b      	bgt.n	d8d24 <__aeabi_dmul+0x134>
   d8cec:	f104 0414 	add.w	r4, r4, #20
   d8cf0:	f1c4 0520 	rsb	r5, r4, #32
   d8cf4:	fa00 f305 	lsl.w	r3, r0, r5
   d8cf8:	fa20 f004 	lsr.w	r0, r0, r4
   d8cfc:	fa01 f205 	lsl.w	r2, r1, r5
   d8d00:	ea40 0002 	orr.w	r0, r0, r2
   d8d04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8d08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d10:	fa21 f604 	lsr.w	r6, r1, r4
   d8d14:	eb42 0106 	adc.w	r1, r2, r6
   d8d18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d1c:	bf08      	it	eq
   d8d1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d22:	bd70      	pop	{r4, r5, r6, pc}
   d8d24:	f1c4 040c 	rsb	r4, r4, #12
   d8d28:	f1c4 0520 	rsb	r5, r4, #32
   d8d2c:	fa00 f304 	lsl.w	r3, r0, r4
   d8d30:	fa20 f005 	lsr.w	r0, r0, r5
   d8d34:	fa01 f204 	lsl.w	r2, r1, r4
   d8d38:	ea40 0002 	orr.w	r0, r0, r2
   d8d3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d44:	f141 0100 	adc.w	r1, r1, #0
   d8d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d4c:	bf08      	it	eq
   d8d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d52:	bd70      	pop	{r4, r5, r6, pc}
   d8d54:	f1c4 0520 	rsb	r5, r4, #32
   d8d58:	fa00 f205 	lsl.w	r2, r0, r5
   d8d5c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8d60:	fa20 f304 	lsr.w	r3, r0, r4
   d8d64:	fa01 f205 	lsl.w	r2, r1, r5
   d8d68:	ea43 0302 	orr.w	r3, r3, r2
   d8d6c:	fa21 f004 	lsr.w	r0, r1, r4
   d8d70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d74:	fa21 f204 	lsr.w	r2, r1, r4
   d8d78:	ea20 0002 	bic.w	r0, r0, r2
   d8d7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8d80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d84:	bf08      	it	eq
   d8d86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d8a:	bd70      	pop	{r4, r5, r6, pc}
   d8d8c:	f094 0f00 	teq	r4, #0
   d8d90:	d10f      	bne.n	d8db2 <__aeabi_dmul+0x1c2>
   d8d92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d96:	0040      	lsls	r0, r0, #1
   d8d98:	eb41 0101 	adc.w	r1, r1, r1
   d8d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8da0:	bf08      	it	eq
   d8da2:	3c01      	subeq	r4, #1
   d8da4:	d0f7      	beq.n	d8d96 <__aeabi_dmul+0x1a6>
   d8da6:	ea41 0106 	orr.w	r1, r1, r6
   d8daa:	f095 0f00 	teq	r5, #0
   d8dae:	bf18      	it	ne
   d8db0:	4770      	bxne	lr
   d8db2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8db6:	0052      	lsls	r2, r2, #1
   d8db8:	eb43 0303 	adc.w	r3, r3, r3
   d8dbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8dc0:	bf08      	it	eq
   d8dc2:	3d01      	subeq	r5, #1
   d8dc4:	d0f7      	beq.n	d8db6 <__aeabi_dmul+0x1c6>
   d8dc6:	ea43 0306 	orr.w	r3, r3, r6
   d8dca:	4770      	bx	lr
   d8dcc:	ea94 0f0c 	teq	r4, ip
   d8dd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8dd4:	bf18      	it	ne
   d8dd6:	ea95 0f0c 	teqne	r5, ip
   d8dda:	d00c      	beq.n	d8df6 <__aeabi_dmul+0x206>
   d8ddc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8de0:	bf18      	it	ne
   d8de2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8de6:	d1d1      	bne.n	d8d8c <__aeabi_dmul+0x19c>
   d8de8:	ea81 0103 	eor.w	r1, r1, r3
   d8dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8df0:	f04f 0000 	mov.w	r0, #0
   d8df4:	bd70      	pop	{r4, r5, r6, pc}
   d8df6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8dfa:	bf06      	itte	eq
   d8dfc:	4610      	moveq	r0, r2
   d8dfe:	4619      	moveq	r1, r3
   d8e00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e04:	d019      	beq.n	d8e3a <__aeabi_dmul+0x24a>
   d8e06:	ea94 0f0c 	teq	r4, ip
   d8e0a:	d102      	bne.n	d8e12 <__aeabi_dmul+0x222>
   d8e0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8e10:	d113      	bne.n	d8e3a <__aeabi_dmul+0x24a>
   d8e12:	ea95 0f0c 	teq	r5, ip
   d8e16:	d105      	bne.n	d8e24 <__aeabi_dmul+0x234>
   d8e18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8e1c:	bf1c      	itt	ne
   d8e1e:	4610      	movne	r0, r2
   d8e20:	4619      	movne	r1, r3
   d8e22:	d10a      	bne.n	d8e3a <__aeabi_dmul+0x24a>
   d8e24:	ea81 0103 	eor.w	r1, r1, r3
   d8e28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8e34:	f04f 0000 	mov.w	r0, #0
   d8e38:	bd70      	pop	{r4, r5, r6, pc}
   d8e3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8e42:	bd70      	pop	{r4, r5, r6, pc}

000d8e44 <__aeabi_ddiv>:
   d8e44:	b570      	push	{r4, r5, r6, lr}
   d8e46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e52:	bf1d      	ittte	ne
   d8e54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e58:	ea94 0f0c 	teqne	r4, ip
   d8e5c:	ea95 0f0c 	teqne	r5, ip
   d8e60:	f000 f8a7 	bleq	d8fb2 <__aeabi_ddiv+0x16e>
   d8e64:	eba4 0405 	sub.w	r4, r4, r5
   d8e68:	ea81 0e03 	eor.w	lr, r1, r3
   d8e6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e74:	f000 8088 	beq.w	d8f88 <__aeabi_ddiv+0x144>
   d8e78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8e80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8e84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8e88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8e8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8e90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e9c:	429d      	cmp	r5, r3
   d8e9e:	bf08      	it	eq
   d8ea0:	4296      	cmpeq	r6, r2
   d8ea2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8ea6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8eaa:	d202      	bcs.n	d8eb2 <__aeabi_ddiv+0x6e>
   d8eac:	085b      	lsrs	r3, r3, #1
   d8eae:	ea4f 0232 	mov.w	r2, r2, rrx
   d8eb2:	1ab6      	subs	r6, r6, r2
   d8eb4:	eb65 0503 	sbc.w	r5, r5, r3
   d8eb8:	085b      	lsrs	r3, r3, #1
   d8eba:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ebe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8ec2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8ec6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8eca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ece:	bf22      	ittt	cs
   d8ed0:	1ab6      	subcs	r6, r6, r2
   d8ed2:	4675      	movcs	r5, lr
   d8ed4:	ea40 000c 	orrcs.w	r0, r0, ip
   d8ed8:	085b      	lsrs	r3, r3, #1
   d8eda:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ede:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ee2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ee6:	bf22      	ittt	cs
   d8ee8:	1ab6      	subcs	r6, r6, r2
   d8eea:	4675      	movcs	r5, lr
   d8eec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8ef0:	085b      	lsrs	r3, r3, #1
   d8ef2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ef6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8efa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8efe:	bf22      	ittt	cs
   d8f00:	1ab6      	subcs	r6, r6, r2
   d8f02:	4675      	movcs	r5, lr
   d8f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8f08:	085b      	lsrs	r3, r3, #1
   d8f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f16:	bf22      	ittt	cs
   d8f18:	1ab6      	subcs	r6, r6, r2
   d8f1a:	4675      	movcs	r5, lr
   d8f1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8f20:	ea55 0e06 	orrs.w	lr, r5, r6
   d8f24:	d018      	beq.n	d8f58 <__aeabi_ddiv+0x114>
   d8f26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8f2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8f2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8f32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8f36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8f3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8f3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8f42:	d1c0      	bne.n	d8ec6 <__aeabi_ddiv+0x82>
   d8f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f48:	d10b      	bne.n	d8f62 <__aeabi_ddiv+0x11e>
   d8f4a:	ea41 0100 	orr.w	r1, r1, r0
   d8f4e:	f04f 0000 	mov.w	r0, #0
   d8f52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8f56:	e7b6      	b.n	d8ec6 <__aeabi_ddiv+0x82>
   d8f58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f5c:	bf04      	itt	eq
   d8f5e:	4301      	orreq	r1, r0
   d8f60:	2000      	moveq	r0, #0
   d8f62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f66:	bf88      	it	hi
   d8f68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f6c:	f63f aeaf 	bhi.w	d8cce <__aeabi_dmul+0xde>
   d8f70:	ebb5 0c03 	subs.w	ip, r5, r3
   d8f74:	bf04      	itt	eq
   d8f76:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8f7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8f7e:	f150 0000 	adcs.w	r0, r0, #0
   d8f82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f86:	bd70      	pop	{r4, r5, r6, pc}
   d8f88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8f8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8f90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f94:	bfc2      	ittt	gt
   d8f96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f9e:	bd70      	popgt	{r4, r5, r6, pc}
   d8fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8fa4:	f04f 0e00 	mov.w	lr, #0
   d8fa8:	3c01      	subs	r4, #1
   d8faa:	e690      	b.n	d8cce <__aeabi_dmul+0xde>
   d8fac:	ea45 0e06 	orr.w	lr, r5, r6
   d8fb0:	e68d      	b.n	d8cce <__aeabi_dmul+0xde>
   d8fb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8fb6:	ea94 0f0c 	teq	r4, ip
   d8fba:	bf08      	it	eq
   d8fbc:	ea95 0f0c 	teqeq	r5, ip
   d8fc0:	f43f af3b 	beq.w	d8e3a <__aeabi_dmul+0x24a>
   d8fc4:	ea94 0f0c 	teq	r4, ip
   d8fc8:	d10a      	bne.n	d8fe0 <__aeabi_ddiv+0x19c>
   d8fca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8fce:	f47f af34 	bne.w	d8e3a <__aeabi_dmul+0x24a>
   d8fd2:	ea95 0f0c 	teq	r5, ip
   d8fd6:	f47f af25 	bne.w	d8e24 <__aeabi_dmul+0x234>
   d8fda:	4610      	mov	r0, r2
   d8fdc:	4619      	mov	r1, r3
   d8fde:	e72c      	b.n	d8e3a <__aeabi_dmul+0x24a>
   d8fe0:	ea95 0f0c 	teq	r5, ip
   d8fe4:	d106      	bne.n	d8ff4 <__aeabi_ddiv+0x1b0>
   d8fe6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8fea:	f43f aefd 	beq.w	d8de8 <__aeabi_dmul+0x1f8>
   d8fee:	4610      	mov	r0, r2
   d8ff0:	4619      	mov	r1, r3
   d8ff2:	e722      	b.n	d8e3a <__aeabi_dmul+0x24a>
   d8ff4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ff8:	bf18      	it	ne
   d8ffa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ffe:	f47f aec5 	bne.w	d8d8c <__aeabi_dmul+0x19c>
   d9002:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9006:	f47f af0d 	bne.w	d8e24 <__aeabi_dmul+0x234>
   d900a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d900e:	f47f aeeb 	bne.w	d8de8 <__aeabi_dmul+0x1f8>
   d9012:	e712      	b.n	d8e3a <__aeabi_dmul+0x24a>

000d9014 <__gedf2>:
   d9014:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9018:	e006      	b.n	d9028 <__cmpdf2+0x4>
   d901a:	bf00      	nop

000d901c <__ledf2>:
   d901c:	f04f 0c01 	mov.w	ip, #1
   d9020:	e002      	b.n	d9028 <__cmpdf2+0x4>
   d9022:	bf00      	nop

000d9024 <__cmpdf2>:
   d9024:	f04f 0c01 	mov.w	ip, #1
   d9028:	f84d cd04 	str.w	ip, [sp, #-4]!
   d902c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9034:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9038:	bf18      	it	ne
   d903a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d903e:	d01b      	beq.n	d9078 <__cmpdf2+0x54>
   d9040:	b001      	add	sp, #4
   d9042:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9046:	bf0c      	ite	eq
   d9048:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d904c:	ea91 0f03 	teqne	r1, r3
   d9050:	bf02      	ittt	eq
   d9052:	ea90 0f02 	teqeq	r0, r2
   d9056:	2000      	moveq	r0, #0
   d9058:	4770      	bxeq	lr
   d905a:	f110 0f00 	cmn.w	r0, #0
   d905e:	ea91 0f03 	teq	r1, r3
   d9062:	bf58      	it	pl
   d9064:	4299      	cmppl	r1, r3
   d9066:	bf08      	it	eq
   d9068:	4290      	cmpeq	r0, r2
   d906a:	bf2c      	ite	cs
   d906c:	17d8      	asrcs	r0, r3, #31
   d906e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9072:	f040 0001 	orr.w	r0, r0, #1
   d9076:	4770      	bx	lr
   d9078:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d907c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9080:	d102      	bne.n	d9088 <__cmpdf2+0x64>
   d9082:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9086:	d107      	bne.n	d9098 <__cmpdf2+0x74>
   d9088:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d908c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9090:	d1d6      	bne.n	d9040 <__cmpdf2+0x1c>
   d9092:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9096:	d0d3      	beq.n	d9040 <__cmpdf2+0x1c>
   d9098:	f85d 0b04 	ldr.w	r0, [sp], #4
   d909c:	4770      	bx	lr
   d909e:	bf00      	nop

000d90a0 <__aeabi_cdrcmple>:
   d90a0:	4684      	mov	ip, r0
   d90a2:	4610      	mov	r0, r2
   d90a4:	4662      	mov	r2, ip
   d90a6:	468c      	mov	ip, r1
   d90a8:	4619      	mov	r1, r3
   d90aa:	4663      	mov	r3, ip
   d90ac:	e000      	b.n	d90b0 <__aeabi_cdcmpeq>
   d90ae:	bf00      	nop

000d90b0 <__aeabi_cdcmpeq>:
   d90b0:	b501      	push	{r0, lr}
   d90b2:	f7ff ffb7 	bl	d9024 <__cmpdf2>
   d90b6:	2800      	cmp	r0, #0
   d90b8:	bf48      	it	mi
   d90ba:	f110 0f00 	cmnmi.w	r0, #0
   d90be:	bd01      	pop	{r0, pc}

000d90c0 <__aeabi_dcmpeq>:
   d90c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d90c4:	f7ff fff4 	bl	d90b0 <__aeabi_cdcmpeq>
   d90c8:	bf0c      	ite	eq
   d90ca:	2001      	moveq	r0, #1
   d90cc:	2000      	movne	r0, #0
   d90ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d90d2:	bf00      	nop

000d90d4 <__aeabi_dcmplt>:
   d90d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d90d8:	f7ff ffea 	bl	d90b0 <__aeabi_cdcmpeq>
   d90dc:	bf34      	ite	cc
   d90de:	2001      	movcc	r0, #1
   d90e0:	2000      	movcs	r0, #0
   d90e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d90e6:	bf00      	nop

000d90e8 <__aeabi_dcmple>:
   d90e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d90ec:	f7ff ffe0 	bl	d90b0 <__aeabi_cdcmpeq>
   d90f0:	bf94      	ite	ls
   d90f2:	2001      	movls	r0, #1
   d90f4:	2000      	movhi	r0, #0
   d90f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d90fa:	bf00      	nop

000d90fc <__aeabi_dcmpge>:
   d90fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9100:	f7ff ffce 	bl	d90a0 <__aeabi_cdrcmple>
   d9104:	bf94      	ite	ls
   d9106:	2001      	movls	r0, #1
   d9108:	2000      	movhi	r0, #0
   d910a:	f85d fb08 	ldr.w	pc, [sp], #8
   d910e:	bf00      	nop

000d9110 <__aeabi_dcmpgt>:
   d9110:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9114:	f7ff ffc4 	bl	d90a0 <__aeabi_cdrcmple>
   d9118:	bf34      	ite	cc
   d911a:	2001      	movcc	r0, #1
   d911c:	2000      	movcs	r0, #0
   d911e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9122:	bf00      	nop

000d9124 <__aeabi_d2iz>:
   d9124:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9128:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d912c:	d215      	bcs.n	d915a <__aeabi_d2iz+0x36>
   d912e:	d511      	bpl.n	d9154 <__aeabi_d2iz+0x30>
   d9130:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9134:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9138:	d912      	bls.n	d9160 <__aeabi_d2iz+0x3c>
   d913a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d913e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9142:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9146:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d914a:	fa23 f002 	lsr.w	r0, r3, r2
   d914e:	bf18      	it	ne
   d9150:	4240      	negne	r0, r0
   d9152:	4770      	bx	lr
   d9154:	f04f 0000 	mov.w	r0, #0
   d9158:	4770      	bx	lr
   d915a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d915e:	d105      	bne.n	d916c <__aeabi_d2iz+0x48>
   d9160:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9164:	bf08      	it	eq
   d9166:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d916a:	4770      	bx	lr
   d916c:	f04f 0000 	mov.w	r0, #0
   d9170:	4770      	bx	lr
   d9172:	bf00      	nop

000d9174 <atexit>:
   d9174:	2300      	movs	r3, #0
   d9176:	4601      	mov	r1, r0
   d9178:	461a      	mov	r2, r3
   d917a:	4618      	mov	r0, r3
   d917c:	f000 b964 	b.w	d9448 <__register_exitproc>

000d9180 <atol>:
   d9180:	220a      	movs	r2, #10
   d9182:	2100      	movs	r1, #0
   d9184:	f000 b956 	b.w	d9434 <strtol>

000d9188 <memcpy>:
   d9188:	440a      	add	r2, r1
   d918a:	4291      	cmp	r1, r2
   d918c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9190:	d100      	bne.n	d9194 <memcpy+0xc>
   d9192:	4770      	bx	lr
   d9194:	b510      	push	{r4, lr}
   d9196:	f811 4b01 	ldrb.w	r4, [r1], #1
   d919a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d919e:	4291      	cmp	r1, r2
   d91a0:	d1f9      	bne.n	d9196 <memcpy+0xe>
   d91a2:	bd10      	pop	{r4, pc}

000d91a4 <memmove>:
   d91a4:	4288      	cmp	r0, r1
   d91a6:	b510      	push	{r4, lr}
   d91a8:	eb01 0402 	add.w	r4, r1, r2
   d91ac:	d902      	bls.n	d91b4 <memmove+0x10>
   d91ae:	4284      	cmp	r4, r0
   d91b0:	4623      	mov	r3, r4
   d91b2:	d807      	bhi.n	d91c4 <memmove+0x20>
   d91b4:	1e43      	subs	r3, r0, #1
   d91b6:	42a1      	cmp	r1, r4
   d91b8:	d008      	beq.n	d91cc <memmove+0x28>
   d91ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   d91be:	f803 2f01 	strb.w	r2, [r3, #1]!
   d91c2:	e7f8      	b.n	d91b6 <memmove+0x12>
   d91c4:	4402      	add	r2, r0
   d91c6:	4601      	mov	r1, r0
   d91c8:	428a      	cmp	r2, r1
   d91ca:	d100      	bne.n	d91ce <memmove+0x2a>
   d91cc:	bd10      	pop	{r4, pc}
   d91ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d91d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d91d6:	e7f7      	b.n	d91c8 <memmove+0x24>

000d91d8 <memset>:
   d91d8:	4402      	add	r2, r0
   d91da:	4603      	mov	r3, r0
   d91dc:	4293      	cmp	r3, r2
   d91de:	d100      	bne.n	d91e2 <memset+0xa>
   d91e0:	4770      	bx	lr
   d91e2:	f803 1b01 	strb.w	r1, [r3], #1
   d91e6:	e7f9      	b.n	d91dc <memset+0x4>

000d91e8 <srand>:
   d91e8:	b538      	push	{r3, r4, r5, lr}
   d91ea:	4b0d      	ldr	r3, [pc, #52]	; (d9220 <srand+0x38>)
   d91ec:	681d      	ldr	r5, [r3, #0]
   d91ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d91f0:	4604      	mov	r4, r0
   d91f2:	b97b      	cbnz	r3, d9214 <srand+0x2c>
   d91f4:	2018      	movs	r0, #24
   d91f6:	f7fc fdb1 	bl	d5d5c <malloc>
   d91fa:	4a0a      	ldr	r2, [pc, #40]	; (d9224 <srand+0x3c>)
   d91fc:	4b0a      	ldr	r3, [pc, #40]	; (d9228 <srand+0x40>)
   d91fe:	63a8      	str	r0, [r5, #56]	; 0x38
   d9200:	e9c0 2300 	strd	r2, r3, [r0]
   d9204:	4b09      	ldr	r3, [pc, #36]	; (d922c <srand+0x44>)
   d9206:	6083      	str	r3, [r0, #8]
   d9208:	230b      	movs	r3, #11
   d920a:	8183      	strh	r3, [r0, #12]
   d920c:	2201      	movs	r2, #1
   d920e:	2300      	movs	r3, #0
   d9210:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9214:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9216:	2200      	movs	r2, #0
   d9218:	611c      	str	r4, [r3, #16]
   d921a:	615a      	str	r2, [r3, #20]
   d921c:	bd38      	pop	{r3, r4, r5, pc}
   d921e:	bf00      	nop
   d9220:	2003e33c 	.word	0x2003e33c
   d9224:	abcd330e 	.word	0xabcd330e
   d9228:	e66d1234 	.word	0xe66d1234
   d922c:	0005deec 	.word	0x0005deec

000d9230 <strchr>:
   d9230:	b2c9      	uxtb	r1, r1
   d9232:	4603      	mov	r3, r0
   d9234:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9238:	b11a      	cbz	r2, d9242 <strchr+0x12>
   d923a:	428a      	cmp	r2, r1
   d923c:	d1f9      	bne.n	d9232 <strchr+0x2>
   d923e:	4618      	mov	r0, r3
   d9240:	4770      	bx	lr
   d9242:	2900      	cmp	r1, #0
   d9244:	bf18      	it	ne
   d9246:	2300      	movne	r3, #0
   d9248:	e7f9      	b.n	d923e <strchr+0xe>

000d924a <strchrnul>:
   d924a:	b510      	push	{r4, lr}
   d924c:	4604      	mov	r4, r0
   d924e:	f7ff ffef 	bl	d9230 <strchr>
   d9252:	b918      	cbnz	r0, d925c <strchrnul+0x12>
   d9254:	4620      	mov	r0, r4
   d9256:	f000 f832 	bl	d92be <strlen>
   d925a:	4420      	add	r0, r4
   d925c:	bd10      	pop	{r4, pc}

000d925e <strcmp>:
   d925e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9262:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9266:	2a01      	cmp	r2, #1
   d9268:	bf28      	it	cs
   d926a:	429a      	cmpcs	r2, r3
   d926c:	d0f7      	beq.n	d925e <strcmp>
   d926e:	1ad0      	subs	r0, r2, r3
   d9270:	4770      	bx	lr

000d9272 <strcpy>:
   d9272:	4603      	mov	r3, r0
   d9274:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9278:	f803 2b01 	strb.w	r2, [r3], #1
   d927c:	2a00      	cmp	r2, #0
   d927e:	d1f9      	bne.n	d9274 <strcpy+0x2>
   d9280:	4770      	bx	lr
	...

000d9284 <strdup>:
   d9284:	4b02      	ldr	r3, [pc, #8]	; (d9290 <strdup+0xc>)
   d9286:	4601      	mov	r1, r0
   d9288:	6818      	ldr	r0, [r3, #0]
   d928a:	f000 b803 	b.w	d9294 <_strdup_r>
   d928e:	bf00      	nop
   d9290:	2003e33c 	.word	0x2003e33c

000d9294 <_strdup_r>:
   d9294:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9296:	4604      	mov	r4, r0
   d9298:	4608      	mov	r0, r1
   d929a:	460d      	mov	r5, r1
   d929c:	f000 f80f 	bl	d92be <strlen>
   d92a0:	1c42      	adds	r2, r0, #1
   d92a2:	4611      	mov	r1, r2
   d92a4:	4620      	mov	r0, r4
   d92a6:	9201      	str	r2, [sp, #4]
   d92a8:	f7fc fd80 	bl	d5dac <_malloc_r>
   d92ac:	4604      	mov	r4, r0
   d92ae:	b118      	cbz	r0, d92b8 <_strdup_r+0x24>
   d92b0:	9a01      	ldr	r2, [sp, #4]
   d92b2:	4629      	mov	r1, r5
   d92b4:	f7ff ff68 	bl	d9188 <memcpy>
   d92b8:	4620      	mov	r0, r4
   d92ba:	b003      	add	sp, #12
   d92bc:	bd30      	pop	{r4, r5, pc}

000d92be <strlen>:
   d92be:	4603      	mov	r3, r0
   d92c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d92c4:	2a00      	cmp	r2, #0
   d92c6:	d1fb      	bne.n	d92c0 <strlen+0x2>
   d92c8:	1a18      	subs	r0, r3, r0
   d92ca:	3801      	subs	r0, #1
   d92cc:	4770      	bx	lr

000d92ce <strncmp>:
   d92ce:	b510      	push	{r4, lr}
   d92d0:	b16a      	cbz	r2, d92ee <strncmp+0x20>
   d92d2:	3901      	subs	r1, #1
   d92d4:	1884      	adds	r4, r0, r2
   d92d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d92da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d92de:	4293      	cmp	r3, r2
   d92e0:	d103      	bne.n	d92ea <strncmp+0x1c>
   d92e2:	42a0      	cmp	r0, r4
   d92e4:	d001      	beq.n	d92ea <strncmp+0x1c>
   d92e6:	2b00      	cmp	r3, #0
   d92e8:	d1f5      	bne.n	d92d6 <strncmp+0x8>
   d92ea:	1a98      	subs	r0, r3, r2
   d92ec:	bd10      	pop	{r4, pc}
   d92ee:	4610      	mov	r0, r2
   d92f0:	e7fc      	b.n	d92ec <strncmp+0x1e>

000d92f2 <strncpy>:
   d92f2:	b510      	push	{r4, lr}
   d92f4:	3901      	subs	r1, #1
   d92f6:	4603      	mov	r3, r0
   d92f8:	b132      	cbz	r2, d9308 <strncpy+0x16>
   d92fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d92fe:	f803 4b01 	strb.w	r4, [r3], #1
   d9302:	3a01      	subs	r2, #1
   d9304:	2c00      	cmp	r4, #0
   d9306:	d1f7      	bne.n	d92f8 <strncpy+0x6>
   d9308:	441a      	add	r2, r3
   d930a:	2100      	movs	r1, #0
   d930c:	4293      	cmp	r3, r2
   d930e:	d100      	bne.n	d9312 <strncpy+0x20>
   d9310:	bd10      	pop	{r4, pc}
   d9312:	f803 1b01 	strb.w	r1, [r3], #1
   d9316:	e7f9      	b.n	d930c <strncpy+0x1a>

000d9318 <strrchr>:
   d9318:	b538      	push	{r3, r4, r5, lr}
   d931a:	4603      	mov	r3, r0
   d931c:	460c      	mov	r4, r1
   d931e:	b969      	cbnz	r1, d933c <strrchr+0x24>
   d9320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9324:	f7ff bf84 	b.w	d9230 <strchr>
   d9328:	1c43      	adds	r3, r0, #1
   d932a:	4605      	mov	r5, r0
   d932c:	4621      	mov	r1, r4
   d932e:	4618      	mov	r0, r3
   d9330:	f7ff ff7e 	bl	d9230 <strchr>
   d9334:	2800      	cmp	r0, #0
   d9336:	d1f7      	bne.n	d9328 <strrchr+0x10>
   d9338:	4628      	mov	r0, r5
   d933a:	bd38      	pop	{r3, r4, r5, pc}
   d933c:	2500      	movs	r5, #0
   d933e:	e7f5      	b.n	d932c <strrchr+0x14>

000d9340 <_strtol_l.isra.0>:
   d9340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9344:	4e3a      	ldr	r6, [pc, #232]	; (d9430 <_strtol_l.isra.0+0xf0>)
   d9346:	4686      	mov	lr, r0
   d9348:	468c      	mov	ip, r1
   d934a:	4660      	mov	r0, ip
   d934c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9350:	5da5      	ldrb	r5, [r4, r6]
   d9352:	f015 0508 	ands.w	r5, r5, #8
   d9356:	d1f8      	bne.n	d934a <_strtol_l.isra.0+0xa>
   d9358:	2c2d      	cmp	r4, #45	; 0x2d
   d935a:	d133      	bne.n	d93c4 <_strtol_l.isra.0+0x84>
   d935c:	f89c 4000 	ldrb.w	r4, [ip]
   d9360:	f04f 0801 	mov.w	r8, #1
   d9364:	f100 0c02 	add.w	ip, r0, #2
   d9368:	2b00      	cmp	r3, #0
   d936a:	d05c      	beq.n	d9426 <_strtol_l.isra.0+0xe6>
   d936c:	2b10      	cmp	r3, #16
   d936e:	d10c      	bne.n	d938a <_strtol_l.isra.0+0x4a>
   d9370:	2c30      	cmp	r4, #48	; 0x30
   d9372:	d10a      	bne.n	d938a <_strtol_l.isra.0+0x4a>
   d9374:	f89c 0000 	ldrb.w	r0, [ip]
   d9378:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d937c:	2858      	cmp	r0, #88	; 0x58
   d937e:	d14d      	bne.n	d941c <_strtol_l.isra.0+0xdc>
   d9380:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9384:	2310      	movs	r3, #16
   d9386:	f10c 0c02 	add.w	ip, ip, #2
   d938a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d938e:	3f01      	subs	r7, #1
   d9390:	2600      	movs	r6, #0
   d9392:	fbb7 f9f3 	udiv	r9, r7, r3
   d9396:	4630      	mov	r0, r6
   d9398:	fb03 7a19 	mls	sl, r3, r9, r7
   d939c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d93a0:	2d09      	cmp	r5, #9
   d93a2:	d818      	bhi.n	d93d6 <_strtol_l.isra.0+0x96>
   d93a4:	462c      	mov	r4, r5
   d93a6:	42a3      	cmp	r3, r4
   d93a8:	dd24      	ble.n	d93f4 <_strtol_l.isra.0+0xb4>
   d93aa:	1c75      	adds	r5, r6, #1
   d93ac:	d007      	beq.n	d93be <_strtol_l.isra.0+0x7e>
   d93ae:	4581      	cmp	r9, r0
   d93b0:	d31d      	bcc.n	d93ee <_strtol_l.isra.0+0xae>
   d93b2:	d101      	bne.n	d93b8 <_strtol_l.isra.0+0x78>
   d93b4:	45a2      	cmp	sl, r4
   d93b6:	db1a      	blt.n	d93ee <_strtol_l.isra.0+0xae>
   d93b8:	fb00 4003 	mla	r0, r0, r3, r4
   d93bc:	2601      	movs	r6, #1
   d93be:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d93c2:	e7eb      	b.n	d939c <_strtol_l.isra.0+0x5c>
   d93c4:	2c2b      	cmp	r4, #43	; 0x2b
   d93c6:	bf08      	it	eq
   d93c8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d93cc:	46a8      	mov	r8, r5
   d93ce:	bf08      	it	eq
   d93d0:	f100 0c02 	addeq.w	ip, r0, #2
   d93d4:	e7c8      	b.n	d9368 <_strtol_l.isra.0+0x28>
   d93d6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d93da:	2d19      	cmp	r5, #25
   d93dc:	d801      	bhi.n	d93e2 <_strtol_l.isra.0+0xa2>
   d93de:	3c37      	subs	r4, #55	; 0x37
   d93e0:	e7e1      	b.n	d93a6 <_strtol_l.isra.0+0x66>
   d93e2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d93e6:	2d19      	cmp	r5, #25
   d93e8:	d804      	bhi.n	d93f4 <_strtol_l.isra.0+0xb4>
   d93ea:	3c57      	subs	r4, #87	; 0x57
   d93ec:	e7db      	b.n	d93a6 <_strtol_l.isra.0+0x66>
   d93ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d93f2:	e7e4      	b.n	d93be <_strtol_l.isra.0+0x7e>
   d93f4:	1c73      	adds	r3, r6, #1
   d93f6:	d106      	bne.n	d9406 <_strtol_l.isra.0+0xc6>
   d93f8:	2322      	movs	r3, #34	; 0x22
   d93fa:	f8ce 3000 	str.w	r3, [lr]
   d93fe:	4638      	mov	r0, r7
   d9400:	b942      	cbnz	r2, d9414 <_strtol_l.isra.0+0xd4>
   d9402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9406:	f1b8 0f00 	cmp.w	r8, #0
   d940a:	d000      	beq.n	d940e <_strtol_l.isra.0+0xce>
   d940c:	4240      	negs	r0, r0
   d940e:	2a00      	cmp	r2, #0
   d9410:	d0f7      	beq.n	d9402 <_strtol_l.isra.0+0xc2>
   d9412:	b10e      	cbz	r6, d9418 <_strtol_l.isra.0+0xd8>
   d9414:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9418:	6011      	str	r1, [r2, #0]
   d941a:	e7f2      	b.n	d9402 <_strtol_l.isra.0+0xc2>
   d941c:	2430      	movs	r4, #48	; 0x30
   d941e:	2b00      	cmp	r3, #0
   d9420:	d1b3      	bne.n	d938a <_strtol_l.isra.0+0x4a>
   d9422:	2308      	movs	r3, #8
   d9424:	e7b1      	b.n	d938a <_strtol_l.isra.0+0x4a>
   d9426:	2c30      	cmp	r4, #48	; 0x30
   d9428:	d0a4      	beq.n	d9374 <_strtol_l.isra.0+0x34>
   d942a:	230a      	movs	r3, #10
   d942c:	e7ad      	b.n	d938a <_strtol_l.isra.0+0x4a>
   d942e:	bf00      	nop
   d9430:	000d994e 	.word	0x000d994e

000d9434 <strtol>:
   d9434:	4613      	mov	r3, r2
   d9436:	460a      	mov	r2, r1
   d9438:	4601      	mov	r1, r0
   d943a:	4802      	ldr	r0, [pc, #8]	; (d9444 <strtol+0x10>)
   d943c:	6800      	ldr	r0, [r0, #0]
   d943e:	f7ff bf7f 	b.w	d9340 <_strtol_l.isra.0>
   d9442:	bf00      	nop
   d9444:	2003e33c 	.word	0x2003e33c

000d9448 <__register_exitproc>:
   d9448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d944c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d9508 <__register_exitproc+0xc0>
   d9450:	4606      	mov	r6, r0
   d9452:	f8d8 0000 	ldr.w	r0, [r8]
   d9456:	461f      	mov	r7, r3
   d9458:	460d      	mov	r5, r1
   d945a:	4691      	mov	r9, r2
   d945c:	f000 f856 	bl	d950c <__retarget_lock_acquire_recursive>
   d9460:	4b25      	ldr	r3, [pc, #148]	; (d94f8 <__register_exitproc+0xb0>)
   d9462:	681c      	ldr	r4, [r3, #0]
   d9464:	b934      	cbnz	r4, d9474 <__register_exitproc+0x2c>
   d9466:	4c25      	ldr	r4, [pc, #148]	; (d94fc <__register_exitproc+0xb4>)
   d9468:	601c      	str	r4, [r3, #0]
   d946a:	4b25      	ldr	r3, [pc, #148]	; (d9500 <__register_exitproc+0xb8>)
   d946c:	b113      	cbz	r3, d9474 <__register_exitproc+0x2c>
   d946e:	681b      	ldr	r3, [r3, #0]
   d9470:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d9474:	6863      	ldr	r3, [r4, #4]
   d9476:	2b1f      	cmp	r3, #31
   d9478:	dd07      	ble.n	d948a <__register_exitproc+0x42>
   d947a:	f8d8 0000 	ldr.w	r0, [r8]
   d947e:	f000 f847 	bl	d9510 <__retarget_lock_release_recursive>
   d9482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d948a:	b34e      	cbz	r6, d94e0 <__register_exitproc+0x98>
   d948c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d9490:	b988      	cbnz	r0, d94b6 <__register_exitproc+0x6e>
   d9492:	4b1c      	ldr	r3, [pc, #112]	; (d9504 <__register_exitproc+0xbc>)
   d9494:	b923      	cbnz	r3, d94a0 <__register_exitproc+0x58>
   d9496:	f8d8 0000 	ldr.w	r0, [r8]
   d949a:	f000 f838 	bl	d950e <__retarget_lock_release>
   d949e:	e7f0      	b.n	d9482 <__register_exitproc+0x3a>
   d94a0:	f44f 7084 	mov.w	r0, #264	; 0x108
   d94a4:	f7fc fc5a 	bl	d5d5c <malloc>
   d94a8:	2800      	cmp	r0, #0
   d94aa:	d0f4      	beq.n	d9496 <__register_exitproc+0x4e>
   d94ac:	2300      	movs	r3, #0
   d94ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d94b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d94b6:	6863      	ldr	r3, [r4, #4]
   d94b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d94bc:	2201      	movs	r2, #1
   d94be:	409a      	lsls	r2, r3
   d94c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d94c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d94c8:	4313      	orrs	r3, r2
   d94ca:	2e02      	cmp	r6, #2
   d94cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d94d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d94d4:	bf02      	ittt	eq
   d94d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d94da:	431a      	orreq	r2, r3
   d94dc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d94e0:	6863      	ldr	r3, [r4, #4]
   d94e2:	f8d8 0000 	ldr.w	r0, [r8]
   d94e6:	1c5a      	adds	r2, r3, #1
   d94e8:	3302      	adds	r3, #2
   d94ea:	6062      	str	r2, [r4, #4]
   d94ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d94f0:	f000 f80e 	bl	d9510 <__retarget_lock_release_recursive>
   d94f4:	2000      	movs	r0, #0
   d94f6:	e7c6      	b.n	d9486 <__register_exitproc+0x3e>
   d94f8:	2003e7e4 	.word	0x2003e7e4
   d94fc:	2003e758 	.word	0x2003e758
   d9500:	00000000 	.word	0x00000000
   d9504:	000d5d5d 	.word	0x000d5d5d
   d9508:	2003e3a0 	.word	0x2003e3a0

000d950c <__retarget_lock_acquire_recursive>:
   d950c:	4770      	bx	lr

000d950e <__retarget_lock_release>:
   d950e:	4770      	bx	lr

000d9510 <__retarget_lock_release_recursive>:
   d9510:	4770      	bx	lr

000d9512 <link_code_end>:
	...

000d9514 <dynalib_user>:
   d9514:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9524:	0000 0000 6574 706d 665f 6800 6d75 6469     ....temp_f.humid
   d9534:	7469 0079 6973 6e67 6c61 735f 7274 6e65     ity.signal_stren
   d9544:	7467 0068 6973 6e67 6c61 715f 6175 696c     gth.signal_quali
   d9554:	7974 7000 7265 6563 746e 635f 6168 6772     ty.percent_charg
   d9564:	0065 6f6c 676e 7469 6475 0065 616c 6974     e.longitude.lati
   d9574:	7574 6564 6100 746c 7469 6475 0065 6425     tude.altitude.%d
   d9584:	7400 6d65 5f70 0063 6f76 746c 6761 0065     .temp_c.voltage.
   d9594:	7165 6975 6d70 6e65 5f74 6572 6461 6e69     equipment_readin
   d95a4:	7367 0000                                   gs..

000d95a8 <_ZTVN5spark10LogHandlerE>:
	...
   d95b8:	40a5 000d 40c9 000d                         .@...@..

000d95c0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d95c8:	4101 000d 4135 000d 7a01 000d 40cb 000d     .A..5A...z...@..

000d95d8 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d95e0:	40d5 000d 40e9 000d 5047 4d52 0043 4e47     .@...@..GPRMC.GN
   d95f0:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   d9600:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9610:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9620:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9630:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   d9640:	7525 003e                                   %u>.

000d9644 <_ZTVN8particle11SPISettingsE>:
	...
   d964c:	4e39 000d 4e0b 000d 4e0d 000d 755c 3025     9N...N...N..\u%0
   d965c:	5834 2500 2a2e 666c 2500 666c 0000 0000     4X.%.*lf.%lf....

000d966c <_ZTV10JsonBuffer>:
	...
   d9674:	558d 000d 55a9 000d                         .U...U..

000d967c <_ZTV10JsonWriter>:
	...
   d9684:	55bd 000d 55d1 000d                         .U...U..

000d968c <_ZTVN5spark13CellularClassE>:
	...
   d9694:	5eaf 000d 5ea5 000d 5e9b 000d 5e51 000d     .^...^...^..Q^..
   d96a4:	5e8f 000d 5e83 000d 7d59 000d 7d61 000d     .^...^..Y}..a}..
   d96b4:	5e77 000d 5e6f 000d 5e65 000d 5e5b 000d     w^..o^..e^..[^..
   d96c4:	7d91 000d                                   .}..

000d96c8 <_ZTV14CellularSignal>:
	...
   d96d0:	5f5d 000d 5f85 000d 5f5f 000d 5f95 000d     ]_..._..__..._..
   d96e0:	5fc9 000d 5ff5 000d 6029 000d 6079 000d     ._..._..)`..y`..
   d96f0:	5f63 000d 5f7f 000d fffc ffff 0000 0000     c_..._..........
   d9700:	609f 000d                                   .`..

000d9704 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d970c:	60bf 000d 60c5 000d 6115 000d 60d3 000d     .`...`...a...`..
   d971c:	60c1 000d                                   .`..

000d9720 <_ZTVN5spark13EthernetClassE>:
	...
   d9728:	668b 000d 6681 000d 6677 000d 666d 000d     .f...f..wf..mf..
   d9738:	6661 000d 6655 000d 7d59 000d 7d61 000d     af..Uf..Y}..a}..
   d9748:	6649 000d 6641 000d 6637 000d 662d 000d     If..Af..7f..-f..
   d9758:	7d91 000d                                   .}..

000d975c <_ZTV7TwoWire>:
	...
   d9764:	67b1 000d 67fb 000d 67d3 000d 67b3 000d     .g...g...g...g..
   d9774:	67db 000d 67e3 000d 67eb 000d 67f3 000d     .g...g...g...g..

000d9784 <_ZTV9IPAddress>:
	...
   d978c:	690b 000d 68fb 000d 68fd 000d 7525 7500     .i...h...h..%u.u
   d979c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   d97ac:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   d97bc:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d97cc:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   d97dc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d97ec:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d97fc:	006d 6e6c 6600 006e 0074 6f63 6564 6400     m.ln.fn.t.code.d
   d980c:	7465 6961 006c 0000                         etail...

000d9814 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d981c:	6dc9 000d 6def 000d 6dad 000d 6a0d 000d     .m...m...m...j..

000d982c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9834:	721d 000d 7235 000d 7a01 000d 40cb 000d     .r..5r...z...@..

000d9844 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d984c:	7249 000d 725d 000d 7ba5 000d 6db5 000d     Ir..]r...{...m..

000d985c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9864:	6dc7 000d 6dfd 000d 793d 000d 6db7 000d     .m...m..=y...m..

000d9874 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d987c:	6dc5 000d 6e0b 000d 7165 000d 6e29 000d     .m...n..eq..)n..

000d988c <_ZTVN5spark12NetworkClassE>:
	...
   d9894:	7d19 000d 7d23 000d 7d2d 000d 7d37 000d     .}..#}..-}..7}..
   d98a4:	7d41 000d 7d4d 000d 7d59 000d 7d61 000d     A}..M}..Y}..a}..
   d98b4:	7d69 000d 7d75 000d 7d7d 000d 7d87 000d     i}..u}..}}...}..
   d98c4:	7d91 000d                                   .}..

000d98c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d98c8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d98d8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d98e8:	6d69 0065                                   ime.

000d98ec <_ZTV11USARTSerial>:
	...
   d98f4:	8329 000d 8397 000d 836f 000d 7e79 000d     ).......o...y~..
   d9904:	833f 000d 835b 000d 834d 000d 8369 000d     ?...[...M...i...
   d9914:	832b 000d 8331 000d                         +...1...

000d991c <_ZTV9USBSerial>:
	...
   d9924:	8437 000d 849f 000d 8475 000d 7e79 000d     7.......u...y~..
   d9934:	8467 000d 8439 000d 8449 000d 8499 000d     g...9...I.......
   d9944:	8459 000d 8431 000d                         Y...1...

000d994c <_ZSt7nothrow>:
	...

000d994d <_ctype_>:
   d994d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d995d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d996d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d997d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d998d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d999d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d99ad:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d99bd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d99cd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9a4e <link_const_variable_data_end>:
	...

000d9a50 <link_constructors_location>:
   d9a50:	000d47a1 	.word	0x000d47a1
   d9a54:	000d5e41 	.word	0x000d5e41
   d9a58:	000d5f2d 	.word	0x000d5f2d
   d9a5c:	000d6695 	.word	0x000d6695
   d9a60:	000d79f1 	.word	0x000d79f1
   d9a64:	000d7e65 	.word	0x000d7e65
   d9a68:	000d7fa1 	.word	0x000d7fa1
   d9a6c:	000d82f1 	.word	0x000d82f1
   d9a70:	000d8315 	.word	0x000d8315

000d9a74 <link_constructors_end>:
	...
